char timesync_str[] = "<html lang=\"en\"><head>"
	    "<meta charset=\"UTF-8\">"
	    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
	    "<title>Time Sync</title>"
	    "<style>"
	        "body {"
	            "font-family: Arial, sans-serif;"
		"margin:0;"
	        "}"
	        ".container {"
	            "max-width: 600px;"
	            "margin: auto;"
	            "padding: 20px;"
	            "border: 1px solid #CCCCCC;"
	            "border-radius: 13px;"
	            "box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);"
	            "background-color: #FBFBFB;"
	            "background-image: none;"
	        "}"
	        ".form-group {"
	            "display: flex;"
	            "align-items: center;"
	            "margin-bottom: 10px;"
	        "}"
	        ".form-group label {"
	            "flex: 1;"
	            "margin-bottom: 0;"
	        "}"
	        ".form-group .switch{"
	            "flex : .11;"
	        "}"
	        ".form-group input[type=\"datetime-local\"] {"
	            "flex: .7;"
	        "}"
	        "#TimeZone {"
	            "flex: 0.1;"
	            "width: 400px;"
	        "}"
	        "input[type=\"datetime-local\"] {"
	            "padding: 10px;"
	            "border: 1px solid #ccc;"
	            "border-radius: 4px;"
	            "width: 100%;"
	        "}"
	        ".switch {"
	            "position: relative;"
	            "display: inline-block;"
	            "width: 20px;"
	            "height: 34px;"
	        "}"
	        ".switch input {"
	            "opacity: 0;"
	            "width: 0;"
	            "height: 0;"
	        "}"
	        ".slider {"
	            "position: absolute;"
	            "cursor: pointer;"
	            "top: 0;"
	            "left: 0;"
	            "right: 0;"
	            "bottom: 0;"
	            "background-color: #ccc;"
	            "transition: .4s;"
	            "border-radius: 34px;"
	        "}"
	        ".slider:before {"
	            "position: absolute;"
	            "content: \"\";"
	            "height: 26px;"
	            "width: 26px;"
	            "left: 4px;"
	            "bottom: 4px;"
	            "background-color: white;"
	            "transition: .4s;"
	            "border-radius: 50%;"
	        "}"
	        "input:checked + .slider {"
	            "background-color: #007BFF;"
	        "}"
	        "input:checked + .slider:before {"
	            "transform: translateX(26px);"
	        "}"
	        "button {"
	            "width: 100%;"
	            "margin: auto;"
	            "display: block;"
	            "padding: 10px;"
	            "background-color: #007BFF;"
	            "color: white;"
	            "border: none;"
	            "border-radius: 4px;"
	            "cursor: pointer;"
	            "margin-top: 20px;"
	        "}"
	        "button:hover {"
	            "background-color: #0056b3;"
	        "}"
	        "#Heading {"
	            "color: #696969;"
	            "font-family: Roboto;"
	            "font-weight: bold;"
	            "font-style: normal;"
	            "font-size: 27px;"
	            "margin: 0;"
	            "text-align: center;"
	        "}"
	        "#Line {"
	            "border-color: #A0A0A0;"
	            "border-style: solid;"
	            "border-bottom-width: 3px;"
	            "border-top: 0px;"
	            "border-left: 0px;"
	            "border-right: 0px;"
	            "height: 0 !important;"
	            "line-height: 0px !important;"
	            "margin: 0 auto;"
	            "padding: 0;"
	            "width: 50%;"
	            "margin-top: 10px;"
	            "margin-bottom: 20px;"
	        "}"
		".navbar {"
							"	overflow: hidden;"
							"	background-color: #333;"
							"}"
							".navbar a {"
							"	float: left;"
							"	display: block;"
							"	color: white;"
							"	text-align: center;"
							"   font-size : large;"
							"	padding: 14px 20px;"
							"	text-decoration: none;"
							"}"
							".navbar a:hover {"
							"	background-color: #ddd;"
							"	color: black;"
							"}"
	    "</style>"
	"</head>"
		"<body onload=\"onWindowLoad()\">"
		"<div class=\"navbar\">"\
		"    <a href=\"/main.html\">Home</a>"\
		"    <a href=\"/networksettings.html\">Network Settings</a>"\
		"    <a href=\"/timesyncpage\">Time Sync</a>"\
		"    <a href=\"/update_firmware.html\">Update Firmware</a>"\
		"</div>"\
	    "<div class=\"container\" id=\"wb_Form3\">"
	        "<h1 id=\"Heading\">One Shot Mode</h1>"
	        "<hr id=\"Line\">"
	        "<div class=\"form-group\">"
	            "<label for=\"timeSyncOnSwitch\">Time Sync On:</label>"
	            "<label class=\"switch\">"
	                "<input type=\"checkbox\" id=\"timeSyncOnSwitch\">"
	                "<span class=\"slider\"></span>"
	            "</label>"
	        "</div>"
	        "<div class=\"form-group\">"
	            "<label for=\"timeSyncOnDateTime\">Time Sync On Date Time:</label>"
	            "<input type=\"datetime-local\" id=\"timeSyncOnDateTime\" name=\"timeSyncOnDateTime\" min=\"2024-09-25T15:33\">"
	        "</div>"
	        "<div class=\"form-group\">"
	            "<label for=\"timeSyncOffSwitch\">Time Sync Off:</label>"
	            "<label class=\"switch\">"
	                "<input type=\"checkbox\" id=\"timeSyncOffSwitch\">"
	                "<span class=\"slider\"></span>"
	            "</label>"
	        "</div>"
	        "<div class=\"form-group\">"
	            "<label for=\"timeSyncOffDateTime\">Time Sync Off Date Time:</label>"
	            "<input type=\"datetime-local\" id=\"timeSyncOffDateTime\" name=\"timeSyncOffDateTime\" min=\"2024-09-25T15:33\">"
	        "</div>"
	        "<div class=\"form-group\">"
	            "<label for=\"TimeZone\">Select Time Zone:</label>"
	            "<select id=\"TimeZone\" name=\"TimeZone\">"
	                "<option value=\"0\">UTC-12:00 Baker Island, Howland Island (both uninhabited)</option>"
	                "<option value=\"1\">UTC-11:00 American Samoa, Samoa</option>"
	                "<option value=\"2\">UTC-10:00 (Summer)French Polynesia (most), United States (Aleutian Islands, Hawaii)"
	                "</option>"
	                "<option value=\"3\">UTC-09:30 Marquesas Islands</option>"
	                "<option value=\"4\">UTC-09:00 Gambier Islands;(Summer)United States (most of Alaska)</option>"
	                "<option value=\"5\">UTC-08:00 (Summer)Canada (most of British Columbia), Mexico (Baja California)</option>"
	                "<option value=\"6\">UTC-08:00 United States (California, most of Nevada, most of Oregon, Washington"
	                    "(state))</option>"
	                "<option value=\"7\">UTC-07:00 Mexico (Sonora), United States (Arizona); (Summer)Canada (Alberta)</option>"
	                "<option value=\"8\">UTC-07:00 Mexico (Chihuahua), United States (Colorado)</option>"
	                "<option value=\"9\">UTC-06:00 Costa Rica, El Salvador, Ecuador (Galapagos Islands), Guatemala, Honduras"
	                "</option>"
	                "<option value=\"10\">UTC-06:00 Mexico (most), Nicaragua;(Summer)Canada (Manitoba, Saskatchewan), United"
	                    "States (Illinois, most of Texas)</option>"
	                "<option value=\"11\">UTC-05:00 Colombia, Cuba, Ecuador (continental), Haiti, Jamaica, Panama, Peru"
	                "</option>"
	                "<option value=\"12\">UTC-05:00 (Summer)Canada (most of Ontario, most of Quebec)</option>"
	                "<option value=\"13\">UTC-05:00 United States (most of Florida, Georgia, Massachusetts, most of Michigan,"
	                    "New York, North Carolina, Ohio, Washington D.C.)</option>"
	                "<option value=\"14\">UTC-04:30 Venezuela</option>"
	                "<option value=\"15\">UTC-04:00 Bolivia, Brazil (Amazonas), Chile (continental), Dominican Republic, Canada"
	                    "(Nova Scotia), Paraguay</option>"
	                "<option value=\"16\">UTC-04:00 Puerto Rico, Trinidad and Tobago</option>"
	                "<option value=\"17\">UTC-03:30 Canada (Newfoundland)</option>"
	                "<option value=\"18\">UTC-03:00 Argentina; (Summer) Brazil (Brasilia, Rio de Janeiro, Sao Paulo), most of"
	                    "Greenland, Uruguay</option>"
	                "<option value=\"19\">UTC-02:00 Brazil (Fernando de Noronha), South Georgia and the South Sandwich Islands"
	                "</option>"
	                "<option value=\"20\">UTC-01:00 Portugal (Azores), Cape Verde</option>"
	                "<option value=\"21\">UTC±00:00 Cote d\'Ivoire, Faroe Islands, Ghana, Iceland, Senegal; (Summer) Ireland,"
	                    "Portugal (continental and Madeira)</option>"
	                "<option value=\"22\">UTC±00:00 Spain (Canary Islands), Morocco, United Kingdom</option>"
	                "<option value=\"23\">UTC+01:00 Angola, Cameroon, Nigeria, Tunisia; (Summer)Albania, Algeria, Austria,"
	                    "Belgium, Bosnia and Herzegovina</option>"
	                "<option value=\"24\">UTC+01:00 Spain (continental), Croatia, Czech Republic, Denmark, Germany, Hungary,"
	                    "Italy, Kinshasa, Kosovo</option>"
	                "<option value=\"25\">UTC+01:00 Macedonia, France (metropolitan), the Netherlands, Norway, Poland, Serbia,"
	                    "Slovakia, Slovenia, Sweden, Switzerland</option>"
	                "<option value=\"26\">UTC+02:00 Libya, Egypt, Malawi, Mozambique, South Africa, Zambia, Zimbabwe,"
	                    "(Summer)Bulgaria, Cyprus, Estonia</option>"
	                "<option value=\"27\">UTC+02:00 Finland, Greece, Israel, Jordan, Latvia, Lebanon, Lithuania, Moldova,"
	                    "Palestine, Romania, Syria, Turkey, Ukraine</option>"
	                "<option value=\"28\">UTC+03:00 Belarus, Djibouti, Eritrea, Ethiopia, Iraq, Kenya, Madagascar, Russia"
	                    "(Kaliningrad Oblast), Saudi Arabia</option>"
	                "<option value=\"29\">UTC+03:00 South Sudan, Sudan, Somalia, Tanzania, Uganda, Yemen</option>"
	                "<option value=\"30\">UTC+03:30 (Summer)Iran</option>"
	                "<option value=\"31\">UTC+04:00 Armenia, Azerbaijan, Georgia, Mauritius, Oman, Russia (European),"
	                    "Seychelles, United Arab Emirates</option>"
	                "<option value=\"32\">UTC+04:30 Afghanistan</option>"
	                "<option value=\"33\">UTC+05:00 Kazakhstan (West), Maldives, Pakistan, Uzbekistan</option>"
	                "<option value=\"34\">UTC+05:30 India, Sri Lanka</option>"
	                "<option value=\"35\">UTC+05:45 Nepal</option>"
	                "<option value=\"36\">UTC+06:00 Kazakhstan (most), Bangladesh, Russia (Ural: Sverdlovsk Oblast, Chelyabinsk"
	                    "Oblast)</option>"
	                "<option value=\"37\">UTC+06:30 Cocos Islands, Myanmar</option>"
	                "<option value=\"38\">UTC+07:00 Jakarta, Russia (Novosibirsk Oblast), Thailand, Vietnam</option>"
	                "<option value=\"39\">UTC+08:00 China, Hong Kong, Russia (Krasnoyarsk Krai), Malaysia, Philippines,"
	                    "Singapore, Taiwan, most of Mongolia, Western Australia</option>"
	                "<option value=\"40\">UTC+09:00 Korea, East Timor, Russia (Irkutsk Oblast), Japan</option>"
	                "<option value=\"41\">UTC+09:30 Australia (Northern Territory);(Summer)Australia (South Australia)</option>"
	                "<option value=\"42\">UTC+10:00 Russia (Zabaykalsky Krai); (Summer)Australia (New South Wales, Queensland,"
	                    "Tasmania, Victoria)</option>"
	                "<option value=\"43\">UTC+10:30 Lord Howe Island</option>"
	                "<option value=\"44\">UTC+11:00 New Caledonia, Russia (Primorsky Krai), Solomon Islands</option>"
	                "<option value=\"45\">UTC+11:30 Norfolk Island</option>"
	                "<option value=\"46\">UTC+12:00 Fiji, Russia (Kamchatka Krai);(Summer)New Zealand</option>"
	                "<option value=\"47\">UTC+12:45 (Summer)New Zealand</option>"
	                "<option value=\"48\">UTC+13:00 Tonga</option>"
	                "<option value=\"49\">UTC+14:00 Kiribati (Line Islands)</option>"
	            "</select>"
	        "</div>"
	        "<button id=\"mybutton\" onclick=\"validateForm()\">Submit</button>"
	    "</div>"
	    "<br>"
	    "<br>"
	    "<div class=\"container\" id=\"Alarm\">"
	        "<h1 id=\"Heading\">Recursion Mode</h1>"
	        "<hr id=\"Line\">"
	        "<form id=\"alarmForm\">"
	            "<table style=\"width: 100%;\">"
	                "<tbody>"
	                    "<tr>"
	                        "<th>Time sync on time</th>"
	                        "<th>Time sync on Days</th>"
	                    "</tr>"
	                    "<tr>"
	                        "<td style=\"text-align: center;\">"
	                            "<label for=\"alarmTime_on\">Time:</label>"
	                            "<input type=\"time\" id=\"alarmTime_on\" name=\"alarmTime\" required=\"\"><br><br>"
	                        "</td>"
	                        "<td style=\"padding-left: 9em;\">"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"sunday_on\"> Sunday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"monday_on\"> Monday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"tuesday_on\"> Tuesday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"wednesday_on\"> Wednesday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"thursday_on\"> Thursday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"friday_on\"> Friday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"saturday_on\"> Saturday</label><br><br>"
	                        "</td>"
	                    "</tr>"
	                    "<tr>"
	                        "<th>Time Sync off time</th>"
	                        "<th>Time sync off Days</th>"
	                    "</tr>"
	                    "<tr>"
	                        "<td style=\"text-align: center;\">"
	                            "<label for=\"alarmTime_off\">Time:</label>"
	                            "<input type=\"time\" id=\"alarmTime_off\" name=\"alarmTime\" required=\"\"><br><br>"
	                        "</td>"
	                        "<td style=\"padding-left: 9em;\">"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"sunday_off\"> Sunday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"monday_off\"> Monday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"tuesday_off\"> Tuesday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"wednesday_off\"> Wednesday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"thursday_off\"> Thursday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"friday_off\"> Friday</label><br>"
	                            "<label><input type=\"checkbox\" name=\"alarmDays\" value=\"saturday_off\">"
	                                "Saturday</label><br><br>"
	                        "</td>"
	                    "</tr>"
	                "</tbody>"
	            "</table>"
	            "<button type=\"button\" onclick=\"setAlarm()\">Set Alarm</button>"
	        "</form>"
	    "</div>"
	    "<script>"
	        "function load_alarm_data() {"
	            "fetch(\'/get_alarm\')"
	                ".then(response => {"
	                    "if (!response.ok) {"
	                        "throw new Error(\'Network response was not ok\');"
	                    "}"
	                    "return response.text();"
	                "})"
	                ".then(data => {"
	                    "console.log(\'Alarm data received:\', data);"
	                    "const lines = data.trim().split(\'\n\');"
	                    "const [hh_on, mm_on, hh_off, mm_off, sun_on, mon_on, tue_on, wed_on, thu_on, fri_on, sat_on, sun_off, mon_off, tue_off, wed_off, thu_off, fri_off, sat_off] = lines[0].split(\',\');"
	                    "const formattedHH_on = hh_on.toString().padStart(2, \"0\");"
	                    "const formattedMM_on = mm_on.toString().padStart(2, \"0\");"
	                    "const formattedHH_off = hh_off.toString().padStart(2, \"0\");"
	                    "const formattedMM_off = mm_off.toString().padStart(2, \"0\");"
	                    "const timeInputOn = document.getElementById(\"alarmTime_on\");"
	                    "timeInputOn.value = `${formattedHH_on}:${formattedMM_on}`;"
	                    "const timeInputOff = document.getElementById(\"alarmTime_off\");"
	                    "timeInputOff.value = `${formattedHH_off}:${formattedMM_off}`;"
	                    "const checkboxes = document.querySelectorAll(\'input[name=\"alarmDays\"]\');"
	                    "for (const checkbox of checkboxes) {"
	                        "const day = checkbox.value;"
	                        "let isChecked = 0;"
	                        "switch (day) {"
	                            "case \"sunday_on\":"
	                                "isChecked = sun_on;"
	                                "break;"
	                            "case \"monday_on\":"
	                                "isChecked = mon_on;"
	                                "break;"
	                            "case \"tuesday_on\":"
	                                "isChecked = tue_on;"
	                                "break;"
	                            "case \"wednesday_on\":"
	                                "isChecked = wed_on;"
	                                "break;"
	                            "case \"thursday_on\":"
	                                "isChecked = thu_on;"
	                                "break;"
	                            "case \"friday_on\":"
	                                "isChecked = fri_on;"
	                                "break;"
	                            "case \"saturday_on\":"
	                                "isChecked = sat_on;"
	                                "break;"
	                            "case \"sunday_off\":"
	                                "isChecked = sun_off;"
	                                "break;"
	                            "case \"monday_off\":"
	                                "isChecked = mon_off;"
	                                "break;"
	                            "case \"tuesday_off\":"
	                                "isChecked = tue_off;"
	                                "break;"
	                            "case \"wednesday_off\":"
	                                "isChecked = wed_off;"
	                                "break;"
	                            "case \"thursday_off\":"
	                                "isChecked = thu_off;"
	                                "break;"
	                            "case \"friday_off\":"
	                                "isChecked = fri_off;"
	                                "break;"
	                            "case \"saturday_off\":"
	                                "isChecked = sat_off;"
	                                "break;"
	                        "}"
	                        "checkbox.checked = isChecked === \"1\";"
	                    "}"
	                "})"
	                ".catch(error => {"
	                    "console.error(\'Error:\', error);"
	                "});"
	        "}"
	        "function setAlarm() {"
	            "const alarmTimeInput = document.getElementById(\'alarmTime_on\').value;"
	            "const alarmDaysCheckboxes = document.querySelectorAll(\'input[name=\"alarmDays\"]\');"
	            "const [hours_on, minutes_on] = alarmTimeInput.split(\':\');"
	            "const [hours_off, minutes_off] = document.getElementById(\'alarmTime_off\').value.split(\':\');"
	            "const now = new Date();"
	            "const dayValues = Array.from(alarmDaysCheckboxes).map(checkbox => checkbox.checked ? \'1\' : \'0\');"
	            "const csvString = `${hours_on}z${minutes_on}z${hours_off}z${minutes_off}z${dayValues.join(\'z\')}`;"
	            "console.log(\"CSV Output:\");"
	            "console.log(csvString);"
	            "var url = new URL(\'/set_alarm\', window.location.origin);"
	            "url.searchParams.append(\'value\', csvString);"
	            "fetch(url)"
	                ".then(response => {"
	                    "if (response.ok) {"
	                        "alert(\'Setting Alarm Successful\');"
	                    "}"
	                    "else {"
	                        "alert(\'Setting Alarm Failed\');"
	                    "}"
	                    "window.location.href = \"/\";"
	                "});"
	        "}"
	        "function validateForm() {"
	            "var onDateTime = document.getElementById(\"timeSyncOnDateTime\").value;"
	            "var offDateTime = document.getElementById(\"timeSyncOffDateTime\").value;"
	            "var onSwitch = document.getElementById(\"timeSyncOnSwitch\").checked ? 1 : 0;"
	            "var offSwitch = document.getElementById(\"timeSyncOffSwitch\").checked ? 1 : 0;"
	            "var onEpoch = onDateTime ? new Date(onDateTime).getTime() / 1000 : null;"
	            "var offEpoch = offDateTime ? new Date(offDateTime).getTime() / 1000 : null;"
	            "var url = new URL(\'/timesync\', window.location.origin);"
	            "url.searchParams.append(\'onSwitch\', onSwitch);"
	            "url.searchParams.append(\'onDateTime\', onEpoch);"
	            "url.searchParams.append(\'offSwitch\', offSwitch);"
	            "url.searchParams.append(\'offDateTime\', offEpoch);"
	            "url.searchParams.append(\'timezone\', document.getElementById(\"TimeZone\").value);"
	            "fetch(url)"
	                ".then(response => {"
	                    "if (response.ok) {"
	                        "alert(\'Time Sync Successful\');"
	                    "}"
	                    "else {"
	                        "alert(\'Time Sync Failed\');"
	                    "}"
	                    "window.location.href = \"/\";"
	                "});"
	            "return true;"
	        "}"
	        "function setMinDateTime() {"
	            "var now = new Date();"
	            "var nowString = now.toISOString().slice(0, 16);"
	            "document.getElementById(\"timeSyncOnDateTime\").min = nowString;"
	            "document.getElementById(\"timeSyncOffDateTime\").min = nowString;"
	        "}"
	        "function populateTimezones() {"
	            "var timezones = ["
	                "{ value: 0, label: \"UTC-12:00 Baker Island, Howland Island (both uninhabited)\" },"
	                "{ value: 1, label: \"UTC-11:00 American Samoa, Samoa\" },"
	                "{ value: 2, label: \"UTC-10:00 (Summer)French Polynesia (most), United States (Aleutian Islands, Hawaii)\" },"
	                "{ value: 3, label: \"UTC-09:30 Marquesas Islands\" },"
	                "{ value: 4, label: \"UTC-09:00 Gambier Islands;(Summer)United States (most of Alaska)\" },"
	                "{ value: 5, label: \"UTC-08:00 (Summer)Canada (most of British Columbia), Mexico (Baja California)\" },"
	                "{ value: 6, label: \"UTC-08:00 United States (California, most of Nevada, most of Oregon, Washington (state))\" },"
	                "{ value: 7, label: \"UTC-07:00 Mexico (Sonora), United States (Arizona); (Summer)Canada (Alberta)\" },"
	                "{ value: 8, label: \"UTC-07:00 Mexico (Chihuahua), United States (Colorado)\" },"
	                "{ value: 9, label: \"UTC-06:00 Costa Rica, El Salvador, Ecuador (Galapagos Islands), Guatemala, Honduras\" },"
	                "{ value: 10, label: \"UTC-06:00 Mexico (most), Nicaragua;(Summer)Canada (Manitoba, Saskatchewan), United States (Illinois, most of Texas)\" },"
	                "{ value: 11, label: \"UTC-05:00 Colombia, Cuba, Ecuador (continental), Haiti, Jamaica, Panama, Peru\" },"
	                "{ value: 12, label: \"UTC-05:00 (Summer)Canada (most of Ontario, most of Quebec)\" },"
	                "{ value: 13, label: \"UTC-05:00 United States (most of Florida, Georgia, Massachusetts, most of Michigan, New York, North Carolina, Ohio, Washington D.C.)\" },"
	                "{ value: 14, label: \"UTC-04:30 Venezuela\" },"
	                "{ value: 15, label: \"UTC-04:00 Bolivia, Brazil (Amazonas), Chile (continental), Dominican Republic, Canada (Nova Scotia), Paraguay\" },"
	                "{ value: 16, label: \"UTC-04:00 Puerto Rico, Trinidad and Tobago\" },"
	                "{ value: 17, label: \"UTC-03:30 Canada (Newfoundland)\" },"
	                "{ value: 18, label: \"UTC-03:00 Argentina; (Summer) Brazil (Brasilia, Rio de Janeiro, Sao Paulo), most of Greenland, Uruguay\" },"
	                "{ value: 19, label: \"UTC-02:00 Brazil (Fernando de Noronha), South Georgia and the South Sandwich Islands\" },"
	                "{ value: 20, label: \"UTC-01:00 Portugal (Azores), Cape Verde\" },"
	                "{ value: 21, label: \"UTC±00:00 Cote d\'Ivoire, Faroe Islands, Ghana, Iceland, Senegal; (Summer) Ireland, Portugal (continental and Madeira)\" },"
	                "{ value: 22, label: \"UTC±00:00 Spain (Canary Islands), Morocco, United Kingdom\" },"
	                "{ value: 23, label: \"UTC+01:00 Angola, Cameroon, Nigeria, Tunisia; (Summer)Albania, Algeria, Austria, Belgium, Bosnia and Herzegovina\" },"
	                "{ value: 24, label: \"UTC+01:00 Spain (continental), Croatia, Czech Republic, Denmark, Germany, Hungary, Italy, Kinshasa, Kosovo\" },"
	                "{ value: 25, label: \"UTC+01:00 Macedonia, France (metropolitan), the Netherlands, Norway, Poland, Serbia, Slovakia, Slovenia, Sweden, Switzerland\" },"
	                "{ value: 26, label: \"UTC+02:00 Libya, Egypt, Malawi, Mozambique, South Africa, Zambia, Zimbabwe, (Summer)Bulgaria, Cyprus, Estonia\" },"
	                "{ value: 27, label: \"UTC+02:00 Finland, Greece, Israel, Jordan, Latvia, Lebanon, Lithuania, Moldova, Palestine, Romania, Syria, Turkey, Ukraine\" },"
	                "{ value: 28, label: \"UTC+03:00 Belarus, Djibouti, Eritrea, Ethiopia, Iraq, Kenya, Madagascar, Russia (Kaliningrad Oblast), Saudi Arabia\" },"
	                "{ value: 29, label: \"UTC+03:00 South Sudan, Sudan, Somalia, Tanzania, Uganda, Yemen\" },"
	                "{ value: 30, label: \"UTC+03:30 (Summer)Iran\" },"
	                "{ value: 31, label: \"UTC+04:00 Armenia, Azerbaijan, Georgia, Mauritius, Oman, Russia (European), Seychelles, United Arab Emirates\" },"
	                "{ value: 32, label: \"UTC+04:30 Afghanistan\" },"
	                "{ value: 33, label: \"UTC+05:00 Kazakhstan (West), Maldives, Pakistan, Uzbekistan\" },"
	                "{ value: 34, label: \"UTC+05:30 India, Sri Lanka\" },"
	                "{ value: 35, label: \"UTC+05:45 Nepal\" },"
	                "{ value: 36, label: \"UTC+06:00 Kazakhstan (most), Bangladesh, Russia (Ural: Sverdlovsk Oblast, Chelyabinsk Oblast)\" },"
	                "{ value: 37, label: \"UTC+06:30 Cocos Islands, Myanmar\" },"
	                "{ value: 38, label: \"UTC+07:00 Jakarta, Russia (Novosibirsk Oblast), Thailand, Vietnam\" },"
	                "{ value: 39, label: \"UTC+08:00 China, Hong Kong, Russia (Krasnoyarsk Krai), Malaysia, Philippines, Singapore, Taiwan, most of Mongolia, Western Australia\" },"
	                "{ value: 40, label: \"UTC+09:00 Korea, East Timor, Russia (Irkutsk Oblast), Japan\" },"
	                "{ value: 41, label: \"UTC+09:30 Australia (Northern Territory);(Summer)Australia (South Australia)\" },"
	                "{ value: 42, label: \"UTC+10:00 Russia (Zabaykalsky Krai); (Summer)Australia (New South Wales, Queensland, Tasmania, Victoria)\" },"
	                "{ value: 43, label: \"UTC+10:30 Lord Howe Island\" },"
	                "{ value: 44, label: \"UTC+11:00 New Caledonia, Russia (Primorsky Krai), Solomon Islands\" },"
	                "{ value: 45, label: \"UTC+11:30 Norfolk Island\" },"
	                "{ value: 46, label: \"UTC+12:00 Fiji, Russia (Kamchatka Krai);(Summer)New Zealand\" },"
	                "{ value: 47, label: \"UTC+12:45 (Summer)New Zealand\" },"
	                "{ value: 48, label: \"UTC+13:00 Tonga\" },"
	                "{ value: 49, label: \"UTC+14:00 Kiribati (Line Islands)\" }"
	            "];"
	            "var time_zone = document.getElementById(\"TimeZone\");"
	            "timezones.forEach(function (timezone) {"
	                "var option = document.createElement(\"option\");"
	                "option.value = timezone.value;"
	                "option.text = timezone.label;"
	                "time_zone.appendChild(option);"
	            "});"
	        "}"
	        "function loadFormData() {"
	            "fetch(\'/gettimesync\')"
	                ".then(response => {"
	                    "if (!response.ok) {"
	                        "throw new Error(\'Network response was not ok\');"
	                    "}"
	                    "return response.text();"
	                "})"
	                ".then(data => {"
	                    "console.log(\'Time sync data received:\', data);"
	                    "const lines = data.trim().split(\'\n\');"
	                    "const [onSwitch, onDateTimeEpoch, offSwitch, offDateTimeEpoch, timeZoneValue] = lines[0].split(\',\');"
	                    "const toLocalDateTime = (epochTime) => {"
	                        "const date = new Date(epochTime * 1000);"
	                        "const offset = date.getTimezoneOffset() * 60000;"
	                        "const localDate = new Date(date.getTime() - offset);"
	                        "return localDate.toISOString().slice(0, 16);"
	                    "};"
	                    "const onDateTime = toLocalDateTime(onDateTimeEpoch);"
	                    "const offDateTime = toLocalDateTime(offDateTimeEpoch);"
	                    "document.getElementById(\"timeSyncOnSwitch\").checked = onSwitch === \'1\';"
	                    "if (onSwitch === \'1\') {"
	                        "document.getElementById(\"timeSyncOnDateTime\").value = onDateTime;"
	                    "}"
	                    "document.getElementById(\"timeSyncOffSwitch\").checked = offSwitch === \'1\';"
	                    "if (offSwitch === \'1\') {"
	                        "document.getElementById(\"timeSyncOffDateTime\").value = offDateTime;"
	                    "}"
	                    "const timeZoneSelect = document.getElementById(\"TimeZone\");"
	                    "timeZoneSelect.value = timeZoneValue;"
	                    "const timeZoneLabel = timeZoneSelect.options[timeZoneSelect.selectedIndex].text;"
	                "})"
	                ".catch(error => {"
	                    "console.error(\'Error:\', error);"
	                "});"
	        "}"
	        "function onWindowLoad() {"
	            "loadFormData();"
	            "setMinDateTime();"
	            "populateTimezones();"
	            "load_alarm_data();"
	        "}"
	    "</script>"
	"</body></html>";

