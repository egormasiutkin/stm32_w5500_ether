
PirSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022ff8  080020b8  080020b8  000020b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d368  080250b0  080250b0  000250b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032418  08032418  00045210  2**0
                  CONTENTS
  4 .ARM          00000008  08032418  08032418  00032418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032420  08032420  00045210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08032420  08032420  00032420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08032428  08032428  00032428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005210  20000000  08032430  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00017170  20005210  08037640  00045210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001c380  08037640  0004c380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00045210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00045238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b307  00000000  00000000  0004527b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000732c  00000000  00000000  00070582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002500  00000000  00000000  000778b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cc8  00000000  00000000  00079db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251bb  00000000  00000000  0007ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000356c3  00000000  00000000  000a0c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5e2c  00000000  00000000  000d62f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009be4  00000000  00000000  0019c124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001a5d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080020b8 <__do_global_dtors_aux>:
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4c06      	ldr	r4, [pc, #24]	; (80020d4 <__do_global_dtors_aux+0x1c>)
 80020bc:	7823      	ldrb	r3, [r4, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <__do_global_dtors_aux+0x1a>
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <__do_global_dtors_aux+0x20>)
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <__do_global_dtors_aux+0x16>
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <__do_global_dtors_aux+0x24>)
 80020ca:	e000      	b.n	80020ce <__do_global_dtors_aux+0x16>
 80020cc:	bf00      	nop
 80020ce:	2301      	movs	r3, #1
 80020d0:	7023      	strb	r3, [r4, #0]
 80020d2:	bd10      	pop	{r4, pc}
 80020d4:	20005210 	.word	0x20005210
 80020d8:	00000000 	.word	0x00000000
 80020dc:	08025084 	.word	0x08025084

080020e0 <frame_dummy>:
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <frame_dummy+0x14>)
 80020e2:	b510      	push	{r4, lr}
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <frame_dummy+0x10>
 80020e8:	4903      	ldr	r1, [pc, #12]	; (80020f8 <frame_dummy+0x18>)
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <frame_dummy+0x1c>)
 80020ec:	e000      	b.n	80020f0 <frame_dummy+0x10>
 80020ee:	bf00      	nop
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	00000000 	.word	0x00000000
 80020f8:	20005214 	.word	0x20005214
 80020fc:	08025084 	.word	0x08025084

08002100 <strcmp>:
 8002100:	7802      	ldrb	r2, [r0, #0]
 8002102:	780b      	ldrb	r3, [r1, #0]
 8002104:	2a00      	cmp	r2, #0
 8002106:	d003      	beq.n	8002110 <strcmp+0x10>
 8002108:	3001      	adds	r0, #1
 800210a:	3101      	adds	r1, #1
 800210c:	429a      	cmp	r2, r3
 800210e:	d0f7      	beq.n	8002100 <strcmp>
 8002110:	1ad0      	subs	r0, r2, r3
 8002112:	4770      	bx	lr

08002114 <strlen>:
 8002114:	2300      	movs	r3, #0
 8002116:	5cc2      	ldrb	r2, [r0, r3]
 8002118:	3301      	adds	r3, #1
 800211a:	2a00      	cmp	r2, #0
 800211c:	d1fb      	bne.n	8002116 <strlen+0x2>
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	4770      	bx	lr
	...

08002124 <__gnu_thumb1_case_shi>:
 8002124:	b403      	push	{r0, r1}
 8002126:	4671      	mov	r1, lr
 8002128:	0849      	lsrs	r1, r1, #1
 800212a:	0040      	lsls	r0, r0, #1
 800212c:	0049      	lsls	r1, r1, #1
 800212e:	5e09      	ldrsh	r1, [r1, r0]
 8002130:	0049      	lsls	r1, r1, #1
 8002132:	448e      	add	lr, r1
 8002134:	bc03      	pop	{r0, r1}
 8002136:	4770      	bx	lr

08002138 <__udivsi3>:
 8002138:	2200      	movs	r2, #0
 800213a:	0843      	lsrs	r3, r0, #1
 800213c:	428b      	cmp	r3, r1
 800213e:	d374      	bcc.n	800222a <__udivsi3+0xf2>
 8002140:	0903      	lsrs	r3, r0, #4
 8002142:	428b      	cmp	r3, r1
 8002144:	d35f      	bcc.n	8002206 <__udivsi3+0xce>
 8002146:	0a03      	lsrs	r3, r0, #8
 8002148:	428b      	cmp	r3, r1
 800214a:	d344      	bcc.n	80021d6 <__udivsi3+0x9e>
 800214c:	0b03      	lsrs	r3, r0, #12
 800214e:	428b      	cmp	r3, r1
 8002150:	d328      	bcc.n	80021a4 <__udivsi3+0x6c>
 8002152:	0c03      	lsrs	r3, r0, #16
 8002154:	428b      	cmp	r3, r1
 8002156:	d30d      	bcc.n	8002174 <__udivsi3+0x3c>
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	0209      	lsls	r1, r1, #8
 800215c:	ba12      	rev	r2, r2
 800215e:	0c03      	lsrs	r3, r0, #16
 8002160:	428b      	cmp	r3, r1
 8002162:	d302      	bcc.n	800216a <__udivsi3+0x32>
 8002164:	1212      	asrs	r2, r2, #8
 8002166:	0209      	lsls	r1, r1, #8
 8002168:	d065      	beq.n	8002236 <__udivsi3+0xfe>
 800216a:	0b03      	lsrs	r3, r0, #12
 800216c:	428b      	cmp	r3, r1
 800216e:	d319      	bcc.n	80021a4 <__udivsi3+0x6c>
 8002170:	e000      	b.n	8002174 <__udivsi3+0x3c>
 8002172:	0a09      	lsrs	r1, r1, #8
 8002174:	0bc3      	lsrs	r3, r0, #15
 8002176:	428b      	cmp	r3, r1
 8002178:	d301      	bcc.n	800217e <__udivsi3+0x46>
 800217a:	03cb      	lsls	r3, r1, #15
 800217c:	1ac0      	subs	r0, r0, r3
 800217e:	4152      	adcs	r2, r2
 8002180:	0b83      	lsrs	r3, r0, #14
 8002182:	428b      	cmp	r3, r1
 8002184:	d301      	bcc.n	800218a <__udivsi3+0x52>
 8002186:	038b      	lsls	r3, r1, #14
 8002188:	1ac0      	subs	r0, r0, r3
 800218a:	4152      	adcs	r2, r2
 800218c:	0b43      	lsrs	r3, r0, #13
 800218e:	428b      	cmp	r3, r1
 8002190:	d301      	bcc.n	8002196 <__udivsi3+0x5e>
 8002192:	034b      	lsls	r3, r1, #13
 8002194:	1ac0      	subs	r0, r0, r3
 8002196:	4152      	adcs	r2, r2
 8002198:	0b03      	lsrs	r3, r0, #12
 800219a:	428b      	cmp	r3, r1
 800219c:	d301      	bcc.n	80021a2 <__udivsi3+0x6a>
 800219e:	030b      	lsls	r3, r1, #12
 80021a0:	1ac0      	subs	r0, r0, r3
 80021a2:	4152      	adcs	r2, r2
 80021a4:	0ac3      	lsrs	r3, r0, #11
 80021a6:	428b      	cmp	r3, r1
 80021a8:	d301      	bcc.n	80021ae <__udivsi3+0x76>
 80021aa:	02cb      	lsls	r3, r1, #11
 80021ac:	1ac0      	subs	r0, r0, r3
 80021ae:	4152      	adcs	r2, r2
 80021b0:	0a83      	lsrs	r3, r0, #10
 80021b2:	428b      	cmp	r3, r1
 80021b4:	d301      	bcc.n	80021ba <__udivsi3+0x82>
 80021b6:	028b      	lsls	r3, r1, #10
 80021b8:	1ac0      	subs	r0, r0, r3
 80021ba:	4152      	adcs	r2, r2
 80021bc:	0a43      	lsrs	r3, r0, #9
 80021be:	428b      	cmp	r3, r1
 80021c0:	d301      	bcc.n	80021c6 <__udivsi3+0x8e>
 80021c2:	024b      	lsls	r3, r1, #9
 80021c4:	1ac0      	subs	r0, r0, r3
 80021c6:	4152      	adcs	r2, r2
 80021c8:	0a03      	lsrs	r3, r0, #8
 80021ca:	428b      	cmp	r3, r1
 80021cc:	d301      	bcc.n	80021d2 <__udivsi3+0x9a>
 80021ce:	020b      	lsls	r3, r1, #8
 80021d0:	1ac0      	subs	r0, r0, r3
 80021d2:	4152      	adcs	r2, r2
 80021d4:	d2cd      	bcs.n	8002172 <__udivsi3+0x3a>
 80021d6:	09c3      	lsrs	r3, r0, #7
 80021d8:	428b      	cmp	r3, r1
 80021da:	d301      	bcc.n	80021e0 <__udivsi3+0xa8>
 80021dc:	01cb      	lsls	r3, r1, #7
 80021de:	1ac0      	subs	r0, r0, r3
 80021e0:	4152      	adcs	r2, r2
 80021e2:	0983      	lsrs	r3, r0, #6
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d301      	bcc.n	80021ec <__udivsi3+0xb4>
 80021e8:	018b      	lsls	r3, r1, #6
 80021ea:	1ac0      	subs	r0, r0, r3
 80021ec:	4152      	adcs	r2, r2
 80021ee:	0943      	lsrs	r3, r0, #5
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d301      	bcc.n	80021f8 <__udivsi3+0xc0>
 80021f4:	014b      	lsls	r3, r1, #5
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	4152      	adcs	r2, r2
 80021fa:	0903      	lsrs	r3, r0, #4
 80021fc:	428b      	cmp	r3, r1
 80021fe:	d301      	bcc.n	8002204 <__udivsi3+0xcc>
 8002200:	010b      	lsls	r3, r1, #4
 8002202:	1ac0      	subs	r0, r0, r3
 8002204:	4152      	adcs	r2, r2
 8002206:	08c3      	lsrs	r3, r0, #3
 8002208:	428b      	cmp	r3, r1
 800220a:	d301      	bcc.n	8002210 <__udivsi3+0xd8>
 800220c:	00cb      	lsls	r3, r1, #3
 800220e:	1ac0      	subs	r0, r0, r3
 8002210:	4152      	adcs	r2, r2
 8002212:	0883      	lsrs	r3, r0, #2
 8002214:	428b      	cmp	r3, r1
 8002216:	d301      	bcc.n	800221c <__udivsi3+0xe4>
 8002218:	008b      	lsls	r3, r1, #2
 800221a:	1ac0      	subs	r0, r0, r3
 800221c:	4152      	adcs	r2, r2
 800221e:	0843      	lsrs	r3, r0, #1
 8002220:	428b      	cmp	r3, r1
 8002222:	d301      	bcc.n	8002228 <__udivsi3+0xf0>
 8002224:	004b      	lsls	r3, r1, #1
 8002226:	1ac0      	subs	r0, r0, r3
 8002228:	4152      	adcs	r2, r2
 800222a:	1a41      	subs	r1, r0, r1
 800222c:	d200      	bcs.n	8002230 <__udivsi3+0xf8>
 800222e:	4601      	mov	r1, r0
 8002230:	4152      	adcs	r2, r2
 8002232:	4610      	mov	r0, r2
 8002234:	4770      	bx	lr
 8002236:	e7ff      	b.n	8002238 <__udivsi3+0x100>
 8002238:	b501      	push	{r0, lr}
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f8f0 	bl	8002420 <__aeabi_idiv0>
 8002240:	bd02      	pop	{r1, pc}
 8002242:	46c0      	nop			; (mov r8, r8)

08002244 <__aeabi_uidivmod>:
 8002244:	2900      	cmp	r1, #0
 8002246:	d0f7      	beq.n	8002238 <__udivsi3+0x100>
 8002248:	e776      	b.n	8002138 <__udivsi3>
 800224a:	4770      	bx	lr

0800224c <__divsi3>:
 800224c:	4603      	mov	r3, r0
 800224e:	430b      	orrs	r3, r1
 8002250:	d47f      	bmi.n	8002352 <__divsi3+0x106>
 8002252:	2200      	movs	r2, #0
 8002254:	0843      	lsrs	r3, r0, #1
 8002256:	428b      	cmp	r3, r1
 8002258:	d374      	bcc.n	8002344 <__divsi3+0xf8>
 800225a:	0903      	lsrs	r3, r0, #4
 800225c:	428b      	cmp	r3, r1
 800225e:	d35f      	bcc.n	8002320 <__divsi3+0xd4>
 8002260:	0a03      	lsrs	r3, r0, #8
 8002262:	428b      	cmp	r3, r1
 8002264:	d344      	bcc.n	80022f0 <__divsi3+0xa4>
 8002266:	0b03      	lsrs	r3, r0, #12
 8002268:	428b      	cmp	r3, r1
 800226a:	d328      	bcc.n	80022be <__divsi3+0x72>
 800226c:	0c03      	lsrs	r3, r0, #16
 800226e:	428b      	cmp	r3, r1
 8002270:	d30d      	bcc.n	800228e <__divsi3+0x42>
 8002272:	22ff      	movs	r2, #255	; 0xff
 8002274:	0209      	lsls	r1, r1, #8
 8002276:	ba12      	rev	r2, r2
 8002278:	0c03      	lsrs	r3, r0, #16
 800227a:	428b      	cmp	r3, r1
 800227c:	d302      	bcc.n	8002284 <__divsi3+0x38>
 800227e:	1212      	asrs	r2, r2, #8
 8002280:	0209      	lsls	r1, r1, #8
 8002282:	d065      	beq.n	8002350 <__divsi3+0x104>
 8002284:	0b03      	lsrs	r3, r0, #12
 8002286:	428b      	cmp	r3, r1
 8002288:	d319      	bcc.n	80022be <__divsi3+0x72>
 800228a:	e000      	b.n	800228e <__divsi3+0x42>
 800228c:	0a09      	lsrs	r1, r1, #8
 800228e:	0bc3      	lsrs	r3, r0, #15
 8002290:	428b      	cmp	r3, r1
 8002292:	d301      	bcc.n	8002298 <__divsi3+0x4c>
 8002294:	03cb      	lsls	r3, r1, #15
 8002296:	1ac0      	subs	r0, r0, r3
 8002298:	4152      	adcs	r2, r2
 800229a:	0b83      	lsrs	r3, r0, #14
 800229c:	428b      	cmp	r3, r1
 800229e:	d301      	bcc.n	80022a4 <__divsi3+0x58>
 80022a0:	038b      	lsls	r3, r1, #14
 80022a2:	1ac0      	subs	r0, r0, r3
 80022a4:	4152      	adcs	r2, r2
 80022a6:	0b43      	lsrs	r3, r0, #13
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d301      	bcc.n	80022b0 <__divsi3+0x64>
 80022ac:	034b      	lsls	r3, r1, #13
 80022ae:	1ac0      	subs	r0, r0, r3
 80022b0:	4152      	adcs	r2, r2
 80022b2:	0b03      	lsrs	r3, r0, #12
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d301      	bcc.n	80022bc <__divsi3+0x70>
 80022b8:	030b      	lsls	r3, r1, #12
 80022ba:	1ac0      	subs	r0, r0, r3
 80022bc:	4152      	adcs	r2, r2
 80022be:	0ac3      	lsrs	r3, r0, #11
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d301      	bcc.n	80022c8 <__divsi3+0x7c>
 80022c4:	02cb      	lsls	r3, r1, #11
 80022c6:	1ac0      	subs	r0, r0, r3
 80022c8:	4152      	adcs	r2, r2
 80022ca:	0a83      	lsrs	r3, r0, #10
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d301      	bcc.n	80022d4 <__divsi3+0x88>
 80022d0:	028b      	lsls	r3, r1, #10
 80022d2:	1ac0      	subs	r0, r0, r3
 80022d4:	4152      	adcs	r2, r2
 80022d6:	0a43      	lsrs	r3, r0, #9
 80022d8:	428b      	cmp	r3, r1
 80022da:	d301      	bcc.n	80022e0 <__divsi3+0x94>
 80022dc:	024b      	lsls	r3, r1, #9
 80022de:	1ac0      	subs	r0, r0, r3
 80022e0:	4152      	adcs	r2, r2
 80022e2:	0a03      	lsrs	r3, r0, #8
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d301      	bcc.n	80022ec <__divsi3+0xa0>
 80022e8:	020b      	lsls	r3, r1, #8
 80022ea:	1ac0      	subs	r0, r0, r3
 80022ec:	4152      	adcs	r2, r2
 80022ee:	d2cd      	bcs.n	800228c <__divsi3+0x40>
 80022f0:	09c3      	lsrs	r3, r0, #7
 80022f2:	428b      	cmp	r3, r1
 80022f4:	d301      	bcc.n	80022fa <__divsi3+0xae>
 80022f6:	01cb      	lsls	r3, r1, #7
 80022f8:	1ac0      	subs	r0, r0, r3
 80022fa:	4152      	adcs	r2, r2
 80022fc:	0983      	lsrs	r3, r0, #6
 80022fe:	428b      	cmp	r3, r1
 8002300:	d301      	bcc.n	8002306 <__divsi3+0xba>
 8002302:	018b      	lsls	r3, r1, #6
 8002304:	1ac0      	subs	r0, r0, r3
 8002306:	4152      	adcs	r2, r2
 8002308:	0943      	lsrs	r3, r0, #5
 800230a:	428b      	cmp	r3, r1
 800230c:	d301      	bcc.n	8002312 <__divsi3+0xc6>
 800230e:	014b      	lsls	r3, r1, #5
 8002310:	1ac0      	subs	r0, r0, r3
 8002312:	4152      	adcs	r2, r2
 8002314:	0903      	lsrs	r3, r0, #4
 8002316:	428b      	cmp	r3, r1
 8002318:	d301      	bcc.n	800231e <__divsi3+0xd2>
 800231a:	010b      	lsls	r3, r1, #4
 800231c:	1ac0      	subs	r0, r0, r3
 800231e:	4152      	adcs	r2, r2
 8002320:	08c3      	lsrs	r3, r0, #3
 8002322:	428b      	cmp	r3, r1
 8002324:	d301      	bcc.n	800232a <__divsi3+0xde>
 8002326:	00cb      	lsls	r3, r1, #3
 8002328:	1ac0      	subs	r0, r0, r3
 800232a:	4152      	adcs	r2, r2
 800232c:	0883      	lsrs	r3, r0, #2
 800232e:	428b      	cmp	r3, r1
 8002330:	d301      	bcc.n	8002336 <__divsi3+0xea>
 8002332:	008b      	lsls	r3, r1, #2
 8002334:	1ac0      	subs	r0, r0, r3
 8002336:	4152      	adcs	r2, r2
 8002338:	0843      	lsrs	r3, r0, #1
 800233a:	428b      	cmp	r3, r1
 800233c:	d301      	bcc.n	8002342 <__divsi3+0xf6>
 800233e:	004b      	lsls	r3, r1, #1
 8002340:	1ac0      	subs	r0, r0, r3
 8002342:	4152      	adcs	r2, r2
 8002344:	1a41      	subs	r1, r0, r1
 8002346:	d200      	bcs.n	800234a <__divsi3+0xfe>
 8002348:	4601      	mov	r1, r0
 800234a:	4152      	adcs	r2, r2
 800234c:	4610      	mov	r0, r2
 800234e:	4770      	bx	lr
 8002350:	e05d      	b.n	800240e <__divsi3+0x1c2>
 8002352:	0fca      	lsrs	r2, r1, #31
 8002354:	d000      	beq.n	8002358 <__divsi3+0x10c>
 8002356:	4249      	negs	r1, r1
 8002358:	1003      	asrs	r3, r0, #32
 800235a:	d300      	bcc.n	800235e <__divsi3+0x112>
 800235c:	4240      	negs	r0, r0
 800235e:	4053      	eors	r3, r2
 8002360:	2200      	movs	r2, #0
 8002362:	469c      	mov	ip, r3
 8002364:	0903      	lsrs	r3, r0, #4
 8002366:	428b      	cmp	r3, r1
 8002368:	d32d      	bcc.n	80023c6 <__divsi3+0x17a>
 800236a:	0a03      	lsrs	r3, r0, #8
 800236c:	428b      	cmp	r3, r1
 800236e:	d312      	bcc.n	8002396 <__divsi3+0x14a>
 8002370:	22fc      	movs	r2, #252	; 0xfc
 8002372:	0189      	lsls	r1, r1, #6
 8002374:	ba12      	rev	r2, r2
 8002376:	0a03      	lsrs	r3, r0, #8
 8002378:	428b      	cmp	r3, r1
 800237a:	d30c      	bcc.n	8002396 <__divsi3+0x14a>
 800237c:	0189      	lsls	r1, r1, #6
 800237e:	1192      	asrs	r2, r2, #6
 8002380:	428b      	cmp	r3, r1
 8002382:	d308      	bcc.n	8002396 <__divsi3+0x14a>
 8002384:	0189      	lsls	r1, r1, #6
 8002386:	1192      	asrs	r2, r2, #6
 8002388:	428b      	cmp	r3, r1
 800238a:	d304      	bcc.n	8002396 <__divsi3+0x14a>
 800238c:	0189      	lsls	r1, r1, #6
 800238e:	d03a      	beq.n	8002406 <__divsi3+0x1ba>
 8002390:	1192      	asrs	r2, r2, #6
 8002392:	e000      	b.n	8002396 <__divsi3+0x14a>
 8002394:	0989      	lsrs	r1, r1, #6
 8002396:	09c3      	lsrs	r3, r0, #7
 8002398:	428b      	cmp	r3, r1
 800239a:	d301      	bcc.n	80023a0 <__divsi3+0x154>
 800239c:	01cb      	lsls	r3, r1, #7
 800239e:	1ac0      	subs	r0, r0, r3
 80023a0:	4152      	adcs	r2, r2
 80023a2:	0983      	lsrs	r3, r0, #6
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d301      	bcc.n	80023ac <__divsi3+0x160>
 80023a8:	018b      	lsls	r3, r1, #6
 80023aa:	1ac0      	subs	r0, r0, r3
 80023ac:	4152      	adcs	r2, r2
 80023ae:	0943      	lsrs	r3, r0, #5
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d301      	bcc.n	80023b8 <__divsi3+0x16c>
 80023b4:	014b      	lsls	r3, r1, #5
 80023b6:	1ac0      	subs	r0, r0, r3
 80023b8:	4152      	adcs	r2, r2
 80023ba:	0903      	lsrs	r3, r0, #4
 80023bc:	428b      	cmp	r3, r1
 80023be:	d301      	bcc.n	80023c4 <__divsi3+0x178>
 80023c0:	010b      	lsls	r3, r1, #4
 80023c2:	1ac0      	subs	r0, r0, r3
 80023c4:	4152      	adcs	r2, r2
 80023c6:	08c3      	lsrs	r3, r0, #3
 80023c8:	428b      	cmp	r3, r1
 80023ca:	d301      	bcc.n	80023d0 <__divsi3+0x184>
 80023cc:	00cb      	lsls	r3, r1, #3
 80023ce:	1ac0      	subs	r0, r0, r3
 80023d0:	4152      	adcs	r2, r2
 80023d2:	0883      	lsrs	r3, r0, #2
 80023d4:	428b      	cmp	r3, r1
 80023d6:	d301      	bcc.n	80023dc <__divsi3+0x190>
 80023d8:	008b      	lsls	r3, r1, #2
 80023da:	1ac0      	subs	r0, r0, r3
 80023dc:	4152      	adcs	r2, r2
 80023de:	d2d9      	bcs.n	8002394 <__divsi3+0x148>
 80023e0:	0843      	lsrs	r3, r0, #1
 80023e2:	428b      	cmp	r3, r1
 80023e4:	d301      	bcc.n	80023ea <__divsi3+0x19e>
 80023e6:	004b      	lsls	r3, r1, #1
 80023e8:	1ac0      	subs	r0, r0, r3
 80023ea:	4152      	adcs	r2, r2
 80023ec:	1a41      	subs	r1, r0, r1
 80023ee:	d200      	bcs.n	80023f2 <__divsi3+0x1a6>
 80023f0:	4601      	mov	r1, r0
 80023f2:	4663      	mov	r3, ip
 80023f4:	4152      	adcs	r2, r2
 80023f6:	105b      	asrs	r3, r3, #1
 80023f8:	4610      	mov	r0, r2
 80023fa:	d301      	bcc.n	8002400 <__divsi3+0x1b4>
 80023fc:	4240      	negs	r0, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d500      	bpl.n	8002404 <__divsi3+0x1b8>
 8002402:	4249      	negs	r1, r1
 8002404:	4770      	bx	lr
 8002406:	4663      	mov	r3, ip
 8002408:	105b      	asrs	r3, r3, #1
 800240a:	d300      	bcc.n	800240e <__divsi3+0x1c2>
 800240c:	4240      	negs	r0, r0
 800240e:	b501      	push	{r0, lr}
 8002410:	2000      	movs	r0, #0
 8002412:	f000 f805 	bl	8002420 <__aeabi_idiv0>
 8002416:	bd02      	pop	{r1, pc}

08002418 <__aeabi_idivmod>:
 8002418:	2900      	cmp	r1, #0
 800241a:	d0f8      	beq.n	800240e <__divsi3+0x1c2>
 800241c:	e716      	b.n	800224c <__divsi3>
 800241e:	4770      	bx	lr

08002420 <__aeabi_idiv0>:
 8002420:	4770      	bx	lr
 8002422:	46c0      	nop			; (mov r8, r8)

08002424 <__aeabi_cfrcmple>:
 8002424:	4684      	mov	ip, r0
 8002426:	0008      	movs	r0, r1
 8002428:	4661      	mov	r1, ip
 800242a:	e7ff      	b.n	800242c <__aeabi_cfcmpeq>

0800242c <__aeabi_cfcmpeq>:
 800242c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800242e:	f000 fcb5 	bl	8002d9c <__lesf2>
 8002432:	2800      	cmp	r0, #0
 8002434:	d401      	bmi.n	800243a <__aeabi_cfcmpeq+0xe>
 8002436:	2100      	movs	r1, #0
 8002438:	42c8      	cmn	r0, r1
 800243a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800243c <__aeabi_fcmpeq>:
 800243c:	b510      	push	{r4, lr}
 800243e:	f000 fc41 	bl	8002cc4 <__eqsf2>
 8002442:	4240      	negs	r0, r0
 8002444:	3001      	adds	r0, #1
 8002446:	bd10      	pop	{r4, pc}

08002448 <__aeabi_fcmplt>:
 8002448:	b510      	push	{r4, lr}
 800244a:	f000 fca7 	bl	8002d9c <__lesf2>
 800244e:	2800      	cmp	r0, #0
 8002450:	db01      	blt.n	8002456 <__aeabi_fcmplt+0xe>
 8002452:	2000      	movs	r0, #0
 8002454:	bd10      	pop	{r4, pc}
 8002456:	2001      	movs	r0, #1
 8002458:	bd10      	pop	{r4, pc}
 800245a:	46c0      	nop			; (mov r8, r8)

0800245c <__aeabi_fcmple>:
 800245c:	b510      	push	{r4, lr}
 800245e:	f000 fc9d 	bl	8002d9c <__lesf2>
 8002462:	2800      	cmp	r0, #0
 8002464:	dd01      	ble.n	800246a <__aeabi_fcmple+0xe>
 8002466:	2000      	movs	r0, #0
 8002468:	bd10      	pop	{r4, pc}
 800246a:	2001      	movs	r0, #1
 800246c:	bd10      	pop	{r4, pc}
 800246e:	46c0      	nop			; (mov r8, r8)

08002470 <__aeabi_fcmpgt>:
 8002470:	b510      	push	{r4, lr}
 8002472:	f000 fc4d 	bl	8002d10 <__gesf2>
 8002476:	2800      	cmp	r0, #0
 8002478:	dc01      	bgt.n	800247e <__aeabi_fcmpgt+0xe>
 800247a:	2000      	movs	r0, #0
 800247c:	bd10      	pop	{r4, pc}
 800247e:	2001      	movs	r0, #1
 8002480:	bd10      	pop	{r4, pc}
 8002482:	46c0      	nop			; (mov r8, r8)

08002484 <__aeabi_fcmpge>:
 8002484:	b510      	push	{r4, lr}
 8002486:	f000 fc43 	bl	8002d10 <__gesf2>
 800248a:	2800      	cmp	r0, #0
 800248c:	da01      	bge.n	8002492 <__aeabi_fcmpge+0xe>
 800248e:	2000      	movs	r0, #0
 8002490:	bd10      	pop	{r4, pc}
 8002492:	2001      	movs	r0, #1
 8002494:	bd10      	pop	{r4, pc}
 8002496:	46c0      	nop			; (mov r8, r8)

08002498 <__aeabi_ldivmod>:
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <__aeabi_ldivmod+0x30>
 800249c:	2a00      	cmp	r2, #0
 800249e:	d113      	bne.n	80024c8 <__aeabi_ldivmod+0x30>
 80024a0:	2900      	cmp	r1, #0
 80024a2:	db06      	blt.n	80024b2 <__aeabi_ldivmod+0x1a>
 80024a4:	dc01      	bgt.n	80024aa <__aeabi_ldivmod+0x12>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	d006      	beq.n	80024b8 <__aeabi_ldivmod+0x20>
 80024aa:	2000      	movs	r0, #0
 80024ac:	43c0      	mvns	r0, r0
 80024ae:	0841      	lsrs	r1, r0, #1
 80024b0:	e002      	b.n	80024b8 <__aeabi_ldivmod+0x20>
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0609      	lsls	r1, r1, #24
 80024b6:	2000      	movs	r0, #0
 80024b8:	b407      	push	{r0, r1, r2}
 80024ba:	4802      	ldr	r0, [pc, #8]	; (80024c4 <__aeabi_ldivmod+0x2c>)
 80024bc:	a101      	add	r1, pc, #4	; (adr r1, 80024c4 <__aeabi_ldivmod+0x2c>)
 80024be:	1840      	adds	r0, r0, r1
 80024c0:	9002      	str	r0, [sp, #8]
 80024c2:	bd03      	pop	{r0, r1, pc}
 80024c4:	ffffff5d 	.word	0xffffff5d
 80024c8:	b403      	push	{r0, r1}
 80024ca:	4668      	mov	r0, sp
 80024cc:	b501      	push	{r0, lr}
 80024ce:	9802      	ldr	r0, [sp, #8]
 80024d0:	f000 f920 	bl	8002714 <__gnu_ldivmod_helper>
 80024d4:	9b01      	ldr	r3, [sp, #4]
 80024d6:	469e      	mov	lr, r3
 80024d8:	b002      	add	sp, #8
 80024da:	bc0c      	pop	{r2, r3}
 80024dc:	4770      	bx	lr
 80024de:	46c0      	nop			; (mov r8, r8)

080024e0 <__aeabi_uldivmod>:
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <__aeabi_uldivmod+0x28>
 80024e4:	2a00      	cmp	r2, #0
 80024e6:	d10f      	bne.n	8002508 <__aeabi_uldivmod+0x28>
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d100      	bne.n	80024ee <__aeabi_uldivmod+0xe>
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d002      	beq.n	80024f6 <__aeabi_uldivmod+0x16>
 80024f0:	2100      	movs	r1, #0
 80024f2:	43c9      	mvns	r1, r1
 80024f4:	0008      	movs	r0, r1
 80024f6:	b407      	push	{r0, r1, r2}
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <__aeabi_uldivmod+0x24>)
 80024fa:	a102      	add	r1, pc, #8	; (adr r1, 8002504 <__aeabi_uldivmod+0x24>)
 80024fc:	1840      	adds	r0, r0, r1
 80024fe:	9002      	str	r0, [sp, #8]
 8002500:	bd03      	pop	{r0, r1, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	ffffff1d 	.word	0xffffff1d
 8002508:	b403      	push	{r0, r1}
 800250a:	4668      	mov	r0, sp
 800250c:	b501      	push	{r0, lr}
 800250e:	9802      	ldr	r0, [sp, #8]
 8002510:	f000 f834 	bl	800257c <__udivmoddi4>
 8002514:	9b01      	ldr	r3, [sp, #4]
 8002516:	469e      	mov	lr, r3
 8002518:	b002      	add	sp, #8
 800251a:	bc0c      	pop	{r2, r3}
 800251c:	4770      	bx	lr
 800251e:	46c0      	nop			; (mov r8, r8)

08002520 <__aeabi_lmul>:
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	46ce      	mov	lr, r9
 8002524:	4699      	mov	r9, r3
 8002526:	0c03      	lsrs	r3, r0, #16
 8002528:	469c      	mov	ip, r3
 800252a:	0413      	lsls	r3, r2, #16
 800252c:	4647      	mov	r7, r8
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	001d      	movs	r5, r3
 8002532:	000e      	movs	r6, r1
 8002534:	4661      	mov	r1, ip
 8002536:	0404      	lsls	r4, r0, #16
 8002538:	0c24      	lsrs	r4, r4, #16
 800253a:	b580      	push	{r7, lr}
 800253c:	0007      	movs	r7, r0
 800253e:	0c10      	lsrs	r0, r2, #16
 8002540:	434b      	muls	r3, r1
 8002542:	4365      	muls	r5, r4
 8002544:	4341      	muls	r1, r0
 8002546:	4360      	muls	r0, r4
 8002548:	0c2c      	lsrs	r4, r5, #16
 800254a:	18c0      	adds	r0, r0, r3
 800254c:	1820      	adds	r0, r4, r0
 800254e:	468c      	mov	ip, r1
 8002550:	4283      	cmp	r3, r0
 8002552:	d903      	bls.n	800255c <__aeabi_lmul+0x3c>
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	4698      	mov	r8, r3
 800255a:	44c4      	add	ip, r8
 800255c:	4649      	mov	r1, r9
 800255e:	4379      	muls	r1, r7
 8002560:	4356      	muls	r6, r2
 8002562:	0c03      	lsrs	r3, r0, #16
 8002564:	042d      	lsls	r5, r5, #16
 8002566:	0c2d      	lsrs	r5, r5, #16
 8002568:	1989      	adds	r1, r1, r6
 800256a:	4463      	add	r3, ip
 800256c:	0400      	lsls	r0, r0, #16
 800256e:	1940      	adds	r0, r0, r5
 8002570:	18c9      	adds	r1, r1, r3
 8002572:	bcc0      	pop	{r6, r7}
 8002574:	46b9      	mov	r9, r7
 8002576:	46b0      	mov	r8, r6
 8002578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)

0800257c <__udivmoddi4>:
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	4657      	mov	r7, sl
 8002580:	464e      	mov	r6, r9
 8002582:	4645      	mov	r5, r8
 8002584:	46de      	mov	lr, fp
 8002586:	b5e0      	push	{r5, r6, r7, lr}
 8002588:	0004      	movs	r4, r0
 800258a:	000d      	movs	r5, r1
 800258c:	4692      	mov	sl, r2
 800258e:	4699      	mov	r9, r3
 8002590:	b083      	sub	sp, #12
 8002592:	428b      	cmp	r3, r1
 8002594:	d830      	bhi.n	80025f8 <__udivmoddi4+0x7c>
 8002596:	d02d      	beq.n	80025f4 <__udivmoddi4+0x78>
 8002598:	4649      	mov	r1, r9
 800259a:	4650      	mov	r0, sl
 800259c:	f002 fb9c 	bl	8004cd8 <__clzdi2>
 80025a0:	0029      	movs	r1, r5
 80025a2:	0006      	movs	r6, r0
 80025a4:	0020      	movs	r0, r4
 80025a6:	f002 fb97 	bl	8004cd8 <__clzdi2>
 80025aa:	1a33      	subs	r3, r6, r0
 80025ac:	4698      	mov	r8, r3
 80025ae:	3b20      	subs	r3, #32
 80025b0:	d434      	bmi.n	800261c <__udivmoddi4+0xa0>
 80025b2:	469b      	mov	fp, r3
 80025b4:	4653      	mov	r3, sl
 80025b6:	465a      	mov	r2, fp
 80025b8:	4093      	lsls	r3, r2
 80025ba:	4642      	mov	r2, r8
 80025bc:	001f      	movs	r7, r3
 80025be:	4653      	mov	r3, sl
 80025c0:	4093      	lsls	r3, r2
 80025c2:	001e      	movs	r6, r3
 80025c4:	42af      	cmp	r7, r5
 80025c6:	d83b      	bhi.n	8002640 <__udivmoddi4+0xc4>
 80025c8:	42af      	cmp	r7, r5
 80025ca:	d100      	bne.n	80025ce <__udivmoddi4+0x52>
 80025cc:	e079      	b.n	80026c2 <__udivmoddi4+0x146>
 80025ce:	465b      	mov	r3, fp
 80025d0:	1ba4      	subs	r4, r4, r6
 80025d2:	41bd      	sbcs	r5, r7
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da00      	bge.n	80025da <__udivmoddi4+0x5e>
 80025d8:	e076      	b.n	80026c8 <__udivmoddi4+0x14c>
 80025da:	2200      	movs	r2, #0
 80025dc:	2300      	movs	r3, #0
 80025de:	9200      	str	r2, [sp, #0]
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2301      	movs	r3, #1
 80025e4:	465a      	mov	r2, fp
 80025e6:	4093      	lsls	r3, r2
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	2301      	movs	r3, #1
 80025ec:	4642      	mov	r2, r8
 80025ee:	4093      	lsls	r3, r2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	e029      	b.n	8002648 <__udivmoddi4+0xcc>
 80025f4:	4282      	cmp	r2, r0
 80025f6:	d9cf      	bls.n	8002598 <__udivmoddi4+0x1c>
 80025f8:	2200      	movs	r2, #0
 80025fa:	2300      	movs	r3, #0
 80025fc:	9200      	str	r2, [sp, #0]
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <__udivmoddi4+0x8e>
 8002606:	601c      	str	r4, [r3, #0]
 8002608:	605d      	str	r5, [r3, #4]
 800260a:	9800      	ldr	r0, [sp, #0]
 800260c:	9901      	ldr	r1, [sp, #4]
 800260e:	b003      	add	sp, #12
 8002610:	bcf0      	pop	{r4, r5, r6, r7}
 8002612:	46bb      	mov	fp, r7
 8002614:	46b2      	mov	sl, r6
 8002616:	46a9      	mov	r9, r5
 8002618:	46a0      	mov	r8, r4
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261c:	4642      	mov	r2, r8
 800261e:	469b      	mov	fp, r3
 8002620:	2320      	movs	r3, #32
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	4652      	mov	r2, sl
 8002626:	40da      	lsrs	r2, r3
 8002628:	4641      	mov	r1, r8
 800262a:	0013      	movs	r3, r2
 800262c:	464a      	mov	r2, r9
 800262e:	408a      	lsls	r2, r1
 8002630:	0017      	movs	r7, r2
 8002632:	4642      	mov	r2, r8
 8002634:	431f      	orrs	r7, r3
 8002636:	4653      	mov	r3, sl
 8002638:	4093      	lsls	r3, r2
 800263a:	001e      	movs	r6, r3
 800263c:	42af      	cmp	r7, r5
 800263e:	d9c3      	bls.n	80025c8 <__udivmoddi4+0x4c>
 8002640:	2200      	movs	r2, #0
 8002642:	2300      	movs	r3, #0
 8002644:	9200      	str	r2, [sp, #0]
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	4643      	mov	r3, r8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0d8      	beq.n	8002600 <__udivmoddi4+0x84>
 800264e:	07fb      	lsls	r3, r7, #31
 8002650:	0872      	lsrs	r2, r6, #1
 8002652:	431a      	orrs	r2, r3
 8002654:	4646      	mov	r6, r8
 8002656:	087b      	lsrs	r3, r7, #1
 8002658:	e00e      	b.n	8002678 <__udivmoddi4+0xfc>
 800265a:	42ab      	cmp	r3, r5
 800265c:	d101      	bne.n	8002662 <__udivmoddi4+0xe6>
 800265e:	42a2      	cmp	r2, r4
 8002660:	d80c      	bhi.n	800267c <__udivmoddi4+0x100>
 8002662:	1aa4      	subs	r4, r4, r2
 8002664:	419d      	sbcs	r5, r3
 8002666:	2001      	movs	r0, #1
 8002668:	1924      	adds	r4, r4, r4
 800266a:	416d      	adcs	r5, r5
 800266c:	2100      	movs	r1, #0
 800266e:	3e01      	subs	r6, #1
 8002670:	1824      	adds	r4, r4, r0
 8002672:	414d      	adcs	r5, r1
 8002674:	2e00      	cmp	r6, #0
 8002676:	d006      	beq.n	8002686 <__udivmoddi4+0x10a>
 8002678:	42ab      	cmp	r3, r5
 800267a:	d9ee      	bls.n	800265a <__udivmoddi4+0xde>
 800267c:	3e01      	subs	r6, #1
 800267e:	1924      	adds	r4, r4, r4
 8002680:	416d      	adcs	r5, r5
 8002682:	2e00      	cmp	r6, #0
 8002684:	d1f8      	bne.n	8002678 <__udivmoddi4+0xfc>
 8002686:	9800      	ldr	r0, [sp, #0]
 8002688:	9901      	ldr	r1, [sp, #4]
 800268a:	465b      	mov	r3, fp
 800268c:	1900      	adds	r0, r0, r4
 800268e:	4169      	adcs	r1, r5
 8002690:	2b00      	cmp	r3, #0
 8002692:	db24      	blt.n	80026de <__udivmoddi4+0x162>
 8002694:	002b      	movs	r3, r5
 8002696:	465a      	mov	r2, fp
 8002698:	4644      	mov	r4, r8
 800269a:	40d3      	lsrs	r3, r2
 800269c:	002a      	movs	r2, r5
 800269e:	40e2      	lsrs	r2, r4
 80026a0:	001c      	movs	r4, r3
 80026a2:	465b      	mov	r3, fp
 80026a4:	0015      	movs	r5, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db2a      	blt.n	8002700 <__udivmoddi4+0x184>
 80026aa:	0026      	movs	r6, r4
 80026ac:	409e      	lsls	r6, r3
 80026ae:	0033      	movs	r3, r6
 80026b0:	0026      	movs	r6, r4
 80026b2:	4647      	mov	r7, r8
 80026b4:	40be      	lsls	r6, r7
 80026b6:	0032      	movs	r2, r6
 80026b8:	1a80      	subs	r0, r0, r2
 80026ba:	4199      	sbcs	r1, r3
 80026bc:	9000      	str	r0, [sp, #0]
 80026be:	9101      	str	r1, [sp, #4]
 80026c0:	e79e      	b.n	8002600 <__udivmoddi4+0x84>
 80026c2:	42a3      	cmp	r3, r4
 80026c4:	d8bc      	bhi.n	8002640 <__udivmoddi4+0xc4>
 80026c6:	e782      	b.n	80025ce <__udivmoddi4+0x52>
 80026c8:	4642      	mov	r2, r8
 80026ca:	2320      	movs	r3, #32
 80026cc:	2100      	movs	r1, #0
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	2200      	movs	r2, #0
 80026d2:	9100      	str	r1, [sp, #0]
 80026d4:	9201      	str	r2, [sp, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	40da      	lsrs	r2, r3
 80026da:	9201      	str	r2, [sp, #4]
 80026dc:	e785      	b.n	80025ea <__udivmoddi4+0x6e>
 80026de:	4642      	mov	r2, r8
 80026e0:	2320      	movs	r3, #32
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	002a      	movs	r2, r5
 80026e6:	4646      	mov	r6, r8
 80026e8:	409a      	lsls	r2, r3
 80026ea:	0023      	movs	r3, r4
 80026ec:	40f3      	lsrs	r3, r6
 80026ee:	4644      	mov	r4, r8
 80026f0:	4313      	orrs	r3, r2
 80026f2:	002a      	movs	r2, r5
 80026f4:	40e2      	lsrs	r2, r4
 80026f6:	001c      	movs	r4, r3
 80026f8:	465b      	mov	r3, fp
 80026fa:	0015      	movs	r5, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	dad4      	bge.n	80026aa <__udivmoddi4+0x12e>
 8002700:	4642      	mov	r2, r8
 8002702:	002f      	movs	r7, r5
 8002704:	2320      	movs	r3, #32
 8002706:	0026      	movs	r6, r4
 8002708:	4097      	lsls	r7, r2
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	40de      	lsrs	r6, r3
 800270e:	003b      	movs	r3, r7
 8002710:	4333      	orrs	r3, r6
 8002712:	e7cd      	b.n	80026b0 <__udivmoddi4+0x134>

08002714 <__gnu_ldivmod_helper>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	46ce      	mov	lr, r9
 8002718:	4647      	mov	r7, r8
 800271a:	b580      	push	{r7, lr}
 800271c:	4691      	mov	r9, r2
 800271e:	4698      	mov	r8, r3
 8002720:	0004      	movs	r4, r0
 8002722:	000d      	movs	r5, r1
 8002724:	f002 fae4 	bl	8004cf0 <__divdi3>
 8002728:	0007      	movs	r7, r0
 800272a:	000e      	movs	r6, r1
 800272c:	0002      	movs	r2, r0
 800272e:	000b      	movs	r3, r1
 8002730:	4648      	mov	r0, r9
 8002732:	4641      	mov	r1, r8
 8002734:	f7ff fef4 	bl	8002520 <__aeabi_lmul>
 8002738:	1a24      	subs	r4, r4, r0
 800273a:	418d      	sbcs	r5, r1
 800273c:	9b08      	ldr	r3, [sp, #32]
 800273e:	0038      	movs	r0, r7
 8002740:	0031      	movs	r1, r6
 8002742:	601c      	str	r4, [r3, #0]
 8002744:	605d      	str	r5, [r3, #4]
 8002746:	bcc0      	pop	{r6, r7}
 8002748:	46b9      	mov	r9, r7
 800274a:	46b0      	mov	r8, r6
 800274c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)

08002750 <__aeabi_fadd>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	4647      	mov	r7, r8
 8002754:	46ce      	mov	lr, r9
 8002756:	024a      	lsls	r2, r1, #9
 8002758:	0243      	lsls	r3, r0, #9
 800275a:	0045      	lsls	r5, r0, #1
 800275c:	0fc4      	lsrs	r4, r0, #31
 800275e:	0a50      	lsrs	r0, r2, #9
 8002760:	4680      	mov	r8, r0
 8002762:	0048      	lsls	r0, r1, #1
 8002764:	0a5b      	lsrs	r3, r3, #9
 8002766:	0e00      	lsrs	r0, r0, #24
 8002768:	0992      	lsrs	r2, r2, #6
 800276a:	4694      	mov	ip, r2
 800276c:	b580      	push	{r7, lr}
 800276e:	001e      	movs	r6, r3
 8002770:	4681      	mov	r9, r0
 8002772:	0002      	movs	r2, r0
 8002774:	0e2d      	lsrs	r5, r5, #24
 8002776:	00df      	lsls	r7, r3, #3
 8002778:	0fc9      	lsrs	r1, r1, #31
 800277a:	428c      	cmp	r4, r1
 800277c:	d024      	beq.n	80027c8 <__aeabi_fadd+0x78>
 800277e:	1a28      	subs	r0, r5, r0
 8002780:	2800      	cmp	r0, #0
 8002782:	dd0e      	ble.n	80027a2 <__aeabi_fadd+0x52>
 8002784:	2a00      	cmp	r2, #0
 8002786:	d13e      	bne.n	8002806 <__aeabi_fadd+0xb6>
 8002788:	4662      	mov	r2, ip
 800278a:	2a00      	cmp	r2, #0
 800278c:	d100      	bne.n	8002790 <__aeabi_fadd+0x40>
 800278e:	e0fd      	b.n	800298c <__aeabi_fadd+0x23c>
 8002790:	1e42      	subs	r2, r0, #1
 8002792:	2801      	cmp	r0, #1
 8002794:	d100      	bne.n	8002798 <__aeabi_fadd+0x48>
 8002796:	e137      	b.n	8002a08 <__aeabi_fadd+0x2b8>
 8002798:	28ff      	cmp	r0, #255	; 0xff
 800279a:	d100      	bne.n	800279e <__aeabi_fadd+0x4e>
 800279c:	e0a9      	b.n	80028f2 <__aeabi_fadd+0x1a2>
 800279e:	0010      	movs	r0, r2
 80027a0:	e039      	b.n	8002816 <__aeabi_fadd+0xc6>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d063      	beq.n	800286e <__aeabi_fadd+0x11e>
 80027a6:	464b      	mov	r3, r9
 80027a8:	1b52      	subs	r2, r2, r5
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d000      	beq.n	80027b0 <__aeabi_fadd+0x60>
 80027ae:	e0e0      	b.n	8002972 <__aeabi_fadd+0x222>
 80027b0:	2f00      	cmp	r7, #0
 80027b2:	d100      	bne.n	80027b6 <__aeabi_fadd+0x66>
 80027b4:	e0ce      	b.n	8002954 <__aeabi_fadd+0x204>
 80027b6:	1e53      	subs	r3, r2, #1
 80027b8:	2a01      	cmp	r2, #1
 80027ba:	d100      	bne.n	80027be <__aeabi_fadd+0x6e>
 80027bc:	e155      	b.n	8002a6a <__aeabi_fadd+0x31a>
 80027be:	2aff      	cmp	r2, #255	; 0xff
 80027c0:	d100      	bne.n	80027c4 <__aeabi_fadd+0x74>
 80027c2:	e094      	b.n	80028ee <__aeabi_fadd+0x19e>
 80027c4:	001a      	movs	r2, r3
 80027c6:	e0d9      	b.n	800297c <__aeabi_fadd+0x22c>
 80027c8:	1a2a      	subs	r2, r5, r0
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	dc00      	bgt.n	80027d0 <__aeabi_fadd+0x80>
 80027ce:	e099      	b.n	8002904 <__aeabi_fadd+0x1b4>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d062      	beq.n	800289a <__aeabi_fadd+0x14a>
 80027d4:	2dff      	cmp	r5, #255	; 0xff
 80027d6:	d100      	bne.n	80027da <__aeabi_fadd+0x8a>
 80027d8:	e08b      	b.n	80028f2 <__aeabi_fadd+0x1a2>
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	4661      	mov	r1, ip
 80027de:	04db      	lsls	r3, r3, #19
 80027e0:	4319      	orrs	r1, r3
 80027e2:	468c      	mov	ip, r1
 80027e4:	2a1b      	cmp	r2, #27
 80027e6:	dc00      	bgt.n	80027ea <__aeabi_fadd+0x9a>
 80027e8:	e0d2      	b.n	8002990 <__aeabi_fadd+0x240>
 80027ea:	2301      	movs	r3, #1
 80027ec:	19db      	adds	r3, r3, r7
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	d56a      	bpl.n	80028c8 <__aeabi_fadd+0x178>
 80027f2:	3501      	adds	r5, #1
 80027f4:	2dff      	cmp	r5, #255	; 0xff
 80027f6:	d05b      	beq.n	80028b0 <__aeabi_fadd+0x160>
 80027f8:	2201      	movs	r2, #1
 80027fa:	49a3      	ldr	r1, [pc, #652]	; (8002a88 <__aeabi_fadd+0x338>)
 80027fc:	401a      	ands	r2, r3
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	400b      	ands	r3, r1
 8002802:	4313      	orrs	r3, r2
 8002804:	e01c      	b.n	8002840 <__aeabi_fadd+0xf0>
 8002806:	2dff      	cmp	r5, #255	; 0xff
 8002808:	d100      	bne.n	800280c <__aeabi_fadd+0xbc>
 800280a:	e072      	b.n	80028f2 <__aeabi_fadd+0x1a2>
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	4662      	mov	r2, ip
 8002810:	04db      	lsls	r3, r3, #19
 8002812:	431a      	orrs	r2, r3
 8002814:	4694      	mov	ip, r2
 8002816:	281b      	cmp	r0, #27
 8002818:	dc00      	bgt.n	800281c <__aeabi_fadd+0xcc>
 800281a:	e090      	b.n	800293e <__aeabi_fadd+0x1ee>
 800281c:	2301      	movs	r3, #1
 800281e:	1afb      	subs	r3, r7, r3
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	d551      	bpl.n	80028c8 <__aeabi_fadd+0x178>
 8002824:	019b      	lsls	r3, r3, #6
 8002826:	099e      	lsrs	r6, r3, #6
 8002828:	0030      	movs	r0, r6
 800282a:	f002 fa37 	bl	8004c9c <__clzsi2>
 800282e:	0033      	movs	r3, r6
 8002830:	3805      	subs	r0, #5
 8002832:	4083      	lsls	r3, r0
 8002834:	4285      	cmp	r5, r0
 8002836:	dc00      	bgt.n	800283a <__aeabi_fadd+0xea>
 8002838:	e075      	b.n	8002926 <__aeabi_fadd+0x1d6>
 800283a:	4a94      	ldr	r2, [pc, #592]	; (8002a8c <__aeabi_fadd+0x33c>)
 800283c:	1a2d      	subs	r5, r5, r0
 800283e:	4013      	ands	r3, r2
 8002840:	075a      	lsls	r2, r3, #29
 8002842:	d004      	beq.n	800284e <__aeabi_fadd+0xfe>
 8002844:	220f      	movs	r2, #15
 8002846:	401a      	ands	r2, r3
 8002848:	2a04      	cmp	r2, #4
 800284a:	d000      	beq.n	800284e <__aeabi_fadd+0xfe>
 800284c:	3304      	adds	r3, #4
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	d53c      	bpl.n	80028cc <__aeabi_fadd+0x17c>
 8002852:	1c68      	adds	r0, r5, #1
 8002854:	2dfe      	cmp	r5, #254	; 0xfe
 8002856:	d02b      	beq.n	80028b0 <__aeabi_fadd+0x160>
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	0a5e      	lsrs	r6, r3, #9
 800285c:	b2c0      	uxtb	r0, r0
 800285e:	05c0      	lsls	r0, r0, #23
 8002860:	4330      	orrs	r0, r6
 8002862:	07e4      	lsls	r4, r4, #31
 8002864:	4320      	orrs	r0, r4
 8002866:	bcc0      	pop	{r6, r7}
 8002868:	46b9      	mov	r9, r7
 800286a:	46b0      	mov	r8, r6
 800286c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800286e:	20fe      	movs	r0, #254	; 0xfe
 8002870:	1c6a      	adds	r2, r5, #1
 8002872:	4210      	tst	r0, r2
 8002874:	d172      	bne.n	800295c <__aeabi_fadd+0x20c>
 8002876:	2d00      	cmp	r5, #0
 8002878:	d000      	beq.n	800287c <__aeabi_fadd+0x12c>
 800287a:	e0ae      	b.n	80029da <__aeabi_fadd+0x28a>
 800287c:	2f00      	cmp	r7, #0
 800287e:	d100      	bne.n	8002882 <__aeabi_fadd+0x132>
 8002880:	e0ec      	b.n	8002a5c <__aeabi_fadd+0x30c>
 8002882:	4663      	mov	r3, ip
 8002884:	2000      	movs	r0, #0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0e9      	beq.n	800285e <__aeabi_fadd+0x10e>
 800288a:	1afb      	subs	r3, r7, r3
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	d400      	bmi.n	8002892 <__aeabi_fadd+0x142>
 8002890:	e0f3      	b.n	8002a7a <__aeabi_fadd+0x32a>
 8002892:	4663      	mov	r3, ip
 8002894:	000c      	movs	r4, r1
 8002896:	1bdb      	subs	r3, r3, r7
 8002898:	e7d2      	b.n	8002840 <__aeabi_fadd+0xf0>
 800289a:	4661      	mov	r1, ip
 800289c:	2900      	cmp	r1, #0
 800289e:	d05b      	beq.n	8002958 <__aeabi_fadd+0x208>
 80028a0:	1e51      	subs	r1, r2, #1
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d100      	bne.n	80028a8 <__aeabi_fadd+0x158>
 80028a6:	e0a7      	b.n	80029f8 <__aeabi_fadd+0x2a8>
 80028a8:	2aff      	cmp	r2, #255	; 0xff
 80028aa:	d022      	beq.n	80028f2 <__aeabi_fadd+0x1a2>
 80028ac:	000a      	movs	r2, r1
 80028ae:	e799      	b.n	80027e4 <__aeabi_fadd+0x94>
 80028b0:	20ff      	movs	r0, #255	; 0xff
 80028b2:	2600      	movs	r6, #0
 80028b4:	e7d3      	b.n	800285e <__aeabi_fadd+0x10e>
 80028b6:	21fe      	movs	r1, #254	; 0xfe
 80028b8:	1c6a      	adds	r2, r5, #1
 80028ba:	4211      	tst	r1, r2
 80028bc:	d073      	beq.n	80029a6 <__aeabi_fadd+0x256>
 80028be:	2aff      	cmp	r2, #255	; 0xff
 80028c0:	d0f6      	beq.n	80028b0 <__aeabi_fadd+0x160>
 80028c2:	0015      	movs	r5, r2
 80028c4:	4467      	add	r7, ip
 80028c6:	087b      	lsrs	r3, r7, #1
 80028c8:	075a      	lsls	r2, r3, #29
 80028ca:	d1bb      	bne.n	8002844 <__aeabi_fadd+0xf4>
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	2dff      	cmp	r5, #255	; 0xff
 80028d0:	d00f      	beq.n	80028f2 <__aeabi_fadd+0x1a2>
 80028d2:	025b      	lsls	r3, r3, #9
 80028d4:	0a5e      	lsrs	r6, r3, #9
 80028d6:	b2e8      	uxtb	r0, r5
 80028d8:	e7c1      	b.n	800285e <__aeabi_fadd+0x10e>
 80028da:	4662      	mov	r2, ip
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d008      	beq.n	80028f2 <__aeabi_fadd+0x1a2>
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	03d2      	lsls	r2, r2, #15
 80028e4:	4213      	tst	r3, r2
 80028e6:	d004      	beq.n	80028f2 <__aeabi_fadd+0x1a2>
 80028e8:	4640      	mov	r0, r8
 80028ea:	4210      	tst	r0, r2
 80028ec:	d101      	bne.n	80028f2 <__aeabi_fadd+0x1a2>
 80028ee:	000c      	movs	r4, r1
 80028f0:	4643      	mov	r3, r8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0dc      	beq.n	80028b0 <__aeabi_fadd+0x160>
 80028f6:	2680      	movs	r6, #128	; 0x80
 80028f8:	03f6      	lsls	r6, r6, #15
 80028fa:	431e      	orrs	r6, r3
 80028fc:	0276      	lsls	r6, r6, #9
 80028fe:	20ff      	movs	r0, #255	; 0xff
 8002900:	0a76      	lsrs	r6, r6, #9
 8002902:	e7ac      	b.n	800285e <__aeabi_fadd+0x10e>
 8002904:	2a00      	cmp	r2, #0
 8002906:	d0d6      	beq.n	80028b6 <__aeabi_fadd+0x166>
 8002908:	1b42      	subs	r2, r0, r5
 800290a:	2d00      	cmp	r5, #0
 800290c:	d05c      	beq.n	80029c8 <__aeabi_fadd+0x278>
 800290e:	28ff      	cmp	r0, #255	; 0xff
 8002910:	d0ee      	beq.n	80028f0 <__aeabi_fadd+0x1a0>
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	04db      	lsls	r3, r3, #19
 8002916:	431f      	orrs	r7, r3
 8002918:	2a1b      	cmp	r2, #27
 800291a:	dc00      	bgt.n	800291e <__aeabi_fadd+0x1ce>
 800291c:	e082      	b.n	8002a24 <__aeabi_fadd+0x2d4>
 800291e:	2301      	movs	r3, #1
 8002920:	464d      	mov	r5, r9
 8002922:	4463      	add	r3, ip
 8002924:	e763      	b.n	80027ee <__aeabi_fadd+0x9e>
 8002926:	2220      	movs	r2, #32
 8002928:	1b40      	subs	r0, r0, r5
 800292a:	3001      	adds	r0, #1
 800292c:	1a12      	subs	r2, r2, r0
 800292e:	0019      	movs	r1, r3
 8002930:	4093      	lsls	r3, r2
 8002932:	40c1      	lsrs	r1, r0
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	4193      	sbcs	r3, r2
 8002938:	2500      	movs	r5, #0
 800293a:	430b      	orrs	r3, r1
 800293c:	e780      	b.n	8002840 <__aeabi_fadd+0xf0>
 800293e:	2320      	movs	r3, #32
 8002940:	4661      	mov	r1, ip
 8002942:	1a1b      	subs	r3, r3, r0
 8002944:	4099      	lsls	r1, r3
 8002946:	4662      	mov	r2, ip
 8002948:	000b      	movs	r3, r1
 800294a:	40c2      	lsrs	r2, r0
 800294c:	1e59      	subs	r1, r3, #1
 800294e:	418b      	sbcs	r3, r1
 8002950:	4313      	orrs	r3, r2
 8002952:	e764      	b.n	800281e <__aeabi_fadd+0xce>
 8002954:	000c      	movs	r4, r1
 8002956:	4643      	mov	r3, r8
 8002958:	0015      	movs	r5, r2
 800295a:	e7b8      	b.n	80028ce <__aeabi_fadd+0x17e>
 800295c:	4663      	mov	r3, ip
 800295e:	1afe      	subs	r6, r7, r3
 8002960:	0173      	lsls	r3, r6, #5
 8002962:	d445      	bmi.n	80029f0 <__aeabi_fadd+0x2a0>
 8002964:	2e00      	cmp	r6, #0
 8002966:	d000      	beq.n	800296a <__aeabi_fadd+0x21a>
 8002968:	e75e      	b.n	8002828 <__aeabi_fadd+0xd8>
 800296a:	2400      	movs	r4, #0
 800296c:	2000      	movs	r0, #0
 800296e:	2600      	movs	r6, #0
 8002970:	e775      	b.n	800285e <__aeabi_fadd+0x10e>
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d0bb      	beq.n	80028ee <__aeabi_fadd+0x19e>
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	04db      	lsls	r3, r3, #19
 800297a:	431f      	orrs	r7, r3
 800297c:	2a1b      	cmp	r2, #27
 800297e:	dd47      	ble.n	8002a10 <__aeabi_fadd+0x2c0>
 8002980:	2301      	movs	r3, #1
 8002982:	4662      	mov	r2, ip
 8002984:	000c      	movs	r4, r1
 8002986:	464d      	mov	r5, r9
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	e749      	b.n	8002820 <__aeabi_fadd+0xd0>
 800298c:	0005      	movs	r5, r0
 800298e:	e79e      	b.n	80028ce <__aeabi_fadd+0x17e>
 8002990:	4661      	mov	r1, ip
 8002992:	2320      	movs	r3, #32
 8002994:	40d1      	lsrs	r1, r2
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	4662      	mov	r2, ip
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	4193      	sbcs	r3, r2
 80029a2:	430b      	orrs	r3, r1
 80029a4:	e722      	b.n	80027ec <__aeabi_fadd+0x9c>
 80029a6:	2d00      	cmp	r5, #0
 80029a8:	d146      	bne.n	8002a38 <__aeabi_fadd+0x2e8>
 80029aa:	2f00      	cmp	r7, #0
 80029ac:	d062      	beq.n	8002a74 <__aeabi_fadd+0x324>
 80029ae:	4663      	mov	r3, ip
 80029b0:	2000      	movs	r0, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d100      	bne.n	80029b8 <__aeabi_fadd+0x268>
 80029b6:	e752      	b.n	800285e <__aeabi_fadd+0x10e>
 80029b8:	003b      	movs	r3, r7
 80029ba:	4463      	add	r3, ip
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	d583      	bpl.n	80028c8 <__aeabi_fadd+0x178>
 80029c0:	4a32      	ldr	r2, [pc, #200]	; (8002a8c <__aeabi_fadd+0x33c>)
 80029c2:	3501      	adds	r5, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	e77f      	b.n	80028c8 <__aeabi_fadd+0x178>
 80029c8:	2f00      	cmp	r7, #0
 80029ca:	d0c4      	beq.n	8002956 <__aeabi_fadd+0x206>
 80029cc:	1e53      	subs	r3, r2, #1
 80029ce:	2a01      	cmp	r2, #1
 80029d0:	d012      	beq.n	80029f8 <__aeabi_fadd+0x2a8>
 80029d2:	2aff      	cmp	r2, #255	; 0xff
 80029d4:	d08c      	beq.n	80028f0 <__aeabi_fadd+0x1a0>
 80029d6:	001a      	movs	r2, r3
 80029d8:	e79e      	b.n	8002918 <__aeabi_fadd+0x1c8>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d000      	beq.n	80029e0 <__aeabi_fadd+0x290>
 80029de:	e77c      	b.n	80028da <__aeabi_fadd+0x18a>
 80029e0:	4663      	mov	r3, ip
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d183      	bne.n	80028ee <__aeabi_fadd+0x19e>
 80029e6:	2680      	movs	r6, #128	; 0x80
 80029e8:	2400      	movs	r4, #0
 80029ea:	20ff      	movs	r0, #255	; 0xff
 80029ec:	03f6      	lsls	r6, r6, #15
 80029ee:	e736      	b.n	800285e <__aeabi_fadd+0x10e>
 80029f0:	4663      	mov	r3, ip
 80029f2:	000c      	movs	r4, r1
 80029f4:	1bde      	subs	r6, r3, r7
 80029f6:	e717      	b.n	8002828 <__aeabi_fadd+0xd8>
 80029f8:	003b      	movs	r3, r7
 80029fa:	4463      	add	r3, ip
 80029fc:	2501      	movs	r5, #1
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	d400      	bmi.n	8002a04 <__aeabi_fadd+0x2b4>
 8002a02:	e761      	b.n	80028c8 <__aeabi_fadd+0x178>
 8002a04:	2502      	movs	r5, #2
 8002a06:	e6f7      	b.n	80027f8 <__aeabi_fadd+0xa8>
 8002a08:	4663      	mov	r3, ip
 8002a0a:	2501      	movs	r5, #1
 8002a0c:	1afb      	subs	r3, r7, r3
 8002a0e:	e707      	b.n	8002820 <__aeabi_fadd+0xd0>
 8002a10:	2320      	movs	r3, #32
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	0038      	movs	r0, r7
 8002a16:	409f      	lsls	r7, r3
 8002a18:	003b      	movs	r3, r7
 8002a1a:	40d0      	lsrs	r0, r2
 8002a1c:	1e5a      	subs	r2, r3, #1
 8002a1e:	4193      	sbcs	r3, r2
 8002a20:	4303      	orrs	r3, r0
 8002a22:	e7ae      	b.n	8002982 <__aeabi_fadd+0x232>
 8002a24:	2320      	movs	r3, #32
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	0039      	movs	r1, r7
 8002a2a:	409f      	lsls	r7, r3
 8002a2c:	003b      	movs	r3, r7
 8002a2e:	40d1      	lsrs	r1, r2
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	4193      	sbcs	r3, r2
 8002a34:	430b      	orrs	r3, r1
 8002a36:	e773      	b.n	8002920 <__aeabi_fadd+0x1d0>
 8002a38:	2f00      	cmp	r7, #0
 8002a3a:	d100      	bne.n	8002a3e <__aeabi_fadd+0x2ee>
 8002a3c:	e758      	b.n	80028f0 <__aeabi_fadd+0x1a0>
 8002a3e:	4662      	mov	r2, ip
 8002a40:	2a00      	cmp	r2, #0
 8002a42:	d100      	bne.n	8002a46 <__aeabi_fadd+0x2f6>
 8002a44:	e755      	b.n	80028f2 <__aeabi_fadd+0x1a2>
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	03d2      	lsls	r2, r2, #15
 8002a4a:	4213      	tst	r3, r2
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_fadd+0x300>
 8002a4e:	e750      	b.n	80028f2 <__aeabi_fadd+0x1a2>
 8002a50:	4641      	mov	r1, r8
 8002a52:	4211      	tst	r1, r2
 8002a54:	d000      	beq.n	8002a58 <__aeabi_fadd+0x308>
 8002a56:	e74c      	b.n	80028f2 <__aeabi_fadd+0x1a2>
 8002a58:	4643      	mov	r3, r8
 8002a5a:	e74a      	b.n	80028f2 <__aeabi_fadd+0x1a2>
 8002a5c:	4663      	mov	r3, ip
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d083      	beq.n	800296a <__aeabi_fadd+0x21a>
 8002a62:	000c      	movs	r4, r1
 8002a64:	4646      	mov	r6, r8
 8002a66:	2000      	movs	r0, #0
 8002a68:	e6f9      	b.n	800285e <__aeabi_fadd+0x10e>
 8002a6a:	4663      	mov	r3, ip
 8002a6c:	000c      	movs	r4, r1
 8002a6e:	1bdb      	subs	r3, r3, r7
 8002a70:	3501      	adds	r5, #1
 8002a72:	e6d5      	b.n	8002820 <__aeabi_fadd+0xd0>
 8002a74:	4646      	mov	r6, r8
 8002a76:	2000      	movs	r0, #0
 8002a78:	e6f1      	b.n	800285e <__aeabi_fadd+0x10e>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d000      	beq.n	8002a80 <__aeabi_fadd+0x330>
 8002a7e:	e723      	b.n	80028c8 <__aeabi_fadd+0x178>
 8002a80:	2400      	movs	r4, #0
 8002a82:	2600      	movs	r6, #0
 8002a84:	e6eb      	b.n	800285e <__aeabi_fadd+0x10e>
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	7dffffff 	.word	0x7dffffff
 8002a8c:	fbffffff 	.word	0xfbffffff

08002a90 <__aeabi_fdiv>:
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	464f      	mov	r7, r9
 8002a94:	4646      	mov	r6, r8
 8002a96:	46d6      	mov	lr, sl
 8002a98:	0245      	lsls	r5, r0, #9
 8002a9a:	b5c0      	push	{r6, r7, lr}
 8002a9c:	0047      	lsls	r7, r0, #1
 8002a9e:	1c0c      	adds	r4, r1, #0
 8002aa0:	0a6d      	lsrs	r5, r5, #9
 8002aa2:	0e3f      	lsrs	r7, r7, #24
 8002aa4:	0fc6      	lsrs	r6, r0, #31
 8002aa6:	2f00      	cmp	r7, #0
 8002aa8:	d100      	bne.n	8002aac <__aeabi_fdiv+0x1c>
 8002aaa:	e06f      	b.n	8002b8c <__aeabi_fdiv+0xfc>
 8002aac:	2fff      	cmp	r7, #255	; 0xff
 8002aae:	d100      	bne.n	8002ab2 <__aeabi_fdiv+0x22>
 8002ab0:	e074      	b.n	8002b9c <__aeabi_fdiv+0x10c>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	4699      	mov	r9, r3
 8002ab8:	469a      	mov	sl, r3
 8002aba:	00ed      	lsls	r5, r5, #3
 8002abc:	04d2      	lsls	r2, r2, #19
 8002abe:	4315      	orrs	r5, r2
 8002ac0:	3f7f      	subs	r7, #127	; 0x7f
 8002ac2:	0263      	lsls	r3, r4, #9
 8002ac4:	0a5b      	lsrs	r3, r3, #9
 8002ac6:	4698      	mov	r8, r3
 8002ac8:	0063      	lsls	r3, r4, #1
 8002aca:	0e1b      	lsrs	r3, r3, #24
 8002acc:	0fe4      	lsrs	r4, r4, #31
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04d      	beq.n	8002b6e <__aeabi_fdiv+0xde>
 8002ad2:	2bff      	cmp	r3, #255	; 0xff
 8002ad4:	d045      	beq.n	8002b62 <__aeabi_fdiv+0xd2>
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	00d2      	lsls	r2, r2, #3
 8002adc:	04c9      	lsls	r1, r1, #19
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	4688      	mov	r8, r1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	3b7f      	subs	r3, #127	; 0x7f
 8002ae6:	0031      	movs	r1, r6
 8002ae8:	1aff      	subs	r7, r7, r3
 8002aea:	464b      	mov	r3, r9
 8002aec:	4061      	eors	r1, r4
 8002aee:	b2c9      	uxtb	r1, r1
 8002af0:	2b0f      	cmp	r3, #15
 8002af2:	d900      	bls.n	8002af6 <__aeabi_fdiv+0x66>
 8002af4:	e0b8      	b.n	8002c68 <__aeabi_fdiv+0x1d8>
 8002af6:	4870      	ldr	r0, [pc, #448]	; (8002cb8 <__aeabi_fdiv+0x228>)
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	58c3      	ldr	r3, [r0, r3]
 8002afc:	469f      	mov	pc, r3
 8002afe:	2300      	movs	r3, #0
 8002b00:	4698      	mov	r8, r3
 8002b02:	0026      	movs	r6, r4
 8002b04:	4645      	mov	r5, r8
 8002b06:	4692      	mov	sl, r2
 8002b08:	4653      	mov	r3, sl
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_fdiv+0x80>
 8002b0e:	e08d      	b.n	8002c2c <__aeabi_fdiv+0x19c>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d100      	bne.n	8002b16 <__aeabi_fdiv+0x86>
 8002b14:	e0a1      	b.n	8002c5a <__aeabi_fdiv+0x1ca>
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d018      	beq.n	8002b4c <__aeabi_fdiv+0xbc>
 8002b1a:	003b      	movs	r3, r7
 8002b1c:	337f      	adds	r3, #127	; 0x7f
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	dd6d      	ble.n	8002bfe <__aeabi_fdiv+0x16e>
 8002b22:	076a      	lsls	r2, r5, #29
 8002b24:	d004      	beq.n	8002b30 <__aeabi_fdiv+0xa0>
 8002b26:	220f      	movs	r2, #15
 8002b28:	402a      	ands	r2, r5
 8002b2a:	2a04      	cmp	r2, #4
 8002b2c:	d000      	beq.n	8002b30 <__aeabi_fdiv+0xa0>
 8002b2e:	3504      	adds	r5, #4
 8002b30:	012a      	lsls	r2, r5, #4
 8002b32:	d503      	bpl.n	8002b3c <__aeabi_fdiv+0xac>
 8002b34:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <__aeabi_fdiv+0x22c>)
 8002b36:	401d      	ands	r5, r3
 8002b38:	003b      	movs	r3, r7
 8002b3a:	3380      	adds	r3, #128	; 0x80
 8002b3c:	2bfe      	cmp	r3, #254	; 0xfe
 8002b3e:	dd00      	ble.n	8002b42 <__aeabi_fdiv+0xb2>
 8002b40:	e074      	b.n	8002c2c <__aeabi_fdiv+0x19c>
 8002b42:	01aa      	lsls	r2, r5, #6
 8002b44:	0a52      	lsrs	r2, r2, #9
 8002b46:	b2d8      	uxtb	r0, r3
 8002b48:	e002      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002b4a:	000e      	movs	r6, r1
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	2200      	movs	r2, #0
 8002b50:	05c0      	lsls	r0, r0, #23
 8002b52:	07f6      	lsls	r6, r6, #31
 8002b54:	4310      	orrs	r0, r2
 8002b56:	4330      	orrs	r0, r6
 8002b58:	bce0      	pop	{r5, r6, r7}
 8002b5a:	46ba      	mov	sl, r7
 8002b5c:	46b1      	mov	r9, r6
 8002b5e:	46a8      	mov	r8, r5
 8002b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b62:	4643      	mov	r3, r8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d13f      	bne.n	8002be8 <__aeabi_fdiv+0x158>
 8002b68:	2202      	movs	r2, #2
 8002b6a:	3fff      	subs	r7, #255	; 0xff
 8002b6c:	e003      	b.n	8002b76 <__aeabi_fdiv+0xe6>
 8002b6e:	4643      	mov	r3, r8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d12d      	bne.n	8002bd0 <__aeabi_fdiv+0x140>
 8002b74:	2201      	movs	r2, #1
 8002b76:	0031      	movs	r1, r6
 8002b78:	464b      	mov	r3, r9
 8002b7a:	4061      	eors	r1, r4
 8002b7c:	b2c9      	uxtb	r1, r1
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d838      	bhi.n	8002bf6 <__aeabi_fdiv+0x166>
 8002b84:	484e      	ldr	r0, [pc, #312]	; (8002cc0 <__aeabi_fdiv+0x230>)
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	58c3      	ldr	r3, [r0, r3]
 8002b8a:	469f      	mov	pc, r3
 8002b8c:	2d00      	cmp	r5, #0
 8002b8e:	d113      	bne.n	8002bb8 <__aeabi_fdiv+0x128>
 8002b90:	2304      	movs	r3, #4
 8002b92:	4699      	mov	r9, r3
 8002b94:	3b03      	subs	r3, #3
 8002b96:	2700      	movs	r7, #0
 8002b98:	469a      	mov	sl, r3
 8002b9a:	e792      	b.n	8002ac2 <__aeabi_fdiv+0x32>
 8002b9c:	2d00      	cmp	r5, #0
 8002b9e:	d105      	bne.n	8002bac <__aeabi_fdiv+0x11c>
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	4699      	mov	r9, r3
 8002ba4:	3b06      	subs	r3, #6
 8002ba6:	27ff      	movs	r7, #255	; 0xff
 8002ba8:	469a      	mov	sl, r3
 8002baa:	e78a      	b.n	8002ac2 <__aeabi_fdiv+0x32>
 8002bac:	230c      	movs	r3, #12
 8002bae:	4699      	mov	r9, r3
 8002bb0:	3b09      	subs	r3, #9
 8002bb2:	27ff      	movs	r7, #255	; 0xff
 8002bb4:	469a      	mov	sl, r3
 8002bb6:	e784      	b.n	8002ac2 <__aeabi_fdiv+0x32>
 8002bb8:	0028      	movs	r0, r5
 8002bba:	f002 f86f 	bl	8004c9c <__clzsi2>
 8002bbe:	2776      	movs	r7, #118	; 0x76
 8002bc0:	1f43      	subs	r3, r0, #5
 8002bc2:	409d      	lsls	r5, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	427f      	negs	r7, r7
 8002bc8:	4699      	mov	r9, r3
 8002bca:	469a      	mov	sl, r3
 8002bcc:	1a3f      	subs	r7, r7, r0
 8002bce:	e778      	b.n	8002ac2 <__aeabi_fdiv+0x32>
 8002bd0:	4640      	mov	r0, r8
 8002bd2:	f002 f863 	bl	8004c9c <__clzsi2>
 8002bd6:	4642      	mov	r2, r8
 8002bd8:	1f43      	subs	r3, r0, #5
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	2376      	movs	r3, #118	; 0x76
 8002bde:	425b      	negs	r3, r3
 8002be0:	4690      	mov	r8, r2
 8002be2:	1a1b      	subs	r3, r3, r0
 8002be4:	2200      	movs	r2, #0
 8002be6:	e77e      	b.n	8002ae6 <__aeabi_fdiv+0x56>
 8002be8:	2303      	movs	r3, #3
 8002bea:	464a      	mov	r2, r9
 8002bec:	431a      	orrs	r2, r3
 8002bee:	4691      	mov	r9, r2
 8002bf0:	33fc      	adds	r3, #252	; 0xfc
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	e777      	b.n	8002ae6 <__aeabi_fdiv+0x56>
 8002bf6:	000e      	movs	r6, r1
 8002bf8:	20ff      	movs	r0, #255	; 0xff
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	e7a8      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002bfe:	2201      	movs	r2, #1
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b1b      	cmp	r3, #27
 8002c04:	dca2      	bgt.n	8002b4c <__aeabi_fdiv+0xbc>
 8002c06:	379e      	adds	r7, #158	; 0x9e
 8002c08:	002a      	movs	r2, r5
 8002c0a:	40bd      	lsls	r5, r7
 8002c0c:	40da      	lsrs	r2, r3
 8002c0e:	1e6b      	subs	r3, r5, #1
 8002c10:	419d      	sbcs	r5, r3
 8002c12:	4315      	orrs	r5, r2
 8002c14:	076a      	lsls	r2, r5, #29
 8002c16:	d004      	beq.n	8002c22 <__aeabi_fdiv+0x192>
 8002c18:	220f      	movs	r2, #15
 8002c1a:	402a      	ands	r2, r5
 8002c1c:	2a04      	cmp	r2, #4
 8002c1e:	d000      	beq.n	8002c22 <__aeabi_fdiv+0x192>
 8002c20:	3504      	adds	r5, #4
 8002c22:	016a      	lsls	r2, r5, #5
 8002c24:	d544      	bpl.n	8002cb0 <__aeabi_fdiv+0x220>
 8002c26:	2001      	movs	r0, #1
 8002c28:	2200      	movs	r2, #0
 8002c2a:	e791      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002c2c:	20ff      	movs	r0, #255	; 0xff
 8002c2e:	2200      	movs	r2, #0
 8002c30:	e78e      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	2600      	movs	r6, #0
 8002c36:	20ff      	movs	r0, #255	; 0xff
 8002c38:	03d2      	lsls	r2, r2, #15
 8002c3a:	e789      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4698      	mov	r8, r3
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	03d2      	lsls	r2, r2, #15
 8002c44:	4215      	tst	r5, r2
 8002c46:	d008      	beq.n	8002c5a <__aeabi_fdiv+0x1ca>
 8002c48:	4643      	mov	r3, r8
 8002c4a:	4213      	tst	r3, r2
 8002c4c:	d105      	bne.n	8002c5a <__aeabi_fdiv+0x1ca>
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	0252      	lsls	r2, r2, #9
 8002c52:	0026      	movs	r6, r4
 8002c54:	20ff      	movs	r0, #255	; 0xff
 8002c56:	0a52      	lsrs	r2, r2, #9
 8002c58:	e77a      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	03d2      	lsls	r2, r2, #15
 8002c5e:	432a      	orrs	r2, r5
 8002c60:	0252      	lsls	r2, r2, #9
 8002c62:	20ff      	movs	r0, #255	; 0xff
 8002c64:	0a52      	lsrs	r2, r2, #9
 8002c66:	e773      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002c68:	4642      	mov	r2, r8
 8002c6a:	016b      	lsls	r3, r5, #5
 8002c6c:	0155      	lsls	r5, r2, #5
 8002c6e:	42ab      	cmp	r3, r5
 8002c70:	d21a      	bcs.n	8002ca8 <__aeabi_fdiv+0x218>
 8002c72:	201b      	movs	r0, #27
 8002c74:	2200      	movs	r2, #0
 8002c76:	3f01      	subs	r7, #1
 8002c78:	2601      	movs	r6, #1
 8002c7a:	001c      	movs	r4, r3
 8002c7c:	0052      	lsls	r2, r2, #1
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2c00      	cmp	r4, #0
 8002c82:	db01      	blt.n	8002c88 <__aeabi_fdiv+0x1f8>
 8002c84:	429d      	cmp	r5, r3
 8002c86:	d801      	bhi.n	8002c8c <__aeabi_fdiv+0x1fc>
 8002c88:	1b5b      	subs	r3, r3, r5
 8002c8a:	4332      	orrs	r2, r6
 8002c8c:	3801      	subs	r0, #1
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d1f3      	bne.n	8002c7a <__aeabi_fdiv+0x1ea>
 8002c92:	1e58      	subs	r0, r3, #1
 8002c94:	4183      	sbcs	r3, r0
 8002c96:	4313      	orrs	r3, r2
 8002c98:	001d      	movs	r5, r3
 8002c9a:	003b      	movs	r3, r7
 8002c9c:	337f      	adds	r3, #127	; 0x7f
 8002c9e:	000e      	movs	r6, r1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	dd00      	ble.n	8002ca6 <__aeabi_fdiv+0x216>
 8002ca4:	e73d      	b.n	8002b22 <__aeabi_fdiv+0x92>
 8002ca6:	e7aa      	b.n	8002bfe <__aeabi_fdiv+0x16e>
 8002ca8:	201a      	movs	r0, #26
 8002caa:	2201      	movs	r2, #1
 8002cac:	1b5b      	subs	r3, r3, r5
 8002cae:	e7e3      	b.n	8002c78 <__aeabi_fdiv+0x1e8>
 8002cb0:	01aa      	lsls	r2, r5, #6
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	0a52      	lsrs	r2, r2, #9
 8002cb6:	e74b      	b.n	8002b50 <__aeabi_fdiv+0xc0>
 8002cb8:	08031a14 	.word	0x08031a14
 8002cbc:	f7ffffff 	.word	0xf7ffffff
 8002cc0:	08031a54 	.word	0x08031a54

08002cc4 <__eqsf2>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	0042      	lsls	r2, r0, #1
 8002cc8:	0245      	lsls	r5, r0, #9
 8002cca:	024e      	lsls	r6, r1, #9
 8002ccc:	004c      	lsls	r4, r1, #1
 8002cce:	0fc3      	lsrs	r3, r0, #31
 8002cd0:	0a6d      	lsrs	r5, r5, #9
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	0e12      	lsrs	r2, r2, #24
 8002cd6:	0a76      	lsrs	r6, r6, #9
 8002cd8:	0e24      	lsrs	r4, r4, #24
 8002cda:	0fc9      	lsrs	r1, r1, #31
 8002cdc:	2aff      	cmp	r2, #255	; 0xff
 8002cde:	d006      	beq.n	8002cee <__eqsf2+0x2a>
 8002ce0:	2cff      	cmp	r4, #255	; 0xff
 8002ce2:	d003      	beq.n	8002cec <__eqsf2+0x28>
 8002ce4:	42a2      	cmp	r2, r4
 8002ce6:	d101      	bne.n	8002cec <__eqsf2+0x28>
 8002ce8:	42b5      	cmp	r5, r6
 8002cea:	d006      	beq.n	8002cfa <__eqsf2+0x36>
 8002cec:	bd70      	pop	{r4, r5, r6, pc}
 8002cee:	2d00      	cmp	r5, #0
 8002cf0:	d1fc      	bne.n	8002cec <__eqsf2+0x28>
 8002cf2:	2cff      	cmp	r4, #255	; 0xff
 8002cf4:	d1fa      	bne.n	8002cec <__eqsf2+0x28>
 8002cf6:	2e00      	cmp	r6, #0
 8002cf8:	d1f8      	bne.n	8002cec <__eqsf2+0x28>
 8002cfa:	428b      	cmp	r3, r1
 8002cfc:	d006      	beq.n	8002d0c <__eqsf2+0x48>
 8002cfe:	2001      	movs	r0, #1
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d1f3      	bne.n	8002cec <__eqsf2+0x28>
 8002d04:	0028      	movs	r0, r5
 8002d06:	1e43      	subs	r3, r0, #1
 8002d08:	4198      	sbcs	r0, r3
 8002d0a:	e7ef      	b.n	8002cec <__eqsf2+0x28>
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	e7ed      	b.n	8002cec <__eqsf2+0x28>

08002d10 <__gesf2>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	0042      	lsls	r2, r0, #1
 8002d14:	0245      	lsls	r5, r0, #9
 8002d16:	024e      	lsls	r6, r1, #9
 8002d18:	004c      	lsls	r4, r1, #1
 8002d1a:	0fc3      	lsrs	r3, r0, #31
 8002d1c:	0a6d      	lsrs	r5, r5, #9
 8002d1e:	0e12      	lsrs	r2, r2, #24
 8002d20:	0a76      	lsrs	r6, r6, #9
 8002d22:	0e24      	lsrs	r4, r4, #24
 8002d24:	0fc8      	lsrs	r0, r1, #31
 8002d26:	2aff      	cmp	r2, #255	; 0xff
 8002d28:	d01b      	beq.n	8002d62 <__gesf2+0x52>
 8002d2a:	2cff      	cmp	r4, #255	; 0xff
 8002d2c:	d00e      	beq.n	8002d4c <__gesf2+0x3c>
 8002d2e:	2a00      	cmp	r2, #0
 8002d30:	d11b      	bne.n	8002d6a <__gesf2+0x5a>
 8002d32:	2c00      	cmp	r4, #0
 8002d34:	d101      	bne.n	8002d3a <__gesf2+0x2a>
 8002d36:	2e00      	cmp	r6, #0
 8002d38:	d01c      	beq.n	8002d74 <__gesf2+0x64>
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	d00c      	beq.n	8002d58 <__gesf2+0x48>
 8002d3e:	4283      	cmp	r3, r0
 8002d40:	d01c      	beq.n	8002d7c <__gesf2+0x6c>
 8002d42:	2102      	movs	r1, #2
 8002d44:	1e58      	subs	r0, r3, #1
 8002d46:	4008      	ands	r0, r1
 8002d48:	3801      	subs	r0, #1
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	2e00      	cmp	r6, #0
 8002d4e:	d122      	bne.n	8002d96 <__gesf2+0x86>
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	d1f4      	bne.n	8002d3e <__gesf2+0x2e>
 8002d54:	2d00      	cmp	r5, #0
 8002d56:	d1f2      	bne.n	8002d3e <__gesf2+0x2e>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d1f6      	bne.n	8002d4a <__gesf2+0x3a>
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	4240      	negs	r0, r0
 8002d60:	e7f3      	b.n	8002d4a <__gesf2+0x3a>
 8002d62:	2d00      	cmp	r5, #0
 8002d64:	d117      	bne.n	8002d96 <__gesf2+0x86>
 8002d66:	2cff      	cmp	r4, #255	; 0xff
 8002d68:	d0f0      	beq.n	8002d4c <__gesf2+0x3c>
 8002d6a:	2c00      	cmp	r4, #0
 8002d6c:	d1e7      	bne.n	8002d3e <__gesf2+0x2e>
 8002d6e:	2e00      	cmp	r6, #0
 8002d70:	d1e5      	bne.n	8002d3e <__gesf2+0x2e>
 8002d72:	e7e6      	b.n	8002d42 <__gesf2+0x32>
 8002d74:	2000      	movs	r0, #0
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	d0e7      	beq.n	8002d4a <__gesf2+0x3a>
 8002d7a:	e7e2      	b.n	8002d42 <__gesf2+0x32>
 8002d7c:	42a2      	cmp	r2, r4
 8002d7e:	dc05      	bgt.n	8002d8c <__gesf2+0x7c>
 8002d80:	dbea      	blt.n	8002d58 <__gesf2+0x48>
 8002d82:	42b5      	cmp	r5, r6
 8002d84:	d802      	bhi.n	8002d8c <__gesf2+0x7c>
 8002d86:	d3e7      	bcc.n	8002d58 <__gesf2+0x48>
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e7de      	b.n	8002d4a <__gesf2+0x3a>
 8002d8c:	4243      	negs	r3, r0
 8002d8e:	4158      	adcs	r0, r3
 8002d90:	0040      	lsls	r0, r0, #1
 8002d92:	3801      	subs	r0, #1
 8002d94:	e7d9      	b.n	8002d4a <__gesf2+0x3a>
 8002d96:	2002      	movs	r0, #2
 8002d98:	4240      	negs	r0, r0
 8002d9a:	e7d6      	b.n	8002d4a <__gesf2+0x3a>

08002d9c <__lesf2>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	0042      	lsls	r2, r0, #1
 8002da0:	0245      	lsls	r5, r0, #9
 8002da2:	024e      	lsls	r6, r1, #9
 8002da4:	004c      	lsls	r4, r1, #1
 8002da6:	0fc3      	lsrs	r3, r0, #31
 8002da8:	0a6d      	lsrs	r5, r5, #9
 8002daa:	0e12      	lsrs	r2, r2, #24
 8002dac:	0a76      	lsrs	r6, r6, #9
 8002dae:	0e24      	lsrs	r4, r4, #24
 8002db0:	0fc8      	lsrs	r0, r1, #31
 8002db2:	2aff      	cmp	r2, #255	; 0xff
 8002db4:	d00b      	beq.n	8002dce <__lesf2+0x32>
 8002db6:	2cff      	cmp	r4, #255	; 0xff
 8002db8:	d00d      	beq.n	8002dd6 <__lesf2+0x3a>
 8002dba:	2a00      	cmp	r2, #0
 8002dbc:	d11f      	bne.n	8002dfe <__lesf2+0x62>
 8002dbe:	2c00      	cmp	r4, #0
 8002dc0:	d116      	bne.n	8002df0 <__lesf2+0x54>
 8002dc2:	2e00      	cmp	r6, #0
 8002dc4:	d114      	bne.n	8002df0 <__lesf2+0x54>
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	2d00      	cmp	r5, #0
 8002dca:	d010      	beq.n	8002dee <__lesf2+0x52>
 8002dcc:	e009      	b.n	8002de2 <__lesf2+0x46>
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	d10c      	bne.n	8002dec <__lesf2+0x50>
 8002dd2:	2cff      	cmp	r4, #255	; 0xff
 8002dd4:	d113      	bne.n	8002dfe <__lesf2+0x62>
 8002dd6:	2e00      	cmp	r6, #0
 8002dd8:	d108      	bne.n	8002dec <__lesf2+0x50>
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d008      	beq.n	8002df0 <__lesf2+0x54>
 8002dde:	4283      	cmp	r3, r0
 8002de0:	d012      	beq.n	8002e08 <__lesf2+0x6c>
 8002de2:	2102      	movs	r1, #2
 8002de4:	1e58      	subs	r0, r3, #1
 8002de6:	4008      	ands	r0, r1
 8002de8:	3801      	subs	r0, #1
 8002dea:	e000      	b.n	8002dee <__lesf2+0x52>
 8002dec:	2002      	movs	r0, #2
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	d1f4      	bne.n	8002dde <__lesf2+0x42>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d1fa      	bne.n	8002dee <__lesf2+0x52>
 8002df8:	2001      	movs	r0, #1
 8002dfa:	4240      	negs	r0, r0
 8002dfc:	e7f7      	b.n	8002dee <__lesf2+0x52>
 8002dfe:	2c00      	cmp	r4, #0
 8002e00:	d1ed      	bne.n	8002dde <__lesf2+0x42>
 8002e02:	2e00      	cmp	r6, #0
 8002e04:	d1eb      	bne.n	8002dde <__lesf2+0x42>
 8002e06:	e7ec      	b.n	8002de2 <__lesf2+0x46>
 8002e08:	42a2      	cmp	r2, r4
 8002e0a:	dc05      	bgt.n	8002e18 <__lesf2+0x7c>
 8002e0c:	dbf2      	blt.n	8002df4 <__lesf2+0x58>
 8002e0e:	42b5      	cmp	r5, r6
 8002e10:	d802      	bhi.n	8002e18 <__lesf2+0x7c>
 8002e12:	d3ef      	bcc.n	8002df4 <__lesf2+0x58>
 8002e14:	2000      	movs	r0, #0
 8002e16:	e7ea      	b.n	8002dee <__lesf2+0x52>
 8002e18:	4243      	negs	r3, r0
 8002e1a:	4158      	adcs	r0, r3
 8002e1c:	0040      	lsls	r0, r0, #1
 8002e1e:	3801      	subs	r0, #1
 8002e20:	e7e5      	b.n	8002dee <__lesf2+0x52>
 8002e22:	46c0      	nop			; (mov r8, r8)

08002e24 <__aeabi_fmul>:
 8002e24:	0243      	lsls	r3, r0, #9
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2a:	464f      	mov	r7, r9
 8002e2c:	4646      	mov	r6, r8
 8002e2e:	4699      	mov	r9, r3
 8002e30:	46d6      	mov	lr, sl
 8002e32:	0fc3      	lsrs	r3, r0, #31
 8002e34:	0045      	lsls	r5, r0, #1
 8002e36:	4698      	mov	r8, r3
 8002e38:	b5c0      	push	{r6, r7, lr}
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	1c0f      	adds	r7, r1, #0
 8002e3e:	0e2d      	lsrs	r5, r5, #24
 8002e40:	d100      	bne.n	8002e44 <__aeabi_fmul+0x20>
 8002e42:	e0cb      	b.n	8002fdc <__aeabi_fmul+0x1b8>
 8002e44:	2dff      	cmp	r5, #255	; 0xff
 8002e46:	d100      	bne.n	8002e4a <__aeabi_fmul+0x26>
 8002e48:	e0cf      	b.n	8002fea <__aeabi_fmul+0x1c6>
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	04d2      	lsls	r2, r2, #19
 8002e50:	431a      	orrs	r2, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	4691      	mov	r9, r2
 8002e56:	2600      	movs	r6, #0
 8002e58:	469a      	mov	sl, r3
 8002e5a:	3d7f      	subs	r5, #127	; 0x7f
 8002e5c:	027c      	lsls	r4, r7, #9
 8002e5e:	007b      	lsls	r3, r7, #1
 8002e60:	0a64      	lsrs	r4, r4, #9
 8002e62:	0e1b      	lsrs	r3, r3, #24
 8002e64:	0fff      	lsrs	r7, r7, #31
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d100      	bne.n	8002e6c <__aeabi_fmul+0x48>
 8002e6a:	e0a9      	b.n	8002fc0 <__aeabi_fmul+0x19c>
 8002e6c:	2bff      	cmp	r3, #255	; 0xff
 8002e6e:	d011      	beq.n	8002e94 <__aeabi_fmul+0x70>
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	00e4      	lsls	r4, r4, #3
 8002e74:	04d2      	lsls	r2, r2, #19
 8002e76:	4314      	orrs	r4, r2
 8002e78:	4642      	mov	r2, r8
 8002e7a:	3b7f      	subs	r3, #127	; 0x7f
 8002e7c:	195b      	adds	r3, r3, r5
 8002e7e:	407a      	eors	r2, r7
 8002e80:	2000      	movs	r0, #0
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	1c5d      	adds	r5, r3, #1
 8002e86:	2e0a      	cmp	r6, #10
 8002e88:	dd13      	ble.n	8002eb2 <__aeabi_fmul+0x8e>
 8002e8a:	003a      	movs	r2, r7
 8002e8c:	2e0b      	cmp	r6, #11
 8002e8e:	d047      	beq.n	8002f20 <__aeabi_fmul+0xfc>
 8002e90:	4647      	mov	r7, r8
 8002e92:	e03f      	b.n	8002f14 <__aeabi_fmul+0xf0>
 8002e94:	002b      	movs	r3, r5
 8002e96:	33ff      	adds	r3, #255	; 0xff
 8002e98:	2c00      	cmp	r4, #0
 8002e9a:	d11e      	bne.n	8002eda <__aeabi_fmul+0xb6>
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4316      	orrs	r6, r2
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	407a      	eors	r2, r7
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	35ff      	adds	r5, #255	; 0xff
 8002eaa:	2e0a      	cmp	r6, #10
 8002eac:	dd00      	ble.n	8002eb0 <__aeabi_fmul+0x8c>
 8002eae:	e0e4      	b.n	800307a <__aeabi_fmul+0x256>
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	2e02      	cmp	r6, #2
 8002eb4:	dc1c      	bgt.n	8002ef0 <__aeabi_fmul+0xcc>
 8002eb6:	3e01      	subs	r6, #1
 8002eb8:	2e01      	cmp	r6, #1
 8002eba:	d842      	bhi.n	8002f42 <__aeabi_fmul+0x11e>
 8002ebc:	2802      	cmp	r0, #2
 8002ebe:	d03d      	beq.n	8002f3c <__aeabi_fmul+0x118>
 8002ec0:	2801      	cmp	r0, #1
 8002ec2:	d166      	bne.n	8002f92 <__aeabi_fmul+0x16e>
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	05c0      	lsls	r0, r0, #23
 8002eca:	4308      	orrs	r0, r1
 8002ecc:	07d2      	lsls	r2, r2, #31
 8002ece:	4310      	orrs	r0, r2
 8002ed0:	bce0      	pop	{r5, r6, r7}
 8002ed2:	46ba      	mov	sl, r7
 8002ed4:	46b1      	mov	r9, r6
 8002ed6:	46a8      	mov	r8, r5
 8002ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eda:	2203      	movs	r2, #3
 8002edc:	4316      	orrs	r6, r2
 8002ede:	4642      	mov	r2, r8
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	407a      	eors	r2, r7
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	35ff      	adds	r5, #255	; 0xff
 8002ee8:	2e0a      	cmp	r6, #10
 8002eea:	dd00      	ble.n	8002eee <__aeabi_fmul+0xca>
 8002eec:	e0e4      	b.n	80030b8 <__aeabi_fmul+0x294>
 8002eee:	2003      	movs	r0, #3
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	40b1      	lsls	r1, r6
 8002ef4:	26a6      	movs	r6, #166	; 0xa6
 8002ef6:	00f6      	lsls	r6, r6, #3
 8002ef8:	4231      	tst	r1, r6
 8002efa:	d10a      	bne.n	8002f12 <__aeabi_fmul+0xee>
 8002efc:	2690      	movs	r6, #144	; 0x90
 8002efe:	00b6      	lsls	r6, r6, #2
 8002f00:	4231      	tst	r1, r6
 8002f02:	d116      	bne.n	8002f32 <__aeabi_fmul+0x10e>
 8002f04:	3eb9      	subs	r6, #185	; 0xb9
 8002f06:	3eff      	subs	r6, #255	; 0xff
 8002f08:	420e      	tst	r6, r1
 8002f0a:	d01a      	beq.n	8002f42 <__aeabi_fmul+0x11e>
 8002f0c:	46a1      	mov	r9, r4
 8002f0e:	4682      	mov	sl, r0
 8002f10:	e000      	b.n	8002f14 <__aeabi_fmul+0xf0>
 8002f12:	0017      	movs	r7, r2
 8002f14:	4653      	mov	r3, sl
 8002f16:	003a      	movs	r2, r7
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d00f      	beq.n	8002f3c <__aeabi_fmul+0x118>
 8002f1c:	464c      	mov	r4, r9
 8002f1e:	4650      	mov	r0, sl
 8002f20:	2803      	cmp	r0, #3
 8002f22:	d1cd      	bne.n	8002ec0 <__aeabi_fmul+0x9c>
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	03c9      	lsls	r1, r1, #15
 8002f28:	4321      	orrs	r1, r4
 8002f2a:	0249      	lsls	r1, r1, #9
 8002f2c:	20ff      	movs	r0, #255	; 0xff
 8002f2e:	0a49      	lsrs	r1, r1, #9
 8002f30:	e7ca      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	2200      	movs	r2, #0
 8002f36:	20ff      	movs	r0, #255	; 0xff
 8002f38:	03c9      	lsls	r1, r1, #15
 8002f3a:	e7c5      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 8002f3c:	20ff      	movs	r0, #255	; 0xff
 8002f3e:	2100      	movs	r1, #0
 8002f40:	e7c2      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 8002f42:	0c20      	lsrs	r0, r4, #16
 8002f44:	4649      	mov	r1, r9
 8002f46:	0424      	lsls	r4, r4, #16
 8002f48:	0c24      	lsrs	r4, r4, #16
 8002f4a:	0027      	movs	r7, r4
 8002f4c:	0c0e      	lsrs	r6, r1, #16
 8002f4e:	0409      	lsls	r1, r1, #16
 8002f50:	0c09      	lsrs	r1, r1, #16
 8002f52:	4374      	muls	r4, r6
 8002f54:	434f      	muls	r7, r1
 8002f56:	4346      	muls	r6, r0
 8002f58:	4348      	muls	r0, r1
 8002f5a:	0c39      	lsrs	r1, r7, #16
 8002f5c:	1900      	adds	r0, r0, r4
 8002f5e:	1809      	adds	r1, r1, r0
 8002f60:	428c      	cmp	r4, r1
 8002f62:	d903      	bls.n	8002f6c <__aeabi_fmul+0x148>
 8002f64:	2080      	movs	r0, #128	; 0x80
 8002f66:	0240      	lsls	r0, r0, #9
 8002f68:	4684      	mov	ip, r0
 8002f6a:	4466      	add	r6, ip
 8002f6c:	043f      	lsls	r7, r7, #16
 8002f6e:	0408      	lsls	r0, r1, #16
 8002f70:	0c3f      	lsrs	r7, r7, #16
 8002f72:	19c0      	adds	r0, r0, r7
 8002f74:	0184      	lsls	r4, r0, #6
 8002f76:	1e67      	subs	r7, r4, #1
 8002f78:	41bc      	sbcs	r4, r7
 8002f7a:	0c09      	lsrs	r1, r1, #16
 8002f7c:	0e80      	lsrs	r0, r0, #26
 8002f7e:	1989      	adds	r1, r1, r6
 8002f80:	4304      	orrs	r4, r0
 8002f82:	0189      	lsls	r1, r1, #6
 8002f84:	430c      	orrs	r4, r1
 8002f86:	0109      	lsls	r1, r1, #4
 8002f88:	d571      	bpl.n	800306e <__aeabi_fmul+0x24a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	0861      	lsrs	r1, r4, #1
 8002f8e:	401c      	ands	r4, r3
 8002f90:	430c      	orrs	r4, r1
 8002f92:	002b      	movs	r3, r5
 8002f94:	337f      	adds	r3, #127	; 0x7f
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dd51      	ble.n	800303e <__aeabi_fmul+0x21a>
 8002f9a:	0761      	lsls	r1, r4, #29
 8002f9c:	d004      	beq.n	8002fa8 <__aeabi_fmul+0x184>
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	4021      	ands	r1, r4
 8002fa2:	2904      	cmp	r1, #4
 8002fa4:	d000      	beq.n	8002fa8 <__aeabi_fmul+0x184>
 8002fa6:	3404      	adds	r4, #4
 8002fa8:	0121      	lsls	r1, r4, #4
 8002faa:	d503      	bpl.n	8002fb4 <__aeabi_fmul+0x190>
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <__aeabi_fmul+0x298>)
 8002fae:	401c      	ands	r4, r3
 8002fb0:	002b      	movs	r3, r5
 8002fb2:	3380      	adds	r3, #128	; 0x80
 8002fb4:	2bfe      	cmp	r3, #254	; 0xfe
 8002fb6:	dcc1      	bgt.n	8002f3c <__aeabi_fmul+0x118>
 8002fb8:	01a1      	lsls	r1, r4, #6
 8002fba:	0a49      	lsrs	r1, r1, #9
 8002fbc:	b2d8      	uxtb	r0, r3
 8002fbe:	e783      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 8002fc0:	2c00      	cmp	r4, #0
 8002fc2:	d12c      	bne.n	800301e <__aeabi_fmul+0x1fa>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4642      	mov	r2, r8
 8002fc8:	431e      	orrs	r6, r3
 8002fca:	002b      	movs	r3, r5
 8002fcc:	407a      	eors	r2, r7
 8002fce:	2001      	movs	r0, #1
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	1c5d      	adds	r5, r3, #1
 8002fd4:	2e0a      	cmp	r6, #10
 8002fd6:	dd00      	ble.n	8002fda <__aeabi_fmul+0x1b6>
 8002fd8:	e757      	b.n	8002e8a <__aeabi_fmul+0x66>
 8002fda:	e76a      	b.n	8002eb2 <__aeabi_fmul+0x8e>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d110      	bne.n	8003002 <__aeabi_fmul+0x1de>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	2604      	movs	r6, #4
 8002fe4:	2500      	movs	r5, #0
 8002fe6:	469a      	mov	sl, r3
 8002fe8:	e738      	b.n	8002e5c <__aeabi_fmul+0x38>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <__aeabi_fmul+0x1d4>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	2608      	movs	r6, #8
 8002ff2:	25ff      	movs	r5, #255	; 0xff
 8002ff4:	469a      	mov	sl, r3
 8002ff6:	e731      	b.n	8002e5c <__aeabi_fmul+0x38>
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	260c      	movs	r6, #12
 8002ffc:	25ff      	movs	r5, #255	; 0xff
 8002ffe:	469a      	mov	sl, r3
 8003000:	e72c      	b.n	8002e5c <__aeabi_fmul+0x38>
 8003002:	4648      	mov	r0, r9
 8003004:	f001 fe4a 	bl	8004c9c <__clzsi2>
 8003008:	464a      	mov	r2, r9
 800300a:	1f43      	subs	r3, r0, #5
 800300c:	2576      	movs	r5, #118	; 0x76
 800300e:	409a      	lsls	r2, r3
 8003010:	2300      	movs	r3, #0
 8003012:	426d      	negs	r5, r5
 8003014:	4691      	mov	r9, r2
 8003016:	2600      	movs	r6, #0
 8003018:	469a      	mov	sl, r3
 800301a:	1a2d      	subs	r5, r5, r0
 800301c:	e71e      	b.n	8002e5c <__aeabi_fmul+0x38>
 800301e:	0020      	movs	r0, r4
 8003020:	f001 fe3c 	bl	8004c9c <__clzsi2>
 8003024:	4642      	mov	r2, r8
 8003026:	1f43      	subs	r3, r0, #5
 8003028:	409c      	lsls	r4, r3
 800302a:	1a2b      	subs	r3, r5, r0
 800302c:	3b76      	subs	r3, #118	; 0x76
 800302e:	407a      	eors	r2, r7
 8003030:	2000      	movs	r0, #0
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	1c5d      	adds	r5, r3, #1
 8003036:	2e0a      	cmp	r6, #10
 8003038:	dd00      	ble.n	800303c <__aeabi_fmul+0x218>
 800303a:	e726      	b.n	8002e8a <__aeabi_fmul+0x66>
 800303c:	e739      	b.n	8002eb2 <__aeabi_fmul+0x8e>
 800303e:	2101      	movs	r1, #1
 8003040:	1acb      	subs	r3, r1, r3
 8003042:	2b1b      	cmp	r3, #27
 8003044:	dd00      	ble.n	8003048 <__aeabi_fmul+0x224>
 8003046:	e73d      	b.n	8002ec4 <__aeabi_fmul+0xa0>
 8003048:	359e      	adds	r5, #158	; 0x9e
 800304a:	0021      	movs	r1, r4
 800304c:	40ac      	lsls	r4, r5
 800304e:	40d9      	lsrs	r1, r3
 8003050:	1e63      	subs	r3, r4, #1
 8003052:	419c      	sbcs	r4, r3
 8003054:	4321      	orrs	r1, r4
 8003056:	074b      	lsls	r3, r1, #29
 8003058:	d004      	beq.n	8003064 <__aeabi_fmul+0x240>
 800305a:	230f      	movs	r3, #15
 800305c:	400b      	ands	r3, r1
 800305e:	2b04      	cmp	r3, #4
 8003060:	d000      	beq.n	8003064 <__aeabi_fmul+0x240>
 8003062:	3104      	adds	r1, #4
 8003064:	014b      	lsls	r3, r1, #5
 8003066:	d504      	bpl.n	8003072 <__aeabi_fmul+0x24e>
 8003068:	2001      	movs	r0, #1
 800306a:	2100      	movs	r1, #0
 800306c:	e72c      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 800306e:	001d      	movs	r5, r3
 8003070:	e78f      	b.n	8002f92 <__aeabi_fmul+0x16e>
 8003072:	0189      	lsls	r1, r1, #6
 8003074:	2000      	movs	r0, #0
 8003076:	0a49      	lsrs	r1, r1, #9
 8003078:	e726      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 800307a:	2302      	movs	r3, #2
 800307c:	2e0f      	cmp	r6, #15
 800307e:	d10c      	bne.n	800309a <__aeabi_fmul+0x276>
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	464b      	mov	r3, r9
 8003084:	03c9      	lsls	r1, r1, #15
 8003086:	420b      	tst	r3, r1
 8003088:	d00d      	beq.n	80030a6 <__aeabi_fmul+0x282>
 800308a:	420c      	tst	r4, r1
 800308c:	d10b      	bne.n	80030a6 <__aeabi_fmul+0x282>
 800308e:	4321      	orrs	r1, r4
 8003090:	0249      	lsls	r1, r1, #9
 8003092:	003a      	movs	r2, r7
 8003094:	20ff      	movs	r0, #255	; 0xff
 8003096:	0a49      	lsrs	r1, r1, #9
 8003098:	e716      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 800309a:	2e0b      	cmp	r6, #11
 800309c:	d000      	beq.n	80030a0 <__aeabi_fmul+0x27c>
 800309e:	e6f7      	b.n	8002e90 <__aeabi_fmul+0x6c>
 80030a0:	46a1      	mov	r9, r4
 80030a2:	469a      	mov	sl, r3
 80030a4:	e736      	b.n	8002f14 <__aeabi_fmul+0xf0>
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	464b      	mov	r3, r9
 80030aa:	03c9      	lsls	r1, r1, #15
 80030ac:	4319      	orrs	r1, r3
 80030ae:	0249      	lsls	r1, r1, #9
 80030b0:	4642      	mov	r2, r8
 80030b2:	20ff      	movs	r0, #255	; 0xff
 80030b4:	0a49      	lsrs	r1, r1, #9
 80030b6:	e707      	b.n	8002ec8 <__aeabi_fmul+0xa4>
 80030b8:	2303      	movs	r3, #3
 80030ba:	e7df      	b.n	800307c <__aeabi_fmul+0x258>
 80030bc:	f7ffffff 	.word	0xf7ffffff

080030c0 <__aeabi_f2iz>:
 80030c0:	0241      	lsls	r1, r0, #9
 80030c2:	0042      	lsls	r2, r0, #1
 80030c4:	0fc3      	lsrs	r3, r0, #31
 80030c6:	0a49      	lsrs	r1, r1, #9
 80030c8:	2000      	movs	r0, #0
 80030ca:	0e12      	lsrs	r2, r2, #24
 80030cc:	2a7e      	cmp	r2, #126	; 0x7e
 80030ce:	dd03      	ble.n	80030d8 <__aeabi_f2iz+0x18>
 80030d0:	2a9d      	cmp	r2, #157	; 0x9d
 80030d2:	dd02      	ble.n	80030da <__aeabi_f2iz+0x1a>
 80030d4:	4a09      	ldr	r2, [pc, #36]	; (80030fc <__aeabi_f2iz+0x3c>)
 80030d6:	1898      	adds	r0, r3, r2
 80030d8:	4770      	bx	lr
 80030da:	2080      	movs	r0, #128	; 0x80
 80030dc:	0400      	lsls	r0, r0, #16
 80030de:	4301      	orrs	r1, r0
 80030e0:	2a95      	cmp	r2, #149	; 0x95
 80030e2:	dc07      	bgt.n	80030f4 <__aeabi_f2iz+0x34>
 80030e4:	2096      	movs	r0, #150	; 0x96
 80030e6:	1a82      	subs	r2, r0, r2
 80030e8:	40d1      	lsrs	r1, r2
 80030ea:	4248      	negs	r0, r1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f3      	bne.n	80030d8 <__aeabi_f2iz+0x18>
 80030f0:	0008      	movs	r0, r1
 80030f2:	e7f1      	b.n	80030d8 <__aeabi_f2iz+0x18>
 80030f4:	3a96      	subs	r2, #150	; 0x96
 80030f6:	4091      	lsls	r1, r2
 80030f8:	e7f7      	b.n	80030ea <__aeabi_f2iz+0x2a>
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	7fffffff 	.word	0x7fffffff

08003100 <__aeabi_ui2f>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	1e04      	subs	r4, r0, #0
 8003104:	d00e      	beq.n	8003124 <__aeabi_ui2f+0x24>
 8003106:	f001 fdc9 	bl	8004c9c <__clzsi2>
 800310a:	239e      	movs	r3, #158	; 0x9e
 800310c:	0001      	movs	r1, r0
 800310e:	1a1b      	subs	r3, r3, r0
 8003110:	2b96      	cmp	r3, #150	; 0x96
 8003112:	dc0c      	bgt.n	800312e <__aeabi_ui2f+0x2e>
 8003114:	2808      	cmp	r0, #8
 8003116:	d02c      	beq.n	8003172 <__aeabi_ui2f+0x72>
 8003118:	3908      	subs	r1, #8
 800311a:	408c      	lsls	r4, r1
 800311c:	0264      	lsls	r4, r4, #9
 800311e:	0a64      	lsrs	r4, r4, #9
 8003120:	b2d8      	uxtb	r0, r3
 8003122:	e001      	b.n	8003128 <__aeabi_ui2f+0x28>
 8003124:	2000      	movs	r0, #0
 8003126:	2400      	movs	r4, #0
 8003128:	05c0      	lsls	r0, r0, #23
 800312a:	4320      	orrs	r0, r4
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	2b99      	cmp	r3, #153	; 0x99
 8003130:	dd0a      	ble.n	8003148 <__aeabi_ui2f+0x48>
 8003132:	0002      	movs	r2, r0
 8003134:	0020      	movs	r0, r4
 8003136:	321b      	adds	r2, #27
 8003138:	4090      	lsls	r0, r2
 800313a:	0002      	movs	r2, r0
 800313c:	1e50      	subs	r0, r2, #1
 800313e:	4182      	sbcs	r2, r0
 8003140:	2005      	movs	r0, #5
 8003142:	1a40      	subs	r0, r0, r1
 8003144:	40c4      	lsrs	r4, r0
 8003146:	4314      	orrs	r4, r2
 8003148:	2905      	cmp	r1, #5
 800314a:	dc16      	bgt.n	800317a <__aeabi_ui2f+0x7a>
 800314c:	0022      	movs	r2, r4
 800314e:	480f      	ldr	r0, [pc, #60]	; (800318c <__aeabi_ui2f+0x8c>)
 8003150:	4002      	ands	r2, r0
 8003152:	0765      	lsls	r5, r4, #29
 8003154:	d009      	beq.n	800316a <__aeabi_ui2f+0x6a>
 8003156:	250f      	movs	r5, #15
 8003158:	402c      	ands	r4, r5
 800315a:	2c04      	cmp	r4, #4
 800315c:	d005      	beq.n	800316a <__aeabi_ui2f+0x6a>
 800315e:	3204      	adds	r2, #4
 8003160:	0154      	lsls	r4, r2, #5
 8003162:	d502      	bpl.n	800316a <__aeabi_ui2f+0x6a>
 8003164:	239f      	movs	r3, #159	; 0x9f
 8003166:	4002      	ands	r2, r0
 8003168:	1a5b      	subs	r3, r3, r1
 800316a:	0192      	lsls	r2, r2, #6
 800316c:	0a54      	lsrs	r4, r2, #9
 800316e:	b2d8      	uxtb	r0, r3
 8003170:	e7da      	b.n	8003128 <__aeabi_ui2f+0x28>
 8003172:	0264      	lsls	r4, r4, #9
 8003174:	2096      	movs	r0, #150	; 0x96
 8003176:	0a64      	lsrs	r4, r4, #9
 8003178:	e7d6      	b.n	8003128 <__aeabi_ui2f+0x28>
 800317a:	1f4a      	subs	r2, r1, #5
 800317c:	4094      	lsls	r4, r2
 800317e:	0022      	movs	r2, r4
 8003180:	4802      	ldr	r0, [pc, #8]	; (800318c <__aeabi_ui2f+0x8c>)
 8003182:	4002      	ands	r2, r0
 8003184:	0765      	lsls	r5, r4, #29
 8003186:	d0f0      	beq.n	800316a <__aeabi_ui2f+0x6a>
 8003188:	e7e5      	b.n	8003156 <__aeabi_ui2f+0x56>
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	fbffffff 	.word	0xfbffffff

08003190 <__aeabi_dadd>:
 8003190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003192:	464f      	mov	r7, r9
 8003194:	4646      	mov	r6, r8
 8003196:	46d6      	mov	lr, sl
 8003198:	0004      	movs	r4, r0
 800319a:	b5c0      	push	{r6, r7, lr}
 800319c:	001f      	movs	r7, r3
 800319e:	030b      	lsls	r3, r1, #12
 80031a0:	0010      	movs	r0, r2
 80031a2:	004e      	lsls	r6, r1, #1
 80031a4:	0a5b      	lsrs	r3, r3, #9
 80031a6:	0fcd      	lsrs	r5, r1, #31
 80031a8:	0f61      	lsrs	r1, r4, #29
 80031aa:	007a      	lsls	r2, r7, #1
 80031ac:	4319      	orrs	r1, r3
 80031ae:	00e3      	lsls	r3, r4, #3
 80031b0:	033c      	lsls	r4, r7, #12
 80031b2:	0fff      	lsrs	r7, r7, #31
 80031b4:	46bc      	mov	ip, r7
 80031b6:	0a64      	lsrs	r4, r4, #9
 80031b8:	0f47      	lsrs	r7, r0, #29
 80031ba:	4327      	orrs	r7, r4
 80031bc:	0d76      	lsrs	r6, r6, #21
 80031be:	0d52      	lsrs	r2, r2, #21
 80031c0:	00c0      	lsls	r0, r0, #3
 80031c2:	46b9      	mov	r9, r7
 80031c4:	4680      	mov	r8, r0
 80031c6:	1ab7      	subs	r7, r6, r2
 80031c8:	4565      	cmp	r5, ip
 80031ca:	d100      	bne.n	80031ce <__aeabi_dadd+0x3e>
 80031cc:	e09b      	b.n	8003306 <__aeabi_dadd+0x176>
 80031ce:	2f00      	cmp	r7, #0
 80031d0:	dc00      	bgt.n	80031d4 <__aeabi_dadd+0x44>
 80031d2:	e084      	b.n	80032de <__aeabi_dadd+0x14e>
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	d100      	bne.n	80031da <__aeabi_dadd+0x4a>
 80031d8:	e0be      	b.n	8003358 <__aeabi_dadd+0x1c8>
 80031da:	4ac8      	ldr	r2, [pc, #800]	; (80034fc <__aeabi_dadd+0x36c>)
 80031dc:	4296      	cmp	r6, r2
 80031de:	d100      	bne.n	80031e2 <__aeabi_dadd+0x52>
 80031e0:	e124      	b.n	800342c <__aeabi_dadd+0x29c>
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	464c      	mov	r4, r9
 80031e6:	0412      	lsls	r2, r2, #16
 80031e8:	4314      	orrs	r4, r2
 80031ea:	46a1      	mov	r9, r4
 80031ec:	2f38      	cmp	r7, #56	; 0x38
 80031ee:	dd00      	ble.n	80031f2 <__aeabi_dadd+0x62>
 80031f0:	e167      	b.n	80034c2 <__aeabi_dadd+0x332>
 80031f2:	2f1f      	cmp	r7, #31
 80031f4:	dd00      	ble.n	80031f8 <__aeabi_dadd+0x68>
 80031f6:	e1d6      	b.n	80035a6 <__aeabi_dadd+0x416>
 80031f8:	2220      	movs	r2, #32
 80031fa:	464c      	mov	r4, r9
 80031fc:	1bd2      	subs	r2, r2, r7
 80031fe:	4094      	lsls	r4, r2
 8003200:	46a2      	mov	sl, r4
 8003202:	4644      	mov	r4, r8
 8003204:	40fc      	lsrs	r4, r7
 8003206:	0020      	movs	r0, r4
 8003208:	4654      	mov	r4, sl
 800320a:	4304      	orrs	r4, r0
 800320c:	4640      	mov	r0, r8
 800320e:	4090      	lsls	r0, r2
 8003210:	1e42      	subs	r2, r0, #1
 8003212:	4190      	sbcs	r0, r2
 8003214:	464a      	mov	r2, r9
 8003216:	40fa      	lsrs	r2, r7
 8003218:	4304      	orrs	r4, r0
 800321a:	1a89      	subs	r1, r1, r2
 800321c:	1b1c      	subs	r4, r3, r4
 800321e:	42a3      	cmp	r3, r4
 8003220:	4192      	sbcs	r2, r2
 8003222:	4252      	negs	r2, r2
 8003224:	1a8b      	subs	r3, r1, r2
 8003226:	469a      	mov	sl, r3
 8003228:	4653      	mov	r3, sl
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	d400      	bmi.n	8003230 <__aeabi_dadd+0xa0>
 800322e:	e0d4      	b.n	80033da <__aeabi_dadd+0x24a>
 8003230:	4653      	mov	r3, sl
 8003232:	025a      	lsls	r2, r3, #9
 8003234:	0a53      	lsrs	r3, r2, #9
 8003236:	469a      	mov	sl, r3
 8003238:	4653      	mov	r3, sl
 800323a:	2b00      	cmp	r3, #0
 800323c:	d100      	bne.n	8003240 <__aeabi_dadd+0xb0>
 800323e:	e104      	b.n	800344a <__aeabi_dadd+0x2ba>
 8003240:	4650      	mov	r0, sl
 8003242:	f001 fd2b 	bl	8004c9c <__clzsi2>
 8003246:	0003      	movs	r3, r0
 8003248:	3b08      	subs	r3, #8
 800324a:	2220      	movs	r2, #32
 800324c:	0020      	movs	r0, r4
 800324e:	1ad2      	subs	r2, r2, r3
 8003250:	4651      	mov	r1, sl
 8003252:	40d0      	lsrs	r0, r2
 8003254:	4099      	lsls	r1, r3
 8003256:	0002      	movs	r2, r0
 8003258:	409c      	lsls	r4, r3
 800325a:	430a      	orrs	r2, r1
 800325c:	42b3      	cmp	r3, r6
 800325e:	da00      	bge.n	8003262 <__aeabi_dadd+0xd2>
 8003260:	e102      	b.n	8003468 <__aeabi_dadd+0x2d8>
 8003262:	1b9b      	subs	r3, r3, r6
 8003264:	1c59      	adds	r1, r3, #1
 8003266:	291f      	cmp	r1, #31
 8003268:	dd00      	ble.n	800326c <__aeabi_dadd+0xdc>
 800326a:	e0a7      	b.n	80033bc <__aeabi_dadd+0x22c>
 800326c:	2320      	movs	r3, #32
 800326e:	0010      	movs	r0, r2
 8003270:	0026      	movs	r6, r4
 8003272:	1a5b      	subs	r3, r3, r1
 8003274:	409c      	lsls	r4, r3
 8003276:	4098      	lsls	r0, r3
 8003278:	40ce      	lsrs	r6, r1
 800327a:	40ca      	lsrs	r2, r1
 800327c:	1e63      	subs	r3, r4, #1
 800327e:	419c      	sbcs	r4, r3
 8003280:	4330      	orrs	r0, r6
 8003282:	4692      	mov	sl, r2
 8003284:	2600      	movs	r6, #0
 8003286:	4304      	orrs	r4, r0
 8003288:	0763      	lsls	r3, r4, #29
 800328a:	d009      	beq.n	80032a0 <__aeabi_dadd+0x110>
 800328c:	230f      	movs	r3, #15
 800328e:	4023      	ands	r3, r4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d005      	beq.n	80032a0 <__aeabi_dadd+0x110>
 8003294:	1d23      	adds	r3, r4, #4
 8003296:	42a3      	cmp	r3, r4
 8003298:	41a4      	sbcs	r4, r4
 800329a:	4264      	negs	r4, r4
 800329c:	44a2      	add	sl, r4
 800329e:	001c      	movs	r4, r3
 80032a0:	4653      	mov	r3, sl
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	d400      	bmi.n	80032a8 <__aeabi_dadd+0x118>
 80032a6:	e09b      	b.n	80033e0 <__aeabi_dadd+0x250>
 80032a8:	4b94      	ldr	r3, [pc, #592]	; (80034fc <__aeabi_dadd+0x36c>)
 80032aa:	3601      	adds	r6, #1
 80032ac:	429e      	cmp	r6, r3
 80032ae:	d100      	bne.n	80032b2 <__aeabi_dadd+0x122>
 80032b0:	e0b8      	b.n	8003424 <__aeabi_dadd+0x294>
 80032b2:	4653      	mov	r3, sl
 80032b4:	4992      	ldr	r1, [pc, #584]	; (8003500 <__aeabi_dadd+0x370>)
 80032b6:	08e4      	lsrs	r4, r4, #3
 80032b8:	400b      	ands	r3, r1
 80032ba:	0019      	movs	r1, r3
 80032bc:	075b      	lsls	r3, r3, #29
 80032be:	4323      	orrs	r3, r4
 80032c0:	0572      	lsls	r2, r6, #21
 80032c2:	024c      	lsls	r4, r1, #9
 80032c4:	0b24      	lsrs	r4, r4, #12
 80032c6:	0d52      	lsrs	r2, r2, #21
 80032c8:	0512      	lsls	r2, r2, #20
 80032ca:	07ed      	lsls	r5, r5, #31
 80032cc:	4322      	orrs	r2, r4
 80032ce:	432a      	orrs	r2, r5
 80032d0:	0018      	movs	r0, r3
 80032d2:	0011      	movs	r1, r2
 80032d4:	bce0      	pop	{r5, r6, r7}
 80032d6:	46ba      	mov	sl, r7
 80032d8:	46b1      	mov	r9, r6
 80032da:	46a8      	mov	r8, r5
 80032dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032de:	2f00      	cmp	r7, #0
 80032e0:	d048      	beq.n	8003374 <__aeabi_dadd+0x1e4>
 80032e2:	1b97      	subs	r7, r2, r6
 80032e4:	2e00      	cmp	r6, #0
 80032e6:	d000      	beq.n	80032ea <__aeabi_dadd+0x15a>
 80032e8:	e10e      	b.n	8003508 <__aeabi_dadd+0x378>
 80032ea:	000c      	movs	r4, r1
 80032ec:	431c      	orrs	r4, r3
 80032ee:	d100      	bne.n	80032f2 <__aeabi_dadd+0x162>
 80032f0:	e1b7      	b.n	8003662 <__aeabi_dadd+0x4d2>
 80032f2:	1e7c      	subs	r4, r7, #1
 80032f4:	2f01      	cmp	r7, #1
 80032f6:	d100      	bne.n	80032fa <__aeabi_dadd+0x16a>
 80032f8:	e226      	b.n	8003748 <__aeabi_dadd+0x5b8>
 80032fa:	4d80      	ldr	r5, [pc, #512]	; (80034fc <__aeabi_dadd+0x36c>)
 80032fc:	42af      	cmp	r7, r5
 80032fe:	d100      	bne.n	8003302 <__aeabi_dadd+0x172>
 8003300:	e1d5      	b.n	80036ae <__aeabi_dadd+0x51e>
 8003302:	0027      	movs	r7, r4
 8003304:	e107      	b.n	8003516 <__aeabi_dadd+0x386>
 8003306:	2f00      	cmp	r7, #0
 8003308:	dc00      	bgt.n	800330c <__aeabi_dadd+0x17c>
 800330a:	e0b2      	b.n	8003472 <__aeabi_dadd+0x2e2>
 800330c:	2a00      	cmp	r2, #0
 800330e:	d047      	beq.n	80033a0 <__aeabi_dadd+0x210>
 8003310:	4a7a      	ldr	r2, [pc, #488]	; (80034fc <__aeabi_dadd+0x36c>)
 8003312:	4296      	cmp	r6, r2
 8003314:	d100      	bne.n	8003318 <__aeabi_dadd+0x188>
 8003316:	e089      	b.n	800342c <__aeabi_dadd+0x29c>
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	464c      	mov	r4, r9
 800331c:	0412      	lsls	r2, r2, #16
 800331e:	4314      	orrs	r4, r2
 8003320:	46a1      	mov	r9, r4
 8003322:	2f38      	cmp	r7, #56	; 0x38
 8003324:	dc6b      	bgt.n	80033fe <__aeabi_dadd+0x26e>
 8003326:	2f1f      	cmp	r7, #31
 8003328:	dc00      	bgt.n	800332c <__aeabi_dadd+0x19c>
 800332a:	e16e      	b.n	800360a <__aeabi_dadd+0x47a>
 800332c:	003a      	movs	r2, r7
 800332e:	4648      	mov	r0, r9
 8003330:	3a20      	subs	r2, #32
 8003332:	40d0      	lsrs	r0, r2
 8003334:	4684      	mov	ip, r0
 8003336:	2f20      	cmp	r7, #32
 8003338:	d007      	beq.n	800334a <__aeabi_dadd+0x1ba>
 800333a:	2240      	movs	r2, #64	; 0x40
 800333c:	4648      	mov	r0, r9
 800333e:	1bd2      	subs	r2, r2, r7
 8003340:	4090      	lsls	r0, r2
 8003342:	0002      	movs	r2, r0
 8003344:	4640      	mov	r0, r8
 8003346:	4310      	orrs	r0, r2
 8003348:	4680      	mov	r8, r0
 800334a:	4640      	mov	r0, r8
 800334c:	1e42      	subs	r2, r0, #1
 800334e:	4190      	sbcs	r0, r2
 8003350:	4662      	mov	r2, ip
 8003352:	0004      	movs	r4, r0
 8003354:	4314      	orrs	r4, r2
 8003356:	e057      	b.n	8003408 <__aeabi_dadd+0x278>
 8003358:	464a      	mov	r2, r9
 800335a:	4302      	orrs	r2, r0
 800335c:	d100      	bne.n	8003360 <__aeabi_dadd+0x1d0>
 800335e:	e103      	b.n	8003568 <__aeabi_dadd+0x3d8>
 8003360:	1e7a      	subs	r2, r7, #1
 8003362:	2f01      	cmp	r7, #1
 8003364:	d100      	bne.n	8003368 <__aeabi_dadd+0x1d8>
 8003366:	e193      	b.n	8003690 <__aeabi_dadd+0x500>
 8003368:	4c64      	ldr	r4, [pc, #400]	; (80034fc <__aeabi_dadd+0x36c>)
 800336a:	42a7      	cmp	r7, r4
 800336c:	d100      	bne.n	8003370 <__aeabi_dadd+0x1e0>
 800336e:	e18a      	b.n	8003686 <__aeabi_dadd+0x4f6>
 8003370:	0017      	movs	r7, r2
 8003372:	e73b      	b.n	80031ec <__aeabi_dadd+0x5c>
 8003374:	4c63      	ldr	r4, [pc, #396]	; (8003504 <__aeabi_dadd+0x374>)
 8003376:	1c72      	adds	r2, r6, #1
 8003378:	4222      	tst	r2, r4
 800337a:	d000      	beq.n	800337e <__aeabi_dadd+0x1ee>
 800337c:	e0e0      	b.n	8003540 <__aeabi_dadd+0x3b0>
 800337e:	000a      	movs	r2, r1
 8003380:	431a      	orrs	r2, r3
 8003382:	2e00      	cmp	r6, #0
 8003384:	d000      	beq.n	8003388 <__aeabi_dadd+0x1f8>
 8003386:	e174      	b.n	8003672 <__aeabi_dadd+0x4e2>
 8003388:	2a00      	cmp	r2, #0
 800338a:	d100      	bne.n	800338e <__aeabi_dadd+0x1fe>
 800338c:	e1d0      	b.n	8003730 <__aeabi_dadd+0x5a0>
 800338e:	464a      	mov	r2, r9
 8003390:	4302      	orrs	r2, r0
 8003392:	d000      	beq.n	8003396 <__aeabi_dadd+0x206>
 8003394:	e1e3      	b.n	800375e <__aeabi_dadd+0x5ce>
 8003396:	074a      	lsls	r2, r1, #29
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	4313      	orrs	r3, r2
 800339c:	08c9      	lsrs	r1, r1, #3
 800339e:	e029      	b.n	80033f4 <__aeabi_dadd+0x264>
 80033a0:	464a      	mov	r2, r9
 80033a2:	4302      	orrs	r2, r0
 80033a4:	d100      	bne.n	80033a8 <__aeabi_dadd+0x218>
 80033a6:	e17d      	b.n	80036a4 <__aeabi_dadd+0x514>
 80033a8:	1e7a      	subs	r2, r7, #1
 80033aa:	2f01      	cmp	r7, #1
 80033ac:	d100      	bne.n	80033b0 <__aeabi_dadd+0x220>
 80033ae:	e0e0      	b.n	8003572 <__aeabi_dadd+0x3e2>
 80033b0:	4c52      	ldr	r4, [pc, #328]	; (80034fc <__aeabi_dadd+0x36c>)
 80033b2:	42a7      	cmp	r7, r4
 80033b4:	d100      	bne.n	80033b8 <__aeabi_dadd+0x228>
 80033b6:	e166      	b.n	8003686 <__aeabi_dadd+0x4f6>
 80033b8:	0017      	movs	r7, r2
 80033ba:	e7b2      	b.n	8003322 <__aeabi_dadd+0x192>
 80033bc:	0010      	movs	r0, r2
 80033be:	3b1f      	subs	r3, #31
 80033c0:	40d8      	lsrs	r0, r3
 80033c2:	2920      	cmp	r1, #32
 80033c4:	d003      	beq.n	80033ce <__aeabi_dadd+0x23e>
 80033c6:	2340      	movs	r3, #64	; 0x40
 80033c8:	1a5b      	subs	r3, r3, r1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	4314      	orrs	r4, r2
 80033ce:	1e63      	subs	r3, r4, #1
 80033d0:	419c      	sbcs	r4, r3
 80033d2:	2300      	movs	r3, #0
 80033d4:	2600      	movs	r6, #0
 80033d6:	469a      	mov	sl, r3
 80033d8:	4304      	orrs	r4, r0
 80033da:	0763      	lsls	r3, r4, #29
 80033dc:	d000      	beq.n	80033e0 <__aeabi_dadd+0x250>
 80033de:	e755      	b.n	800328c <__aeabi_dadd+0xfc>
 80033e0:	4652      	mov	r2, sl
 80033e2:	08e3      	lsrs	r3, r4, #3
 80033e4:	0752      	lsls	r2, r2, #29
 80033e6:	4313      	orrs	r3, r2
 80033e8:	4652      	mov	r2, sl
 80033ea:	0037      	movs	r7, r6
 80033ec:	08d1      	lsrs	r1, r2, #3
 80033ee:	4a43      	ldr	r2, [pc, #268]	; (80034fc <__aeabi_dadd+0x36c>)
 80033f0:	4297      	cmp	r7, r2
 80033f2:	d01f      	beq.n	8003434 <__aeabi_dadd+0x2a4>
 80033f4:	0309      	lsls	r1, r1, #12
 80033f6:	057a      	lsls	r2, r7, #21
 80033f8:	0b0c      	lsrs	r4, r1, #12
 80033fa:	0d52      	lsrs	r2, r2, #21
 80033fc:	e764      	b.n	80032c8 <__aeabi_dadd+0x138>
 80033fe:	4642      	mov	r2, r8
 8003400:	464c      	mov	r4, r9
 8003402:	4314      	orrs	r4, r2
 8003404:	1e62      	subs	r2, r4, #1
 8003406:	4194      	sbcs	r4, r2
 8003408:	18e4      	adds	r4, r4, r3
 800340a:	429c      	cmp	r4, r3
 800340c:	4192      	sbcs	r2, r2
 800340e:	4252      	negs	r2, r2
 8003410:	4692      	mov	sl, r2
 8003412:	448a      	add	sl, r1
 8003414:	4653      	mov	r3, sl
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	d5df      	bpl.n	80033da <__aeabi_dadd+0x24a>
 800341a:	4b38      	ldr	r3, [pc, #224]	; (80034fc <__aeabi_dadd+0x36c>)
 800341c:	3601      	adds	r6, #1
 800341e:	429e      	cmp	r6, r3
 8003420:	d000      	beq.n	8003424 <__aeabi_dadd+0x294>
 8003422:	e0b3      	b.n	800358c <__aeabi_dadd+0x3fc>
 8003424:	0032      	movs	r2, r6
 8003426:	2400      	movs	r4, #0
 8003428:	2300      	movs	r3, #0
 800342a:	e74d      	b.n	80032c8 <__aeabi_dadd+0x138>
 800342c:	074a      	lsls	r2, r1, #29
 800342e:	08db      	lsrs	r3, r3, #3
 8003430:	4313      	orrs	r3, r2
 8003432:	08c9      	lsrs	r1, r1, #3
 8003434:	001a      	movs	r2, r3
 8003436:	430a      	orrs	r2, r1
 8003438:	d100      	bne.n	800343c <__aeabi_dadd+0x2ac>
 800343a:	e200      	b.n	800383e <__aeabi_dadd+0x6ae>
 800343c:	2480      	movs	r4, #128	; 0x80
 800343e:	0324      	lsls	r4, r4, #12
 8003440:	430c      	orrs	r4, r1
 8003442:	0324      	lsls	r4, r4, #12
 8003444:	4a2d      	ldr	r2, [pc, #180]	; (80034fc <__aeabi_dadd+0x36c>)
 8003446:	0b24      	lsrs	r4, r4, #12
 8003448:	e73e      	b.n	80032c8 <__aeabi_dadd+0x138>
 800344a:	0020      	movs	r0, r4
 800344c:	f001 fc26 	bl	8004c9c <__clzsi2>
 8003450:	0003      	movs	r3, r0
 8003452:	3318      	adds	r3, #24
 8003454:	2b1f      	cmp	r3, #31
 8003456:	dc00      	bgt.n	800345a <__aeabi_dadd+0x2ca>
 8003458:	e6f7      	b.n	800324a <__aeabi_dadd+0xba>
 800345a:	0022      	movs	r2, r4
 800345c:	3808      	subs	r0, #8
 800345e:	4082      	lsls	r2, r0
 8003460:	2400      	movs	r4, #0
 8003462:	42b3      	cmp	r3, r6
 8003464:	db00      	blt.n	8003468 <__aeabi_dadd+0x2d8>
 8003466:	e6fc      	b.n	8003262 <__aeabi_dadd+0xd2>
 8003468:	1af6      	subs	r6, r6, r3
 800346a:	4b25      	ldr	r3, [pc, #148]	; (8003500 <__aeabi_dadd+0x370>)
 800346c:	401a      	ands	r2, r3
 800346e:	4692      	mov	sl, r2
 8003470:	e70a      	b.n	8003288 <__aeabi_dadd+0xf8>
 8003472:	2f00      	cmp	r7, #0
 8003474:	d02b      	beq.n	80034ce <__aeabi_dadd+0x33e>
 8003476:	1b97      	subs	r7, r2, r6
 8003478:	2e00      	cmp	r6, #0
 800347a:	d100      	bne.n	800347e <__aeabi_dadd+0x2ee>
 800347c:	e0b8      	b.n	80035f0 <__aeabi_dadd+0x460>
 800347e:	4c1f      	ldr	r4, [pc, #124]	; (80034fc <__aeabi_dadd+0x36c>)
 8003480:	42a2      	cmp	r2, r4
 8003482:	d100      	bne.n	8003486 <__aeabi_dadd+0x2f6>
 8003484:	e11c      	b.n	80036c0 <__aeabi_dadd+0x530>
 8003486:	2480      	movs	r4, #128	; 0x80
 8003488:	0424      	lsls	r4, r4, #16
 800348a:	4321      	orrs	r1, r4
 800348c:	2f38      	cmp	r7, #56	; 0x38
 800348e:	dd00      	ble.n	8003492 <__aeabi_dadd+0x302>
 8003490:	e11e      	b.n	80036d0 <__aeabi_dadd+0x540>
 8003492:	2f1f      	cmp	r7, #31
 8003494:	dd00      	ble.n	8003498 <__aeabi_dadd+0x308>
 8003496:	e19e      	b.n	80037d6 <__aeabi_dadd+0x646>
 8003498:	2620      	movs	r6, #32
 800349a:	000c      	movs	r4, r1
 800349c:	1bf6      	subs	r6, r6, r7
 800349e:	0018      	movs	r0, r3
 80034a0:	40b3      	lsls	r3, r6
 80034a2:	40b4      	lsls	r4, r6
 80034a4:	40f8      	lsrs	r0, r7
 80034a6:	1e5e      	subs	r6, r3, #1
 80034a8:	41b3      	sbcs	r3, r6
 80034aa:	40f9      	lsrs	r1, r7
 80034ac:	4304      	orrs	r4, r0
 80034ae:	431c      	orrs	r4, r3
 80034b0:	4489      	add	r9, r1
 80034b2:	4444      	add	r4, r8
 80034b4:	4544      	cmp	r4, r8
 80034b6:	419b      	sbcs	r3, r3
 80034b8:	425b      	negs	r3, r3
 80034ba:	444b      	add	r3, r9
 80034bc:	469a      	mov	sl, r3
 80034be:	0016      	movs	r6, r2
 80034c0:	e7a8      	b.n	8003414 <__aeabi_dadd+0x284>
 80034c2:	4642      	mov	r2, r8
 80034c4:	464c      	mov	r4, r9
 80034c6:	4314      	orrs	r4, r2
 80034c8:	1e62      	subs	r2, r4, #1
 80034ca:	4194      	sbcs	r4, r2
 80034cc:	e6a6      	b.n	800321c <__aeabi_dadd+0x8c>
 80034ce:	4c0d      	ldr	r4, [pc, #52]	; (8003504 <__aeabi_dadd+0x374>)
 80034d0:	1c72      	adds	r2, r6, #1
 80034d2:	4222      	tst	r2, r4
 80034d4:	d000      	beq.n	80034d8 <__aeabi_dadd+0x348>
 80034d6:	e0a8      	b.n	800362a <__aeabi_dadd+0x49a>
 80034d8:	000a      	movs	r2, r1
 80034da:	431a      	orrs	r2, r3
 80034dc:	2e00      	cmp	r6, #0
 80034de:	d000      	beq.n	80034e2 <__aeabi_dadd+0x352>
 80034e0:	e10a      	b.n	80036f8 <__aeabi_dadd+0x568>
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	d100      	bne.n	80034e8 <__aeabi_dadd+0x358>
 80034e6:	e15e      	b.n	80037a6 <__aeabi_dadd+0x616>
 80034e8:	464a      	mov	r2, r9
 80034ea:	4302      	orrs	r2, r0
 80034ec:	d000      	beq.n	80034f0 <__aeabi_dadd+0x360>
 80034ee:	e161      	b.n	80037b4 <__aeabi_dadd+0x624>
 80034f0:	074a      	lsls	r2, r1, #29
 80034f2:	08db      	lsrs	r3, r3, #3
 80034f4:	4313      	orrs	r3, r2
 80034f6:	08c9      	lsrs	r1, r1, #3
 80034f8:	e77c      	b.n	80033f4 <__aeabi_dadd+0x264>
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	000007ff 	.word	0x000007ff
 8003500:	ff7fffff 	.word	0xff7fffff
 8003504:	000007fe 	.word	0x000007fe
 8003508:	4ccf      	ldr	r4, [pc, #828]	; (8003848 <__aeabi_dadd+0x6b8>)
 800350a:	42a2      	cmp	r2, r4
 800350c:	d100      	bne.n	8003510 <__aeabi_dadd+0x380>
 800350e:	e0ce      	b.n	80036ae <__aeabi_dadd+0x51e>
 8003510:	2480      	movs	r4, #128	; 0x80
 8003512:	0424      	lsls	r4, r4, #16
 8003514:	4321      	orrs	r1, r4
 8003516:	2f38      	cmp	r7, #56	; 0x38
 8003518:	dc5b      	bgt.n	80035d2 <__aeabi_dadd+0x442>
 800351a:	2f1f      	cmp	r7, #31
 800351c:	dd00      	ble.n	8003520 <__aeabi_dadd+0x390>
 800351e:	e0dc      	b.n	80036da <__aeabi_dadd+0x54a>
 8003520:	2520      	movs	r5, #32
 8003522:	000c      	movs	r4, r1
 8003524:	1bed      	subs	r5, r5, r7
 8003526:	001e      	movs	r6, r3
 8003528:	40ab      	lsls	r3, r5
 800352a:	40ac      	lsls	r4, r5
 800352c:	40fe      	lsrs	r6, r7
 800352e:	1e5d      	subs	r5, r3, #1
 8003530:	41ab      	sbcs	r3, r5
 8003532:	4334      	orrs	r4, r6
 8003534:	40f9      	lsrs	r1, r7
 8003536:	431c      	orrs	r4, r3
 8003538:	464b      	mov	r3, r9
 800353a:	1a5b      	subs	r3, r3, r1
 800353c:	4699      	mov	r9, r3
 800353e:	e04c      	b.n	80035da <__aeabi_dadd+0x44a>
 8003540:	464a      	mov	r2, r9
 8003542:	1a1c      	subs	r4, r3, r0
 8003544:	1a88      	subs	r0, r1, r2
 8003546:	42a3      	cmp	r3, r4
 8003548:	4192      	sbcs	r2, r2
 800354a:	4252      	negs	r2, r2
 800354c:	4692      	mov	sl, r2
 800354e:	0002      	movs	r2, r0
 8003550:	4650      	mov	r0, sl
 8003552:	1a12      	subs	r2, r2, r0
 8003554:	4692      	mov	sl, r2
 8003556:	0212      	lsls	r2, r2, #8
 8003558:	d478      	bmi.n	800364c <__aeabi_dadd+0x4bc>
 800355a:	4653      	mov	r3, sl
 800355c:	4323      	orrs	r3, r4
 800355e:	d000      	beq.n	8003562 <__aeabi_dadd+0x3d2>
 8003560:	e66a      	b.n	8003238 <__aeabi_dadd+0xa8>
 8003562:	2100      	movs	r1, #0
 8003564:	2500      	movs	r5, #0
 8003566:	e745      	b.n	80033f4 <__aeabi_dadd+0x264>
 8003568:	074a      	lsls	r2, r1, #29
 800356a:	08db      	lsrs	r3, r3, #3
 800356c:	4313      	orrs	r3, r2
 800356e:	08c9      	lsrs	r1, r1, #3
 8003570:	e73d      	b.n	80033ee <__aeabi_dadd+0x25e>
 8003572:	181c      	adds	r4, r3, r0
 8003574:	429c      	cmp	r4, r3
 8003576:	419b      	sbcs	r3, r3
 8003578:	4449      	add	r1, r9
 800357a:	468a      	mov	sl, r1
 800357c:	425b      	negs	r3, r3
 800357e:	449a      	add	sl, r3
 8003580:	4653      	mov	r3, sl
 8003582:	2601      	movs	r6, #1
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	d400      	bmi.n	800358a <__aeabi_dadd+0x3fa>
 8003588:	e727      	b.n	80033da <__aeabi_dadd+0x24a>
 800358a:	2602      	movs	r6, #2
 800358c:	4652      	mov	r2, sl
 800358e:	4baf      	ldr	r3, [pc, #700]	; (800384c <__aeabi_dadd+0x6bc>)
 8003590:	2101      	movs	r1, #1
 8003592:	401a      	ands	r2, r3
 8003594:	0013      	movs	r3, r2
 8003596:	4021      	ands	r1, r4
 8003598:	0862      	lsrs	r2, r4, #1
 800359a:	430a      	orrs	r2, r1
 800359c:	07dc      	lsls	r4, r3, #31
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	469a      	mov	sl, r3
 80035a2:	4314      	orrs	r4, r2
 80035a4:	e670      	b.n	8003288 <__aeabi_dadd+0xf8>
 80035a6:	003a      	movs	r2, r7
 80035a8:	464c      	mov	r4, r9
 80035aa:	3a20      	subs	r2, #32
 80035ac:	40d4      	lsrs	r4, r2
 80035ae:	46a4      	mov	ip, r4
 80035b0:	2f20      	cmp	r7, #32
 80035b2:	d007      	beq.n	80035c4 <__aeabi_dadd+0x434>
 80035b4:	2240      	movs	r2, #64	; 0x40
 80035b6:	4648      	mov	r0, r9
 80035b8:	1bd2      	subs	r2, r2, r7
 80035ba:	4090      	lsls	r0, r2
 80035bc:	0002      	movs	r2, r0
 80035be:	4640      	mov	r0, r8
 80035c0:	4310      	orrs	r0, r2
 80035c2:	4680      	mov	r8, r0
 80035c4:	4640      	mov	r0, r8
 80035c6:	1e42      	subs	r2, r0, #1
 80035c8:	4190      	sbcs	r0, r2
 80035ca:	4662      	mov	r2, ip
 80035cc:	0004      	movs	r4, r0
 80035ce:	4314      	orrs	r4, r2
 80035d0:	e624      	b.n	800321c <__aeabi_dadd+0x8c>
 80035d2:	4319      	orrs	r1, r3
 80035d4:	000c      	movs	r4, r1
 80035d6:	1e63      	subs	r3, r4, #1
 80035d8:	419c      	sbcs	r4, r3
 80035da:	4643      	mov	r3, r8
 80035dc:	1b1c      	subs	r4, r3, r4
 80035de:	45a0      	cmp	r8, r4
 80035e0:	419b      	sbcs	r3, r3
 80035e2:	4649      	mov	r1, r9
 80035e4:	425b      	negs	r3, r3
 80035e6:	1acb      	subs	r3, r1, r3
 80035e8:	469a      	mov	sl, r3
 80035ea:	4665      	mov	r5, ip
 80035ec:	0016      	movs	r6, r2
 80035ee:	e61b      	b.n	8003228 <__aeabi_dadd+0x98>
 80035f0:	000c      	movs	r4, r1
 80035f2:	431c      	orrs	r4, r3
 80035f4:	d100      	bne.n	80035f8 <__aeabi_dadd+0x468>
 80035f6:	e0c7      	b.n	8003788 <__aeabi_dadd+0x5f8>
 80035f8:	1e7c      	subs	r4, r7, #1
 80035fa:	2f01      	cmp	r7, #1
 80035fc:	d100      	bne.n	8003600 <__aeabi_dadd+0x470>
 80035fe:	e0f9      	b.n	80037f4 <__aeabi_dadd+0x664>
 8003600:	4e91      	ldr	r6, [pc, #580]	; (8003848 <__aeabi_dadd+0x6b8>)
 8003602:	42b7      	cmp	r7, r6
 8003604:	d05c      	beq.n	80036c0 <__aeabi_dadd+0x530>
 8003606:	0027      	movs	r7, r4
 8003608:	e740      	b.n	800348c <__aeabi_dadd+0x2fc>
 800360a:	2220      	movs	r2, #32
 800360c:	464c      	mov	r4, r9
 800360e:	4640      	mov	r0, r8
 8003610:	1bd2      	subs	r2, r2, r7
 8003612:	4094      	lsls	r4, r2
 8003614:	40f8      	lsrs	r0, r7
 8003616:	4304      	orrs	r4, r0
 8003618:	4640      	mov	r0, r8
 800361a:	4090      	lsls	r0, r2
 800361c:	1e42      	subs	r2, r0, #1
 800361e:	4190      	sbcs	r0, r2
 8003620:	464a      	mov	r2, r9
 8003622:	40fa      	lsrs	r2, r7
 8003624:	4304      	orrs	r4, r0
 8003626:	1889      	adds	r1, r1, r2
 8003628:	e6ee      	b.n	8003408 <__aeabi_dadd+0x278>
 800362a:	4c87      	ldr	r4, [pc, #540]	; (8003848 <__aeabi_dadd+0x6b8>)
 800362c:	42a2      	cmp	r2, r4
 800362e:	d100      	bne.n	8003632 <__aeabi_dadd+0x4a2>
 8003630:	e6f9      	b.n	8003426 <__aeabi_dadd+0x296>
 8003632:	1818      	adds	r0, r3, r0
 8003634:	4298      	cmp	r0, r3
 8003636:	419b      	sbcs	r3, r3
 8003638:	4449      	add	r1, r9
 800363a:	425b      	negs	r3, r3
 800363c:	18cb      	adds	r3, r1, r3
 800363e:	07dc      	lsls	r4, r3, #31
 8003640:	0840      	lsrs	r0, r0, #1
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	469a      	mov	sl, r3
 8003646:	0016      	movs	r6, r2
 8003648:	4304      	orrs	r4, r0
 800364a:	e6c6      	b.n	80033da <__aeabi_dadd+0x24a>
 800364c:	4642      	mov	r2, r8
 800364e:	1ad4      	subs	r4, r2, r3
 8003650:	45a0      	cmp	r8, r4
 8003652:	4180      	sbcs	r0, r0
 8003654:	464b      	mov	r3, r9
 8003656:	4240      	negs	r0, r0
 8003658:	1a59      	subs	r1, r3, r1
 800365a:	1a0b      	subs	r3, r1, r0
 800365c:	469a      	mov	sl, r3
 800365e:	4665      	mov	r5, ip
 8003660:	e5ea      	b.n	8003238 <__aeabi_dadd+0xa8>
 8003662:	464b      	mov	r3, r9
 8003664:	464a      	mov	r2, r9
 8003666:	08c0      	lsrs	r0, r0, #3
 8003668:	075b      	lsls	r3, r3, #29
 800366a:	4665      	mov	r5, ip
 800366c:	4303      	orrs	r3, r0
 800366e:	08d1      	lsrs	r1, r2, #3
 8003670:	e6bd      	b.n	80033ee <__aeabi_dadd+0x25e>
 8003672:	2a00      	cmp	r2, #0
 8003674:	d000      	beq.n	8003678 <__aeabi_dadd+0x4e8>
 8003676:	e08e      	b.n	8003796 <__aeabi_dadd+0x606>
 8003678:	464b      	mov	r3, r9
 800367a:	4303      	orrs	r3, r0
 800367c:	d117      	bne.n	80036ae <__aeabi_dadd+0x51e>
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	2500      	movs	r5, #0
 8003682:	0309      	lsls	r1, r1, #12
 8003684:	e6da      	b.n	800343c <__aeabi_dadd+0x2ac>
 8003686:	074a      	lsls	r2, r1, #29
 8003688:	08db      	lsrs	r3, r3, #3
 800368a:	4313      	orrs	r3, r2
 800368c:	08c9      	lsrs	r1, r1, #3
 800368e:	e6d1      	b.n	8003434 <__aeabi_dadd+0x2a4>
 8003690:	1a1c      	subs	r4, r3, r0
 8003692:	464a      	mov	r2, r9
 8003694:	42a3      	cmp	r3, r4
 8003696:	419b      	sbcs	r3, r3
 8003698:	1a89      	subs	r1, r1, r2
 800369a:	425b      	negs	r3, r3
 800369c:	1acb      	subs	r3, r1, r3
 800369e:	469a      	mov	sl, r3
 80036a0:	2601      	movs	r6, #1
 80036a2:	e5c1      	b.n	8003228 <__aeabi_dadd+0x98>
 80036a4:	074a      	lsls	r2, r1, #29
 80036a6:	08db      	lsrs	r3, r3, #3
 80036a8:	4313      	orrs	r3, r2
 80036aa:	08c9      	lsrs	r1, r1, #3
 80036ac:	e69f      	b.n	80033ee <__aeabi_dadd+0x25e>
 80036ae:	4643      	mov	r3, r8
 80036b0:	08d8      	lsrs	r0, r3, #3
 80036b2:	464b      	mov	r3, r9
 80036b4:	464a      	mov	r2, r9
 80036b6:	075b      	lsls	r3, r3, #29
 80036b8:	4665      	mov	r5, ip
 80036ba:	4303      	orrs	r3, r0
 80036bc:	08d1      	lsrs	r1, r2, #3
 80036be:	e6b9      	b.n	8003434 <__aeabi_dadd+0x2a4>
 80036c0:	4643      	mov	r3, r8
 80036c2:	08d8      	lsrs	r0, r3, #3
 80036c4:	464b      	mov	r3, r9
 80036c6:	464a      	mov	r2, r9
 80036c8:	075b      	lsls	r3, r3, #29
 80036ca:	4303      	orrs	r3, r0
 80036cc:	08d1      	lsrs	r1, r2, #3
 80036ce:	e6b1      	b.n	8003434 <__aeabi_dadd+0x2a4>
 80036d0:	4319      	orrs	r1, r3
 80036d2:	000c      	movs	r4, r1
 80036d4:	1e63      	subs	r3, r4, #1
 80036d6:	419c      	sbcs	r4, r3
 80036d8:	e6eb      	b.n	80034b2 <__aeabi_dadd+0x322>
 80036da:	003c      	movs	r4, r7
 80036dc:	000d      	movs	r5, r1
 80036de:	3c20      	subs	r4, #32
 80036e0:	40e5      	lsrs	r5, r4
 80036e2:	2f20      	cmp	r7, #32
 80036e4:	d003      	beq.n	80036ee <__aeabi_dadd+0x55e>
 80036e6:	2440      	movs	r4, #64	; 0x40
 80036e8:	1be4      	subs	r4, r4, r7
 80036ea:	40a1      	lsls	r1, r4
 80036ec:	430b      	orrs	r3, r1
 80036ee:	001c      	movs	r4, r3
 80036f0:	1e63      	subs	r3, r4, #1
 80036f2:	419c      	sbcs	r4, r3
 80036f4:	432c      	orrs	r4, r5
 80036f6:	e770      	b.n	80035da <__aeabi_dadd+0x44a>
 80036f8:	2a00      	cmp	r2, #0
 80036fa:	d0e1      	beq.n	80036c0 <__aeabi_dadd+0x530>
 80036fc:	464a      	mov	r2, r9
 80036fe:	4302      	orrs	r2, r0
 8003700:	d0c1      	beq.n	8003686 <__aeabi_dadd+0x4f6>
 8003702:	074a      	lsls	r2, r1, #29
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	4313      	orrs	r3, r2
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	08c9      	lsrs	r1, r1, #3
 800370c:	0312      	lsls	r2, r2, #12
 800370e:	4211      	tst	r1, r2
 8003710:	d008      	beq.n	8003724 <__aeabi_dadd+0x594>
 8003712:	4648      	mov	r0, r9
 8003714:	08c4      	lsrs	r4, r0, #3
 8003716:	4214      	tst	r4, r2
 8003718:	d104      	bne.n	8003724 <__aeabi_dadd+0x594>
 800371a:	4643      	mov	r3, r8
 800371c:	0021      	movs	r1, r4
 800371e:	08db      	lsrs	r3, r3, #3
 8003720:	0742      	lsls	r2, r0, #29
 8003722:	4313      	orrs	r3, r2
 8003724:	0f5a      	lsrs	r2, r3, #29
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	0752      	lsls	r2, r2, #29
 800372a:	08db      	lsrs	r3, r3, #3
 800372c:	4313      	orrs	r3, r2
 800372e:	e681      	b.n	8003434 <__aeabi_dadd+0x2a4>
 8003730:	464b      	mov	r3, r9
 8003732:	4303      	orrs	r3, r0
 8003734:	d100      	bne.n	8003738 <__aeabi_dadd+0x5a8>
 8003736:	e714      	b.n	8003562 <__aeabi_dadd+0x3d2>
 8003738:	464b      	mov	r3, r9
 800373a:	464a      	mov	r2, r9
 800373c:	08c0      	lsrs	r0, r0, #3
 800373e:	075b      	lsls	r3, r3, #29
 8003740:	4665      	mov	r5, ip
 8003742:	4303      	orrs	r3, r0
 8003744:	08d1      	lsrs	r1, r2, #3
 8003746:	e655      	b.n	80033f4 <__aeabi_dadd+0x264>
 8003748:	1ac4      	subs	r4, r0, r3
 800374a:	45a0      	cmp	r8, r4
 800374c:	4180      	sbcs	r0, r0
 800374e:	464b      	mov	r3, r9
 8003750:	4240      	negs	r0, r0
 8003752:	1a59      	subs	r1, r3, r1
 8003754:	1a0b      	subs	r3, r1, r0
 8003756:	469a      	mov	sl, r3
 8003758:	4665      	mov	r5, ip
 800375a:	2601      	movs	r6, #1
 800375c:	e564      	b.n	8003228 <__aeabi_dadd+0x98>
 800375e:	1a1c      	subs	r4, r3, r0
 8003760:	464a      	mov	r2, r9
 8003762:	42a3      	cmp	r3, r4
 8003764:	4180      	sbcs	r0, r0
 8003766:	1a8a      	subs	r2, r1, r2
 8003768:	4240      	negs	r0, r0
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	4692      	mov	sl, r2
 800376e:	0212      	lsls	r2, r2, #8
 8003770:	d549      	bpl.n	8003806 <__aeabi_dadd+0x676>
 8003772:	4642      	mov	r2, r8
 8003774:	1ad4      	subs	r4, r2, r3
 8003776:	45a0      	cmp	r8, r4
 8003778:	4180      	sbcs	r0, r0
 800377a:	464b      	mov	r3, r9
 800377c:	4240      	negs	r0, r0
 800377e:	1a59      	subs	r1, r3, r1
 8003780:	1a0b      	subs	r3, r1, r0
 8003782:	469a      	mov	sl, r3
 8003784:	4665      	mov	r5, ip
 8003786:	e57f      	b.n	8003288 <__aeabi_dadd+0xf8>
 8003788:	464b      	mov	r3, r9
 800378a:	464a      	mov	r2, r9
 800378c:	08c0      	lsrs	r0, r0, #3
 800378e:	075b      	lsls	r3, r3, #29
 8003790:	4303      	orrs	r3, r0
 8003792:	08d1      	lsrs	r1, r2, #3
 8003794:	e62b      	b.n	80033ee <__aeabi_dadd+0x25e>
 8003796:	464a      	mov	r2, r9
 8003798:	08db      	lsrs	r3, r3, #3
 800379a:	4302      	orrs	r2, r0
 800379c:	d138      	bne.n	8003810 <__aeabi_dadd+0x680>
 800379e:	074a      	lsls	r2, r1, #29
 80037a0:	4313      	orrs	r3, r2
 80037a2:	08c9      	lsrs	r1, r1, #3
 80037a4:	e646      	b.n	8003434 <__aeabi_dadd+0x2a4>
 80037a6:	464b      	mov	r3, r9
 80037a8:	464a      	mov	r2, r9
 80037aa:	08c0      	lsrs	r0, r0, #3
 80037ac:	075b      	lsls	r3, r3, #29
 80037ae:	4303      	orrs	r3, r0
 80037b0:	08d1      	lsrs	r1, r2, #3
 80037b2:	e61f      	b.n	80033f4 <__aeabi_dadd+0x264>
 80037b4:	181c      	adds	r4, r3, r0
 80037b6:	429c      	cmp	r4, r3
 80037b8:	419b      	sbcs	r3, r3
 80037ba:	4449      	add	r1, r9
 80037bc:	468a      	mov	sl, r1
 80037be:	425b      	negs	r3, r3
 80037c0:	449a      	add	sl, r3
 80037c2:	4653      	mov	r3, sl
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	d400      	bmi.n	80037ca <__aeabi_dadd+0x63a>
 80037c8:	e607      	b.n	80033da <__aeabi_dadd+0x24a>
 80037ca:	4652      	mov	r2, sl
 80037cc:	4b1f      	ldr	r3, [pc, #124]	; (800384c <__aeabi_dadd+0x6bc>)
 80037ce:	2601      	movs	r6, #1
 80037d0:	401a      	ands	r2, r3
 80037d2:	4692      	mov	sl, r2
 80037d4:	e601      	b.n	80033da <__aeabi_dadd+0x24a>
 80037d6:	003c      	movs	r4, r7
 80037d8:	000e      	movs	r6, r1
 80037da:	3c20      	subs	r4, #32
 80037dc:	40e6      	lsrs	r6, r4
 80037de:	2f20      	cmp	r7, #32
 80037e0:	d003      	beq.n	80037ea <__aeabi_dadd+0x65a>
 80037e2:	2440      	movs	r4, #64	; 0x40
 80037e4:	1be4      	subs	r4, r4, r7
 80037e6:	40a1      	lsls	r1, r4
 80037e8:	430b      	orrs	r3, r1
 80037ea:	001c      	movs	r4, r3
 80037ec:	1e63      	subs	r3, r4, #1
 80037ee:	419c      	sbcs	r4, r3
 80037f0:	4334      	orrs	r4, r6
 80037f2:	e65e      	b.n	80034b2 <__aeabi_dadd+0x322>
 80037f4:	4443      	add	r3, r8
 80037f6:	4283      	cmp	r3, r0
 80037f8:	4180      	sbcs	r0, r0
 80037fa:	4449      	add	r1, r9
 80037fc:	468a      	mov	sl, r1
 80037fe:	4240      	negs	r0, r0
 8003800:	001c      	movs	r4, r3
 8003802:	4482      	add	sl, r0
 8003804:	e6bc      	b.n	8003580 <__aeabi_dadd+0x3f0>
 8003806:	4653      	mov	r3, sl
 8003808:	4323      	orrs	r3, r4
 800380a:	d100      	bne.n	800380e <__aeabi_dadd+0x67e>
 800380c:	e6a9      	b.n	8003562 <__aeabi_dadd+0x3d2>
 800380e:	e5e4      	b.n	80033da <__aeabi_dadd+0x24a>
 8003810:	074a      	lsls	r2, r1, #29
 8003812:	4313      	orrs	r3, r2
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	08c9      	lsrs	r1, r1, #3
 8003818:	0312      	lsls	r2, r2, #12
 800381a:	4211      	tst	r1, r2
 800381c:	d009      	beq.n	8003832 <__aeabi_dadd+0x6a2>
 800381e:	4648      	mov	r0, r9
 8003820:	08c4      	lsrs	r4, r0, #3
 8003822:	4214      	tst	r4, r2
 8003824:	d105      	bne.n	8003832 <__aeabi_dadd+0x6a2>
 8003826:	4643      	mov	r3, r8
 8003828:	4665      	mov	r5, ip
 800382a:	0021      	movs	r1, r4
 800382c:	08db      	lsrs	r3, r3, #3
 800382e:	0742      	lsls	r2, r0, #29
 8003830:	4313      	orrs	r3, r2
 8003832:	0f5a      	lsrs	r2, r3, #29
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	08db      	lsrs	r3, r3, #3
 8003838:	0752      	lsls	r2, r2, #29
 800383a:	4313      	orrs	r3, r2
 800383c:	e5fa      	b.n	8003434 <__aeabi_dadd+0x2a4>
 800383e:	2300      	movs	r3, #0
 8003840:	4a01      	ldr	r2, [pc, #4]	; (8003848 <__aeabi_dadd+0x6b8>)
 8003842:	001c      	movs	r4, r3
 8003844:	e540      	b.n	80032c8 <__aeabi_dadd+0x138>
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	000007ff 	.word	0x000007ff
 800384c:	ff7fffff 	.word	0xff7fffff

08003850 <__aeabi_ddiv>:
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	4657      	mov	r7, sl
 8003854:	464e      	mov	r6, r9
 8003856:	4645      	mov	r5, r8
 8003858:	46de      	mov	lr, fp
 800385a:	b5e0      	push	{r5, r6, r7, lr}
 800385c:	030c      	lsls	r4, r1, #12
 800385e:	001f      	movs	r7, r3
 8003860:	004b      	lsls	r3, r1, #1
 8003862:	4681      	mov	r9, r0
 8003864:	4692      	mov	sl, r2
 8003866:	0005      	movs	r5, r0
 8003868:	b085      	sub	sp, #20
 800386a:	0b24      	lsrs	r4, r4, #12
 800386c:	0d5b      	lsrs	r3, r3, #21
 800386e:	0fce      	lsrs	r6, r1, #31
 8003870:	2b00      	cmp	r3, #0
 8003872:	d100      	bne.n	8003876 <__aeabi_ddiv+0x26>
 8003874:	e152      	b.n	8003b1c <__aeabi_ddiv+0x2cc>
 8003876:	4ad2      	ldr	r2, [pc, #840]	; (8003bc0 <__aeabi_ddiv+0x370>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d100      	bne.n	800387e <__aeabi_ddiv+0x2e>
 800387c:	e16e      	b.n	8003b5c <__aeabi_ddiv+0x30c>
 800387e:	0f42      	lsrs	r2, r0, #29
 8003880:	00e4      	lsls	r4, r4, #3
 8003882:	4314      	orrs	r4, r2
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0412      	lsls	r2, r2, #16
 8003888:	4322      	orrs	r2, r4
 800388a:	4690      	mov	r8, r2
 800388c:	4acd      	ldr	r2, [pc, #820]	; (8003bc4 <__aeabi_ddiv+0x374>)
 800388e:	00c5      	lsls	r5, r0, #3
 8003890:	4693      	mov	fp, r2
 8003892:	449b      	add	fp, r3
 8003894:	2300      	movs	r3, #0
 8003896:	4699      	mov	r9, r3
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	033c      	lsls	r4, r7, #12
 800389c:	007b      	lsls	r3, r7, #1
 800389e:	4650      	mov	r0, sl
 80038a0:	0b24      	lsrs	r4, r4, #12
 80038a2:	0d5b      	lsrs	r3, r3, #21
 80038a4:	0fff      	lsrs	r7, r7, #31
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d100      	bne.n	80038ac <__aeabi_ddiv+0x5c>
 80038aa:	e11a      	b.n	8003ae2 <__aeabi_ddiv+0x292>
 80038ac:	4ac4      	ldr	r2, [pc, #784]	; (8003bc0 <__aeabi_ddiv+0x370>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d100      	bne.n	80038b4 <__aeabi_ddiv+0x64>
 80038b2:	e15e      	b.n	8003b72 <__aeabi_ddiv+0x322>
 80038b4:	0f42      	lsrs	r2, r0, #29
 80038b6:	00e4      	lsls	r4, r4, #3
 80038b8:	4322      	orrs	r2, r4
 80038ba:	2480      	movs	r4, #128	; 0x80
 80038bc:	0424      	lsls	r4, r4, #16
 80038be:	4314      	orrs	r4, r2
 80038c0:	4ac0      	ldr	r2, [pc, #768]	; (8003bc4 <__aeabi_ddiv+0x374>)
 80038c2:	00c1      	lsls	r1, r0, #3
 80038c4:	4694      	mov	ip, r2
 80038c6:	465a      	mov	r2, fp
 80038c8:	4463      	add	r3, ip
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	469b      	mov	fp, r3
 80038ce:	2000      	movs	r0, #0
 80038d0:	0033      	movs	r3, r6
 80038d2:	407b      	eors	r3, r7
 80038d4:	469a      	mov	sl, r3
 80038d6:	464b      	mov	r3, r9
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	d827      	bhi.n	800392c <__aeabi_ddiv+0xdc>
 80038dc:	4aba      	ldr	r2, [pc, #744]	; (8003bc8 <__aeabi_ddiv+0x378>)
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	58d3      	ldr	r3, [r2, r3]
 80038e2:	469f      	mov	pc, r3
 80038e4:	46b2      	mov	sl, r6
 80038e6:	9b00      	ldr	r3, [sp, #0]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d016      	beq.n	800391a <__aeabi_ddiv+0xca>
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d100      	bne.n	80038f2 <__aeabi_ddiv+0xa2>
 80038f0:	e287      	b.n	8003e02 <__aeabi_ddiv+0x5b2>
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d000      	beq.n	80038f8 <__aeabi_ddiv+0xa8>
 80038f6:	e0d5      	b.n	8003aa4 <__aeabi_ddiv+0x254>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2200      	movs	r2, #0
 80038fc:	2500      	movs	r5, #0
 80038fe:	051b      	lsls	r3, r3, #20
 8003900:	4313      	orrs	r3, r2
 8003902:	4652      	mov	r2, sl
 8003904:	07d2      	lsls	r2, r2, #31
 8003906:	4313      	orrs	r3, r2
 8003908:	0028      	movs	r0, r5
 800390a:	0019      	movs	r1, r3
 800390c:	b005      	add	sp, #20
 800390e:	bcf0      	pop	{r4, r5, r6, r7}
 8003910:	46bb      	mov	fp, r7
 8003912:	46b2      	mov	sl, r6
 8003914:	46a9      	mov	r9, r5
 8003916:	46a0      	mov	r8, r4
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391a:	2200      	movs	r2, #0
 800391c:	2500      	movs	r5, #0
 800391e:	4ba8      	ldr	r3, [pc, #672]	; (8003bc0 <__aeabi_ddiv+0x370>)
 8003920:	e7ed      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003922:	46ba      	mov	sl, r7
 8003924:	46a0      	mov	r8, r4
 8003926:	000d      	movs	r5, r1
 8003928:	9000      	str	r0, [sp, #0]
 800392a:	e7dc      	b.n	80038e6 <__aeabi_ddiv+0x96>
 800392c:	4544      	cmp	r4, r8
 800392e:	d200      	bcs.n	8003932 <__aeabi_ddiv+0xe2>
 8003930:	e1c4      	b.n	8003cbc <__aeabi_ddiv+0x46c>
 8003932:	d100      	bne.n	8003936 <__aeabi_ddiv+0xe6>
 8003934:	e1bf      	b.n	8003cb6 <__aeabi_ddiv+0x466>
 8003936:	2301      	movs	r3, #1
 8003938:	425b      	negs	r3, r3
 800393a:	469c      	mov	ip, r3
 800393c:	002e      	movs	r6, r5
 800393e:	4640      	mov	r0, r8
 8003940:	2500      	movs	r5, #0
 8003942:	44e3      	add	fp, ip
 8003944:	0223      	lsls	r3, r4, #8
 8003946:	0e0c      	lsrs	r4, r1, #24
 8003948:	431c      	orrs	r4, r3
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	4699      	mov	r9, r3
 800394e:	0423      	lsls	r3, r4, #16
 8003950:	020a      	lsls	r2, r1, #8
 8003952:	0c1f      	lsrs	r7, r3, #16
 8003954:	4649      	mov	r1, r9
 8003956:	9200      	str	r2, [sp, #0]
 8003958:	9701      	str	r7, [sp, #4]
 800395a:	f7fe fc73 	bl	8002244 <__aeabi_uidivmod>
 800395e:	0002      	movs	r2, r0
 8003960:	437a      	muls	r2, r7
 8003962:	040b      	lsls	r3, r1, #16
 8003964:	0c31      	lsrs	r1, r6, #16
 8003966:	4680      	mov	r8, r0
 8003968:	4319      	orrs	r1, r3
 800396a:	428a      	cmp	r2, r1
 800396c:	d907      	bls.n	800397e <__aeabi_ddiv+0x12e>
 800396e:	2301      	movs	r3, #1
 8003970:	425b      	negs	r3, r3
 8003972:	469c      	mov	ip, r3
 8003974:	1909      	adds	r1, r1, r4
 8003976:	44e0      	add	r8, ip
 8003978:	428c      	cmp	r4, r1
 800397a:	d800      	bhi.n	800397e <__aeabi_ddiv+0x12e>
 800397c:	e201      	b.n	8003d82 <__aeabi_ddiv+0x532>
 800397e:	1a88      	subs	r0, r1, r2
 8003980:	4649      	mov	r1, r9
 8003982:	f7fe fc5f 	bl	8002244 <__aeabi_uidivmod>
 8003986:	9a01      	ldr	r2, [sp, #4]
 8003988:	0436      	lsls	r6, r6, #16
 800398a:	4342      	muls	r2, r0
 800398c:	0409      	lsls	r1, r1, #16
 800398e:	0c36      	lsrs	r6, r6, #16
 8003990:	0003      	movs	r3, r0
 8003992:	430e      	orrs	r6, r1
 8003994:	42b2      	cmp	r2, r6
 8003996:	d904      	bls.n	80039a2 <__aeabi_ddiv+0x152>
 8003998:	1936      	adds	r6, r6, r4
 800399a:	3b01      	subs	r3, #1
 800399c:	42b4      	cmp	r4, r6
 800399e:	d800      	bhi.n	80039a2 <__aeabi_ddiv+0x152>
 80039a0:	e1e9      	b.n	8003d76 <__aeabi_ddiv+0x526>
 80039a2:	1ab0      	subs	r0, r6, r2
 80039a4:	4642      	mov	r2, r8
 80039a6:	9e00      	ldr	r6, [sp, #0]
 80039a8:	0412      	lsls	r2, r2, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	0c33      	lsrs	r3, r6, #16
 80039ae:	001f      	movs	r7, r3
 80039b0:	0c11      	lsrs	r1, r2, #16
 80039b2:	4690      	mov	r8, r2
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	0413      	lsls	r3, r2, #16
 80039b8:	0432      	lsls	r2, r6, #16
 80039ba:	0c16      	lsrs	r6, r2, #16
 80039bc:	0032      	movs	r2, r6
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	435a      	muls	r2, r3
 80039c2:	9603      	str	r6, [sp, #12]
 80039c4:	437b      	muls	r3, r7
 80039c6:	434e      	muls	r6, r1
 80039c8:	4379      	muls	r1, r7
 80039ca:	0c17      	lsrs	r7, r2, #16
 80039cc:	46bc      	mov	ip, r7
 80039ce:	199b      	adds	r3, r3, r6
 80039d0:	4463      	add	r3, ip
 80039d2:	429e      	cmp	r6, r3
 80039d4:	d903      	bls.n	80039de <__aeabi_ddiv+0x18e>
 80039d6:	2680      	movs	r6, #128	; 0x80
 80039d8:	0276      	lsls	r6, r6, #9
 80039da:	46b4      	mov	ip, r6
 80039dc:	4461      	add	r1, ip
 80039de:	0c1e      	lsrs	r6, r3, #16
 80039e0:	1871      	adds	r1, r6, r1
 80039e2:	0416      	lsls	r6, r2, #16
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	0c36      	lsrs	r6, r6, #16
 80039e8:	199e      	adds	r6, r3, r6
 80039ea:	4288      	cmp	r0, r1
 80039ec:	d302      	bcc.n	80039f4 <__aeabi_ddiv+0x1a4>
 80039ee:	d112      	bne.n	8003a16 <__aeabi_ddiv+0x1c6>
 80039f0:	42b5      	cmp	r5, r6
 80039f2:	d210      	bcs.n	8003a16 <__aeabi_ddiv+0x1c6>
 80039f4:	4643      	mov	r3, r8
 80039f6:	1e5a      	subs	r2, r3, #1
 80039f8:	9b00      	ldr	r3, [sp, #0]
 80039fa:	469c      	mov	ip, r3
 80039fc:	4465      	add	r5, ip
 80039fe:	001f      	movs	r7, r3
 8003a00:	429d      	cmp	r5, r3
 8003a02:	419b      	sbcs	r3, r3
 8003a04:	425b      	negs	r3, r3
 8003a06:	191b      	adds	r3, r3, r4
 8003a08:	18c0      	adds	r0, r0, r3
 8003a0a:	4284      	cmp	r4, r0
 8003a0c:	d200      	bcs.n	8003a10 <__aeabi_ddiv+0x1c0>
 8003a0e:	e19e      	b.n	8003d4e <__aeabi_ddiv+0x4fe>
 8003a10:	d100      	bne.n	8003a14 <__aeabi_ddiv+0x1c4>
 8003a12:	e199      	b.n	8003d48 <__aeabi_ddiv+0x4f8>
 8003a14:	4690      	mov	r8, r2
 8003a16:	1bae      	subs	r6, r5, r6
 8003a18:	42b5      	cmp	r5, r6
 8003a1a:	41ad      	sbcs	r5, r5
 8003a1c:	1a40      	subs	r0, r0, r1
 8003a1e:	426d      	negs	r5, r5
 8003a20:	1b40      	subs	r0, r0, r5
 8003a22:	4284      	cmp	r4, r0
 8003a24:	d100      	bne.n	8003a28 <__aeabi_ddiv+0x1d8>
 8003a26:	e1d2      	b.n	8003dce <__aeabi_ddiv+0x57e>
 8003a28:	4649      	mov	r1, r9
 8003a2a:	f7fe fc0b 	bl	8002244 <__aeabi_uidivmod>
 8003a2e:	9a01      	ldr	r2, [sp, #4]
 8003a30:	040b      	lsls	r3, r1, #16
 8003a32:	4342      	muls	r2, r0
 8003a34:	0c31      	lsrs	r1, r6, #16
 8003a36:	0005      	movs	r5, r0
 8003a38:	4319      	orrs	r1, r3
 8003a3a:	428a      	cmp	r2, r1
 8003a3c:	d900      	bls.n	8003a40 <__aeabi_ddiv+0x1f0>
 8003a3e:	e16c      	b.n	8003d1a <__aeabi_ddiv+0x4ca>
 8003a40:	1a88      	subs	r0, r1, r2
 8003a42:	4649      	mov	r1, r9
 8003a44:	f7fe fbfe 	bl	8002244 <__aeabi_uidivmod>
 8003a48:	9a01      	ldr	r2, [sp, #4]
 8003a4a:	0436      	lsls	r6, r6, #16
 8003a4c:	4342      	muls	r2, r0
 8003a4e:	0409      	lsls	r1, r1, #16
 8003a50:	0c36      	lsrs	r6, r6, #16
 8003a52:	0003      	movs	r3, r0
 8003a54:	430e      	orrs	r6, r1
 8003a56:	42b2      	cmp	r2, r6
 8003a58:	d900      	bls.n	8003a5c <__aeabi_ddiv+0x20c>
 8003a5a:	e153      	b.n	8003d04 <__aeabi_ddiv+0x4b4>
 8003a5c:	9803      	ldr	r0, [sp, #12]
 8003a5e:	1ab6      	subs	r6, r6, r2
 8003a60:	0002      	movs	r2, r0
 8003a62:	042d      	lsls	r5, r5, #16
 8003a64:	431d      	orrs	r5, r3
 8003a66:	9f02      	ldr	r7, [sp, #8]
 8003a68:	042b      	lsls	r3, r5, #16
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	435a      	muls	r2, r3
 8003a6e:	437b      	muls	r3, r7
 8003a70:	469c      	mov	ip, r3
 8003a72:	0c29      	lsrs	r1, r5, #16
 8003a74:	4348      	muls	r0, r1
 8003a76:	0c13      	lsrs	r3, r2, #16
 8003a78:	4484      	add	ip, r0
 8003a7a:	4463      	add	r3, ip
 8003a7c:	4379      	muls	r1, r7
 8003a7e:	4298      	cmp	r0, r3
 8003a80:	d903      	bls.n	8003a8a <__aeabi_ddiv+0x23a>
 8003a82:	2080      	movs	r0, #128	; 0x80
 8003a84:	0240      	lsls	r0, r0, #9
 8003a86:	4684      	mov	ip, r0
 8003a88:	4461      	add	r1, ip
 8003a8a:	0c18      	lsrs	r0, r3, #16
 8003a8c:	0412      	lsls	r2, r2, #16
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	0c12      	lsrs	r2, r2, #16
 8003a92:	1840      	adds	r0, r0, r1
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	4286      	cmp	r6, r0
 8003a98:	d200      	bcs.n	8003a9c <__aeabi_ddiv+0x24c>
 8003a9a:	e100      	b.n	8003c9e <__aeabi_ddiv+0x44e>
 8003a9c:	d100      	bne.n	8003aa0 <__aeabi_ddiv+0x250>
 8003a9e:	e0fb      	b.n	8003c98 <__aeabi_ddiv+0x448>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	431d      	orrs	r5, r3
 8003aa4:	4b49      	ldr	r3, [pc, #292]	; (8003bcc <__aeabi_ddiv+0x37c>)
 8003aa6:	445b      	add	r3, fp
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	dc00      	bgt.n	8003aae <__aeabi_ddiv+0x25e>
 8003aac:	e0aa      	b.n	8003c04 <__aeabi_ddiv+0x3b4>
 8003aae:	076a      	lsls	r2, r5, #29
 8003ab0:	d000      	beq.n	8003ab4 <__aeabi_ddiv+0x264>
 8003ab2:	e13d      	b.n	8003d30 <__aeabi_ddiv+0x4e0>
 8003ab4:	08e9      	lsrs	r1, r5, #3
 8003ab6:	4642      	mov	r2, r8
 8003ab8:	01d2      	lsls	r2, r2, #7
 8003aba:	d506      	bpl.n	8003aca <__aeabi_ddiv+0x27a>
 8003abc:	4642      	mov	r2, r8
 8003abe:	4b44      	ldr	r3, [pc, #272]	; (8003bd0 <__aeabi_ddiv+0x380>)
 8003ac0:	401a      	ands	r2, r3
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	4690      	mov	r8, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	445b      	add	r3, fp
 8003aca:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <__aeabi_ddiv+0x384>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	dd00      	ble.n	8003ad2 <__aeabi_ddiv+0x282>
 8003ad0:	e723      	b.n	800391a <__aeabi_ddiv+0xca>
 8003ad2:	4642      	mov	r2, r8
 8003ad4:	055b      	lsls	r3, r3, #21
 8003ad6:	0755      	lsls	r5, r2, #29
 8003ad8:	0252      	lsls	r2, r2, #9
 8003ada:	430d      	orrs	r5, r1
 8003adc:	0b12      	lsrs	r2, r2, #12
 8003ade:	0d5b      	lsrs	r3, r3, #21
 8003ae0:	e70d      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	4321      	orrs	r1, r4
 8003ae6:	d100      	bne.n	8003aea <__aeabi_ddiv+0x29a>
 8003ae8:	e07c      	b.n	8003be4 <__aeabi_ddiv+0x394>
 8003aea:	2c00      	cmp	r4, #0
 8003aec:	d100      	bne.n	8003af0 <__aeabi_ddiv+0x2a0>
 8003aee:	e0fb      	b.n	8003ce8 <__aeabi_ddiv+0x498>
 8003af0:	0020      	movs	r0, r4
 8003af2:	f001 f8d3 	bl	8004c9c <__clzsi2>
 8003af6:	0002      	movs	r2, r0
 8003af8:	3a0b      	subs	r2, #11
 8003afa:	231d      	movs	r3, #29
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	4652      	mov	r2, sl
 8003b00:	0001      	movs	r1, r0
 8003b02:	40da      	lsrs	r2, r3
 8003b04:	4653      	mov	r3, sl
 8003b06:	3908      	subs	r1, #8
 8003b08:	408b      	lsls	r3, r1
 8003b0a:	408c      	lsls	r4, r1
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	4314      	orrs	r4, r2
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <__aeabi_ddiv+0x388>)
 8003b12:	4458      	add	r0, fp
 8003b14:	469b      	mov	fp, r3
 8003b16:	4483      	add	fp, r0
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e6d9      	b.n	80038d0 <__aeabi_ddiv+0x80>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	4323      	orrs	r3, r4
 8003b20:	4698      	mov	r8, r3
 8003b22:	d044      	beq.n	8003bae <__aeabi_ddiv+0x35e>
 8003b24:	2c00      	cmp	r4, #0
 8003b26:	d100      	bne.n	8003b2a <__aeabi_ddiv+0x2da>
 8003b28:	e0cf      	b.n	8003cca <__aeabi_ddiv+0x47a>
 8003b2a:	0020      	movs	r0, r4
 8003b2c:	f001 f8b6 	bl	8004c9c <__clzsi2>
 8003b30:	0001      	movs	r1, r0
 8003b32:	0002      	movs	r2, r0
 8003b34:	390b      	subs	r1, #11
 8003b36:	231d      	movs	r3, #29
 8003b38:	1a5b      	subs	r3, r3, r1
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	40d9      	lsrs	r1, r3
 8003b40:	3808      	subs	r0, #8
 8003b42:	4084      	lsls	r4, r0
 8003b44:	000b      	movs	r3, r1
 8003b46:	464d      	mov	r5, r9
 8003b48:	4323      	orrs	r3, r4
 8003b4a:	4698      	mov	r8, r3
 8003b4c:	4085      	lsls	r5, r0
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <__aeabi_ddiv+0x38c>)
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	469b      	mov	fp, r3
 8003b54:	2300      	movs	r3, #0
 8003b56:	4699      	mov	r9, r3
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	e69e      	b.n	800389a <__aeabi_ddiv+0x4a>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	4322      	orrs	r2, r4
 8003b60:	4690      	mov	r8, r2
 8003b62:	d11d      	bne.n	8003ba0 <__aeabi_ddiv+0x350>
 8003b64:	2208      	movs	r2, #8
 8003b66:	469b      	mov	fp, r3
 8003b68:	2302      	movs	r3, #2
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	4691      	mov	r9, r2
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	e693      	b.n	800389a <__aeabi_ddiv+0x4a>
 8003b72:	4651      	mov	r1, sl
 8003b74:	4321      	orrs	r1, r4
 8003b76:	d109      	bne.n	8003b8c <__aeabi_ddiv+0x33c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	464a      	mov	r2, r9
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <__aeabi_ddiv+0x390>)
 8003b80:	4691      	mov	r9, r2
 8003b82:	469c      	mov	ip, r3
 8003b84:	2400      	movs	r4, #0
 8003b86:	2002      	movs	r0, #2
 8003b88:	44e3      	add	fp, ip
 8003b8a:	e6a1      	b.n	80038d0 <__aeabi_ddiv+0x80>
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	464a      	mov	r2, r9
 8003b90:	431a      	orrs	r2, r3
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <__aeabi_ddiv+0x390>)
 8003b94:	4691      	mov	r9, r2
 8003b96:	469c      	mov	ip, r3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	44e3      	add	fp, ip
 8003b9e:	e697      	b.n	80038d0 <__aeabi_ddiv+0x80>
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	469b      	mov	fp, r3
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	46a0      	mov	r8, r4
 8003ba8:	4691      	mov	r9, r2
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	e675      	b.n	800389a <__aeabi_ddiv+0x4a>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	4699      	mov	r9, r3
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	469b      	mov	fp, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	2500      	movs	r5, #0
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	e66d      	b.n	800389a <__aeabi_ddiv+0x4a>
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	000007ff 	.word	0x000007ff
 8003bc4:	fffffc01 	.word	0xfffffc01
 8003bc8:	08031a94 	.word	0x08031a94
 8003bcc:	000003ff 	.word	0x000003ff
 8003bd0:	feffffff 	.word	0xfeffffff
 8003bd4:	000007fe 	.word	0x000007fe
 8003bd8:	000003f3 	.word	0x000003f3
 8003bdc:	fffffc0d 	.word	0xfffffc0d
 8003be0:	fffff801 	.word	0xfffff801
 8003be4:	464a      	mov	r2, r9
 8003be6:	2301      	movs	r3, #1
 8003be8:	431a      	orrs	r2, r3
 8003bea:	4691      	mov	r9, r2
 8003bec:	2400      	movs	r4, #0
 8003bee:	2001      	movs	r0, #1
 8003bf0:	e66e      	b.n	80038d0 <__aeabi_ddiv+0x80>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	469a      	mov	sl, r3
 8003bf8:	2500      	movs	r5, #0
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <__aeabi_ddiv+0x5cc>)
 8003bfc:	0312      	lsls	r2, r2, #12
 8003bfe:	e67e      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003c00:	2501      	movs	r5, #1
 8003c02:	426d      	negs	r5, r5
 8003c04:	2201      	movs	r2, #1
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	2a38      	cmp	r2, #56	; 0x38
 8003c0a:	dd00      	ble.n	8003c0e <__aeabi_ddiv+0x3be>
 8003c0c:	e674      	b.n	80038f8 <__aeabi_ddiv+0xa8>
 8003c0e:	2a1f      	cmp	r2, #31
 8003c10:	dc00      	bgt.n	8003c14 <__aeabi_ddiv+0x3c4>
 8003c12:	e0bd      	b.n	8003d90 <__aeabi_ddiv+0x540>
 8003c14:	211f      	movs	r1, #31
 8003c16:	4249      	negs	r1, r1
 8003c18:	1acb      	subs	r3, r1, r3
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	40d9      	lsrs	r1, r3
 8003c1e:	000b      	movs	r3, r1
 8003c20:	2a20      	cmp	r2, #32
 8003c22:	d004      	beq.n	8003c2e <__aeabi_ddiv+0x3de>
 8003c24:	4641      	mov	r1, r8
 8003c26:	4a7e      	ldr	r2, [pc, #504]	; (8003e20 <__aeabi_ddiv+0x5d0>)
 8003c28:	445a      	add	r2, fp
 8003c2a:	4091      	lsls	r1, r2
 8003c2c:	430d      	orrs	r5, r1
 8003c2e:	0029      	movs	r1, r5
 8003c30:	1e4a      	subs	r2, r1, #1
 8003c32:	4191      	sbcs	r1, r2
 8003c34:	4319      	orrs	r1, r3
 8003c36:	2307      	movs	r3, #7
 8003c38:	001d      	movs	r5, r3
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	400d      	ands	r5, r1
 8003c3e:	420b      	tst	r3, r1
 8003c40:	d100      	bne.n	8003c44 <__aeabi_ddiv+0x3f4>
 8003c42:	e0d0      	b.n	8003de6 <__aeabi_ddiv+0x596>
 8003c44:	220f      	movs	r2, #15
 8003c46:	2300      	movs	r3, #0
 8003c48:	400a      	ands	r2, r1
 8003c4a:	2a04      	cmp	r2, #4
 8003c4c:	d100      	bne.n	8003c50 <__aeabi_ddiv+0x400>
 8003c4e:	e0c7      	b.n	8003de0 <__aeabi_ddiv+0x590>
 8003c50:	1d0a      	adds	r2, r1, #4
 8003c52:	428a      	cmp	r2, r1
 8003c54:	4189      	sbcs	r1, r1
 8003c56:	4249      	negs	r1, r1
 8003c58:	185b      	adds	r3, r3, r1
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	021a      	lsls	r2, r3, #8
 8003c5e:	d400      	bmi.n	8003c62 <__aeabi_ddiv+0x412>
 8003c60:	e0be      	b.n	8003de0 <__aeabi_ddiv+0x590>
 8003c62:	2301      	movs	r3, #1
 8003c64:	2200      	movs	r2, #0
 8003c66:	2500      	movs	r5, #0
 8003c68:	e649      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	4643      	mov	r3, r8
 8003c6e:	0312      	lsls	r2, r2, #12
 8003c70:	4213      	tst	r3, r2
 8003c72:	d008      	beq.n	8003c86 <__aeabi_ddiv+0x436>
 8003c74:	4214      	tst	r4, r2
 8003c76:	d106      	bne.n	8003c86 <__aeabi_ddiv+0x436>
 8003c78:	4322      	orrs	r2, r4
 8003c7a:	0312      	lsls	r2, r2, #12
 8003c7c:	46ba      	mov	sl, r7
 8003c7e:	000d      	movs	r5, r1
 8003c80:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <__aeabi_ddiv+0x5cc>)
 8003c82:	0b12      	lsrs	r2, r2, #12
 8003c84:	e63b      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	4643      	mov	r3, r8
 8003c8a:	0312      	lsls	r2, r2, #12
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	0312      	lsls	r2, r2, #12
 8003c90:	46b2      	mov	sl, r6
 8003c92:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <__aeabi_ddiv+0x5cc>)
 8003c94:	0b12      	lsrs	r2, r2, #12
 8003c96:	e632      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d100      	bne.n	8003c9e <__aeabi_ddiv+0x44e>
 8003c9c:	e702      	b.n	8003aa4 <__aeabi_ddiv+0x254>
 8003c9e:	19a6      	adds	r6, r4, r6
 8003ca0:	1e6a      	subs	r2, r5, #1
 8003ca2:	42a6      	cmp	r6, r4
 8003ca4:	d200      	bcs.n	8003ca8 <__aeabi_ddiv+0x458>
 8003ca6:	e089      	b.n	8003dbc <__aeabi_ddiv+0x56c>
 8003ca8:	4286      	cmp	r6, r0
 8003caa:	d200      	bcs.n	8003cae <__aeabi_ddiv+0x45e>
 8003cac:	e09f      	b.n	8003dee <__aeabi_ddiv+0x59e>
 8003cae:	d100      	bne.n	8003cb2 <__aeabi_ddiv+0x462>
 8003cb0:	e0af      	b.n	8003e12 <__aeabi_ddiv+0x5c2>
 8003cb2:	0015      	movs	r5, r2
 8003cb4:	e6f4      	b.n	8003aa0 <__aeabi_ddiv+0x250>
 8003cb6:	42a9      	cmp	r1, r5
 8003cb8:	d900      	bls.n	8003cbc <__aeabi_ddiv+0x46c>
 8003cba:	e63c      	b.n	8003936 <__aeabi_ddiv+0xe6>
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	07de      	lsls	r6, r3, #31
 8003cc0:	0858      	lsrs	r0, r3, #1
 8003cc2:	086b      	lsrs	r3, r5, #1
 8003cc4:	431e      	orrs	r6, r3
 8003cc6:	07ed      	lsls	r5, r5, #31
 8003cc8:	e63c      	b.n	8003944 <__aeabi_ddiv+0xf4>
 8003cca:	f000 ffe7 	bl	8004c9c <__clzsi2>
 8003cce:	0001      	movs	r1, r0
 8003cd0:	0002      	movs	r2, r0
 8003cd2:	3115      	adds	r1, #21
 8003cd4:	3220      	adds	r2, #32
 8003cd6:	291c      	cmp	r1, #28
 8003cd8:	dc00      	bgt.n	8003cdc <__aeabi_ddiv+0x48c>
 8003cda:	e72c      	b.n	8003b36 <__aeabi_ddiv+0x2e6>
 8003cdc:	464b      	mov	r3, r9
 8003cde:	3808      	subs	r0, #8
 8003ce0:	4083      	lsls	r3, r0
 8003ce2:	2500      	movs	r5, #0
 8003ce4:	4698      	mov	r8, r3
 8003ce6:	e732      	b.n	8003b4e <__aeabi_ddiv+0x2fe>
 8003ce8:	f000 ffd8 	bl	8004c9c <__clzsi2>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	3215      	adds	r2, #21
 8003cf2:	3020      	adds	r0, #32
 8003cf4:	2a1c      	cmp	r2, #28
 8003cf6:	dc00      	bgt.n	8003cfa <__aeabi_ddiv+0x4aa>
 8003cf8:	e6ff      	b.n	8003afa <__aeabi_ddiv+0x2aa>
 8003cfa:	4654      	mov	r4, sl
 8003cfc:	3b08      	subs	r3, #8
 8003cfe:	2100      	movs	r1, #0
 8003d00:	409c      	lsls	r4, r3
 8003d02:	e705      	b.n	8003b10 <__aeabi_ddiv+0x2c0>
 8003d04:	1936      	adds	r6, r6, r4
 8003d06:	3b01      	subs	r3, #1
 8003d08:	42b4      	cmp	r4, r6
 8003d0a:	d900      	bls.n	8003d0e <__aeabi_ddiv+0x4be>
 8003d0c:	e6a6      	b.n	8003a5c <__aeabi_ddiv+0x20c>
 8003d0e:	42b2      	cmp	r2, r6
 8003d10:	d800      	bhi.n	8003d14 <__aeabi_ddiv+0x4c4>
 8003d12:	e6a3      	b.n	8003a5c <__aeabi_ddiv+0x20c>
 8003d14:	1e83      	subs	r3, r0, #2
 8003d16:	1936      	adds	r6, r6, r4
 8003d18:	e6a0      	b.n	8003a5c <__aeabi_ddiv+0x20c>
 8003d1a:	1909      	adds	r1, r1, r4
 8003d1c:	3d01      	subs	r5, #1
 8003d1e:	428c      	cmp	r4, r1
 8003d20:	d900      	bls.n	8003d24 <__aeabi_ddiv+0x4d4>
 8003d22:	e68d      	b.n	8003a40 <__aeabi_ddiv+0x1f0>
 8003d24:	428a      	cmp	r2, r1
 8003d26:	d800      	bhi.n	8003d2a <__aeabi_ddiv+0x4da>
 8003d28:	e68a      	b.n	8003a40 <__aeabi_ddiv+0x1f0>
 8003d2a:	1e85      	subs	r5, r0, #2
 8003d2c:	1909      	adds	r1, r1, r4
 8003d2e:	e687      	b.n	8003a40 <__aeabi_ddiv+0x1f0>
 8003d30:	220f      	movs	r2, #15
 8003d32:	402a      	ands	r2, r5
 8003d34:	2a04      	cmp	r2, #4
 8003d36:	d100      	bne.n	8003d3a <__aeabi_ddiv+0x4ea>
 8003d38:	e6bc      	b.n	8003ab4 <__aeabi_ddiv+0x264>
 8003d3a:	1d29      	adds	r1, r5, #4
 8003d3c:	42a9      	cmp	r1, r5
 8003d3e:	41ad      	sbcs	r5, r5
 8003d40:	426d      	negs	r5, r5
 8003d42:	08c9      	lsrs	r1, r1, #3
 8003d44:	44a8      	add	r8, r5
 8003d46:	e6b6      	b.n	8003ab6 <__aeabi_ddiv+0x266>
 8003d48:	42af      	cmp	r7, r5
 8003d4a:	d900      	bls.n	8003d4e <__aeabi_ddiv+0x4fe>
 8003d4c:	e662      	b.n	8003a14 <__aeabi_ddiv+0x1c4>
 8003d4e:	4281      	cmp	r1, r0
 8003d50:	d804      	bhi.n	8003d5c <__aeabi_ddiv+0x50c>
 8003d52:	d000      	beq.n	8003d56 <__aeabi_ddiv+0x506>
 8003d54:	e65e      	b.n	8003a14 <__aeabi_ddiv+0x1c4>
 8003d56:	42ae      	cmp	r6, r5
 8003d58:	d800      	bhi.n	8003d5c <__aeabi_ddiv+0x50c>
 8003d5a:	e65b      	b.n	8003a14 <__aeabi_ddiv+0x1c4>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	425b      	negs	r3, r3
 8003d60:	469c      	mov	ip, r3
 8003d62:	9b00      	ldr	r3, [sp, #0]
 8003d64:	44e0      	add	r8, ip
 8003d66:	469c      	mov	ip, r3
 8003d68:	4465      	add	r5, ip
 8003d6a:	429d      	cmp	r5, r3
 8003d6c:	419b      	sbcs	r3, r3
 8003d6e:	425b      	negs	r3, r3
 8003d70:	191b      	adds	r3, r3, r4
 8003d72:	18c0      	adds	r0, r0, r3
 8003d74:	e64f      	b.n	8003a16 <__aeabi_ddiv+0x1c6>
 8003d76:	42b2      	cmp	r2, r6
 8003d78:	d800      	bhi.n	8003d7c <__aeabi_ddiv+0x52c>
 8003d7a:	e612      	b.n	80039a2 <__aeabi_ddiv+0x152>
 8003d7c:	1e83      	subs	r3, r0, #2
 8003d7e:	1936      	adds	r6, r6, r4
 8003d80:	e60f      	b.n	80039a2 <__aeabi_ddiv+0x152>
 8003d82:	428a      	cmp	r2, r1
 8003d84:	d800      	bhi.n	8003d88 <__aeabi_ddiv+0x538>
 8003d86:	e5fa      	b.n	800397e <__aeabi_ddiv+0x12e>
 8003d88:	1e83      	subs	r3, r0, #2
 8003d8a:	4698      	mov	r8, r3
 8003d8c:	1909      	adds	r1, r1, r4
 8003d8e:	e5f6      	b.n	800397e <__aeabi_ddiv+0x12e>
 8003d90:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <__aeabi_ddiv+0x5d4>)
 8003d92:	0028      	movs	r0, r5
 8003d94:	445b      	add	r3, fp
 8003d96:	4641      	mov	r1, r8
 8003d98:	409d      	lsls	r5, r3
 8003d9a:	4099      	lsls	r1, r3
 8003d9c:	40d0      	lsrs	r0, r2
 8003d9e:	1e6b      	subs	r3, r5, #1
 8003da0:	419d      	sbcs	r5, r3
 8003da2:	4643      	mov	r3, r8
 8003da4:	4301      	orrs	r1, r0
 8003da6:	4329      	orrs	r1, r5
 8003da8:	40d3      	lsrs	r3, r2
 8003daa:	074a      	lsls	r2, r1, #29
 8003dac:	d100      	bne.n	8003db0 <__aeabi_ddiv+0x560>
 8003dae:	e755      	b.n	8003c5c <__aeabi_ddiv+0x40c>
 8003db0:	220f      	movs	r2, #15
 8003db2:	400a      	ands	r2, r1
 8003db4:	2a04      	cmp	r2, #4
 8003db6:	d000      	beq.n	8003dba <__aeabi_ddiv+0x56a>
 8003db8:	e74a      	b.n	8003c50 <__aeabi_ddiv+0x400>
 8003dba:	e74f      	b.n	8003c5c <__aeabi_ddiv+0x40c>
 8003dbc:	0015      	movs	r5, r2
 8003dbe:	4286      	cmp	r6, r0
 8003dc0:	d000      	beq.n	8003dc4 <__aeabi_ddiv+0x574>
 8003dc2:	e66d      	b.n	8003aa0 <__aeabi_ddiv+0x250>
 8003dc4:	9a00      	ldr	r2, [sp, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d000      	beq.n	8003dcc <__aeabi_ddiv+0x57c>
 8003dca:	e669      	b.n	8003aa0 <__aeabi_ddiv+0x250>
 8003dcc:	e66a      	b.n	8003aa4 <__aeabi_ddiv+0x254>
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <__aeabi_ddiv+0x5d8>)
 8003dd0:	445b      	add	r3, fp
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	dc00      	bgt.n	8003dd8 <__aeabi_ddiv+0x588>
 8003dd6:	e713      	b.n	8003c00 <__aeabi_ddiv+0x3b0>
 8003dd8:	2501      	movs	r5, #1
 8003dda:	2100      	movs	r1, #0
 8003ddc:	44a8      	add	r8, r5
 8003dde:	e66a      	b.n	8003ab6 <__aeabi_ddiv+0x266>
 8003de0:	075d      	lsls	r5, r3, #29
 8003de2:	025b      	lsls	r3, r3, #9
 8003de4:	0b1a      	lsrs	r2, r3, #12
 8003de6:	08c9      	lsrs	r1, r1, #3
 8003de8:	2300      	movs	r3, #0
 8003dea:	430d      	orrs	r5, r1
 8003dec:	e587      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003dee:	9900      	ldr	r1, [sp, #0]
 8003df0:	3d02      	subs	r5, #2
 8003df2:	004a      	lsls	r2, r1, #1
 8003df4:	428a      	cmp	r2, r1
 8003df6:	41bf      	sbcs	r7, r7
 8003df8:	427f      	negs	r7, r7
 8003dfa:	193f      	adds	r7, r7, r4
 8003dfc:	19f6      	adds	r6, r6, r7
 8003dfe:	9200      	str	r2, [sp, #0]
 8003e00:	e7dd      	b.n	8003dbe <__aeabi_ddiv+0x56e>
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	4643      	mov	r3, r8
 8003e06:	0312      	lsls	r2, r2, #12
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	0312      	lsls	r2, r2, #12
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <__aeabi_ddiv+0x5cc>)
 8003e0e:	0b12      	lsrs	r2, r2, #12
 8003e10:	e575      	b.n	80038fe <__aeabi_ddiv+0xae>
 8003e12:	9900      	ldr	r1, [sp, #0]
 8003e14:	4299      	cmp	r1, r3
 8003e16:	d3ea      	bcc.n	8003dee <__aeabi_ddiv+0x59e>
 8003e18:	0015      	movs	r5, r2
 8003e1a:	e7d3      	b.n	8003dc4 <__aeabi_ddiv+0x574>
 8003e1c:	000007ff 	.word	0x000007ff
 8003e20:	0000043e 	.word	0x0000043e
 8003e24:	0000041e 	.word	0x0000041e
 8003e28:	000003ff 	.word	0x000003ff

08003e2c <__aeabi_dmul>:
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	4645      	mov	r5, r8
 8003e30:	46de      	mov	lr, fp
 8003e32:	4657      	mov	r7, sl
 8003e34:	464e      	mov	r6, r9
 8003e36:	b5e0      	push	{r5, r6, r7, lr}
 8003e38:	001f      	movs	r7, r3
 8003e3a:	030b      	lsls	r3, r1, #12
 8003e3c:	0b1b      	lsrs	r3, r3, #12
 8003e3e:	469b      	mov	fp, r3
 8003e40:	004d      	lsls	r5, r1, #1
 8003e42:	0fcb      	lsrs	r3, r1, #31
 8003e44:	0004      	movs	r4, r0
 8003e46:	4691      	mov	r9, r2
 8003e48:	4698      	mov	r8, r3
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	0d6d      	lsrs	r5, r5, #21
 8003e4e:	d100      	bne.n	8003e52 <__aeabi_dmul+0x26>
 8003e50:	e1cd      	b.n	80041ee <__aeabi_dmul+0x3c2>
 8003e52:	4bce      	ldr	r3, [pc, #824]	; (800418c <__aeabi_dmul+0x360>)
 8003e54:	429d      	cmp	r5, r3
 8003e56:	d100      	bne.n	8003e5a <__aeabi_dmul+0x2e>
 8003e58:	e1e9      	b.n	800422e <__aeabi_dmul+0x402>
 8003e5a:	465a      	mov	r2, fp
 8003e5c:	0f43      	lsrs	r3, r0, #29
 8003e5e:	00d2      	lsls	r2, r2, #3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0412      	lsls	r2, r2, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	00c3      	lsls	r3, r0, #3
 8003e6a:	469a      	mov	sl, r3
 8003e6c:	4bc8      	ldr	r3, [pc, #800]	; (8004190 <__aeabi_dmul+0x364>)
 8003e6e:	4693      	mov	fp, r2
 8003e70:	469c      	mov	ip, r3
 8003e72:	2300      	movs	r3, #0
 8003e74:	2600      	movs	r6, #0
 8003e76:	4465      	add	r5, ip
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	033c      	lsls	r4, r7, #12
 8003e7c:	007b      	lsls	r3, r7, #1
 8003e7e:	4648      	mov	r0, r9
 8003e80:	0b24      	lsrs	r4, r4, #12
 8003e82:	0d5b      	lsrs	r3, r3, #21
 8003e84:	0fff      	lsrs	r7, r7, #31
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d100      	bne.n	8003e8c <__aeabi_dmul+0x60>
 8003e8a:	e189      	b.n	80041a0 <__aeabi_dmul+0x374>
 8003e8c:	4abf      	ldr	r2, [pc, #764]	; (800418c <__aeabi_dmul+0x360>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d019      	beq.n	8003ec6 <__aeabi_dmul+0x9a>
 8003e92:	0f42      	lsrs	r2, r0, #29
 8003e94:	00e4      	lsls	r4, r4, #3
 8003e96:	4322      	orrs	r2, r4
 8003e98:	2480      	movs	r4, #128	; 0x80
 8003e9a:	0424      	lsls	r4, r4, #16
 8003e9c:	4314      	orrs	r4, r2
 8003e9e:	4abc      	ldr	r2, [pc, #752]	; (8004190 <__aeabi_dmul+0x364>)
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4694      	mov	ip, r2
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	4463      	add	r3, ip
 8003ea8:	195b      	adds	r3, r3, r5
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	9b01      	ldr	r3, [sp, #4]
 8003eae:	407a      	eors	r2, r7
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	00c0      	lsls	r0, r0, #3
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	2e0a      	cmp	r6, #10
 8003eba:	dd1c      	ble.n	8003ef6 <__aeabi_dmul+0xca>
 8003ebc:	003a      	movs	r2, r7
 8003ebe:	2e0b      	cmp	r6, #11
 8003ec0:	d05e      	beq.n	8003f80 <__aeabi_dmul+0x154>
 8003ec2:	4647      	mov	r7, r8
 8003ec4:	e056      	b.n	8003f74 <__aeabi_dmul+0x148>
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	4bb0      	ldr	r3, [pc, #704]	; (800418c <__aeabi_dmul+0x360>)
 8003eca:	4321      	orrs	r1, r4
 8003ecc:	18eb      	adds	r3, r5, r3
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	d12a      	bne.n	8003f2a <__aeabi_dmul+0xfe>
 8003ed4:	2080      	movs	r0, #128	; 0x80
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	0100      	lsls	r0, r0, #4
 8003eda:	002b      	movs	r3, r5
 8003edc:	4684      	mov	ip, r0
 8003ede:	4316      	orrs	r6, r2
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	4463      	add	r3, ip
 8003ee4:	407a      	eors	r2, r7
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	9302      	str	r3, [sp, #8]
 8003eea:	2e0a      	cmp	r6, #10
 8003eec:	dd00      	ble.n	8003ef0 <__aeabi_dmul+0xc4>
 8003eee:	e231      	b.n	8004354 <__aeabi_dmul+0x528>
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	2400      	movs	r4, #0
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	2e02      	cmp	r6, #2
 8003ef8:	dc26      	bgt.n	8003f48 <__aeabi_dmul+0x11c>
 8003efa:	3e01      	subs	r6, #1
 8003efc:	2e01      	cmp	r6, #1
 8003efe:	d852      	bhi.n	8003fa6 <__aeabi_dmul+0x17a>
 8003f00:	2902      	cmp	r1, #2
 8003f02:	d04c      	beq.n	8003f9e <__aeabi_dmul+0x172>
 8003f04:	2901      	cmp	r1, #1
 8003f06:	d000      	beq.n	8003f0a <__aeabi_dmul+0xde>
 8003f08:	e118      	b.n	800413c <__aeabi_dmul+0x310>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2400      	movs	r4, #0
 8003f0e:	2500      	movs	r5, #0
 8003f10:	051b      	lsls	r3, r3, #20
 8003f12:	4323      	orrs	r3, r4
 8003f14:	07d2      	lsls	r2, r2, #31
 8003f16:	4313      	orrs	r3, r2
 8003f18:	0028      	movs	r0, r5
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	b007      	add	sp, #28
 8003f1e:	bcf0      	pop	{r4, r5, r6, r7}
 8003f20:	46bb      	mov	fp, r7
 8003f22:	46b2      	mov	sl, r6
 8003f24:	46a9      	mov	r9, r5
 8003f26:	46a0      	mov	r8, r4
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	0109      	lsls	r1, r1, #4
 8003f30:	002b      	movs	r3, r5
 8003f32:	468c      	mov	ip, r1
 8003f34:	4316      	orrs	r6, r2
 8003f36:	4642      	mov	r2, r8
 8003f38:	4463      	add	r3, ip
 8003f3a:	407a      	eors	r2, r7
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	2e0a      	cmp	r6, #10
 8003f42:	dd00      	ble.n	8003f46 <__aeabi_dmul+0x11a>
 8003f44:	e228      	b.n	8004398 <__aeabi_dmul+0x56c>
 8003f46:	2103      	movs	r1, #3
 8003f48:	2501      	movs	r5, #1
 8003f4a:	40b5      	lsls	r5, r6
 8003f4c:	46ac      	mov	ip, r5
 8003f4e:	26a6      	movs	r6, #166	; 0xa6
 8003f50:	4663      	mov	r3, ip
 8003f52:	00f6      	lsls	r6, r6, #3
 8003f54:	4035      	ands	r5, r6
 8003f56:	4233      	tst	r3, r6
 8003f58:	d10b      	bne.n	8003f72 <__aeabi_dmul+0x146>
 8003f5a:	2690      	movs	r6, #144	; 0x90
 8003f5c:	00b6      	lsls	r6, r6, #2
 8003f5e:	4233      	tst	r3, r6
 8003f60:	d118      	bne.n	8003f94 <__aeabi_dmul+0x168>
 8003f62:	3eb9      	subs	r6, #185	; 0xb9
 8003f64:	3eff      	subs	r6, #255	; 0xff
 8003f66:	421e      	tst	r6, r3
 8003f68:	d01d      	beq.n	8003fa6 <__aeabi_dmul+0x17a>
 8003f6a:	46a3      	mov	fp, r4
 8003f6c:	4682      	mov	sl, r0
 8003f6e:	9100      	str	r1, [sp, #0]
 8003f70:	e000      	b.n	8003f74 <__aeabi_dmul+0x148>
 8003f72:	0017      	movs	r7, r2
 8003f74:	9900      	ldr	r1, [sp, #0]
 8003f76:	003a      	movs	r2, r7
 8003f78:	2902      	cmp	r1, #2
 8003f7a:	d010      	beq.n	8003f9e <__aeabi_dmul+0x172>
 8003f7c:	465c      	mov	r4, fp
 8003f7e:	4650      	mov	r0, sl
 8003f80:	2903      	cmp	r1, #3
 8003f82:	d1bf      	bne.n	8003f04 <__aeabi_dmul+0xd8>
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	031b      	lsls	r3, r3, #12
 8003f88:	431c      	orrs	r4, r3
 8003f8a:	0324      	lsls	r4, r4, #12
 8003f8c:	0005      	movs	r5, r0
 8003f8e:	4b7f      	ldr	r3, [pc, #508]	; (800418c <__aeabi_dmul+0x360>)
 8003f90:	0b24      	lsrs	r4, r4, #12
 8003f92:	e7bd      	b.n	8003f10 <__aeabi_dmul+0xe4>
 8003f94:	2480      	movs	r4, #128	; 0x80
 8003f96:	2200      	movs	r2, #0
 8003f98:	4b7c      	ldr	r3, [pc, #496]	; (800418c <__aeabi_dmul+0x360>)
 8003f9a:	0324      	lsls	r4, r4, #12
 8003f9c:	e7b8      	b.n	8003f10 <__aeabi_dmul+0xe4>
 8003f9e:	2400      	movs	r4, #0
 8003fa0:	2500      	movs	r5, #0
 8003fa2:	4b7a      	ldr	r3, [pc, #488]	; (800418c <__aeabi_dmul+0x360>)
 8003fa4:	e7b4      	b.n	8003f10 <__aeabi_dmul+0xe4>
 8003fa6:	4653      	mov	r3, sl
 8003fa8:	041e      	lsls	r6, r3, #16
 8003faa:	0c36      	lsrs	r6, r6, #16
 8003fac:	0c1f      	lsrs	r7, r3, #16
 8003fae:	0033      	movs	r3, r6
 8003fb0:	0c01      	lsrs	r1, r0, #16
 8003fb2:	0400      	lsls	r0, r0, #16
 8003fb4:	0c00      	lsrs	r0, r0, #16
 8003fb6:	4343      	muls	r3, r0
 8003fb8:	4698      	mov	r8, r3
 8003fba:	0003      	movs	r3, r0
 8003fbc:	437b      	muls	r3, r7
 8003fbe:	4699      	mov	r9, r3
 8003fc0:	0033      	movs	r3, r6
 8003fc2:	434b      	muls	r3, r1
 8003fc4:	469c      	mov	ip, r3
 8003fc6:	4643      	mov	r3, r8
 8003fc8:	000d      	movs	r5, r1
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	469a      	mov	sl, r3
 8003fce:	437d      	muls	r5, r7
 8003fd0:	44cc      	add	ip, r9
 8003fd2:	44d4      	add	ip, sl
 8003fd4:	9500      	str	r5, [sp, #0]
 8003fd6:	45e1      	cmp	r9, ip
 8003fd8:	d904      	bls.n	8003fe4 <__aeabi_dmul+0x1b8>
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	025b      	lsls	r3, r3, #9
 8003fde:	4699      	mov	r9, r3
 8003fe0:	444d      	add	r5, r9
 8003fe2:	9500      	str	r5, [sp, #0]
 8003fe4:	4663      	mov	r3, ip
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	001d      	movs	r5, r3
 8003fea:	4663      	mov	r3, ip
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	469c      	mov	ip, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	4698      	mov	r8, r3
 8003ff8:	4663      	mov	r3, ip
 8003ffa:	4443      	add	r3, r8
 8003ffc:	9303      	str	r3, [sp, #12]
 8003ffe:	0c23      	lsrs	r3, r4, #16
 8004000:	4698      	mov	r8, r3
 8004002:	0033      	movs	r3, r6
 8004004:	0424      	lsls	r4, r4, #16
 8004006:	0c24      	lsrs	r4, r4, #16
 8004008:	4363      	muls	r3, r4
 800400a:	469c      	mov	ip, r3
 800400c:	0023      	movs	r3, r4
 800400e:	437b      	muls	r3, r7
 8004010:	4699      	mov	r9, r3
 8004012:	4643      	mov	r3, r8
 8004014:	435e      	muls	r6, r3
 8004016:	435f      	muls	r7, r3
 8004018:	444e      	add	r6, r9
 800401a:	4663      	mov	r3, ip
 800401c:	46b2      	mov	sl, r6
 800401e:	0c1e      	lsrs	r6, r3, #16
 8004020:	4456      	add	r6, sl
 8004022:	45b1      	cmp	r9, r6
 8004024:	d903      	bls.n	800402e <__aeabi_dmul+0x202>
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	025b      	lsls	r3, r3, #9
 800402a:	4699      	mov	r9, r3
 800402c:	444f      	add	r7, r9
 800402e:	0c33      	lsrs	r3, r6, #16
 8004030:	4699      	mov	r9, r3
 8004032:	003b      	movs	r3, r7
 8004034:	444b      	add	r3, r9
 8004036:	9305      	str	r3, [sp, #20]
 8004038:	4663      	mov	r3, ip
 800403a:	46ac      	mov	ip, r5
 800403c:	041f      	lsls	r7, r3, #16
 800403e:	0c3f      	lsrs	r7, r7, #16
 8004040:	0436      	lsls	r6, r6, #16
 8004042:	19f6      	adds	r6, r6, r7
 8004044:	44b4      	add	ip, r6
 8004046:	4663      	mov	r3, ip
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	465b      	mov	r3, fp
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	469c      	mov	ip, r3
 8004050:	465b      	mov	r3, fp
 8004052:	041f      	lsls	r7, r3, #16
 8004054:	0c3f      	lsrs	r7, r7, #16
 8004056:	003b      	movs	r3, r7
 8004058:	4343      	muls	r3, r0
 800405a:	4699      	mov	r9, r3
 800405c:	4663      	mov	r3, ip
 800405e:	4343      	muls	r3, r0
 8004060:	469a      	mov	sl, r3
 8004062:	464b      	mov	r3, r9
 8004064:	4660      	mov	r0, ip
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	469b      	mov	fp, r3
 800406a:	4348      	muls	r0, r1
 800406c:	4379      	muls	r1, r7
 800406e:	4451      	add	r1, sl
 8004070:	4459      	add	r1, fp
 8004072:	458a      	cmp	sl, r1
 8004074:	d903      	bls.n	800407e <__aeabi_dmul+0x252>
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	025b      	lsls	r3, r3, #9
 800407a:	469a      	mov	sl, r3
 800407c:	4450      	add	r0, sl
 800407e:	0c0b      	lsrs	r3, r1, #16
 8004080:	469a      	mov	sl, r3
 8004082:	464b      	mov	r3, r9
 8004084:	041b      	lsls	r3, r3, #16
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	4699      	mov	r9, r3
 800408a:	003b      	movs	r3, r7
 800408c:	4363      	muls	r3, r4
 800408e:	0409      	lsls	r1, r1, #16
 8004090:	4645      	mov	r5, r8
 8004092:	4449      	add	r1, r9
 8004094:	4699      	mov	r9, r3
 8004096:	4663      	mov	r3, ip
 8004098:	435c      	muls	r4, r3
 800409a:	436b      	muls	r3, r5
 800409c:	469c      	mov	ip, r3
 800409e:	464b      	mov	r3, r9
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	4698      	mov	r8, r3
 80040a4:	436f      	muls	r7, r5
 80040a6:	193f      	adds	r7, r7, r4
 80040a8:	4447      	add	r7, r8
 80040aa:	4450      	add	r0, sl
 80040ac:	42bc      	cmp	r4, r7
 80040ae:	d903      	bls.n	80040b8 <__aeabi_dmul+0x28c>
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	025b      	lsls	r3, r3, #9
 80040b4:	4698      	mov	r8, r3
 80040b6:	44c4      	add	ip, r8
 80040b8:	9b04      	ldr	r3, [sp, #16]
 80040ba:	9d00      	ldr	r5, [sp, #0]
 80040bc:	4698      	mov	r8, r3
 80040be:	4445      	add	r5, r8
 80040c0:	42b5      	cmp	r5, r6
 80040c2:	41b6      	sbcs	r6, r6
 80040c4:	4273      	negs	r3, r6
 80040c6:	4698      	mov	r8, r3
 80040c8:	464b      	mov	r3, r9
 80040ca:	041e      	lsls	r6, r3, #16
 80040cc:	9b05      	ldr	r3, [sp, #20]
 80040ce:	043c      	lsls	r4, r7, #16
 80040d0:	4699      	mov	r9, r3
 80040d2:	0c36      	lsrs	r6, r6, #16
 80040d4:	19a4      	adds	r4, r4, r6
 80040d6:	444c      	add	r4, r9
 80040d8:	46a1      	mov	r9, r4
 80040da:	4683      	mov	fp, r0
 80040dc:	186e      	adds	r6, r5, r1
 80040de:	44c1      	add	r9, r8
 80040e0:	428e      	cmp	r6, r1
 80040e2:	4189      	sbcs	r1, r1
 80040e4:	44cb      	add	fp, r9
 80040e6:	465d      	mov	r5, fp
 80040e8:	4249      	negs	r1, r1
 80040ea:	186d      	adds	r5, r5, r1
 80040ec:	429c      	cmp	r4, r3
 80040ee:	41a4      	sbcs	r4, r4
 80040f0:	45c1      	cmp	r9, r8
 80040f2:	419b      	sbcs	r3, r3
 80040f4:	4583      	cmp	fp, r0
 80040f6:	4180      	sbcs	r0, r0
 80040f8:	428d      	cmp	r5, r1
 80040fa:	4189      	sbcs	r1, r1
 80040fc:	425b      	negs	r3, r3
 80040fe:	4264      	negs	r4, r4
 8004100:	431c      	orrs	r4, r3
 8004102:	4240      	negs	r0, r0
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	4249      	negs	r1, r1
 8004108:	4301      	orrs	r1, r0
 800410a:	0270      	lsls	r0, r6, #9
 800410c:	0c3f      	lsrs	r7, r7, #16
 800410e:	4318      	orrs	r0, r3
 8004110:	19e4      	adds	r4, r4, r7
 8004112:	1e47      	subs	r7, r0, #1
 8004114:	41b8      	sbcs	r0, r7
 8004116:	1864      	adds	r4, r4, r1
 8004118:	4464      	add	r4, ip
 800411a:	0df6      	lsrs	r6, r6, #23
 800411c:	0261      	lsls	r1, r4, #9
 800411e:	4330      	orrs	r0, r6
 8004120:	0dec      	lsrs	r4, r5, #23
 8004122:	026e      	lsls	r6, r5, #9
 8004124:	430c      	orrs	r4, r1
 8004126:	4330      	orrs	r0, r6
 8004128:	01c9      	lsls	r1, r1, #7
 800412a:	d400      	bmi.n	800412e <__aeabi_dmul+0x302>
 800412c:	e0f1      	b.n	8004312 <__aeabi_dmul+0x4e6>
 800412e:	2101      	movs	r1, #1
 8004130:	0843      	lsrs	r3, r0, #1
 8004132:	4001      	ands	r1, r0
 8004134:	430b      	orrs	r3, r1
 8004136:	07e0      	lsls	r0, r4, #31
 8004138:	4318      	orrs	r0, r3
 800413a:	0864      	lsrs	r4, r4, #1
 800413c:	4915      	ldr	r1, [pc, #84]	; (8004194 <__aeabi_dmul+0x368>)
 800413e:	9b02      	ldr	r3, [sp, #8]
 8004140:	468c      	mov	ip, r1
 8004142:	4463      	add	r3, ip
 8004144:	2b00      	cmp	r3, #0
 8004146:	dc00      	bgt.n	800414a <__aeabi_dmul+0x31e>
 8004148:	e097      	b.n	800427a <__aeabi_dmul+0x44e>
 800414a:	0741      	lsls	r1, r0, #29
 800414c:	d009      	beq.n	8004162 <__aeabi_dmul+0x336>
 800414e:	210f      	movs	r1, #15
 8004150:	4001      	ands	r1, r0
 8004152:	2904      	cmp	r1, #4
 8004154:	d005      	beq.n	8004162 <__aeabi_dmul+0x336>
 8004156:	1d01      	adds	r1, r0, #4
 8004158:	4281      	cmp	r1, r0
 800415a:	4180      	sbcs	r0, r0
 800415c:	4240      	negs	r0, r0
 800415e:	1824      	adds	r4, r4, r0
 8004160:	0008      	movs	r0, r1
 8004162:	01e1      	lsls	r1, r4, #7
 8004164:	d506      	bpl.n	8004174 <__aeabi_dmul+0x348>
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	00c9      	lsls	r1, r1, #3
 800416a:	468c      	mov	ip, r1
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <__aeabi_dmul+0x36c>)
 800416e:	401c      	ands	r4, r3
 8004170:	9b02      	ldr	r3, [sp, #8]
 8004172:	4463      	add	r3, ip
 8004174:	4909      	ldr	r1, [pc, #36]	; (800419c <__aeabi_dmul+0x370>)
 8004176:	428b      	cmp	r3, r1
 8004178:	dd00      	ble.n	800417c <__aeabi_dmul+0x350>
 800417a:	e710      	b.n	8003f9e <__aeabi_dmul+0x172>
 800417c:	0761      	lsls	r1, r4, #29
 800417e:	08c5      	lsrs	r5, r0, #3
 8004180:	0264      	lsls	r4, r4, #9
 8004182:	055b      	lsls	r3, r3, #21
 8004184:	430d      	orrs	r5, r1
 8004186:	0b24      	lsrs	r4, r4, #12
 8004188:	0d5b      	lsrs	r3, r3, #21
 800418a:	e6c1      	b.n	8003f10 <__aeabi_dmul+0xe4>
 800418c:	000007ff 	.word	0x000007ff
 8004190:	fffffc01 	.word	0xfffffc01
 8004194:	000003ff 	.word	0x000003ff
 8004198:	feffffff 	.word	0xfeffffff
 800419c:	000007fe 	.word	0x000007fe
 80041a0:	464b      	mov	r3, r9
 80041a2:	4323      	orrs	r3, r4
 80041a4:	d059      	beq.n	800425a <__aeabi_dmul+0x42e>
 80041a6:	2c00      	cmp	r4, #0
 80041a8:	d100      	bne.n	80041ac <__aeabi_dmul+0x380>
 80041aa:	e0a3      	b.n	80042f4 <__aeabi_dmul+0x4c8>
 80041ac:	0020      	movs	r0, r4
 80041ae:	f000 fd75 	bl	8004c9c <__clzsi2>
 80041b2:	0001      	movs	r1, r0
 80041b4:	0003      	movs	r3, r0
 80041b6:	390b      	subs	r1, #11
 80041b8:	221d      	movs	r2, #29
 80041ba:	1a52      	subs	r2, r2, r1
 80041bc:	4649      	mov	r1, r9
 80041be:	0018      	movs	r0, r3
 80041c0:	40d1      	lsrs	r1, r2
 80041c2:	464a      	mov	r2, r9
 80041c4:	3808      	subs	r0, #8
 80041c6:	4082      	lsls	r2, r0
 80041c8:	4084      	lsls	r4, r0
 80041ca:	0010      	movs	r0, r2
 80041cc:	430c      	orrs	r4, r1
 80041ce:	4a74      	ldr	r2, [pc, #464]	; (80043a0 <__aeabi_dmul+0x574>)
 80041d0:	1aeb      	subs	r3, r5, r3
 80041d2:	4694      	mov	ip, r2
 80041d4:	4642      	mov	r2, r8
 80041d6:	4463      	add	r3, ip
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	9b01      	ldr	r3, [sp, #4]
 80041dc:	407a      	eors	r2, r7
 80041de:	3301      	adds	r3, #1
 80041e0:	2100      	movs	r1, #0
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	2e0a      	cmp	r6, #10
 80041e8:	dd00      	ble.n	80041ec <__aeabi_dmul+0x3c0>
 80041ea:	e667      	b.n	8003ebc <__aeabi_dmul+0x90>
 80041ec:	e683      	b.n	8003ef6 <__aeabi_dmul+0xca>
 80041ee:	465b      	mov	r3, fp
 80041f0:	4303      	orrs	r3, r0
 80041f2:	469a      	mov	sl, r3
 80041f4:	d02a      	beq.n	800424c <__aeabi_dmul+0x420>
 80041f6:	465b      	mov	r3, fp
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d06d      	beq.n	80042d8 <__aeabi_dmul+0x4ac>
 80041fc:	4658      	mov	r0, fp
 80041fe:	f000 fd4d 	bl	8004c9c <__clzsi2>
 8004202:	0001      	movs	r1, r0
 8004204:	0003      	movs	r3, r0
 8004206:	390b      	subs	r1, #11
 8004208:	221d      	movs	r2, #29
 800420a:	1a52      	subs	r2, r2, r1
 800420c:	0021      	movs	r1, r4
 800420e:	0018      	movs	r0, r3
 8004210:	465d      	mov	r5, fp
 8004212:	40d1      	lsrs	r1, r2
 8004214:	3808      	subs	r0, #8
 8004216:	4085      	lsls	r5, r0
 8004218:	000a      	movs	r2, r1
 800421a:	4084      	lsls	r4, r0
 800421c:	432a      	orrs	r2, r5
 800421e:	4693      	mov	fp, r2
 8004220:	46a2      	mov	sl, r4
 8004222:	4d5f      	ldr	r5, [pc, #380]	; (80043a0 <__aeabi_dmul+0x574>)
 8004224:	2600      	movs	r6, #0
 8004226:	1aed      	subs	r5, r5, r3
 8004228:	2300      	movs	r3, #0
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	e625      	b.n	8003e7a <__aeabi_dmul+0x4e>
 800422e:	465b      	mov	r3, fp
 8004230:	4303      	orrs	r3, r0
 8004232:	469a      	mov	sl, r3
 8004234:	d105      	bne.n	8004242 <__aeabi_dmul+0x416>
 8004236:	2300      	movs	r3, #0
 8004238:	469b      	mov	fp, r3
 800423a:	3302      	adds	r3, #2
 800423c:	2608      	movs	r6, #8
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	e61b      	b.n	8003e7a <__aeabi_dmul+0x4e>
 8004242:	2303      	movs	r3, #3
 8004244:	4682      	mov	sl, r0
 8004246:	260c      	movs	r6, #12
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	e616      	b.n	8003e7a <__aeabi_dmul+0x4e>
 800424c:	2300      	movs	r3, #0
 800424e:	469b      	mov	fp, r3
 8004250:	3301      	adds	r3, #1
 8004252:	2604      	movs	r6, #4
 8004254:	2500      	movs	r5, #0
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	e60f      	b.n	8003e7a <__aeabi_dmul+0x4e>
 800425a:	4642      	mov	r2, r8
 800425c:	3301      	adds	r3, #1
 800425e:	9501      	str	r5, [sp, #4]
 8004260:	431e      	orrs	r6, r3
 8004262:	9b01      	ldr	r3, [sp, #4]
 8004264:	407a      	eors	r2, r7
 8004266:	3301      	adds	r3, #1
 8004268:	2400      	movs	r4, #0
 800426a:	2000      	movs	r0, #0
 800426c:	2101      	movs	r1, #1
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	9302      	str	r3, [sp, #8]
 8004272:	2e0a      	cmp	r6, #10
 8004274:	dd00      	ble.n	8004278 <__aeabi_dmul+0x44c>
 8004276:	e621      	b.n	8003ebc <__aeabi_dmul+0x90>
 8004278:	e63d      	b.n	8003ef6 <__aeabi_dmul+0xca>
 800427a:	2101      	movs	r1, #1
 800427c:	1ac9      	subs	r1, r1, r3
 800427e:	2938      	cmp	r1, #56	; 0x38
 8004280:	dd00      	ble.n	8004284 <__aeabi_dmul+0x458>
 8004282:	e642      	b.n	8003f0a <__aeabi_dmul+0xde>
 8004284:	291f      	cmp	r1, #31
 8004286:	dd47      	ble.n	8004318 <__aeabi_dmul+0x4ec>
 8004288:	261f      	movs	r6, #31
 800428a:	0025      	movs	r5, r4
 800428c:	4276      	negs	r6, r6
 800428e:	1af3      	subs	r3, r6, r3
 8004290:	40dd      	lsrs	r5, r3
 8004292:	002b      	movs	r3, r5
 8004294:	2920      	cmp	r1, #32
 8004296:	d005      	beq.n	80042a4 <__aeabi_dmul+0x478>
 8004298:	4942      	ldr	r1, [pc, #264]	; (80043a4 <__aeabi_dmul+0x578>)
 800429a:	9d02      	ldr	r5, [sp, #8]
 800429c:	468c      	mov	ip, r1
 800429e:	4465      	add	r5, ip
 80042a0:	40ac      	lsls	r4, r5
 80042a2:	4320      	orrs	r0, r4
 80042a4:	1e41      	subs	r1, r0, #1
 80042a6:	4188      	sbcs	r0, r1
 80042a8:	4318      	orrs	r0, r3
 80042aa:	2307      	movs	r3, #7
 80042ac:	001d      	movs	r5, r3
 80042ae:	2400      	movs	r4, #0
 80042b0:	4005      	ands	r5, r0
 80042b2:	4203      	tst	r3, r0
 80042b4:	d04a      	beq.n	800434c <__aeabi_dmul+0x520>
 80042b6:	230f      	movs	r3, #15
 80042b8:	2400      	movs	r4, #0
 80042ba:	4003      	ands	r3, r0
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d042      	beq.n	8004346 <__aeabi_dmul+0x51a>
 80042c0:	1d03      	adds	r3, r0, #4
 80042c2:	4283      	cmp	r3, r0
 80042c4:	4180      	sbcs	r0, r0
 80042c6:	4240      	negs	r0, r0
 80042c8:	1824      	adds	r4, r4, r0
 80042ca:	0018      	movs	r0, r3
 80042cc:	0223      	lsls	r3, r4, #8
 80042ce:	d53a      	bpl.n	8004346 <__aeabi_dmul+0x51a>
 80042d0:	2301      	movs	r3, #1
 80042d2:	2400      	movs	r4, #0
 80042d4:	2500      	movs	r5, #0
 80042d6:	e61b      	b.n	8003f10 <__aeabi_dmul+0xe4>
 80042d8:	f000 fce0 	bl	8004c9c <__clzsi2>
 80042dc:	0001      	movs	r1, r0
 80042de:	0003      	movs	r3, r0
 80042e0:	3115      	adds	r1, #21
 80042e2:	3320      	adds	r3, #32
 80042e4:	291c      	cmp	r1, #28
 80042e6:	dd8f      	ble.n	8004208 <__aeabi_dmul+0x3dc>
 80042e8:	3808      	subs	r0, #8
 80042ea:	2200      	movs	r2, #0
 80042ec:	4084      	lsls	r4, r0
 80042ee:	4692      	mov	sl, r2
 80042f0:	46a3      	mov	fp, r4
 80042f2:	e796      	b.n	8004222 <__aeabi_dmul+0x3f6>
 80042f4:	f000 fcd2 	bl	8004c9c <__clzsi2>
 80042f8:	0001      	movs	r1, r0
 80042fa:	0003      	movs	r3, r0
 80042fc:	3115      	adds	r1, #21
 80042fe:	3320      	adds	r3, #32
 8004300:	291c      	cmp	r1, #28
 8004302:	dc00      	bgt.n	8004306 <__aeabi_dmul+0x4da>
 8004304:	e758      	b.n	80041b8 <__aeabi_dmul+0x38c>
 8004306:	0002      	movs	r2, r0
 8004308:	464c      	mov	r4, r9
 800430a:	3a08      	subs	r2, #8
 800430c:	2000      	movs	r0, #0
 800430e:	4094      	lsls	r4, r2
 8004310:	e75d      	b.n	80041ce <__aeabi_dmul+0x3a2>
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	9302      	str	r3, [sp, #8]
 8004316:	e711      	b.n	800413c <__aeabi_dmul+0x310>
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <__aeabi_dmul+0x57c>)
 800431a:	0026      	movs	r6, r4
 800431c:	469c      	mov	ip, r3
 800431e:	0003      	movs	r3, r0
 8004320:	9d02      	ldr	r5, [sp, #8]
 8004322:	40cb      	lsrs	r3, r1
 8004324:	4465      	add	r5, ip
 8004326:	40ae      	lsls	r6, r5
 8004328:	431e      	orrs	r6, r3
 800432a:	0003      	movs	r3, r0
 800432c:	40ab      	lsls	r3, r5
 800432e:	1e58      	subs	r0, r3, #1
 8004330:	4183      	sbcs	r3, r0
 8004332:	0030      	movs	r0, r6
 8004334:	4318      	orrs	r0, r3
 8004336:	40cc      	lsrs	r4, r1
 8004338:	0743      	lsls	r3, r0, #29
 800433a:	d0c7      	beq.n	80042cc <__aeabi_dmul+0x4a0>
 800433c:	230f      	movs	r3, #15
 800433e:	4003      	ands	r3, r0
 8004340:	2b04      	cmp	r3, #4
 8004342:	d1bd      	bne.n	80042c0 <__aeabi_dmul+0x494>
 8004344:	e7c2      	b.n	80042cc <__aeabi_dmul+0x4a0>
 8004346:	0765      	lsls	r5, r4, #29
 8004348:	0264      	lsls	r4, r4, #9
 800434a:	0b24      	lsrs	r4, r4, #12
 800434c:	08c0      	lsrs	r0, r0, #3
 800434e:	2300      	movs	r3, #0
 8004350:	4305      	orrs	r5, r0
 8004352:	e5dd      	b.n	8003f10 <__aeabi_dmul+0xe4>
 8004354:	2500      	movs	r5, #0
 8004356:	2302      	movs	r3, #2
 8004358:	2e0f      	cmp	r6, #15
 800435a:	d10c      	bne.n	8004376 <__aeabi_dmul+0x54a>
 800435c:	2480      	movs	r4, #128	; 0x80
 800435e:	465b      	mov	r3, fp
 8004360:	0324      	lsls	r4, r4, #12
 8004362:	4223      	tst	r3, r4
 8004364:	d00e      	beq.n	8004384 <__aeabi_dmul+0x558>
 8004366:	4221      	tst	r1, r4
 8004368:	d10c      	bne.n	8004384 <__aeabi_dmul+0x558>
 800436a:	430c      	orrs	r4, r1
 800436c:	0324      	lsls	r4, r4, #12
 800436e:	003a      	movs	r2, r7
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <__aeabi_dmul+0x580>)
 8004372:	0b24      	lsrs	r4, r4, #12
 8004374:	e5cc      	b.n	8003f10 <__aeabi_dmul+0xe4>
 8004376:	2e0b      	cmp	r6, #11
 8004378:	d000      	beq.n	800437c <__aeabi_dmul+0x550>
 800437a:	e5a2      	b.n	8003ec2 <__aeabi_dmul+0x96>
 800437c:	468b      	mov	fp, r1
 800437e:	46aa      	mov	sl, r5
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	e5f7      	b.n	8003f74 <__aeabi_dmul+0x148>
 8004384:	2480      	movs	r4, #128	; 0x80
 8004386:	465b      	mov	r3, fp
 8004388:	0324      	lsls	r4, r4, #12
 800438a:	431c      	orrs	r4, r3
 800438c:	0324      	lsls	r4, r4, #12
 800438e:	4642      	mov	r2, r8
 8004390:	4655      	mov	r5, sl
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <__aeabi_dmul+0x580>)
 8004394:	0b24      	lsrs	r4, r4, #12
 8004396:	e5bb      	b.n	8003f10 <__aeabi_dmul+0xe4>
 8004398:	464d      	mov	r5, r9
 800439a:	0021      	movs	r1, r4
 800439c:	2303      	movs	r3, #3
 800439e:	e7db      	b.n	8004358 <__aeabi_dmul+0x52c>
 80043a0:	fffffc0d 	.word	0xfffffc0d
 80043a4:	0000043e 	.word	0x0000043e
 80043a8:	0000041e 	.word	0x0000041e
 80043ac:	000007ff 	.word	0x000007ff

080043b0 <__aeabi_dsub>:
 80043b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b2:	4657      	mov	r7, sl
 80043b4:	464e      	mov	r6, r9
 80043b6:	4645      	mov	r5, r8
 80043b8:	46de      	mov	lr, fp
 80043ba:	b5e0      	push	{r5, r6, r7, lr}
 80043bc:	000d      	movs	r5, r1
 80043be:	0004      	movs	r4, r0
 80043c0:	0019      	movs	r1, r3
 80043c2:	0010      	movs	r0, r2
 80043c4:	032b      	lsls	r3, r5, #12
 80043c6:	0a5b      	lsrs	r3, r3, #9
 80043c8:	0f62      	lsrs	r2, r4, #29
 80043ca:	431a      	orrs	r2, r3
 80043cc:	00e3      	lsls	r3, r4, #3
 80043ce:	030c      	lsls	r4, r1, #12
 80043d0:	0a64      	lsrs	r4, r4, #9
 80043d2:	0f47      	lsrs	r7, r0, #29
 80043d4:	4327      	orrs	r7, r4
 80043d6:	4cd0      	ldr	r4, [pc, #832]	; (8004718 <__aeabi_dsub+0x368>)
 80043d8:	006e      	lsls	r6, r5, #1
 80043da:	4691      	mov	r9, r2
 80043dc:	b083      	sub	sp, #12
 80043de:	004a      	lsls	r2, r1, #1
 80043e0:	00c0      	lsls	r0, r0, #3
 80043e2:	4698      	mov	r8, r3
 80043e4:	46a2      	mov	sl, r4
 80043e6:	0d76      	lsrs	r6, r6, #21
 80043e8:	0fed      	lsrs	r5, r5, #31
 80043ea:	0d52      	lsrs	r2, r2, #21
 80043ec:	0fc9      	lsrs	r1, r1, #31
 80043ee:	9001      	str	r0, [sp, #4]
 80043f0:	42a2      	cmp	r2, r4
 80043f2:	d100      	bne.n	80043f6 <__aeabi_dsub+0x46>
 80043f4:	e0b9      	b.n	800456a <__aeabi_dsub+0x1ba>
 80043f6:	2401      	movs	r4, #1
 80043f8:	4061      	eors	r1, r4
 80043fa:	468b      	mov	fp, r1
 80043fc:	428d      	cmp	r5, r1
 80043fe:	d100      	bne.n	8004402 <__aeabi_dsub+0x52>
 8004400:	e08d      	b.n	800451e <__aeabi_dsub+0x16e>
 8004402:	1ab4      	subs	r4, r6, r2
 8004404:	46a4      	mov	ip, r4
 8004406:	2c00      	cmp	r4, #0
 8004408:	dc00      	bgt.n	800440c <__aeabi_dsub+0x5c>
 800440a:	e0b7      	b.n	800457c <__aeabi_dsub+0x1cc>
 800440c:	2a00      	cmp	r2, #0
 800440e:	d100      	bne.n	8004412 <__aeabi_dsub+0x62>
 8004410:	e0cb      	b.n	80045aa <__aeabi_dsub+0x1fa>
 8004412:	4ac1      	ldr	r2, [pc, #772]	; (8004718 <__aeabi_dsub+0x368>)
 8004414:	4296      	cmp	r6, r2
 8004416:	d100      	bne.n	800441a <__aeabi_dsub+0x6a>
 8004418:	e186      	b.n	8004728 <__aeabi_dsub+0x378>
 800441a:	2280      	movs	r2, #128	; 0x80
 800441c:	0412      	lsls	r2, r2, #16
 800441e:	4317      	orrs	r7, r2
 8004420:	4662      	mov	r2, ip
 8004422:	2a38      	cmp	r2, #56	; 0x38
 8004424:	dd00      	ble.n	8004428 <__aeabi_dsub+0x78>
 8004426:	e1a4      	b.n	8004772 <__aeabi_dsub+0x3c2>
 8004428:	2a1f      	cmp	r2, #31
 800442a:	dd00      	ble.n	800442e <__aeabi_dsub+0x7e>
 800442c:	e21d      	b.n	800486a <__aeabi_dsub+0x4ba>
 800442e:	4661      	mov	r1, ip
 8004430:	2220      	movs	r2, #32
 8004432:	003c      	movs	r4, r7
 8004434:	1a52      	subs	r2, r2, r1
 8004436:	0001      	movs	r1, r0
 8004438:	4090      	lsls	r0, r2
 800443a:	4094      	lsls	r4, r2
 800443c:	1e42      	subs	r2, r0, #1
 800443e:	4190      	sbcs	r0, r2
 8004440:	4662      	mov	r2, ip
 8004442:	46a0      	mov	r8, r4
 8004444:	4664      	mov	r4, ip
 8004446:	40d7      	lsrs	r7, r2
 8004448:	464a      	mov	r2, r9
 800444a:	40e1      	lsrs	r1, r4
 800444c:	4644      	mov	r4, r8
 800444e:	1bd2      	subs	r2, r2, r7
 8004450:	4691      	mov	r9, r2
 8004452:	430c      	orrs	r4, r1
 8004454:	4304      	orrs	r4, r0
 8004456:	1b1c      	subs	r4, r3, r4
 8004458:	42a3      	cmp	r3, r4
 800445a:	4192      	sbcs	r2, r2
 800445c:	464b      	mov	r3, r9
 800445e:	4252      	negs	r2, r2
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	469a      	mov	sl, r3
 8004464:	4653      	mov	r3, sl
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	d400      	bmi.n	800446c <__aeabi_dsub+0xbc>
 800446a:	e12b      	b.n	80046c4 <__aeabi_dsub+0x314>
 800446c:	4653      	mov	r3, sl
 800446e:	025a      	lsls	r2, r3, #9
 8004470:	0a53      	lsrs	r3, r2, #9
 8004472:	469a      	mov	sl, r3
 8004474:	4653      	mov	r3, sl
 8004476:	2b00      	cmp	r3, #0
 8004478:	d100      	bne.n	800447c <__aeabi_dsub+0xcc>
 800447a:	e166      	b.n	800474a <__aeabi_dsub+0x39a>
 800447c:	4650      	mov	r0, sl
 800447e:	f000 fc0d 	bl	8004c9c <__clzsi2>
 8004482:	0003      	movs	r3, r0
 8004484:	3b08      	subs	r3, #8
 8004486:	2220      	movs	r2, #32
 8004488:	0020      	movs	r0, r4
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	4651      	mov	r1, sl
 800448e:	40d0      	lsrs	r0, r2
 8004490:	4099      	lsls	r1, r3
 8004492:	0002      	movs	r2, r0
 8004494:	409c      	lsls	r4, r3
 8004496:	430a      	orrs	r2, r1
 8004498:	429e      	cmp	r6, r3
 800449a:	dd00      	ble.n	800449e <__aeabi_dsub+0xee>
 800449c:	e164      	b.n	8004768 <__aeabi_dsub+0x3b8>
 800449e:	1b9b      	subs	r3, r3, r6
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	291f      	cmp	r1, #31
 80044a4:	dd00      	ble.n	80044a8 <__aeabi_dsub+0xf8>
 80044a6:	e0fe      	b.n	80046a6 <__aeabi_dsub+0x2f6>
 80044a8:	2320      	movs	r3, #32
 80044aa:	0010      	movs	r0, r2
 80044ac:	0026      	movs	r6, r4
 80044ae:	1a5b      	subs	r3, r3, r1
 80044b0:	409c      	lsls	r4, r3
 80044b2:	4098      	lsls	r0, r3
 80044b4:	40ce      	lsrs	r6, r1
 80044b6:	40ca      	lsrs	r2, r1
 80044b8:	1e63      	subs	r3, r4, #1
 80044ba:	419c      	sbcs	r4, r3
 80044bc:	4330      	orrs	r0, r6
 80044be:	4692      	mov	sl, r2
 80044c0:	2600      	movs	r6, #0
 80044c2:	4304      	orrs	r4, r0
 80044c4:	0763      	lsls	r3, r4, #29
 80044c6:	d009      	beq.n	80044dc <__aeabi_dsub+0x12c>
 80044c8:	230f      	movs	r3, #15
 80044ca:	4023      	ands	r3, r4
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d005      	beq.n	80044dc <__aeabi_dsub+0x12c>
 80044d0:	1d23      	adds	r3, r4, #4
 80044d2:	42a3      	cmp	r3, r4
 80044d4:	41a4      	sbcs	r4, r4
 80044d6:	4264      	negs	r4, r4
 80044d8:	44a2      	add	sl, r4
 80044da:	001c      	movs	r4, r3
 80044dc:	4653      	mov	r3, sl
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	d400      	bmi.n	80044e4 <__aeabi_dsub+0x134>
 80044e2:	e0f2      	b.n	80046ca <__aeabi_dsub+0x31a>
 80044e4:	4b8c      	ldr	r3, [pc, #560]	; (8004718 <__aeabi_dsub+0x368>)
 80044e6:	3601      	adds	r6, #1
 80044e8:	429e      	cmp	r6, r3
 80044ea:	d100      	bne.n	80044ee <__aeabi_dsub+0x13e>
 80044ec:	e10f      	b.n	800470e <__aeabi_dsub+0x35e>
 80044ee:	4653      	mov	r3, sl
 80044f0:	498a      	ldr	r1, [pc, #552]	; (800471c <__aeabi_dsub+0x36c>)
 80044f2:	08e4      	lsrs	r4, r4, #3
 80044f4:	400b      	ands	r3, r1
 80044f6:	0019      	movs	r1, r3
 80044f8:	075b      	lsls	r3, r3, #29
 80044fa:	4323      	orrs	r3, r4
 80044fc:	0572      	lsls	r2, r6, #21
 80044fe:	024c      	lsls	r4, r1, #9
 8004500:	0b24      	lsrs	r4, r4, #12
 8004502:	0d52      	lsrs	r2, r2, #21
 8004504:	0512      	lsls	r2, r2, #20
 8004506:	4322      	orrs	r2, r4
 8004508:	07ed      	lsls	r5, r5, #31
 800450a:	432a      	orrs	r2, r5
 800450c:	0018      	movs	r0, r3
 800450e:	0011      	movs	r1, r2
 8004510:	b003      	add	sp, #12
 8004512:	bcf0      	pop	{r4, r5, r6, r7}
 8004514:	46bb      	mov	fp, r7
 8004516:	46b2      	mov	sl, r6
 8004518:	46a9      	mov	r9, r5
 800451a:	46a0      	mov	r8, r4
 800451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800451e:	1ab4      	subs	r4, r6, r2
 8004520:	46a4      	mov	ip, r4
 8004522:	2c00      	cmp	r4, #0
 8004524:	dd59      	ble.n	80045da <__aeabi_dsub+0x22a>
 8004526:	2a00      	cmp	r2, #0
 8004528:	d100      	bne.n	800452c <__aeabi_dsub+0x17c>
 800452a:	e0b0      	b.n	800468e <__aeabi_dsub+0x2de>
 800452c:	4556      	cmp	r6, sl
 800452e:	d100      	bne.n	8004532 <__aeabi_dsub+0x182>
 8004530:	e0fa      	b.n	8004728 <__aeabi_dsub+0x378>
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	0412      	lsls	r2, r2, #16
 8004536:	4317      	orrs	r7, r2
 8004538:	4662      	mov	r2, ip
 800453a:	2a38      	cmp	r2, #56	; 0x38
 800453c:	dd00      	ble.n	8004540 <__aeabi_dsub+0x190>
 800453e:	e0d4      	b.n	80046ea <__aeabi_dsub+0x33a>
 8004540:	2a1f      	cmp	r2, #31
 8004542:	dc00      	bgt.n	8004546 <__aeabi_dsub+0x196>
 8004544:	e1c0      	b.n	80048c8 <__aeabi_dsub+0x518>
 8004546:	0039      	movs	r1, r7
 8004548:	3a20      	subs	r2, #32
 800454a:	40d1      	lsrs	r1, r2
 800454c:	4662      	mov	r2, ip
 800454e:	2a20      	cmp	r2, #32
 8004550:	d006      	beq.n	8004560 <__aeabi_dsub+0x1b0>
 8004552:	4664      	mov	r4, ip
 8004554:	2240      	movs	r2, #64	; 0x40
 8004556:	1b12      	subs	r2, r2, r4
 8004558:	003c      	movs	r4, r7
 800455a:	4094      	lsls	r4, r2
 800455c:	4304      	orrs	r4, r0
 800455e:	9401      	str	r4, [sp, #4]
 8004560:	9c01      	ldr	r4, [sp, #4]
 8004562:	1e62      	subs	r2, r4, #1
 8004564:	4194      	sbcs	r4, r2
 8004566:	430c      	orrs	r4, r1
 8004568:	e0c3      	b.n	80046f2 <__aeabi_dsub+0x342>
 800456a:	003c      	movs	r4, r7
 800456c:	4304      	orrs	r4, r0
 800456e:	d02b      	beq.n	80045c8 <__aeabi_dsub+0x218>
 8004570:	468b      	mov	fp, r1
 8004572:	428d      	cmp	r5, r1
 8004574:	d02e      	beq.n	80045d4 <__aeabi_dsub+0x224>
 8004576:	4c6a      	ldr	r4, [pc, #424]	; (8004720 <__aeabi_dsub+0x370>)
 8004578:	46a4      	mov	ip, r4
 800457a:	44b4      	add	ip, r6
 800457c:	4664      	mov	r4, ip
 800457e:	2c00      	cmp	r4, #0
 8004580:	d05f      	beq.n	8004642 <__aeabi_dsub+0x292>
 8004582:	1b94      	subs	r4, r2, r6
 8004584:	46a4      	mov	ip, r4
 8004586:	2e00      	cmp	r6, #0
 8004588:	d000      	beq.n	800458c <__aeabi_dsub+0x1dc>
 800458a:	e120      	b.n	80047ce <__aeabi_dsub+0x41e>
 800458c:	464c      	mov	r4, r9
 800458e:	431c      	orrs	r4, r3
 8004590:	d100      	bne.n	8004594 <__aeabi_dsub+0x1e4>
 8004592:	e1c7      	b.n	8004924 <__aeabi_dsub+0x574>
 8004594:	4661      	mov	r1, ip
 8004596:	1e4c      	subs	r4, r1, #1
 8004598:	2901      	cmp	r1, #1
 800459a:	d100      	bne.n	800459e <__aeabi_dsub+0x1ee>
 800459c:	e223      	b.n	80049e6 <__aeabi_dsub+0x636>
 800459e:	4d5e      	ldr	r5, [pc, #376]	; (8004718 <__aeabi_dsub+0x368>)
 80045a0:	45ac      	cmp	ip, r5
 80045a2:	d100      	bne.n	80045a6 <__aeabi_dsub+0x1f6>
 80045a4:	e1d8      	b.n	8004958 <__aeabi_dsub+0x5a8>
 80045a6:	46a4      	mov	ip, r4
 80045a8:	e11a      	b.n	80047e0 <__aeabi_dsub+0x430>
 80045aa:	003a      	movs	r2, r7
 80045ac:	4302      	orrs	r2, r0
 80045ae:	d100      	bne.n	80045b2 <__aeabi_dsub+0x202>
 80045b0:	e0e4      	b.n	800477c <__aeabi_dsub+0x3cc>
 80045b2:	0022      	movs	r2, r4
 80045b4:	3a01      	subs	r2, #1
 80045b6:	2c01      	cmp	r4, #1
 80045b8:	d100      	bne.n	80045bc <__aeabi_dsub+0x20c>
 80045ba:	e1c3      	b.n	8004944 <__aeabi_dsub+0x594>
 80045bc:	4956      	ldr	r1, [pc, #344]	; (8004718 <__aeabi_dsub+0x368>)
 80045be:	428c      	cmp	r4, r1
 80045c0:	d100      	bne.n	80045c4 <__aeabi_dsub+0x214>
 80045c2:	e0b1      	b.n	8004728 <__aeabi_dsub+0x378>
 80045c4:	4694      	mov	ip, r2
 80045c6:	e72b      	b.n	8004420 <__aeabi_dsub+0x70>
 80045c8:	2401      	movs	r4, #1
 80045ca:	4061      	eors	r1, r4
 80045cc:	468b      	mov	fp, r1
 80045ce:	428d      	cmp	r5, r1
 80045d0:	d000      	beq.n	80045d4 <__aeabi_dsub+0x224>
 80045d2:	e716      	b.n	8004402 <__aeabi_dsub+0x52>
 80045d4:	4952      	ldr	r1, [pc, #328]	; (8004720 <__aeabi_dsub+0x370>)
 80045d6:	468c      	mov	ip, r1
 80045d8:	44b4      	add	ip, r6
 80045da:	4664      	mov	r4, ip
 80045dc:	2c00      	cmp	r4, #0
 80045de:	d100      	bne.n	80045e2 <__aeabi_dsub+0x232>
 80045e0:	e0d3      	b.n	800478a <__aeabi_dsub+0x3da>
 80045e2:	1b91      	subs	r1, r2, r6
 80045e4:	468c      	mov	ip, r1
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	d100      	bne.n	80045ec <__aeabi_dsub+0x23c>
 80045ea:	e15e      	b.n	80048aa <__aeabi_dsub+0x4fa>
 80045ec:	494a      	ldr	r1, [pc, #296]	; (8004718 <__aeabi_dsub+0x368>)
 80045ee:	428a      	cmp	r2, r1
 80045f0:	d100      	bne.n	80045f4 <__aeabi_dsub+0x244>
 80045f2:	e1be      	b.n	8004972 <__aeabi_dsub+0x5c2>
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	464c      	mov	r4, r9
 80045f8:	0409      	lsls	r1, r1, #16
 80045fa:	430c      	orrs	r4, r1
 80045fc:	46a1      	mov	r9, r4
 80045fe:	4661      	mov	r1, ip
 8004600:	2938      	cmp	r1, #56	; 0x38
 8004602:	dd00      	ble.n	8004606 <__aeabi_dsub+0x256>
 8004604:	e1ba      	b.n	800497c <__aeabi_dsub+0x5cc>
 8004606:	291f      	cmp	r1, #31
 8004608:	dd00      	ble.n	800460c <__aeabi_dsub+0x25c>
 800460a:	e227      	b.n	8004a5c <__aeabi_dsub+0x6ac>
 800460c:	2420      	movs	r4, #32
 800460e:	1a64      	subs	r4, r4, r1
 8004610:	4649      	mov	r1, r9
 8004612:	40a1      	lsls	r1, r4
 8004614:	001e      	movs	r6, r3
 8004616:	4688      	mov	r8, r1
 8004618:	4661      	mov	r1, ip
 800461a:	40a3      	lsls	r3, r4
 800461c:	40ce      	lsrs	r6, r1
 800461e:	4641      	mov	r1, r8
 8004620:	1e5c      	subs	r4, r3, #1
 8004622:	41a3      	sbcs	r3, r4
 8004624:	4331      	orrs	r1, r6
 8004626:	4319      	orrs	r1, r3
 8004628:	000c      	movs	r4, r1
 800462a:	4663      	mov	r3, ip
 800462c:	4649      	mov	r1, r9
 800462e:	40d9      	lsrs	r1, r3
 8004630:	187f      	adds	r7, r7, r1
 8004632:	1824      	adds	r4, r4, r0
 8004634:	4284      	cmp	r4, r0
 8004636:	419b      	sbcs	r3, r3
 8004638:	425b      	negs	r3, r3
 800463a:	469a      	mov	sl, r3
 800463c:	0016      	movs	r6, r2
 800463e:	44ba      	add	sl, r7
 8004640:	e05d      	b.n	80046fe <__aeabi_dsub+0x34e>
 8004642:	4c38      	ldr	r4, [pc, #224]	; (8004724 <__aeabi_dsub+0x374>)
 8004644:	1c72      	adds	r2, r6, #1
 8004646:	4222      	tst	r2, r4
 8004648:	d000      	beq.n	800464c <__aeabi_dsub+0x29c>
 800464a:	e0df      	b.n	800480c <__aeabi_dsub+0x45c>
 800464c:	464a      	mov	r2, r9
 800464e:	431a      	orrs	r2, r3
 8004650:	2e00      	cmp	r6, #0
 8004652:	d000      	beq.n	8004656 <__aeabi_dsub+0x2a6>
 8004654:	e15c      	b.n	8004910 <__aeabi_dsub+0x560>
 8004656:	2a00      	cmp	r2, #0
 8004658:	d100      	bne.n	800465c <__aeabi_dsub+0x2ac>
 800465a:	e1cf      	b.n	80049fc <__aeabi_dsub+0x64c>
 800465c:	003a      	movs	r2, r7
 800465e:	4302      	orrs	r2, r0
 8004660:	d100      	bne.n	8004664 <__aeabi_dsub+0x2b4>
 8004662:	e17f      	b.n	8004964 <__aeabi_dsub+0x5b4>
 8004664:	1a1c      	subs	r4, r3, r0
 8004666:	464a      	mov	r2, r9
 8004668:	42a3      	cmp	r3, r4
 800466a:	4189      	sbcs	r1, r1
 800466c:	1bd2      	subs	r2, r2, r7
 800466e:	4249      	negs	r1, r1
 8004670:	1a52      	subs	r2, r2, r1
 8004672:	4692      	mov	sl, r2
 8004674:	0212      	lsls	r2, r2, #8
 8004676:	d400      	bmi.n	800467a <__aeabi_dsub+0x2ca>
 8004678:	e20a      	b.n	8004a90 <__aeabi_dsub+0x6e0>
 800467a:	1ac4      	subs	r4, r0, r3
 800467c:	42a0      	cmp	r0, r4
 800467e:	4180      	sbcs	r0, r0
 8004680:	464b      	mov	r3, r9
 8004682:	4240      	negs	r0, r0
 8004684:	1aff      	subs	r7, r7, r3
 8004686:	1a3b      	subs	r3, r7, r0
 8004688:	469a      	mov	sl, r3
 800468a:	465d      	mov	r5, fp
 800468c:	e71a      	b.n	80044c4 <__aeabi_dsub+0x114>
 800468e:	003a      	movs	r2, r7
 8004690:	4302      	orrs	r2, r0
 8004692:	d073      	beq.n	800477c <__aeabi_dsub+0x3cc>
 8004694:	0022      	movs	r2, r4
 8004696:	3a01      	subs	r2, #1
 8004698:	2c01      	cmp	r4, #1
 800469a:	d100      	bne.n	800469e <__aeabi_dsub+0x2ee>
 800469c:	e0cb      	b.n	8004836 <__aeabi_dsub+0x486>
 800469e:	4554      	cmp	r4, sl
 80046a0:	d042      	beq.n	8004728 <__aeabi_dsub+0x378>
 80046a2:	4694      	mov	ip, r2
 80046a4:	e748      	b.n	8004538 <__aeabi_dsub+0x188>
 80046a6:	0010      	movs	r0, r2
 80046a8:	3b1f      	subs	r3, #31
 80046aa:	40d8      	lsrs	r0, r3
 80046ac:	2920      	cmp	r1, #32
 80046ae:	d003      	beq.n	80046b8 <__aeabi_dsub+0x308>
 80046b0:	2340      	movs	r3, #64	; 0x40
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	409a      	lsls	r2, r3
 80046b6:	4314      	orrs	r4, r2
 80046b8:	1e63      	subs	r3, r4, #1
 80046ba:	419c      	sbcs	r4, r3
 80046bc:	2300      	movs	r3, #0
 80046be:	2600      	movs	r6, #0
 80046c0:	469a      	mov	sl, r3
 80046c2:	4304      	orrs	r4, r0
 80046c4:	0763      	lsls	r3, r4, #29
 80046c6:	d000      	beq.n	80046ca <__aeabi_dsub+0x31a>
 80046c8:	e6fe      	b.n	80044c8 <__aeabi_dsub+0x118>
 80046ca:	4652      	mov	r2, sl
 80046cc:	08e3      	lsrs	r3, r4, #3
 80046ce:	0752      	lsls	r2, r2, #29
 80046d0:	4313      	orrs	r3, r2
 80046d2:	4652      	mov	r2, sl
 80046d4:	46b4      	mov	ip, r6
 80046d6:	08d2      	lsrs	r2, r2, #3
 80046d8:	490f      	ldr	r1, [pc, #60]	; (8004718 <__aeabi_dsub+0x368>)
 80046da:	458c      	cmp	ip, r1
 80046dc:	d02a      	beq.n	8004734 <__aeabi_dsub+0x384>
 80046de:	0312      	lsls	r2, r2, #12
 80046e0:	0b14      	lsrs	r4, r2, #12
 80046e2:	4662      	mov	r2, ip
 80046e4:	0552      	lsls	r2, r2, #21
 80046e6:	0d52      	lsrs	r2, r2, #21
 80046e8:	e70c      	b.n	8004504 <__aeabi_dsub+0x154>
 80046ea:	003c      	movs	r4, r7
 80046ec:	4304      	orrs	r4, r0
 80046ee:	1e62      	subs	r2, r4, #1
 80046f0:	4194      	sbcs	r4, r2
 80046f2:	18e4      	adds	r4, r4, r3
 80046f4:	429c      	cmp	r4, r3
 80046f6:	4192      	sbcs	r2, r2
 80046f8:	4252      	negs	r2, r2
 80046fa:	444a      	add	r2, r9
 80046fc:	4692      	mov	sl, r2
 80046fe:	4653      	mov	r3, sl
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	d5df      	bpl.n	80046c4 <__aeabi_dsub+0x314>
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <__aeabi_dsub+0x368>)
 8004706:	3601      	adds	r6, #1
 8004708:	429e      	cmp	r6, r3
 800470a:	d000      	beq.n	800470e <__aeabi_dsub+0x35e>
 800470c:	e0a0      	b.n	8004850 <__aeabi_dsub+0x4a0>
 800470e:	0032      	movs	r2, r6
 8004710:	2400      	movs	r4, #0
 8004712:	2300      	movs	r3, #0
 8004714:	e6f6      	b.n	8004504 <__aeabi_dsub+0x154>
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	000007ff 	.word	0x000007ff
 800471c:	ff7fffff 	.word	0xff7fffff
 8004720:	fffff801 	.word	0xfffff801
 8004724:	000007fe 	.word	0x000007fe
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	464a      	mov	r2, r9
 800472c:	0752      	lsls	r2, r2, #29
 800472e:	4313      	orrs	r3, r2
 8004730:	464a      	mov	r2, r9
 8004732:	08d2      	lsrs	r2, r2, #3
 8004734:	0019      	movs	r1, r3
 8004736:	4311      	orrs	r1, r2
 8004738:	d100      	bne.n	800473c <__aeabi_dsub+0x38c>
 800473a:	e1b5      	b.n	8004aa8 <__aeabi_dsub+0x6f8>
 800473c:	2480      	movs	r4, #128	; 0x80
 800473e:	0324      	lsls	r4, r4, #12
 8004740:	4314      	orrs	r4, r2
 8004742:	0324      	lsls	r4, r4, #12
 8004744:	4ad5      	ldr	r2, [pc, #852]	; (8004a9c <__aeabi_dsub+0x6ec>)
 8004746:	0b24      	lsrs	r4, r4, #12
 8004748:	e6dc      	b.n	8004504 <__aeabi_dsub+0x154>
 800474a:	0020      	movs	r0, r4
 800474c:	f000 faa6 	bl	8004c9c <__clzsi2>
 8004750:	0003      	movs	r3, r0
 8004752:	3318      	adds	r3, #24
 8004754:	2b1f      	cmp	r3, #31
 8004756:	dc00      	bgt.n	800475a <__aeabi_dsub+0x3aa>
 8004758:	e695      	b.n	8004486 <__aeabi_dsub+0xd6>
 800475a:	0022      	movs	r2, r4
 800475c:	3808      	subs	r0, #8
 800475e:	4082      	lsls	r2, r0
 8004760:	2400      	movs	r4, #0
 8004762:	429e      	cmp	r6, r3
 8004764:	dc00      	bgt.n	8004768 <__aeabi_dsub+0x3b8>
 8004766:	e69a      	b.n	800449e <__aeabi_dsub+0xee>
 8004768:	1af6      	subs	r6, r6, r3
 800476a:	4bcd      	ldr	r3, [pc, #820]	; (8004aa0 <__aeabi_dsub+0x6f0>)
 800476c:	401a      	ands	r2, r3
 800476e:	4692      	mov	sl, r2
 8004770:	e6a8      	b.n	80044c4 <__aeabi_dsub+0x114>
 8004772:	003c      	movs	r4, r7
 8004774:	4304      	orrs	r4, r0
 8004776:	1e62      	subs	r2, r4, #1
 8004778:	4194      	sbcs	r4, r2
 800477a:	e66c      	b.n	8004456 <__aeabi_dsub+0xa6>
 800477c:	464a      	mov	r2, r9
 800477e:	08db      	lsrs	r3, r3, #3
 8004780:	0752      	lsls	r2, r2, #29
 8004782:	4313      	orrs	r3, r2
 8004784:	464a      	mov	r2, r9
 8004786:	08d2      	lsrs	r2, r2, #3
 8004788:	e7a6      	b.n	80046d8 <__aeabi_dsub+0x328>
 800478a:	4cc6      	ldr	r4, [pc, #792]	; (8004aa4 <__aeabi_dsub+0x6f4>)
 800478c:	1c72      	adds	r2, r6, #1
 800478e:	4222      	tst	r2, r4
 8004790:	d000      	beq.n	8004794 <__aeabi_dsub+0x3e4>
 8004792:	e0ac      	b.n	80048ee <__aeabi_dsub+0x53e>
 8004794:	464a      	mov	r2, r9
 8004796:	431a      	orrs	r2, r3
 8004798:	2e00      	cmp	r6, #0
 800479a:	d000      	beq.n	800479e <__aeabi_dsub+0x3ee>
 800479c:	e105      	b.n	80049aa <__aeabi_dsub+0x5fa>
 800479e:	2a00      	cmp	r2, #0
 80047a0:	d100      	bne.n	80047a4 <__aeabi_dsub+0x3f4>
 80047a2:	e156      	b.n	8004a52 <__aeabi_dsub+0x6a2>
 80047a4:	003a      	movs	r2, r7
 80047a6:	4302      	orrs	r2, r0
 80047a8:	d100      	bne.n	80047ac <__aeabi_dsub+0x3fc>
 80047aa:	e0db      	b.n	8004964 <__aeabi_dsub+0x5b4>
 80047ac:	181c      	adds	r4, r3, r0
 80047ae:	429c      	cmp	r4, r3
 80047b0:	419b      	sbcs	r3, r3
 80047b2:	444f      	add	r7, r9
 80047b4:	46ba      	mov	sl, r7
 80047b6:	425b      	negs	r3, r3
 80047b8:	449a      	add	sl, r3
 80047ba:	4653      	mov	r3, sl
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	d400      	bmi.n	80047c2 <__aeabi_dsub+0x412>
 80047c0:	e780      	b.n	80046c4 <__aeabi_dsub+0x314>
 80047c2:	4652      	mov	r2, sl
 80047c4:	4bb6      	ldr	r3, [pc, #728]	; (8004aa0 <__aeabi_dsub+0x6f0>)
 80047c6:	2601      	movs	r6, #1
 80047c8:	401a      	ands	r2, r3
 80047ca:	4692      	mov	sl, r2
 80047cc:	e77a      	b.n	80046c4 <__aeabi_dsub+0x314>
 80047ce:	4cb3      	ldr	r4, [pc, #716]	; (8004a9c <__aeabi_dsub+0x6ec>)
 80047d0:	42a2      	cmp	r2, r4
 80047d2:	d100      	bne.n	80047d6 <__aeabi_dsub+0x426>
 80047d4:	e0c0      	b.n	8004958 <__aeabi_dsub+0x5a8>
 80047d6:	2480      	movs	r4, #128	; 0x80
 80047d8:	464d      	mov	r5, r9
 80047da:	0424      	lsls	r4, r4, #16
 80047dc:	4325      	orrs	r5, r4
 80047de:	46a9      	mov	r9, r5
 80047e0:	4664      	mov	r4, ip
 80047e2:	2c38      	cmp	r4, #56	; 0x38
 80047e4:	dc53      	bgt.n	800488e <__aeabi_dsub+0x4de>
 80047e6:	4661      	mov	r1, ip
 80047e8:	2c1f      	cmp	r4, #31
 80047ea:	dd00      	ble.n	80047ee <__aeabi_dsub+0x43e>
 80047ec:	e0cd      	b.n	800498a <__aeabi_dsub+0x5da>
 80047ee:	2520      	movs	r5, #32
 80047f0:	001e      	movs	r6, r3
 80047f2:	1b2d      	subs	r5, r5, r4
 80047f4:	464c      	mov	r4, r9
 80047f6:	40ab      	lsls	r3, r5
 80047f8:	40ac      	lsls	r4, r5
 80047fa:	40ce      	lsrs	r6, r1
 80047fc:	1e5d      	subs	r5, r3, #1
 80047fe:	41ab      	sbcs	r3, r5
 8004800:	4334      	orrs	r4, r6
 8004802:	4323      	orrs	r3, r4
 8004804:	464c      	mov	r4, r9
 8004806:	40cc      	lsrs	r4, r1
 8004808:	1b3f      	subs	r7, r7, r4
 800480a:	e045      	b.n	8004898 <__aeabi_dsub+0x4e8>
 800480c:	464a      	mov	r2, r9
 800480e:	1a1c      	subs	r4, r3, r0
 8004810:	1bd1      	subs	r1, r2, r7
 8004812:	42a3      	cmp	r3, r4
 8004814:	4192      	sbcs	r2, r2
 8004816:	4252      	negs	r2, r2
 8004818:	4692      	mov	sl, r2
 800481a:	000a      	movs	r2, r1
 800481c:	4651      	mov	r1, sl
 800481e:	1a52      	subs	r2, r2, r1
 8004820:	4692      	mov	sl, r2
 8004822:	0212      	lsls	r2, r2, #8
 8004824:	d500      	bpl.n	8004828 <__aeabi_dsub+0x478>
 8004826:	e083      	b.n	8004930 <__aeabi_dsub+0x580>
 8004828:	4653      	mov	r3, sl
 800482a:	4323      	orrs	r3, r4
 800482c:	d000      	beq.n	8004830 <__aeabi_dsub+0x480>
 800482e:	e621      	b.n	8004474 <__aeabi_dsub+0xc4>
 8004830:	2200      	movs	r2, #0
 8004832:	2500      	movs	r5, #0
 8004834:	e753      	b.n	80046de <__aeabi_dsub+0x32e>
 8004836:	181c      	adds	r4, r3, r0
 8004838:	429c      	cmp	r4, r3
 800483a:	419b      	sbcs	r3, r3
 800483c:	444f      	add	r7, r9
 800483e:	46ba      	mov	sl, r7
 8004840:	425b      	negs	r3, r3
 8004842:	449a      	add	sl, r3
 8004844:	4653      	mov	r3, sl
 8004846:	2601      	movs	r6, #1
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	d400      	bmi.n	800484e <__aeabi_dsub+0x49e>
 800484c:	e73a      	b.n	80046c4 <__aeabi_dsub+0x314>
 800484e:	2602      	movs	r6, #2
 8004850:	4652      	mov	r2, sl
 8004852:	4b93      	ldr	r3, [pc, #588]	; (8004aa0 <__aeabi_dsub+0x6f0>)
 8004854:	2101      	movs	r1, #1
 8004856:	401a      	ands	r2, r3
 8004858:	0013      	movs	r3, r2
 800485a:	4021      	ands	r1, r4
 800485c:	0862      	lsrs	r2, r4, #1
 800485e:	430a      	orrs	r2, r1
 8004860:	07dc      	lsls	r4, r3, #31
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	469a      	mov	sl, r3
 8004866:	4314      	orrs	r4, r2
 8004868:	e62c      	b.n	80044c4 <__aeabi_dsub+0x114>
 800486a:	0039      	movs	r1, r7
 800486c:	3a20      	subs	r2, #32
 800486e:	40d1      	lsrs	r1, r2
 8004870:	4662      	mov	r2, ip
 8004872:	2a20      	cmp	r2, #32
 8004874:	d006      	beq.n	8004884 <__aeabi_dsub+0x4d4>
 8004876:	4664      	mov	r4, ip
 8004878:	2240      	movs	r2, #64	; 0x40
 800487a:	1b12      	subs	r2, r2, r4
 800487c:	003c      	movs	r4, r7
 800487e:	4094      	lsls	r4, r2
 8004880:	4304      	orrs	r4, r0
 8004882:	9401      	str	r4, [sp, #4]
 8004884:	9c01      	ldr	r4, [sp, #4]
 8004886:	1e62      	subs	r2, r4, #1
 8004888:	4194      	sbcs	r4, r2
 800488a:	430c      	orrs	r4, r1
 800488c:	e5e3      	b.n	8004456 <__aeabi_dsub+0xa6>
 800488e:	4649      	mov	r1, r9
 8004890:	4319      	orrs	r1, r3
 8004892:	000b      	movs	r3, r1
 8004894:	1e5c      	subs	r4, r3, #1
 8004896:	41a3      	sbcs	r3, r4
 8004898:	1ac4      	subs	r4, r0, r3
 800489a:	42a0      	cmp	r0, r4
 800489c:	419b      	sbcs	r3, r3
 800489e:	425b      	negs	r3, r3
 80048a0:	1afb      	subs	r3, r7, r3
 80048a2:	469a      	mov	sl, r3
 80048a4:	465d      	mov	r5, fp
 80048a6:	0016      	movs	r6, r2
 80048a8:	e5dc      	b.n	8004464 <__aeabi_dsub+0xb4>
 80048aa:	4649      	mov	r1, r9
 80048ac:	4319      	orrs	r1, r3
 80048ae:	d100      	bne.n	80048b2 <__aeabi_dsub+0x502>
 80048b0:	e0ae      	b.n	8004a10 <__aeabi_dsub+0x660>
 80048b2:	4661      	mov	r1, ip
 80048b4:	4664      	mov	r4, ip
 80048b6:	3901      	subs	r1, #1
 80048b8:	2c01      	cmp	r4, #1
 80048ba:	d100      	bne.n	80048be <__aeabi_dsub+0x50e>
 80048bc:	e0e0      	b.n	8004a80 <__aeabi_dsub+0x6d0>
 80048be:	4c77      	ldr	r4, [pc, #476]	; (8004a9c <__aeabi_dsub+0x6ec>)
 80048c0:	45a4      	cmp	ip, r4
 80048c2:	d056      	beq.n	8004972 <__aeabi_dsub+0x5c2>
 80048c4:	468c      	mov	ip, r1
 80048c6:	e69a      	b.n	80045fe <__aeabi_dsub+0x24e>
 80048c8:	4661      	mov	r1, ip
 80048ca:	2220      	movs	r2, #32
 80048cc:	003c      	movs	r4, r7
 80048ce:	1a52      	subs	r2, r2, r1
 80048d0:	4094      	lsls	r4, r2
 80048d2:	0001      	movs	r1, r0
 80048d4:	4090      	lsls	r0, r2
 80048d6:	46a0      	mov	r8, r4
 80048d8:	4664      	mov	r4, ip
 80048da:	1e42      	subs	r2, r0, #1
 80048dc:	4190      	sbcs	r0, r2
 80048de:	4662      	mov	r2, ip
 80048e0:	40e1      	lsrs	r1, r4
 80048e2:	4644      	mov	r4, r8
 80048e4:	40d7      	lsrs	r7, r2
 80048e6:	430c      	orrs	r4, r1
 80048e8:	4304      	orrs	r4, r0
 80048ea:	44b9      	add	r9, r7
 80048ec:	e701      	b.n	80046f2 <__aeabi_dsub+0x342>
 80048ee:	496b      	ldr	r1, [pc, #428]	; (8004a9c <__aeabi_dsub+0x6ec>)
 80048f0:	428a      	cmp	r2, r1
 80048f2:	d100      	bne.n	80048f6 <__aeabi_dsub+0x546>
 80048f4:	e70c      	b.n	8004710 <__aeabi_dsub+0x360>
 80048f6:	1818      	adds	r0, r3, r0
 80048f8:	4298      	cmp	r0, r3
 80048fa:	419b      	sbcs	r3, r3
 80048fc:	444f      	add	r7, r9
 80048fe:	425b      	negs	r3, r3
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	07dc      	lsls	r4, r3, #31
 8004904:	0840      	lsrs	r0, r0, #1
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	469a      	mov	sl, r3
 800490a:	0016      	movs	r6, r2
 800490c:	4304      	orrs	r4, r0
 800490e:	e6d9      	b.n	80046c4 <__aeabi_dsub+0x314>
 8004910:	2a00      	cmp	r2, #0
 8004912:	d000      	beq.n	8004916 <__aeabi_dsub+0x566>
 8004914:	e081      	b.n	8004a1a <__aeabi_dsub+0x66a>
 8004916:	003b      	movs	r3, r7
 8004918:	4303      	orrs	r3, r0
 800491a:	d11d      	bne.n	8004958 <__aeabi_dsub+0x5a8>
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	2500      	movs	r5, #0
 8004920:	0312      	lsls	r2, r2, #12
 8004922:	e70b      	b.n	800473c <__aeabi_dsub+0x38c>
 8004924:	08c0      	lsrs	r0, r0, #3
 8004926:	077b      	lsls	r3, r7, #29
 8004928:	465d      	mov	r5, fp
 800492a:	4303      	orrs	r3, r0
 800492c:	08fa      	lsrs	r2, r7, #3
 800492e:	e6d3      	b.n	80046d8 <__aeabi_dsub+0x328>
 8004930:	1ac4      	subs	r4, r0, r3
 8004932:	42a0      	cmp	r0, r4
 8004934:	4180      	sbcs	r0, r0
 8004936:	464b      	mov	r3, r9
 8004938:	4240      	negs	r0, r0
 800493a:	1aff      	subs	r7, r7, r3
 800493c:	1a3b      	subs	r3, r7, r0
 800493e:	469a      	mov	sl, r3
 8004940:	465d      	mov	r5, fp
 8004942:	e597      	b.n	8004474 <__aeabi_dsub+0xc4>
 8004944:	1a1c      	subs	r4, r3, r0
 8004946:	464a      	mov	r2, r9
 8004948:	42a3      	cmp	r3, r4
 800494a:	419b      	sbcs	r3, r3
 800494c:	1bd7      	subs	r7, r2, r7
 800494e:	425b      	negs	r3, r3
 8004950:	1afb      	subs	r3, r7, r3
 8004952:	469a      	mov	sl, r3
 8004954:	2601      	movs	r6, #1
 8004956:	e585      	b.n	8004464 <__aeabi_dsub+0xb4>
 8004958:	08c0      	lsrs	r0, r0, #3
 800495a:	077b      	lsls	r3, r7, #29
 800495c:	465d      	mov	r5, fp
 800495e:	4303      	orrs	r3, r0
 8004960:	08fa      	lsrs	r2, r7, #3
 8004962:	e6e7      	b.n	8004734 <__aeabi_dsub+0x384>
 8004964:	464a      	mov	r2, r9
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	0752      	lsls	r2, r2, #29
 800496a:	4313      	orrs	r3, r2
 800496c:	464a      	mov	r2, r9
 800496e:	08d2      	lsrs	r2, r2, #3
 8004970:	e6b5      	b.n	80046de <__aeabi_dsub+0x32e>
 8004972:	08c0      	lsrs	r0, r0, #3
 8004974:	077b      	lsls	r3, r7, #29
 8004976:	4303      	orrs	r3, r0
 8004978:	08fa      	lsrs	r2, r7, #3
 800497a:	e6db      	b.n	8004734 <__aeabi_dsub+0x384>
 800497c:	4649      	mov	r1, r9
 800497e:	4319      	orrs	r1, r3
 8004980:	000b      	movs	r3, r1
 8004982:	1e59      	subs	r1, r3, #1
 8004984:	418b      	sbcs	r3, r1
 8004986:	001c      	movs	r4, r3
 8004988:	e653      	b.n	8004632 <__aeabi_dsub+0x282>
 800498a:	464d      	mov	r5, r9
 800498c:	3c20      	subs	r4, #32
 800498e:	40e5      	lsrs	r5, r4
 8004990:	2920      	cmp	r1, #32
 8004992:	d005      	beq.n	80049a0 <__aeabi_dsub+0x5f0>
 8004994:	2440      	movs	r4, #64	; 0x40
 8004996:	1a64      	subs	r4, r4, r1
 8004998:	4649      	mov	r1, r9
 800499a:	40a1      	lsls	r1, r4
 800499c:	430b      	orrs	r3, r1
 800499e:	4698      	mov	r8, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	1e5c      	subs	r4, r3, #1
 80049a4:	41a3      	sbcs	r3, r4
 80049a6:	432b      	orrs	r3, r5
 80049a8:	e776      	b.n	8004898 <__aeabi_dsub+0x4e8>
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	d0e1      	beq.n	8004972 <__aeabi_dsub+0x5c2>
 80049ae:	003a      	movs	r2, r7
 80049b0:	08db      	lsrs	r3, r3, #3
 80049b2:	4302      	orrs	r2, r0
 80049b4:	d100      	bne.n	80049b8 <__aeabi_dsub+0x608>
 80049b6:	e6b8      	b.n	800472a <__aeabi_dsub+0x37a>
 80049b8:	464a      	mov	r2, r9
 80049ba:	0752      	lsls	r2, r2, #29
 80049bc:	2480      	movs	r4, #128	; 0x80
 80049be:	4313      	orrs	r3, r2
 80049c0:	464a      	mov	r2, r9
 80049c2:	0324      	lsls	r4, r4, #12
 80049c4:	08d2      	lsrs	r2, r2, #3
 80049c6:	4222      	tst	r2, r4
 80049c8:	d007      	beq.n	80049da <__aeabi_dsub+0x62a>
 80049ca:	08fe      	lsrs	r6, r7, #3
 80049cc:	4226      	tst	r6, r4
 80049ce:	d104      	bne.n	80049da <__aeabi_dsub+0x62a>
 80049d0:	465d      	mov	r5, fp
 80049d2:	0032      	movs	r2, r6
 80049d4:	08c3      	lsrs	r3, r0, #3
 80049d6:	077f      	lsls	r7, r7, #29
 80049d8:	433b      	orrs	r3, r7
 80049da:	0f59      	lsrs	r1, r3, #29
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	0749      	lsls	r1, r1, #29
 80049e0:	08db      	lsrs	r3, r3, #3
 80049e2:	430b      	orrs	r3, r1
 80049e4:	e6a6      	b.n	8004734 <__aeabi_dsub+0x384>
 80049e6:	1ac4      	subs	r4, r0, r3
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	4180      	sbcs	r0, r0
 80049ec:	464b      	mov	r3, r9
 80049ee:	4240      	negs	r0, r0
 80049f0:	1aff      	subs	r7, r7, r3
 80049f2:	1a3b      	subs	r3, r7, r0
 80049f4:	469a      	mov	sl, r3
 80049f6:	465d      	mov	r5, fp
 80049f8:	2601      	movs	r6, #1
 80049fa:	e533      	b.n	8004464 <__aeabi_dsub+0xb4>
 80049fc:	003b      	movs	r3, r7
 80049fe:	4303      	orrs	r3, r0
 8004a00:	d100      	bne.n	8004a04 <__aeabi_dsub+0x654>
 8004a02:	e715      	b.n	8004830 <__aeabi_dsub+0x480>
 8004a04:	08c0      	lsrs	r0, r0, #3
 8004a06:	077b      	lsls	r3, r7, #29
 8004a08:	465d      	mov	r5, fp
 8004a0a:	4303      	orrs	r3, r0
 8004a0c:	08fa      	lsrs	r2, r7, #3
 8004a0e:	e666      	b.n	80046de <__aeabi_dsub+0x32e>
 8004a10:	08c0      	lsrs	r0, r0, #3
 8004a12:	077b      	lsls	r3, r7, #29
 8004a14:	4303      	orrs	r3, r0
 8004a16:	08fa      	lsrs	r2, r7, #3
 8004a18:	e65e      	b.n	80046d8 <__aeabi_dsub+0x328>
 8004a1a:	003a      	movs	r2, r7
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	4302      	orrs	r2, r0
 8004a20:	d100      	bne.n	8004a24 <__aeabi_dsub+0x674>
 8004a22:	e682      	b.n	800472a <__aeabi_dsub+0x37a>
 8004a24:	464a      	mov	r2, r9
 8004a26:	0752      	lsls	r2, r2, #29
 8004a28:	2480      	movs	r4, #128	; 0x80
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	464a      	mov	r2, r9
 8004a2e:	0324      	lsls	r4, r4, #12
 8004a30:	08d2      	lsrs	r2, r2, #3
 8004a32:	4222      	tst	r2, r4
 8004a34:	d007      	beq.n	8004a46 <__aeabi_dsub+0x696>
 8004a36:	08fe      	lsrs	r6, r7, #3
 8004a38:	4226      	tst	r6, r4
 8004a3a:	d104      	bne.n	8004a46 <__aeabi_dsub+0x696>
 8004a3c:	465d      	mov	r5, fp
 8004a3e:	0032      	movs	r2, r6
 8004a40:	08c3      	lsrs	r3, r0, #3
 8004a42:	077f      	lsls	r7, r7, #29
 8004a44:	433b      	orrs	r3, r7
 8004a46:	0f59      	lsrs	r1, r3, #29
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	08db      	lsrs	r3, r3, #3
 8004a4c:	0749      	lsls	r1, r1, #29
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	e670      	b.n	8004734 <__aeabi_dsub+0x384>
 8004a52:	08c0      	lsrs	r0, r0, #3
 8004a54:	077b      	lsls	r3, r7, #29
 8004a56:	4303      	orrs	r3, r0
 8004a58:	08fa      	lsrs	r2, r7, #3
 8004a5a:	e640      	b.n	80046de <__aeabi_dsub+0x32e>
 8004a5c:	464c      	mov	r4, r9
 8004a5e:	3920      	subs	r1, #32
 8004a60:	40cc      	lsrs	r4, r1
 8004a62:	4661      	mov	r1, ip
 8004a64:	2920      	cmp	r1, #32
 8004a66:	d006      	beq.n	8004a76 <__aeabi_dsub+0x6c6>
 8004a68:	4666      	mov	r6, ip
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	1b89      	subs	r1, r1, r6
 8004a6e:	464e      	mov	r6, r9
 8004a70:	408e      	lsls	r6, r1
 8004a72:	4333      	orrs	r3, r6
 8004a74:	4698      	mov	r8, r3
 8004a76:	4643      	mov	r3, r8
 8004a78:	1e59      	subs	r1, r3, #1
 8004a7a:	418b      	sbcs	r3, r1
 8004a7c:	431c      	orrs	r4, r3
 8004a7e:	e5d8      	b.n	8004632 <__aeabi_dsub+0x282>
 8004a80:	181c      	adds	r4, r3, r0
 8004a82:	4284      	cmp	r4, r0
 8004a84:	4180      	sbcs	r0, r0
 8004a86:	444f      	add	r7, r9
 8004a88:	46ba      	mov	sl, r7
 8004a8a:	4240      	negs	r0, r0
 8004a8c:	4482      	add	sl, r0
 8004a8e:	e6d9      	b.n	8004844 <__aeabi_dsub+0x494>
 8004a90:	4653      	mov	r3, sl
 8004a92:	4323      	orrs	r3, r4
 8004a94:	d100      	bne.n	8004a98 <__aeabi_dsub+0x6e8>
 8004a96:	e6cb      	b.n	8004830 <__aeabi_dsub+0x480>
 8004a98:	e614      	b.n	80046c4 <__aeabi_dsub+0x314>
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	000007ff 	.word	0x000007ff
 8004aa0:	ff7fffff 	.word	0xff7fffff
 8004aa4:	000007fe 	.word	0x000007fe
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4a01      	ldr	r2, [pc, #4]	; (8004ab0 <__aeabi_dsub+0x700>)
 8004aac:	001c      	movs	r4, r3
 8004aae:	e529      	b.n	8004504 <__aeabi_dsub+0x154>
 8004ab0:	000007ff 	.word	0x000007ff

08004ab4 <__aeabi_ui2d>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	1e04      	subs	r4, r0, #0
 8004ab8:	d010      	beq.n	8004adc <__aeabi_ui2d+0x28>
 8004aba:	f000 f8ef 	bl	8004c9c <__clzsi2>
 8004abe:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <__aeabi_ui2d+0x48>)
 8004ac0:	1a1b      	subs	r3, r3, r0
 8004ac2:	280a      	cmp	r0, #10
 8004ac4:	dc11      	bgt.n	8004aea <__aeabi_ui2d+0x36>
 8004ac6:	220b      	movs	r2, #11
 8004ac8:	0021      	movs	r1, r4
 8004aca:	1a12      	subs	r2, r2, r0
 8004acc:	40d1      	lsrs	r1, r2
 8004ace:	3015      	adds	r0, #21
 8004ad0:	030a      	lsls	r2, r1, #12
 8004ad2:	055b      	lsls	r3, r3, #21
 8004ad4:	4084      	lsls	r4, r0
 8004ad6:	0b12      	lsrs	r2, r2, #12
 8004ad8:	0d5b      	lsrs	r3, r3, #21
 8004ada:	e001      	b.n	8004ae0 <__aeabi_ui2d+0x2c>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2200      	movs	r2, #0
 8004ae0:	051b      	lsls	r3, r3, #20
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	0020      	movs	r0, r4
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	0022      	movs	r2, r4
 8004aec:	380b      	subs	r0, #11
 8004aee:	4082      	lsls	r2, r0
 8004af0:	055b      	lsls	r3, r3, #21
 8004af2:	0312      	lsls	r2, r2, #12
 8004af4:	2400      	movs	r4, #0
 8004af6:	0b12      	lsrs	r2, r2, #12
 8004af8:	0d5b      	lsrs	r3, r3, #21
 8004afa:	e7f1      	b.n	8004ae0 <__aeabi_ui2d+0x2c>
 8004afc:	0000041e 	.word	0x0000041e

08004b00 <__aeabi_f2d>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	0242      	lsls	r2, r0, #9
 8004b04:	0043      	lsls	r3, r0, #1
 8004b06:	0fc4      	lsrs	r4, r0, #31
 8004b08:	20fe      	movs	r0, #254	; 0xfe
 8004b0a:	0e1b      	lsrs	r3, r3, #24
 8004b0c:	1c59      	adds	r1, r3, #1
 8004b0e:	0a55      	lsrs	r5, r2, #9
 8004b10:	4208      	tst	r0, r1
 8004b12:	d00c      	beq.n	8004b2e <__aeabi_f2d+0x2e>
 8004b14:	21e0      	movs	r1, #224	; 0xe0
 8004b16:	0089      	lsls	r1, r1, #2
 8004b18:	468c      	mov	ip, r1
 8004b1a:	076d      	lsls	r5, r5, #29
 8004b1c:	0b12      	lsrs	r2, r2, #12
 8004b1e:	4463      	add	r3, ip
 8004b20:	051b      	lsls	r3, r3, #20
 8004b22:	4313      	orrs	r3, r2
 8004b24:	07e4      	lsls	r4, r4, #31
 8004b26:	4323      	orrs	r3, r4
 8004b28:	0028      	movs	r0, r5
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d114      	bne.n	8004b5c <__aeabi_f2d+0x5c>
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	d01b      	beq.n	8004b6e <__aeabi_f2d+0x6e>
 8004b36:	0028      	movs	r0, r5
 8004b38:	f000 f8b0 	bl	8004c9c <__clzsi2>
 8004b3c:	280a      	cmp	r0, #10
 8004b3e:	dc1c      	bgt.n	8004b7a <__aeabi_f2d+0x7a>
 8004b40:	230b      	movs	r3, #11
 8004b42:	002a      	movs	r2, r5
 8004b44:	1a1b      	subs	r3, r3, r0
 8004b46:	40da      	lsrs	r2, r3
 8004b48:	0003      	movs	r3, r0
 8004b4a:	3315      	adds	r3, #21
 8004b4c:	409d      	lsls	r5, r3
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <__aeabi_f2d+0x88>)
 8004b50:	0312      	lsls	r2, r2, #12
 8004b52:	1a1b      	subs	r3, r3, r0
 8004b54:	055b      	lsls	r3, r3, #21
 8004b56:	0b12      	lsrs	r2, r2, #12
 8004b58:	0d5b      	lsrs	r3, r3, #21
 8004b5a:	e7e1      	b.n	8004b20 <__aeabi_f2d+0x20>
 8004b5c:	2d00      	cmp	r5, #0
 8004b5e:	d009      	beq.n	8004b74 <__aeabi_f2d+0x74>
 8004b60:	0b13      	lsrs	r3, r2, #12
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	0312      	lsls	r2, r2, #12
 8004b66:	431a      	orrs	r2, r3
 8004b68:	076d      	lsls	r5, r5, #29
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <__aeabi_f2d+0x8c>)
 8004b6c:	e7d8      	b.n	8004b20 <__aeabi_f2d+0x20>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2200      	movs	r2, #0
 8004b72:	e7d5      	b.n	8004b20 <__aeabi_f2d+0x20>
 8004b74:	2200      	movs	r2, #0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <__aeabi_f2d+0x8c>)
 8004b78:	e7d2      	b.n	8004b20 <__aeabi_f2d+0x20>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	002a      	movs	r2, r5
 8004b7e:	3b0b      	subs	r3, #11
 8004b80:	409a      	lsls	r2, r3
 8004b82:	2500      	movs	r5, #0
 8004b84:	e7e3      	b.n	8004b4e <__aeabi_f2d+0x4e>
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	00000389 	.word	0x00000389
 8004b8c:	000007ff 	.word	0x000007ff

08004b90 <__aeabi_d2f>:
 8004b90:	0002      	movs	r2, r0
 8004b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b94:	004b      	lsls	r3, r1, #1
 8004b96:	030d      	lsls	r5, r1, #12
 8004b98:	0f40      	lsrs	r0, r0, #29
 8004b9a:	0d5b      	lsrs	r3, r3, #21
 8004b9c:	0fcc      	lsrs	r4, r1, #31
 8004b9e:	0a6d      	lsrs	r5, r5, #9
 8004ba0:	493a      	ldr	r1, [pc, #232]	; (8004c8c <__aeabi_d2f+0xfc>)
 8004ba2:	4305      	orrs	r5, r0
 8004ba4:	1c58      	adds	r0, r3, #1
 8004ba6:	00d7      	lsls	r7, r2, #3
 8004ba8:	4208      	tst	r0, r1
 8004baa:	d00a      	beq.n	8004bc2 <__aeabi_d2f+0x32>
 8004bac:	4938      	ldr	r1, [pc, #224]	; (8004c90 <__aeabi_d2f+0x100>)
 8004bae:	1859      	adds	r1, r3, r1
 8004bb0:	29fe      	cmp	r1, #254	; 0xfe
 8004bb2:	dd16      	ble.n	8004be2 <__aeabi_d2f+0x52>
 8004bb4:	20ff      	movs	r0, #255	; 0xff
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	05c0      	lsls	r0, r0, #23
 8004bba:	4310      	orrs	r0, r2
 8004bbc:	07e4      	lsls	r4, r4, #31
 8004bbe:	4320      	orrs	r0, r4
 8004bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <__aeabi_d2f+0x44>
 8004bc6:	433d      	orrs	r5, r7
 8004bc8:	d026      	beq.n	8004c18 <__aeabi_d2f+0x88>
 8004bca:	2205      	movs	r2, #5
 8004bcc:	0192      	lsls	r2, r2, #6
 8004bce:	0a52      	lsrs	r2, r2, #9
 8004bd0:	b2d8      	uxtb	r0, r3
 8004bd2:	e7f1      	b.n	8004bb8 <__aeabi_d2f+0x28>
 8004bd4:	432f      	orrs	r7, r5
 8004bd6:	d0ed      	beq.n	8004bb4 <__aeabi_d2f+0x24>
 8004bd8:	2280      	movs	r2, #128	; 0x80
 8004bda:	03d2      	lsls	r2, r2, #15
 8004bdc:	20ff      	movs	r0, #255	; 0xff
 8004bde:	432a      	orrs	r2, r5
 8004be0:	e7ea      	b.n	8004bb8 <__aeabi_d2f+0x28>
 8004be2:	2900      	cmp	r1, #0
 8004be4:	dd1b      	ble.n	8004c1e <__aeabi_d2f+0x8e>
 8004be6:	0192      	lsls	r2, r2, #6
 8004be8:	1e50      	subs	r0, r2, #1
 8004bea:	4182      	sbcs	r2, r0
 8004bec:	00ed      	lsls	r5, r5, #3
 8004bee:	0f7f      	lsrs	r7, r7, #29
 8004bf0:	432a      	orrs	r2, r5
 8004bf2:	433a      	orrs	r2, r7
 8004bf4:	0753      	lsls	r3, r2, #29
 8004bf6:	d047      	beq.n	8004c88 <__aeabi_d2f+0xf8>
 8004bf8:	230f      	movs	r3, #15
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d000      	beq.n	8004c02 <__aeabi_d2f+0x72>
 8004c00:	3204      	adds	r2, #4
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	04db      	lsls	r3, r3, #19
 8004c06:	4013      	ands	r3, r2
 8004c08:	d03e      	beq.n	8004c88 <__aeabi_d2f+0xf8>
 8004c0a:	1c48      	adds	r0, r1, #1
 8004c0c:	29fe      	cmp	r1, #254	; 0xfe
 8004c0e:	d0d1      	beq.n	8004bb4 <__aeabi_d2f+0x24>
 8004c10:	0192      	lsls	r2, r2, #6
 8004c12:	0a52      	lsrs	r2, r2, #9
 8004c14:	b2c0      	uxtb	r0, r0
 8004c16:	e7cf      	b.n	8004bb8 <__aeabi_d2f+0x28>
 8004c18:	2000      	movs	r0, #0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	e7cc      	b.n	8004bb8 <__aeabi_d2f+0x28>
 8004c1e:	000a      	movs	r2, r1
 8004c20:	3217      	adds	r2, #23
 8004c22:	db2f      	blt.n	8004c84 <__aeabi_d2f+0xf4>
 8004c24:	2680      	movs	r6, #128	; 0x80
 8004c26:	0436      	lsls	r6, r6, #16
 8004c28:	432e      	orrs	r6, r5
 8004c2a:	251e      	movs	r5, #30
 8004c2c:	1a6d      	subs	r5, r5, r1
 8004c2e:	2d1f      	cmp	r5, #31
 8004c30:	dd11      	ble.n	8004c56 <__aeabi_d2f+0xc6>
 8004c32:	2202      	movs	r2, #2
 8004c34:	4252      	negs	r2, r2
 8004c36:	1a52      	subs	r2, r2, r1
 8004c38:	0031      	movs	r1, r6
 8004c3a:	40d1      	lsrs	r1, r2
 8004c3c:	2d20      	cmp	r5, #32
 8004c3e:	d004      	beq.n	8004c4a <__aeabi_d2f+0xba>
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <__aeabi_d2f+0x104>)
 8004c42:	4694      	mov	ip, r2
 8004c44:	4463      	add	r3, ip
 8004c46:	409e      	lsls	r6, r3
 8004c48:	4337      	orrs	r7, r6
 8004c4a:	003a      	movs	r2, r7
 8004c4c:	1e53      	subs	r3, r2, #1
 8004c4e:	419a      	sbcs	r2, r3
 8004c50:	430a      	orrs	r2, r1
 8004c52:	2100      	movs	r1, #0
 8004c54:	e7ce      	b.n	8004bf4 <__aeabi_d2f+0x64>
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <__aeabi_d2f+0x108>)
 8004c58:	0038      	movs	r0, r7
 8004c5a:	4694      	mov	ip, r2
 8004c5c:	4463      	add	r3, ip
 8004c5e:	4098      	lsls	r0, r3
 8004c60:	003a      	movs	r2, r7
 8004c62:	1e41      	subs	r1, r0, #1
 8004c64:	4188      	sbcs	r0, r1
 8004c66:	409e      	lsls	r6, r3
 8004c68:	40ea      	lsrs	r2, r5
 8004c6a:	4330      	orrs	r0, r6
 8004c6c:	4302      	orrs	r2, r0
 8004c6e:	2100      	movs	r1, #0
 8004c70:	0753      	lsls	r3, r2, #29
 8004c72:	d1c1      	bne.n	8004bf8 <__aeabi_d2f+0x68>
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	0013      	movs	r3, r2
 8004c78:	04c9      	lsls	r1, r1, #19
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	400b      	ands	r3, r1
 8004c7e:	420a      	tst	r2, r1
 8004c80:	d1c6      	bne.n	8004c10 <__aeabi_d2f+0x80>
 8004c82:	e7a3      	b.n	8004bcc <__aeabi_d2f+0x3c>
 8004c84:	2300      	movs	r3, #0
 8004c86:	e7a0      	b.n	8004bca <__aeabi_d2f+0x3a>
 8004c88:	000b      	movs	r3, r1
 8004c8a:	e79f      	b.n	8004bcc <__aeabi_d2f+0x3c>
 8004c8c:	000007fe 	.word	0x000007fe
 8004c90:	fffffc80 	.word	0xfffffc80
 8004c94:	fffffca2 	.word	0xfffffca2
 8004c98:	fffffc82 	.word	0xfffffc82

08004c9c <__clzsi2>:
 8004c9c:	211c      	movs	r1, #28
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	4298      	cmp	r0, r3
 8004ca4:	d301      	bcc.n	8004caa <__clzsi2+0xe>
 8004ca6:	0c00      	lsrs	r0, r0, #16
 8004ca8:	3910      	subs	r1, #16
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	4298      	cmp	r0, r3
 8004cae:	d301      	bcc.n	8004cb4 <__clzsi2+0x18>
 8004cb0:	0a00      	lsrs	r0, r0, #8
 8004cb2:	3908      	subs	r1, #8
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	d301      	bcc.n	8004cbe <__clzsi2+0x22>
 8004cba:	0900      	lsrs	r0, r0, #4
 8004cbc:	3904      	subs	r1, #4
 8004cbe:	a202      	add	r2, pc, #8	; (adr r2, 8004cc8 <__clzsi2+0x2c>)
 8004cc0:	5c10      	ldrb	r0, [r2, r0]
 8004cc2:	1840      	adds	r0, r0, r1
 8004cc4:	4770      	bx	lr
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	02020304 	.word	0x02020304
 8004ccc:	01010101 	.word	0x01010101
	...

08004cd8 <__clzdi2>:
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d103      	bne.n	8004ce6 <__clzdi2+0xe>
 8004cde:	f7ff ffdd 	bl	8004c9c <__clzsi2>
 8004ce2:	3020      	adds	r0, #32
 8004ce4:	e002      	b.n	8004cec <__clzdi2+0x14>
 8004ce6:	0008      	movs	r0, r1
 8004ce8:	f7ff ffd8 	bl	8004c9c <__clzsi2>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	46c0      	nop			; (mov r8, r8)

08004cf0 <__divdi3>:
 8004cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf2:	4657      	mov	r7, sl
 8004cf4:	464e      	mov	r6, r9
 8004cf6:	4645      	mov	r5, r8
 8004cf8:	46de      	mov	lr, fp
 8004cfa:	b5e0      	push	{r5, r6, r7, lr}
 8004cfc:	000f      	movs	r7, r1
 8004cfe:	0019      	movs	r1, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	0006      	movs	r6, r0
 8004d04:	4698      	mov	r8, r3
 8004d06:	0010      	movs	r0, r2
 8004d08:	b083      	sub	sp, #12
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	da07      	bge.n	8004d1e <__divdi3+0x2e>
 8004d0e:	0033      	movs	r3, r6
 8004d10:	003c      	movs	r4, r7
 8004d12:	2700      	movs	r7, #0
 8004d14:	425e      	negs	r6, r3
 8004d16:	41a7      	sbcs	r7, r4
 8004d18:	2301      	movs	r3, #1
 8004d1a:	425b      	negs	r3, r3
 8004d1c:	4698      	mov	r8, r3
 8004d1e:	2900      	cmp	r1, #0
 8004d20:	da07      	bge.n	8004d32 <__divdi3+0x42>
 8004d22:	4643      	mov	r3, r8
 8004d24:	43db      	mvns	r3, r3
 8004d26:	000c      	movs	r4, r1
 8004d28:	4698      	mov	r8, r3
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4258      	negs	r0, r3
 8004d30:	41a1      	sbcs	r1, r4
 8004d32:	0034      	movs	r4, r6
 8004d34:	003d      	movs	r5, r7
 8004d36:	4682      	mov	sl, r0
 8004d38:	4689      	mov	r9, r1
 8004d3a:	42b9      	cmp	r1, r7
 8004d3c:	d869      	bhi.n	8004e12 <__divdi3+0x122>
 8004d3e:	d066      	beq.n	8004e0e <__divdi3+0x11e>
 8004d40:	4649      	mov	r1, r9
 8004d42:	4650      	mov	r0, sl
 8004d44:	f7ff ffc8 	bl	8004cd8 <__clzdi2>
 8004d48:	4683      	mov	fp, r0
 8004d4a:	0039      	movs	r1, r7
 8004d4c:	0030      	movs	r0, r6
 8004d4e:	f7ff ffc3 	bl	8004cd8 <__clzdi2>
 8004d52:	465b      	mov	r3, fp
 8004d54:	1a1b      	subs	r3, r3, r0
 8004d56:	469c      	mov	ip, r3
 8004d58:	3b20      	subs	r3, #32
 8004d5a:	d46b      	bmi.n	8004e34 <__divdi3+0x144>
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	4099      	lsls	r1, r3
 8004d60:	469b      	mov	fp, r3
 8004d62:	4660      	mov	r0, ip
 8004d64:	000b      	movs	r3, r1
 8004d66:	4651      	mov	r1, sl
 8004d68:	4081      	lsls	r1, r0
 8004d6a:	000a      	movs	r2, r1
 8004d6c:	42bb      	cmp	r3, r7
 8004d6e:	d900      	bls.n	8004d72 <__divdi3+0x82>
 8004d70:	e073      	b.n	8004e5a <__divdi3+0x16a>
 8004d72:	42bb      	cmp	r3, r7
 8004d74:	d100      	bne.n	8004d78 <__divdi3+0x88>
 8004d76:	e07a      	b.n	8004e6e <__divdi3+0x17e>
 8004d78:	0034      	movs	r4, r6
 8004d7a:	003d      	movs	r5, r7
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	1aa4      	subs	r4, r4, r2
 8004d80:	419d      	sbcs	r5, r3
 8004d82:	2900      	cmp	r1, #0
 8004d84:	da00      	bge.n	8004d88 <__divdi3+0x98>
 8004d86:	e075      	b.n	8004e74 <__divdi3+0x184>
 8004d88:	2100      	movs	r1, #0
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	2601      	movs	r6, #1
 8004d8e:	9000      	str	r0, [sp, #0]
 8004d90:	9101      	str	r1, [sp, #4]
 8004d92:	4659      	mov	r1, fp
 8004d94:	408e      	lsls	r6, r1
 8004d96:	9601      	str	r6, [sp, #4]
 8004d98:	4661      	mov	r1, ip
 8004d9a:	2601      	movs	r6, #1
 8004d9c:	408e      	lsls	r6, r1
 8004d9e:	4661      	mov	r1, ip
 8004da0:	9600      	str	r6, [sp, #0]
 8004da2:	2900      	cmp	r1, #0
 8004da4:	d060      	beq.n	8004e68 <__divdi3+0x178>
 8004da6:	07d9      	lsls	r1, r3, #31
 8004da8:	0856      	lsrs	r6, r2, #1
 8004daa:	430e      	orrs	r6, r1
 8004dac:	085f      	lsrs	r7, r3, #1
 8004dae:	4661      	mov	r1, ip
 8004db0:	2201      	movs	r2, #1
 8004db2:	2300      	movs	r3, #0
 8004db4:	e00c      	b.n	8004dd0 <__divdi3+0xe0>
 8004db6:	42af      	cmp	r7, r5
 8004db8:	d101      	bne.n	8004dbe <__divdi3+0xce>
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d80a      	bhi.n	8004dd4 <__divdi3+0xe4>
 8004dbe:	1ba4      	subs	r4, r4, r6
 8004dc0:	41bd      	sbcs	r5, r7
 8004dc2:	1924      	adds	r4, r4, r4
 8004dc4:	416d      	adcs	r5, r5
 8004dc6:	3901      	subs	r1, #1
 8004dc8:	18a4      	adds	r4, r4, r2
 8004dca:	415d      	adcs	r5, r3
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	d006      	beq.n	8004dde <__divdi3+0xee>
 8004dd0:	42af      	cmp	r7, r5
 8004dd2:	d9f0      	bls.n	8004db6 <__divdi3+0xc6>
 8004dd4:	3901      	subs	r1, #1
 8004dd6:	1924      	adds	r4, r4, r4
 8004dd8:	416d      	adcs	r5, r5
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	d1f8      	bne.n	8004dd0 <__divdi3+0xe0>
 8004dde:	9800      	ldr	r0, [sp, #0]
 8004de0:	9901      	ldr	r1, [sp, #4]
 8004de2:	465b      	mov	r3, fp
 8004de4:	1900      	adds	r0, r0, r4
 8004de6:	4169      	adcs	r1, r5
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db4e      	blt.n	8004e8a <__divdi3+0x19a>
 8004dec:	002e      	movs	r6, r5
 8004dee:	002c      	movs	r4, r5
 8004df0:	40de      	lsrs	r6, r3
 8004df2:	4663      	mov	r3, ip
 8004df4:	40dc      	lsrs	r4, r3
 8004df6:	465b      	mov	r3, fp
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db56      	blt.n	8004eaa <__divdi3+0x1ba>
 8004dfc:	0034      	movs	r4, r6
 8004dfe:	409c      	lsls	r4, r3
 8004e00:	0023      	movs	r3, r4
 8004e02:	4664      	mov	r4, ip
 8004e04:	40a6      	lsls	r6, r4
 8004e06:	0032      	movs	r2, r6
 8004e08:	1a80      	subs	r0, r0, r2
 8004e0a:	4199      	sbcs	r1, r3
 8004e0c:	e003      	b.n	8004e16 <__divdi3+0x126>
 8004e0e:	42b0      	cmp	r0, r6
 8004e10:	d996      	bls.n	8004d40 <__divdi3+0x50>
 8004e12:	2000      	movs	r0, #0
 8004e14:	2100      	movs	r1, #0
 8004e16:	4643      	mov	r3, r8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <__divdi3+0x136>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	000c      	movs	r4, r1
 8004e20:	2100      	movs	r1, #0
 8004e22:	4258      	negs	r0, r3
 8004e24:	41a1      	sbcs	r1, r4
 8004e26:	b003      	add	sp, #12
 8004e28:	bcf0      	pop	{r4, r5, r6, r7}
 8004e2a:	46bb      	mov	fp, r7
 8004e2c:	46b2      	mov	sl, r6
 8004e2e:	46a9      	mov	r9, r5
 8004e30:	46a0      	mov	r8, r4
 8004e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e34:	4662      	mov	r2, ip
 8004e36:	4648      	mov	r0, r9
 8004e38:	469b      	mov	fp, r3
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	4651      	mov	r1, sl
 8004e3e:	4090      	lsls	r0, r2
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	40d9      	lsrs	r1, r3
 8004e44:	0003      	movs	r3, r0
 8004e46:	9100      	str	r1, [sp, #0]
 8004e48:	9900      	ldr	r1, [sp, #0]
 8004e4a:	4660      	mov	r0, ip
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	4651      	mov	r1, sl
 8004e50:	4081      	lsls	r1, r0
 8004e52:	000a      	movs	r2, r1
 8004e54:	42bb      	cmp	r3, r7
 8004e56:	d800      	bhi.n	8004e5a <__divdi3+0x16a>
 8004e58:	e78b      	b.n	8004d72 <__divdi3+0x82>
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	9000      	str	r0, [sp, #0]
 8004e60:	9101      	str	r1, [sp, #4]
 8004e62:	4661      	mov	r1, ip
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d19e      	bne.n	8004da6 <__divdi3+0xb6>
 8004e68:	9800      	ldr	r0, [sp, #0]
 8004e6a:	9901      	ldr	r1, [sp, #4]
 8004e6c:	e7d3      	b.n	8004e16 <__divdi3+0x126>
 8004e6e:	42b1      	cmp	r1, r6
 8004e70:	d8f3      	bhi.n	8004e5a <__divdi3+0x16a>
 8004e72:	e781      	b.n	8004d78 <__divdi3+0x88>
 8004e74:	4661      	mov	r1, ip
 8004e76:	2620      	movs	r6, #32
 8004e78:	2701      	movs	r7, #1
 8004e7a:	1a76      	subs	r6, r6, r1
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	2100      	movs	r1, #0
 8004e80:	40f7      	lsrs	r7, r6
 8004e82:	9000      	str	r0, [sp, #0]
 8004e84:	9101      	str	r1, [sp, #4]
 8004e86:	9701      	str	r7, [sp, #4]
 8004e88:	e786      	b.n	8004d98 <__divdi3+0xa8>
 8004e8a:	4662      	mov	r2, ip
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	002a      	movs	r2, r5
 8004e92:	409a      	lsls	r2, r3
 8004e94:	0026      	movs	r6, r4
 8004e96:	0013      	movs	r3, r2
 8004e98:	4662      	mov	r2, ip
 8004e9a:	40d6      	lsrs	r6, r2
 8004e9c:	002c      	movs	r4, r5
 8004e9e:	431e      	orrs	r6, r3
 8004ea0:	4663      	mov	r3, ip
 8004ea2:	40dc      	lsrs	r4, r3
 8004ea4:	465b      	mov	r3, fp
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	daa8      	bge.n	8004dfc <__divdi3+0x10c>
 8004eaa:	4662      	mov	r2, ip
 8004eac:	2320      	movs	r3, #32
 8004eae:	0035      	movs	r5, r6
 8004eb0:	4094      	lsls	r4, r2
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	40dd      	lsrs	r5, r3
 8004eb6:	0023      	movs	r3, r4
 8004eb8:	432b      	orrs	r3, r5
 8004eba:	e7a2      	b.n	8004e02 <__divdi3+0x112>

08004ebc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec0:	f3bf 8f4f 	dsb	sy
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <__NVIC_SystemReset+0x1c>)
 8004ec8:	4a04      	ldr	r2, [pc, #16]	; (8004edc <__NVIC_SystemReset+0x20>)
 8004eca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ecc:	f3bf 8f4f 	dsb	sy
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	e7fd      	b.n	8004ed2 <__NVIC_SystemReset+0x16>
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	e000ed00 	.word	0xe000ed00
 8004edc:	05fa0004 	.word	0x05fa0004

08004ee0 <get_epoch_time>:
uint8_t callback_data[100];

void App_web_show_sys_time();

time_t get_epoch_time(void)
{
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b090      	sub	sp, #64	; 0x40
 8004ee4:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    HAL_RTC_GetTime(&hrtc, &time, FORMAT_BIN);
 8004ee6:	2428      	movs	r4, #40	; 0x28
 8004ee8:	1939      	adds	r1, r7, r4
 8004eea:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <get_epoch_time+0x8c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f00d fff6 	bl	8012ee0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, FORMAT_BIN);
 8004ef4:	253c      	movs	r5, #60	; 0x3c
 8004ef6:	1979      	adds	r1, r7, r5
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <get_epoch_time+0x8c>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	0018      	movs	r0, r3
 8004efe:	f00e f8dd 	bl	80130bc <HAL_RTC_GetDate>
    struct tm datetime = {0};
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	0018      	movs	r0, r3
 8004f06:	2324      	movs	r3, #36	; 0x24
 8004f08:	001a      	movs	r2, r3
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f01d fe44 	bl	8022b98 <memset>
    datetime.tm_sec = time.Seconds;
 8004f10:	193b      	adds	r3, r7, r4
 8004f12:	789b      	ldrb	r3, [r3, #2]
 8004f14:	001a      	movs	r2, r3
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	601a      	str	r2, [r3, #0]
    datetime.tm_min = time.Minutes;
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	001a      	movs	r2, r3
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	605a      	str	r2, [r3, #4]
    datetime.tm_hour = time.Hours;
 8004f24:	193b      	adds	r3, r7, r4
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	001a      	movs	r2, r3
 8004f2a:	1d3b      	adds	r3, r7, #4
 8004f2c:	609a      	str	r2, [r3, #8]
    datetime.tm_mday = date.Date;
 8004f2e:	197b      	adds	r3, r7, r5
 8004f30:	789b      	ldrb	r3, [r3, #2]
 8004f32:	001a      	movs	r2, r3
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	60da      	str	r2, [r3, #12]
    datetime.tm_mon = date.Month - 1;
 8004f38:	197b      	adds	r3, r7, r5
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	611a      	str	r2, [r3, #16]
    datetime.tm_year = date.Year + 100;
 8004f42:	197b      	adds	r3, r7, r5
 8004f44:	78db      	ldrb	r3, [r3, #3]
 8004f46:	3364      	adds	r3, #100	; 0x64
 8004f48:	001a      	movs	r2, r3
 8004f4a:	1d3b      	adds	r3, r7, #4
 8004f4c:	615a      	str	r2, [r3, #20]
    datetime.tm_isdst = 0;
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	2200      	movs	r2, #0
 8004f52:	621a      	str	r2, [r3, #32]
    return mktime(&datetime);
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	0018      	movs	r0, r3
 8004f58:	f01d ffb2 	bl	8022ec0 <mktime>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	000b      	movs	r3, r1
}
 8004f60:	0010      	movs	r0, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b010      	add	sp, #64	; 0x40
 8004f68:	bdb0      	pop	{r4, r5, r7, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	20006968 	.word	0x20006968

08004f70 <Get_Hours>:
uint8_t Get_Hours(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    HAL_RTC_GetTime(&hrtc, &time, FORMAT_BIN);
 8004f76:	0039      	movs	r1, r7
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <Get_Hours+0x2c>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f00d ffaf 	bl	8012ee0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, FORMAT_BIN);
 8004f82:	2314      	movs	r3, #20
 8004f84:	18f9      	adds	r1, r7, r3
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <Get_Hours+0x2c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f00e f896 	bl	80130bc <HAL_RTC_GetDate>
    return time.Hours;
 8004f90:	003b      	movs	r3, r7
 8004f92:	781b      	ldrb	r3, [r3, #0]
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b006      	add	sp, #24
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20006968 	.word	0x20006968

08004fa0 <Get_Minutes>:
uint8_t Get_Minutes(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    HAL_RTC_GetTime(&hrtc, &time, FORMAT_BIN);
 8004fa6:	0039      	movs	r1, r7
 8004fa8:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <Get_Minutes+0x2c>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	0018      	movs	r0, r3
 8004fae:	f00d ff97 	bl	8012ee0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, FORMAT_BIN);
 8004fb2:	2314      	movs	r3, #20
 8004fb4:	18f9      	adds	r1, r7, r3
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <Get_Minutes+0x2c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f00e f87e 	bl	80130bc <HAL_RTC_GetDate>
    return time.Minutes;
 8004fc0:	003b      	movs	r3, r7
 8004fc2:	785b      	ldrb	r3, [r3, #1]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b006      	add	sp, #24
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20006968 	.word	0x20006968

08004fd0 <print_network_information>:

void print_network_information(void)
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af04      	add	r7, sp, #16
    memset(&gWIZNETINFO, 0, sizeof(gWIZNETINFO));
 8004fd6:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <print_network_information+0xd8>)
 8004fd8:	2217      	movs	r2, #23
 8004fda:	2100      	movs	r1, #0
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f01d fddb 	bl	8022b98 <memset>

    wizchip_getnetinfo(&gWIZNETINFO);
 8004fe2:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <print_network_information+0xd8>)
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f017 fe85 	bl	801ccf4 <wizchip_getnetinfo>
    printf("MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <print_network_information+0xd8>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	001c      	movs	r4, r3
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <print_network_information+0xd8>)
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	001d      	movs	r5, r3
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <print_network_information+0xd8>)
 8004ff8:	789b      	ldrb	r3, [r3, #2]
 8004ffa:	001e      	movs	r6, r3
 8004ffc:	4b2a      	ldr	r3, [pc, #168]	; (80050a8 <print_network_information+0xd8>)
 8004ffe:	78db      	ldrb	r3, [r3, #3]
 8005000:	001a      	movs	r2, r3
 8005002:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <print_network_information+0xd8>)
 8005004:	791b      	ldrb	r3, [r3, #4]
 8005006:	0019      	movs	r1, r3
 8005008:	4b27      	ldr	r3, [pc, #156]	; (80050a8 <print_network_information+0xd8>)
 800500a:	795b      	ldrb	r3, [r3, #5]
 800500c:	4827      	ldr	r0, [pc, #156]	; (80050ac <print_network_information+0xdc>)
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	9101      	str	r1, [sp, #4]
 8005012:	9200      	str	r2, [sp, #0]
 8005014:	0033      	movs	r3, r6
 8005016:	002a      	movs	r2, r5
 8005018:	0021      	movs	r1, r4
 800501a:	f01d fbfb 	bl	8022814 <iprintf>
    printf("IP  Address : %d.%d.%d.%d\n\r", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <print_network_information+0xd8>)
 8005020:	799b      	ldrb	r3, [r3, #6]
 8005022:	0019      	movs	r1, r3
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <print_network_information+0xd8>)
 8005026:	79db      	ldrb	r3, [r3, #7]
 8005028:	001a      	movs	r2, r3
 800502a:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <print_network_information+0xd8>)
 800502c:	7a1b      	ldrb	r3, [r3, #8]
 800502e:	001c      	movs	r4, r3
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <print_network_information+0xd8>)
 8005032:	7a5b      	ldrb	r3, [r3, #9]
 8005034:	481e      	ldr	r0, [pc, #120]	; (80050b0 <print_network_information+0xe0>)
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	0023      	movs	r3, r4
 800503a:	f01d fbeb 	bl	8022814 <iprintf>
    printf("Subnet Mask : %d.%d.%d.%d\n\r", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 800503e:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <print_network_information+0xd8>)
 8005040:	7a9b      	ldrb	r3, [r3, #10]
 8005042:	0019      	movs	r1, r3
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <print_network_information+0xd8>)
 8005046:	7adb      	ldrb	r3, [r3, #11]
 8005048:	001a      	movs	r2, r3
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <print_network_information+0xd8>)
 800504c:	7b1b      	ldrb	r3, [r3, #12]
 800504e:	001c      	movs	r4, r3
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <print_network_information+0xd8>)
 8005052:	7b5b      	ldrb	r3, [r3, #13]
 8005054:	4817      	ldr	r0, [pc, #92]	; (80050b4 <print_network_information+0xe4>)
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	0023      	movs	r3, r4
 800505a:	f01d fbdb 	bl	8022814 <iprintf>
    printf("Gateway     : %d.%d.%d.%d\n\r", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <print_network_information+0xd8>)
 8005060:	7b9b      	ldrb	r3, [r3, #14]
 8005062:	0019      	movs	r1, r3
 8005064:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <print_network_information+0xd8>)
 8005066:	7bdb      	ldrb	r3, [r3, #15]
 8005068:	001a      	movs	r2, r3
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <print_network_information+0xd8>)
 800506c:	7c1b      	ldrb	r3, [r3, #16]
 800506e:	001c      	movs	r4, r3
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <print_network_information+0xd8>)
 8005072:	7c5b      	ldrb	r3, [r3, #17]
 8005074:	4810      	ldr	r0, [pc, #64]	; (80050b8 <print_network_information+0xe8>)
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	0023      	movs	r3, r4
 800507a:	f01d fbcb 	bl	8022814 <iprintf>
    printf("DNS Server  : %d.%d.%d.%d\n\r", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <print_network_information+0xd8>)
 8005080:	7c9b      	ldrb	r3, [r3, #18]
 8005082:	0019      	movs	r1, r3
 8005084:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <print_network_information+0xd8>)
 8005086:	7cdb      	ldrb	r3, [r3, #19]
 8005088:	001a      	movs	r2, r3
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <print_network_information+0xd8>)
 800508c:	7d1b      	ldrb	r3, [r3, #20]
 800508e:	001c      	movs	r4, r3
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <print_network_information+0xd8>)
 8005092:	7d5b      	ldrb	r3, [r3, #21]
 8005094:	4809      	ldr	r0, [pc, #36]	; (80050bc <print_network_information+0xec>)
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	0023      	movs	r3, r4
 800509a:	f01d fbbb 	bl	8022814 <iprintf>
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b001      	add	sp, #4
 80050a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	2000627c 	.word	0x2000627c
 80050ac:	080250b0 	.word	0x080250b0
 80050b0:	080250e0 	.word	0x080250e0
 80050b4:	080250fc 	.word	0x080250fc
 80050b8:	08025118 	.word	0x08025118
 80050bc:	08025134 	.word	0x08025134

080050c0 <process_dhcp>:

int process_dhcp(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
    int8_t ret = 0;
 80050c6:	1dfb      	adds	r3, r7, #7
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
    while (1)
    {
        ret = DHCP_run();
 80050cc:	f015 fcdc 	bl	801aa88 <DHCP_run>
 80050d0:	0003      	movs	r3, r0
 80050d2:	001a      	movs	r2, r3
 80050d4:	1dfb      	adds	r3, r7, #7
 80050d6:	701a      	strb	r2, [r3, #0]
        if (ret == DHCP_IP_LEASED)
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b25b      	sxtb	r3, r3
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d10e      	bne.n	8005100 <process_dhcp+0x40>
        {
#ifdef _MAIN_DEBUG_
            printf(" - DHCP Success\r\n");
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <process_dhcp+0x90>)
 80050e4:	0018      	movs	r0, r3
 80050e6:	f01d fc05 	bl	80228f4 <puts>
#endif
            printf("=============================\r\n");
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <process_dhcp+0x94>)
 80050ec:	0018      	movs	r0, r3
 80050ee:	f01d fc01 	bl	80228f4 <puts>
            print_network_information();
 80050f2:	f7ff ff6d 	bl	8004fd0 <print_network_information>
            printf("=============================\r\n");
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <process_dhcp+0x94>)
 80050f8:	0018      	movs	r0, r3
 80050fa:	f01d fbfb 	bl	80228f4 <puts>
            break;
 80050fe:	e020      	b.n	8005142 <process_dhcp+0x82>
        }
        else if (ret == DHCP_FAILED)
 8005100:	1dfb      	adds	r3, r7, #7
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	b25b      	sxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d111      	bne.n	800512e <process_dhcp+0x6e>
        {
            dhcp_retry++;
 800510a:	4b13      	ldr	r3, [pc, #76]	; (8005158 <process_dhcp+0x98>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	3301      	adds	r3, #1
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <process_dhcp+0x98>)
 8005114:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
            if (dhcp_retry <= 3)
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <process_dhcp+0x98>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d807      	bhi.n	800512e <process_dhcp+0x6e>
                printf(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
 800511e:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <process_dhcp+0x98>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	001a      	movs	r2, r3
 8005124:	4b0d      	ldr	r3, [pc, #52]	; (800515c <process_dhcp+0x9c>)
 8005126:	0011      	movs	r1, r2
 8005128:	0018      	movs	r0, r3
 800512a:	f01d fb73 	bl	8022814 <iprintf>
#endif
        }

        if (dhcp_retry > 3)
 800512e:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <process_dhcp+0x98>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d9ca      	bls.n	80050cc <process_dhcp+0xc>
        {
#ifdef _MAIN_DEBUG_
            printf(" - DHCP Failed\r\n\r\n");
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <process_dhcp+0xa0>)
 8005138:	0018      	movs	r0, r3
 800513a:	f01d fbdb 	bl	80228f4 <puts>
#endif
            DHCP_stop();
 800513e:	f015 fdc7 	bl	801acd0 <DHCP_stop>
            break;
        }
    }
    return ret;
 8005142:	1dfb      	adds	r3, r7, #7
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b25b      	sxtb	r3, r3
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}
 8005150:	08025150 	.word	0x08025150
 8005154:	08025164 	.word	0x08025164
 8005158:	20006698 	.word	0x20006698
 800515c:	08025184 	.word	0x08025184
 8005160:	080251b0 	.word	0x080251b0

08005164 <Init_WebAPP>:

void Init_WebAPP(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
    W5500_Init();
 800516a:	f00a f80d 	bl	800f188 <W5500_Init>
    setSHAR(gWIZNETINFO.mac);
 800516e:	4955      	ldr	r1, [pc, #340]	; (80052c4 <Init_WebAPP+0x160>)
 8005170:	2390      	movs	r3, #144	; 0x90
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	2206      	movs	r2, #6
 8005176:	0018      	movs	r0, r3
 8005178:	f013 ffb6 	bl	80190e8 <WIZCHIP_WRITE_BUF>
    wizchip_setnetinfo(&gWIZNETINFO);
 800517c:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <Init_WebAPP+0x160>)
 800517e:	0018      	movs	r0, r3
 8005180:	f017 fd76 	bl	801cc70 <wizchip_setnetinfo>

    if (gWIZNETINFO.dhcp == NETINFO_STATIC)
 8005184:	4b4f      	ldr	r3, [pc, #316]	; (80052c4 <Init_WebAPP+0x160>)
 8005186:	7d9b      	ldrb	r3, [r3, #22]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d104      	bne.n	8005196 <Init_WebAPP+0x32>
    {
        wizchip_getnetinfo(&gWIZNETINFO);
 800518c:	4b4d      	ldr	r3, [pc, #308]	; (80052c4 <Init_WebAPP+0x160>)
 800518e:	0018      	movs	r0, r3
 8005190:	f017 fdb0 	bl	801ccf4 <wizchip_getnetinfo>
 8005194:	e01b      	b.n	80051ce <Init_WebAPP+0x6a>
    }
    else if (gWIZNETINFO.dhcp == NETINFO_DHCP)
 8005196:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <Init_WebAPP+0x160>)
 8005198:	7d9b      	ldrb	r3, [r3, #22]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d117      	bne.n	80051ce <Init_WebAPP+0x6a>
    {
        DHCP_init(0, gDATABUF);
 800519e:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <Init_WebAPP+0x164>)
 80051a0:	0019      	movs	r1, r3
 80051a2:	2000      	movs	r0, #0
 80051a4:	f015 fe4c 	bl	801ae40 <DHCP_init>
        while (process_dhcp() != DHCP_IP_LEASED)
 80051a8:	e006      	b.n	80051b8 <Init_WebAPP+0x54>
        {
            HAL_Delay(500);
 80051aa:	23fa      	movs	r3, #250	; 0xfa
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	0018      	movs	r0, r3
 80051b0:	f00a f8fa 	bl	800f3a8 <HAL_Delay>
            process_dhcp();
 80051b4:	f7ff ff84 	bl	80050c0 <process_dhcp>
        while (process_dhcp() != DHCP_IP_LEASED)
 80051b8:	f7ff ff82 	bl	80050c0 <process_dhcp>
 80051bc:	0003      	movs	r3, r0
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d1f3      	bne.n	80051aa <Init_WebAPP+0x46>
        }

        DHCP_stop();
 80051c2:	f015 fd85 	bl	801acd0 <DHCP_stop>

        wizchip_getnetinfo(&gWIZNETINFO);
 80051c6:	4b3f      	ldr	r3, [pc, #252]	; (80052c4 <Init_WebAPP+0x160>)
 80051c8:	0018      	movs	r0, r3
 80051ca:	f017 fd93 	bl	801ccf4 <wizchip_getnetinfo>
    }

    // now ip has been alloted, now  we can get request to sntp server
    App_web_get_time_and_sync();
 80051ce:	f000 f8d1 	bl	8005374 <App_web_get_time_and_sync>

    // debug function just to show rtc is working
    App_web_show_sys_time();
 80051d2:	f000 f975 	bl	80054c0 <App_web_show_sys_time>

#ifdef _MAIN_DEBUG_
    uint8_t tmpstr[6] = {
 80051d6:	2108      	movs	r1, #8
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	809a      	strh	r2, [r3, #4]
        0,
    };

    ctlwizchip(CW_GET_ID, (void *)tmpstr);
 80051e2:	187b      	adds	r3, r7, r1
 80051e4:	0019      	movs	r1, r3
 80051e6:	2008      	movs	r0, #8
 80051e8:	f017 f8a4 	bl	801c334 <ctlwizchip>

    printf(">> W5500 based Web Server \r\n");
 80051ec:	4b37      	ldr	r3, [pc, #220]	; (80052cc <Init_WebAPP+0x168>)
 80051ee:	0018      	movs	r0, r3
 80051f0:	f01d fb80 	bl	80228f4 <puts>
    printf("=======================================\r\n");
 80051f4:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <Init_WebAPP+0x16c>)
 80051f6:	0018      	movs	r0, r3
 80051f8:	f01d fb7c 	bl	80228f4 <puts>

    Display_Net_Conf(); // Print out the network information to serial terminal
 80051fc:	f009 ff32 	bl	800f064 <Display_Net_Conf>
#endif
    httpServer_init(TX_BUF, RX_BUF, MAX_HTTPSOCK, socknumlist); // Tx/Rx buffers (1kB) / The number of W5500 chip H/W sockets in use
 8005200:	4b34      	ldr	r3, [pc, #208]	; (80052d4 <Init_WebAPP+0x170>)
 8005202:	4935      	ldr	r1, [pc, #212]	; (80052d8 <Init_WebAPP+0x174>)
 8005204:	4835      	ldr	r0, [pc, #212]	; (80052dc <Init_WebAPP+0x178>)
 8005206:	2206      	movs	r2, #6
 8005208:	f019 fe60 	bl	801eecc <httpServer_init>
    reg_httpServer_cbfunc(NVIC_SystemReset, NULL);              // Callback: NXP MCU Reset
 800520c:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <Init_WebAPP+0x17c>)
 800520e:	2100      	movs	r1, #0
 8005210:	0018      	movs	r0, r3
 8005212:	f019 fe79 	bl	801ef08 <reg_httpServer_cbfunc>

    uint16_t content_num = 0;
 8005216:	1dbb      	adds	r3, r7, #6
 8005218:	2200      	movs	r2, #0
 800521a:	801a      	strh	r2, [r3, #0]
    uint32_t file_len = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	603b      	str	r3, [r7, #0]
    if (find_userReg_webContent((uint8_t *)"new_webpage.css", &content_num, &file_len))
 8005220:	003a      	movs	r2, r7
 8005222:	1db9      	adds	r1, r7, #6
 8005224:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <Init_WebAPP+0x180>)
 8005226:	0018      	movs	r0, r3
 8005228:	f01c ff2a 	bl	8022080 <find_userReg_webContent>
 800522c:	1e03      	subs	r3, r0, #0
 800522e:	d00d      	beq.n	800524c <Init_WebAPP+0xe8>
    {
        web_content[content_num].content = (uint8_t *)webpage_css;
 8005230:	1dbb      	adds	r3, r7, #6
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	0018      	movs	r0, r3
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <Init_WebAPP+0x184>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	492c      	ldr	r1, [pc, #176]	; (80052ec <Init_WebAPP+0x188>)
 800523c:	0003      	movs	r3, r0
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	181b      	adds	r3, r3, r0
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	18cb      	adds	r3, r1, r3
 8005246:	3308      	adds	r3, #8
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e006      	b.n	800525a <Init_WebAPP+0xf6>
    }
    else
    {
        reg_httpServer_webContent((uint8_t *)"new_webpage.css", (uint8_t*)webpage_css);
 800524c:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <Init_WebAPP+0x184>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <Init_WebAPP+0x180>)
 8005252:	0011      	movs	r1, r2
 8005254:	0018      	movs	r0, r3
 8005256:	f01c fdff 	bl	8021e58 <reg_httpServer_webContent>
    }
    reg_httpServer_webContent((uint8_t*)"timesyncpage", NULL);
 800525a:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <Init_WebAPP+0x18c>)
 800525c:	2100      	movs	r1, #0
 800525e:	0018      	movs	r0, r3
 8005260:	f01c fdfa 	bl	8021e58 <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t*)"timesync", NULL);
 8005264:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <Init_WebAPP+0x190>)
 8005266:	2100      	movs	r1, #0
 8005268:	0018      	movs	r0, r3
 800526a:	f01c fdf5 	bl	8021e58 <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t*)"gettimesync", NULL);
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <Init_WebAPP+0x194>)
 8005270:	2100      	movs	r1, #0
 8005272:	0018      	movs	r0, r3
 8005274:	f01c fdf0 	bl	8021e58 <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t*)"set_alarm", NULL);
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <Init_WebAPP+0x198>)
 800527a:	2100      	movs	r1, #0
 800527c:	0018      	movs	r0, r3
 800527e:	f01c fdeb 	bl	8021e58 <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t*)"get_alarm", (uint8_t*)NULL);
 8005282:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <Init_WebAPP+0x19c>)
 8005284:	2100      	movs	r1, #0
 8005286:	0018      	movs	r0, r3
 8005288:	f01c fde6 	bl	8021e58 <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t*)"set_file", (uint8_t*)NULL);
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <Init_WebAPP+0x1a0>)
 800528e:	2100      	movs	r1, #0
 8005290:	0018      	movs	r0, r3
 8005292:	f01c fde1 	bl	8021e58 <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t*)"file_get", (uint8_t*)NULL);
 8005296:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <Init_WebAPP+0x1a4>)
 8005298:	2100      	movs	r1, #0
 800529a:	0018      	movs	r0, r3
 800529c:	f01c fddc 	bl	8021e58 <reg_httpServer_webContent>
    reg_httpServer_webContent((uint8_t *)"index.html", (uint8_t *)index_page);
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <Init_WebAPP+0x1a8>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <Init_WebAPP+0x1ac>)
 80052a6:	0011      	movs	r1, r2
 80052a8:	0018      	movs	r0, r3
 80052aa:	f01c fdd5 	bl	8021e58 <reg_httpServer_webContent>
    HAL_Delay(1000);
 80052ae:	23fa      	movs	r3, #250	; 0xfa
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	0018      	movs	r0, r3
 80052b4:	f00a f878 	bl	800f3a8 <HAL_Delay>

#ifdef _MAIN_DEBUG_
    display_reg_webContent_list();
 80052b8:	f01c fe4e 	bl	8021f58 <display_reg_webContent_list>
#ifdef _MAIN_DEBUG_
				display_reg_webContent_list();
#endif
		}
#endif
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	2000627c 	.word	0x2000627c
 80052c8:	20006298 	.word	0x20006298
 80052cc:	080251c4 	.word	0x080251c4
 80052d0:	080251e0 	.word	0x080251e0
 80052d4:	20004f28 	.word	0x20004f28
 80052d8:	2000527c 	.word	0x2000527c
 80052dc:	20005a7c 	.word	0x20005a7c
 80052e0:	08004ebd 	.word	0x08004ebd
 80052e4:	0802520c 	.word	0x0802520c
 80052e8:	20005054 	.word	0x20005054
 80052ec:	200082c4 	.word	0x200082c4
 80052f0:	0802521c 	.word	0x0802521c
 80052f4:	0802522c 	.word	0x0802522c
 80052f8:	08025238 	.word	0x08025238
 80052fc:	08025244 	.word	0x08025244
 8005300:	08025250 	.word	0x08025250
 8005304:	0802525c 	.word	0x0802525c
 8005308:	08025268 	.word	0x08025268
 800530c:	20005044 	.word	0x20005044
 8005310:	08025274 	.word	0x08025274

08005314 <Task_WebAPP>:

void Task_WebAPP(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0

    for (uint16_t i = 0; i < MAX_HTTPSOCK; i++)
 800531a:	1dbb      	adds	r3, r7, #6
 800531c:	2200      	movs	r2, #0
 800531e:	801a      	strh	r2, [r3, #0]
 8005320:	e00a      	b.n	8005338 <Task_WebAPP+0x24>
        httpServer_run(i);
 8005322:	1dbb      	adds	r3, r7, #6
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	0018      	movs	r0, r3
 800532a:	f019 fe07 	bl	801ef3c <httpServer_run>
    for (uint16_t i = 0; i < MAX_HTTPSOCK; i++)
 800532e:	1dbb      	adds	r3, r7, #6
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	1dbb      	adds	r3, r7, #6
 8005334:	3201      	adds	r2, #1
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	1dbb      	adds	r3, r7, #6
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	2b05      	cmp	r3, #5
 800533e:	d9f0      	bls.n	8005322 <Task_WebAPP+0xe>

    // loopback_tcps(SOCK_TCPS, RX_BUF, 5000);
    // loopback_udps(SOCK_UDPS, RX_BUF, 7000);
    if ((HAL_GetTick() - time_last_ntp_sync) >= DEFAULT_NTP_SYNC_TIMEOUT)
 8005340:	f00a f828 	bl	800f394 <HAL_GetTick>
 8005344:	0002      	movs	r2, r0
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <Task_WebAPP+0x58>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	4a08      	ldr	r2, [pc, #32]	; (8005370 <Task_WebAPP+0x5c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d906      	bls.n	8005360 <Task_WebAPP+0x4c>
    {
        time_last_ntp_sync = HAL_GetTick();
 8005352:	f00a f81f 	bl	800f394 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <Task_WebAPP+0x58>)
 800535a:	601a      	str	r2, [r3, #0]
        App_web_get_time_and_sync();
 800535c:	f000 f80a 	bl	8005374 <App_web_get_time_and_sync>
    }
    App_web_show_sys_time();
 8005360:	f000 f8ae 	bl	80054c0 <App_web_show_sys_time>
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20005278 	.word	0x20005278
 8005370:	0036ee7f 	.word	0x0036ee7f

08005374 <App_web_get_time_and_sync>:

void App_web_get_time_and_sync()
{
 8005374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005376:	b08f      	sub	sp, #60	; 0x3c
 8005378:	af04      	add	r7, sp, #16
    datetime tm = {0};
 800537a:	2318      	movs	r3, #24
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	0018      	movs	r0, r3
 8005380:	2308      	movs	r3, #8
 8005382:	001a      	movs	r2, r3
 8005384:	2100      	movs	r1, #0
 8005386:	f01d fc07 	bl	8022b98 <memset>
    RTC_TimeTypeDef sTime = {0};
 800538a:	1d3b      	adds	r3, r7, #4
 800538c:	0018      	movs	r0, r3
 800538e:	2314      	movs	r3, #20
 8005390:	001a      	movs	r2, r3
 8005392:	2100      	movs	r1, #0
 8005394:	f01d fc00 	bl	8022b98 <memset>
    RTC_DateTypeDef sDate = {0};
 8005398:	003b      	movs	r3, r7
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]

    SNTP_init(NTP_SOCKET_NUM, sntp_server, tz, gDATABUF);
 800539e:	4b40      	ldr	r3, [pc, #256]	; (80054a0 <App_web_get_time_and_sync+0x12c>)
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	4b40      	ldr	r3, [pc, #256]	; (80054a4 <App_web_get_time_and_sync+0x130>)
 80053a4:	4940      	ldr	r1, [pc, #256]	; (80054a8 <App_web_get_time_and_sync+0x134>)
 80053a6:	2001      	movs	r0, #1
 80053a8:	f017 ff62 	bl	801d270 <SNTP_init>

    uint32_t ticks = HAL_GetTick();
 80053ac:	f009 fff2 	bl	800f394 <HAL_GetTick>
 80053b0:	0003      	movs	r3, r0
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
    while ((SNTP_run(&tm) != 1) &&
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	2318      	movs	r3, #24
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	0018      	movs	r0, r3
 80053bc:	f017 ffd4 	bl	801d368 <SNTP_run>
 80053c0:	0003      	movs	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d007      	beq.n	80053d6 <App_web_get_time_and_sync+0x62>
           (HAL_GetTick() - ticks) < (10 * 1000))
 80053c6:	f009 ffe5 	bl	800f394 <HAL_GetTick>
 80053ca:	0002      	movs	r2, r0
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	1ad3      	subs	r3, r2, r3
    while ((SNTP_run(&tm) != 1) &&
 80053d0:	4a36      	ldr	r2, [pc, #216]	; (80054ac <App_web_get_time_and_sync+0x138>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d9ef      	bls.n	80053b6 <App_web_get_time_and_sync+0x42>
#if 0
    char send_time[500]= {0};
    sprintf(send_time,"Internet time: %d-%d-%d %d:%d:%d\r\n", tm.yy, tm.mo, tm.dd, tm.hh, tm.mm, tm.ss);
    Send_String(send_time,strlen(send_time) + 1);
#endif
    printf("GMT time: %d-%d-%d %d:%d:%d\r\n", tm.yy, tm.mo, tm.dd, tm.hh, tm.mm, tm.ss);
 80053d6:	2018      	movs	r0, #24
 80053d8:	183b      	adds	r3, r7, r0
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	001c      	movs	r4, r3
 80053de:	183b      	adds	r3, r7, r0
 80053e0:	789b      	ldrb	r3, [r3, #2]
 80053e2:	001d      	movs	r5, r3
 80053e4:	183b      	adds	r3, r7, r0
 80053e6:	78db      	ldrb	r3, [r3, #3]
 80053e8:	001e      	movs	r6, r3
 80053ea:	183b      	adds	r3, r7, r0
 80053ec:	791b      	ldrb	r3, [r3, #4]
 80053ee:	001a      	movs	r2, r3
 80053f0:	183b      	adds	r3, r7, r0
 80053f2:	795b      	ldrb	r3, [r3, #5]
 80053f4:	0019      	movs	r1, r3
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	799b      	ldrb	r3, [r3, #6]
 80053fa:	482d      	ldr	r0, [pc, #180]	; (80054b0 <App_web_get_time_and_sync+0x13c>)
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	9101      	str	r1, [sp, #4]
 8005400:	9200      	str	r2, [sp, #0]
 8005402:	0033      	movs	r3, r6
 8005404:	002a      	movs	r2, r5
 8005406:	0021      	movs	r1, r4
 8005408:	f01d fa04 	bl	8022814 <iprintf>
    sTime.Hours = tm.hh;
 800540c:	2118      	movs	r1, #24
 800540e:	187b      	adds	r3, r7, r1
 8005410:	791a      	ldrb	r2, [r3, #4]
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = tm.mm;
 8005416:	187b      	adds	r3, r7, r1
 8005418:	795a      	ldrb	r2, [r3, #5]
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = tm.ss;
 800541e:	187b      	adds	r3, r7, r1
 8005420:	799a      	ldrb	r2, [r3, #6]
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	709a      	strb	r2, [r3, #2]
    sTime.Seconds = tm.ss;
 8005426:	187b      	adds	r3, r7, r1
 8005428:	799a      	ldrb	r2, [r3, #6]
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	709a      	strb	r2, [r3, #2]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800542e:	1d39      	adds	r1, r7, #4
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <App_web_get_time_and_sync+0x140>)
 8005432:	2200      	movs	r2, #0
 8005434:	0018      	movs	r0, r3
 8005436:	f00d fcab 	bl	8012d90 <HAL_RTC_SetTime>
 800543a:	1e03      	subs	r3, r0, #0
 800543c:	d001      	beq.n	8005442 <App_web_get_time_and_sync+0xce>
    {
        Error_Handler();
 800543e:	f007 f8e1 	bl	800c604 <Error_Handler>
    }

    sDate.Month = tm.mo;
 8005442:	2118      	movs	r1, #24
 8005444:	187b      	adds	r3, r7, r1
 8005446:	789a      	ldrb	r2, [r3, #2]
 8005448:	003b      	movs	r3, r7
 800544a:	705a      	strb	r2, [r3, #1]
    sDate.Date = tm.dd;
 800544c:	187b      	adds	r3, r7, r1
 800544e:	78da      	ldrb	r2, [r3, #3]
 8005450:	003b      	movs	r3, r7
 8005452:	709a      	strb	r2, [r3, #2]
    sDate.Year = tm.yy - 2000;
 8005454:	187b      	adds	r3, r7, r1
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	3330      	adds	r3, #48	; 0x30
 800545c:	b2da      	uxtb	r2, r3
 800545e:	003b      	movs	r3, r7
 8005460:	70da      	strb	r2, [r3, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005462:	0039      	movs	r1, r7
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <App_web_get_time_and_sync+0x140>)
 8005466:	2200      	movs	r2, #0
 8005468:	0018      	movs	r0, r3
 800546a:	f00d fd95 	bl	8012f98 <HAL_RTC_SetDate>
 800546e:	1e03      	subs	r3, r0, #0
 8005470:	d001      	beq.n	8005476 <App_web_get_time_and_sync+0x102>
    {
        Error_Handler();
 8005472:	f007 f8c7 	bl	800c604 <Error_Handler>
    }

    time_last_ntp_sync = HAL_GetTick();
 8005476:	f009 ff8d 	bl	800f394 <HAL_GetTick>
 800547a:	0002      	movs	r2, r0
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <App_web_get_time_and_sync+0x144>)
 800547e:	601a      	str	r2, [r3, #0]

    uint32_t now_epoch = get_epoch_time();
 8005480:	f7ff fd2e 	bl	8004ee0 <get_epoch_time>
 8005484:	0002      	movs	r2, r0
 8005486:	000b      	movs	r3, r1
 8005488:	0013      	movs	r3, r2
 800548a:	623b      	str	r3, [r7, #32]
    // show epoch time

    printf("Epoch time is %d\r\n", (int)now_epoch);
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <App_web_get_time_and_sync+0x148>)
 8005490:	0011      	movs	r1, r2
 8005492:	0018      	movs	r0, r3
 8005494:	f01d f9be 	bl	8022814 <iprintf>
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b00b      	add	sp, #44	; 0x2c
 800549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a0:	20004f34 	.word	0x20004f34
 80054a4:	20006298 	.word	0x20006298
 80054a8:	20004f30 	.word	0x20004f30
 80054ac:	0000270f 	.word	0x0000270f
 80054b0:	08025280 	.word	0x08025280
 80054b4:	20006968 	.word	0x20006968
 80054b8:	20005278 	.word	0x20005278
 80054bc:	080252a0 	.word	0x080252a0

080054c0 <App_web_show_sys_time>:

void App_web_show_sys_time()
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
    static uint32_t now_time = 0;

    if (HAL_GetTick() - now_time > (60 * 1000))
 80054c6:	f009 ff65 	bl	800f394 <HAL_GetTick>
 80054ca:	0002      	movs	r2, r0
 80054cc:	4b28      	ldr	r3, [pc, #160]	; (8005570 <App_web_show_sys_time+0xb0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	4a28      	ldr	r2, [pc, #160]	; (8005574 <App_web_show_sys_time+0xb4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d947      	bls.n	8005568 <App_web_show_sys_time+0xa8>
    {
        now_time = HAL_GetTick();
 80054d8:	f009 ff5c 	bl	800f394 <HAL_GetTick>
 80054dc:	0002      	movs	r2, r0
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <App_web_show_sys_time+0xb0>)
 80054e0:	601a      	str	r2, [r3, #0]
        RTC_DateTypeDef getDate = {0};
 80054e2:	2318      	movs	r3, #24
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
        RTC_TimeTypeDef getTime = {0};
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	0018      	movs	r0, r3
 80054ee:	2314      	movs	r3, #20
 80054f0:	001a      	movs	r2, r3
 80054f2:	2100      	movs	r1, #0
 80054f4:	f01d fb50 	bl	8022b98 <memset>
        if (HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN) != HAL_OK)
 80054f8:	1d39      	adds	r1, r7, #4
 80054fa:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <App_web_show_sys_time+0xb8>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	0018      	movs	r0, r3
 8005500:	f00d fcee 	bl	8012ee0 <HAL_RTC_GetTime>
 8005504:	1e03      	subs	r3, r0, #0
 8005506:	d001      	beq.n	800550c <App_web_show_sys_time+0x4c>
        {
            Error_Handler();
 8005508:	f007 f87c 	bl	800c604 <Error_Handler>
        }
        if (HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN) != HAL_OK)
 800550c:	2318      	movs	r3, #24
 800550e:	18f9      	adds	r1, r7, r3
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <App_web_show_sys_time+0xb8>)
 8005512:	2200      	movs	r2, #0
 8005514:	0018      	movs	r0, r3
 8005516:	f00d fdd1 	bl	80130bc <HAL_RTC_GetDate>
 800551a:	1e03      	subs	r3, r0, #0
 800551c:	d001      	beq.n	8005522 <App_web_show_sys_time+0x62>
        {
            Error_Handler();
 800551e:	f007 f871 	bl	800c604 <Error_Handler>
        }
        uint32_t now_epoch = get_epoch_time();
 8005522:	f7ff fcdd 	bl	8004ee0 <get_epoch_time>
 8005526:	0002      	movs	r2, r0
 8005528:	000b      	movs	r3, r1
 800552a:	0013      	movs	r3, r2
 800552c:	61fb      	str	r3, [r7, #28]
        printf("Current GMT time :%02d:%02d:%02d\r\n", getTime.Hours, getTime.Minutes, getTime.Seconds);
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	0019      	movs	r1, r3
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	001a      	movs	r2, r3
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	789b      	ldrb	r3, [r3, #2]
 800553e:	480f      	ldr	r0, [pc, #60]	; (800557c <App_web_show_sys_time+0xbc>)
 8005540:	f01d f968 	bl	8022814 <iprintf>
        printf("Current GMT Date :%02d/%02d/%02d\r\n", getDate.Date, getDate.Month, getDate.Year);
 8005544:	2018      	movs	r0, #24
 8005546:	183b      	adds	r3, r7, r0
 8005548:	789b      	ldrb	r3, [r3, #2]
 800554a:	0019      	movs	r1, r3
 800554c:	183b      	adds	r3, r7, r0
 800554e:	785b      	ldrb	r3, [r3, #1]
 8005550:	001a      	movs	r2, r3
 8005552:	183b      	adds	r3, r7, r0
 8005554:	78db      	ldrb	r3, [r3, #3]
 8005556:	480a      	ldr	r0, [pc, #40]	; (8005580 <App_web_show_sys_time+0xc0>)
 8005558:	f01d f95c 	bl	8022814 <iprintf>
        // show epoch time
        printf("Epoch time is %d\r\n", (int)now_epoch);
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <App_web_show_sys_time+0xc4>)
 8005560:	0011      	movs	r1, r2
 8005562:	0018      	movs	r0, r3
 8005564:	f01d f956 	bl	8022814 <iprintf>
    }
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b008      	add	sp, #32
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20006714 	.word	0x20006714
 8005574:	0000ea60 	.word	0x0000ea60
 8005578:	20006968 	.word	0x20006968
 800557c:	080252b4 	.word	0x080252b4
 8005580:	080252d8 	.word	0x080252d8
 8005584:	080252a0 	.word	0x080252a0

08005588 <time_sync_page_callback>:

void time_sync_page_callback(void *content, st_http_request *arg)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
    static uint32_t num = 0;
    num++;
 8005592:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <time_sync_page_callback+0x50>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <time_sync_page_callback+0x50>)
 800559a:	601a      	str	r2, [r3, #0]
    httpServer_webContent *content_info = (httpServer_webContent *)content;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60fb      	str	r3, [r7, #12]

    // print the called uri
    printf("Test Callback: %s\r\n", content_info->content_name);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <time_sync_page_callback+0x54>)
 80055a6:	0011      	movs	r1, r2
 80055a8:	0018      	movs	r0, r3
 80055aa:	f01d f933 	bl	8022814 <iprintf>
    // get the full uri
    printf("Param value are %s\r\n", arg->URI);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	1c9a      	adds	r2, r3, #2
 80055b2:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <time_sync_page_callback+0x58>)
 80055b4:	0011      	movs	r1, r2
 80055b6:	0018      	movs	r0, r3
 80055b8:	f01d f92c 	bl	8022814 <iprintf>

    // set the content type
    arg->TYPE = PTYPE_HTML;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	705a      	strb	r2, [r3, #1]
    // attach the content
    content_info->content = (uint8_t *)timesync_str;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a07      	ldr	r2, [pc, #28]	; (80055e4 <time_sync_page_callback+0x5c>)
 80055c6:	609a      	str	r2, [r3, #8]
    // attach the content lengthe
    content_info->content_len = sizeof(timesync_str);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4a07      	ldr	r2, [pc, #28]	; (80055e8 <time_sync_page_callback+0x60>)
 80055cc:	605a      	str	r2, [r3, #4]
}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b004      	add	sp, #16
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	20006718 	.word	0x20006718
 80055dc:	080252fc 	.word	0x080252fc
 80055e0:	08025310 	.word	0x08025310
 80055e4:	20000000 	.word	0x20000000
 80055e8:	00004f26 	.word	0x00004f26

080055ec <set_time_sync_callback>:

void set_time_sync_callback(void *content, st_http_request *arg)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b08b      	sub	sp, #44	; 0x2c
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
    timesynch_on_was_sent = 0;
 80055f6:	4b8d      	ldr	r3, [pc, #564]	; (800582c <set_time_sync_callback+0x240>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
    timesynch_off_was_sent = 0;
 80055fc:	4b8c      	ldr	r3, [pc, #560]	; (8005830 <set_time_sync_callback+0x244>)
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]

    httpServer_webContent *content_info = (httpServer_webContent *)content;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	623b      	str	r3, [r7, #32]
    printf("Test Callback: %s\r\n", content_info->content_name);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b8a      	ldr	r3, [pc, #552]	; (8005834 <set_time_sync_callback+0x248>)
 800560c:	0011      	movs	r1, r2
 800560e:	0018      	movs	r0, r3
 8005610:	f01d f900 	bl	8022814 <iprintf>
    // get the full uri
    printf("Param value are %s\r\n", arg->URI);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1c9a      	adds	r2, r3, #2
 8005618:	4b87      	ldr	r3, [pc, #540]	; (8005838 <set_time_sync_callback+0x24c>)
 800561a:	0011      	movs	r1, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f01d f8f9 	bl	8022814 <iprintf>

    char *uri = (char *)arg->URI;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	3302      	adds	r3, #2
 8005626:	61fb      	str	r3, [r7, #28]

    char *get_value = strstr(uri, "?");
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	213f      	movs	r1, #63	; 0x3f
 800562c:	0018      	movs	r0, r3
 800562e:	f01d fac8 	bl	8022bc2 <strchr>
 8005632:	0003      	movs	r3, r0
 8005634:	61bb      	str	r3, [r7, #24]
    get_value = get_value + 1;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	3301      	adds	r3, #1
 800563a:	61bb      	str	r3, [r7, #24]
    printf("Get value is %s\r\n", get_value);
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4b7f      	ldr	r3, [pc, #508]	; (800583c <set_time_sync_callback+0x250>)
 8005640:	0011      	movs	r1, r2
 8005642:	0018      	movs	r0, r3
 8005644:	f01d f8e6 	bl	8022814 <iprintf>

    char *saveptr;
    char *token = strtok_r(get_value, "&", &saveptr);
 8005648:	230c      	movs	r3, #12
 800564a:	18fa      	adds	r2, r7, r3
 800564c:	497c      	ldr	r1, [pc, #496]	; (8005840 <set_time_sync_callback+0x254>)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	0018      	movs	r0, r3
 8005652:	f01d fb4c 	bl	8022cee <strtok_r>
 8005656:	0003      	movs	r3, r0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
        if (token == NULL)
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	d100      	bne.n	8005662 <set_time_sync_callback+0x76>
 8005660:	e0ac      	b.n	80057bc <set_time_sync_callback+0x1d0>
        {
            break;
        }
        char *saveptr_2;
        char *key = strtok_r(token, "=", &saveptr_2);
 8005662:	2408      	movs	r4, #8
 8005664:	193a      	adds	r2, r7, r4
 8005666:	4977      	ldr	r1, [pc, #476]	; (8005844 <set_time_sync_callback+0x258>)
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	0018      	movs	r0, r3
 800566c:	f01d fb3f 	bl	8022cee <strtok_r>
 8005670:	0003      	movs	r3, r0
 8005672:	617b      	str	r3, [r7, #20]
        char *value = strtok_r(NULL, "=", &saveptr_2);
 8005674:	193a      	adds	r2, r7, r4
 8005676:	4b73      	ldr	r3, [pc, #460]	; (8005844 <set_time_sync_callback+0x258>)
 8005678:	0019      	movs	r1, r3
 800567a:	2000      	movs	r0, #0
 800567c:	f01d fb37 	bl	8022cee <strtok_r>
 8005680:	0003      	movs	r3, r0
 8005682:	613b      	str	r3, [r7, #16]
        if (key != NULL && value != NULL)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d100      	bne.n	800568c <set_time_sync_callback+0xa0>
 800568a:	e09a      	b.n	80057c2 <set_time_sync_callback+0x1d6>
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d100      	bne.n	8005694 <set_time_sync_callback+0xa8>
 8005692:	e096      	b.n	80057c2 <set_time_sync_callback+0x1d6>
        {
            if (strcmp(key, "onSwitch") == 0)
 8005694:	4a6c      	ldr	r2, [pc, #432]	; (8005848 <set_time_sync_callback+0x25c>)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	0011      	movs	r1, r2
 800569a:	0018      	movs	r0, r3
 800569c:	f7fc fd30 	bl	8002100 <strcmp>
 80056a0:	1e03      	subs	r3, r0, #0
 80056a2:	d112      	bne.n	80056ca <set_time_sync_callback+0xde>
            {
                printf("onSwitch Value is %d\r\n", atoi(value));
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f01c fe9e 	bl	80223e8 <atoi>
 80056ac:	0002      	movs	r2, r0
 80056ae:	4b67      	ldr	r3, [pc, #412]	; (800584c <set_time_sync_callback+0x260>)
 80056b0:	0011      	movs	r1, r2
 80056b2:	0018      	movs	r0, r3
 80056b4:	f01d f8ae 	bl	8022814 <iprintf>

                onSwitch = atoi(value);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f01c fe94 	bl	80223e8 <atoi>
 80056c0:	0003      	movs	r3, r0
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	4b62      	ldr	r3, [pc, #392]	; (8005850 <set_time_sync_callback+0x264>)
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e06a      	b.n	80057a0 <set_time_sync_callback+0x1b4>
            }

            else if (strcmp(key, "onDateTime") == 0)
 80056ca:	4a62      	ldr	r2, [pc, #392]	; (8005854 <set_time_sync_callback+0x268>)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	0011      	movs	r1, r2
 80056d0:	0018      	movs	r0, r3
 80056d2:	f7fc fd15 	bl	8002100 <strcmp>
 80056d6:	1e03      	subs	r3, r0, #0
 80056d8:	d112      	bne.n	8005700 <set_time_sync_callback+0x114>
            {
                printf("onDateTime Value is %d\r\n", atoi(value));
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	0018      	movs	r0, r3
 80056de:	f01c fe83 	bl	80223e8 <atoi>
 80056e2:	0002      	movs	r2, r0
 80056e4:	4b5c      	ldr	r3, [pc, #368]	; (8005858 <set_time_sync_callback+0x26c>)
 80056e6:	0011      	movs	r1, r2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f01d f893 	bl	8022814 <iprintf>

                onDateTime = atoi(value);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	0018      	movs	r0, r3
 80056f2:	f01c fe79 	bl	80223e8 <atoi>
 80056f6:	0003      	movs	r3, r0
 80056f8:	001a      	movs	r2, r3
 80056fa:	4b58      	ldr	r3, [pc, #352]	; (800585c <set_time_sync_callback+0x270>)
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e04f      	b.n	80057a0 <set_time_sync_callback+0x1b4>
            }

            else if (strcmp(key, "offSwitch") == 0)
 8005700:	4a57      	ldr	r2, [pc, #348]	; (8005860 <set_time_sync_callback+0x274>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	0011      	movs	r1, r2
 8005706:	0018      	movs	r0, r3
 8005708:	f7fc fcfa 	bl	8002100 <strcmp>
 800570c:	1e03      	subs	r3, r0, #0
 800570e:	d112      	bne.n	8005736 <set_time_sync_callback+0x14a>
            {
                printf("offSwitch Value is %d\r\n", atoi(value));
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	0018      	movs	r0, r3
 8005714:	f01c fe68 	bl	80223e8 <atoi>
 8005718:	0002      	movs	r2, r0
 800571a:	4b52      	ldr	r3, [pc, #328]	; (8005864 <set_time_sync_callback+0x278>)
 800571c:	0011      	movs	r1, r2
 800571e:	0018      	movs	r0, r3
 8005720:	f01d f878 	bl	8022814 <iprintf>

                offSwitch = atoi(value);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	0018      	movs	r0, r3
 8005728:	f01c fe5e 	bl	80223e8 <atoi>
 800572c:	0003      	movs	r3, r0
 800572e:	b2da      	uxtb	r2, r3
 8005730:	4b4d      	ldr	r3, [pc, #308]	; (8005868 <set_time_sync_callback+0x27c>)
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e034      	b.n	80057a0 <set_time_sync_callback+0x1b4>
            }

            else if (strcmp(key, "offDateTime") == 0)
 8005736:	4a4d      	ldr	r2, [pc, #308]	; (800586c <set_time_sync_callback+0x280>)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	0011      	movs	r1, r2
 800573c:	0018      	movs	r0, r3
 800573e:	f7fc fcdf 	bl	8002100 <strcmp>
 8005742:	1e03      	subs	r3, r0, #0
 8005744:	d112      	bne.n	800576c <set_time_sync_callback+0x180>
            {
                printf("offDateTime Value is %d\r\n", atoi(value));
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	0018      	movs	r0, r3
 800574a:	f01c fe4d 	bl	80223e8 <atoi>
 800574e:	0002      	movs	r2, r0
 8005750:	4b47      	ldr	r3, [pc, #284]	; (8005870 <set_time_sync_callback+0x284>)
 8005752:	0011      	movs	r1, r2
 8005754:	0018      	movs	r0, r3
 8005756:	f01d f85d 	bl	8022814 <iprintf>

                offDateTime = atoi(value);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	0018      	movs	r0, r3
 800575e:	f01c fe43 	bl	80223e8 <atoi>
 8005762:	0003      	movs	r3, r0
 8005764:	001a      	movs	r2, r3
 8005766:	4b43      	ldr	r3, [pc, #268]	; (8005874 <set_time_sync_callback+0x288>)
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	e019      	b.n	80057a0 <set_time_sync_callback+0x1b4>
            }

            else if (strcmp(key, "timezone") == 0)
 800576c:	4a42      	ldr	r2, [pc, #264]	; (8005878 <set_time_sync_callback+0x28c>)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	0011      	movs	r1, r2
 8005772:	0018      	movs	r0, r3
 8005774:	f7fc fcc4 	bl	8002100 <strcmp>
 8005778:	1e03      	subs	r3, r0, #0
 800577a:	d121      	bne.n	80057c0 <set_time_sync_callback+0x1d4>
            {
                printf("timezone Value is %d\r\n", atoi(value));
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	0018      	movs	r0, r3
 8005780:	f01c fe32 	bl	80223e8 <atoi>
 8005784:	0002      	movs	r2, r0
 8005786:	4b3d      	ldr	r3, [pc, #244]	; (800587c <set_time_sync_callback+0x290>)
 8005788:	0011      	movs	r1, r2
 800578a:	0018      	movs	r0, r3
 800578c:	f01d f842 	bl	8022814 <iprintf>

                timezone = atoi(value);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	0018      	movs	r0, r3
 8005794:	f01c fe28 	bl	80223e8 <atoi>
 8005798:	0003      	movs	r3, r0
 800579a:	b2da      	uxtb	r2, r3
 800579c:	4b38      	ldr	r3, [pc, #224]	; (8005880 <set_time_sync_callback+0x294>)
 800579e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        token = strtok_r(NULL, "&", &saveptr);
 80057a0:	230c      	movs	r3, #12
 80057a2:	18fa      	adds	r2, r7, r3
 80057a4:	4b26      	ldr	r3, [pc, #152]	; (8005840 <set_time_sync_callback+0x254>)
 80057a6:	0019      	movs	r1, r3
 80057a8:	2000      	movs	r0, #0
 80057aa:	f01d faa0 	bl	8022cee <strtok_r>
 80057ae:	0003      	movs	r3, r0
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
    } while (token != NULL);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d000      	beq.n	80057ba <set_time_sync_callback+0x1ce>
 80057b8:	e74f      	b.n	800565a <set_time_sync_callback+0x6e>
 80057ba:	e002      	b.n	80057c2 <set_time_sync_callback+0x1d6>
            break;
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	e000      	b.n	80057c2 <set_time_sync_callback+0x1d6>
                break;
 80057c0:	46c0      	nop			; (mov r8, r8)

    // set the content type
    arg->TYPE = PTYPE_TEXT;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	705a      	strb	r2, [r3, #1]
    // attach the content
    content_info->content = NULL;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
    // attach the content lengthe
    content_info->content_len = 0;
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	2200      	movs	r2, #0
 80057d2:	605a      	str	r2, [r3, #4]

    pcb_config.pcb_config_onSwitch = onSwitch;
 80057d4:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <set_time_sync_callback+0x264>)
 80057d6:	7819      	ldrb	r1, [r3, #0]
 80057d8:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <set_time_sync_callback+0x298>)
 80057da:	238e      	movs	r3, #142	; 0x8e
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	54d1      	strb	r1, [r2, r3]
    pcb_config.pcb_config_onDateTime = onDateTime;
 80057e0:	4b1e      	ldr	r3, [pc, #120]	; (800585c <set_time_sync_callback+0x270>)
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <set_time_sync_callback+0x298>)
 80057e6:	2390      	movs	r3, #144	; 0x90
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	50d1      	str	r1, [r2, r3]
    pcb_config.pcb_config_offSwitch = offSwitch;
 80057ec:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <set_time_sync_callback+0x27c>)
 80057ee:	7819      	ldrb	r1, [r3, #0]
 80057f0:	4a24      	ldr	r2, [pc, #144]	; (8005884 <set_time_sync_callback+0x298>)
 80057f2:	2392      	movs	r3, #146	; 0x92
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	54d1      	strb	r1, [r2, r3]
    pcb_config.pcb_config_offDateTime = offDateTime;
 80057f8:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <set_time_sync_callback+0x288>)
 80057fa:	6819      	ldr	r1, [r3, #0]
 80057fc:	4a21      	ldr	r2, [pc, #132]	; (8005884 <set_time_sync_callback+0x298>)
 80057fe:	2394      	movs	r3, #148	; 0x94
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	50d1      	str	r1, [r2, r3]
    pcb_config.pcb_config_timezone = timezone;
 8005804:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <set_time_sync_callback+0x294>)
 8005806:	7819      	ldrb	r1, [r3, #0]
 8005808:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <set_time_sync_callback+0x298>)
 800580a:	2396      	movs	r3, #150	; 0x96
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	54d1      	strb	r1, [r2, r3]
    //    	// Convert to number of days since 1 Jan 1970
    //    	int days_since_epoch = localtime / 86400;
    //    	// 1 Jan 1970 was a Thursday, so add 4 so Sunday is day 0, and mod 7
    //    	int day_of_week = (days_since_epoch + 4) % 7;
    //    	 printf("Test Callback: %d\r\n", day_of_week);
    realTimeZone = timezonesarray[timezone];
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <set_time_sync_callback+0x294>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	001a      	movs	r2, r3
 8005816:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <set_time_sync_callback+0x29c>)
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	58d2      	ldr	r2, [r2, r3]
 800581c:	4b1b      	ldr	r3, [pc, #108]	; (800588c <set_time_sync_callback+0x2a0>)
 800581e:	601a      	str	r2, [r3, #0]

    // dayofweek(get_epoch_time(),));

    WriteToEeprom();
 8005820:	f004 f9f0 	bl	8009c04 <WriteToEeprom>
}
 8005824:	46c0      	nop			; (mov r8, r8)
 8005826:	46bd      	mov	sp, r7
 8005828:	b00b      	add	sp, #44	; 0x2c
 800582a:	bd90      	pop	{r4, r7, pc}
 800582c:	20006293 	.word	0x20006293
 8005830:	20006294 	.word	0x20006294
 8005834:	080252fc 	.word	0x080252fc
 8005838:	08025310 	.word	0x08025310
 800583c:	08025328 	.word	0x08025328
 8005840:	0802533c 	.word	0x0802533c
 8005844:	08025340 	.word	0x08025340
 8005848:	08025344 	.word	0x08025344
 800584c:	08025350 	.word	0x08025350
 8005850:	2000522c 	.word	0x2000522c
 8005854:	08025368 	.word	0x08025368
 8005858:	08025374 	.word	0x08025374
 800585c:	20005230 	.word	0x20005230
 8005860:	08025390 	.word	0x08025390
 8005864:	0802539c 	.word	0x0802539c
 8005868:	20005234 	.word	0x20005234
 800586c:	080253b4 	.word	0x080253b4
 8005870:	080253c0 	.word	0x080253c0
 8005874:	20005238 	.word	0x20005238
 8005878:	080253dc 	.word	0x080253dc
 800587c:	080253e8 	.word	0x080253e8
 8005880:	2000523c 	.word	0x2000523c
 8005884:	20006db4 	.word	0x20006db4
 8005888:	20004f3c 	.word	0x20004f3c
 800588c:	20004f38 	.word	0x20004f38

08005890 <get_time_sync_callback>:

void get_time_sync_callback(void *content, st_http_request *arg)
{
 8005890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af04      	add	r7, sp, #16
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
    httpServer_webContent *content_info = (httpServer_webContent *)content;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]
    memset(callback_data, 0, sizeof(callback_data));
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <get_time_sync_callback+0x94>)
 80058a0:	2264      	movs	r2, #100	; 0x64
 80058a2:	2100      	movs	r1, #0
 80058a4:	0018      	movs	r0, r3
 80058a6:	f01d f977 	bl	8022b98 <memset>
    printf("Test Callback: %s\r\n", content_info->content_name);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <get_time_sync_callback+0x98>)
 80058b0:	0011      	movs	r1, r2
 80058b2:	0018      	movs	r0, r3
 80058b4:	f01c ffae 	bl	8022814 <iprintf>
    // get the full uri
    printf("Param value are %s\r\n", arg->URI);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	4b1b      	ldr	r3, [pc, #108]	; (800592c <get_time_sync_callback+0x9c>)
 80058be:	0011      	movs	r1, r2
 80058c0:	0018      	movs	r0, r3
 80058c2:	f01c ffa7 	bl	8022814 <iprintf>
    snprintf((char*)callback_data, sizeof(callback_data), "%d,%d,%d,%d,%d \r\n", onSwitch, (int)onDateTime, offSwitch, (int)offDateTime, timezone);
 80058c6:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <get_time_sync_callback+0xa0>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	001e      	movs	r6, r3
 80058cc:	4b19      	ldr	r3, [pc, #100]	; (8005934 <get_time_sync_callback+0xa4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	0019      	movs	r1, r3
 80058d2:	4b19      	ldr	r3, [pc, #100]	; (8005938 <get_time_sync_callback+0xa8>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	001c      	movs	r4, r3
 80058d8:	4b18      	ldr	r3, [pc, #96]	; (800593c <get_time_sync_callback+0xac>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	001d      	movs	r5, r3
 80058de:	4b18      	ldr	r3, [pc, #96]	; (8005940 <get_time_sync_callback+0xb0>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <get_time_sync_callback+0xb4>)
 80058e4:	480f      	ldr	r0, [pc, #60]	; (8005924 <get_time_sync_callback+0x94>)
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	9502      	str	r5, [sp, #8]
 80058ea:	9401      	str	r4, [sp, #4]
 80058ec:	9100      	str	r1, [sp, #0]
 80058ee:	0033      	movs	r3, r6
 80058f0:	2164      	movs	r1, #100	; 0x64
 80058f2:	f01d f809 	bl	8022908 <sniprintf>
    printf("callback data %s\r\n", callback_data);
 80058f6:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <get_time_sync_callback+0x94>)
 80058f8:	4b13      	ldr	r3, [pc, #76]	; (8005948 <get_time_sync_callback+0xb8>)
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f01c ff89 	bl	8022814 <iprintf>
    // set the content type
    arg->TYPE = PTYPE_TEXT;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2203      	movs	r2, #3
 8005906:	705a      	strb	r2, [r3, #1]

    // attach the content
    content_info->content = callback_data;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a06      	ldr	r2, [pc, #24]	; (8005924 <get_time_sync_callback+0x94>)
 800590c:	609a      	str	r2, [r3, #8]
    // attach the content lengthe
    content_info->content_len = strlen((char*)callback_data);
 800590e:	4b05      	ldr	r3, [pc, #20]	; (8005924 <get_time_sync_callback+0x94>)
 8005910:	0018      	movs	r0, r3
 8005912:	f7fc fbff 	bl	8002114 <strlen>
 8005916:	0002      	movs	r2, r0
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	605a      	str	r2, [r3, #4]
}
 800591c:	46c0      	nop			; (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	b005      	add	sp, #20
 8005922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005924:	2000669c 	.word	0x2000669c
 8005928:	080252fc 	.word	0x080252fc
 800592c:	08025310 	.word	0x08025310
 8005930:	2000522c 	.word	0x2000522c
 8005934:	20005230 	.word	0x20005230
 8005938:	20005234 	.word	0x20005234
 800593c:	20005238 	.word	0x20005238
 8005940:	2000523c 	.word	0x2000523c
 8005944:	08025400 	.word	0x08025400
 8005948:	08025414 	.word	0x08025414

0800594c <set_alarm_callback>:
uint8_t time_alarm_on_hh, time_alarm_on_mm, time_alarm_off_hh, time_alarm_off_mm;
uint8_t time_alarm_on_sun, time_alarm_on_mon, time_alarm_on_tue, time_alarm_on_wed, time_alarm_on_thu, time_alarm_on_fri, time_alarm_on_sat;
uint8_t time_alarm_off_sun, time_alarm_off_mon, time_alarm_off_tue, time_alarm_off_wed, time_alarm_off_thu, time_alarm_off_fri, time_alarm_off_sat;

void set_alarm_callback(void *content, st_http_request *arg)
{
 800594c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594e:	b08f      	sub	sp, #60	; 0x3c
 8005950:	af04      	add	r7, sp, #16
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
    httpServer_webContent *content_info = (httpServer_webContent *)content;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	61fb      	str	r3, [r7, #28]
    printf("Test Callback: %s\r\n", content_info->content_name);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <set_alarm_callback+0x68>)
 8005960:	0011      	movs	r1, r2
 8005962:	0018      	movs	r0, r3
 8005964:	f01c ff56 	bl	8022814 <iprintf>
    // get the full uri
    printf("Param value are %s\r\n", arg->URI);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <set_alarm_callback+0x6c>)
 800596e:	0011      	movs	r1, r2
 8005970:	0018      	movs	r0, r3
 8005972:	f01c ff4f 	bl	8022814 <iprintf>

    char *uri = (char *)arg->URI;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	3302      	adds	r3, #2
 800597a:	61bb      	str	r3, [r7, #24]

    char *get_value = strstr(uri, "?");
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	213f      	movs	r1, #63	; 0x3f
 8005980:	0018      	movs	r0, r3
 8005982:	f01d f91e 	bl	8022bc2 <strchr>
 8005986:	0003      	movs	r3, r0
 8005988:	617b      	str	r3, [r7, #20]
    get_value = get_value + 7;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	3307      	adds	r3, #7
 800598e:	617b      	str	r3, [r7, #20]
    // printf("Get value is %s\r\n",get_value);

    // parse and save the values
    char *save_ptr;
    char delim[] = "z";
 8005990:	210c      	movs	r1, #12
 8005992:	187b      	adds	r3, r7, r1
 8005994:	227a      	movs	r2, #122	; 0x7a
 8005996:	801a      	strh	r2, [r3, #0]
    char *token = strtok_r(get_value, delim, &save_ptr);
 8005998:	2310      	movs	r3, #16
 800599a:	18fa      	adds	r2, r7, r3
 800599c:	1879      	adds	r1, r7, r1
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f01d f9a4 	bl	8022cee <strtok_r>
 80059a6:	0003      	movs	r3, r0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t index = 0;
 80059aa:	2323      	movs	r3, #35	; 0x23
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]

    while (NULL != token)
 80059b2:	e0fd      	b.n	8005bb0 <set_alarm_callback+0x264>
 80059b4:	080252fc 	.word	0x080252fc
 80059b8:	08025310 	.word	0x08025310
    {
        if (0 == index)
 80059bc:	2323      	movs	r3, #35	; 0x23
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <set_alarm_callback+0x8a>
            time_alarm_on_hh = atoi(token);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	0018      	movs	r0, r3
 80059ca:	f01c fd0d 	bl	80223e8 <atoi>
 80059ce:	0003      	movs	r3, r0
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	4be6      	ldr	r3, [pc, #920]	; (8005d6c <set_alarm_callback+0x420>)
 80059d4:	701a      	strb	r2, [r3, #0]
        if (1 == index)
 80059d6:	2323      	movs	r3, #35	; 0x23
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d107      	bne.n	80059f0 <set_alarm_callback+0xa4>
            time_alarm_on_mm = atoi(token);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	0018      	movs	r0, r3
 80059e4:	f01c fd00 	bl	80223e8 <atoi>
 80059e8:	0003      	movs	r3, r0
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	4be0      	ldr	r3, [pc, #896]	; (8005d70 <set_alarm_callback+0x424>)
 80059ee:	701a      	strb	r2, [r3, #0]
        if (2 == index)
 80059f0:	2323      	movs	r3, #35	; 0x23
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d107      	bne.n	8005a0a <set_alarm_callback+0xbe>
            time_alarm_off_hh = atoi(token);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	0018      	movs	r0, r3
 80059fe:	f01c fcf3 	bl	80223e8 <atoi>
 8005a02:	0003      	movs	r3, r0
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4bdb      	ldr	r3, [pc, #876]	; (8005d74 <set_alarm_callback+0x428>)
 8005a08:	701a      	strb	r2, [r3, #0]
        if (3 == index)
 8005a0a:	2323      	movs	r3, #35	; 0x23
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d107      	bne.n	8005a24 <set_alarm_callback+0xd8>
            time_alarm_off_mm = atoi(token);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	0018      	movs	r0, r3
 8005a18:	f01c fce6 	bl	80223e8 <atoi>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	4bd5      	ldr	r3, [pc, #852]	; (8005d78 <set_alarm_callback+0x42c>)
 8005a22:	701a      	strb	r2, [r3, #0]
        if (4 == index)
 8005a24:	2323      	movs	r3, #35	; 0x23
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d107      	bne.n	8005a3e <set_alarm_callback+0xf2>
            time_alarm_on_sun = atoi(token);
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	0018      	movs	r0, r3
 8005a32:	f01c fcd9 	bl	80223e8 <atoi>
 8005a36:	0003      	movs	r3, r0
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	4bd0      	ldr	r3, [pc, #832]	; (8005d7c <set_alarm_callback+0x430>)
 8005a3c:	701a      	strb	r2, [r3, #0]
        if (5 == index)
 8005a3e:	2323      	movs	r3, #35	; 0x23
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b05      	cmp	r3, #5
 8005a46:	d107      	bne.n	8005a58 <set_alarm_callback+0x10c>
            time_alarm_on_mon = atoi(token);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f01c fccc 	bl	80223e8 <atoi>
 8005a50:	0003      	movs	r3, r0
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	4bca      	ldr	r3, [pc, #808]	; (8005d80 <set_alarm_callback+0x434>)
 8005a56:	701a      	strb	r2, [r3, #0]
        if (6 == index)
 8005a58:	2323      	movs	r3, #35	; 0x23
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b06      	cmp	r3, #6
 8005a60:	d107      	bne.n	8005a72 <set_alarm_callback+0x126>
            time_alarm_on_tue = atoi(token);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	0018      	movs	r0, r3
 8005a66:	f01c fcbf 	bl	80223e8 <atoi>
 8005a6a:	0003      	movs	r3, r0
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4bc5      	ldr	r3, [pc, #788]	; (8005d84 <set_alarm_callback+0x438>)
 8005a70:	701a      	strb	r2, [r3, #0]
        if (7 == index)
 8005a72:	2323      	movs	r3, #35	; 0x23
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b07      	cmp	r3, #7
 8005a7a:	d107      	bne.n	8005a8c <set_alarm_callback+0x140>
            time_alarm_on_wed = atoi(token);
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f01c fcb2 	bl	80223e8 <atoi>
 8005a84:	0003      	movs	r3, r0
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	4bbf      	ldr	r3, [pc, #764]	; (8005d88 <set_alarm_callback+0x43c>)
 8005a8a:	701a      	strb	r2, [r3, #0]
        if (8 == index)
 8005a8c:	2323      	movs	r3, #35	; 0x23
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d107      	bne.n	8005aa6 <set_alarm_callback+0x15a>
            time_alarm_on_thu = atoi(token);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f01c fca5 	bl	80223e8 <atoi>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	4bba      	ldr	r3, [pc, #744]	; (8005d8c <set_alarm_callback+0x440>)
 8005aa4:	701a      	strb	r2, [r3, #0]
        if (9 == index)
 8005aa6:	2323      	movs	r3, #35	; 0x23
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b09      	cmp	r3, #9
 8005aae:	d107      	bne.n	8005ac0 <set_alarm_callback+0x174>
            time_alarm_on_fri = atoi(token);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f01c fc98 	bl	80223e8 <atoi>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	4bb4      	ldr	r3, [pc, #720]	; (8005d90 <set_alarm_callback+0x444>)
 8005abe:	701a      	strb	r2, [r3, #0]
        if (10 == index)
 8005ac0:	2323      	movs	r3, #35	; 0x23
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b0a      	cmp	r3, #10
 8005ac8:	d107      	bne.n	8005ada <set_alarm_callback+0x18e>
            time_alarm_on_sat = atoi(token);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	0018      	movs	r0, r3
 8005ace:	f01c fc8b 	bl	80223e8 <atoi>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4baf      	ldr	r3, [pc, #700]	; (8005d94 <set_alarm_callback+0x448>)
 8005ad8:	701a      	strb	r2, [r3, #0]
        if (11 == index)
 8005ada:	2323      	movs	r3, #35	; 0x23
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b0b      	cmp	r3, #11
 8005ae2:	d107      	bne.n	8005af4 <set_alarm_callback+0x1a8>
            time_alarm_off_sun = atoi(token);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f01c fc7e 	bl	80223e8 <atoi>
 8005aec:	0003      	movs	r3, r0
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	4ba9      	ldr	r3, [pc, #676]	; (8005d98 <set_alarm_callback+0x44c>)
 8005af2:	701a      	strb	r2, [r3, #0]
        if (12 == index)
 8005af4:	2323      	movs	r3, #35	; 0x23
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	d107      	bne.n	8005b0e <set_alarm_callback+0x1c2>
            time_alarm_off_mon = atoi(token);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	0018      	movs	r0, r3
 8005b02:	f01c fc71 	bl	80223e8 <atoi>
 8005b06:	0003      	movs	r3, r0
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4ba4      	ldr	r3, [pc, #656]	; (8005d9c <set_alarm_callback+0x450>)
 8005b0c:	701a      	strb	r2, [r3, #0]
        if (13 == index)
 8005b0e:	2323      	movs	r3, #35	; 0x23
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b0d      	cmp	r3, #13
 8005b16:	d107      	bne.n	8005b28 <set_alarm_callback+0x1dc>
            time_alarm_off_tue = atoi(token);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f01c fc64 	bl	80223e8 <atoi>
 8005b20:	0003      	movs	r3, r0
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	4b9e      	ldr	r3, [pc, #632]	; (8005da0 <set_alarm_callback+0x454>)
 8005b26:	701a      	strb	r2, [r3, #0]
        if (14 == index)
 8005b28:	2323      	movs	r3, #35	; 0x23
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b0e      	cmp	r3, #14
 8005b30:	d107      	bne.n	8005b42 <set_alarm_callback+0x1f6>
            time_alarm_off_wed = atoi(token);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	0018      	movs	r0, r3
 8005b36:	f01c fc57 	bl	80223e8 <atoi>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4b99      	ldr	r3, [pc, #612]	; (8005da4 <set_alarm_callback+0x458>)
 8005b40:	701a      	strb	r2, [r3, #0]
        if (15 == index)
 8005b42:	2323      	movs	r3, #35	; 0x23
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d107      	bne.n	8005b5c <set_alarm_callback+0x210>
            time_alarm_off_thu = atoi(token);
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f01c fc4a 	bl	80223e8 <atoi>
 8005b54:	0003      	movs	r3, r0
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	4b93      	ldr	r3, [pc, #588]	; (8005da8 <set_alarm_callback+0x45c>)
 8005b5a:	701a      	strb	r2, [r3, #0]
        if (16 == index)
 8005b5c:	2323      	movs	r3, #35	; 0x23
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d107      	bne.n	8005b76 <set_alarm_callback+0x22a>
            time_alarm_off_fri = atoi(token);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f01c fc3d 	bl	80223e8 <atoi>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	4b8e      	ldr	r3, [pc, #568]	; (8005dac <set_alarm_callback+0x460>)
 8005b74:	701a      	strb	r2, [r3, #0]
        if (17 == index)
 8005b76:	2323      	movs	r3, #35	; 0x23
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b11      	cmp	r3, #17
 8005b7e:	d107      	bne.n	8005b90 <set_alarm_callback+0x244>
            time_alarm_off_sat = atoi(token);
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	0018      	movs	r0, r3
 8005b84:	f01c fc30 	bl	80223e8 <atoi>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4b88      	ldr	r3, [pc, #544]	; (8005db0 <set_alarm_callback+0x464>)
 8005b8e:	701a      	strb	r2, [r3, #0]
        token = strtok_r((char*)NULL, delim, &save_ptr);
 8005b90:	2310      	movs	r3, #16
 8005b92:	18fa      	adds	r2, r7, r3
 8005b94:	230c      	movs	r3, #12
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	0019      	movs	r1, r3
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f01d f8a7 	bl	8022cee <strtok_r>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
        index++;
 8005ba4:	2123      	movs	r1, #35	; 0x23
 8005ba6:	187b      	adds	r3, r7, r1
 8005ba8:	781a      	ldrb	r2, [r3, #0]
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	3201      	adds	r2, #1
 8005bae:	701a      	strb	r2, [r3, #0]
    while (NULL != token)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d000      	beq.n	8005bb8 <set_alarm_callback+0x26c>
 8005bb6:	e701      	b.n	80059bc <set_alarm_callback+0x70>
    }
    printf("========================Alarm Set=============================\n");
 8005bb8:	4b7e      	ldr	r3, [pc, #504]	; (8005db4 <set_alarm_callback+0x468>)
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f01c fe9a 	bl	80228f4 <puts>
    printf("time_alarm_on: %02d:%02d, time_alarm_off: %02d:%02d\n", time_alarm_on_hh, time_alarm_on_mm, time_alarm_off_hh, time_alarm_off_mm);
 8005bc0:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <set_alarm_callback+0x420>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	4b6a      	ldr	r3, [pc, #424]	; (8005d70 <set_alarm_callback+0x424>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	001a      	movs	r2, r3
 8005bcc:	4b69      	ldr	r3, [pc, #420]	; (8005d74 <set_alarm_callback+0x428>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	001c      	movs	r4, r3
 8005bd2:	4b69      	ldr	r3, [pc, #420]	; (8005d78 <set_alarm_callback+0x42c>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	4878      	ldr	r0, [pc, #480]	; (8005db8 <set_alarm_callback+0x46c>)
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	0023      	movs	r3, r4
 8005bdc:	f01c fe1a 	bl	8022814 <iprintf>
    printf("time alarm on sun %d, mon %d, tue %d, wed %d, thu %d, fri %d, sat %d\n", time_alarm_on_sun, time_alarm_on_mon, time_alarm_on_tue, time_alarm_on_wed, time_alarm_on_thu, time_alarm_on_fri, time_alarm_on_sat);
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <set_alarm_callback+0x430>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	001d      	movs	r5, r3
 8005be6:	4b66      	ldr	r3, [pc, #408]	; (8005d80 <set_alarm_callback+0x434>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	001e      	movs	r6, r3
 8005bec:	4b65      	ldr	r3, [pc, #404]	; (8005d84 <set_alarm_callback+0x438>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	469c      	mov	ip, r3
 8005bf2:	4b65      	ldr	r3, [pc, #404]	; (8005d88 <set_alarm_callback+0x43c>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	001a      	movs	r2, r3
 8005bf8:	4b64      	ldr	r3, [pc, #400]	; (8005d8c <set_alarm_callback+0x440>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	4b64      	ldr	r3, [pc, #400]	; (8005d90 <set_alarm_callback+0x444>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	001c      	movs	r4, r3
 8005c04:	4b63      	ldr	r3, [pc, #396]	; (8005d94 <set_alarm_callback+0x448>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	486c      	ldr	r0, [pc, #432]	; (8005dbc <set_alarm_callback+0x470>)
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	9402      	str	r4, [sp, #8]
 8005c0e:	9101      	str	r1, [sp, #4]
 8005c10:	9200      	str	r2, [sp, #0]
 8005c12:	4663      	mov	r3, ip
 8005c14:	0032      	movs	r2, r6
 8005c16:	0029      	movs	r1, r5
 8005c18:	f01c fdfc 	bl	8022814 <iprintf>
    printf("time alarm off sun %d, mon %d, tue %d, wed %d, thu %d, fri %d, sat %d\n", time_alarm_off_sun, time_alarm_off_mon, time_alarm_off_tue, time_alarm_off_wed, time_alarm_off_thu, time_alarm_off_fri, time_alarm_off_sat);
 8005c1c:	4b5e      	ldr	r3, [pc, #376]	; (8005d98 <set_alarm_callback+0x44c>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	001d      	movs	r5, r3
 8005c22:	4b5e      	ldr	r3, [pc, #376]	; (8005d9c <set_alarm_callback+0x450>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	001e      	movs	r6, r3
 8005c28:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <set_alarm_callback+0x454>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	469c      	mov	ip, r3
 8005c2e:	4b5d      	ldr	r3, [pc, #372]	; (8005da4 <set_alarm_callback+0x458>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	001a      	movs	r2, r3
 8005c34:	4b5c      	ldr	r3, [pc, #368]	; (8005da8 <set_alarm_callback+0x45c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	0019      	movs	r1, r3
 8005c3a:	4b5c      	ldr	r3, [pc, #368]	; (8005dac <set_alarm_callback+0x460>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	001c      	movs	r4, r3
 8005c40:	4b5b      	ldr	r3, [pc, #364]	; (8005db0 <set_alarm_callback+0x464>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	485e      	ldr	r0, [pc, #376]	; (8005dc0 <set_alarm_callback+0x474>)
 8005c46:	9303      	str	r3, [sp, #12]
 8005c48:	9402      	str	r4, [sp, #8]
 8005c4a:	9101      	str	r1, [sp, #4]
 8005c4c:	9200      	str	r2, [sp, #0]
 8005c4e:	4663      	mov	r3, ip
 8005c50:	0032      	movs	r2, r6
 8005c52:	0029      	movs	r1, r5
 8005c54:	f01c fdde 	bl	8022814 <iprintf>
    printf("===============================================================\n");
 8005c58:	4b5a      	ldr	r3, [pc, #360]	; (8005dc4 <set_alarm_callback+0x478>)
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f01c fe4a 	bl	80228f4 <puts>

    Recursion_Alarm_ON[0] = time_alarm_on_sun,
 8005c60:	4b46      	ldr	r3, [pc, #280]	; (8005d7c <set_alarm_callback+0x430>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	001a      	movs	r2, r3
 8005c66:	4b58      	ldr	r3, [pc, #352]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005c68:	601a      	str	r2, [r3, #0]
    Recursion_Alarm_ON[1] = time_alarm_on_mon,
 8005c6a:	4b45      	ldr	r3, [pc, #276]	; (8005d80 <set_alarm_callback+0x434>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	001a      	movs	r2, r3
 8005c70:	4b55      	ldr	r3, [pc, #340]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005c72:	605a      	str	r2, [r3, #4]
    Recursion_Alarm_ON[2] = time_alarm_on_tue,
 8005c74:	4b43      	ldr	r3, [pc, #268]	; (8005d84 <set_alarm_callback+0x438>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	001a      	movs	r2, r3
 8005c7a:	4b53      	ldr	r3, [pc, #332]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005c7c:	609a      	str	r2, [r3, #8]
    Recursion_Alarm_ON[3] = time_alarm_on_wed,
 8005c7e:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <set_alarm_callback+0x43c>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	001a      	movs	r2, r3
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005c86:	60da      	str	r2, [r3, #12]
    Recursion_Alarm_ON[4] = time_alarm_on_thu,
 8005c88:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <set_alarm_callback+0x440>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	001a      	movs	r2, r3
 8005c8e:	4b4e      	ldr	r3, [pc, #312]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005c90:	611a      	str	r2, [r3, #16]
    Recursion_Alarm_ON[5] = time_alarm_on_fri,
 8005c92:	4b3f      	ldr	r3, [pc, #252]	; (8005d90 <set_alarm_callback+0x444>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	001a      	movs	r2, r3
 8005c98:	4b4b      	ldr	r3, [pc, #300]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005c9a:	615a      	str	r2, [r3, #20]
    Recursion_Alarm_ON[6] = time_alarm_on_sat;
 8005c9c:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <set_alarm_callback+0x448>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	4b49      	ldr	r3, [pc, #292]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005ca4:	619a      	str	r2, [r3, #24]

    Recursion_Alarm_OFF[0] = time_alarm_off_sun,
 8005ca6:	4b3c      	ldr	r3, [pc, #240]	; (8005d98 <set_alarm_callback+0x44c>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	001a      	movs	r2, r3
 8005cac:	4b47      	ldr	r3, [pc, #284]	; (8005dcc <set_alarm_callback+0x480>)
 8005cae:	601a      	str	r2, [r3, #0]
    Recursion_Alarm_OFF[1] = time_alarm_off_mon,
 8005cb0:	4b3a      	ldr	r3, [pc, #232]	; (8005d9c <set_alarm_callback+0x450>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <set_alarm_callback+0x480>)
 8005cb8:	605a      	str	r2, [r3, #4]
    Recursion_Alarm_OFF[2] = time_alarm_off_tue,
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <set_alarm_callback+0x454>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	001a      	movs	r2, r3
 8005cc0:	4b42      	ldr	r3, [pc, #264]	; (8005dcc <set_alarm_callback+0x480>)
 8005cc2:	609a      	str	r2, [r3, #8]
    Recursion_Alarm_OFF[3] = time_alarm_off_wed,
 8005cc4:	4b37      	ldr	r3, [pc, #220]	; (8005da4 <set_alarm_callback+0x458>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	001a      	movs	r2, r3
 8005cca:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <set_alarm_callback+0x480>)
 8005ccc:	60da      	str	r2, [r3, #12]
    Recursion_Alarm_OFF[4] = time_alarm_off_thu,
 8005cce:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <set_alarm_callback+0x45c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	4b3d      	ldr	r3, [pc, #244]	; (8005dcc <set_alarm_callback+0x480>)
 8005cd6:	611a      	str	r2, [r3, #16]
    Recursion_Alarm_OFF[5] = time_alarm_off_fri,
 8005cd8:	4b34      	ldr	r3, [pc, #208]	; (8005dac <set_alarm_callback+0x460>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	001a      	movs	r2, r3
 8005cde:	4b3b      	ldr	r3, [pc, #236]	; (8005dcc <set_alarm_callback+0x480>)
 8005ce0:	615a      	str	r2, [r3, #20]
    Recursion_Alarm_OFF[6] = time_alarm_off_sat;
 8005ce2:	4b33      	ldr	r3, [pc, #204]	; (8005db0 <set_alarm_callback+0x464>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <set_alarm_callback+0x480>)
 8005cea:	619a      	str	r2, [r3, #24]

    // set the content type
    arg->TYPE = PTYPE_TEXT;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	705a      	strb	r2, [r3, #1]
    // attach the content
    content_info->content = NULL;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	609a      	str	r2, [r3, #8]
    // attach the content lengthe
    content_info->content_len = 0;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	605a      	str	r2, [r3, #4]

    pcb_config.pcb_config_time_alarm_on_hh = time_alarm_on_hh;
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <set_alarm_callback+0x420>)
 8005d00:	7819      	ldrb	r1, [r3, #0]
 8005d02:	4a33      	ldr	r2, [pc, #204]	; (8005dd0 <set_alarm_callback+0x484>)
 8005d04:	23b4      	movs	r3, #180	; 0xb4
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	54d1      	strb	r1, [r2, r3]
    pcb_config.pcb_config_time_alarm_on_mm = time_alarm_on_mm;
 8005d0a:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <set_alarm_callback+0x424>)
 8005d0c:	7819      	ldrb	r1, [r3, #0]
 8005d0e:	4a30      	ldr	r2, [pc, #192]	; (8005dd0 <set_alarm_callback+0x484>)
 8005d10:	236a      	movs	r3, #106	; 0x6a
 8005d12:	33ff      	adds	r3, #255	; 0xff
 8005d14:	54d1      	strb	r1, [r2, r3]
    pcb_config.pcb_config_time_alarm_off_hh = time_alarm_off_hh;
 8005d16:	4b17      	ldr	r3, [pc, #92]	; (8005d74 <set_alarm_callback+0x428>)
 8005d18:	7819      	ldrb	r1, [r3, #0]
 8005d1a:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <set_alarm_callback+0x484>)
 8005d1c:	23b5      	movs	r3, #181	; 0xb5
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	54d1      	strb	r1, [r2, r3]
    pcb_config.pcb_config_time_alarm_off_mm = time_alarm_off_mm;
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <set_alarm_callback+0x42c>)
 8005d24:	7819      	ldrb	r1, [r3, #0]
 8005d26:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <set_alarm_callback+0x484>)
 8005d28:	236c      	movs	r3, #108	; 0x6c
 8005d2a:	33ff      	adds	r3, #255	; 0xff
 8005d2c:	54d1      	strb	r1, [r2, r3]

    memcpy(pcb_config.pcb_config_Recursion_Alarm_ON, Recursion_Alarm_ON, sizeof(pcb_config.pcb_config_Recursion_Alarm_ON));
 8005d2e:	4a28      	ldr	r2, [pc, #160]	; (8005dd0 <set_alarm_callback+0x484>)
 8005d30:	2398      	movs	r3, #152	; 0x98
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4924      	ldr	r1, [pc, #144]	; (8005dc8 <set_alarm_callback+0x47c>)
 8005d36:	18d3      	adds	r3, r2, r3
 8005d38:	000a      	movs	r2, r1
 8005d3a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d3c:	c313      	stmia	r3!, {r0, r1, r4}
 8005d3e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d40:	c313      	stmia	r3!, {r0, r1, r4}
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	601a      	str	r2, [r3, #0]
    memcpy(pcb_config.pcb_config_Recursion_Alarm_OFF, Recursion_Alarm_OFF, sizeof(pcb_config.pcb_config_Recursion_Alarm_OFF));
 8005d46:	4a22      	ldr	r2, [pc, #136]	; (8005dd0 <set_alarm_callback+0x484>)
 8005d48:	23a6      	movs	r3, #166	; 0xa6
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	491f      	ldr	r1, [pc, #124]	; (8005dcc <set_alarm_callback+0x480>)
 8005d4e:	18d3      	adds	r3, r2, r3
 8005d50:	000a      	movs	r2, r1
 8005d52:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d54:	c313      	stmia	r3!, {r0, r1, r4}
 8005d56:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d58:	c313      	stmia	r3!, {r0, r1, r4}
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	601a      	str	r2, [r3, #0]

    WriteToEeprom();
 8005d5e:	f003 ff51 	bl	8009c04 <WriteToEeprom>
}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b00b      	add	sp, #44	; 0x2c
 8005d68:	e034      	b.n	8005dd4 <set_alarm_callback+0x488>
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	20006700 	.word	0x20006700
 8005d70:	20006701 	.word	0x20006701
 8005d74:	20006702 	.word	0x20006702
 8005d78:	20006703 	.word	0x20006703
 8005d7c:	20006704 	.word	0x20006704
 8005d80:	20006705 	.word	0x20006705
 8005d84:	20006706 	.word	0x20006706
 8005d88:	20006707 	.word	0x20006707
 8005d8c:	20006708 	.word	0x20006708
 8005d90:	20006709 	.word	0x20006709
 8005d94:	2000670a 	.word	0x2000670a
 8005d98:	2000670b 	.word	0x2000670b
 8005d9c:	2000670c 	.word	0x2000670c
 8005da0:	2000670d 	.word	0x2000670d
 8005da4:	2000670e 	.word	0x2000670e
 8005da8:	2000670f 	.word	0x2000670f
 8005dac:	20006710 	.word	0x20006710
 8005db0:	20006711 	.word	0x20006711
 8005db4:	08025428 	.word	0x08025428
 8005db8:	08025468 	.word	0x08025468
 8005dbc:	080254a0 	.word	0x080254a0
 8005dc0:	080254e8 	.word	0x080254e8
 8005dc4:	08025530 	.word	0x08025530
 8005dc8:	20005240 	.word	0x20005240
 8005dcc:	2000525c 	.word	0x2000525c
 8005dd0:	20006db4 	.word	0x20006db4
 8005dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)

08005dd8 <set_file_callback>:
void set_file_callback(void *content, st_http_request *arg)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
    httpServer_webContent *content_info = (httpServer_webContent *)content;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	61fb      	str	r3, [r7, #28]
    printf("Test Callback: %s\r\n", content_info->content_name);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b18      	ldr	r3, [pc, #96]	; (8005e4c <set_file_callback+0x74>)
 8005dec:	0011      	movs	r1, r2
 8005dee:	0018      	movs	r0, r3
 8005df0:	f01c fd10 	bl	8022814 <iprintf>
    // get the full uri
    printf("Param value are %s\r\n", arg->URI);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	1c9a      	adds	r2, r3, #2
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <set_file_callback+0x78>)
 8005dfa:	0011      	movs	r1, r2
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f01c fd09 	bl	8022814 <iprintf>

    char *uri = (char *)arg->URI;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	3302      	adds	r3, #2
 8005e06:	61bb      	str	r3, [r7, #24]

    char *get_value = strstr(uri, "?");
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	213f      	movs	r1, #63	; 0x3f
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f01c fed8 	bl	8022bc2 <strchr>
 8005e12:	0003      	movs	r3, r0
 8005e14:	617b      	str	r3, [r7, #20]
    get_value = get_value + 7;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	3307      	adds	r3, #7
 8005e1a:	617b      	str	r3, [r7, #20]
    // printf("Get value is %s\r\n",get_value);

    // parse and save the values
    char *save_ptr;
    char delim[] = "z";
 8005e1c:	210c      	movs	r1, #12
 8005e1e:	187b      	adds	r3, r7, r1
 8005e20:	227a      	movs	r2, #122	; 0x7a
 8005e22:	801a      	strh	r2, [r3, #0]
    strtok_r(get_value, delim, &save_ptr);
 8005e24:	2310      	movs	r3, #16
 8005e26:	18fa      	adds	r2, r7, r3
 8005e28:	1879      	adds	r1, r7, r1
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f01c ff5e 	bl	8022cee <strtok_r>

    // set the content type
    arg->TYPE = PTYPE_TEXT;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2203      	movs	r2, #3
 8005e36:	705a      	strb	r2, [r3, #1]
    // attach the content
    content_info->content = NULL;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	609a      	str	r2, [r3, #8]
    // attach the content lengthe
    content_info->content_len = 0;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2200      	movs	r2, #0
 8005e42:	605a      	str	r2, [r3, #4]
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b008      	add	sp, #32
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	080252fc 	.word	0x080252fc
 8005e50:	08025310 	.word	0x08025310

08005e54 <get_file_callback>:
void get_file_callback(void *content, st_http_request *arg)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
    httpServer_webContent *content_info = (httpServer_webContent *)content;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
    printf("Test Callback: %s\r\n", content_info->content_name);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <get_file_callback+0x40>)
 8005e68:	0011      	movs	r1, r2
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f01c fcd2 	bl	8022814 <iprintf>
    //            time_alarm_on_hh, time_alarm_on_mm, time_alarm_off_hh, time_alarm_off_mm,
    //            time_alarm_on_sun, time_alarm_on_mon, time_alarm_on_tue, time_alarm_on_wed, time_alarm_on_thu, time_alarm_on_fri, time_alarm_on_sat,
    //            time_alarm_off_sun, time_alarm_off_mon, time_alarm_off_tue, time_alarm_off_wed, time_alarm_off_thu, time_alarm_off_fri, time_alarm_off_sat);
    //    printf("callback data %s\r\n",callback_data);
    // set the content type
    arg->TYPE = PTYPE_TEXT;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2203      	movs	r2, #3
 8005e74:	705a      	strb	r2, [r3, #1]
    // attach the content
    content_info->content = callback_data;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <get_file_callback+0x44>)
 8005e7a:	609a      	str	r2, [r3, #8]
    // attach the content lengthe
    content_info->content_len = strlen((char*)callback_data);
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <get_file_callback+0x44>)
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f7fc f948 	bl	8002114 <strlen>
 8005e84:	0002      	movs	r2, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	605a      	str	r2, [r3, #4]
}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b004      	add	sp, #16
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	080252fc 	.word	0x080252fc
 8005e98:	2000669c 	.word	0x2000669c

08005e9c <get_alarm_callback>:
void get_alarm_callback(void *content, st_http_request *arg)
{
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	46de      	mov	lr, fp
 8005ea0:	4657      	mov	r7, sl
 8005ea2:	464e      	mov	r6, r9
 8005ea4:	4645      	mov	r5, r8
 8005ea6:	b5e0      	push	{r5, r6, r7, lr}
 8005ea8:	b09f      	sub	sp, #124	; 0x7c
 8005eaa:	af12      	add	r7, sp, #72	; 0x48
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24
 8005eae:	6239      	str	r1, [r7, #32]
    httpServer_webContent *content_info = (httpServer_webContent *)content;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    printf("Test Callback: %s\r\n", content_info->content_name);
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b3f      	ldr	r3, [pc, #252]	; (8005fb8 <get_alarm_callback+0x11c>)
 8005eba:	0011      	movs	r1, r2
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f01c fca9 	bl	8022814 <iprintf>
    // get the full uri
    printf("Param value are %s\r\n", arg->URI);
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	1c9a      	adds	r2, r3, #2
 8005ec6:	4b3d      	ldr	r3, [pc, #244]	; (8005fbc <get_alarm_callback+0x120>)
 8005ec8:	0011      	movs	r1, r2
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f01c fca2 	bl	8022814 <iprintf>

    snprintf((char*)callback_data, sizeof(callback_data), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d \r\n",
 8005ed0:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <get_alarm_callback+0x124>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <get_alarm_callback+0x128>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4699      	mov	r9, r3
 8005edc:	4b3a      	ldr	r3, [pc, #232]	; (8005fc8 <get_alarm_callback+0x12c>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	469a      	mov	sl, r3
 8005ee2:	4b3a      	ldr	r3, [pc, #232]	; (8005fcc <get_alarm_callback+0x130>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	469b      	mov	fp, r3
 8005ee8:	4b39      	ldr	r3, [pc, #228]	; (8005fd0 <get_alarm_callback+0x134>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	4b39      	ldr	r3, [pc, #228]	; (8005fd4 <get_alarm_callback+0x138>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <get_alarm_callback+0x13c>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	4b38      	ldr	r3, [pc, #224]	; (8005fdc <get_alarm_callback+0x140>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	4b37      	ldr	r3, [pc, #220]	; (8005fe0 <get_alarm_callback+0x144>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	4b37      	ldr	r3, [pc, #220]	; (8005fe4 <get_alarm_callback+0x148>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	4b36      	ldr	r3, [pc, #216]	; (8005fe8 <get_alarm_callback+0x14c>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4b36      	ldr	r3, [pc, #216]	; (8005fec <get_alarm_callback+0x150>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	4698      	mov	r8, r3
 8005f18:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <get_alarm_callback+0x154>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	469c      	mov	ip, r3
 8005f1e:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <get_alarm_callback+0x158>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	001e      	movs	r6, r3
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <get_alarm_callback+0x15c>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	001d      	movs	r5, r3
 8005f2a:	4b34      	ldr	r3, [pc, #208]	; (8005ffc <get_alarm_callback+0x160>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	001c      	movs	r4, r3
 8005f30:	4b33      	ldr	r3, [pc, #204]	; (8006000 <get_alarm_callback+0x164>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	0019      	movs	r1, r3
 8005f36:	4b33      	ldr	r3, [pc, #204]	; (8006004 <get_alarm_callback+0x168>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	4a33      	ldr	r2, [pc, #204]	; (8006008 <get_alarm_callback+0x16c>)
 8005f3c:	4833      	ldr	r0, [pc, #204]	; (800600c <get_alarm_callback+0x170>)
 8005f3e:	9310      	str	r3, [sp, #64]	; 0x40
 8005f40:	910f      	str	r1, [sp, #60]	; 0x3c
 8005f42:	940e      	str	r4, [sp, #56]	; 0x38
 8005f44:	950d      	str	r5, [sp, #52]	; 0x34
 8005f46:	960c      	str	r6, [sp, #48]	; 0x30
 8005f48:	4661      	mov	r1, ip
 8005f4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	910a      	str	r1, [sp, #40]	; 0x28
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	9109      	str	r1, [sp, #36]	; 0x24
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	9108      	str	r1, [sp, #32]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	9107      	str	r1, [sp, #28]
 8005f5c:	68f9      	ldr	r1, [r7, #12]
 8005f5e:	9106      	str	r1, [sp, #24]
 8005f60:	6939      	ldr	r1, [r7, #16]
 8005f62:	9105      	str	r1, [sp, #20]
 8005f64:	6979      	ldr	r1, [r7, #20]
 8005f66:	9104      	str	r1, [sp, #16]
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	9103      	str	r1, [sp, #12]
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	9102      	str	r1, [sp, #8]
 8005f70:	4651      	mov	r1, sl
 8005f72:	9101      	str	r1, [sp, #4]
 8005f74:	4649      	mov	r1, r9
 8005f76:	9100      	str	r1, [sp, #0]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2164      	movs	r1, #100	; 0x64
 8005f7c:	f01c fcc4 	bl	8022908 <sniprintf>
             time_alarm_on_hh, time_alarm_on_mm, time_alarm_off_hh, time_alarm_off_mm,
             time_alarm_on_sun, time_alarm_on_mon, time_alarm_on_tue, time_alarm_on_wed, time_alarm_on_thu, time_alarm_on_fri, time_alarm_on_sat,
             time_alarm_off_sun, time_alarm_off_mon, time_alarm_off_tue, time_alarm_off_wed, time_alarm_off_thu, time_alarm_off_fri, time_alarm_off_sat);
    printf("callback data %s\r\n", callback_data);
 8005f80:	4a22      	ldr	r2, [pc, #136]	; (800600c <get_alarm_callback+0x170>)
 8005f82:	4b23      	ldr	r3, [pc, #140]	; (8006010 <get_alarm_callback+0x174>)
 8005f84:	0011      	movs	r1, r2
 8005f86:	0018      	movs	r0, r3
 8005f88:	f01c fc44 	bl	8022814 <iprintf>
    // set the content type
    arg->TYPE = PTYPE_TEXT;
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	705a      	strb	r2, [r3, #1]
    // attach the content
    content_info->content = callback_data;
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	4a1d      	ldr	r2, [pc, #116]	; (800600c <get_alarm_callback+0x170>)
 8005f96:	609a      	str	r2, [r3, #8]
    // attach the content lengthe
    content_info->content_len = strlen((char*)callback_data);
 8005f98:	4b1c      	ldr	r3, [pc, #112]	; (800600c <get_alarm_callback+0x170>)
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f7fc f8ba 	bl	8002114 <strlen>
 8005fa0:	0002      	movs	r2, r0
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	605a      	str	r2, [r3, #4]
}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b00d      	add	sp, #52	; 0x34
 8005fac:	bcf0      	pop	{r4, r5, r6, r7}
 8005fae:	46bb      	mov	fp, r7
 8005fb0:	46b2      	mov	sl, r6
 8005fb2:	46a9      	mov	r9, r5
 8005fb4:	46a0      	mov	r8, r4
 8005fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb8:	080252fc 	.word	0x080252fc
 8005fbc:	08025310 	.word	0x08025310
 8005fc0:	20006700 	.word	0x20006700
 8005fc4:	20006701 	.word	0x20006701
 8005fc8:	20006702 	.word	0x20006702
 8005fcc:	20006703 	.word	0x20006703
 8005fd0:	20006704 	.word	0x20006704
 8005fd4:	20006705 	.word	0x20006705
 8005fd8:	20006706 	.word	0x20006706
 8005fdc:	20006707 	.word	0x20006707
 8005fe0:	20006708 	.word	0x20006708
 8005fe4:	20006709 	.word	0x20006709
 8005fe8:	2000670a 	.word	0x2000670a
 8005fec:	2000670b 	.word	0x2000670b
 8005ff0:	2000670c 	.word	0x2000670c
 8005ff4:	2000670d 	.word	0x2000670d
 8005ff8:	2000670e 	.word	0x2000670e
 8005ffc:	2000670f 	.word	0x2000670f
 8006000:	20006710 	.word	0x20006710
 8006004:	20006711 	.word	0x20006711
 8006008:	08025570 	.word	0x08025570
 800600c:	2000669c 	.word	0x2000669c
 8006010:	08025414 	.word	0x08025414

08006014 <Delay_us>:
int toggle2 = 0;
IR_Receive_OFF_State_def IR_Receive_OFF_State = INIT2;
IR_Receive_State_def IR_Receive_State = INIT_IR;

void Delay_us(uint16_t us)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	0002      	movs	r2, r0
 800601c:	1dbb      	adds	r3, r7, #6
 800601e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0); // set the counter value a 0
 8006020:	4b08      	ldr	r3, [pc, #32]	; (8006044 <Delay_us+0x30>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <Delay_us+0x30>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006030:	1dbb      	adds	r3, r7, #6
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d3f8      	bcc.n	800602a <Delay_us+0x16>
		; // wait for the counter to reach the us input in the parameter
}
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	46bd      	mov	sp, r7
 800603e:	b002      	add	sp, #8
 8006040:	bd80      	pop	{r7, pc}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	200069f8 	.word	0x200069f8

08006048 <NEC_Start>:

void NEC_Start()
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0

	TIM14->CCR1 = VAR;
 800604c:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <NEC_Start+0x74>)
 800604e:	227e      	movs	r2, #126	; 0x7e
 8006050:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].start_t_on * tv_protocol[tv_type].time_Unit); // Delay_us(4500);// //Delay_us(9000);
 8006052:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <NEC_Start+0x78>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <NEC_Start+0x7c>)
 8006058:	212c      	movs	r1, #44	; 0x2c
 800605a:	434b      	muls	r3, r1
 800605c:	18d3      	adds	r3, r2, r3
 800605e:	3318      	adds	r3, #24
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	b29a      	uxth	r2, r3
 8006064:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <NEC_Start+0x78>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4916      	ldr	r1, [pc, #88]	; (80060c4 <NEC_Start+0x7c>)
 800606a:	202c      	movs	r0, #44	; 0x2c
 800606c:	4343      	muls	r3, r0
 800606e:	18cb      	adds	r3, r1, r3
 8006070:	3304      	adds	r3, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	4353      	muls	r3, r2
 8006078:	b29b      	uxth	r3, r3
 800607a:	0018      	movs	r0, r3
 800607c:	f7ff ffca 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;
 8006080:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <NEC_Start+0x74>)
 8006082:	2200      	movs	r2, #0
 8006084:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].start_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(4500);
 8006086:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <NEC_Start+0x78>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a0e      	ldr	r2, [pc, #56]	; (80060c4 <NEC_Start+0x7c>)
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	434b      	muls	r3, r1
 8006090:	18d3      	adds	r3, r2, r3
 8006092:	331c      	adds	r3, #28
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	b29a      	uxth	r2, r3
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <NEC_Start+0x78>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4909      	ldr	r1, [pc, #36]	; (80060c4 <NEC_Start+0x7c>)
 800609e:	202c      	movs	r0, #44	; 0x2c
 80060a0:	4343      	muls	r3, r0
 80060a2:	18cb      	adds	r3, r1, r3
 80060a4:	3304      	adds	r3, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	4353      	muls	r3, r2
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff ffb0 	bl	8006014 <Delay_us>
}
 80060b4:	46c0      	nop			; (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	40002000 	.word	0x40002000
 80060c0:	20005018 	.word	0x20005018
 80060c4:	2000675c 	.word	0x2000675c

080060c8 <NEC_Stop>:
void NEC_Stop()
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0

	TIM14->CCR1 = VAR;															// VAR;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <NEC_Stop+0x74>)
 80060ce:	227e      	movs	r2, #126	; 0x7e
 80060d0:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].stop_t_on * tv_protocol[tv_type].time_Unit);	// Delay_us(4500);// //Delay_us(9000);
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <NEC_Stop+0x78>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <NEC_Stop+0x7c>)
 80060d8:	212c      	movs	r1, #44	; 0x2c
 80060da:	434b      	muls	r3, r1
 80060dc:	18d3      	adds	r3, r2, r3
 80060de:	3320      	adds	r3, #32
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	4b16      	ldr	r3, [pc, #88]	; (8006140 <NEC_Stop+0x78>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4916      	ldr	r1, [pc, #88]	; (8006144 <NEC_Stop+0x7c>)
 80060ea:	202c      	movs	r0, #44	; 0x2c
 80060ec:	4343      	muls	r3, r0
 80060ee:	18cb      	adds	r3, r1, r3
 80060f0:	3304      	adds	r3, #4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	4353      	muls	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7ff ff8a 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;															// 0;
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <NEC_Stop+0x74>)
 8006102:	2200      	movs	r2, #0
 8006104:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].stop_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(4500);
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <NEC_Stop+0x78>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a0e      	ldr	r2, [pc, #56]	; (8006144 <NEC_Stop+0x7c>)
 800610c:	212c      	movs	r1, #44	; 0x2c
 800610e:	434b      	muls	r3, r1
 8006110:	18d3      	adds	r3, r2, r3
 8006112:	3324      	adds	r3, #36	; 0x24
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b29a      	uxth	r2, r3
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <NEC_Stop+0x78>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4909      	ldr	r1, [pc, #36]	; (8006144 <NEC_Stop+0x7c>)
 800611e:	202c      	movs	r0, #44	; 0x2c
 8006120:	4343      	muls	r3, r0
 8006122:	18cb      	adds	r3, r1, r3
 8006124:	3304      	adds	r3, #4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	4353      	muls	r3, r2
 800612c:	b29b      	uxth	r3, r3
 800612e:	0018      	movs	r0, r3
 8006130:	f7ff ff70 	bl	8006014 <Delay_us>
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	40002000 	.word	0x40002000
 8006140:	20005018 	.word	0x20005018
 8006144:	2000675c 	.word	0x2000675c

08006148 <Logical_0_NEC>:
void Logical_0_NEC()
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
	TIM14->CCR1 = VAR;															// 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <Logical_0_NEC+0x74>)
 800614e:	227e      	movs	r2, #126	; 0x7e
 8006150:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].zero_t_on * tv_protocol[tv_type].time_Unit);	// Delay_us(560);/
 8006152:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <Logical_0_NEC+0x78>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1b      	ldr	r2, [pc, #108]	; (80061c4 <Logical_0_NEC+0x7c>)
 8006158:	212c      	movs	r1, #44	; 0x2c
 800615a:	434b      	muls	r3, r1
 800615c:	18d3      	adds	r3, r2, r3
 800615e:	3308      	adds	r3, #8
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	b29a      	uxth	r2, r3
 8006164:	4b16      	ldr	r3, [pc, #88]	; (80061c0 <Logical_0_NEC+0x78>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4916      	ldr	r1, [pc, #88]	; (80061c4 <Logical_0_NEC+0x7c>)
 800616a:	202c      	movs	r0, #44	; 0x2c
 800616c:	4343      	muls	r3, r0
 800616e:	18cb      	adds	r3, r1, r3
 8006170:	3304      	adds	r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	4353      	muls	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	0018      	movs	r0, r3
 800617c:	f7ff ff4a 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;															// 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <Logical_0_NEC+0x74>)
 8006182:	2200      	movs	r2, #0
 8006184:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].zero_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(560);//
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <Logical_0_NEC+0x78>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <Logical_0_NEC+0x7c>)
 800618c:	212c      	movs	r1, #44	; 0x2c
 800618e:	434b      	muls	r3, r1
 8006190:	18d3      	adds	r3, r2, r3
 8006192:	330c      	adds	r3, #12
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	b29a      	uxth	r2, r3
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <Logical_0_NEC+0x78>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4909      	ldr	r1, [pc, #36]	; (80061c4 <Logical_0_NEC+0x7c>)
 800619e:	202c      	movs	r0, #44	; 0x2c
 80061a0:	4343      	muls	r3, r0
 80061a2:	18cb      	adds	r3, r1, r3
 80061a4:	3304      	adds	r3, #4
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4353      	muls	r3, r2
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	0018      	movs	r0, r3
 80061b0:	f7ff ff30 	bl	8006014 <Delay_us>
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	40002000 	.word	0x40002000
 80061c0:	20005018 	.word	0x20005018
 80061c4:	2000675c 	.word	0x2000675c

080061c8 <Logical_1_NEC>:

void Logical_1_NEC()
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
	TIM14->CCR1 = VAR;														   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 80061cc:	4b1b      	ldr	r3, [pc, #108]	; (800623c <Logical_1_NEC+0x74>)
 80061ce:	227e      	movs	r2, #126	; 0x7e
 80061d0:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);  // Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
 80061d2:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <Logical_1_NEC+0x78>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1b      	ldr	r2, [pc, #108]	; (8006244 <Logical_1_NEC+0x7c>)
 80061d8:	212c      	movs	r1, #44	; 0x2c
 80061da:	434b      	muls	r3, r1
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	3310      	adds	r3, #16
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	4b16      	ldr	r3, [pc, #88]	; (8006240 <Logical_1_NEC+0x78>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4916      	ldr	r1, [pc, #88]	; (8006244 <Logical_1_NEC+0x7c>)
 80061ea:	202c      	movs	r0, #44	; 0x2c
 80061ec:	4343      	muls	r3, r0
 80061ee:	18cb      	adds	r3, r1, r3
 80061f0:	3304      	adds	r3, #4
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4353      	muls	r3, r2
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	0018      	movs	r0, r3
 80061fc:	f7ff ff0a 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;														   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 8006200:	4b0e      	ldr	r3, [pc, #56]	; (800623c <Logical_1_NEC+0x74>)
 8006202:	2200      	movs	r2, #0
 8006204:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit);
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <Logical_1_NEC+0x78>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a0e      	ldr	r2, [pc, #56]	; (8006244 <Logical_1_NEC+0x7c>)
 800620c:	212c      	movs	r1, #44	; 0x2c
 800620e:	434b      	muls	r3, r1
 8006210:	18d3      	adds	r3, r2, r3
 8006212:	3314      	adds	r3, #20
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	b29a      	uxth	r2, r3
 8006218:	4b09      	ldr	r3, [pc, #36]	; (8006240 <Logical_1_NEC+0x78>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4909      	ldr	r1, [pc, #36]	; (8006244 <Logical_1_NEC+0x7c>)
 800621e:	202c      	movs	r0, #44	; 0x2c
 8006220:	4343      	muls	r3, r0
 8006222:	18cb      	adds	r3, r1, r3
 8006224:	3304      	adds	r3, #4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	4353      	muls	r3, r2
 800622c:	b29b      	uxth	r3, r3
 800622e:	0018      	movs	r0, r3
 8006230:	f7ff fef0 	bl	8006014 <Delay_us>
}
 8006234:	46c0      	nop			; (mov r8, r8)
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	40002000 	.word	0x40002000
 8006240:	20005018 	.word	0x20005018
 8006244:	2000675c 	.word	0x2000675c

08006248 <Logical_0_RC5>:
void Logical_0_RC5()
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
	TIM14->CCR1 = VAR;															// 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <Logical_0_RC5+0x74>)
 800624e:	227e      	movs	r2, #126	; 0x7e
 8006250:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].zero_t_on * tv_protocol[tv_type].time_Unit);	// Delay_us(560);/
 8006252:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <Logical_0_RC5+0x78>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <Logical_0_RC5+0x7c>)
 8006258:	212c      	movs	r1, #44	; 0x2c
 800625a:	434b      	muls	r3, r1
 800625c:	18d3      	adds	r3, r2, r3
 800625e:	3308      	adds	r3, #8
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	b29a      	uxth	r2, r3
 8006264:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <Logical_0_RC5+0x78>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4916      	ldr	r1, [pc, #88]	; (80062c4 <Logical_0_RC5+0x7c>)
 800626a:	202c      	movs	r0, #44	; 0x2c
 800626c:	4343      	muls	r3, r0
 800626e:	18cb      	adds	r3, r1, r3
 8006270:	3304      	adds	r3, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	4353      	muls	r3, r2
 8006278:	b29b      	uxth	r3, r3
 800627a:	0018      	movs	r0, r3
 800627c:	f7ff feca 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;															// 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <Logical_0_RC5+0x74>)
 8006282:	2200      	movs	r2, #0
 8006284:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].zero_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(560);//
 8006286:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <Logical_0_RC5+0x78>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <Logical_0_RC5+0x7c>)
 800628c:	212c      	movs	r1, #44	; 0x2c
 800628e:	434b      	muls	r3, r1
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	330c      	adds	r3, #12
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	b29a      	uxth	r2, r3
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <Logical_0_RC5+0x78>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4909      	ldr	r1, [pc, #36]	; (80062c4 <Logical_0_RC5+0x7c>)
 800629e:	202c      	movs	r0, #44	; 0x2c
 80062a0:	4343      	muls	r3, r0
 80062a2:	18cb      	adds	r3, r1, r3
 80062a4:	3304      	adds	r3, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4353      	muls	r3, r2
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7ff feb0 	bl	8006014 <Delay_us>
}
 80062b4:	46c0      	nop			; (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	40002000 	.word	0x40002000
 80062c0:	20005018 	.word	0x20005018
 80062c4:	2000675c 	.word	0x2000675c

080062c8 <Logical_1_RC5>:

void Logical_1_RC5()
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;														   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <Logical_1_RC5+0x74>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);  // Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <Logical_1_RC5+0x78>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <Logical_1_RC5+0x7c>)
 80062d8:	212c      	movs	r1, #44	; 0x2c
 80062da:	434b      	muls	r3, r1
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	3310      	adds	r3, #16
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	4b16      	ldr	r3, [pc, #88]	; (8006340 <Logical_1_RC5+0x78>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4916      	ldr	r1, [pc, #88]	; (8006344 <Logical_1_RC5+0x7c>)
 80062ea:	202c      	movs	r0, #44	; 0x2c
 80062ec:	4343      	muls	r3, r0
 80062ee:	18cb      	adds	r3, r1, r3
 80062f0:	3304      	adds	r3, #4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4353      	muls	r3, r2
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7ff fe8a 	bl	8006014 <Delay_us>
	TIM14->CCR1 = VAR;														   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 8006300:	4b0e      	ldr	r3, [pc, #56]	; (800633c <Logical_1_RC5+0x74>)
 8006302:	227e      	movs	r2, #126	; 0x7e
 8006304:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit);
 8006306:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <Logical_1_RC5+0x78>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <Logical_1_RC5+0x7c>)
 800630c:	212c      	movs	r1, #44	; 0x2c
 800630e:	434b      	muls	r3, r1
 8006310:	18d3      	adds	r3, r2, r3
 8006312:	3314      	adds	r3, #20
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	b29a      	uxth	r2, r3
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <Logical_1_RC5+0x78>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4909      	ldr	r1, [pc, #36]	; (8006344 <Logical_1_RC5+0x7c>)
 800631e:	202c      	movs	r0, #44	; 0x2c
 8006320:	4343      	muls	r3, r0
 8006322:	18cb      	adds	r3, r1, r3
 8006324:	3304      	adds	r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	4353      	muls	r3, r2
 800632c:	b29b      	uxth	r3, r3
 800632e:	0018      	movs	r0, r3
 8006330:	f7ff fe70 	bl	8006014 <Delay_us>
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	40002000 	.word	0x40002000
 8006340:	20005018 	.word	0x20005018
 8006344:	2000675c 	.word	0x2000675c

08006348 <Logical_0_RC6>:
void Logical_0_RC6()
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;															// 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <Logical_0_RC6+0x74>)
 800634e:	2200      	movs	r2, #0
 8006350:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].zero_t_on * tv_protocol[tv_type].time_Unit);	// Delay_us(560);/
 8006352:	4b1b      	ldr	r3, [pc, #108]	; (80063c0 <Logical_0_RC6+0x78>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1b      	ldr	r2, [pc, #108]	; (80063c4 <Logical_0_RC6+0x7c>)
 8006358:	212c      	movs	r1, #44	; 0x2c
 800635a:	434b      	muls	r3, r1
 800635c:	18d3      	adds	r3, r2, r3
 800635e:	3308      	adds	r3, #8
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	b29a      	uxth	r2, r3
 8006364:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <Logical_0_RC6+0x78>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4916      	ldr	r1, [pc, #88]	; (80063c4 <Logical_0_RC6+0x7c>)
 800636a:	202c      	movs	r0, #44	; 0x2c
 800636c:	4343      	muls	r3, r0
 800636e:	18cb      	adds	r3, r1, r3
 8006370:	3304      	adds	r3, #4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	4353      	muls	r3, r2
 8006378:	b29b      	uxth	r3, r3
 800637a:	0018      	movs	r0, r3
 800637c:	f7ff fe4a 	bl	8006014 <Delay_us>
	TIM14->CCR1 = VAR;															// 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <Logical_0_RC6+0x74>)
 8006382:	227e      	movs	r2, #126	; 0x7e
 8006384:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].zero_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(560);//
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <Logical_0_RC6+0x78>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <Logical_0_RC6+0x7c>)
 800638c:	212c      	movs	r1, #44	; 0x2c
 800638e:	434b      	muls	r3, r1
 8006390:	18d3      	adds	r3, r2, r3
 8006392:	330c      	adds	r3, #12
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	b29a      	uxth	r2, r3
 8006398:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <Logical_0_RC6+0x78>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4909      	ldr	r1, [pc, #36]	; (80063c4 <Logical_0_RC6+0x7c>)
 800639e:	202c      	movs	r0, #44	; 0x2c
 80063a0:	4343      	muls	r3, r0
 80063a2:	18cb      	adds	r3, r1, r3
 80063a4:	3304      	adds	r3, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	4353      	muls	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7ff fe30 	bl	8006014 <Delay_us>
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	40002000 	.word	0x40002000
 80063c0:	20005018 	.word	0x20005018
 80063c4:	2000675c 	.word	0x2000675c

080063c8 <Logical_1_RC6>:

void Logical_1_RC6()
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
	TIM14->CCR1 = VAR;														   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 80063cc:	4b1b      	ldr	r3, [pc, #108]	; (800643c <Logical_1_RC6+0x74>)
 80063ce:	227e      	movs	r2, #126	; 0x7e
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);  // Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
 80063d2:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <Logical_1_RC6+0x78>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	; (8006444 <Logical_1_RC6+0x7c>)
 80063d8:	212c      	movs	r1, #44	; 0x2c
 80063da:	434b      	muls	r3, r1
 80063dc:	18d3      	adds	r3, r2, r3
 80063de:	3310      	adds	r3, #16
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <Logical_1_RC6+0x78>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4916      	ldr	r1, [pc, #88]	; (8006444 <Logical_1_RC6+0x7c>)
 80063ea:	202c      	movs	r0, #44	; 0x2c
 80063ec:	4343      	muls	r3, r0
 80063ee:	18cb      	adds	r3, r1, r3
 80063f0:	3304      	adds	r3, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	4353      	muls	r3, r2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7ff fe0a 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;														   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 8006400:	4b0e      	ldr	r3, [pc, #56]	; (800643c <Logical_1_RC6+0x74>)
 8006402:	2200      	movs	r2, #0
 8006404:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit);
 8006406:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <Logical_1_RC6+0x78>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0e      	ldr	r2, [pc, #56]	; (8006444 <Logical_1_RC6+0x7c>)
 800640c:	212c      	movs	r1, #44	; 0x2c
 800640e:	434b      	muls	r3, r1
 8006410:	18d3      	adds	r3, r2, r3
 8006412:	3314      	adds	r3, #20
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	b29a      	uxth	r2, r3
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <Logical_1_RC6+0x78>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4909      	ldr	r1, [pc, #36]	; (8006444 <Logical_1_RC6+0x7c>)
 800641e:	202c      	movs	r0, #44	; 0x2c
 8006420:	4343      	muls	r3, r0
 8006422:	18cb      	adds	r3, r1, r3
 8006424:	3304      	adds	r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	4353      	muls	r3, r2
 800642c:	b29b      	uxth	r3, r3
 800642e:	0018      	movs	r0, r3
 8006430:	f7ff fdf0 	bl	8006014 <Delay_us>
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	40002000 	.word	0x40002000
 8006440:	20005018 	.word	0x20005018
 8006444:	2000675c 	.word	0x2000675c

08006448 <Logical_0_Sharp>:
void Logical_0_Sharp()
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
	TIM14->CCR1 = VAR; // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <Logical_0_Sharp+0x2c>)
 800644e:	227e      	movs	r2, #126	; 0x7e
 8006450:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(308);	   // Delay_us(312); //Delay_us(308);// Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
 8006452:	239a      	movs	r3, #154	; 0x9a
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	0018      	movs	r0, r3
 8006458:	f7ff fddc 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <Logical_0_Sharp+0x2c>)
 800645e:	2200      	movs	r2, #0
 8006460:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(740);	   // Delay_us(735);//Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit);
 8006462:	23b9      	movs	r3, #185	; 0xb9
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	0018      	movs	r0, r3
 8006468:	f7ff fdd4 	bl	8006014 <Delay_us>
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	40002000 	.word	0x40002000

08006478 <Logical_1_Sharp>:

void Logical_1_Sharp()
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
	TIM14->CCR1 = VAR; // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 800647c:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <Logical_1_Sharp+0x28>)
 800647e:	227e      	movs	r2, #126	; 0x7e
 8006480:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(308);	   // Delay_us(312);// Delay_us(308);// Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
 8006482:	239a      	movs	r3, #154	; 0x9a
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff fdc4 	bl	8006014 <Delay_us>
	TIM14->CCR1 = 0;   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <Logical_1_Sharp+0x28>)
 800648e:	2200      	movs	r2, #0
 8006490:	635a      	str	r2, [r3, #52]	; 0x34
	Delay_us(1780);	   // Delay_us(1777);//Delay_us(1787);//Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit);
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <Logical_1_Sharp+0x2c>)
 8006494:	0018      	movs	r0, r3
 8006496:	f7ff fdbd 	bl	8006014 <Delay_us>
}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40002000 	.word	0x40002000
 80064a4:	000006f4 	.word	0x000006f4

080064a8 <Trailer_bit_0_RC6>:
void Trailer_bit_0_RC6()
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
	if (toggle == 0)
 80064ac:	4b3e      	ldr	r3, [pc, #248]	; (80065a8 <Trailer_bit_0_RC6+0x100>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d13b      	bne.n	800652c <Trailer_bit_0_RC6+0x84>
	{
		toggle = 1;
 80064b4:	4b3c      	ldr	r3, [pc, #240]	; (80065a8 <Trailer_bit_0_RC6+0x100>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
		TIM14->CCR1 = VAR;															   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 80064ba:	4b3c      	ldr	r3, [pc, #240]	; (80065ac <Trailer_bit_0_RC6+0x104>)
 80064bc:	227e      	movs	r2, #126	; 0x7e
 80064be:	635a      	str	r2, [r3, #52]	; 0x34
		Delay_us(2 * tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);  // Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3b      	ldr	r2, [pc, #236]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 80064c6:	212c      	movs	r1, #44	; 0x2c
 80064c8:	434b      	muls	r3, r1
 80064ca:	18d3      	adds	r3, r2, r3
 80064cc:	3310      	adds	r3, #16
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4937      	ldr	r1, [pc, #220]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 80064d8:	202c      	movs	r0, #44	; 0x2c
 80064da:	4343      	muls	r3, r0
 80064dc:	18cb      	adds	r3, r1, r3
 80064de:	3304      	adds	r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4353      	muls	r3, r2
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	18db      	adds	r3, r3, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7ff fd91 	bl	8006014 <Delay_us>
		TIM14->CCR1 = 0;															   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <Trailer_bit_0_RC6+0x104>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	635a      	str	r2, [r3, #52]	; 0x34
		Delay_us(2 * tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit);
 80064f8:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2d      	ldr	r2, [pc, #180]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 80064fe:	212c      	movs	r1, #44	; 0x2c
 8006500:	434b      	muls	r3, r1
 8006502:	18d3      	adds	r3, r2, r3
 8006504:	3314      	adds	r3, #20
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	b29a      	uxth	r2, r3
 800650a:	4b29      	ldr	r3, [pc, #164]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4929      	ldr	r1, [pc, #164]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 8006510:	202c      	movs	r0, #44	; 0x2c
 8006512:	4343      	muls	r3, r0
 8006514:	18cb      	adds	r3, r1, r3
 8006516:	3304      	adds	r3, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	4353      	muls	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	18db      	adds	r3, r3, r3
 8006522:	b29b      	uxth	r3, r3
 8006524:	0018      	movs	r0, r3
 8006526:	f7ff fd75 	bl	8006014 <Delay_us>
		TIM14->CCR1 = 0;															   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
		Delay_us(2 * tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);  // Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
		TIM14->CCR1 = VAR;															   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
		Delay_us(2 * tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit)
	}
}
 800652a:	e03a      	b.n	80065a2 <Trailer_bit_0_RC6+0xfa>
		toggle = 0;
 800652c:	4b1e      	ldr	r3, [pc, #120]	; (80065a8 <Trailer_bit_0_RC6+0x100>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
		TIM14->CCR1 = 0;															   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_RESET);
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <Trailer_bit_0_RC6+0x104>)
 8006534:	2200      	movs	r2, #0
 8006536:	635a      	str	r2, [r3, #52]	; 0x34
		Delay_us(2 * tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);  // Delay_us(560); //Delay_us(tv_protocol[tv_type].one_t_on * tv_protocol[tv_type].time_Unit);
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 800653e:	212c      	movs	r1, #44	; 0x2c
 8006540:	434b      	muls	r3, r1
 8006542:	18d3      	adds	r3, r2, r3
 8006544:	3310      	adds	r3, #16
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	b29a      	uxth	r2, r3
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4919      	ldr	r1, [pc, #100]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 8006550:	202c      	movs	r0, #44	; 0x2c
 8006552:	4343      	muls	r3, r0
 8006554:	18cb      	adds	r3, r1, r3
 8006556:	3304      	adds	r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	4353      	muls	r3, r2
 800655e:	b29b      	uxth	r3, r3
 8006560:	18db      	adds	r3, r3, r3
 8006562:	b29b      	uxth	r3, r3
 8006564:	0018      	movs	r0, r3
 8006566:	f7ff fd55 	bl	8006014 <Delay_us>
		TIM14->CCR1 = VAR;															   // 30% duty cycle 2HAL_GPIO_WritePin(GPIOA, RI_Pin, GPIO_PIN_SET);
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <Trailer_bit_0_RC6+0x104>)
 800656c:	227e      	movs	r2, #126	; 0x7e
 800656e:	635a      	str	r2, [r3, #52]	; 0x34
		Delay_us(2 * tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit); // Delay_us(1680);//Delay_us(tv_protocol[tv_type].one_t_off * tv_protocol[tv_type].time_Unit)
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a0f      	ldr	r2, [pc, #60]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 8006576:	212c      	movs	r1, #44	; 0x2c
 8006578:	434b      	muls	r3, r1
 800657a:	18d3      	adds	r3, r2, r3
 800657c:	3314      	adds	r3, #20
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	b29a      	uxth	r2, r3
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <Trailer_bit_0_RC6+0x108>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	490b      	ldr	r1, [pc, #44]	; (80065b4 <Trailer_bit_0_RC6+0x10c>)
 8006588:	202c      	movs	r0, #44	; 0x2c
 800658a:	4343      	muls	r3, r0
 800658c:	18cb      	adds	r3, r1, r3
 800658e:	3304      	adds	r3, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	4353      	muls	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	18db      	adds	r3, r3, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	0018      	movs	r0, r3
 800659e:	f7ff fd39 	bl	8006014 <Delay_us>
}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20006754 	.word	0x20006754
 80065ac:	40002000 	.word	0x40002000
 80065b0:	20005018 	.word	0x20005018
 80065b4:	2000675c 	.word	0x2000675c

080065b8 <NEC_Send_Data>:
		}
		value <<= 1;
	}
}
void NEC_Send_Data(uint8_t value, uint8_t nbShift)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	0002      	movs	r2, r0
 80065c0:	1dfb      	adds	r3, r7, #7
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	1dbb      	adds	r3, r7, #6
 80065c6:	1c0a      	adds	r2, r1, #0
 80065c8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < nbShift; i++)
 80065ca:	230f      	movs	r3, #15
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e019      	b.n	8006608 <NEC_Send_Data+0x50>
	{
		if (value & (1 << (nbShift - 1)))
 80065d4:	1dfb      	adds	r3, r7, #7
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	1dbb      	adds	r3, r7, #6
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	3b01      	subs	r3, #1
 80065de:	411a      	asrs	r2, r3
 80065e0:	0013      	movs	r3, r2
 80065e2:	2201      	movs	r2, #1
 80065e4:	4013      	ands	r3, r2
 80065e6:	d002      	beq.n	80065ee <NEC_Send_Data+0x36>
		{
			Logical_1_NEC();
 80065e8:	f7ff fdee 	bl	80061c8 <Logical_1_NEC>
 80065ec:	e001      	b.n	80065f2 <NEC_Send_Data+0x3a>
		}
		else
		{
			Logical_0_NEC();
 80065ee:	f7ff fdab 	bl	8006148 <Logical_0_NEC>
		}
		value <<= 1;
 80065f2:	1dfa      	adds	r2, r7, #7
 80065f4:	1dfb      	adds	r3, r7, #7
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	18db      	adds	r3, r3, r3
 80065fa:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < nbShift; i++)
 80065fc:	210f      	movs	r1, #15
 80065fe:	187b      	adds	r3, r7, r1
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	187b      	adds	r3, r7, r1
 8006604:	3201      	adds	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	230f      	movs	r3, #15
 800660a:	18fa      	adds	r2, r7, r3
 800660c:	1dbb      	adds	r3, r7, #6
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d3de      	bcc.n	80065d4 <NEC_Send_Data+0x1c>
	}
}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	46bd      	mov	sp, r7
 800661c:	b004      	add	sp, #16
 800661e:	bd80      	pop	{r7, pc}

08006620 <SONY12_Send_Data>:
void SONY12_Send_Data(uint64_t value) // 12 bit
{
 8006620:	b5b0      	push	{r4, r5, r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6038      	str	r0, [r7, #0]
 8006628:	6079      	str	r1, [r7, #4]
	uint8_t i;

	for (i = 0; i < 12; i++)
 800662a:	230f      	movs	r3, #15
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e01c      	b.n	800666e <SONY12_Send_Data+0x4e>
	{
		if ((value & 0x0800) >> 11)
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	401a      	ands	r2, r3
 800663c:	0014      	movs	r4, r2
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	4013      	ands	r3, r2
 8006644:	001d      	movs	r5, r3
 8006646:	0023      	movs	r3, r4
 8006648:	432b      	orrs	r3, r5
 800664a:	d002      	beq.n	8006652 <SONY12_Send_Data+0x32>
		{
			Logical_1_NEC();
 800664c:	f7ff fdbc 	bl	80061c8 <Logical_1_NEC>
 8006650:	e001      	b.n	8006656 <SONY12_Send_Data+0x36>
		}
		else
		{
			Logical_0_NEC();
 8006652:	f7ff fd79 	bl	8006148 <Logical_0_NEC>
		}

		value <<= 1;
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	1892      	adds	r2, r2, r2
 800665c:	415b      	adcs	r3, r3
 800665e:	603a      	str	r2, [r7, #0]
 8006660:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 12; i++)
 8006662:	210f      	movs	r1, #15
 8006664:	187b      	adds	r3, r7, r1
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	187b      	adds	r3, r7, r1
 800666a:	3201      	adds	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	230f      	movs	r3, #15
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b0b      	cmp	r3, #11
 8006676:	d9dd      	bls.n	8006634 <SONY12_Send_Data+0x14>
	}
}
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	46bd      	mov	sp, r7
 800667e:	b004      	add	sp, #16
 8006680:	bdb0      	pop	{r4, r5, r7, pc}

08006682 <Sharp_Send_Data>:
void Sharp_Send_Data(uint64_t value, int reverse) // 15 bit
{
 8006682:	b5b0      	push	{r4, r5, r7, lr}
 8006684:	b08a      	sub	sp, #40	; 0x28
 8006686:	af00      	add	r7, sp, #0
 8006688:	61b8      	str	r0, [r7, #24]
 800668a:	61f9      	str	r1, [r7, #28]
 800668c:	617a      	str	r2, [r7, #20]
	uint8_t i;

	if (reverse == 1)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d15e      	bne.n	8006752 <Sharp_Send_Data+0xd0>
	{
		for (i = 0; i < 5; i++)
 8006694:	2317      	movs	r3, #23
 8006696:	2210      	movs	r2, #16
 8006698:	189b      	adds	r3, r3, r2
 800669a:	19db      	adds	r3, r3, r7
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e021      	b.n	80066e6 <Sharp_Send_Data+0x64>
		{
			if ((value & 0x4000) >> 14)
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	2380      	movs	r3, #128	; 0x80
 80066a6:	01db      	lsls	r3, r3, #7
 80066a8:	401a      	ands	r2, r3
 80066aa:	60ba      	str	r2, [r7, #8]
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2200      	movs	r2, #0
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	000b      	movs	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d002      	beq.n	80066c4 <Sharp_Send_Data+0x42>
			{
				Logical_1_Sharp();
 80066be:	f7ff fedb 	bl	8006478 <Logical_1_Sharp>
 80066c2:	e001      	b.n	80066c8 <Sharp_Send_Data+0x46>
			}
			else
			{
				Logical_0_Sharp();
 80066c4:	f7ff fec0 	bl	8006448 <Logical_0_Sharp>
			}

			value <<= 1;
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	1892      	adds	r2, r2, r2
 80066ce:	415b      	adcs	r3, r3
 80066d0:	61ba      	str	r2, [r7, #24]
 80066d2:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < 5; i++)
 80066d4:	2117      	movs	r1, #23
 80066d6:	2010      	movs	r0, #16
 80066d8:	180b      	adds	r3, r1, r0
 80066da:	19db      	adds	r3, r3, r7
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	180b      	adds	r3, r1, r0
 80066e0:	19db      	adds	r3, r3, r7
 80066e2:	3201      	adds	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	2217      	movs	r2, #23
 80066e8:	2110      	movs	r1, #16
 80066ea:	1853      	adds	r3, r2, r1
 80066ec:	19db      	adds	r3, r3, r7
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d9d6      	bls.n	80066a2 <Sharp_Send_Data+0x20>
		}
		for (i = 5; i < 16; i++)
 80066f4:	1853      	adds	r3, r2, r1
 80066f6:	19db      	adds	r3, r3, r7
 80066f8:	2205      	movs	r2, #5
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	e021      	b.n	8006742 <Sharp_Send_Data+0xc0>
		{
			if ((value & 0x4000) >> 14)
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	01db      	lsls	r3, r3, #7
 8006704:	401a      	ands	r2, r3
 8006706:	603a      	str	r2, [r7, #0]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	2200      	movs	r2, #0
 800670c:	4013      	ands	r3, r2
 800670e:	607b      	str	r3, [r7, #4]
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	000b      	movs	r3, r1
 8006716:	4313      	orrs	r3, r2
 8006718:	d002      	beq.n	8006720 <Sharp_Send_Data+0x9e>
			{
				Logical_0_Sharp();
 800671a:	f7ff fe95 	bl	8006448 <Logical_0_Sharp>
 800671e:	e001      	b.n	8006724 <Sharp_Send_Data+0xa2>
			}
			else
			{
				Logical_1_Sharp();
 8006720:	f7ff feaa 	bl	8006478 <Logical_1_Sharp>
			}

			value <<= 1;
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	1892      	adds	r2, r2, r2
 800672a:	415b      	adcs	r3, r3
 800672c:	61ba      	str	r2, [r7, #24]
 800672e:	61fb      	str	r3, [r7, #28]
		for (i = 5; i < 16; i++)
 8006730:	2117      	movs	r1, #23
 8006732:	2010      	movs	r0, #16
 8006734:	180b      	adds	r3, r1, r0
 8006736:	19db      	adds	r3, r3, r7
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	180b      	adds	r3, r1, r0
 800673c:	19db      	adds	r3, r3, r7
 800673e:	3201      	adds	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	2317      	movs	r3, #23
 8006744:	2210      	movs	r2, #16
 8006746:	189b      	adds	r3, r3, r2
 8006748:	19db      	adds	r3, r3, r7
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b0f      	cmp	r3, #15
 800674e:	d9d6      	bls.n	80066fe <Sharp_Send_Data+0x7c>

			value <<= 1;
		}
	}
	// Logical_0_Sharp();
}
 8006750:	e02d      	b.n	80067ae <Sharp_Send_Data+0x12c>
		for (i = 0; i < 16; i++)
 8006752:	2317      	movs	r3, #23
 8006754:	2210      	movs	r2, #16
 8006756:	189b      	adds	r3, r3, r2
 8006758:	19db      	adds	r3, r3, r7
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e01f      	b.n	80067a0 <Sharp_Send_Data+0x11e>
			if ((value & 0x4000) >> 14)
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	01db      	lsls	r3, r3, #7
 8006766:	401a      	ands	r2, r3
 8006768:	0014      	movs	r4, r2
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2200      	movs	r2, #0
 800676e:	4013      	ands	r3, r2
 8006770:	001d      	movs	r5, r3
 8006772:	0023      	movs	r3, r4
 8006774:	432b      	orrs	r3, r5
 8006776:	d002      	beq.n	800677e <Sharp_Send_Data+0xfc>
				Logical_1_Sharp();
 8006778:	f7ff fe7e 	bl	8006478 <Logical_1_Sharp>
 800677c:	e001      	b.n	8006782 <Sharp_Send_Data+0x100>
				Logical_0_Sharp();
 800677e:	f7ff fe63 	bl	8006448 <Logical_0_Sharp>
			value <<= 1;
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1892      	adds	r2, r2, r2
 8006788:	415b      	adcs	r3, r3
 800678a:	61ba      	str	r2, [r7, #24]
 800678c:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < 16; i++)
 800678e:	2117      	movs	r1, #23
 8006790:	2010      	movs	r0, #16
 8006792:	180b      	adds	r3, r1, r0
 8006794:	19db      	adds	r3, r3, r7
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	180b      	adds	r3, r1, r0
 800679a:	19db      	adds	r3, r3, r7
 800679c:	3201      	adds	r2, #1
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	2317      	movs	r3, #23
 80067a2:	2210      	movs	r2, #16
 80067a4:	189b      	adds	r3, r3, r2
 80067a6:	19db      	adds	r3, r3, r7
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	d9d8      	bls.n	8006760 <Sharp_Send_Data+0xde>
}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b00a      	add	sp, #40	; 0x28
 80067b4:	bdb0      	pop	{r4, r5, r7, pc}

080067b6 <RC5_Send_Data>:
void RC5_Send_Data(uint64_t value) // 14 bit
{
 80067b6:	b5b0      	push	{r4, r5, r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6038      	str	r0, [r7, #0]
 80067be:	6079      	str	r1, [r7, #4]
	uint8_t i;

	for (i = 0; i < 14; i++)
 80067c0:	230f      	movs	r3, #15
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e01c      	b.n	8006804 <RC5_Send_Data+0x4e>
	{
		if ((value & 0x2000) >> 13)
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	019b      	lsls	r3, r3, #6
 80067d0:	401a      	ands	r2, r3
 80067d2:	0014      	movs	r4, r2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	4013      	ands	r3, r2
 80067da:	001d      	movs	r5, r3
 80067dc:	0023      	movs	r3, r4
 80067de:	432b      	orrs	r3, r5
 80067e0:	d002      	beq.n	80067e8 <RC5_Send_Data+0x32>
		{
			Logical_1_RC5();
 80067e2:	f7ff fd71 	bl	80062c8 <Logical_1_RC5>
 80067e6:	e001      	b.n	80067ec <RC5_Send_Data+0x36>
		}
		else
		{
			Logical_0_RC5();
 80067e8:	f7ff fd2e 	bl	8006248 <Logical_0_RC5>
		}

		value <<= 1;
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	1892      	adds	r2, r2, r2
 80067f2:	415b      	adcs	r3, r3
 80067f4:	603a      	str	r2, [r7, #0]
 80067f6:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 14; i++)
 80067f8:	210f      	movs	r1, #15
 80067fa:	187b      	adds	r3, r7, r1
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	187b      	adds	r3, r7, r1
 8006800:	3201      	adds	r2, #1
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	230f      	movs	r3, #15
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b0d      	cmp	r3, #13
 800680c:	d9dd      	bls.n	80067ca <RC5_Send_Data+0x14>
	}
}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	46c0      	nop			; (mov r8, r8)
 8006812:	46bd      	mov	sp, r7
 8006814:	b004      	add	sp, #16
 8006816:	bdb0      	pop	{r4, r5, r7, pc}

08006818 <RC6_Send_Data>:
void RC6_Send_Data(uint64_t value) // 14 bit
{
 8006818:	b5b0      	push	{r4, r5, r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6038      	str	r0, [r7, #0]
 8006820:	6079      	str	r1, [r7, #4]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8006822:	230f      	movs	r3, #15
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e01c      	b.n	8006866 <RC6_Send_Data+0x4e>
	{
		if ((value & 0x8000) >> 15)
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	2380      	movs	r3, #128	; 0x80
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	401a      	ands	r2, r3
 8006834:	0014      	movs	r4, r2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	4013      	ands	r3, r2
 800683c:	001d      	movs	r5, r3
 800683e:	0023      	movs	r3, r4
 8006840:	432b      	orrs	r3, r5
 8006842:	d002      	beq.n	800684a <RC6_Send_Data+0x32>
		{
			Logical_1_RC6();
 8006844:	f7ff fdc0 	bl	80063c8 <Logical_1_RC6>
 8006848:	e001      	b.n	800684e <RC6_Send_Data+0x36>
		}
		else
		{
			Logical_0_RC6();
 800684a:	f7ff fd7d 	bl	8006348 <Logical_0_RC6>
		}

		value <<= 1;
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	1892      	adds	r2, r2, r2
 8006854:	415b      	adcs	r3, r3
 8006856:	603a      	str	r2, [r7, #0]
 8006858:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 16; i++)
 800685a:	210f      	movs	r1, #15
 800685c:	187b      	adds	r3, r7, r1
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	187b      	adds	r3, r7, r1
 8006862:	3201      	adds	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	230f      	movs	r3, #15
 8006868:	18fb      	adds	r3, r7, r3
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b0f      	cmp	r3, #15
 800686e:	d9dd      	bls.n	800682c <RC6_Send_Data+0x14>
	}
}
 8006870:	46c0      	nop			; (mov r8, r8)
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	46bd      	mov	sp, r7
 8006876:	b004      	add	sp, #16
 8006878:	bdb0      	pop	{r4, r5, r7, pc}

0800687a <Panasonic_Send_Data>:

void Panasonic_Send_Data(uint64_t value) // 48 bit
{
 800687a:	b5b0      	push	{r4, r5, r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6038      	str	r0, [r7, #0]
 8006882:	6079      	str	r1, [r7, #4]
	uint8_t i;

	for (i = 0; i < 48; i++)
 8006884:	230f      	movs	r3, #15
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e01c      	b.n	80068c8 <Panasonic_Send_Data+0x4e>
	{
		if ((value & 0x800000000000) >> 47)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2200      	movs	r2, #0
 8006892:	4013      	ands	r3, r2
 8006894:	001c      	movs	r4, r3
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	401a      	ands	r2, r3
 800689e:	0015      	movs	r5, r2
 80068a0:	0023      	movs	r3, r4
 80068a2:	432b      	orrs	r3, r5
 80068a4:	d002      	beq.n	80068ac <Panasonic_Send_Data+0x32>
		{
			Logical_1_NEC();
 80068a6:	f7ff fc8f 	bl	80061c8 <Logical_1_NEC>
 80068aa:	e001      	b.n	80068b0 <Panasonic_Send_Data+0x36>
		}
		else
		{
			Logical_0_NEC();
 80068ac:	f7ff fc4c 	bl	8006148 <Logical_0_NEC>
		}

		value <<= 1;
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	1892      	adds	r2, r2, r2
 80068b6:	415b      	adcs	r3, r3
 80068b8:	603a      	str	r2, [r7, #0]
 80068ba:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 48; i++)
 80068bc:	210f      	movs	r1, #15
 80068be:	187b      	adds	r3, r7, r1
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	187b      	adds	r3, r7, r1
 80068c4:	3201      	adds	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	230f      	movs	r3, #15
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b2f      	cmp	r3, #47	; 0x2f
 80068d0:	d9dd      	bls.n	800688e <Panasonic_Send_Data+0x14>
	}
}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	46c0      	nop			; (mov r8, r8)
 80068d6:	46bd      	mov	sp, r7
 80068d8:	b004      	add	sp, #16
 80068da:	bdb0      	pop	{r4, r5, r7, pc}

080068dc <BurstSony12TV>:
void BurstSony12TV(uint64_t twelve_bits_code)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6038      	str	r0, [r7, #0]
 80068e4:	6079      	str	r1, [r7, #4]
	NEC_Start();
 80068e6:	f7ff fbaf 	bl	8006048 <NEC_Start>
	SONY12_Send_Data(twelve_bits_code);
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	0010      	movs	r0, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	f7ff fe95 	bl	8006620 <SONY12_Send_Data>
	HAL_Delay(45);
 80068f6:	202d      	movs	r0, #45	; 0x2d
 80068f8:	f008 fd56 	bl	800f3a8 <HAL_Delay>
	NEC_Start();
 80068fc:	f7ff fba4 	bl	8006048 <NEC_Start>
	SONY12_Send_Data(twelve_bits_code);
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	0010      	movs	r0, r2
 8006906:	0019      	movs	r1, r3
 8006908:	f7ff fe8a 	bl	8006620 <SONY12_Send_Data>
	HAL_Delay(45);
 800690c:	202d      	movs	r0, #45	; 0x2d
 800690e:	f008 fd4b 	bl	800f3a8 <HAL_Delay>
	NEC_Start();
 8006912:	f7ff fb99 	bl	8006048 <NEC_Start>
	SONY12_Send_Data(twelve_bits_code);
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	0010      	movs	r0, r2
 800691c:	0019      	movs	r1, r3
 800691e:	f7ff fe7f 	bl	8006620 <SONY12_Send_Data>
}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	46bd      	mov	sp, r7
 8006926:	b002      	add	sp, #8
 8006928:	bd80      	pop	{r7, pc}

0800692a <BurstRC5TV>:
void BurstRC5TV(uint64_t fourteen_bits_code)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6038      	str	r0, [r7, #0]
 8006932:	6079      	str	r1, [r7, #4]
	// NEC_Start();
	RC5_Send_Data(fourteen_bits_code);
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0010      	movs	r0, r2
 800693a:	0019      	movs	r1, r3
 800693c:	f7ff ff3b 	bl	80067b6 <RC5_Send_Data>
	HAL_Delay(45);
 8006940:	202d      	movs	r0, #45	; 0x2d
 8006942:	f008 fd31 	bl	800f3a8 <HAL_Delay>
	// NEC_Start();
	RC5_Send_Data(fourteen_bits_code);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	0010      	movs	r0, r2
 800694c:	0019      	movs	r1, r3
 800694e:	f7ff ff32 	bl	80067b6 <RC5_Send_Data>
	HAL_Delay(45);
 8006952:	202d      	movs	r0, #45	; 0x2d
 8006954:	f008 fd28 	bl	800f3a8 <HAL_Delay>
	// NEC_Start();
	RC5_Send_Data(fourteen_bits_code);
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0010      	movs	r0, r2
 800695e:	0019      	movs	r1, r3
 8006960:	f7ff ff29 	bl	80067b6 <RC5_Send_Data>
}
 8006964:	46c0      	nop			; (mov r8, r8)
 8006966:	46bd      	mov	sp, r7
 8006968:	b002      	add	sp, #8
 800696a:	bd80      	pop	{r7, pc}

0800696c <RC6TV>:
void RC6TV(uint64_t sixteen_bits_code)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6038      	str	r0, [r7, #0]
 8006974:	6079      	str	r1, [r7, #4]
	NEC_Start();					  // Leading Pulse
 8006976:	f7ff fb67 	bl	8006048 <NEC_Start>
	Logical_1_RC6();				  // Start Bit
 800697a:	f7ff fd25 	bl	80063c8 <Logical_1_RC6>
	Logical_0_RC6();				  // mode bit b2
 800697e:	f7ff fce3 	bl	8006348 <Logical_0_RC6>
	Logical_0_RC6();				  // mode bit b1
 8006982:	f7ff fce1 	bl	8006348 <Logical_0_RC6>
	Logical_0_RC6();				  // mode bit b0
 8006986:	f7ff fcdf 	bl	8006348 <Logical_0_RC6>
	Trailer_bit_0_RC6();			  // Trailer bit
 800698a:	f7ff fd8d 	bl	80064a8 <Trailer_bit_0_RC6>
	RC6_Send_Data(sixteen_bits_code); // 16 bit adress + command
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0010      	movs	r0, r2
 8006994:	0019      	movs	r1, r3
 8006996:	f7ff ff3f 	bl	8006818 <RC6_Send_Data>
	TIM14->CCR1 = 0;
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <RC6TV+0x44>)
 800699c:	2200      	movs	r2, #0
 800699e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2.7); // signal free time of 2.6 ms
 80069a0:	2002      	movs	r0, #2
 80069a2:	f008 fd01 	bl	800f3a8 <HAL_Delay>
}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b002      	add	sp, #8
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	40002000 	.word	0x40002000

080069b4 <BurstRC6TV>:
void BurstRC6TV(uint64_t sixteen_bits_code)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6038      	str	r0, [r7, #0]
 80069bc:	6079      	str	r1, [r7, #4]
	// NEC_Start();
	RC6TV(sixteen_bits_code);
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	0010      	movs	r0, r2
 80069c4:	0019      	movs	r1, r3
 80069c6:	f7ff ffd1 	bl	800696c <RC6TV>
	HAL_Delay(45);
 80069ca:	202d      	movs	r0, #45	; 0x2d
 80069cc:	f008 fcec 	bl	800f3a8 <HAL_Delay>
	// NEC_Start();
	RC6TV(sixteen_bits_code);
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	0010      	movs	r0, r2
 80069d6:	0019      	movs	r1, r3
 80069d8:	f7ff ffc8 	bl	800696c <RC6TV>
	HAL_Delay(45);
 80069dc:	202d      	movs	r0, #45	; 0x2d
 80069de:	f008 fce3 	bl	800f3a8 <HAL_Delay>
	// NEC_Start();
	RC6TV(sixteen_bits_code);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	0010      	movs	r0, r2
 80069e8:	0019      	movs	r1, r3
 80069ea:	f7ff ffbf 	bl	800696c <RC6TV>
}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b002      	add	sp, #8
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <IRSend_NEC>:
	IRSend_NEC(trueorfalse);
	IRSend_NEC(trueorfalse);
	IRSend_NEC(trueorfalse);
}
void IRSend_NEC(bool on_off)
{
 80069f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069fa:	b08f      	sub	sp, #60	; 0x3c
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	0003      	movs	r3, r0
 8006a00:	222f      	movs	r2, #47	; 0x2f
 8006a02:	18ba      	adds	r2, r7, r2
 8006a04:	7013      	strb	r3, [r2, #0]
	uint8_t byte_to_send[4];

	// tv_type = 6;
	switch (tv_type)
 8006a06:	4bd2      	ldr	r3, [pc, #840]	; (8006d50 <IRSend_NEC+0x358>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d900      	bls.n	8006a10 <IRSend_NEC+0x18>
 8006a0e:	e196      	b.n	8006d3e <IRSend_NEC+0x346>
 8006a10:	009a      	lsls	r2, r3, #2
 8006a12:	4bd0      	ldr	r3, [pc, #832]	; (8006d54 <IRSend_NEC+0x35c>)
 8006a14:	18d3      	adds	r3, r2, r3
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	469f      	mov	pc, r3
	{
	case 0: // LG
	case 1: // Samsung
		__HAL_TIM_SET_AUTORELOAD(&htim14, 420);
 8006a1a:	4bcf      	ldr	r3, [pc, #828]	; (8006d58 <IRSend_NEC+0x360>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	23d2      	movs	r3, #210	; 0xd2
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a24:	4acc      	ldr	r2, [pc, #816]	; (8006d58 <IRSend_NEC+0x360>)
 8006a26:	23d2      	movs	r3, #210	; 0xd2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	60d3      	str	r3, [r2, #12]

		NEC_Start();
 8006a2c:	f7ff fb0c 	bl	8006048 <NEC_Start>

		if (on_off)
 8006a30:	232f      	movs	r3, #47	; 0x2f
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d038      	beq.n	8006aac <IRSend_NEC+0xb4>
		{
			byte_to_send[0] = (uint8_t)((code_ON[0] >> 24) & 0xFF);
 8006a3a:	4bc8      	ldr	r3, [pc, #800]	; (8006d5c <IRSend_NEC+0x364>)
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	0219      	lsls	r1, r3, #8
 8006a42:	0e10      	lsrs	r0, r2, #24
 8006a44:	6238      	str	r0, [r7, #32]
 8006a46:	6a38      	ldr	r0, [r7, #32]
 8006a48:	4308      	orrs	r0, r1
 8006a4a:	6238      	str	r0, [r7, #32]
 8006a4c:	0e1b      	lsrs	r3, r3, #24
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	2320      	movs	r3, #32
 8006a52:	18fb      	adds	r3, r7, r3
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	2008      	movs	r0, #8
 8006a58:	2528      	movs	r5, #40	; 0x28
 8006a5a:	1943      	adds	r3, r0, r5
 8006a5c:	19db      	adds	r3, r3, r7
 8006a5e:	701a      	strb	r2, [r3, #0]
			byte_to_send[1] = (uint8_t)((code_ON[0] >> 16) & 0xFF);
 8006a60:	4bbe      	ldr	r3, [pc, #760]	; (8006d5c <IRSend_NEC+0x364>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	0419      	lsls	r1, r3, #16
 8006a68:	0c14      	lsrs	r4, r2, #16
 8006a6a:	61bc      	str	r4, [r7, #24]
 8006a6c:	69bc      	ldr	r4, [r7, #24]
 8006a6e:	430c      	orrs	r4, r1
 8006a70:	61bc      	str	r4, [r7, #24]
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	7e3a      	ldrb	r2, [r7, #24]
 8006a78:	1943      	adds	r3, r0, r5
 8006a7a:	19db      	adds	r3, r3, r7
 8006a7c:	705a      	strb	r2, [r3, #1]
			byte_to_send[2] = (uint8_t)((code_ON[0] >> 8) & 0xFF);
 8006a7e:	4bb7      	ldr	r3, [pc, #732]	; (8006d5c <IRSend_NEC+0x364>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	0619      	lsls	r1, r3, #24
 8006a86:	0a14      	lsrs	r4, r2, #8
 8006a88:	613c      	str	r4, [r7, #16]
 8006a8a:	693c      	ldr	r4, [r7, #16]
 8006a8c:	430c      	orrs	r4, r1
 8006a8e:	613c      	str	r4, [r7, #16]
 8006a90:	0a1b      	lsrs	r3, r3, #8
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	7c3a      	ldrb	r2, [r7, #16]
 8006a96:	1943      	adds	r3, r0, r5
 8006a98:	19db      	adds	r3, r3, r7
 8006a9a:	709a      	strb	r2, [r3, #2]
			byte_to_send[3] = (uint8_t)((code_ON[0]) & 0xFF);
 8006a9c:	4baf      	ldr	r3, [pc, #700]	; (8006d5c <IRSend_NEC+0x364>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	1943      	adds	r3, r0, r5
 8006aa6:	19db      	adds	r3, r3, r7
 8006aa8:	70da      	strb	r2, [r3, #3]
 8006aaa:	e033      	b.n	8006b14 <IRSend_NEC+0x11c>
		}
		else
		{
			byte_to_send[0] = (uint8_t)((code_OFF[0] >> 24) & 0xFF);
 8006aac:	4bac      	ldr	r3, [pc, #688]	; (8006d60 <IRSend_NEC+0x368>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	0219      	lsls	r1, r3, #8
 8006ab4:	0e10      	lsrs	r0, r2, #24
 8006ab6:	60b8      	str	r0, [r7, #8]
 8006ab8:	68b8      	ldr	r0, [r7, #8]
 8006aba:	4308      	orrs	r0, r1
 8006abc:	60b8      	str	r0, [r7, #8]
 8006abe:	0e1b      	lsrs	r3, r3, #24
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	7a3a      	ldrb	r2, [r7, #8]
 8006ac4:	2008      	movs	r0, #8
 8006ac6:	2628      	movs	r6, #40	; 0x28
 8006ac8:	1983      	adds	r3, r0, r6
 8006aca:	19db      	adds	r3, r3, r7
 8006acc:	701a      	strb	r2, [r3, #0]
			byte_to_send[1] = (uint8_t)((code_OFF[0] >> 16) & 0xFF);
 8006ace:	4ba4      	ldr	r3, [pc, #656]	; (8006d60 <IRSend_NEC+0x368>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	0419      	lsls	r1, r3, #16
 8006ad6:	0c16      	lsrs	r6, r2, #16
 8006ad8:	603e      	str	r6, [r7, #0]
 8006ada:	683e      	ldr	r6, [r7, #0]
 8006adc:	430e      	orrs	r6, r1
 8006ade:	603e      	str	r6, [r7, #0]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	783a      	ldrb	r2, [r7, #0]
 8006ae6:	2628      	movs	r6, #40	; 0x28
 8006ae8:	1983      	adds	r3, r0, r6
 8006aea:	19db      	adds	r3, r3, r7
 8006aec:	705a      	strb	r2, [r3, #1]
			byte_to_send[2] = (uint8_t)((code_OFF[0] >> 8) & 0xFF);
 8006aee:	4b9c      	ldr	r3, [pc, #624]	; (8006d60 <IRSend_NEC+0x368>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	0619      	lsls	r1, r3, #24
 8006af6:	0a14      	lsrs	r4, r2, #8
 8006af8:	430c      	orrs	r4, r1
 8006afa:	0a1d      	lsrs	r5, r3, #8
 8006afc:	b2e2      	uxtb	r2, r4
 8006afe:	0031      	movs	r1, r6
 8006b00:	1843      	adds	r3, r0, r1
 8006b02:	19db      	adds	r3, r3, r7
 8006b04:	709a      	strb	r2, [r3, #2]
			byte_to_send[3] = (uint8_t)((code_OFF[0]) & 0xFF);
 8006b06:	4b96      	ldr	r3, [pc, #600]	; (8006d60 <IRSend_NEC+0x368>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	1843      	adds	r3, r0, r1
 8006b10:	19db      	adds	r3, r3, r7
 8006b12:	70da      	strb	r2, [r3, #3]
		}

		for (int i = 0; i < tv_protocol[tv_type].data_Length / 8; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	e019      	b.n	8006b4e <IRSend_NEC+0x156>
			NEC_Send_Data(byte_to_send[i], (tv_protocol[tv_type].data_Length / 4)); // NEC_Send_Byte(byte_to_send[i]);
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	2228      	movs	r2, #40	; 0x28
 8006b1e:	189b      	adds	r3, r3, r2
 8006b20:	19da      	adds	r2, r3, r7
 8006b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b24:	18d3      	adds	r3, r2, r3
 8006b26:	7818      	ldrb	r0, [r3, #0]
 8006b28:	4b89      	ldr	r3, [pc, #548]	; (8006d50 <IRSend_NEC+0x358>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a8d      	ldr	r2, [pc, #564]	; (8006d64 <IRSend_NEC+0x36c>)
 8006b2e:	212c      	movs	r1, #44	; 0x2c
 8006b30:	434b      	muls	r3, r1
 8006b32:	18d3      	adds	r3, r2, r3
 8006b34:	3328      	adds	r3, #40	; 0x28
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	da00      	bge.n	8006b3e <IRSend_NEC+0x146>
 8006b3c:	3303      	adds	r3, #3
 8006b3e:	109b      	asrs	r3, r3, #2
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	0019      	movs	r1, r3
 8006b44:	f7ff fd38 	bl	80065b8 <NEC_Send_Data>
		for (int i = 0; i < tv_protocol[tv_type].data_Length / 8; i++)
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4e:	4b80      	ldr	r3, [pc, #512]	; (8006d50 <IRSend_NEC+0x358>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a84      	ldr	r2, [pc, #528]	; (8006d64 <IRSend_NEC+0x36c>)
 8006b54:	212c      	movs	r1, #44	; 0x2c
 8006b56:	434b      	muls	r3, r1
 8006b58:	18d3      	adds	r3, r2, r3
 8006b5a:	3328      	adds	r3, #40	; 0x28
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da00      	bge.n	8006b64 <IRSend_NEC+0x16c>
 8006b62:	3307      	adds	r3, #7
 8006b64:	10db      	asrs	r3, r3, #3
 8006b66:	001a      	movs	r2, r3
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	dbd5      	blt.n	8006b1a <IRSend_NEC+0x122>

		NEC_Stop();
 8006b6e:	f7ff faab 	bl	80060c8 <NEC_Stop>
		break;
 8006b72:	e0e8      	b.n	8006d46 <IRSend_NEC+0x34e>
		//  see: https://www.mikrocontroller.net/articles/IRMP_-_english#KASEIKYO
		//  32 bit raw data LSB is VendorID parity.
		//
		//  We reduce it to: IRP: {37k,432}<1,-1|1,-3>(8,-4,V:16,X:4,D:4,S:8,F:8,(X^D^S^F):8,1,-173)+ {X=M:4:0^M:4:4^N:4:0^N:4:4}
		//  start bit + 16 VendorID + 4 VendorID parity + 12 Address + 8 Command + 8 Parity of VendorID parity, Address and Command + stop bit
		__HAL_TIM_SET_AUTORELOAD(&htim14, 435);
 8006b74:	4b78      	ldr	r3, [pc, #480]	; (8006d58 <IRSend_NEC+0x360>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	22b4      	movs	r2, #180	; 0xb4
 8006b7a:	32ff      	adds	r2, #255	; 0xff
 8006b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b7e:	4b76      	ldr	r3, [pc, #472]	; (8006d58 <IRSend_NEC+0x360>)
 8006b80:	22b4      	movs	r2, #180	; 0xb4
 8006b82:	32ff      	adds	r2, #255	; 0xff
 8006b84:	60da      	str	r2, [r3, #12]
		NEC_Start();
 8006b86:	f7ff fa5f 	bl	8006048 <NEC_Start>

		if (on_off)
 8006b8a:	232f      	movs	r3, #47	; 0x2f
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d007      	beq.n	8006ba4 <IRSend_NEC+0x1ac>
			Panasonic_Send_Data(code_ON[0]); // Panasonic_Send_Data(0x40040100BCBD);
 8006b94:	4b71      	ldr	r3, [pc, #452]	; (8006d5c <IRSend_NEC+0x364>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0010      	movs	r0, r2
 8006b9c:	0019      	movs	r1, r3
 8006b9e:	f7ff fe6c 	bl	800687a <Panasonic_Send_Data>
 8006ba2:	e006      	b.n	8006bb2 <IRSend_NEC+0x1ba>
		else
			Panasonic_Send_Data(code_OFF[0]);
 8006ba4:	4b6e      	ldr	r3, [pc, #440]	; (8006d60 <IRSend_NEC+0x368>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	0010      	movs	r0, r2
 8006bac:	0019      	movs	r1, r3
 8006bae:	f7ff fe64 	bl	800687a <Panasonic_Send_Data>
		NEC_Stop();
 8006bb2:	f7ff fa89 	bl	80060c8 <NEC_Stop>
		HAL_Delay(100);
 8006bb6:	2064      	movs	r0, #100	; 0x64
 8006bb8:	f008 fbf6 	bl	800f3a8 <HAL_Delay>
		NEC_Start();
 8006bbc:	f7ff fa44 	bl	8006048 <NEC_Start>

		break;
 8006bc0:	e0c1      	b.n	8006d46 <IRSend_NEC+0x34e>
	case 3: // SONY12
		__HAL_TIM_SET_AUTORELOAD(&htim14, 399);
 8006bc2:	4b65      	ldr	r3, [pc, #404]	; (8006d58 <IRSend_NEC+0x360>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2290      	movs	r2, #144	; 0x90
 8006bc8:	32ff      	adds	r2, #255	; 0xff
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bcc:	4b62      	ldr	r3, [pc, #392]	; (8006d58 <IRSend_NEC+0x360>)
 8006bce:	2290      	movs	r2, #144	; 0x90
 8006bd0:	32ff      	adds	r2, #255	; 0xff
 8006bd2:	60da      	str	r2, [r3, #12]
		// BurstSony12TV(0xA90);
		if (on_off)
 8006bd4:	232f      	movs	r3, #47	; 0x2f
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <IRSend_NEC+0x1f6>
			BurstSony12TV(code_ON[0]);
 8006bde:	4b5f      	ldr	r3, [pc, #380]	; (8006d5c <IRSend_NEC+0x364>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	0010      	movs	r0, r2
 8006be6:	0019      	movs	r1, r3
 8006be8:	f7ff fe78 	bl	80068dc <BurstSony12TV>
		else
			BurstSony12TV(code_OFF[0]);
		break;
 8006bec:	e0ab      	b.n	8006d46 <IRSend_NEC+0x34e>
			BurstSony12TV(code_OFF[0]);
 8006bee:	4b5c      	ldr	r3, [pc, #368]	; (8006d60 <IRSend_NEC+0x368>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	0010      	movs	r0, r2
 8006bf6:	0019      	movs	r1, r3
 8006bf8:	f7ff fe70 	bl	80068dc <BurstSony12TV>
		break;
 8006bfc:	e0a3      	b.n	8006d46 <IRSend_NEC+0x34e>

	case 4: // RC5
		__HAL_TIM_SET_AUTORELOAD(&htim14, 444);
 8006bfe:	4b56      	ldr	r3, [pc, #344]	; (8006d58 <IRSend_NEC+0x360>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	22de      	movs	r2, #222	; 0xde
 8006c04:	0052      	lsls	r2, r2, #1
 8006c06:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c08:	4b53      	ldr	r3, [pc, #332]	; (8006d58 <IRSend_NEC+0x360>)
 8006c0a:	22de      	movs	r2, #222	; 0xde
 8006c0c:	0052      	lsls	r2, r2, #1
 8006c0e:	60da      	str	r2, [r3, #12]
		// BurstRC5TV(0x300C);
		if (on_off)
 8006c10:	232f      	movs	r3, #47	; 0x2f
 8006c12:	18fb      	adds	r3, r7, r3
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <IRSend_NEC+0x232>
			BurstRC5TV(code_ON[0]);
 8006c1a:	4b50      	ldr	r3, [pc, #320]	; (8006d5c <IRSend_NEC+0x364>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	0010      	movs	r0, r2
 8006c22:	0019      	movs	r1, r3
 8006c24:	f7ff fe81 	bl	800692a <BurstRC5TV>
		else
			BurstRC5TV(code_OFF[0]);
		break;
 8006c28:	e08d      	b.n	8006d46 <IRSend_NEC+0x34e>
			BurstRC5TV(code_OFF[0]);
 8006c2a:	4b4d      	ldr	r3, [pc, #308]	; (8006d60 <IRSend_NEC+0x368>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	0010      	movs	r0, r2
 8006c32:	0019      	movs	r1, r3
 8006c34:	f7ff fe79 	bl	800692a <BurstRC5TV>
		break;
 8006c38:	e085      	b.n	8006d46 <IRSend_NEC+0x34e>

	case 5:
		__HAL_TIM_SET_AUTORELOAD(&htim14, 444);
 8006c3a:	4b47      	ldr	r3, [pc, #284]	; (8006d58 <IRSend_NEC+0x360>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	22de      	movs	r2, #222	; 0xde
 8006c40:	0052      	lsls	r2, r2, #1
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c44:	4b44      	ldr	r3, [pc, #272]	; (8006d58 <IRSend_NEC+0x360>)
 8006c46:	22de      	movs	r2, #222	; 0xde
 8006c48:	0052      	lsls	r2, r2, #1
 8006c4a:	60da      	str	r2, [r3, #12]
		// BurstRC6TV(0x000C);
		if (on_off)
 8006c4c:	232f      	movs	r3, #47	; 0x2f
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <IRSend_NEC+0x26e>
			BurstRC6TV(code_ON[0]);
 8006c56:	4b41      	ldr	r3, [pc, #260]	; (8006d5c <IRSend_NEC+0x364>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	0010      	movs	r0, r2
 8006c5e:	0019      	movs	r1, r3
 8006c60:	f7ff fea8 	bl	80069b4 <BurstRC6TV>
		else
			BurstRC6TV(code_OFF[0]);
		break;
 8006c64:	e06f      	b.n	8006d46 <IRSend_NEC+0x34e>
			BurstRC6TV(code_OFF[0]);
 8006c66:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <IRSend_NEC+0x368>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	0010      	movs	r0, r2
 8006c6e:	0019      	movs	r1, r3
 8006c70:	f7ff fea0 	bl	80069b4 <BurstRC6TV>
		break;
 8006c74:	e067      	b.n	8006d46 <IRSend_NEC+0x34e>

	case 6: // sharp tv
		__HAL_TIM_SET_AUTORELOAD(&htim14, 420);
 8006c76:	4b38      	ldr	r3, [pc, #224]	; (8006d58 <IRSend_NEC+0x360>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	22d2      	movs	r2, #210	; 0xd2
 8006c7c:	0052      	lsls	r2, r2, #1
 8006c7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c80:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <IRSend_NEC+0x360>)
 8006c82:	22d2      	movs	r2, #210	; 0xd2
 8006c84:	0052      	lsls	r2, r2, #1
 8006c86:	60da      	str	r2, [r3, #12]
		if (on_off)
 8006c88:	232f      	movs	r3, #47	; 0x2f
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d02a      	beq.n	8006ce8 <IRSend_NEC+0x2f0>
		{

			Sharp_Send_Data(code_ON[0], 0);
 8006c92:	4b32      	ldr	r3, [pc, #200]	; (8006d5c <IRSend_NEC+0x364>)
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	6859      	ldr	r1, [r3, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f7ff fcf2 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(49.1);
 8006c9e:	2031      	movs	r0, #49	; 0x31
 8006ca0:	f008 fb82 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_ON[0], 1);
 8006ca4:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <IRSend_NEC+0x364>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	6859      	ldr	r1, [r3, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f7ff fce9 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(46.18);
 8006cb0:	202e      	movs	r0, #46	; 0x2e
 8006cb2:	f008 fb79 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_ON[0], 0);
 8006cb6:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <IRSend_NEC+0x364>)
 8006cb8:	6818      	ldr	r0, [r3, #0]
 8006cba:	6859      	ldr	r1, [r3, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f7ff fce0 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(48.1);
 8006cc2:	2030      	movs	r0, #48	; 0x30
 8006cc4:	f008 fb70 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_ON[0], 1);
 8006cc8:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <IRSend_NEC+0x364>)
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f7ff fcd7 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(46.18);
 8006cd4:	202e      	movs	r0, #46	; 0x2e
 8006cd6:	f008 fb67 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_ON[0], 0);
 8006cda:	4b20      	ldr	r3, [pc, #128]	; (8006d5c <IRSend_NEC+0x364>)
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	6859      	ldr	r1, [r3, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f7ff fcce 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(48.1);
			Sharp_Send_Data(code_OFF[0], 1);
			HAL_Delay(46.18);
			Sharp_Send_Data(code_OFF[0], 0);
		}
		break;
 8006ce6:	e02e      	b.n	8006d46 <IRSend_NEC+0x34e>
			Sharp_Send_Data(code_OFF[0], 0);
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <IRSend_NEC+0x368>)
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	6859      	ldr	r1, [r3, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f7ff fcc7 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(49.1);
 8006cf4:	2031      	movs	r0, #49	; 0x31
 8006cf6:	f008 fb57 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_OFF[0], 1);
 8006cfa:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <IRSend_NEC+0x368>)
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	6859      	ldr	r1, [r3, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f7ff fcbe 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(46.18);
 8006d06:	202e      	movs	r0, #46	; 0x2e
 8006d08:	f008 fb4e 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_OFF[0], 0);
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <IRSend_NEC+0x368>)
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	6859      	ldr	r1, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f7ff fcb5 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(48.1);
 8006d18:	2030      	movs	r0, #48	; 0x30
 8006d1a:	f008 fb45 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_OFF[0], 1);
 8006d1e:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <IRSend_NEC+0x368>)
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	6859      	ldr	r1, [r3, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f7ff fcac 	bl	8006682 <Sharp_Send_Data>
			HAL_Delay(46.18);
 8006d2a:	202e      	movs	r0, #46	; 0x2e
 8006d2c:	f008 fb3c 	bl	800f3a8 <HAL_Delay>
			Sharp_Send_Data(code_OFF[0], 0);
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <IRSend_NEC+0x368>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	6859      	ldr	r1, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f7ff fca3 	bl	8006682 <Sharp_Send_Data>
		break;
 8006d3c:	e003      	b.n	8006d46 <IRSend_NEC+0x34e>

	default:
		tv_type = 0;
 8006d3e:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <IRSend_NEC+0x358>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
		break;
 8006d44:	46c0      	nop			; (mov r8, r8)
	}
}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b00f      	add	sp, #60	; 0x3c
 8006d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	20005018 	.word	0x20005018
 8006d54:	08031ad4 	.word	0x08031ad4
 8006d58:	20006a44 	.word	0x20006a44
 8006d5c:	20006720 	.word	0x20006720
 8006d60:	20006728 	.word	0x20006728
 8006d64:	2000675c 	.word	0x2000675c

08006d68 <IRSend_Var_True>:

	NEC_Stop();
}

void IRSend_Var_True()
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
	send_var = 1;
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <IRSend_Var_True+0x10>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20006748 	.word	0x20006748

08006d7c <IR_Receive_Process>:

void IR_Receive_Process(void)
{
 8006d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7e:	b0e9      	sub	sp, #420	; 0x1a4
 8006d80:	af00      	add	r7, sp, #0
	switch (IR_Receive_State)
 8006d82:	4be0      	ldr	r3, [pc, #896]	; (8007104 <IR_Receive_Process+0x388>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b05      	cmp	r3, #5
 8006d88:	d900      	bls.n	8006d8c <IR_Receive_Process+0x10>
 8006d8a:	e281      	b.n	8007290 <IR_Receive_Process+0x514>
 8006d8c:	009a      	lsls	r2, r3, #2
 8006d8e:	4bde      	ldr	r3, [pc, #888]	; (8007108 <IR_Receive_Process+0x38c>)
 8006d90:	18d3      	adds	r3, r2, r3
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	469f      	mov	pc, r3
	{
	case INIT_IR:
		index_loop = 0;
 8006d96:	4bdd      	ldr	r3, [pc, #884]	; (800710c <IR_Receive_Process+0x390>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]

		receive_index_k = 0;
 8006d9c:	4bdc      	ldr	r3, [pc, #880]	; (8007110 <IR_Receive_Process+0x394>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
		IR_Receive_State = IDLE_IR;
 8006da2:	4bd8      	ldr	r3, [pc, #864]	; (8007104 <IR_Receive_Process+0x388>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
		finish = 0;
 8006da8:	4bda      	ldr	r3, [pc, #872]	; (8007114 <IR_Receive_Process+0x398>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
		count = 0;
 8006dae:	4bda      	ldr	r3, [pc, #872]	; (8007118 <IR_Receive_Process+0x39c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]

		break;
 8006db4:	e26c      	b.n	8007290 <IR_Receive_Process+0x514>

	case IDLE_IR:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 0)
 8006db6:	23a0      	movs	r3, #160	; 0xa0
 8006db8:	05db      	lsls	r3, r3, #23
 8006dba:	2180      	movs	r1, #128	; 0x80
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f00a f9b3 	bl	8011128 <HAL_GPIO_ReadPin>
 8006dc2:	1e03      	subs	r3, r0, #0
 8006dc4:	d107      	bne.n	8006dd6 <IR_Receive_Process+0x5a>
		{
			IR_Receive_State = COMMAND_START;
 8006dc6:	4bcf      	ldr	r3, [pc, #828]	; (8007104 <IR_Receive_Process+0x388>)
 8006dc8:	2202      	movs	r2, #2
 8006dca:	701a      	strb	r2, [r3, #0]
			timer_tv_type_start = HAL_GetTick();
 8006dcc:	f008 fae2 	bl	800f394 <HAL_GetTick>
 8006dd0:	0002      	movs	r2, r0
 8006dd2:	4bd2      	ldr	r3, [pc, #840]	; (800711c <IR_Receive_Process+0x3a0>)
 8006dd4:	601a      	str	r2, [r3, #0]
		}
		Delay_us(100);
 8006dd6:	2064      	movs	r0, #100	; 0x64
 8006dd8:	f7ff f91c 	bl	8006014 <Delay_us>
		break;
 8006ddc:	e258      	b.n	8007290 <IR_Receive_Process+0x514>
	case COMMAND_START:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 1)
 8006dde:	23a0      	movs	r3, #160	; 0xa0
 8006de0:	05db      	lsls	r3, r3, #23
 8006de2:	2180      	movs	r1, #128	; 0x80
 8006de4:	0018      	movs	r0, r3
 8006de6:	f00a f99f 	bl	8011128 <HAL_GPIO_ReadPin>
 8006dea:	0003      	movs	r3, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d119      	bne.n	8006e24 <IR_Receive_Process+0xa8>
		{
			IR_Receive_State = COMMAND_START2;
 8006df0:	4bc4      	ldr	r3, [pc, #784]	; (8007104 <IR_Receive_Process+0x388>)
 8006df2:	2203      	movs	r2, #3
 8006df4:	701a      	strb	r2, [r3, #0]
			difference = HAL_GetTick() - timer_tv_type_start;
 8006df6:	f008 facd 	bl	800f394 <HAL_GetTick>
 8006dfa:	0002      	movs	r2, r0
 8006dfc:	4bc7      	ldr	r3, [pc, #796]	; (800711c <IR_Receive_Process+0x3a0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	1ad2      	subs	r2, r2, r3
 8006e02:	4bc7      	ldr	r3, [pc, #796]	; (8007120 <IR_Receive_Process+0x3a4>)
 8006e04:	601a      	str	r2, [r3, #0]
			if (difference < 8 && difference > 3)
 8006e06:	4bc6      	ldr	r3, [pc, #792]	; (8007120 <IR_Receive_Process+0x3a4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b07      	cmp	r3, #7
 8006e0c:	d807      	bhi.n	8006e1e <IR_Receive_Process+0xa2>
 8006e0e:	4bc4      	ldr	r3, [pc, #784]	; (8007120 <IR_Receive_Process+0x3a4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d903      	bls.n	8006e1e <IR_Receive_Process+0xa2>
				tv_type = 1;
 8006e16:	4bc3      	ldr	r3, [pc, #780]	; (8007124 <IR_Receive_Process+0x3a8>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	e002      	b.n	8006e24 <IR_Receive_Process+0xa8>
			else
				tv_type = 0;
 8006e1e:	4bc1      	ldr	r3, [pc, #772]	; (8007124 <IR_Receive_Process+0x3a8>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
		}
		Delay_us(100);
 8006e24:	2064      	movs	r0, #100	; 0x64
 8006e26:	f7ff f8f5 	bl	8006014 <Delay_us>
		break;
 8006e2a:	e231      	b.n	8007290 <IR_Receive_Process+0x514>
	case COMMAND_START2:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 0)
 8006e2c:	23a0      	movs	r3, #160	; 0xa0
 8006e2e:	05db      	lsls	r3, r3, #23
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	0018      	movs	r0, r3
 8006e34:	f00a f978 	bl	8011128 <HAL_GPIO_ReadPin>
 8006e38:	1e03      	subs	r3, r0, #0
 8006e3a:	d102      	bne.n	8006e42 <IR_Receive_Process+0xc6>
			IR_Receive_State = WAIT;
 8006e3c:	4bb1      	ldr	r3, [pc, #708]	; (8007104 <IR_Receive_Process+0x388>)
 8006e3e:	2205      	movs	r2, #5
 8006e40:	701a      	strb	r2, [r3, #0]
		Delay_us(100);
 8006e42:	2064      	movs	r0, #100	; 0x64
 8006e44:	f7ff f8e6 	bl	8006014 <Delay_us>
		timestamp_IR = HAL_GetTick();
 8006e48:	f008 faa4 	bl	800f394 <HAL_GetTick>
 8006e4c:	0002      	movs	r2, r0
 8006e4e:	4bb6      	ldr	r3, [pc, #728]	; (8007128 <IR_Receive_Process+0x3ac>)
 8006e50:	601a      	str	r2, [r3, #0]
		break;
 8006e52:	e21d      	b.n	8007290 <IR_Receive_Process+0x514>
	case WAIT:

		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 1)
 8006e54:	23a0      	movs	r3, #160	; 0xa0
 8006e56:	05db      	lsls	r3, r3, #23
 8006e58:	2180      	movs	r1, #128	; 0x80
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f00a f964 	bl	8011128 <HAL_GPIO_ReadPin>
 8006e60:	0003      	movs	r3, r0
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d103      	bne.n	8006e6e <IR_Receive_Process+0xf2>
			IR_Receive_State = COMMAND_LENGTH;
 8006e66:	4ba7      	ldr	r3, [pc, #668]	; (8007104 <IR_Receive_Process+0x388>)
 8006e68:	2204      	movs	r2, #4
 8006e6a:	701a      	strb	r2, [r3, #0]
				// on_receive = 0;
				// Delay_us(1000);
			}
		}

		break;
 8006e6c:	e20f      	b.n	800728e <IR_Receive_Process+0x512>
			finish++; // finish = 1;
 8006e6e:	4ba9      	ldr	r3, [pc, #676]	; (8007114 <IR_Receive_Process+0x398>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	4ba7      	ldr	r3, [pc, #668]	; (8007114 <IR_Receive_Process+0x398>)
 8006e76:	601a      	str	r2, [r3, #0]
			if (finish >= 200)
 8006e78:	4ba6      	ldr	r3, [pc, #664]	; (8007114 <IR_Receive_Process+0x398>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2bc7      	cmp	r3, #199	; 0xc7
 8006e7e:	dc00      	bgt.n	8006e82 <IR_Receive_Process+0x106>
 8006e80:	e205      	b.n	800728e <IR_Receive_Process+0x512>
				IR_Receive_State = IDLE_IR;
 8006e82:	4ba0      	ldr	r3, [pc, #640]	; (8007104 <IR_Receive_Process+0x388>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	701a      	strb	r2, [r3, #0]
				Send_Command_Data((uint32_t*)code_ON, receive_index_k, 1);
 8006e88:	4ba1      	ldr	r3, [pc, #644]	; (8007110 <IR_Receive_Process+0x394>)
 8006e8a:	6819      	ldr	r1, [r3, #0]
 8006e8c:	4ba7      	ldr	r3, [pc, #668]	; (800712c <IR_Receive_Process+0x3b0>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	0018      	movs	r0, r3
 8006e92:	f006 ff2f 	bl	800dcf4 <Send_Command_Data>
				for (int i = 0; i < 8; i++)
 8006e96:	2300      	movs	r3, #0
 8006e98:	22ba      	movs	r2, #186	; 0xba
 8006e9a:	0052      	lsls	r2, r2, #1
 8006e9c:	2128      	movs	r1, #40	; 0x28
 8006e9e:	1852      	adds	r2, r2, r1
 8006ea0:	19d2      	adds	r2, r2, r7
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	e05a      	b.n	8006f5c <IR_Receive_Process+0x1e0>
					uint8_t temp_half_byte = (code_ON[0] >> (28 - 4 * i)) & 0x0F;
 8006ea6:	4ba1      	ldr	r3, [pc, #644]	; (800712c <IR_Receive_Process+0x3b0>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	21ba      	movs	r1, #186	; 0xba
 8006eae:	0049      	lsls	r1, r1, #1
 8006eb0:	2028      	movs	r0, #40	; 0x28
 8006eb2:	1809      	adds	r1, r1, r0
 8006eb4:	19c9      	adds	r1, r1, r7
 8006eb6:	6809      	ldr	r1, [r1, #0]
 8006eb8:	2007      	movs	r0, #7
 8006eba:	1a41      	subs	r1, r0, r1
 8006ebc:	0089      	lsls	r1, r1, #2
 8006ebe:	0008      	movs	r0, r1
 8006ec0:	3820      	subs	r0, #32
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	db03      	blt.n	8006ece <IR_Receive_Process+0x152>
 8006ec6:	001e      	movs	r6, r3
 8006ec8:	40c6      	lsrs	r6, r0
 8006eca:	0034      	movs	r4, r6
 8006ecc:	e008      	b.n	8006ee0 <IR_Receive_Process+0x164>
 8006ece:	2020      	movs	r0, #32
 8006ed0:	1a40      	subs	r0, r0, r1
 8006ed2:	001e      	movs	r6, r3
 8006ed4:	4086      	lsls	r6, r0
 8006ed6:	0030      	movs	r0, r6
 8006ed8:	0016      	movs	r6, r2
 8006eda:	40ce      	lsrs	r6, r1
 8006edc:	0034      	movs	r4, r6
 8006ede:	4304      	orrs	r4, r0
 8006ee0:	40cb      	lsrs	r3, r1
 8006ee2:	001d      	movs	r5, r3
 8006ee4:	b2e2      	uxtb	r2, r4
 8006ee6:	2070      	movs	r0, #112	; 0x70
 8006ee8:	30ff      	adds	r0, #255	; 0xff
 8006eea:	2628      	movs	r6, #40	; 0x28
 8006eec:	1983      	adds	r3, r0, r6
 8006eee:	19db      	adds	r3, r3, r7
 8006ef0:	210f      	movs	r1, #15
 8006ef2:	400a      	ands	r2, r1
 8006ef4:	701a      	strb	r2, [r3, #0]
					if (temp_half_byte > 9)
 8006ef6:	0002      	movs	r2, r0
 8006ef8:	0030      	movs	r0, r6
 8006efa:	1813      	adds	r3, r2, r0
 8006efc:	19db      	adds	r3, r3, r7
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	d90f      	bls.n	8006f24 <IR_Receive_Process+0x1a8>
						pcb_config.sSetIR[i] = temp_half_byte + '7';
 8006f04:	1813      	adds	r3, r2, r0
 8006f06:	19db      	adds	r3, r3, r7
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	3337      	adds	r3, #55	; 0x37
 8006f0c:	b2d9      	uxtb	r1, r3
 8006f0e:	4a88      	ldr	r2, [pc, #544]	; (8007130 <IR_Receive_Process+0x3b4>)
 8006f10:	23ba      	movs	r3, #186	; 0xba
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	181b      	adds	r3, r3, r0
 8006f16:	19db      	adds	r3, r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	18d3      	adds	r3, r2, r3
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	1c0a      	adds	r2, r1, #0
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e011      	b.n	8006f48 <IR_Receive_Process+0x1cc>
						pcb_config.sSetIR[i] = temp_half_byte + '0';
 8006f24:	2370      	movs	r3, #112	; 0x70
 8006f26:	33ff      	adds	r3, #255	; 0xff
 8006f28:	2028      	movs	r0, #40	; 0x28
 8006f2a:	181b      	adds	r3, r3, r0
 8006f2c:	19db      	adds	r3, r3, r7
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	3330      	adds	r3, #48	; 0x30
 8006f32:	b2d9      	uxtb	r1, r3
 8006f34:	4a7e      	ldr	r2, [pc, #504]	; (8007130 <IR_Receive_Process+0x3b4>)
 8006f36:	23ba      	movs	r3, #186	; 0xba
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	181b      	adds	r3, r3, r0
 8006f3c:	19db      	adds	r3, r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	18d3      	adds	r3, r2, r3
 8006f42:	3304      	adds	r3, #4
 8006f44:	1c0a      	adds	r2, r1, #0
 8006f46:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8006f48:	22ba      	movs	r2, #186	; 0xba
 8006f4a:	0052      	lsls	r2, r2, #1
 8006f4c:	2128      	movs	r1, #40	; 0x28
 8006f4e:	1853      	adds	r3, r2, r1
 8006f50:	19db      	adds	r3, r3, r7
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	1852      	adds	r2, r2, r1
 8006f58:	19d2      	adds	r2, r2, r7
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	23ba      	movs	r3, #186	; 0xba
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	2228      	movs	r2, #40	; 0x28
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	19db      	adds	r3, r3, r7
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b07      	cmp	r3, #7
 8006f6a:	dd9c      	ble.n	8006ea6 <IR_Receive_Process+0x12a>
				if (tv_type == 1)
 8006f6c:	4b6d      	ldr	r3, [pc, #436]	; (8007124 <IR_Receive_Process+0x3a8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d104      	bne.n	8006f7e <IR_Receive_Process+0x202>
					pcb_config.tvtype[0] = '1';
 8006f74:	4b6e      	ldr	r3, [pc, #440]	; (8007130 <IR_Receive_Process+0x3b4>)
 8006f76:	22f2      	movs	r2, #242	; 0xf2
 8006f78:	2131      	movs	r1, #49	; 0x31
 8006f7a:	5499      	strb	r1, [r3, r2]
 8006f7c:	e003      	b.n	8006f86 <IR_Receive_Process+0x20a>
					pcb_config.tvtype[0] = '0';
 8006f7e:	4b6c      	ldr	r3, [pc, #432]	; (8007130 <IR_Receive_Process+0x3b4>)
 8006f80:	22f2      	movs	r2, #242	; 0xf2
 8006f82:	2130      	movs	r1, #48	; 0x30
 8006f84:	5499      	strb	r1, [r3, r2]
				vptr_test = &pcb_config;
 8006f86:	4b6b      	ldr	r3, [pc, #428]	; (8007134 <IR_Receive_Process+0x3b8>)
 8006f88:	4a69      	ldr	r2, [pc, #420]	; (8007130 <IR_Receive_Process+0x3b4>)
 8006f8a:	601a      	str	r2, [r3, #0]
				memcpy(buffer, vptr_test, sizeof(pcb_config));
 8006f8c:	4b69      	ldr	r3, [pc, #420]	; (8007134 <IR_Receive_Process+0x3b8>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	4b69      	ldr	r3, [pc, #420]	; (8007138 <IR_Receive_Process+0x3bc>)
 8006f92:	21bc      	movs	r1, #188	; 0xbc
 8006f94:	0049      	lsls	r1, r1, #1
 8006f96:	185b      	adds	r3, r3, r1
 8006f98:	2128      	movs	r1, #40	; 0x28
 8006f9a:	468c      	mov	ip, r1
 8006f9c:	44bc      	add	ip, r7
 8006f9e:	4463      	add	r3, ip
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	0011      	movs	r1, r2
 8006fa4:	23b6      	movs	r3, #182	; 0xb6
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	001a      	movs	r2, r3
 8006faa:	f01c fcdd 	bl	8023968 <memcpy>
				HAL_Delay(10);
 8006fae:	200a      	movs	r0, #10
 8006fb0:	f008 f9fa 	bl	800f3a8 <HAL_Delay>
				receive_index_k_saved = receive_index_k;
 8006fb4:	4b56      	ldr	r3, [pc, #344]	; (8007110 <IR_Receive_Process+0x394>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	4b60      	ldr	r3, [pc, #384]	; (800713c <IR_Receive_Process+0x3c0>)
 8006fba:	601a      	str	r2, [r3, #0]
				HAL_Delay(1000);
 8006fbc:	23fa      	movs	r3, #250	; 0xfa
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f008 f9f1 	bl	800f3a8 <HAL_Delay>
				index_loop = 0;
 8006fc6:	4b51      	ldr	r3, [pc, #324]	; (800710c <IR_Receive_Process+0x390>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
				receive_index_k = 0;
 8006fcc:	4b50      	ldr	r3, [pc, #320]	; (8007110 <IR_Receive_Process+0x394>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
				finish = 0;
 8006fd2:	4b50      	ldr	r3, [pc, #320]	; (8007114 <IR_Receive_Process+0x398>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
				count = 0;
 8006fd8:	4b4f      	ldr	r3, [pc, #316]	; (8007118 <IR_Receive_Process+0x39c>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
		break;
 8006fde:	e156      	b.n	800728e <IR_Receive_Process+0x512>

	case COMMAND_LENGTH:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 1)
 8006fe0:	23a0      	movs	r3, #160	; 0xa0
 8006fe2:	05db      	lsls	r3, r3, #23
 8006fe4:	2180      	movs	r1, #128	; 0x80
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f00a f89e 	bl	8011128 <HAL_GPIO_ReadPin>
 8006fec:	0003      	movs	r3, r0
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d109      	bne.n	8007006 <IR_Receive_Process+0x28a>
		{
			count++;
 8006ff2:	4b49      	ldr	r3, [pc, #292]	; (8007118 <IR_Receive_Process+0x39c>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	4b47      	ldr	r3, [pc, #284]	; (8007118 <IR_Receive_Process+0x39c>)
 8006ffc:	701a      	strb	r2, [r3, #0]
			Delay_us(100);
 8006ffe:	2064      	movs	r0, #100	; 0x64
 8007000:	f7ff f808 	bl	8006014 <Delay_us>
				count = 0;
				timestamp_IR = HAL_GetTick();
			}
		}

		break;
 8007004:	e144      	b.n	8007290 <IR_Receive_Process+0x514>
			if (count > 12) // if the space is more than 1.2 ms
 8007006:	4b44      	ldr	r3, [pc, #272]	; (8007118 <IR_Receive_Process+0x39c>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b0c      	cmp	r3, #12
 800700c:	d921      	bls.n	8007052 <IR_Receive_Process+0x2d6>
				code_ON[receive_index_k] |= (1UL << (31 - index_loop)); // write 1
 800700e:	4b40      	ldr	r3, [pc, #256]	; (8007110 <IR_Receive_Process+0x394>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a46      	ldr	r2, [pc, #280]	; (800712c <IR_Receive_Process+0x3b0>)
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	18d3      	adds	r3, r2, r3
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	493b      	ldr	r1, [pc, #236]	; (800710c <IR_Receive_Process+0x390>)
 800701e:	6809      	ldr	r1, [r1, #0]
 8007020:	2080      	movs	r0, #128	; 0x80
 8007022:	0600      	lsls	r0, r0, #24
 8007024:	40c8      	lsrs	r0, r1
 8007026:	0001      	movs	r1, r0
 8007028:	61b9      	str	r1, [r7, #24]
 800702a:	2100      	movs	r1, #0
 800702c:	61f9      	str	r1, [r7, #28]
 800702e:	4938      	ldr	r1, [pc, #224]	; (8007110 <IR_Receive_Process+0x394>)
 8007030:	6809      	ldr	r1, [r1, #0]
 8007032:	69bc      	ldr	r4, [r7, #24]
 8007034:	69fd      	ldr	r5, [r7, #28]
 8007036:	0020      	movs	r0, r4
 8007038:	4310      	orrs	r0, r2
 800703a:	6138      	str	r0, [r7, #16]
 800703c:	0028      	movs	r0, r5
 800703e:	4318      	orrs	r0, r3
 8007040:	6178      	str	r0, [r7, #20]
 8007042:	4a3a      	ldr	r2, [pc, #232]	; (800712c <IR_Receive_Process+0x3b0>)
 8007044:	00cb      	lsls	r3, r1, #3
 8007046:	18d3      	adds	r3, r2, r3
 8007048:	6939      	ldr	r1, [r7, #16]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6019      	str	r1, [r3, #0]
 800704e:	605a      	str	r2, [r3, #4]
 8007050:	e021      	b.n	8007096 <IR_Receive_Process+0x31a>
				code_ON[receive_index_k] &= ~(1UL << (31 - index_loop)); // write 0
 8007052:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <IR_Receive_Process+0x394>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a35      	ldr	r2, [pc, #212]	; (800712c <IR_Receive_Process+0x3b0>)
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	18d3      	adds	r3, r2, r3
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	492a      	ldr	r1, [pc, #168]	; (800710c <IR_Receive_Process+0x390>)
 8007062:	6809      	ldr	r1, [r1, #0]
 8007064:	2080      	movs	r0, #128	; 0x80
 8007066:	0600      	lsls	r0, r0, #24
 8007068:	40c8      	lsrs	r0, r1
 800706a:	0001      	movs	r1, r0
 800706c:	43c9      	mvns	r1, r1
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	2100      	movs	r1, #0
 8007072:	60f9      	str	r1, [r7, #12]
 8007074:	4926      	ldr	r1, [pc, #152]	; (8007110 <IR_Receive_Process+0x394>)
 8007076:	6809      	ldr	r1, [r1, #0]
 8007078:	68bc      	ldr	r4, [r7, #8]
 800707a:	68fd      	ldr	r5, [r7, #12]
 800707c:	0020      	movs	r0, r4
 800707e:	4010      	ands	r0, r2
 8007080:	6038      	str	r0, [r7, #0]
 8007082:	0028      	movs	r0, r5
 8007084:	4018      	ands	r0, r3
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	4a28      	ldr	r2, [pc, #160]	; (800712c <IR_Receive_Process+0x3b0>)
 800708a:	00cb      	lsls	r3, r1, #3
 800708c:	18d3      	adds	r3, r2, r3
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6019      	str	r1, [r3, #0]
 8007094:	605a      	str	r2, [r3, #4]
			finish = 0;
 8007096:	4b1f      	ldr	r3, [pc, #124]	; (8007114 <IR_Receive_Process+0x398>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
			if (index_loop == 32 && receive_index_k != MAX_NUMBER) // if (index_loop == 32)
 800709c:	4b1b      	ldr	r3, [pc, #108]	; (800710c <IR_Receive_Process+0x390>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d10e      	bne.n	80070c2 <IR_Receive_Process+0x346>
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <IR_Receive_Process+0x394>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d00a      	beq.n	80070c2 <IR_Receive_Process+0x346>
				receive_index_k++;
 80070ac:	4b18      	ldr	r3, [pc, #96]	; (8007110 <IR_Receive_Process+0x394>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <IR_Receive_Process+0x394>)
 80070b4:	601a      	str	r2, [r3, #0]
				index_loop = 0;
 80070b6:	4b15      	ldr	r3, [pc, #84]	; (800710c <IR_Receive_Process+0x390>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
				IR_Receive_State = WAIT;
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <IR_Receive_Process+0x388>)
 80070be:	2205      	movs	r2, #5
 80070c0:	701a      	strb	r2, [r3, #0]
			if ((index_loop == 32 && receive_index_k == MAX_NUMBER)) // if (index_loop == 32)
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <IR_Receive_Process+0x390>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d000      	beq.n	80070cc <IR_Receive_Process+0x350>
 80070ca:	e0cf      	b.n	800726c <IR_Receive_Process+0x4f0>
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <IR_Receive_Process+0x394>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d000      	beq.n	80070d6 <IR_Receive_Process+0x35a>
 80070d4:	e0ca      	b.n	800726c <IR_Receive_Process+0x4f0>
				IR_Receive_State = IDLE_IR;
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <IR_Receive_Process+0x388>)
 80070d8:	2201      	movs	r2, #1
 80070da:	701a      	strb	r2, [r3, #0]
				Send_Command_Data((uint32_t*)code_ON, receive_index_k, 1);
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <IR_Receive_Process+0x394>)
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <IR_Receive_Process+0x3b0>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	0018      	movs	r0, r3
 80070e6:	f006 fe05 	bl	800dcf4 <Send_Command_Data>
				receive_index_k_saved = receive_index_k;
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <IR_Receive_Process+0x394>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <IR_Receive_Process+0x3c0>)
 80070f0:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	22b8      	movs	r2, #184	; 0xb8
 80070f6:	0052      	lsls	r2, r2, #1
 80070f8:	2128      	movs	r1, #40	; 0x28
 80070fa:	1852      	adds	r2, r2, r1
 80070fc:	19d2      	adds	r2, r2, r7
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	e07d      	b.n	80071fe <IR_Receive_Process+0x482>
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	20006759 	.word	0x20006759
 8007108:	08031af0 	.word	0x08031af0
 800710c:	20006744 	.word	0x20006744
 8007110:	20006730 	.word	0x20006730
 8007114:	20006740 	.word	0x20006740
 8007118:	2000673c 	.word	0x2000673c
 800711c:	20006734 	.word	0x20006734
 8007120:	20006738 	.word	0x20006738
 8007124:	20005018 	.word	0x20005018
 8007128:	2000674c 	.word	0x2000674c
 800712c:	20006720 	.word	0x20006720
 8007130:	20006db4 	.word	0x20006db4
 8007134:	20006d88 	.word	0x20006d88
 8007138:	fffffe88 	.word	0xfffffe88
 800713c:	20005004 	.word	0x20005004
					uint8_t temp_half_byte = (code_ON[0] >> (28 - 4 * i)) & 0x0F;
 8007140:	4b55      	ldr	r3, [pc, #340]	; (8007298 <IR_Receive_Process+0x51c>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	21b8      	movs	r1, #184	; 0xb8
 8007148:	0049      	lsls	r1, r1, #1
 800714a:	2028      	movs	r0, #40	; 0x28
 800714c:	1809      	adds	r1, r1, r0
 800714e:	19c9      	adds	r1, r1, r7
 8007150:	6809      	ldr	r1, [r1, #0]
 8007152:	2007      	movs	r0, #7
 8007154:	1a41      	subs	r1, r0, r1
 8007156:	0089      	lsls	r1, r1, #2
 8007158:	0008      	movs	r0, r1
 800715a:	3820      	subs	r0, #32
 800715c:	2800      	cmp	r0, #0
 800715e:	db03      	blt.n	8007168 <IR_Receive_Process+0x3ec>
 8007160:	001c      	movs	r4, r3
 8007162:	40c4      	lsrs	r4, r0
 8007164:	623c      	str	r4, [r7, #32]
 8007166:	e00a      	b.n	800717e <IR_Receive_Process+0x402>
 8007168:	2020      	movs	r0, #32
 800716a:	1a40      	subs	r0, r0, r1
 800716c:	001c      	movs	r4, r3
 800716e:	4084      	lsls	r4, r0
 8007170:	0020      	movs	r0, r4
 8007172:	0014      	movs	r4, r2
 8007174:	40cc      	lsrs	r4, r1
 8007176:	623c      	str	r4, [r7, #32]
 8007178:	6a3c      	ldr	r4, [r7, #32]
 800717a:	4304      	orrs	r4, r0
 800717c:	623c      	str	r4, [r7, #32]
 800717e:	40cb      	lsrs	r3, r1
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
 8007182:	2320      	movs	r3, #32
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	781a      	ldrb	r2, [r3, #0]
 8007188:	20b7      	movs	r0, #183	; 0xb7
 800718a:	0040      	lsls	r0, r0, #1
 800718c:	2428      	movs	r4, #40	; 0x28
 800718e:	1903      	adds	r3, r0, r4
 8007190:	19db      	adds	r3, r3, r7
 8007192:	210f      	movs	r1, #15
 8007194:	400a      	ands	r2, r1
 8007196:	701a      	strb	r2, [r3, #0]
					if (temp_half_byte > 9)
 8007198:	0002      	movs	r2, r0
 800719a:	0020      	movs	r0, r4
 800719c:	1813      	adds	r3, r2, r0
 800719e:	19db      	adds	r3, r3, r7
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b09      	cmp	r3, #9
 80071a4:	d90f      	bls.n	80071c6 <IR_Receive_Process+0x44a>
						pcb_config.sSetIR[i] = temp_half_byte + '7';
 80071a6:	1813      	adds	r3, r2, r0
 80071a8:	19db      	adds	r3, r3, r7
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	3337      	adds	r3, #55	; 0x37
 80071ae:	b2d9      	uxtb	r1, r3
 80071b0:	4a3a      	ldr	r2, [pc, #232]	; (800729c <IR_Receive_Process+0x520>)
 80071b2:	23b8      	movs	r3, #184	; 0xb8
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	181b      	adds	r3, r3, r0
 80071b8:	19db      	adds	r3, r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	18d3      	adds	r3, r2, r3
 80071be:	3304      	adds	r3, #4
 80071c0:	1c0a      	adds	r2, r1, #0
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e011      	b.n	80071ea <IR_Receive_Process+0x46e>
						pcb_config.sSetIR[i] = temp_half_byte + '0';
 80071c6:	23b7      	movs	r3, #183	; 0xb7
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	2028      	movs	r0, #40	; 0x28
 80071cc:	181b      	adds	r3, r3, r0
 80071ce:	19db      	adds	r3, r3, r7
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	3330      	adds	r3, #48	; 0x30
 80071d4:	b2d9      	uxtb	r1, r3
 80071d6:	4a31      	ldr	r2, [pc, #196]	; (800729c <IR_Receive_Process+0x520>)
 80071d8:	23b8      	movs	r3, #184	; 0xb8
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	181b      	adds	r3, r3, r0
 80071de:	19db      	adds	r3, r3, r7
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	18d3      	adds	r3, r2, r3
 80071e4:	3304      	adds	r3, #4
 80071e6:	1c0a      	adds	r2, r1, #0
 80071e8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 80071ea:	22b8      	movs	r2, #184	; 0xb8
 80071ec:	0052      	lsls	r2, r2, #1
 80071ee:	2128      	movs	r1, #40	; 0x28
 80071f0:	1853      	adds	r3, r2, r1
 80071f2:	19db      	adds	r3, r3, r7
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	1852      	adds	r2, r2, r1
 80071fa:	19d2      	adds	r2, r2, r7
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	23b8      	movs	r3, #184	; 0xb8
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	2228      	movs	r2, #40	; 0x28
 8007204:	189b      	adds	r3, r3, r2
 8007206:	19db      	adds	r3, r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b07      	cmp	r3, #7
 800720c:	dd98      	ble.n	8007140 <IR_Receive_Process+0x3c4>
				if (tv_type == 1)
 800720e:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <IR_Receive_Process+0x524>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d104      	bne.n	8007220 <IR_Receive_Process+0x4a4>
					pcb_config.tvtype[0] = '1';
 8007216:	4b21      	ldr	r3, [pc, #132]	; (800729c <IR_Receive_Process+0x520>)
 8007218:	22f2      	movs	r2, #242	; 0xf2
 800721a:	2131      	movs	r1, #49	; 0x31
 800721c:	5499      	strb	r1, [r3, r2]
 800721e:	e003      	b.n	8007228 <IR_Receive_Process+0x4ac>
					pcb_config.tvtype[0] = '0';
 8007220:	4b1e      	ldr	r3, [pc, #120]	; (800729c <IR_Receive_Process+0x520>)
 8007222:	22f2      	movs	r2, #242	; 0xf2
 8007224:	2130      	movs	r1, #48	; 0x30
 8007226:	5499      	strb	r1, [r3, r2]
				vptr_test = &pcb_config;
 8007228:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <IR_Receive_Process+0x528>)
 800722a:	4a1c      	ldr	r2, [pc, #112]	; (800729c <IR_Receive_Process+0x520>)
 800722c:	601a      	str	r2, [r3, #0]
				memcpy(buffer, vptr_test, sizeof(pcb_config));
 800722e:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <IR_Receive_Process+0x528>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <IR_Receive_Process+0x52c>)
 8007234:	21bc      	movs	r1, #188	; 0xbc
 8007236:	0049      	lsls	r1, r1, #1
 8007238:	185b      	adds	r3, r3, r1
 800723a:	2128      	movs	r1, #40	; 0x28
 800723c:	468c      	mov	ip, r1
 800723e:	44bc      	add	ip, r7
 8007240:	4463      	add	r3, ip
 8007242:	0018      	movs	r0, r3
 8007244:	0011      	movs	r1, r2
 8007246:	23b6      	movs	r3, #182	; 0xb6
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	001a      	movs	r2, r3
 800724c:	f01c fb8c 	bl	8023968 <memcpy>
				HAL_Delay(10);
 8007250:	200a      	movs	r0, #10
 8007252:	f008 f8a9 	bl	800f3a8 <HAL_Delay>
				index_loop = 0;
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <IR_Receive_Process+0x530>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
				receive_index_k = 0;
 800725c:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <IR_Receive_Process+0x534>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
				finish = 0;
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <IR_Receive_Process+0x538>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
			{
 8007268:	46c0      	nop			; (mov r8, r8)
		break;
 800726a:	e011      	b.n	8007290 <IR_Receive_Process+0x514>
				index_loop++;
 800726c:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <IR_Receive_Process+0x530>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <IR_Receive_Process+0x530>)
 8007274:	601a      	str	r2, [r3, #0]
				IR_Receive_State = WAIT;
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <IR_Receive_Process+0x53c>)
 8007278:	2205      	movs	r2, #5
 800727a:	701a      	strb	r2, [r3, #0]
				count = 0;
 800727c:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <IR_Receive_Process+0x540>)
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
				timestamp_IR = HAL_GetTick();
 8007282:	f008 f887 	bl	800f394 <HAL_GetTick>
 8007286:	0002      	movs	r2, r0
 8007288:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <IR_Receive_Process+0x544>)
 800728a:	601a      	str	r2, [r3, #0]
		break;
 800728c:	e000      	b.n	8007290 <IR_Receive_Process+0x514>
		break;
 800728e:	46c0      	nop			; (mov r8, r8)
	}
}
 8007290:	46c0      	nop			; (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	b069      	add	sp, #420	; 0x1a4
 8007296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007298:	20006720 	.word	0x20006720
 800729c:	20006db4 	.word	0x20006db4
 80072a0:	20005018 	.word	0x20005018
 80072a4:	20006d88 	.word	0x20006d88
 80072a8:	fffffe88 	.word	0xfffffe88
 80072ac:	20006744 	.word	0x20006744
 80072b0:	20006730 	.word	0x20006730
 80072b4:	20006740 	.word	0x20006740
 80072b8:	20006759 	.word	0x20006759
 80072bc:	2000673c 	.word	0x2000673c
 80072c0:	2000674c 	.word	0x2000674c

080072c4 <IR_Receive_Process_OFF>:

void IR_Receive_Process_OFF(void)
{
 80072c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c6:	b0e9      	sub	sp, #420	; 0x1a4
 80072c8:	af00      	add	r7, sp, #0
	switch (IR_Receive_OFF_State)
 80072ca:	4bdc      	ldr	r3, [pc, #880]	; (800763c <IR_Receive_Process_OFF+0x378>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d900      	bls.n	80072d4 <IR_Receive_Process_OFF+0x10>
 80072d2:	e279      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>
 80072d4:	009a      	lsls	r2, r3, #2
 80072d6:	4bda      	ldr	r3, [pc, #872]	; (8007640 <IR_Receive_Process_OFF+0x37c>)
 80072d8:	18d3      	adds	r3, r2, r3
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	469f      	mov	pc, r3
	{
	case INIT2:
		index_loop = 0;
 80072de:	4bd9      	ldr	r3, [pc, #868]	; (8007644 <IR_Receive_Process_OFF+0x380>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]

		receive_index_k = 0;
 80072e4:	4bd8      	ldr	r3, [pc, #864]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
		IR_Receive_OFF_State = IDLE2;
 80072ea:	4bd4      	ldr	r3, [pc, #848]	; (800763c <IR_Receive_Process_OFF+0x378>)
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
		finish = 0;
 80072f0:	4bd6      	ldr	r3, [pc, #856]	; (800764c <IR_Receive_Process_OFF+0x388>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
		count = 0;
 80072f6:	4bd6      	ldr	r3, [pc, #856]	; (8007650 <IR_Receive_Process_OFF+0x38c>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]

		break;
 80072fc:	e264      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>

	case IDLE2:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 0)
 80072fe:	23a0      	movs	r3, #160	; 0xa0
 8007300:	05db      	lsls	r3, r3, #23
 8007302:	2180      	movs	r1, #128	; 0x80
 8007304:	0018      	movs	r0, r3
 8007306:	f009 ff0f 	bl	8011128 <HAL_GPIO_ReadPin>
 800730a:	1e03      	subs	r3, r0, #0
 800730c:	d107      	bne.n	800731e <IR_Receive_Process_OFF+0x5a>
		{
			IR_Receive_OFF_State = COMMAND_START3;
 800730e:	4bcb      	ldr	r3, [pc, #812]	; (800763c <IR_Receive_Process_OFF+0x378>)
 8007310:	2202      	movs	r2, #2
 8007312:	701a      	strb	r2, [r3, #0]
			timer_tv_type_start = HAL_GetTick();
 8007314:	f008 f83e 	bl	800f394 <HAL_GetTick>
 8007318:	0002      	movs	r2, r0
 800731a:	4bce      	ldr	r3, [pc, #824]	; (8007654 <IR_Receive_Process_OFF+0x390>)
 800731c:	601a      	str	r2, [r3, #0]
		}
		Delay_us(100);
 800731e:	2064      	movs	r0, #100	; 0x64
 8007320:	f7fe fe78 	bl	8006014 <Delay_us>
		break;
 8007324:	e250      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>
	case COMMAND_START3:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 1)
 8007326:	23a0      	movs	r3, #160	; 0xa0
 8007328:	05db      	lsls	r3, r3, #23
 800732a:	2180      	movs	r1, #128	; 0x80
 800732c:	0018      	movs	r0, r3
 800732e:	f009 fefb 	bl	8011128 <HAL_GPIO_ReadPin>
 8007332:	0003      	movs	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d119      	bne.n	800736c <IR_Receive_Process_OFF+0xa8>
		{
			IR_Receive_OFF_State = COMMAND_START4;
 8007338:	4bc0      	ldr	r3, [pc, #768]	; (800763c <IR_Receive_Process_OFF+0x378>)
 800733a:	2203      	movs	r2, #3
 800733c:	701a      	strb	r2, [r3, #0]
			difference = HAL_GetTick() - timer_tv_type_start;
 800733e:	f008 f829 	bl	800f394 <HAL_GetTick>
 8007342:	0002      	movs	r2, r0
 8007344:	4bc3      	ldr	r3, [pc, #780]	; (8007654 <IR_Receive_Process_OFF+0x390>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	4bc3      	ldr	r3, [pc, #780]	; (8007658 <IR_Receive_Process_OFF+0x394>)
 800734c:	601a      	str	r2, [r3, #0]
			if (difference < 8 && difference > 3)
 800734e:	4bc2      	ldr	r3, [pc, #776]	; (8007658 <IR_Receive_Process_OFF+0x394>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b07      	cmp	r3, #7
 8007354:	d807      	bhi.n	8007366 <IR_Receive_Process_OFF+0xa2>
 8007356:	4bc0      	ldr	r3, [pc, #768]	; (8007658 <IR_Receive_Process_OFF+0x394>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d903      	bls.n	8007366 <IR_Receive_Process_OFF+0xa2>
				tv_type = 1;
 800735e:	4bbf      	ldr	r3, [pc, #764]	; (800765c <IR_Receive_Process_OFF+0x398>)
 8007360:	2201      	movs	r2, #1
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e002      	b.n	800736c <IR_Receive_Process_OFF+0xa8>
			else
				tv_type = 0;
 8007366:	4bbd      	ldr	r3, [pc, #756]	; (800765c <IR_Receive_Process_OFF+0x398>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
		}

		Delay_us(100);
 800736c:	2064      	movs	r0, #100	; 0x64
 800736e:	f7fe fe51 	bl	8006014 <Delay_us>
		break;
 8007372:	e229      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>
	case COMMAND_START4:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 0)
 8007374:	23a0      	movs	r3, #160	; 0xa0
 8007376:	05db      	lsls	r3, r3, #23
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	0018      	movs	r0, r3
 800737c:	f009 fed4 	bl	8011128 <HAL_GPIO_ReadPin>
 8007380:	1e03      	subs	r3, r0, #0
 8007382:	d102      	bne.n	800738a <IR_Receive_Process_OFF+0xc6>
			IR_Receive_OFF_State = WAIT2;
 8007384:	4bad      	ldr	r3, [pc, #692]	; (800763c <IR_Receive_Process_OFF+0x378>)
 8007386:	2205      	movs	r2, #5
 8007388:	701a      	strb	r2, [r3, #0]
		Delay_us(100);
 800738a:	2064      	movs	r0, #100	; 0x64
 800738c:	f7fe fe42 	bl	8006014 <Delay_us>
		timestamp_IR_OFF = HAL_GetTick();
 8007390:	f008 f800 	bl	800f394 <HAL_GetTick>
 8007394:	0002      	movs	r2, r0
 8007396:	4bb2      	ldr	r3, [pc, #712]	; (8007660 <IR_Receive_Process_OFF+0x39c>)
 8007398:	601a      	str	r2, [r3, #0]
		break;
 800739a:	e215      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>
	case WAIT2:

		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 1)
 800739c:	23a0      	movs	r3, #160	; 0xa0
 800739e:	05db      	lsls	r3, r3, #23
 80073a0:	2180      	movs	r1, #128	; 0x80
 80073a2:	0018      	movs	r0, r3
 80073a4:	f009 fec0 	bl	8011128 <HAL_GPIO_ReadPin>
 80073a8:	0003      	movs	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d103      	bne.n	80073b6 <IR_Receive_Process_OFF+0xf2>
			IR_Receive_OFF_State = COMMAND_LENGTH2;
 80073ae:	4ba3      	ldr	r3, [pc, #652]	; (800763c <IR_Receive_Process_OFF+0x378>)
 80073b0:	2204      	movs	r2, #4
 80073b2:	701a      	strb	r2, [r3, #0]
				count = 0;
				// Delay_us(1000);
			}
		}

		break;
 80073b4:	e207      	b.n	80077c6 <IR_Receive_Process_OFF+0x502>
			finish++; // finish = 1;
 80073b6:	4ba5      	ldr	r3, [pc, #660]	; (800764c <IR_Receive_Process_OFF+0x388>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	4ba3      	ldr	r3, [pc, #652]	; (800764c <IR_Receive_Process_OFF+0x388>)
 80073be:	601a      	str	r2, [r3, #0]
			if (finish >= 200)
 80073c0:	4ba2      	ldr	r3, [pc, #648]	; (800764c <IR_Receive_Process_OFF+0x388>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2bc7      	cmp	r3, #199	; 0xc7
 80073c6:	dc00      	bgt.n	80073ca <IR_Receive_Process_OFF+0x106>
 80073c8:	e1fd      	b.n	80077c6 <IR_Receive_Process_OFF+0x502>
				IR_Receive_OFF_State = IDLE2;
 80073ca:	4b9c      	ldr	r3, [pc, #624]	; (800763c <IR_Receive_Process_OFF+0x378>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	701a      	strb	r2, [r3, #0]
				Send_Command_Data((uint32_t*)code_OFF, receive_index_k, 0);
 80073d0:	4b9d      	ldr	r3, [pc, #628]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	4ba3      	ldr	r3, [pc, #652]	; (8007664 <IR_Receive_Process_OFF+0x3a0>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	0018      	movs	r0, r3
 80073da:	f006 fc8b 	bl	800dcf4 <Send_Command_Data>
				for (int i = 0; i < 8; i++)
 80073de:	2300      	movs	r3, #0
 80073e0:	22ba      	movs	r2, #186	; 0xba
 80073e2:	0052      	lsls	r2, r2, #1
 80073e4:	2128      	movs	r1, #40	; 0x28
 80073e6:	1852      	adds	r2, r2, r1
 80073e8:	19d2      	adds	r2, r2, r7
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	e05a      	b.n	80074a4 <IR_Receive_Process_OFF+0x1e0>
					uint8_t temp_half_byte = (code_OFF[0] >> (28 - 4 * i)) & 0x0F;
 80073ee:	4b9d      	ldr	r3, [pc, #628]	; (8007664 <IR_Receive_Process_OFF+0x3a0>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	21ba      	movs	r1, #186	; 0xba
 80073f6:	0049      	lsls	r1, r1, #1
 80073f8:	2028      	movs	r0, #40	; 0x28
 80073fa:	1809      	adds	r1, r1, r0
 80073fc:	19c9      	adds	r1, r1, r7
 80073fe:	6809      	ldr	r1, [r1, #0]
 8007400:	2007      	movs	r0, #7
 8007402:	1a41      	subs	r1, r0, r1
 8007404:	0089      	lsls	r1, r1, #2
 8007406:	0008      	movs	r0, r1
 8007408:	3820      	subs	r0, #32
 800740a:	2800      	cmp	r0, #0
 800740c:	db03      	blt.n	8007416 <IR_Receive_Process_OFF+0x152>
 800740e:	001e      	movs	r6, r3
 8007410:	40c6      	lsrs	r6, r0
 8007412:	0034      	movs	r4, r6
 8007414:	e008      	b.n	8007428 <IR_Receive_Process_OFF+0x164>
 8007416:	2020      	movs	r0, #32
 8007418:	1a40      	subs	r0, r0, r1
 800741a:	001e      	movs	r6, r3
 800741c:	4086      	lsls	r6, r0
 800741e:	0030      	movs	r0, r6
 8007420:	0016      	movs	r6, r2
 8007422:	40ce      	lsrs	r6, r1
 8007424:	0034      	movs	r4, r6
 8007426:	4304      	orrs	r4, r0
 8007428:	40cb      	lsrs	r3, r1
 800742a:	001d      	movs	r5, r3
 800742c:	b2e2      	uxtb	r2, r4
 800742e:	2070      	movs	r0, #112	; 0x70
 8007430:	30ff      	adds	r0, #255	; 0xff
 8007432:	2628      	movs	r6, #40	; 0x28
 8007434:	1983      	adds	r3, r0, r6
 8007436:	19db      	adds	r3, r3, r7
 8007438:	210f      	movs	r1, #15
 800743a:	400a      	ands	r2, r1
 800743c:	701a      	strb	r2, [r3, #0]
					if (temp_half_byte > 9)
 800743e:	0002      	movs	r2, r0
 8007440:	0030      	movs	r0, r6
 8007442:	1813      	adds	r3, r2, r0
 8007444:	19db      	adds	r3, r3, r7
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b09      	cmp	r3, #9
 800744a:	d90f      	bls.n	800746c <IR_Receive_Process_OFF+0x1a8>
						pcb_config.sSetIROFF[i] = temp_half_byte + '7';
 800744c:	1813      	adds	r3, r2, r0
 800744e:	19db      	adds	r3, r3, r7
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	3337      	adds	r3, #55	; 0x37
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	4a84      	ldr	r2, [pc, #528]	; (8007668 <IR_Receive_Process_OFF+0x3a4>)
 8007458:	23ba      	movs	r3, #186	; 0xba
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	181b      	adds	r3, r3, r0
 800745e:	19db      	adds	r3, r3, r7
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	18d3      	adds	r3, r2, r3
 8007464:	3313      	adds	r3, #19
 8007466:	1c0a      	adds	r2, r1, #0
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e011      	b.n	8007490 <IR_Receive_Process_OFF+0x1cc>
						pcb_config.sSetIROFF[i] = temp_half_byte + '0';
 800746c:	2370      	movs	r3, #112	; 0x70
 800746e:	33ff      	adds	r3, #255	; 0xff
 8007470:	2028      	movs	r0, #40	; 0x28
 8007472:	181b      	adds	r3, r3, r0
 8007474:	19db      	adds	r3, r3, r7
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	3330      	adds	r3, #48	; 0x30
 800747a:	b2d9      	uxtb	r1, r3
 800747c:	4a7a      	ldr	r2, [pc, #488]	; (8007668 <IR_Receive_Process_OFF+0x3a4>)
 800747e:	23ba      	movs	r3, #186	; 0xba
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	181b      	adds	r3, r3, r0
 8007484:	19db      	adds	r3, r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	18d3      	adds	r3, r2, r3
 800748a:	3313      	adds	r3, #19
 800748c:	1c0a      	adds	r2, r1, #0
 800748e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8007490:	22ba      	movs	r2, #186	; 0xba
 8007492:	0052      	lsls	r2, r2, #1
 8007494:	2128      	movs	r1, #40	; 0x28
 8007496:	1853      	adds	r3, r2, r1
 8007498:	19db      	adds	r3, r3, r7
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	1852      	adds	r2, r2, r1
 80074a0:	19d2      	adds	r2, r2, r7
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	23ba      	movs	r3, #186	; 0xba
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	2228      	movs	r2, #40	; 0x28
 80074aa:	189b      	adds	r3, r3, r2
 80074ac:	19db      	adds	r3, r3, r7
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b07      	cmp	r3, #7
 80074b2:	dd9c      	ble.n	80073ee <IR_Receive_Process_OFF+0x12a>
				if (tv_type == 1)
 80074b4:	4b69      	ldr	r3, [pc, #420]	; (800765c <IR_Receive_Process_OFF+0x398>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d104      	bne.n	80074c6 <IR_Receive_Process_OFF+0x202>
					pcb_config.tvtype[0] = '1';
 80074bc:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <IR_Receive_Process_OFF+0x3a4>)
 80074be:	22f2      	movs	r2, #242	; 0xf2
 80074c0:	2131      	movs	r1, #49	; 0x31
 80074c2:	5499      	strb	r1, [r3, r2]
 80074c4:	e003      	b.n	80074ce <IR_Receive_Process_OFF+0x20a>
					pcb_config.tvtype[0] = '0';
 80074c6:	4b68      	ldr	r3, [pc, #416]	; (8007668 <IR_Receive_Process_OFF+0x3a4>)
 80074c8:	22f2      	movs	r2, #242	; 0xf2
 80074ca:	2130      	movs	r1, #48	; 0x30
 80074cc:	5499      	strb	r1, [r3, r2]
				vptr_test = &pcb_config;
 80074ce:	4b67      	ldr	r3, [pc, #412]	; (800766c <IR_Receive_Process_OFF+0x3a8>)
 80074d0:	4a65      	ldr	r2, [pc, #404]	; (8007668 <IR_Receive_Process_OFF+0x3a4>)
 80074d2:	601a      	str	r2, [r3, #0]
				memcpy(buffer, vptr_test, sizeof(pcb_config));
 80074d4:	4b65      	ldr	r3, [pc, #404]	; (800766c <IR_Receive_Process_OFF+0x3a8>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4b65      	ldr	r3, [pc, #404]	; (8007670 <IR_Receive_Process_OFF+0x3ac>)
 80074da:	21bc      	movs	r1, #188	; 0xbc
 80074dc:	0049      	lsls	r1, r1, #1
 80074de:	185b      	adds	r3, r3, r1
 80074e0:	2128      	movs	r1, #40	; 0x28
 80074e2:	468c      	mov	ip, r1
 80074e4:	44bc      	add	ip, r7
 80074e6:	4463      	add	r3, ip
 80074e8:	0018      	movs	r0, r3
 80074ea:	0011      	movs	r1, r2
 80074ec:	23b6      	movs	r3, #182	; 0xb6
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	001a      	movs	r2, r3
 80074f2:	f01c fa39 	bl	8023968 <memcpy>
				HAL_Delay(10);
 80074f6:	200a      	movs	r0, #10
 80074f8:	f007 ff56 	bl	800f3a8 <HAL_Delay>
				receive_index_k_saved = receive_index_k;
 80074fc:	4b52      	ldr	r3, [pc, #328]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	4b5c      	ldr	r3, [pc, #368]	; (8007674 <IR_Receive_Process_OFF+0x3b0>)
 8007502:	601a      	str	r2, [r3, #0]
				HAL_Delay(1000);
 8007504:	23fa      	movs	r3, #250	; 0xfa
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	0018      	movs	r0, r3
 800750a:	f007 ff4d 	bl	800f3a8 <HAL_Delay>
				index_loop = 0;
 800750e:	4b4d      	ldr	r3, [pc, #308]	; (8007644 <IR_Receive_Process_OFF+0x380>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]
				receive_index_k = 0;
 8007514:	4b4c      	ldr	r3, [pc, #304]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
				finish = 0;
 800751a:	4b4c      	ldr	r3, [pc, #304]	; (800764c <IR_Receive_Process_OFF+0x388>)
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
				count = 0;
 8007520:	4b4b      	ldr	r3, [pc, #300]	; (8007650 <IR_Receive_Process_OFF+0x38c>)
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
		break;
 8007526:	e14e      	b.n	80077c6 <IR_Receive_Process_OFF+0x502>

	case COMMAND_LENGTH2:
		if (HAL_GPIO_ReadPin(IR_IN_GPIO_Port, IR_IN_Pin) == 1)
 8007528:	23a0      	movs	r3, #160	; 0xa0
 800752a:	05db      	lsls	r3, r3, #23
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	0018      	movs	r0, r3
 8007530:	f009 fdfa 	bl	8011128 <HAL_GPIO_ReadPin>
 8007534:	0003      	movs	r3, r0
 8007536:	2b01      	cmp	r3, #1
 8007538:	d109      	bne.n	800754e <IR_Receive_Process_OFF+0x28a>
		{
			count++;
 800753a:	4b45      	ldr	r3, [pc, #276]	; (8007650 <IR_Receive_Process_OFF+0x38c>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	3301      	adds	r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	4b43      	ldr	r3, [pc, #268]	; (8007650 <IR_Receive_Process_OFF+0x38c>)
 8007544:	701a      	strb	r2, [r3, #0]
			Delay_us(100);
 8007546:	2064      	movs	r0, #100	; 0x64
 8007548:	f7fe fd64 	bl	8006014 <Delay_us>
				count = 0;
				timestamp_IR_OFF = HAL_GetTick();
			}
		}

		break;
 800754c:	e13c      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>
			if (count > 12) // if the space is more than 1.2 ms
 800754e:	4b40      	ldr	r3, [pc, #256]	; (8007650 <IR_Receive_Process_OFF+0x38c>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b0c      	cmp	r3, #12
 8007554:	d921      	bls.n	800759a <IR_Receive_Process_OFF+0x2d6>
				code_OFF[receive_index_k] |= (1UL << (31 - index_loop)); // write 1
 8007556:	4b3c      	ldr	r3, [pc, #240]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a42      	ldr	r2, [pc, #264]	; (8007664 <IR_Receive_Process_OFF+0x3a0>)
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4937      	ldr	r1, [pc, #220]	; (8007644 <IR_Receive_Process_OFF+0x380>)
 8007566:	6809      	ldr	r1, [r1, #0]
 8007568:	2080      	movs	r0, #128	; 0x80
 800756a:	0600      	lsls	r0, r0, #24
 800756c:	40c8      	lsrs	r0, r1
 800756e:	0001      	movs	r1, r0
 8007570:	61b9      	str	r1, [r7, #24]
 8007572:	2100      	movs	r1, #0
 8007574:	61f9      	str	r1, [r7, #28]
 8007576:	4934      	ldr	r1, [pc, #208]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 8007578:	6809      	ldr	r1, [r1, #0]
 800757a:	69bc      	ldr	r4, [r7, #24]
 800757c:	69fd      	ldr	r5, [r7, #28]
 800757e:	0020      	movs	r0, r4
 8007580:	4310      	orrs	r0, r2
 8007582:	6138      	str	r0, [r7, #16]
 8007584:	0028      	movs	r0, r5
 8007586:	4318      	orrs	r0, r3
 8007588:	6178      	str	r0, [r7, #20]
 800758a:	4a36      	ldr	r2, [pc, #216]	; (8007664 <IR_Receive_Process_OFF+0x3a0>)
 800758c:	00cb      	lsls	r3, r1, #3
 800758e:	18d3      	adds	r3, r2, r3
 8007590:	6939      	ldr	r1, [r7, #16]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	6019      	str	r1, [r3, #0]
 8007596:	605a      	str	r2, [r3, #4]
 8007598:	e021      	b.n	80075de <IR_Receive_Process_OFF+0x31a>
				code_OFF[receive_index_k] &= ~(1UL << (31 - index_loop)); // write 0
 800759a:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a31      	ldr	r2, [pc, #196]	; (8007664 <IR_Receive_Process_OFF+0x3a0>)
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	18d3      	adds	r3, r2, r3
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	4926      	ldr	r1, [pc, #152]	; (8007644 <IR_Receive_Process_OFF+0x380>)
 80075aa:	6809      	ldr	r1, [r1, #0]
 80075ac:	2080      	movs	r0, #128	; 0x80
 80075ae:	0600      	lsls	r0, r0, #24
 80075b0:	40c8      	lsrs	r0, r1
 80075b2:	0001      	movs	r1, r0
 80075b4:	43c9      	mvns	r1, r1
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	2100      	movs	r1, #0
 80075ba:	60f9      	str	r1, [r7, #12]
 80075bc:	4922      	ldr	r1, [pc, #136]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 80075be:	6809      	ldr	r1, [r1, #0]
 80075c0:	68bc      	ldr	r4, [r7, #8]
 80075c2:	68fd      	ldr	r5, [r7, #12]
 80075c4:	0020      	movs	r0, r4
 80075c6:	4010      	ands	r0, r2
 80075c8:	6038      	str	r0, [r7, #0]
 80075ca:	0028      	movs	r0, r5
 80075cc:	4018      	ands	r0, r3
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	4a24      	ldr	r2, [pc, #144]	; (8007664 <IR_Receive_Process_OFF+0x3a0>)
 80075d2:	00cb      	lsls	r3, r1, #3
 80075d4:	18d3      	adds	r3, r2, r3
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6019      	str	r1, [r3, #0]
 80075dc:	605a      	str	r2, [r3, #4]
			finish = 0;
 80075de:	4b1b      	ldr	r3, [pc, #108]	; (800764c <IR_Receive_Process_OFF+0x388>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
			if (index_loop == 32 && receive_index_k != MAX_NUMBER) // if (index_loop == 32)
 80075e4:	4b17      	ldr	r3, [pc, #92]	; (8007644 <IR_Receive_Process_OFF+0x380>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d000      	beq.n	80075ee <IR_Receive_Process_OFF+0x32a>
 80075ec:	e0da      	b.n	80077a4 <IR_Receive_Process_OFF+0x4e0>
 80075ee:	4b16      	ldr	r3, [pc, #88]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d100      	bne.n	80075f8 <IR_Receive_Process_OFF+0x334>
 80075f6:	e0d5      	b.n	80077a4 <IR_Receive_Process_OFF+0x4e0>
				receive_index_k++;
 80075f8:	4b13      	ldr	r3, [pc, #76]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 8007600:	601a      	str	r2, [r3, #0]
				index_loop = 0;
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <IR_Receive_Process_OFF+0x380>)
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
				IR_Receive_OFF_State = WAIT2;
 8007608:	4b0c      	ldr	r3, [pc, #48]	; (800763c <IR_Receive_Process_OFF+0x378>)
 800760a:	2205      	movs	r2, #5
 800760c:	701a      	strb	r2, [r3, #0]
				IR_Receive_OFF_State = IDLE2;
 800760e:	4b0b      	ldr	r3, [pc, #44]	; (800763c <IR_Receive_Process_OFF+0x378>)
 8007610:	2201      	movs	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
				Send_Command_Data((uint32_t*)code_OFF, receive_index_k, 0);
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 8007616:	6819      	ldr	r1, [r3, #0]
 8007618:	4b12      	ldr	r3, [pc, #72]	; (8007664 <IR_Receive_Process_OFF+0x3a0>)
 800761a:	2200      	movs	r2, #0
 800761c:	0018      	movs	r0, r3
 800761e:	f006 fb69 	bl	800dcf4 <Send_Command_Data>
				receive_index_k_saved = receive_index_k;
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <IR_Receive_Process_OFF+0x384>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <IR_Receive_Process_OFF+0x3b0>)
 8007628:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	22b8      	movs	r2, #184	; 0xb8
 800762e:	0052      	lsls	r2, r2, #1
 8007630:	2128      	movs	r1, #40	; 0x28
 8007632:	1852      	adds	r2, r2, r1
 8007634:	19d2      	adds	r2, r2, r7
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	e07d      	b.n	8007736 <IR_Receive_Process_OFF+0x472>
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	20006758 	.word	0x20006758
 8007640:	08031b08 	.word	0x08031b08
 8007644:	20006744 	.word	0x20006744
 8007648:	20006730 	.word	0x20006730
 800764c:	20006740 	.word	0x20006740
 8007650:	2000673c 	.word	0x2000673c
 8007654:	20006734 	.word	0x20006734
 8007658:	20006738 	.word	0x20006738
 800765c:	20005018 	.word	0x20005018
 8007660:	20006750 	.word	0x20006750
 8007664:	20006728 	.word	0x20006728
 8007668:	20006db4 	.word	0x20006db4
 800766c:	20006d88 	.word	0x20006d88
 8007670:	fffffe88 	.word	0xfffffe88
 8007674:	20005004 	.word	0x20005004
					uint8_t temp_half_byte = (code_OFF[0] >> (28 - 4 * i)) & 0x0F;
 8007678:	4b55      	ldr	r3, [pc, #340]	; (80077d0 <IR_Receive_Process_OFF+0x50c>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	21b8      	movs	r1, #184	; 0xb8
 8007680:	0049      	lsls	r1, r1, #1
 8007682:	2028      	movs	r0, #40	; 0x28
 8007684:	1809      	adds	r1, r1, r0
 8007686:	19c9      	adds	r1, r1, r7
 8007688:	6809      	ldr	r1, [r1, #0]
 800768a:	2007      	movs	r0, #7
 800768c:	1a41      	subs	r1, r0, r1
 800768e:	0089      	lsls	r1, r1, #2
 8007690:	0008      	movs	r0, r1
 8007692:	3820      	subs	r0, #32
 8007694:	2800      	cmp	r0, #0
 8007696:	db03      	blt.n	80076a0 <IR_Receive_Process_OFF+0x3dc>
 8007698:	001c      	movs	r4, r3
 800769a:	40c4      	lsrs	r4, r0
 800769c:	623c      	str	r4, [r7, #32]
 800769e:	e00a      	b.n	80076b6 <IR_Receive_Process_OFF+0x3f2>
 80076a0:	2020      	movs	r0, #32
 80076a2:	1a40      	subs	r0, r0, r1
 80076a4:	001c      	movs	r4, r3
 80076a6:	4084      	lsls	r4, r0
 80076a8:	0020      	movs	r0, r4
 80076aa:	0014      	movs	r4, r2
 80076ac:	40cc      	lsrs	r4, r1
 80076ae:	623c      	str	r4, [r7, #32]
 80076b0:	6a3c      	ldr	r4, [r7, #32]
 80076b2:	4304      	orrs	r4, r0
 80076b4:	623c      	str	r4, [r7, #32]
 80076b6:	40cb      	lsrs	r3, r1
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ba:	2320      	movs	r3, #32
 80076bc:	18fb      	adds	r3, r7, r3
 80076be:	781a      	ldrb	r2, [r3, #0]
 80076c0:	20b7      	movs	r0, #183	; 0xb7
 80076c2:	0040      	lsls	r0, r0, #1
 80076c4:	2428      	movs	r4, #40	; 0x28
 80076c6:	1903      	adds	r3, r0, r4
 80076c8:	19db      	adds	r3, r3, r7
 80076ca:	210f      	movs	r1, #15
 80076cc:	400a      	ands	r2, r1
 80076ce:	701a      	strb	r2, [r3, #0]
					if (temp_half_byte > 9)
 80076d0:	0002      	movs	r2, r0
 80076d2:	0020      	movs	r0, r4
 80076d4:	1813      	adds	r3, r2, r0
 80076d6:	19db      	adds	r3, r3, r7
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d90f      	bls.n	80076fe <IR_Receive_Process_OFF+0x43a>
						pcb_config.sSetIROFF[i] = temp_half_byte + '7';
 80076de:	1813      	adds	r3, r2, r0
 80076e0:	19db      	adds	r3, r3, r7
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	3337      	adds	r3, #55	; 0x37
 80076e6:	b2d9      	uxtb	r1, r3
 80076e8:	4a3a      	ldr	r2, [pc, #232]	; (80077d4 <IR_Receive_Process_OFF+0x510>)
 80076ea:	23b8      	movs	r3, #184	; 0xb8
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	181b      	adds	r3, r3, r0
 80076f0:	19db      	adds	r3, r3, r7
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	18d3      	adds	r3, r2, r3
 80076f6:	3313      	adds	r3, #19
 80076f8:	1c0a      	adds	r2, r1, #0
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	e011      	b.n	8007722 <IR_Receive_Process_OFF+0x45e>
						pcb_config.sSetIROFF[i] = temp_half_byte + '0';
 80076fe:	23b7      	movs	r3, #183	; 0xb7
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	2028      	movs	r0, #40	; 0x28
 8007704:	181b      	adds	r3, r3, r0
 8007706:	19db      	adds	r3, r3, r7
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	3330      	adds	r3, #48	; 0x30
 800770c:	b2d9      	uxtb	r1, r3
 800770e:	4a31      	ldr	r2, [pc, #196]	; (80077d4 <IR_Receive_Process_OFF+0x510>)
 8007710:	23b8      	movs	r3, #184	; 0xb8
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	181b      	adds	r3, r3, r0
 8007716:	19db      	adds	r3, r3, r7
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	18d3      	adds	r3, r2, r3
 800771c:	3313      	adds	r3, #19
 800771e:	1c0a      	adds	r2, r1, #0
 8007720:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8007722:	22b8      	movs	r2, #184	; 0xb8
 8007724:	0052      	lsls	r2, r2, #1
 8007726:	2128      	movs	r1, #40	; 0x28
 8007728:	1853      	adds	r3, r2, r1
 800772a:	19db      	adds	r3, r3, r7
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	1852      	adds	r2, r2, r1
 8007732:	19d2      	adds	r2, r2, r7
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	23b8      	movs	r3, #184	; 0xb8
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	2228      	movs	r2, #40	; 0x28
 800773c:	189b      	adds	r3, r3, r2
 800773e:	19db      	adds	r3, r3, r7
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b07      	cmp	r3, #7
 8007744:	dd98      	ble.n	8007678 <IR_Receive_Process_OFF+0x3b4>
				if (tv_type == 1)
 8007746:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <IR_Receive_Process_OFF+0x514>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d104      	bne.n	8007758 <IR_Receive_Process_OFF+0x494>
					pcb_config.tvtype[0] = '1';
 800774e:	4b21      	ldr	r3, [pc, #132]	; (80077d4 <IR_Receive_Process_OFF+0x510>)
 8007750:	22f2      	movs	r2, #242	; 0xf2
 8007752:	2131      	movs	r1, #49	; 0x31
 8007754:	5499      	strb	r1, [r3, r2]
 8007756:	e003      	b.n	8007760 <IR_Receive_Process_OFF+0x49c>
					pcb_config.tvtype[0] = '0';
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <IR_Receive_Process_OFF+0x510>)
 800775a:	22f2      	movs	r2, #242	; 0xf2
 800775c:	2130      	movs	r1, #48	; 0x30
 800775e:	5499      	strb	r1, [r3, r2]
				vptr_test = &pcb_config;
 8007760:	4b1e      	ldr	r3, [pc, #120]	; (80077dc <IR_Receive_Process_OFF+0x518>)
 8007762:	4a1c      	ldr	r2, [pc, #112]	; (80077d4 <IR_Receive_Process_OFF+0x510>)
 8007764:	601a      	str	r2, [r3, #0]
				memcpy(buffer, vptr_test, sizeof(pcb_config));
 8007766:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <IR_Receive_Process_OFF+0x518>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <IR_Receive_Process_OFF+0x51c>)
 800776c:	21bc      	movs	r1, #188	; 0xbc
 800776e:	0049      	lsls	r1, r1, #1
 8007770:	185b      	adds	r3, r3, r1
 8007772:	2128      	movs	r1, #40	; 0x28
 8007774:	468c      	mov	ip, r1
 8007776:	44bc      	add	ip, r7
 8007778:	4463      	add	r3, ip
 800777a:	0018      	movs	r0, r3
 800777c:	0011      	movs	r1, r2
 800777e:	23b6      	movs	r3, #182	; 0xb6
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	001a      	movs	r2, r3
 8007784:	f01c f8f0 	bl	8023968 <memcpy>
				HAL_Delay(10);
 8007788:	200a      	movs	r0, #10
 800778a:	f007 fe0d 	bl	800f3a8 <HAL_Delay>
				index_loop = 0;
 800778e:	4b15      	ldr	r3, [pc, #84]	; (80077e4 <IR_Receive_Process_OFF+0x520>)
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
				receive_index_k = 0;
 8007794:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <IR_Receive_Process_OFF+0x524>)
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
				finish = 0;
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <IR_Receive_Process_OFF+0x528>)
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
			{
 80077a0:	46c0      	nop			; (mov r8, r8)
		break;
 80077a2:	e011      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>
				index_loop++;
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <IR_Receive_Process_OFF+0x520>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <IR_Receive_Process_OFF+0x520>)
 80077ac:	601a      	str	r2, [r3, #0]
				IR_Receive_OFF_State = WAIT2;
 80077ae:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <IR_Receive_Process_OFF+0x52c>)
 80077b0:	2205      	movs	r2, #5
 80077b2:	701a      	strb	r2, [r3, #0]
				count = 0;
 80077b4:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <IR_Receive_Process_OFF+0x530>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
				timestamp_IR_OFF = HAL_GetTick();
 80077ba:	f007 fdeb 	bl	800f394 <HAL_GetTick>
 80077be:	0002      	movs	r2, r0
 80077c0:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <IR_Receive_Process_OFF+0x534>)
 80077c2:	601a      	str	r2, [r3, #0]
		break;
 80077c4:	e000      	b.n	80077c8 <IR_Receive_Process_OFF+0x504>
		break;
 80077c6:	46c0      	nop			; (mov r8, r8)
	}
}
 80077c8:	46c0      	nop			; (mov r8, r8)
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b069      	add	sp, #420	; 0x1a4
 80077ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d0:	20006728 	.word	0x20006728
 80077d4:	20006db4 	.word	0x20006db4
 80077d8:	20005018 	.word	0x20005018
 80077dc:	20006d88 	.word	0x20006d88
 80077e0:	fffffe88 	.word	0xfffffe88
 80077e4:	20006744 	.word	0x20006744
 80077e8:	20006730 	.word	0x20006730
 80077ec:	20006740 	.word	0x20006740
 80077f0:	20006758 	.word	0x20006758
 80077f4:	2000673c 	.word	0x2000673c
 80077f8:	20006750 	.word	0x20006750

080077fc <Set_tv_protocol>:
#include "Protocol.h"

struct tv_protocol tv_protocol[7];

void Set_tv_protocol()
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
	int index = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]

	// SAMSUNG 0
	tv_protocol[index].tv_type = index;
 8007806:	4bfe      	ldr	r3, [pc, #1016]	; (8007c00 <Set_tv_protocol+0x404>)
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	212c      	movs	r1, #44	; 0x2c
 800780c:	434a      	muls	r2, r1
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	50d1      	str	r1, [r2, r3]
	tv_protocol[index].time_Unit = 560;
 8007812:	4afb      	ldr	r2, [pc, #1004]	; (8007c00 <Set_tv_protocol+0x404>)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	212c      	movs	r1, #44	; 0x2c
 8007818:	434b      	muls	r3, r1
 800781a:	18d3      	adds	r3, r2, r3
 800781c:	3304      	adds	r3, #4
 800781e:	228c      	movs	r2, #140	; 0x8c
 8007820:	0092      	lsls	r2, r2, #2
 8007822:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_on = 1;
 8007824:	4af6      	ldr	r2, [pc, #984]	; (8007c00 <Set_tv_protocol+0x404>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	212c      	movs	r1, #44	; 0x2c
 800782a:	434b      	muls	r3, r1
 800782c:	18d3      	adds	r3, r2, r3
 800782e:	3308      	adds	r3, #8
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_off = 1;
 8007834:	4af2      	ldr	r2, [pc, #968]	; (8007c00 <Set_tv_protocol+0x404>)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	212c      	movs	r1, #44	; 0x2c
 800783a:	434b      	muls	r3, r1
 800783c:	18d3      	adds	r3, r2, r3
 800783e:	330c      	adds	r3, #12
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_on = 1;
 8007844:	4aee      	ldr	r2, [pc, #952]	; (8007c00 <Set_tv_protocol+0x404>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	212c      	movs	r1, #44	; 0x2c
 800784a:	434b      	muls	r3, r1
 800784c:	18d3      	adds	r3, r2, r3
 800784e:	3310      	adds	r3, #16
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_off = 3;
 8007854:	4aea      	ldr	r2, [pc, #936]	; (8007c00 <Set_tv_protocol+0x404>)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	212c      	movs	r1, #44	; 0x2c
 800785a:	434b      	muls	r3, r1
 800785c:	18d3      	adds	r3, r2, r3
 800785e:	3314      	adds	r3, #20
 8007860:	2203      	movs	r2, #3
 8007862:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_on = 16;
 8007864:	4ae6      	ldr	r2, [pc, #920]	; (8007c00 <Set_tv_protocol+0x404>)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	212c      	movs	r1, #44	; 0x2c
 800786a:	434b      	muls	r3, r1
 800786c:	18d3      	adds	r3, r2, r3
 800786e:	3318      	adds	r3, #24
 8007870:	2210      	movs	r2, #16
 8007872:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_off = 8;
 8007874:	4ae2      	ldr	r2, [pc, #904]	; (8007c00 <Set_tv_protocol+0x404>)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	212c      	movs	r1, #44	; 0x2c
 800787a:	434b      	muls	r3, r1
 800787c:	18d3      	adds	r3, r2, r3
 800787e:	331c      	adds	r3, #28
 8007880:	2208      	movs	r2, #8
 8007882:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_on = 1;
 8007884:	4ade      	ldr	r2, [pc, #888]	; (8007c00 <Set_tv_protocol+0x404>)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	212c      	movs	r1, #44	; 0x2c
 800788a:	434b      	muls	r3, r1
 800788c:	18d3      	adds	r3, r2, r3
 800788e:	3320      	adds	r3, #32
 8007890:	2201      	movs	r2, #1
 8007892:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_off = 1;
 8007894:	4ada      	ldr	r2, [pc, #872]	; (8007c00 <Set_tv_protocol+0x404>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	212c      	movs	r1, #44	; 0x2c
 800789a:	434b      	muls	r3, r1
 800789c:	18d3      	adds	r3, r2, r3
 800789e:	3324      	adds	r3, #36	; 0x24
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
	tv_protocol[index].data_Length = 32;
 80078a4:	4ad6      	ldr	r2, [pc, #856]	; (8007c00 <Set_tv_protocol+0x404>)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	212c      	movs	r1, #44	; 0x2c
 80078aa:	434b      	muls	r3, r1
 80078ac:	18d3      	adds	r3, r2, r3
 80078ae:	3328      	adds	r3, #40	; 0x28
 80078b0:	2220      	movs	r2, #32
 80078b2:	601a      	str	r2, [r3, #0]
	index++;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3301      	adds	r3, #1
 80078b8:	607b      	str	r3, [r7, #4]

	// LG NEC1 1
	tv_protocol[index].tv_type = index;
 80078ba:	4bd1      	ldr	r3, [pc, #836]	; (8007c00 <Set_tv_protocol+0x404>)
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	212c      	movs	r1, #44	; 0x2c
 80078c0:	434a      	muls	r2, r1
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	50d1      	str	r1, [r2, r3]
	tv_protocol[index].time_Unit = 560;
 80078c6:	4ace      	ldr	r2, [pc, #824]	; (8007c00 <Set_tv_protocol+0x404>)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	212c      	movs	r1, #44	; 0x2c
 80078cc:	434b      	muls	r3, r1
 80078ce:	18d3      	adds	r3, r2, r3
 80078d0:	3304      	adds	r3, #4
 80078d2:	228c      	movs	r2, #140	; 0x8c
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_on = 1;
 80078d8:	4ac9      	ldr	r2, [pc, #804]	; (8007c00 <Set_tv_protocol+0x404>)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	212c      	movs	r1, #44	; 0x2c
 80078de:	434b      	muls	r3, r1
 80078e0:	18d3      	adds	r3, r2, r3
 80078e2:	3308      	adds	r3, #8
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_off = 1;
 80078e8:	4ac5      	ldr	r2, [pc, #788]	; (8007c00 <Set_tv_protocol+0x404>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	212c      	movs	r1, #44	; 0x2c
 80078ee:	434b      	muls	r3, r1
 80078f0:	18d3      	adds	r3, r2, r3
 80078f2:	330c      	adds	r3, #12
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_on = 1;
 80078f8:	4ac1      	ldr	r2, [pc, #772]	; (8007c00 <Set_tv_protocol+0x404>)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	212c      	movs	r1, #44	; 0x2c
 80078fe:	434b      	muls	r3, r1
 8007900:	18d3      	adds	r3, r2, r3
 8007902:	3310      	adds	r3, #16
 8007904:	2201      	movs	r2, #1
 8007906:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_off = 3;
 8007908:	4abd      	ldr	r2, [pc, #756]	; (8007c00 <Set_tv_protocol+0x404>)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	212c      	movs	r1, #44	; 0x2c
 800790e:	434b      	muls	r3, r1
 8007910:	18d3      	adds	r3, r2, r3
 8007912:	3314      	adds	r3, #20
 8007914:	2203      	movs	r2, #3
 8007916:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_on = 8;
 8007918:	4ab9      	ldr	r2, [pc, #740]	; (8007c00 <Set_tv_protocol+0x404>)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	212c      	movs	r1, #44	; 0x2c
 800791e:	434b      	muls	r3, r1
 8007920:	18d3      	adds	r3, r2, r3
 8007922:	3318      	adds	r3, #24
 8007924:	2208      	movs	r2, #8
 8007926:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_off = 8;
 8007928:	4ab5      	ldr	r2, [pc, #724]	; (8007c00 <Set_tv_protocol+0x404>)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	212c      	movs	r1, #44	; 0x2c
 800792e:	434b      	muls	r3, r1
 8007930:	18d3      	adds	r3, r2, r3
 8007932:	331c      	adds	r3, #28
 8007934:	2208      	movs	r2, #8
 8007936:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_on = 1;
 8007938:	4ab1      	ldr	r2, [pc, #708]	; (8007c00 <Set_tv_protocol+0x404>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	212c      	movs	r1, #44	; 0x2c
 800793e:	434b      	muls	r3, r1
 8007940:	18d3      	adds	r3, r2, r3
 8007942:	3320      	adds	r3, #32
 8007944:	2201      	movs	r2, #1
 8007946:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_off = 1;
 8007948:	4aad      	ldr	r2, [pc, #692]	; (8007c00 <Set_tv_protocol+0x404>)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	212c      	movs	r1, #44	; 0x2c
 800794e:	434b      	muls	r3, r1
 8007950:	18d3      	adds	r3, r2, r3
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	2201      	movs	r2, #1
 8007956:	601a      	str	r2, [r3, #0]
	tv_protocol[index].data_Length = 32;
 8007958:	4aa9      	ldr	r2, [pc, #676]	; (8007c00 <Set_tv_protocol+0x404>)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	212c      	movs	r1, #44	; 0x2c
 800795e:	434b      	muls	r3, r1
 8007960:	18d3      	adds	r3, r2, r3
 8007962:	3328      	adds	r3, #40	; 0x28
 8007964:	2220      	movs	r2, #32
 8007966:	601a      	str	r2, [r3, #0]
	index++;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3301      	adds	r3, #1
 800796c:	607b      	str	r3, [r7, #4]

	// PANASONIC 2
	tv_protocol[index].tv_type = index;
 800796e:	4ba4      	ldr	r3, [pc, #656]	; (8007c00 <Set_tv_protocol+0x404>)
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	212c      	movs	r1, #44	; 0x2c
 8007974:	434a      	muls	r2, r1
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	50d1      	str	r1, [r2, r3]
	tv_protocol[index].time_Unit = 432;
 800797a:	4aa1      	ldr	r2, [pc, #644]	; (8007c00 <Set_tv_protocol+0x404>)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	212c      	movs	r1, #44	; 0x2c
 8007980:	434b      	muls	r3, r1
 8007982:	18d3      	adds	r3, r2, r3
 8007984:	3304      	adds	r3, #4
 8007986:	22d8      	movs	r2, #216	; 0xd8
 8007988:	0052      	lsls	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_on = 1;
 800798c:	4a9c      	ldr	r2, [pc, #624]	; (8007c00 <Set_tv_protocol+0x404>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	212c      	movs	r1, #44	; 0x2c
 8007992:	434b      	muls	r3, r1
 8007994:	18d3      	adds	r3, r2, r3
 8007996:	3308      	adds	r3, #8
 8007998:	2201      	movs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_off = 1;
 800799c:	4a98      	ldr	r2, [pc, #608]	; (8007c00 <Set_tv_protocol+0x404>)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	212c      	movs	r1, #44	; 0x2c
 80079a2:	434b      	muls	r3, r1
 80079a4:	18d3      	adds	r3, r2, r3
 80079a6:	330c      	adds	r3, #12
 80079a8:	2201      	movs	r2, #1
 80079aa:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_on = 1;
 80079ac:	4a94      	ldr	r2, [pc, #592]	; (8007c00 <Set_tv_protocol+0x404>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	212c      	movs	r1, #44	; 0x2c
 80079b2:	434b      	muls	r3, r1
 80079b4:	18d3      	adds	r3, r2, r3
 80079b6:	3310      	adds	r3, #16
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_off = 3;
 80079bc:	4a90      	ldr	r2, [pc, #576]	; (8007c00 <Set_tv_protocol+0x404>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	212c      	movs	r1, #44	; 0x2c
 80079c2:	434b      	muls	r3, r1
 80079c4:	18d3      	adds	r3, r2, r3
 80079c6:	3314      	adds	r3, #20
 80079c8:	2203      	movs	r2, #3
 80079ca:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_on = 8;
 80079cc:	4a8c      	ldr	r2, [pc, #560]	; (8007c00 <Set_tv_protocol+0x404>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	212c      	movs	r1, #44	; 0x2c
 80079d2:	434b      	muls	r3, r1
 80079d4:	18d3      	adds	r3, r2, r3
 80079d6:	3318      	adds	r3, #24
 80079d8:	2208      	movs	r2, #8
 80079da:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_off = 4;
 80079dc:	4a88      	ldr	r2, [pc, #544]	; (8007c00 <Set_tv_protocol+0x404>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	212c      	movs	r1, #44	; 0x2c
 80079e2:	434b      	muls	r3, r1
 80079e4:	18d3      	adds	r3, r2, r3
 80079e6:	331c      	adds	r3, #28
 80079e8:	2204      	movs	r2, #4
 80079ea:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_on = 1;
 80079ec:	4a84      	ldr	r2, [pc, #528]	; (8007c00 <Set_tv_protocol+0x404>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	212c      	movs	r1, #44	; 0x2c
 80079f2:	434b      	muls	r3, r1
 80079f4:	18d3      	adds	r3, r2, r3
 80079f6:	3320      	adds	r3, #32
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_off = 173;
 80079fc:	4a80      	ldr	r2, [pc, #512]	; (8007c00 <Set_tv_protocol+0x404>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	212c      	movs	r1, #44	; 0x2c
 8007a02:	434b      	muls	r3, r1
 8007a04:	18d3      	adds	r3, r2, r3
 8007a06:	3324      	adds	r3, #36	; 0x24
 8007a08:	22ad      	movs	r2, #173	; 0xad
 8007a0a:	601a      	str	r2, [r3, #0]
	tv_protocol[index].data_Length = 48; // = 32;
 8007a0c:	4a7c      	ldr	r2, [pc, #496]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	212c      	movs	r1, #44	; 0x2c
 8007a12:	434b      	muls	r3, r1
 8007a14:	18d3      	adds	r3, r2, r3
 8007a16:	3328      	adds	r3, #40	; 0x28
 8007a18:	2230      	movs	r2, #48	; 0x30
 8007a1a:	601a      	str	r2, [r3, #0]
	index++;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	607b      	str	r3, [r7, #4]

	// SONY12 3
	tv_protocol[index].tv_type = index;
 8007a22:	4b77      	ldr	r3, [pc, #476]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	212c      	movs	r1, #44	; 0x2c
 8007a28:	434a      	muls	r2, r1
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	50d1      	str	r1, [r2, r3]
	tv_protocol[index].time_Unit = 603;
 8007a2e:	4a74      	ldr	r2, [pc, #464]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	212c      	movs	r1, #44	; 0x2c
 8007a34:	434b      	muls	r3, r1
 8007a36:	18d3      	adds	r3, r2, r3
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4a72      	ldr	r2, [pc, #456]	; (8007c04 <Set_tv_protocol+0x408>)
 8007a3c:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_on = 1;
 8007a3e:	4a70      	ldr	r2, [pc, #448]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	212c      	movs	r1, #44	; 0x2c
 8007a44:	434b      	muls	r3, r1
 8007a46:	18d3      	adds	r3, r2, r3
 8007a48:	3308      	adds	r3, #8
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_off = 1;
 8007a4e:	4a6c      	ldr	r2, [pc, #432]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	212c      	movs	r1, #44	; 0x2c
 8007a54:	434b      	muls	r3, r1
 8007a56:	18d3      	adds	r3, r2, r3
 8007a58:	330c      	adds	r3, #12
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_on = 2;
 8007a5e:	4a68      	ldr	r2, [pc, #416]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	212c      	movs	r1, #44	; 0x2c
 8007a64:	434b      	muls	r3, r1
 8007a66:	18d3      	adds	r3, r2, r3
 8007a68:	3310      	adds	r3, #16
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_off = 1;
 8007a6e:	4a64      	ldr	r2, [pc, #400]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	212c      	movs	r1, #44	; 0x2c
 8007a74:	434b      	muls	r3, r1
 8007a76:	18d3      	adds	r3, r2, r3
 8007a78:	3314      	adds	r3, #20
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_on = 4;
 8007a7e:	4a60      	ldr	r2, [pc, #384]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	212c      	movs	r1, #44	; 0x2c
 8007a84:	434b      	muls	r3, r1
 8007a86:	18d3      	adds	r3, r2, r3
 8007a88:	3318      	adds	r3, #24
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_off = 1;
 8007a8e:	4a5c      	ldr	r2, [pc, #368]	; (8007c00 <Set_tv_protocol+0x404>)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	212c      	movs	r1, #44	; 0x2c
 8007a94:	434b      	muls	r3, r1
 8007a96:	18d3      	adds	r3, r2, r3
 8007a98:	331c      	adds	r3, #28
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_on = 1;
 8007a9e:	4a58      	ldr	r2, [pc, #352]	; (8007c00 <Set_tv_protocol+0x404>)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	212c      	movs	r1, #44	; 0x2c
 8007aa4:	434b      	muls	r3, r1
 8007aa6:	18d3      	adds	r3, r2, r3
 8007aa8:	3320      	adds	r3, #32
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_off = 17;
 8007aae:	4a54      	ldr	r2, [pc, #336]	; (8007c00 <Set_tv_protocol+0x404>)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	212c      	movs	r1, #44	; 0x2c
 8007ab4:	434b      	muls	r3, r1
 8007ab6:	18d3      	adds	r3, r2, r3
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	2211      	movs	r2, #17
 8007abc:	601a      	str	r2, [r3, #0]
	tv_protocol[index].data_Length = 16;
 8007abe:	4a50      	ldr	r2, [pc, #320]	; (8007c00 <Set_tv_protocol+0x404>)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	212c      	movs	r1, #44	; 0x2c
 8007ac4:	434b      	muls	r3, r1
 8007ac6:	18d3      	adds	r3, r2, r3
 8007ac8:	3328      	adds	r3, #40	; 0x28
 8007aca:	2210      	movs	r2, #16
 8007acc:	601a      	str	r2, [r3, #0]
	index++;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	607b      	str	r3, [r7, #4]

	// RC5 4
	tv_protocol[index].tv_type = index;
 8007ad4:	4b4a      	ldr	r3, [pc, #296]	; (8007c00 <Set_tv_protocol+0x404>)
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	212c      	movs	r1, #44	; 0x2c
 8007ada:	434a      	muls	r2, r1
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	50d1      	str	r1, [r2, r3]
	tv_protocol[index].time_Unit = 993;
 8007ae0:	4a47      	ldr	r2, [pc, #284]	; (8007c00 <Set_tv_protocol+0x404>)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	212c      	movs	r1, #44	; 0x2c
 8007ae6:	434b      	muls	r3, r1
 8007ae8:	18d3      	adds	r3, r2, r3
 8007aea:	3304      	adds	r3, #4
 8007aec:	4a46      	ldr	r2, [pc, #280]	; (8007c08 <Set_tv_protocol+0x40c>)
 8007aee:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_on = 1;
 8007af0:	4a43      	ldr	r2, [pc, #268]	; (8007c00 <Set_tv_protocol+0x404>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	212c      	movs	r1, #44	; 0x2c
 8007af6:	434b      	muls	r3, r1
 8007af8:	18d3      	adds	r3, r2, r3
 8007afa:	3308      	adds	r3, #8
 8007afc:	2201      	movs	r2, #1
 8007afe:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_off = 1;
 8007b00:	4a3f      	ldr	r2, [pc, #252]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	212c      	movs	r1, #44	; 0x2c
 8007b06:	434b      	muls	r3, r1
 8007b08:	18d3      	adds	r3, r2, r3
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_on = 1;
 8007b10:	4a3b      	ldr	r2, [pc, #236]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	212c      	movs	r1, #44	; 0x2c
 8007b16:	434b      	muls	r3, r1
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_off = 1;
 8007b20:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	212c      	movs	r1, #44	; 0x2c
 8007b26:	434b      	muls	r3, r1
 8007b28:	18d3      	adds	r3, r2, r3
 8007b2a:	3314      	adds	r3, #20
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_on = 1;
 8007b30:	4a33      	ldr	r2, [pc, #204]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	212c      	movs	r1, #44	; 0x2c
 8007b36:	434b      	muls	r3, r1
 8007b38:	18d3      	adds	r3, r2, r3
 8007b3a:	3318      	adds	r3, #24
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_off = 1;
 8007b40:	4a2f      	ldr	r2, [pc, #188]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	212c      	movs	r1, #44	; 0x2c
 8007b46:	434b      	muls	r3, r1
 8007b48:	18d3      	adds	r3, r2, r3
 8007b4a:	331c      	adds	r3, #28
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_on = 1;
 8007b50:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	212c      	movs	r1, #44	; 0x2c
 8007b56:	434b      	muls	r3, r1
 8007b58:	18d3      	adds	r3, r2, r3
 8007b5a:	3320      	adds	r3, #32
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_off = 1;
 8007b60:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	212c      	movs	r1, #44	; 0x2c
 8007b66:	434b      	muls	r3, r1
 8007b68:	18d3      	adds	r3, r2, r3
 8007b6a:	3324      	adds	r3, #36	; 0x24
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
	tv_protocol[index].data_Length = 14;
 8007b70:	4a23      	ldr	r2, [pc, #140]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	212c      	movs	r1, #44	; 0x2c
 8007b76:	434b      	muls	r3, r1
 8007b78:	18d3      	adds	r3, r2, r3
 8007b7a:	3328      	adds	r3, #40	; 0x28
 8007b7c:	220e      	movs	r2, #14
 8007b7e:	601a      	str	r2, [r3, #0]
	index++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3301      	adds	r3, #1
 8007b84:	607b      	str	r3, [r7, #4]

	// RC6 5
	tv_protocol[index].tv_type = index;
 8007b86:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	212c      	movs	r1, #44	; 0x2c
 8007b8c:	434a      	muls	r2, r1
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	50d1      	str	r1, [r2, r3]
	tv_protocol[index].time_Unit = 447;
 8007b92:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <Set_tv_protocol+0x404>)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	212c      	movs	r1, #44	; 0x2c
 8007b98:	434b      	muls	r3, r1
 8007b9a:	18d3      	adds	r3, r2, r3
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	22c0      	movs	r2, #192	; 0xc0
 8007ba0:	32ff      	adds	r2, #255	; 0xff
 8007ba2:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_on = 1;
 8007ba4:	4a16      	ldr	r2, [pc, #88]	; (8007c00 <Set_tv_protocol+0x404>)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	212c      	movs	r1, #44	; 0x2c
 8007baa:	434b      	muls	r3, r1
 8007bac:	18d3      	adds	r3, r2, r3
 8007bae:	3308      	adds	r3, #8
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_off = 1;
 8007bb4:	4a12      	ldr	r2, [pc, #72]	; (8007c00 <Set_tv_protocol+0x404>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	212c      	movs	r1, #44	; 0x2c
 8007bba:	434b      	muls	r3, r1
 8007bbc:	18d3      	adds	r3, r2, r3
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_on = 1;
 8007bc4:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <Set_tv_protocol+0x404>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	212c      	movs	r1, #44	; 0x2c
 8007bca:	434b      	muls	r3, r1
 8007bcc:	18d3      	adds	r3, r2, r3
 8007bce:	3310      	adds	r3, #16
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_off = 1;
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	; (8007c00 <Set_tv_protocol+0x404>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	212c      	movs	r1, #44	; 0x2c
 8007bda:	434b      	muls	r3, r1
 8007bdc:	18d3      	adds	r3, r2, r3
 8007bde:	3314      	adds	r3, #20
 8007be0:	2201      	movs	r2, #1
 8007be2:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_on = 6;
 8007be4:	4a06      	ldr	r2, [pc, #24]	; (8007c00 <Set_tv_protocol+0x404>)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	212c      	movs	r1, #44	; 0x2c
 8007bea:	434b      	muls	r3, r1
 8007bec:	18d3      	adds	r3, r2, r3
 8007bee:	3318      	adds	r3, #24
 8007bf0:	2206      	movs	r2, #6
 8007bf2:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_off = 1;
 8007bf4:	4a02      	ldr	r2, [pc, #8]	; (8007c00 <Set_tv_protocol+0x404>)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	212c      	movs	r1, #44	; 0x2c
 8007bfa:	434b      	muls	r3, r1
 8007bfc:	18d3      	adds	r3, r2, r3
 8007bfe:	e005      	b.n	8007c0c <Set_tv_protocol+0x410>
 8007c00:	2000675c 	.word	0x2000675c
 8007c04:	0000025b 	.word	0x0000025b
 8007c08:	000003e1 	.word	0x000003e1
 8007c0c:	331c      	adds	r3, #28
 8007c0e:	2201      	movs	r2, #1
 8007c10:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_on = 1;
 8007c12:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	212c      	movs	r1, #44	; 0x2c
 8007c18:	434b      	muls	r3, r1
 8007c1a:	18d3      	adds	r3, r2, r3
 8007c1c:	3320      	adds	r3, #32
 8007c1e:	2201      	movs	r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_off = 6;
 8007c22:	4a38      	ldr	r2, [pc, #224]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	212c      	movs	r1, #44	; 0x2c
 8007c28:	434b      	muls	r3, r1
 8007c2a:	18d3      	adds	r3, r2, r3
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2206      	movs	r2, #6
 8007c30:	601a      	str	r2, [r3, #0]
	tv_protocol[index].data_Length = 14;
 8007c32:	4a34      	ldr	r2, [pc, #208]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	212c      	movs	r1, #44	; 0x2c
 8007c38:	434b      	muls	r3, r1
 8007c3a:	18d3      	adds	r3, r2, r3
 8007c3c:	3328      	adds	r3, #40	; 0x28
 8007c3e:	220e      	movs	r2, #14
 8007c40:	601a      	str	r2, [r3, #0]
	index++;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3301      	adds	r3, #1
 8007c46:	607b      	str	r3, [r7, #4]

	// SHARP 6
	tv_protocol[index].tv_type = index;
 8007c48:	4b2e      	ldr	r3, [pc, #184]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	212c      	movs	r1, #44	; 0x2c
 8007c4e:	434a      	muls	r2, r1
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	50d1      	str	r1, [r2, r3]
	tv_protocol[index].time_Unit = 330;
 8007c54:	4a2b      	ldr	r2, [pc, #172]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	212c      	movs	r1, #44	; 0x2c
 8007c5a:	434b      	muls	r3, r1
 8007c5c:	18d3      	adds	r3, r2, r3
 8007c5e:	3304      	adds	r3, #4
 8007c60:	22a5      	movs	r2, #165	; 0xa5
 8007c62:	0052      	lsls	r2, r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_on = 1;
 8007c66:	4a27      	ldr	r2, [pc, #156]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	212c      	movs	r1, #44	; 0x2c
 8007c6c:	434b      	muls	r3, r1
 8007c6e:	18d3      	adds	r3, r2, r3
 8007c70:	3308      	adds	r3, #8
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
	tv_protocol[index].zero_t_off = 2;
 8007c76:	4a23      	ldr	r2, [pc, #140]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	212c      	movs	r1, #44	; 0x2c
 8007c7c:	434b      	muls	r3, r1
 8007c7e:	18d3      	adds	r3, r2, r3
 8007c80:	330c      	adds	r3, #12
 8007c82:	2202      	movs	r2, #2
 8007c84:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_on = 1;
 8007c86:	4a1f      	ldr	r2, [pc, #124]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	212c      	movs	r1, #44	; 0x2c
 8007c8c:	434b      	muls	r3, r1
 8007c8e:	18d3      	adds	r3, r2, r3
 8007c90:	3310      	adds	r3, #16
 8007c92:	2201      	movs	r2, #1
 8007c94:	601a      	str	r2, [r3, #0]
	tv_protocol[index].one_t_off = 5;
 8007c96:	4a1b      	ldr	r2, [pc, #108]	; (8007d04 <Set_tv_protocol+0x508>)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	212c      	movs	r1, #44	; 0x2c
 8007c9c:	434b      	muls	r3, r1
 8007c9e:	18d3      	adds	r3, r2, r3
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_on = 1;
 8007ca6:	4a17      	ldr	r2, [pc, #92]	; (8007d04 <Set_tv_protocol+0x508>)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	212c      	movs	r1, #44	; 0x2c
 8007cac:	434b      	muls	r3, r1
 8007cae:	18d3      	adds	r3, r2, r3
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
	tv_protocol[index].start_t_off = 1;
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <Set_tv_protocol+0x508>)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	212c      	movs	r1, #44	; 0x2c
 8007cbc:	434b      	muls	r3, r1
 8007cbe:	18d3      	adds	r3, r2, r3
 8007cc0:	331c      	adds	r3, #28
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_on = 1;
 8007cc6:	4a0f      	ldr	r2, [pc, #60]	; (8007d04 <Set_tv_protocol+0x508>)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	212c      	movs	r1, #44	; 0x2c
 8007ccc:	434b      	muls	r3, r1
 8007cce:	18d3      	adds	r3, r2, r3
 8007cd0:	3320      	adds	r3, #32
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
	tv_protocol[index].stop_t_off = 1;
 8007cd6:	4a0b      	ldr	r2, [pc, #44]	; (8007d04 <Set_tv_protocol+0x508>)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	212c      	movs	r1, #44	; 0x2c
 8007cdc:	434b      	muls	r3, r1
 8007cde:	18d3      	adds	r3, r2, r3
 8007ce0:	3324      	adds	r3, #36	; 0x24
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
	tv_protocol[index].data_Length = 15;
 8007ce6:	4a07      	ldr	r2, [pc, #28]	; (8007d04 <Set_tv_protocol+0x508>)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	212c      	movs	r1, #44	; 0x2c
 8007cec:	434b      	muls	r3, r1
 8007cee:	18d3      	adds	r3, r2, r3
 8007cf0:	3328      	adds	r3, #40	; 0x28
 8007cf2:	220f      	movs	r2, #15
 8007cf4:	601a      	str	r2, [r3, #0]
	index++;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	607b      	str	r3, [r7, #4]
}
 8007cfc:	46c0      	nop			; (mov r8, r8)
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b002      	add	sp, #8
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	2000675c 	.word	0x2000675c

08007d08 <Btn1_Process>:
bool btn1_pressed = false;
bool btn2_pressed = false;
bool btn3_pressed = false;

void Btn1_Process()
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
	/* State Machine switch */
	switch (btn1_state_process)
 8007d0c:	4b44      	ldr	r3, [pc, #272]	; (8007e20 <Btn1_Process+0x118>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d046      	beq.n	8007da2 <Btn1_Process+0x9a>
 8007d14:	dd00      	ble.n	8007d18 <Btn1_Process+0x10>
 8007d16:	e079      	b.n	8007e0c <Btn1_Process+0x104>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <Btn1_Process+0x1a>
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d00c      	beq.n	8007d3a <Btn1_Process+0x32>
 8007d20:	e074      	b.n	8007e0c <Btn1_Process+0x104>
	{
	case INIT:
	{

		/* Next state -> NO_WATER */
		btn1_state_process = BTN_NO_PRESS;
 8007d22:	4b3f      	ldr	r3, [pc, #252]	; (8007e20 <Btn1_Process+0x118>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	701a      	strb	r2, [r3, #0]

		/* By default, no water is detected */
		btn1_pressed = false;
 8007d28:	4b3e      	ldr	r3, [pc, #248]	; (8007e24 <Btn1_Process+0x11c>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]

		/* Get t0 */
		btn1_time = HAL_GetTick();
 8007d2e:	f007 fb31 	bl	800f394 <HAL_GetTick>
 8007d32:	0002      	movs	r2, r0
 8007d34:	4b3c      	ldr	r3, [pc, #240]	; (8007e28 <Btn1_Process+0x120>)
 8007d36:	601a      	str	r2, [r3, #0]

		break;
 8007d38:	e06f      	b.n	8007e1a <Btn1_Process+0x112>
	}

	case BTN_NO_PRESS:
	{
		/* If 100 ms has passed since t0 (10 Hz sampling) */
		if ((HAL_GetTick() - btn1_time) >= TIME_INTERVAL)
 8007d3a:	f007 fb2b 	bl	800f394 <HAL_GetTick>
 8007d3e:	0002      	movs	r2, r0
 8007d40:	4b39      	ldr	r3, [pc, #228]	; (8007e28 <Btn1_Process+0x120>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2214      	movs	r2, #20
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d363      	bcc.n	8007e14 <Btn1_Process+0x10c>
		{
			/* Reinitialize timer */
			btn1_time = HAL_GetTick();
 8007d4c:	f007 fb22 	bl	800f394 <HAL_GetTick>
 8007d50:	0002      	movs	r2, r0
 8007d52:	4b35      	ldr	r3, [pc, #212]	; (8007e28 <Btn1_Process+0x120>)
 8007d54:	601a      	str	r2, [r3, #0]

			/* If Freq < LOW_FREQ water is present : increment counter */
			if ((HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET))
 8007d56:	4b35      	ldr	r3, [pc, #212]	; (8007e2c <Btn1_Process+0x124>)
 8007d58:	2101      	movs	r1, #1
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f009 f9e4 	bl	8011128 <HAL_GPIO_ReadPin>
 8007d60:	1e03      	subs	r3, r0, #0
 8007d62:	d108      	bne.n	8007d76 <Btn1_Process+0x6e>
			{
				btn1_counter++;
 8007d64:	4b32      	ldr	r3, [pc, #200]	; (8007e30 <Btn1_Process+0x128>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	4b31      	ldr	r3, [pc, #196]	; (8007e30 <Btn1_Process+0x128>)
 8007d6c:	601a      	str	r2, [r3, #0]
				btn1_state_process = BTN_NO_PRESS;
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <Btn1_Process+0x118>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e005      	b.n	8007d82 <Btn1_Process+0x7a>
			}

			/* Else restart the measuring */
			else
			{
				btn1_counter = 0;
 8007d76:	4b2e      	ldr	r3, [pc, #184]	; (8007e30 <Btn1_Process+0x128>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
				// btn1_pressed = false;

				btn1_state_process = BTN_NO_PRESS;
 8007d7c:	4b28      	ldr	r3, [pc, #160]	; (8007e20 <Btn1_Process+0x118>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	701a      	strb	r2, [r3, #0]
			}

			/* When 5 consecutive readings are lower than LOW_FREQ water is present */

			if (btn1_counter >= BTN_Delay_ON)
 8007d82:	4b2b      	ldr	r3, [pc, #172]	; (8007e30 <Btn1_Process+0x128>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4b2b      	ldr	r3, [pc, #172]	; (8007e34 <Btn1_Process+0x12c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	db42      	blt.n	8007e14 <Btn1_Process+0x10c>
			{
				btn1_pressed = true;
 8007d8e:	4b25      	ldr	r3, [pc, #148]	; (8007e24 <Btn1_Process+0x11c>)
 8007d90:	2201      	movs	r2, #1
 8007d92:	701a      	strb	r2, [r3, #0]
				btn1_state_process = BTN_PRESS;
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <Btn1_Process+0x118>)
 8007d96:	2202      	movs	r2, #2
 8007d98:	701a      	strb	r2, [r3, #0]
				btn1_counter = 0;
 8007d9a:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <Btn1_Process+0x128>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
				// Send_Version_Data(); //reply through uart
				// HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			}
		}

		break;
 8007da0:	e038      	b.n	8007e14 <Btn1_Process+0x10c>
	}

	case BTN_PRESS:
	{
		/* If 100 ms has passed since t0 (10 Hz sampling) */
		if ((HAL_GetTick() - btn1_time) >= TIME_INTERVAL)
 8007da2:	f007 faf7 	bl	800f394 <HAL_GetTick>
 8007da6:	0002      	movs	r2, r0
 8007da8:	4b1f      	ldr	r3, [pc, #124]	; (8007e28 <Btn1_Process+0x120>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2214      	movs	r2, #20
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d331      	bcc.n	8007e18 <Btn1_Process+0x110>
		{

			/* Reinitialize timer */
			btn1_time = HAL_GetTick();
 8007db4:	f007 faee 	bl	800f394 <HAL_GetTick>
 8007db8:	0002      	movs	r2, r0
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <Btn1_Process+0x120>)
 8007dbc:	601a      	str	r2, [r3, #0]

			/* If Freq > LOW_FREQ no water is present : increment counter */
			if ((HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_SET))
 8007dbe:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <Btn1_Process+0x124>)
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f009 f9b0 	bl	8011128 <HAL_GPIO_ReadPin>
 8007dc8:	0003      	movs	r3, r0
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d108      	bne.n	8007de0 <Btn1_Process+0xd8>
			{
				btn1_counter++;
 8007dce:	4b18      	ldr	r3, [pc, #96]	; (8007e30 <Btn1_Process+0x128>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <Btn1_Process+0x128>)
 8007dd6:	601a      	str	r2, [r3, #0]
				btn1_state_process = BTN_PRESS;
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <Btn1_Process+0x118>)
 8007dda:	2202      	movs	r2, #2
 8007ddc:	701a      	strb	r2, [r3, #0]
 8007dde:	e005      	b.n	8007dec <Btn1_Process+0xe4>
			}

			/* Else restart the measuring */
			else
			{
				btn1_counter = 0;
 8007de0:	4b13      	ldr	r3, [pc, #76]	; (8007e30 <Btn1_Process+0x128>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
				//	btn1_pressed = true;
				btn1_state_process = BTN_PRESS;
 8007de6:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <Btn1_Process+0x118>)
 8007de8:	2202      	movs	r2, #2
 8007dea:	701a      	strb	r2, [r3, #0]
			}

			/* When 20 consecutive readings are higher than HIGH_FREQ water is not present */

			if (btn1_counter >= BTN_Delay_OFF)
 8007dec:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <Btn1_Process+0x128>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <Btn1_Process+0x130>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	db0f      	blt.n	8007e18 <Btn1_Process+0x110>
			{
				btn1_pressed = false;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <Btn1_Process+0x11c>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
				btn1_state_process = BTN_NO_PRESS;
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <Btn1_Process+0x118>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	701a      	strb	r2, [r3, #0]
				btn1_counter = 0;
 8007e04:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <Btn1_Process+0x128>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
				//	Send_Version_Data(); //reply through uart
				//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			}
		}

		break;
 8007e0a:	e005      	b.n	8007e18 <Btn1_Process+0x110>
	}

	default:
		btn1_state_process = INIT;
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <Btn1_Process+0x118>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]

	} /* switch ( motion_state_process ) */
}
 8007e12:	e002      	b.n	8007e1a <Btn1_Process+0x112>
		break;
 8007e14:	46c0      	nop			; (mov r8, r8)
 8007e16:	e000      	b.n	8007e1a <Btn1_Process+0x112>
		break;
 8007e18:	46c0      	nop			; (mov r8, r8)
}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20006890 	.word	0x20006890
 8007e24:	200068a4 	.word	0x200068a4
 8007e28:	20006894 	.word	0x20006894
 8007e2c:	50000400 	.word	0x50000400
 8007e30:	2000689c 	.word	0x2000689c
 8007e34:	20005008 	.word	0x20005008
 8007e38:	2000500c 	.word	0x2000500c

08007e3c <Btn2_Process>:

void Btn2_Process()
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
	/* State Machine switch */
	switch (btn2_state_process)
 8007e40:	4b47      	ldr	r3, [pc, #284]	; (8007f60 <Btn2_Process+0x124>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d049      	beq.n	8007edc <Btn2_Process+0xa0>
 8007e48:	dd00      	ble.n	8007e4c <Btn2_Process+0x10>
 8007e4a:	e07f      	b.n	8007f4c <Btn2_Process+0x110>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <Btn2_Process+0x1a>
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d00c      	beq.n	8007e6e <Btn2_Process+0x32>
 8007e54:	e07a      	b.n	8007f4c <Btn2_Process+0x110>
	{
	case INIT:
	{

		/* Next state -> NO_WATER */
		btn2_state_process = BTN_NO_PRESS;
 8007e56:	4b42      	ldr	r3, [pc, #264]	; (8007f60 <Btn2_Process+0x124>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]

		/* By default, no water is detected */
		btn2_pressed = false;
 8007e5c:	4b41      	ldr	r3, [pc, #260]	; (8007f64 <Btn2_Process+0x128>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]

		/* Get t0 */
		btn2_time = HAL_GetTick();
 8007e62:	f007 fa97 	bl	800f394 <HAL_GetTick>
 8007e66:	0002      	movs	r2, r0
 8007e68:	4b3f      	ldr	r3, [pc, #252]	; (8007f68 <Btn2_Process+0x12c>)
 8007e6a:	601a      	str	r2, [r3, #0]

		break;
 8007e6c:	e075      	b.n	8007f5a <Btn2_Process+0x11e>
	}

	case BTN_NO_PRESS:
	{
		/* If 100 ms has passed since t0 (10 Hz sampling) */
		if ((HAL_GetTick() - btn2_time) >= TIME_INTERVAL)
 8007e6e:	f007 fa91 	bl	800f394 <HAL_GetTick>
 8007e72:	0002      	movs	r2, r0
 8007e74:	4b3c      	ldr	r3, [pc, #240]	; (8007f68 <Btn2_Process+0x12c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2214      	movs	r2, #20
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d369      	bcc.n	8007f54 <Btn2_Process+0x118>
		{
			/* Reinitialize timer */
			btn2_time = HAL_GetTick();
 8007e80:	f007 fa88 	bl	800f394 <HAL_GetTick>
 8007e84:	0002      	movs	r2, r0
 8007e86:	4b38      	ldr	r3, [pc, #224]	; (8007f68 <Btn2_Process+0x12c>)
 8007e88:	601a      	str	r2, [r3, #0]

			/* If Freq < LOW_FREQ water is present : increment counter */
			if ((HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET))
 8007e8a:	2380      	movs	r3, #128	; 0x80
 8007e8c:	005a      	lsls	r2, r3, #1
 8007e8e:	23a0      	movs	r3, #160	; 0xa0
 8007e90:	05db      	lsls	r3, r3, #23
 8007e92:	0011      	movs	r1, r2
 8007e94:	0018      	movs	r0, r3
 8007e96:	f009 f947 	bl	8011128 <HAL_GPIO_ReadPin>
 8007e9a:	1e03      	subs	r3, r0, #0
 8007e9c:	d108      	bne.n	8007eb0 <Btn2_Process+0x74>
			{
				btn2_counter++;
 8007e9e:	4b33      	ldr	r3, [pc, #204]	; (8007f6c <Btn2_Process+0x130>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	4b31      	ldr	r3, [pc, #196]	; (8007f6c <Btn2_Process+0x130>)
 8007ea6:	601a      	str	r2, [r3, #0]
				btn2_state_process = BTN_NO_PRESS;
 8007ea8:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <Btn2_Process+0x124>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e005      	b.n	8007ebc <Btn2_Process+0x80>
			}

			/* Else restart the measuring */
			else
			{
				btn2_counter = 0;
 8007eb0:	4b2e      	ldr	r3, [pc, #184]	; (8007f6c <Btn2_Process+0x130>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
				// btn2_pressed = false;

				btn2_state_process = BTN_NO_PRESS;
 8007eb6:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <Btn2_Process+0x124>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]
			}

			/* When 5 consecutive readings are lower than LOW_FREQ water is present */

			if (btn2_counter >= BTN_Delay_ON)
 8007ebc:	4b2b      	ldr	r3, [pc, #172]	; (8007f6c <Btn2_Process+0x130>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b2b      	ldr	r3, [pc, #172]	; (8007f70 <Btn2_Process+0x134>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	db45      	blt.n	8007f54 <Btn2_Process+0x118>
			{
				btn2_pressed = true;
 8007ec8:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <Btn2_Process+0x128>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
				btn2_state_process = BTN_PRESS;
 8007ece:	4b24      	ldr	r3, [pc, #144]	; (8007f60 <Btn2_Process+0x124>)
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	701a      	strb	r2, [r3, #0]
				btn2_counter = 0;
 8007ed4:	4b25      	ldr	r3, [pc, #148]	; (8007f6c <Btn2_Process+0x130>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
				// Send_Version_Data(); //reply through uart
				// HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			}
		}

		break;
 8007eda:	e03b      	b.n	8007f54 <Btn2_Process+0x118>
	}

	case BTN_PRESS:
	{
		/* If 100 ms has passed since t0 (10 Hz sampling) */
		if ((HAL_GetTick() - btn2_time) >= TIME_INTERVAL)
 8007edc:	f007 fa5a 	bl	800f394 <HAL_GetTick>
 8007ee0:	0002      	movs	r2, r0
 8007ee2:	4b21      	ldr	r3, [pc, #132]	; (8007f68 <Btn2_Process+0x12c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2214      	movs	r2, #20
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d334      	bcc.n	8007f58 <Btn2_Process+0x11c>
		{

			/* Reinitialize timer */
			btn2_time = HAL_GetTick();
 8007eee:	f007 fa51 	bl	800f394 <HAL_GetTick>
 8007ef2:	0002      	movs	r2, r0
 8007ef4:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <Btn2_Process+0x12c>)
 8007ef6:	601a      	str	r2, [r3, #0]

			/* If Freq > LOW_FREQ no water is present : increment counter */
			if ((HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_SET))
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	005a      	lsls	r2, r3, #1
 8007efc:	23a0      	movs	r3, #160	; 0xa0
 8007efe:	05db      	lsls	r3, r3, #23
 8007f00:	0011      	movs	r1, r2
 8007f02:	0018      	movs	r0, r3
 8007f04:	f009 f910 	bl	8011128 <HAL_GPIO_ReadPin>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d108      	bne.n	8007f20 <Btn2_Process+0xe4>
			{
				btn2_counter++;
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <Btn2_Process+0x130>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <Btn2_Process+0x130>)
 8007f16:	601a      	str	r2, [r3, #0]
				btn2_state_process = BTN_PRESS;
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <Btn2_Process+0x124>)
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	e005      	b.n	8007f2c <Btn2_Process+0xf0>
			}

			/* Else restart the measuring */
			else
			{
				btn2_counter = 0;
 8007f20:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <Btn2_Process+0x130>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
				// btn2_pressed = true;
				btn2_state_process = BTN_PRESS;
 8007f26:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <Btn2_Process+0x124>)
 8007f28:	2202      	movs	r2, #2
 8007f2a:	701a      	strb	r2, [r3, #0]
			}

			/* When 20 consecutive readings are higher than HIGH_FREQ water is not present */

			if (btn2_counter >= BTN_Delay_OFF)
 8007f2c:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <Btn2_Process+0x130>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <Btn2_Process+0x138>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	db0f      	blt.n	8007f58 <Btn2_Process+0x11c>
			{
				btn2_pressed = false;
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <Btn2_Process+0x128>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
				btn2_state_process = BTN_NO_PRESS;
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <Btn2_Process+0x124>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	701a      	strb	r2, [r3, #0]
				btn2_counter = 0;
 8007f44:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <Btn2_Process+0x130>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
				//	Send_Version_Data(); //reply through uart
				//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			}
		}

		break;
 8007f4a:	e005      	b.n	8007f58 <Btn2_Process+0x11c>
	}

	default:
		btn2_state_process = INIT;
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <Btn2_Process+0x124>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]

	} /* switch ( motion_state_process ) */
}
 8007f52:	e002      	b.n	8007f5a <Btn2_Process+0x11e>
		break;
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	e000      	b.n	8007f5a <Btn2_Process+0x11e>
		break;
 8007f58:	46c0      	nop			; (mov r8, r8)
}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20006891 	.word	0x20006891
 8007f64:	200068a5 	.word	0x200068a5
 8007f68:	20006898 	.word	0x20006898
 8007f6c:	200068a0 	.word	0x200068a0
 8007f70:	20005008 	.word	0x20005008
 8007f74:	2000500c 	.word	0x2000500c

08007f78 <BTN1_Is_Pressed>:
//
//	  } /* switch ( motion_state_process ) */
//
// }
bool BTN1_Is_Pressed()
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
	return btn1_pressed;
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <BTN1_Is_Pressed+0x10>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	200068a4 	.word	0x200068a4

08007f8c <BTN2_Is_Pressed>:
bool BTN2_Is_Pressed()
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
	return btn2_pressed;
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <BTN2_Is_Pressed+0x10>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
}
 8007f94:	0018      	movs	r0, r3
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	200068a5 	.word	0x200068a5

08007fa0 <BTN3_Is_Pressed>:
bool BTN3_Is_Pressed()
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
	return btn3_pressed; // return true;
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <BTN3_Is_Pressed+0x10>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	200068a6 	.word	0x200068a6

08007fb4 <SetBtnPress>:
void SetBtnPress(bool trueorfalse, int btn)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	0002      	movs	r2, r0
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	1dfb      	adds	r3, r7, #7
 8007fc0:	701a      	strb	r2, [r3, #0]
	if (btn == 1)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d104      	bne.n	8007fd2 <SetBtnPress+0x1e>
		btn1_pressed = trueorfalse;
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <SetBtnPress+0x40>)
 8007fca:	1dfa      	adds	r2, r7, #7
 8007fcc:	7812      	ldrb	r2, [r2, #0]
 8007fce:	701a      	strb	r2, [r3, #0]
	else if (btn == 2)
		btn2_pressed = trueorfalse;
	else
		btn3_pressed = trueorfalse;
}
 8007fd0:	e00b      	b.n	8007fea <SetBtnPress+0x36>
	else if (btn == 2)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d104      	bne.n	8007fe2 <SetBtnPress+0x2e>
		btn2_pressed = trueorfalse;
 8007fd8:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <SetBtnPress+0x44>)
 8007fda:	1dfa      	adds	r2, r7, #7
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	701a      	strb	r2, [r3, #0]
}
 8007fe0:	e003      	b.n	8007fea <SetBtnPress+0x36>
		btn3_pressed = trueorfalse;
 8007fe2:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <SetBtnPress+0x48>)
 8007fe4:	1dfa      	adds	r2, r7, #7
 8007fe6:	7812      	ldrb	r2, [r2, #0]
 8007fe8:	701a      	strb	r2, [r3, #0]
}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b002      	add	sp, #8
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	200068a4 	.word	0x200068a4
 8007ff8:	200068a5 	.word	0x200068a5
 8007ffc:	200068a6 	.word	0x200068a6

08008000 <loop_process>:
uint8_t is_loop_process_on_started = 0;
uint8_t is_loop_process_off_started = 0;
static unsigned long loop_time = 0;

void loop_process(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
	/* State Machine switch */
	switch (loop_state_process)
 8008004:	4b8d      	ldr	r3, [pc, #564]	; (800823c <loop_process+0x23c>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d100      	bne.n	800800e <loop_process+0xe>
 800800c:	e098      	b.n	8008140 <loop_process+0x140>
 800800e:	dd00      	ble.n	8008012 <loop_process+0x12>
 8008010:	e107      	b.n	8008222 <loop_process+0x222>
 8008012:	2b02      	cmp	r3, #2
 8008014:	d022      	beq.n	800805c <loop_process+0x5c>
 8008016:	dd00      	ble.n	800801a <loop_process+0x1a>
 8008018:	e103      	b.n	8008222 <loop_process+0x222>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <loop_process+0x24>
 800801e:	2b01      	cmp	r3, #1
 8008020:	d00d      	beq.n	800803e <loop_process+0x3e>
 8008022:	e0fe      	b.n	8008222 <loop_process+0x222>
	{
	case LOOP_INIT:
	{
		/* Next state -> NO_LOOP */
		loop_state_process = NO_LOOP;
 8008024:	4b85      	ldr	r3, [pc, #532]	; (800823c <loop_process+0x23c>)
 8008026:	2201      	movs	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]

		/* By default, loop is not continue */
		is_loop_continue = 0;
 800802a:	4b85      	ldr	r3, [pc, #532]	; (8008240 <loop_process+0x240>)
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
		is_loop_process_on_started = 0;
 8008030:	4b84      	ldr	r3, [pc, #528]	; (8008244 <loop_process+0x244>)
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]
		is_loop_process_off_started = 0;
 8008036:	4b84      	ldr	r3, [pc, #528]	; (8008248 <loop_process+0x248>)
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]

		break;
 800803c:	e0fa      	b.n	8008234 <loop_process+0x234>
	}
	case NO_LOOP:
	{
		is_loop_process_on_started = 0;
 800803e:	4b81      	ldr	r3, [pc, #516]	; (8008244 <loop_process+0x244>)
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
		is_loop_process_off_started = 0;
 8008044:	4b80      	ldr	r3, [pc, #512]	; (8008248 <loop_process+0x248>)
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]

		if (Motion_Is_Detected())
 800804a:	f004 fc43 	bl	800c8d4 <Motion_Is_Detected>
 800804e:	1e03      	subs	r3, r0, #0
 8008050:	d100      	bne.n	8008054 <loop_process+0x54>
 8008052:	e0ea      	b.n	800822a <loop_process+0x22a>
		{
			/* Next state -> LOOP_PROCESS_ON */
			loop_state_process = LOOP_PROCESS_ON;
 8008054:	4b79      	ldr	r3, [pc, #484]	; (800823c <loop_process+0x23c>)
 8008056:	2202      	movs	r2, #2
 8008058:	701a      	strb	r2, [r3, #0]
		}

		break;
 800805a:	e0e6      	b.n	800822a <loop_process+0x22a>
	}
	case LOOP_PROCESS_ON:
	{
		if (is_loop_process_on_started == 0)
 800805c:	4b79      	ldr	r3, [pc, #484]	; (8008244 <loop_process+0x244>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d117      	bne.n	8008094 <loop_process+0x94>
		{
			if (pcb_config.sSetIRON[0] - '0')
 8008064:	4b79      	ldr	r3, [pc, #484]	; (800824c <loop_process+0x24c>)
 8008066:	22de      	movs	r2, #222	; 0xde
 8008068:	5c9b      	ldrb	r3, [r3, r2]
 800806a:	2b30      	cmp	r3, #48	; 0x30
 800806c:	d002      	beq.n	8008074 <loop_process+0x74>
			{
				IRSend_NEC(true);
 800806e:	2001      	movs	r0, #1
 8008070:	f7fe fcc2 	bl	80069f8 <IRSend_NEC>
			}
			if (pcb_config.sSetRS232ON[0] - '0')
 8008074:	4b75      	ldr	r3, [pc, #468]	; (800824c <loop_process+0x24c>)
 8008076:	22e8      	movs	r2, #232	; 0xe8
 8008078:	5c9b      	ldrb	r3, [r3, r2]
 800807a:	2b30      	cmp	r3, #48	; 0x30
 800807c:	d001      	beq.n	8008082 <loop_process+0x82>
			{
				Send_RS232_Command_ON();
 800807e:	f005 fccb 	bl	800da18 <Send_RS232_Command_ON>
			}

			/* Get t0 */
			loop_time = HAL_GetTick();
 8008082:	f007 f987 	bl	800f394 <HAL_GetTick>
 8008086:	0002      	movs	r2, r0
 8008088:	4b71      	ldr	r3, [pc, #452]	; (8008250 <loop_process+0x250>)
 800808a:	601a      	str	r2, [r3, #0]

			is_loop_process_on_started = 1;
 800808c:	4b6d      	ldr	r3, [pc, #436]	; (8008244 <loop_process+0x244>)
 800808e:	2201      	movs	r2, #1
 8008090:	701a      	strb	r2, [r3, #0]

				is_loop_process_on_started = 0;
			}
		}

		break;
 8008092:	e0cc      	b.n	800822e <loop_process+0x22e>
		else if (is_loop_process_on_started == 1)
 8008094:	4b6b      	ldr	r3, [pc, #428]	; (8008244 <loop_process+0x244>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d000      	beq.n	800809e <loop_process+0x9e>
 800809c:	e0c7      	b.n	800822e <loop_process+0x22e>
			if (pcb_config.loopon == 1 && pcb_config.looptime >= 1)
 800809e:	4a6b      	ldr	r2, [pc, #428]	; (800824c <loop_process+0x24c>)
 80080a0:	2381      	movs	r3, #129	; 0x81
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	5cd3      	ldrb	r3, [r2, r3]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d141      	bne.n	800812e <loop_process+0x12e>
 80080aa:	4a68      	ldr	r2, [pc, #416]	; (800824c <loop_process+0x24c>)
 80080ac:	2382      	movs	r3, #130	; 0x82
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	5cd3      	ldrb	r3, [r2, r3]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d03b      	beq.n	800812e <loop_process+0x12e>
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != false)
 80080b6:	f007 f96d 	bl	800f394 <HAL_GetTick>
 80080ba:	0002      	movs	r2, r0
 80080bc:	4b64      	ldr	r3, [pc, #400]	; (8008250 <loop_process+0x250>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	1ad1      	subs	r1, r2, r3
 80080c2:	4a62      	ldr	r2, [pc, #392]	; (800824c <loop_process+0x24c>)
 80080c4:	2382      	movs	r3, #130	; 0x82
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	5cd3      	ldrb	r3, [r2, r3]
 80080ca:	001a      	movs	r2, r3
 80080cc:	0013      	movs	r3, r2
 80080ce:	015b      	lsls	r3, r3, #5
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	189b      	adds	r3, r3, r2
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4299      	cmp	r1, r3
 80080da:	d318      	bcc.n	800810e <loop_process+0x10e>
 80080dc:	f004 fbfa 	bl	800c8d4 <Motion_Is_Detected>
 80080e0:	1e03      	subs	r3, r0, #0
 80080e2:	d014      	beq.n	800810e <loop_process+0x10e>
					if (pcb_config.sSetIRON[0] - '0')
 80080e4:	4b59      	ldr	r3, [pc, #356]	; (800824c <loop_process+0x24c>)
 80080e6:	22de      	movs	r2, #222	; 0xde
 80080e8:	5c9b      	ldrb	r3, [r3, r2]
 80080ea:	2b30      	cmp	r3, #48	; 0x30
 80080ec:	d002      	beq.n	80080f4 <loop_process+0xf4>
						IRSend_NEC(true);
 80080ee:	2001      	movs	r0, #1
 80080f0:	f7fe fc82 	bl	80069f8 <IRSend_NEC>
					if (pcb_config.sSetRS232ON[0] - '0')
 80080f4:	4b55      	ldr	r3, [pc, #340]	; (800824c <loop_process+0x24c>)
 80080f6:	22e8      	movs	r2, #232	; 0xe8
 80080f8:	5c9b      	ldrb	r3, [r3, r2]
 80080fa:	2b30      	cmp	r3, #48	; 0x30
 80080fc:	d001      	beq.n	8008102 <loop_process+0x102>
						Send_RS232_Command_ON();
 80080fe:	f005 fc8b 	bl	800da18 <Send_RS232_Command_ON>
					loop_time = HAL_GetTick();
 8008102:	f007 f947 	bl	800f394 <HAL_GetTick>
 8008106:	0002      	movs	r2, r0
 8008108:	4b51      	ldr	r3, [pc, #324]	; (8008250 <loop_process+0x250>)
 800810a:	601a      	str	r2, [r3, #0]
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != false)
 800810c:	e016      	b.n	800813c <loop_process+0x13c>
				else if (Motion_Is_Detected() == false)
 800810e:	f004 fbe1 	bl	800c8d4 <Motion_Is_Detected>
 8008112:	0003      	movs	r3, r0
 8008114:	001a      	movs	r2, r3
 8008116:	2301      	movs	r3, #1
 8008118:	4053      	eors	r3, r2
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00d      	beq.n	800813c <loop_process+0x13c>
					loop_state_process = LOOP_PROCESS_OFF;
 8008120:	4b46      	ldr	r3, [pc, #280]	; (800823c <loop_process+0x23c>)
 8008122:	2203      	movs	r2, #3
 8008124:	701a      	strb	r2, [r3, #0]
					is_loop_process_on_started = 0;
 8008126:	4b47      	ldr	r3, [pc, #284]	; (8008244 <loop_process+0x244>)
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != false)
 800812c:	e006      	b.n	800813c <loop_process+0x13c>
				loop_state_process = LOOP_PROCESS_OFF;
 800812e:	4b43      	ldr	r3, [pc, #268]	; (800823c <loop_process+0x23c>)
 8008130:	2203      	movs	r2, #3
 8008132:	701a      	strb	r2, [r3, #0]
				is_loop_process_on_started = 0;
 8008134:	4b43      	ldr	r3, [pc, #268]	; (8008244 <loop_process+0x244>)
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
		break;
 800813a:	e078      	b.n	800822e <loop_process+0x22e>
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != false)
 800813c:	46c0      	nop			; (mov r8, r8)
		break;
 800813e:	e076      	b.n	800822e <loop_process+0x22e>
	}
	case LOOP_PROCESS_OFF:
	{
		if (is_loop_process_off_started == 0)
 8008140:	4b41      	ldr	r3, [pc, #260]	; (8008248 <loop_process+0x248>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d117      	bne.n	8008178 <loop_process+0x178>
		{
			if (pcb_config.sSetIRON[0] - '0')
 8008148:	4b40      	ldr	r3, [pc, #256]	; (800824c <loop_process+0x24c>)
 800814a:	22de      	movs	r2, #222	; 0xde
 800814c:	5c9b      	ldrb	r3, [r3, r2]
 800814e:	2b30      	cmp	r3, #48	; 0x30
 8008150:	d002      	beq.n	8008158 <loop_process+0x158>
			{
				IRSend_NEC(false);
 8008152:	2000      	movs	r0, #0
 8008154:	f7fe fc50 	bl	80069f8 <IRSend_NEC>
			}
			if (pcb_config.sSetRS232ON[0] - '0')
 8008158:	4b3c      	ldr	r3, [pc, #240]	; (800824c <loop_process+0x24c>)
 800815a:	22e8      	movs	r2, #232	; 0xe8
 800815c:	5c9b      	ldrb	r3, [r3, r2]
 800815e:	2b30      	cmp	r3, #48	; 0x30
 8008160:	d001      	beq.n	8008166 <loop_process+0x166>
			{
				Send_RS232_Command_OFF();
 8008162:	f005 fcd7 	bl	800db14 <Send_RS232_Command_OFF>
			}

			/* Get t0 */
			loop_time = HAL_GetTick();
 8008166:	f007 f915 	bl	800f394 <HAL_GetTick>
 800816a:	0002      	movs	r2, r0
 800816c:	4b38      	ldr	r3, [pc, #224]	; (8008250 <loop_process+0x250>)
 800816e:	601a      	str	r2, [r3, #0]

			is_loop_process_off_started = 1;
 8008170:	4b35      	ldr	r3, [pc, #212]	; (8008248 <loop_process+0x248>)
 8008172:	2201      	movs	r2, #1
 8008174:	701a      	strb	r2, [r3, #0]
				loop_state_process = NO_LOOP;

				is_loop_process_off_started = 0;
			}
		}
		break;
 8008176:	e05c      	b.n	8008232 <loop_process+0x232>
		else if (is_loop_process_off_started == 1)
 8008178:	4b33      	ldr	r3, [pc, #204]	; (8008248 <loop_process+0x248>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d158      	bne.n	8008232 <loop_process+0x232>
			if (pcb_config.loopoff == 1 && pcb_config.looptime >= 1)
 8008180:	4a32      	ldr	r2, [pc, #200]	; (800824c <loop_process+0x24c>)
 8008182:	2304      	movs	r3, #4
 8008184:	33ff      	adds	r3, #255	; 0xff
 8008186:	5cd3      	ldrb	r3, [r2, r3]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d141      	bne.n	8008210 <loop_process+0x210>
 800818c:	4a2f      	ldr	r2, [pc, #188]	; (800824c <loop_process+0x24c>)
 800818e:	2382      	movs	r3, #130	; 0x82
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	5cd3      	ldrb	r3, [r2, r3]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d03b      	beq.n	8008210 <loop_process+0x210>
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != true)
 8008198:	f007 f8fc 	bl	800f394 <HAL_GetTick>
 800819c:	0002      	movs	r2, r0
 800819e:	4b2c      	ldr	r3, [pc, #176]	; (8008250 <loop_process+0x250>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	1ad1      	subs	r1, r2, r3
 80081a4:	4a29      	ldr	r2, [pc, #164]	; (800824c <loop_process+0x24c>)
 80081a6:	2382      	movs	r3, #130	; 0x82
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	5cd3      	ldrb	r3, [r2, r3]
 80081ac:	001a      	movs	r2, r3
 80081ae:	0013      	movs	r3, r2
 80081b0:	015b      	lsls	r3, r3, #5
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	189b      	adds	r3, r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	4299      	cmp	r1, r3
 80081bc:	d31d      	bcc.n	80081fa <loop_process+0x1fa>
 80081be:	f004 fb89 	bl	800c8d4 <Motion_Is_Detected>
 80081c2:	0003      	movs	r3, r0
 80081c4:	001a      	movs	r2, r3
 80081c6:	2301      	movs	r3, #1
 80081c8:	4053      	eors	r3, r2
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d014      	beq.n	80081fa <loop_process+0x1fa>
					if (pcb_config.sSetIRON[0] - '0')
 80081d0:	4b1e      	ldr	r3, [pc, #120]	; (800824c <loop_process+0x24c>)
 80081d2:	22de      	movs	r2, #222	; 0xde
 80081d4:	5c9b      	ldrb	r3, [r3, r2]
 80081d6:	2b30      	cmp	r3, #48	; 0x30
 80081d8:	d002      	beq.n	80081e0 <loop_process+0x1e0>
						IRSend_NEC(false);
 80081da:	2000      	movs	r0, #0
 80081dc:	f7fe fc0c 	bl	80069f8 <IRSend_NEC>
					if (pcb_config.sSetRS232ON[0] - '0')
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <loop_process+0x24c>)
 80081e2:	22e8      	movs	r2, #232	; 0xe8
 80081e4:	5c9b      	ldrb	r3, [r3, r2]
 80081e6:	2b30      	cmp	r3, #48	; 0x30
 80081e8:	d001      	beq.n	80081ee <loop_process+0x1ee>
						Send_RS232_Command_OFF();
 80081ea:	f005 fc93 	bl	800db14 <Send_RS232_Command_OFF>
					loop_time = HAL_GetTick();
 80081ee:	f007 f8d1 	bl	800f394 <HAL_GetTick>
 80081f2:	0002      	movs	r2, r0
 80081f4:	4b16      	ldr	r3, [pc, #88]	; (8008250 <loop_process+0x250>)
 80081f6:	601a      	str	r2, [r3, #0]
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != true)
 80081f8:	e011      	b.n	800821e <loop_process+0x21e>
				else if (Motion_Is_Detected() == true)
 80081fa:	f004 fb6b 	bl	800c8d4 <Motion_Is_Detected>
 80081fe:	1e03      	subs	r3, r0, #0
 8008200:	d00d      	beq.n	800821e <loop_process+0x21e>
					loop_state_process = NO_LOOP;
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <loop_process+0x23c>)
 8008204:	2201      	movs	r2, #1
 8008206:	701a      	strb	r2, [r3, #0]
					is_loop_process_off_started = 0;
 8008208:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <loop_process+0x248>)
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != true)
 800820e:	e006      	b.n	800821e <loop_process+0x21e>
				loop_state_process = NO_LOOP;
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <loop_process+0x23c>)
 8008212:	2201      	movs	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
				is_loop_process_off_started = 0;
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <loop_process+0x248>)
 8008218:	2200      	movs	r2, #0
 800821a:	701a      	strb	r2, [r3, #0]
		break;
 800821c:	e009      	b.n	8008232 <loop_process+0x232>
				if (((HAL_GetTick() - loop_time) >= (pcb_config.looptime * 1000)) && Motion_Is_Detected() != true)
 800821e:	46c0      	nop			; (mov r8, r8)
		break;
 8008220:	e007      	b.n	8008232 <loop_process+0x232>
	}
	default:
		loop_state_process = LOOP_INIT;
 8008222:	4b06      	ldr	r3, [pc, #24]	; (800823c <loop_process+0x23c>)
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]
	}
}
 8008228:	e004      	b.n	8008234 <loop_process+0x234>
		break;
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	e002      	b.n	8008234 <loop_process+0x234>
		break;
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	e000      	b.n	8008234 <loop_process+0x234>
		break;
 8008232:	46c0      	nop			; (mov r8, r8)
}
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	200068a7 	.word	0x200068a7
 8008240:	200068a8 	.word	0x200068a8
 8008244:	200068a9 	.word	0x200068a9
 8008248:	200068aa 	.word	0x200068aa
 800824c:	20006db4 	.word	0x20006db4
 8008250:	200068ac 	.word	0x200068ac

08008254 <__NVIC_SystemReset>:
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008258:	f3bf 8f4f 	dsb	sy
}
 800825c:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800825e:	4b04      	ldr	r3, [pc, #16]	; (8008270 <__NVIC_SystemReset+0x1c>)
 8008260:	4a04      	ldr	r2, [pc, #16]	; (8008274 <__NVIC_SystemReset+0x20>)
 8008262:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008264:	f3bf 8f4f 	dsb	sy
}
 8008268:	46c0      	nop			; (mov r8, r8)
    __NOP();
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	e7fd      	b.n	800826a <__NVIC_SystemReset+0x16>
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	e000ed00 	.word	0xe000ed00
 8008274:	05fa0004 	.word	0x05fa0004

08008278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b08d      	sub	sp, #52	; 0x34
 800827c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800827e:	f007 f80d 	bl	800f29c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008282:	f000 f969 	bl	8008558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008286:	f000 fc57 	bl	8008b38 <MX_GPIO_Init>
  MX_ADC1_Init();
 800828a:	f000 f9b1 	bl	80085f0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800828e:	f000 fbb7 	bl	8008a00 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8008292:	f000 fa1d 	bl	80086d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8008296:	f000 fac7 	bl	8008828 <MX_SPI1_Init>
  MX_TIM1_Init();
 800829a:	f000 fb03 	bl	80088a4 <MX_TIM1_Init>
  MX_TIM14_Init();
 800829e:	f000 fb5d 	bl	800895c <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80082a2:	f000 fbfb 	bl	8008a9c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80082a6:	f000 fa53 	bl	8008750 <MX_RTC_Init>
  	  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
  	  JumpToApplication = (pFunction) JumpAddress;
  	  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
  	  JumpToApplication();
  	}*/
	SetPCB_Config();
 80082aa:	f004 fb1d 	bl	800c8e8 <SetPCB_Config>
	Set_tv_protocol();
 80082ae:	f7ff faa5 	bl	80077fc <Set_tv_protocol>
	USART2_ReInit();
 80082b2:	f000 fcdb 	bl	8008c6c <USART2_ReInit>
	SET_BIT(SYSCFG->CFGR1, (1 << 9));
 80082b6:	4b8a      	ldr	r3, [pc, #552]	; (80084e0 <main+0x268>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4b89      	ldr	r3, [pc, #548]	; (80084e0 <main+0x268>)
 80082bc:	2180      	movs	r1, #128	; 0x80
 80082be:	0089      	lsls	r1, r1, #2
 80082c0:	430a      	orrs	r2, r1
 80082c2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(SYSCFG->CFGR1, (1 << 9));
 80082c4:	4b86      	ldr	r3, [pc, #536]	; (80084e0 <main+0x268>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b85      	ldr	r3, [pc, #532]	; (80084e0 <main+0x268>)
 80082ca:	4986      	ldr	r1, [pc, #536]	; (80084e4 <main+0x26c>)
 80082cc:	400a      	ands	r2, r1
 80082ce:	601a      	str	r2, [r3, #0]
	SET_BIT(SYSCFG->CFGR1, (1 << 9));
 80082d0:	4b83      	ldr	r3, [pc, #524]	; (80084e0 <main+0x268>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b82      	ldr	r3, [pc, #520]	; (80084e0 <main+0x268>)
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	0089      	lsls	r1, r1, #2
 80082da:	430a      	orrs	r2, r1
 80082dc:	601a      	str	r2, [r3, #0]
	ReadAndSetConfig();
 80082de:	f002 ff6d 	bl	800b1bc <ReadAndSetConfig>
	Calculate_Temperatures_Offsets();
 80082e2:	f001 fc01 	bl	8009ae8 <Calculate_Temperatures_Offsets>
	Send_Version_Data();
 80082e6:	f005 fcbd 	bl	800dc64 <Send_Version_Data>
	// PWM for the IR sending
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80082ea:	4b7f      	ldr	r3, [pc, #508]	; (80084e8 <main+0x270>)
 80082ec:	2100      	movs	r1, #0
 80082ee:	0018      	movs	r0, r3
 80082f0:	f00c f850 	bl	8014394 <HAL_TIM_PWM_Start>
	TIM14->CCR1 = VAR;
 80082f4:	4b7d      	ldr	r3, [pc, #500]	; (80084ec <main+0x274>)
 80082f6:	227e      	movs	r2, #126	; 0x7e
 80082f8:	635a      	str	r2, [r3, #52]	; 0x34
	// 1us timer
	HAL_TIM_Base_Start(&htim1);
 80082fa:	4b7d      	ldr	r3, [pc, #500]	; (80084f0 <main+0x278>)
 80082fc:	0018      	movs	r0, r3
 80082fe:	f00b ff95 	bl	801422c <HAL_TIM_Base_Start>
	// take t0 for the main loop
	timestamp_100ms = HAL_GetTick();
 8008302:	f007 f847 	bl	800f394 <HAL_GetTick>
 8008306:	0002      	movs	r2, r0
 8008308:	4b7a      	ldr	r3, [pc, #488]	; (80084f4 <main+0x27c>)
 800830a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start(&hadc1);
 800830c:	4b7a      	ldr	r3, [pc, #488]	; (80084f8 <main+0x280>)
 800830e:	0018      	movs	r0, r3
 8008310:	f007 fb80 	bl	800fa14 <HAL_ADC_Start>
	// Start temp adc measurement
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8008314:	23fa      	movs	r3, #250	; 0xfa
 8008316:	009a      	lsls	r2, r3, #2
 8008318:	4b77      	ldr	r3, [pc, #476]	; (80084f8 <main+0x280>)
 800831a:	0011      	movs	r1, r2
 800831c:	0018      	movs	r0, r3
 800831e:	f007 fc03 	bl	800fb28 <HAL_ADC_PollForConversion>
	adcval = HAL_ADC_GetValue(&hadc1);
 8008322:	4b75      	ldr	r3, [pc, #468]	; (80084f8 <main+0x280>)
 8008324:	0018      	movs	r0, r3
 8008326:	f007 fc93 	bl	800fc50 <HAL_ADC_GetValue>
 800832a:	0002      	movs	r2, r0
 800832c:	4b73      	ldr	r3, [pc, #460]	; (80084fc <main+0x284>)
 800832e:	601a      	str	r2, [r3, #0]
	adcval2 = adcval * 3.3 / 4095 * 100;
 8008330:	4b72      	ldr	r3, [pc, #456]	; (80084fc <main+0x284>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	0018      	movs	r0, r3
 8008336:	f7fc fbbd 	bl	8004ab4 <__aeabi_ui2d>
 800833a:	4a71      	ldr	r2, [pc, #452]	; (8008500 <main+0x288>)
 800833c:	4b71      	ldr	r3, [pc, #452]	; (8008504 <main+0x28c>)
 800833e:	f7fb fd75 	bl	8003e2c <__aeabi_dmul>
 8008342:	0002      	movs	r2, r0
 8008344:	000b      	movs	r3, r1
 8008346:	0010      	movs	r0, r2
 8008348:	0019      	movs	r1, r3
 800834a:	2200      	movs	r2, #0
 800834c:	4b6e      	ldr	r3, [pc, #440]	; (8008508 <main+0x290>)
 800834e:	f7fb fa7f 	bl	8003850 <__aeabi_ddiv>
 8008352:	0002      	movs	r2, r0
 8008354:	000b      	movs	r3, r1
 8008356:	0010      	movs	r0, r2
 8008358:	0019      	movs	r1, r3
 800835a:	2200      	movs	r2, #0
 800835c:	4b6b      	ldr	r3, [pc, #428]	; (800850c <main+0x294>)
 800835e:	f7fb fd65 	bl	8003e2c <__aeabi_dmul>
 8008362:	0002      	movs	r2, r0
 8008364:	000b      	movs	r3, r1
 8008366:	0010      	movs	r0, r2
 8008368:	0019      	movs	r1, r3
 800836a:	f7fc fc11 	bl	8004b90 <__aeabi_d2f>
 800836e:	1c02      	adds	r2, r0, #0
 8008370:	4b67      	ldr	r3, [pc, #412]	; (8008510 <main+0x298>)
 8008372:	601a      	str	r2, [r3, #0]
	temperature_farenheit = (adcval2 * 9.0 / 5.0) + 30.25;
 8008374:	4b66      	ldr	r3, [pc, #408]	; (8008510 <main+0x298>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	1c18      	adds	r0, r3, #0
 800837a:	f7fc fbc1 	bl	8004b00 <__aeabi_f2d>
 800837e:	2200      	movs	r2, #0
 8008380:	4b64      	ldr	r3, [pc, #400]	; (8008514 <main+0x29c>)
 8008382:	f7fb fd53 	bl	8003e2c <__aeabi_dmul>
 8008386:	0002      	movs	r2, r0
 8008388:	000b      	movs	r3, r1
 800838a:	0010      	movs	r0, r2
 800838c:	0019      	movs	r1, r3
 800838e:	2200      	movs	r2, #0
 8008390:	4b61      	ldr	r3, [pc, #388]	; (8008518 <main+0x2a0>)
 8008392:	f7fb fa5d 	bl	8003850 <__aeabi_ddiv>
 8008396:	0002      	movs	r2, r0
 8008398:	000b      	movs	r3, r1
 800839a:	0010      	movs	r0, r2
 800839c:	0019      	movs	r1, r3
 800839e:	2200      	movs	r2, #0
 80083a0:	4b5e      	ldr	r3, [pc, #376]	; (800851c <main+0x2a4>)
 80083a2:	f7fa fef5 	bl	8003190 <__aeabi_dadd>
 80083a6:	0002      	movs	r2, r0
 80083a8:	000b      	movs	r3, r1
 80083aa:	0010      	movs	r0, r2
 80083ac:	0019      	movs	r1, r3
 80083ae:	f7fc fbef 	bl	8004b90 <__aeabi_d2f>
 80083b2:	1c02      	adds	r2, r0, #0
 80083b4:	4b5a      	ldr	r3, [pc, #360]	; (8008520 <main+0x2a8>)
 80083b6:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80083b8:	4b4f      	ldr	r3, [pc, #316]	; (80084f8 <main+0x280>)
 80083ba:	0018      	movs	r0, r3
 80083bc:	f007 fb78 	bl	800fab0 <HAL_ADC_Stop>
	init_the_thing();
 80083c0:	f010 fc3c 	bl	8018c3c <init_the_thing>
	Init_WebAPP();
 80083c4:	f7fc fece 	bl	8005164 <Init_WebAPP>
	timestamp_led = HAL_GetTick();
 80083c8:	f006 ffe4 	bl	800f394 <HAL_GetTick>
 80083cc:	0002      	movs	r2, r0
 80083ce:	4b55      	ldr	r3, [pc, #340]	; (8008524 <main+0x2ac>)
 80083d0:	601a      	str	r2, [r3, #0]
	// GET app t0
	timestamp_btn = HAL_GetTick();
 80083d2:	f006 ffdf 	bl	800f394 <HAL_GetTick>
 80083d6:	0002      	movs	r2, r0
 80083d8:	4b53      	ldr	r3, [pc, #332]	; (8008528 <main+0x2b0>)
 80083da:	601a      	str	r2, [r3, #0]
	timesynch_counter = HAL_GetTick();
 80083dc:	f006 ffda 	bl	800f394 <HAL_GetTick>
 80083e0:	0002      	movs	r2, r0
 80083e2:	4b52      	ldr	r3, [pc, #328]	; (800852c <main+0x2b4>)
 80083e4:	601a      	str	r2, [r3, #0]
	recursion_counter = HAL_GetTick();
 80083e6:	f006 ffd5 	bl	800f394 <HAL_GetTick>
 80083ea:	0002      	movs	r2, r0
 80083ec:	4b50      	ldr	r3, [pc, #320]	; (8008530 <main+0x2b8>)
 80083ee:	601a      	str	r2, [r3, #0]
	char stringrer[] = "PCB Board Initialization done2, starting loop";
 80083f0:	003b      	movs	r3, r7
 80083f2:	4a50      	ldr	r2, [pc, #320]	; (8008534 <main+0x2bc>)
 80083f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80083f6:	c313      	stmia	r3!, {r0, r1, r4}
 80083f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80083fa:	c313      	stmia	r3!, {r0, r1, r4}
 80083fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80083fe:	c313      	stmia	r3!, {r0, r1, r4}
 8008400:	ca03      	ldmia	r2!, {r0, r1}
 8008402:	c303      	stmia	r3!, {r0, r1}
 8008404:	8812      	ldrh	r2, [r2, #0]
 8008406:	801a      	strh	r2, [r3, #0]
	LogToBufferLog(stringrer, sizeof(stringrer));
 8008408:	003b      	movs	r3, r7
 800840a:	212e      	movs	r1, #46	; 0x2e
 800840c:	0018      	movs	r0, r3
 800840e:	f00f fc01 	bl	8017c14 <LogToBufferLog>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (locked) Task_WebAPP();
 8008412:	4b49      	ldr	r3, [pc, #292]	; (8008538 <main+0x2c0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <main+0x1a6>
 800841a:	f7fc ff7b 	bl	8005314 <Task_WebAPP>
	if(firmware_update) NVIC_SystemReset();
 800841e:	4b47      	ldr	r3, [pc, #284]	; (800853c <main+0x2c4>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <main+0x1b2>
 8008426:	f7ff ff15 	bl	8008254 <__NVIC_SystemReset>
	Uart_process();
 800842a:	f005 f813 	bl	800d454 <Uart_process>
	if (start_pir) Motion_Detection_Process();
 800842e:	4b44      	ldr	r3, [pc, #272]	; (8008540 <main+0x2c8>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <main+0x1c2>
 8008436:	f004 f943 	bl	800c6c0 <Motion_Detection_Process>
	// Blink LED1 each 500 ms
	Status_Led();
 800843a:	f001 fa21 	bl	8009880 <Status_Led>
	HeartBeatLedStart();
 800843e:	f001 f9e1 	bl	8009804 <HeartBeatLedStart>
	// Buttons reading process
	Btn1_Process();
 8008442:	f7ff fc61 	bl	8007d08 <Btn1_Process>
	Btn2_Process();
 8008446:	f7ff fcf9 	bl	8007e3c <Btn2_Process>
	// Btn3_Process();
	// Lock the IR receive process after 60s
	if (((HAL_GetTick() - timestamp_1min_lock) >= 60000) && !locked)		locked = true;
 800844a:	f006 ffa3 	bl	800f394 <HAL_GetTick>
 800844e:	0002      	movs	r2, r0
 8008450:	4b3c      	ldr	r3, [pc, #240]	; (8008544 <main+0x2cc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	4a3c      	ldr	r2, [pc, #240]	; (8008548 <main+0x2d0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d906      	bls.n	800846a <main+0x1f2>
 800845c:	4b36      	ldr	r3, [pc, #216]	; (8008538 <main+0x2c0>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d102      	bne.n	800846a <main+0x1f2>
 8008464:	4b34      	ldr	r3, [pc, #208]	; (8008538 <main+0x2c0>)
 8008466:	2201      	movs	r2, #1
 8008468:	601a      	str	r2, [r3, #0]
	// Keep receiving IR until locked
	if (!locked)
 800846a:	4b33      	ldr	r3, [pc, #204]	; (8008538 <main+0x2c0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d108      	bne.n	8008484 <main+0x20c>
	{
		if (on_receive)
 8008472:	4b36      	ldr	r3, [pc, #216]	; (800854c <main+0x2d4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <main+0x208>
			IR_Receive_Process();
 800847a:	f7fe fc7f 	bl	8006d7c <IR_Receive_Process>
 800847e:	e001      	b.n	8008484 <main+0x20c>
		else
			IR_Receive_Process_OFF();
 8008480:	f7fe ff20 	bl	80072c4 <IR_Receive_Process_OFF>
	}
	// Read temperature each 10 sec
	if ((HAL_GetTick() - timestamp_100ms) >= 15000 && locked)
 8008484:	f006 ff86 	bl	800f394 <HAL_GetTick>
 8008488:	0002      	movs	r2, r0
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <main+0x27c>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	4a2f      	ldr	r2, [pc, #188]	; (8008550 <main+0x2d8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d90e      	bls.n	80084b4 <main+0x23c>
 8008496:	4b28      	ldr	r3, [pc, #160]	; (8008538 <main+0x2c0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <main+0x23c>
	{
		timestamp_100ms = HAL_GetTick();
 800849e:	f006 ff79 	bl	800f394 <HAL_GetTick>
 80084a2:	0002      	movs	r2, r0
 80084a4:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <main+0x27c>)
 80084a6:	601a      	str	r2, [r3, #0]
		start_pir = true;
 80084a8:	4b25      	ldr	r3, [pc, #148]	; (8008540 <main+0x2c8>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	701a      	strb	r2, [r3, #0]
		MeasureTemperature(0);
 80084ae:	2000      	movs	r0, #0
 80084b0:	f000 fc64 	bl	8008d7c <MeasureTemperature>
	}
	//  Check buttons each 60 ms
	if ((HAL_GetTick() - timestamp_algo) >= 60)
 80084b4:	f006 ff6e 	bl	800f394 <HAL_GetTick>
 80084b8:	0002      	movs	r2, r0
 80084ba:	4b26      	ldr	r3, [pc, #152]	; (8008554 <main+0x2dc>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b3b      	cmp	r3, #59	; 0x3b
 80084c2:	d906      	bls.n	80084d2 <main+0x25a>
	{
		timestamp_algo = HAL_GetTick();
 80084c4:	f006 ff66 	bl	800f394 <HAL_GetTick>
 80084c8:	0002      	movs	r2, r0
 80084ca:	4b22      	ldr	r3, [pc, #136]	; (8008554 <main+0x2dc>)
 80084cc:	601a      	str	r2, [r3, #0]
		ButtonsAlgorithm();
 80084ce:	f000 fda7 	bl	8009020 <ButtonsAlgorithm>
	}
	// MAIN PIR sensor and temp sensor algorithm
	MainAlgorithm();
 80084d2:	f001 f883 	bl	80095dc <MainAlgorithm>
	TimeSyncAlgorithm();
 80084d6:	f000 fefd 	bl	80092d4 <TimeSyncAlgorithm>
	RecursionAlarmAlgorithm();
 80084da:	f000 ff8b 	bl	80093f4 <RecursionAlarmAlgorithm>
	if (locked) Task_WebAPP();
 80084de:	e798      	b.n	8008412 <main+0x19a>
 80084e0:	40010000 	.word	0x40010000
 80084e4:	fffffdff 	.word	0xfffffdff
 80084e8:	20006a44 	.word	0x20006a44
 80084ec:	40002000 	.word	0x40002000
 80084f0:	200069f8 	.word	0x200069f8
 80084f4:	20006bd0 	.word	0x20006bd0
 80084f8:	200068b0 	.word	0x200068b0
 80084fc:	20006d50 	.word	0x20006d50
 8008500:	66666666 	.word	0x66666666
 8008504:	400a6666 	.word	0x400a6666
 8008508:	40affe00 	.word	0x40affe00
 800850c:	40590000 	.word	0x40590000
 8008510:	20006d54 	.word	0x20006d54
 8008514:	40220000 	.word	0x40220000
 8008518:	40140000 	.word	0x40140000
 800851c:	403e4000 	.word	0x403e4000
 8008520:	20006d58 	.word	0x20006d58
 8008524:	20006bd8 	.word	0x20006bd8
 8008528:	20006bdc 	.word	0x20006bdc
 800852c:	20006bb8 	.word	0x20006bb8
 8008530:	20006bbc 	.word	0x20006bbc
 8008534:	080255ac 	.word	0x080255ac
 8008538:	20005010 	.word	0x20005010
 800853c:	20006d9c 	.word	0x20006d9c
 8008540:	20006d5c 	.word	0x20006d5c
 8008544:	20006bcc 	.word	0x20006bcc
 8008548:	0000ea5f 	.word	0x0000ea5f
 800854c:	20005014 	.word	0x20005014
 8008550:	00003a97 	.word	0x00003a97
 8008554:	20006bd4 	.word	0x20006bd4

08008558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b093      	sub	sp, #76	; 0x4c
 800855c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800855e:	2410      	movs	r4, #16
 8008560:	193b      	adds	r3, r7, r4
 8008562:	0018      	movs	r0, r3
 8008564:	2338      	movs	r3, #56	; 0x38
 8008566:	001a      	movs	r2, r3
 8008568:	2100      	movs	r1, #0
 800856a:	f01a fb15 	bl	8022b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800856e:	003b      	movs	r3, r7
 8008570:	0018      	movs	r0, r3
 8008572:	2310      	movs	r3, #16
 8008574:	001a      	movs	r2, r3
 8008576:	2100      	movs	r1, #0
 8008578:	f01a fb0e 	bl	8022b98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	0018      	movs	r0, r3
 8008582:	f009 fccb 	bl	8011f1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008586:	193b      	adds	r3, r7, r4
 8008588:	220a      	movs	r2, #10
 800858a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800858c:	193b      	adds	r3, r7, r4
 800858e:	2280      	movs	r2, #128	; 0x80
 8008590:	0052      	lsls	r2, r2, #1
 8008592:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8008594:	0021      	movs	r1, r4
 8008596:	187b      	adds	r3, r7, r1
 8008598:	2200      	movs	r2, #0
 800859a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800859c:	187b      	adds	r3, r7, r1
 800859e:	2240      	movs	r2, #64	; 0x40
 80085a0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80085a2:	187b      	adds	r3, r7, r1
 80085a4:	2201      	movs	r2, #1
 80085a6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80085a8:	187b      	adds	r3, r7, r1
 80085aa:	2200      	movs	r2, #0
 80085ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085ae:	187b      	adds	r3, r7, r1
 80085b0:	0018      	movs	r0, r3
 80085b2:	f009 fcff 	bl	8011fb4 <HAL_RCC_OscConfig>
 80085b6:	1e03      	subs	r3, r0, #0
 80085b8:	d001      	beq.n	80085be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80085ba:	f004 f823 	bl	800c604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085be:	003b      	movs	r3, r7
 80085c0:	2207      	movs	r2, #7
 80085c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80085c4:	003b      	movs	r3, r7
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085ca:	003b      	movs	r3, r7
 80085cc:	2200      	movs	r2, #0
 80085ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80085d0:	003b      	movs	r3, r7
 80085d2:	2200      	movs	r2, #0
 80085d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80085d6:	003b      	movs	r3, r7
 80085d8:	2100      	movs	r1, #0
 80085da:	0018      	movs	r0, r3
 80085dc:	f00a f804 	bl	80125e8 <HAL_RCC_ClockConfig>
 80085e0:	1e03      	subs	r3, r0, #0
 80085e2:	d001      	beq.n	80085e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80085e4:	f004 f80e 	bl	800c604 <Error_Handler>
  }
}
 80085e8:	46c0      	nop			; (mov r8, r8)
 80085ea:	46bd      	mov	sp, r7
 80085ec:	b013      	add	sp, #76	; 0x4c
 80085ee:	bd90      	pop	{r4, r7, pc}

080085f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80085f6:	1d3b      	adds	r3, r7, #4
 80085f8:	0018      	movs	r0, r3
 80085fa:	230c      	movs	r3, #12
 80085fc:	001a      	movs	r2, r3
 80085fe:	2100      	movs	r1, #0
 8008600:	f01a faca 	bl	8022b98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008604:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008606:	4a30      	ldr	r2, [pc, #192]	; (80086c8 <MX_ADC1_Init+0xd8>)
 8008608:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800860a:	4b2e      	ldr	r3, [pc, #184]	; (80086c4 <MX_ADC1_Init+0xd4>)
 800860c:	2280      	movs	r2, #128	; 0x80
 800860e:	0612      	lsls	r2, r2, #24
 8008610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008612:	4b2c      	ldr	r3, [pc, #176]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008614:	2200      	movs	r2, #0
 8008616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008618:	4b2a      	ldr	r3, [pc, #168]	; (80086c4 <MX_ADC1_Init+0xd4>)
 800861a:	2200      	movs	r2, #0
 800861c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800861e:	4b29      	ldr	r3, [pc, #164]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008620:	2200      	movs	r2, #0
 8008622:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008624:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008626:	2204      	movs	r2, #4
 8008628:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800862a:	4b26      	ldr	r3, [pc, #152]	; (80086c4 <MX_ADC1_Init+0xd4>)
 800862c:	2200      	movs	r2, #0
 800862e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8008630:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008632:	2200      	movs	r2, #0
 8008634:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008636:	4b23      	ldr	r3, [pc, #140]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008638:	2200      	movs	r2, #0
 800863a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800863c:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <MX_ADC1_Init+0xd4>)
 800863e:	2201      	movs	r2, #1
 8008640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008642:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008644:	2220      	movs	r2, #32
 8008646:	2100      	movs	r1, #0
 8008648:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800864a:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <MX_ADC1_Init+0xd4>)
 800864c:	2200      	movs	r2, #0
 800864e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008650:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008652:	2200      	movs	r2, #0
 8008654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008656:	4b1b      	ldr	r3, [pc, #108]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008658:	222c      	movs	r2, #44	; 0x2c
 800865a:	2100      	movs	r1, #0
 800865c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800865e:	4b19      	ldr	r3, [pc, #100]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008660:	2200      	movs	r2, #0
 8008662:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8008664:	4b17      	ldr	r3, [pc, #92]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008666:	2207      	movs	r2, #7
 8008668:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800866a:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <MX_ADC1_Init+0xd4>)
 800866c:	2207      	movs	r2, #7
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8008670:	4b14      	ldr	r3, [pc, #80]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008672:	223c      	movs	r2, #60	; 0x3c
 8008674:	2100      	movs	r1, #0
 8008676:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8008678:	4b12      	ldr	r3, [pc, #72]	; (80086c4 <MX_ADC1_Init+0xd4>)
 800867a:	2200      	movs	r2, #0
 800867c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800867e:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <MX_ADC1_Init+0xd4>)
 8008680:	0018      	movs	r0, r3
 8008682:	f007 f81f 	bl	800f6c4 <HAL_ADC_Init>
 8008686:	1e03      	subs	r3, r0, #0
 8008688:	d001      	beq.n	800868e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800868a:	f003 ffbb 	bl	800c604 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	4a0e      	ldr	r2, [pc, #56]	; (80086cc <MX_ADC1_Init+0xdc>)
 8008692:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008694:	1d3b      	adds	r3, r7, #4
 8008696:	2200      	movs	r2, #0
 8008698:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800869a:	1d3b      	adds	r3, r7, #4
 800869c:	2200      	movs	r2, #0
 800869e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80086a0:	1d3a      	adds	r2, r7, #4
 80086a2:	4b08      	ldr	r3, [pc, #32]	; (80086c4 <MX_ADC1_Init+0xd4>)
 80086a4:	0011      	movs	r1, r2
 80086a6:	0018      	movs	r0, r3
 80086a8:	f007 fade 	bl	800fc68 <HAL_ADC_ConfigChannel>
 80086ac:	1e03      	subs	r3, r0, #0
 80086ae:	d001      	beq.n	80086b4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80086b0:	f003 ffa8 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80086b4:	4b03      	ldr	r3, [pc, #12]	; (80086c4 <MX_ADC1_Init+0xd4>)
 80086b6:	0018      	movs	r0, r3
 80086b8:	f007 fe6c 	bl	8010394 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 80086bc:	46c0      	nop			; (mov r8, r8)
 80086be:	46bd      	mov	sp, r7
 80086c0:	b004      	add	sp, #16
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200068b0 	.word	0x200068b0
 80086c8:	40012400 	.word	0x40012400
 80086cc:	14000020 	.word	0x14000020

080086d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80086d4:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <MX_I2C1_Init+0x74>)
 80086d6:	4a1c      	ldr	r2, [pc, #112]	; (8008748 <MX_I2C1_Init+0x78>)
 80086d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80086da:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <MX_I2C1_Init+0x74>)
 80086dc:	4a1b      	ldr	r2, [pc, #108]	; (800874c <MX_I2C1_Init+0x7c>)
 80086de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80086e0:	4b18      	ldr	r3, [pc, #96]	; (8008744 <MX_I2C1_Init+0x74>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80086e6:	4b17      	ldr	r3, [pc, #92]	; (8008744 <MX_I2C1_Init+0x74>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80086ec:	4b15      	ldr	r3, [pc, #84]	; (8008744 <MX_I2C1_Init+0x74>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80086f2:	4b14      	ldr	r3, [pc, #80]	; (8008744 <MX_I2C1_Init+0x74>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80086f8:	4b12      	ldr	r3, [pc, #72]	; (8008744 <MX_I2C1_Init+0x74>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <MX_I2C1_Init+0x74>)
 8008700:	2200      	movs	r2, #0
 8008702:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008704:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <MX_I2C1_Init+0x74>)
 8008706:	2200      	movs	r2, #0
 8008708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <MX_I2C1_Init+0x74>)
 800870c:	0018      	movs	r0, r3
 800870e:	f008 fd61 	bl	80111d4 <HAL_I2C_Init>
 8008712:	1e03      	subs	r3, r0, #0
 8008714:	d001      	beq.n	800871a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008716:	f003 ff75 	bl	800c604 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800871a:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <MX_I2C1_Init+0x74>)
 800871c:	2100      	movs	r1, #0
 800871e:	0018      	movs	r0, r3
 8008720:	f009 fb64 	bl	8011dec <HAL_I2CEx_ConfigAnalogFilter>
 8008724:	1e03      	subs	r3, r0, #0
 8008726:	d001      	beq.n	800872c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008728:	f003 ff6c 	bl	800c604 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <MX_I2C1_Init+0x74>)
 800872e:	2100      	movs	r1, #0
 8008730:	0018      	movs	r0, r3
 8008732:	f009 fba7 	bl	8011e84 <HAL_I2CEx_ConfigDigitalFilter>
 8008736:	1e03      	subs	r3, r0, #0
 8008738:	d001      	beq.n	800873e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800873a:	f003 ff63 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20006914 	.word	0x20006914
 8008748:	40005400 	.word	0x40005400
 800874c:	00303d5b 	.word	0x00303d5b

08008750 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008756:	4b32      	ldr	r3, [pc, #200]	; (8008820 <MX_RTC_Init+0xd0>)
 8008758:	4a32      	ldr	r2, [pc, #200]	; (8008824 <MX_RTC_Init+0xd4>)
 800875a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800875c:	4b30      	ldr	r3, [pc, #192]	; (8008820 <MX_RTC_Init+0xd0>)
 800875e:	2200      	movs	r2, #0
 8008760:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8008762:	4b2f      	ldr	r3, [pc, #188]	; (8008820 <MX_RTC_Init+0xd0>)
 8008764:	227f      	movs	r2, #127	; 0x7f
 8008766:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8008768:	4b2d      	ldr	r3, [pc, #180]	; (8008820 <MX_RTC_Init+0xd0>)
 800876a:	22ff      	movs	r2, #255	; 0xff
 800876c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800876e:	4b2c      	ldr	r3, [pc, #176]	; (8008820 <MX_RTC_Init+0xd0>)
 8008770:	2200      	movs	r2, #0
 8008772:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008774:	4b2a      	ldr	r3, [pc, #168]	; (8008820 <MX_RTC_Init+0xd0>)
 8008776:	2200      	movs	r2, #0
 8008778:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800877a:	4b29      	ldr	r3, [pc, #164]	; (8008820 <MX_RTC_Init+0xd0>)
 800877c:	2200      	movs	r2, #0
 800877e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008780:	4b27      	ldr	r3, [pc, #156]	; (8008820 <MX_RTC_Init+0xd0>)
 8008782:	2280      	movs	r2, #128	; 0x80
 8008784:	05d2      	lsls	r2, r2, #23
 8008786:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8008788:	4b25      	ldr	r3, [pc, #148]	; (8008820 <MX_RTC_Init+0xd0>)
 800878a:	2200      	movs	r2, #0
 800878c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800878e:	4b24      	ldr	r3, [pc, #144]	; (8008820 <MX_RTC_Init+0xd0>)
 8008790:	0018      	movs	r0, r3
 8008792:	f00a fa5b 	bl	8012c4c <HAL_RTC_Init>
 8008796:	1e03      	subs	r3, r0, #0
 8008798:	d001      	beq.n	800879e <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 800879a:	f003 ff33 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  RTC_TimeTypeDef sTime = {0};
 800879e:	1d3b      	adds	r3, r7, #4
 80087a0:	0018      	movs	r0, r3
 80087a2:	2314      	movs	r3, #20
 80087a4:	001a      	movs	r2, r3
 80087a6:	2100      	movs	r1, #0
 80087a8:	f01a f9f6 	bl	8022b98 <memset>
  RTC_DateTypeDef sDate = {0};
 80087ac:	003b      	movs	r3, r7
 80087ae:	2200      	movs	r2, #0
 80087b0:	601a      	str	r2, [r3, #0]
  sTime.Hours = 0x0;
 80087b2:	1d3b      	adds	r3, r7, #4
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x0;
 80087b8:	1d3b      	adds	r3, r7, #4
 80087ba:	2200      	movs	r2, #0
 80087bc:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x0;
 80087be:	1d3b      	adds	r3, r7, #4
 80087c0:	2200      	movs	r2, #0
 80087c2:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x0;
 80087c4:	1d3b      	adds	r3, r7, #4
 80087c6:	2200      	movs	r2, #0
 80087c8:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	2200      	movs	r2, #0
 80087ce:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80087d0:	1d3b      	adds	r3, r7, #4
 80087d2:	2200      	movs	r2, #0
 80087d4:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80087d6:	1d39      	adds	r1, r7, #4
 80087d8:	4b11      	ldr	r3, [pc, #68]	; (8008820 <MX_RTC_Init+0xd0>)
 80087da:	2201      	movs	r2, #1
 80087dc:	0018      	movs	r0, r3
 80087de:	f00a fad7 	bl	8012d90 <HAL_RTC_SetTime>
 80087e2:	1e03      	subs	r3, r0, #0
 80087e4:	d001      	beq.n	80087ea <MX_RTC_Init+0x9a>
	{
	  Error_Handler();
 80087e6:	f003 ff0d 	bl	800c604 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80087ea:	003b      	movs	r3, r7
 80087ec:	2201      	movs	r2, #1
 80087ee:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80087f0:	003b      	movs	r3, r7
 80087f2:	2201      	movs	r2, #1
 80087f4:	705a      	strb	r2, [r3, #1]
	sDate.Date = 0x1;
 80087f6:	003b      	movs	r3, r7
 80087f8:	2201      	movs	r2, #1
 80087fa:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0x0;
 80087fc:	003b      	movs	r3, r7
 80087fe:	2200      	movs	r2, #0
 8008800:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8008802:	0039      	movs	r1, r7
 8008804:	4b06      	ldr	r3, [pc, #24]	; (8008820 <MX_RTC_Init+0xd0>)
 8008806:	2201      	movs	r2, #1
 8008808:	0018      	movs	r0, r3
 800880a:	f00a fbc5 	bl	8012f98 <HAL_RTC_SetDate>
 800880e:	1e03      	subs	r3, r0, #0
 8008810:	d001      	beq.n	8008816 <MX_RTC_Init+0xc6>
	{
	  Error_Handler();
 8008812:	f003 fef7 	bl	800c604 <Error_Handler>
	}
  /* USER CODE END RTC_Init 2 */

}
 8008816:	46c0      	nop			; (mov r8, r8)
 8008818:	46bd      	mov	sp, r7
 800881a:	b006      	add	sp, #24
 800881c:	bd80      	pop	{r7, pc}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	20006968 	.word	0x20006968
 8008824:	40002800 	.word	0x40002800

08008828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800882c:	4b1b      	ldr	r3, [pc, #108]	; (800889c <MX_SPI1_Init+0x74>)
 800882e:	4a1c      	ldr	r2, [pc, #112]	; (80088a0 <MX_SPI1_Init+0x78>)
 8008830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008832:	4b1a      	ldr	r3, [pc, #104]	; (800889c <MX_SPI1_Init+0x74>)
 8008834:	2282      	movs	r2, #130	; 0x82
 8008836:	0052      	lsls	r2, r2, #1
 8008838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800883a:	4b18      	ldr	r3, [pc, #96]	; (800889c <MX_SPI1_Init+0x74>)
 800883c:	2200      	movs	r2, #0
 800883e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008840:	4b16      	ldr	r3, [pc, #88]	; (800889c <MX_SPI1_Init+0x74>)
 8008842:	22e0      	movs	r2, #224	; 0xe0
 8008844:	00d2      	lsls	r2, r2, #3
 8008846:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008848:	4b14      	ldr	r3, [pc, #80]	; (800889c <MX_SPI1_Init+0x74>)
 800884a:	2200      	movs	r2, #0
 800884c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <MX_SPI1_Init+0x74>)
 8008850:	2200      	movs	r2, #0
 8008852:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008854:	4b11      	ldr	r3, [pc, #68]	; (800889c <MX_SPI1_Init+0x74>)
 8008856:	2280      	movs	r2, #128	; 0x80
 8008858:	0092      	lsls	r2, r2, #2
 800885a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800885c:	4b0f      	ldr	r3, [pc, #60]	; (800889c <MX_SPI1_Init+0x74>)
 800885e:	2200      	movs	r2, #0
 8008860:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008862:	4b0e      	ldr	r3, [pc, #56]	; (800889c <MX_SPI1_Init+0x74>)
 8008864:	2200      	movs	r2, #0
 8008866:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008868:	4b0c      	ldr	r3, [pc, #48]	; (800889c <MX_SPI1_Init+0x74>)
 800886a:	2200      	movs	r2, #0
 800886c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800886e:	4b0b      	ldr	r3, [pc, #44]	; (800889c <MX_SPI1_Init+0x74>)
 8008870:	2200      	movs	r2, #0
 8008872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008874:	4b09      	ldr	r3, [pc, #36]	; (800889c <MX_SPI1_Init+0x74>)
 8008876:	2207      	movs	r2, #7
 8008878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800887a:	4b08      	ldr	r3, [pc, #32]	; (800889c <MX_SPI1_Init+0x74>)
 800887c:	2200      	movs	r2, #0
 800887e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008880:	4b06      	ldr	r3, [pc, #24]	; (800889c <MX_SPI1_Init+0x74>)
 8008882:	2208      	movs	r2, #8
 8008884:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <MX_SPI1_Init+0x74>)
 8008888:	0018      	movs	r0, r3
 800888a:	f00a fd57 	bl	801333c <HAL_SPI_Init>
 800888e:	1e03      	subs	r3, r0, #0
 8008890:	d001      	beq.n	8008896 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008892:	f003 feb7 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20006994 	.word	0x20006994
 80088a0:	40013000 	.word	0x40013000

080088a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088aa:	2310      	movs	r3, #16
 80088ac:	18fb      	adds	r3, r7, r3
 80088ae:	0018      	movs	r0, r3
 80088b0:	2310      	movs	r3, #16
 80088b2:	001a      	movs	r2, r3
 80088b4:	2100      	movs	r1, #0
 80088b6:	f01a f96f 	bl	8022b98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088ba:	1d3b      	adds	r3, r7, #4
 80088bc:	0018      	movs	r0, r3
 80088be:	230c      	movs	r3, #12
 80088c0:	001a      	movs	r2, r3
 80088c2:	2100      	movs	r1, #0
 80088c4:	f01a f968 	bl	8022b98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80088c8:	4b21      	ldr	r3, [pc, #132]	; (8008950 <MX_TIM1_Init+0xac>)
 80088ca:	4a22      	ldr	r2, [pc, #136]	; (8008954 <MX_TIM1_Init+0xb0>)
 80088cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <MX_TIM1_Init+0xac>)
 80088d0:	220f      	movs	r2, #15
 80088d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088d4:	4b1e      	ldr	r3, [pc, #120]	; (8008950 <MX_TIM1_Init+0xac>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80088da:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <MX_TIM1_Init+0xac>)
 80088dc:	4a1e      	ldr	r2, [pc, #120]	; (8008958 <MX_TIM1_Init+0xb4>)
 80088de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088e0:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <MX_TIM1_Init+0xac>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80088e6:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <MX_TIM1_Init+0xac>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088ec:	4b18      	ldr	r3, [pc, #96]	; (8008950 <MX_TIM1_Init+0xac>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80088f2:	4b17      	ldr	r3, [pc, #92]	; (8008950 <MX_TIM1_Init+0xac>)
 80088f4:	0018      	movs	r0, r3
 80088f6:	f00b fc41 	bl	801417c <HAL_TIM_Base_Init>
 80088fa:	1e03      	subs	r3, r0, #0
 80088fc:	d001      	beq.n	8008902 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80088fe:	f003 fe81 	bl	800c604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008902:	2110      	movs	r1, #16
 8008904:	187b      	adds	r3, r7, r1
 8008906:	2280      	movs	r2, #128	; 0x80
 8008908:	0152      	lsls	r2, r2, #5
 800890a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800890c:	187a      	adds	r2, r7, r1
 800890e:	4b10      	ldr	r3, [pc, #64]	; (8008950 <MX_TIM1_Init+0xac>)
 8008910:	0011      	movs	r1, r2
 8008912:	0018      	movs	r0, r3
 8008914:	f00b ff28 	bl	8014768 <HAL_TIM_ConfigClockSource>
 8008918:	1e03      	subs	r3, r0, #0
 800891a:	d001      	beq.n	8008920 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800891c:	f003 fe72 	bl	800c604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008920:	1d3b      	adds	r3, r7, #4
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008926:	1d3b      	adds	r3, r7, #4
 8008928:	2200      	movs	r2, #0
 800892a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800892c:	1d3b      	adds	r3, r7, #4
 800892e:	2200      	movs	r2, #0
 8008930:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008932:	1d3a      	adds	r2, r7, #4
 8008934:	4b06      	ldr	r3, [pc, #24]	; (8008950 <MX_TIM1_Init+0xac>)
 8008936:	0011      	movs	r1, r2
 8008938:	0018      	movs	r0, r3
 800893a:	f00c fbfd 	bl	8015138 <HAL_TIMEx_MasterConfigSynchronization>
 800893e:	1e03      	subs	r3, r0, #0
 8008940:	d001      	beq.n	8008946 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8008942:	f003 fe5f 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	46bd      	mov	sp, r7
 800894a:	b008      	add	sp, #32
 800894c:	bd80      	pop	{r7, pc}
 800894e:	46c0      	nop			; (mov r8, r8)
 8008950:	200069f8 	.word	0x200069f8
 8008954:	40012c00 	.word	0x40012c00
 8008958:	0000fffe 	.word	0x0000fffe

0800895c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	0018      	movs	r0, r3
 8008966:	231c      	movs	r3, #28
 8008968:	001a      	movs	r2, r3
 800896a:	2100      	movs	r1, #0
 800896c:	f01a f914 	bl	8022b98 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8008970:	4b20      	ldr	r3, [pc, #128]	; (80089f4 <MX_TIM14_Init+0x98>)
 8008972:	4a21      	ldr	r2, [pc, #132]	; (80089f8 <MX_TIM14_Init+0x9c>)
 8008974:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8008976:	4b1f      	ldr	r3, [pc, #124]	; (80089f4 <MX_TIM14_Init+0x98>)
 8008978:	2200      	movs	r2, #0
 800897a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800897c:	4b1d      	ldr	r3, [pc, #116]	; (80089f4 <MX_TIM14_Init+0x98>)
 800897e:	2200      	movs	r2, #0
 8008980:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 420;
 8008982:	4b1c      	ldr	r3, [pc, #112]	; (80089f4 <MX_TIM14_Init+0x98>)
 8008984:	22d2      	movs	r2, #210	; 0xd2
 8008986:	0052      	lsls	r2, r2, #1
 8008988:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800898a:	4b1a      	ldr	r3, [pc, #104]	; (80089f4 <MX_TIM14_Init+0x98>)
 800898c:	2200      	movs	r2, #0
 800898e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008990:	4b18      	ldr	r3, [pc, #96]	; (80089f4 <MX_TIM14_Init+0x98>)
 8008992:	2200      	movs	r2, #0
 8008994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8008996:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <MX_TIM14_Init+0x98>)
 8008998:	0018      	movs	r0, r3
 800899a:	f00b fbef 	bl	801417c <HAL_TIM_Base_Init>
 800899e:	1e03      	subs	r3, r0, #0
 80089a0:	d001      	beq.n	80089a6 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 80089a2:	f003 fe2f 	bl	800c604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80089a6:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <MX_TIM14_Init+0x98>)
 80089a8:	0018      	movs	r0, r3
 80089aa:	f00b fc93 	bl	80142d4 <HAL_TIM_PWM_Init>
 80089ae:	1e03      	subs	r3, r0, #0
 80089b0:	d001      	beq.n	80089b6 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80089b2:	f003 fe27 	bl	800c604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80089b6:	1d3b      	adds	r3, r7, #4
 80089b8:	2260      	movs	r2, #96	; 0x60
 80089ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 631;
 80089bc:	1d3b      	adds	r3, r7, #4
 80089be:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <MX_TIM14_Init+0xa0>)
 80089c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80089c2:	1d3b      	adds	r3, r7, #4
 80089c4:	2200      	movs	r2, #0
 80089c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80089c8:	1d3b      	adds	r3, r7, #4
 80089ca:	2200      	movs	r2, #0
 80089cc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80089ce:	1d39      	adds	r1, r7, #4
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <MX_TIM14_Init+0x98>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	0018      	movs	r0, r3
 80089d6:	f00b fdc7 	bl	8014568 <HAL_TIM_PWM_ConfigChannel>
 80089da:	1e03      	subs	r3, r0, #0
 80089dc:	d001      	beq.n	80089e2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80089de:	f003 fe11 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80089e2:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <MX_TIM14_Init+0x98>)
 80089e4:	0018      	movs	r0, r3
 80089e6:	f004 faf7 	bl	800cfd8 <HAL_TIM_MspPostInit>

}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	46bd      	mov	sp, r7
 80089ee:	b008      	add	sp, #32
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	20006a44 	.word	0x20006a44
 80089f8:	40002000 	.word	0x40002000
 80089fc:	00000277 	.word	0x00000277

08008a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a04:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a06:	4a24      	ldr	r2, [pc, #144]	; (8008a98 <MX_USART1_UART_Init+0x98>)
 8008a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8008a0a:	4b22      	ldr	r3, [pc, #136]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a0c:	2296      	movs	r2, #150	; 0x96
 8008a0e:	0192      	lsls	r2, r2, #6
 8008a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a12:	4b20      	ldr	r3, [pc, #128]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a18:	4b1e      	ldr	r3, [pc, #120]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a24:	4b1b      	ldr	r3, [pc, #108]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a26:	220c      	movs	r2, #12
 8008a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a30:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008a36:	4b17      	ldr	r3, [pc, #92]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008a3c:	4b15      	ldr	r3, [pc, #84]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008a42:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f00c fbe4 	bl	8015218 <HAL_UART_Init>
 8008a50:	1e03      	subs	r3, r0, #0
 8008a52:	d001      	beq.n	8008a58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008a54:	f003 fdd6 	bl	800c604 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008a58:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f00d ffa5 	bl	80169ac <HAL_UARTEx_SetTxFifoThreshold>
 8008a62:	1e03      	subs	r3, r0, #0
 8008a64:	d001      	beq.n	8008a6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008a66:	f003 fdcd 	bl	800c604 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	0018      	movs	r0, r3
 8008a70:	f00d ffdc 	bl	8016a2c <HAL_UARTEx_SetRxFifoThreshold>
 8008a74:	1e03      	subs	r3, r0, #0
 8008a76:	d001      	beq.n	8008a7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008a78:	f003 fdc4 	bl	800c604 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <MX_USART1_UART_Init+0x94>)
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f00d ff5a 	bl	8016938 <HAL_UARTEx_DisableFifoMode>
 8008a84:	1e03      	subs	r3, r0, #0
 8008a86:	d001      	beq.n	8008a8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008a88:	f003 fdbc 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008a8c:	46c0      	nop			; (mov r8, r8)
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	20006a90 	.word	0x20006a90
 8008a98:	40013800 	.word	0x40013800

08008a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008aa0:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008aa2:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <MX_USART2_UART_Init+0x98>)
 8008aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008aa6:	4b22      	ldr	r3, [pc, #136]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008aa8:	22e1      	movs	r2, #225	; 0xe1
 8008aaa:	0252      	lsls	r2, r2, #9
 8008aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008aae:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008ab4:	4b1e      	ldr	r3, [pc, #120]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008aba:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008ac0:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ac2:	220c      	movs	r2, #12
 8008ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008acc:	4b18      	ldr	r3, [pc, #96]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008ad8:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008ae4:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f00c fb96 	bl	8015218 <HAL_UART_Init>
 8008aec:	1e03      	subs	r3, r0, #0
 8008aee:	d001      	beq.n	8008af4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008af0:	f003 fd88 	bl	800c604 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008af4:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008af6:	2100      	movs	r1, #0
 8008af8:	0018      	movs	r0, r3
 8008afa:	f00d ff57 	bl	80169ac <HAL_UARTEx_SetTxFifoThreshold>
 8008afe:	1e03      	subs	r3, r0, #0
 8008b00:	d001      	beq.n	8008b06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008b02:	f003 fd7f 	bl	800c604 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008b08:	2100      	movs	r1, #0
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f00d ff8e 	bl	8016a2c <HAL_UARTEx_SetRxFifoThreshold>
 8008b10:	1e03      	subs	r3, r0, #0
 8008b12:	d001      	beq.n	8008b18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008b14:	f003 fd76 	bl	800c604 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <MX_USART2_UART_Init+0x94>)
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f00d ff0c 	bl	8016938 <HAL_UARTEx_DisableFifoMode>
 8008b20:	1e03      	subs	r3, r0, #0
 8008b22:	d001      	beq.n	8008b28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008b24:	f003 fd6e 	bl	800c604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008b28:	46c0      	nop			; (mov r8, r8)
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	20006b24 	.word	0x20006b24
 8008b34:	40004400 	.word	0x40004400

08008b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b089      	sub	sp, #36	; 0x24
 8008b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b3e:	240c      	movs	r4, #12
 8008b40:	193b      	adds	r3, r7, r4
 8008b42:	0018      	movs	r0, r3
 8008b44:	2314      	movs	r3, #20
 8008b46:	001a      	movs	r2, r3
 8008b48:	2100      	movs	r1, #0
 8008b4a:	f01a f825 	bl	8022b98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b4e:	4b43      	ldr	r3, [pc, #268]	; (8008c5c <MX_GPIO_Init+0x124>)
 8008b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b52:	4b42      	ldr	r3, [pc, #264]	; (8008c5c <MX_GPIO_Init+0x124>)
 8008b54:	2102      	movs	r1, #2
 8008b56:	430a      	orrs	r2, r1
 8008b58:	635a      	str	r2, [r3, #52]	; 0x34
 8008b5a:	4b40      	ldr	r3, [pc, #256]	; (8008c5c <MX_GPIO_Init+0x124>)
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	2202      	movs	r2, #2
 8008b60:	4013      	ands	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b66:	4b3d      	ldr	r3, [pc, #244]	; (8008c5c <MX_GPIO_Init+0x124>)
 8008b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b6a:	4b3c      	ldr	r3, [pc, #240]	; (8008c5c <MX_GPIO_Init+0x124>)
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	635a      	str	r2, [r3, #52]	; 0x34
 8008b72:	4b3a      	ldr	r3, [pc, #232]	; (8008c5c <MX_GPIO_Init+0x124>)
 8008b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b76:	2201      	movs	r2, #1
 8008b78:	4013      	ands	r3, r2
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|WP_Pin|RST_Pin, GPIO_PIN_RESET);
 8008b7e:	23c1      	movs	r3, #193	; 0xc1
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4837      	ldr	r0, [pc, #220]	; (8008c60 <MX_GPIO_Init+0x128>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	0019      	movs	r1, r3
 8008b88:	f008 faeb 	bl	8011162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8008b8c:	23a0      	movs	r3, #160	; 0xa0
 8008b8e:	05db      	lsls	r3, r3, #23
 8008b90:	2200      	movs	r2, #0
 8008b92:	2101      	movs	r1, #1
 8008b94:	0018      	movs	r0, r3
 8008b96:	f008 fae4 	bl	8011162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8008b9a:	2380      	movs	r3, #128	; 0x80
 8008b9c:	0119      	lsls	r1, r3, #4
 8008b9e:	23a0      	movs	r3, #160	; 0xa0
 8008ba0:	05db      	lsls	r3, r3, #23
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f008 fadc 	bl	8011162 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin WP_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|WP_Pin|RST_Pin;
 8008baa:	193b      	adds	r3, r7, r4
 8008bac:	22c1      	movs	r2, #193	; 0xc1
 8008bae:	0092      	lsls	r2, r2, #2
 8008bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bb2:	193b      	adds	r3, r7, r4
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb8:	193b      	adds	r3, r7, r4
 8008bba:	2200      	movs	r2, #0
 8008bbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bbe:	193b      	adds	r3, r7, r4
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bc4:	193b      	adds	r3, r7, r4
 8008bc6:	4a26      	ldr	r2, [pc, #152]	; (8008c60 <MX_GPIO_Init+0x128>)
 8008bc8:	0019      	movs	r1, r3
 8008bca:	0010      	movs	r0, r2
 8008bcc:	f008 f868 	bl	8010ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8008bd0:	193b      	adds	r3, r7, r4
 8008bd2:	4a24      	ldr	r2, [pc, #144]	; (8008c64 <MX_GPIO_Init+0x12c>)
 8008bd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008bd6:	193b      	adds	r3, r7, r4
 8008bd8:	2211      	movs	r2, #17
 8008bda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bdc:	193b      	adds	r3, r7, r4
 8008bde:	2200      	movs	r2, #0
 8008be0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008be2:	193b      	adds	r3, r7, r4
 8008be4:	2200      	movs	r2, #0
 8008be6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be8:	193a      	adds	r2, r7, r4
 8008bea:	23a0      	movs	r3, #160	; 0xa0
 8008bec:	05db      	lsls	r3, r3, #23
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f008 f855 	bl	8010ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin BTN_2_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|BTN_2_Pin|SW2_Pin;
 8008bf6:	193b      	adds	r3, r7, r4
 8008bf8:	4a1b      	ldr	r2, [pc, #108]	; (8008c68 <MX_GPIO_Init+0x130>)
 8008bfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bfc:	193b      	adds	r3, r7, r4
 8008bfe:	2200      	movs	r2, #0
 8008c00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c02:	193b      	adds	r3, r7, r4
 8008c04:	2201      	movs	r2, #1
 8008c06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c08:	193a      	adds	r2, r7, r4
 8008c0a:	23a0      	movs	r3, #160	; 0xa0
 8008c0c:	05db      	lsls	r3, r3, #23
 8008c0e:	0011      	movs	r1, r2
 8008c10:	0018      	movs	r0, r3
 8008c12:	f008 f845 	bl	8010ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DETECT_Pin IR_IN_Pin */
  GPIO_InitStruct.Pin = DETECT_Pin|IR_IN_Pin;
 8008c16:	193b      	adds	r3, r7, r4
 8008c18:	22c0      	movs	r2, #192	; 0xc0
 8008c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c1c:	193b      	adds	r3, r7, r4
 8008c1e:	2200      	movs	r2, #0
 8008c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c22:	193b      	adds	r3, r7, r4
 8008c24:	2200      	movs	r2, #0
 8008c26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c28:	193a      	adds	r2, r7, r4
 8008c2a:	23a0      	movs	r3, #160	; 0xa0
 8008c2c:	05db      	lsls	r3, r3, #23
 8008c2e:	0011      	movs	r1, r2
 8008c30:	0018      	movs	r0, r3
 8008c32:	f008 f835 	bl	8010ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin SW1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|SW1_Pin;
 8008c36:	193b      	adds	r3, r7, r4
 8008c38:	2203      	movs	r2, #3
 8008c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c3c:	193b      	adds	r3, r7, r4
 8008c3e:	2200      	movs	r2, #0
 8008c40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c42:	193b      	adds	r3, r7, r4
 8008c44:	2201      	movs	r2, #1
 8008c46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c48:	193b      	adds	r3, r7, r4
 8008c4a:	4a05      	ldr	r2, [pc, #20]	; (8008c60 <MX_GPIO_Init+0x128>)
 8008c4c:	0019      	movs	r1, r3
 8008c4e:	0010      	movs	r0, r2
 8008c50:	f008 f826 	bl	8010ca0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008c54:	46c0      	nop			; (mov r8, r8)
 8008c56:	46bd      	mov	sp, r7
 8008c58:	b009      	add	sp, #36	; 0x24
 8008c5a:	bd90      	pop	{r4, r7, pc}
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	50000400 	.word	0x50000400
 8008c64:	00000801 	.word	0x00000801
 8008c68:	00001102 	.word	0x00001102

08008c6c <USART2_ReInit>:

/* USER CODE BEGIN 4 */
void USART2_ReInit(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8008c72:	4b33      	ldr	r3, [pc, #204]	; (8008d40 <USART2_ReInit+0xd4>)
 8008c74:	4a33      	ldr	r2, [pc, #204]	; (8008d44 <USART2_ReInit+0xd8>)
 8008c76:	601a      	str	r2, [r3, #0]
	int baurate = ((uint32_t)(pcb_config.rs1[0] - '0') * 100000) +
 8008c78:	4b33      	ldr	r3, [pc, #204]	; (8008d48 <USART2_ReInit+0xdc>)
 8008c7a:	22f8      	movs	r2, #248	; 0xf8
 8008c7c:	5c9b      	ldrb	r3, [r3, r2]
 8008c7e:	3b30      	subs	r3, #48	; 0x30
 8008c80:	001a      	movs	r2, r3
 8008c82:	4b32      	ldr	r3, [pc, #200]	; (8008d4c <USART2_ReInit+0xe0>)
 8008c84:	435a      	muls	r2, r3
				  ((uint32_t)(pcb_config.rs1[1] - '0') * 10000) +
 8008c86:	4b30      	ldr	r3, [pc, #192]	; (8008d48 <USART2_ReInit+0xdc>)
 8008c88:	21f9      	movs	r1, #249	; 0xf9
 8008c8a:	5c5b      	ldrb	r3, [r3, r1]
 8008c8c:	3b30      	subs	r3, #48	; 0x30
 8008c8e:	0019      	movs	r1, r3
 8008c90:	4b2f      	ldr	r3, [pc, #188]	; (8008d50 <USART2_ReInit+0xe4>)
 8008c92:	434b      	muls	r3, r1
	int baurate = ((uint32_t)(pcb_config.rs1[0] - '0') * 100000) +
 8008c94:	18d1      	adds	r1, r2, r3
				  ((uint32_t)(pcb_config.rs1[2] - '0') * 1000) +
				  ((uint32_t)(pcb_config.rs1[3] - '0') * 100) +
 8008c96:	4b2c      	ldr	r3, [pc, #176]	; (8008d48 <USART2_ReInit+0xdc>)
 8008c98:	22fb      	movs	r2, #251	; 0xfb
 8008c9a:	5c9b      	ldrb	r3, [r3, r2]
 8008c9c:	3b30      	subs	r3, #48	; 0x30
 8008c9e:	001a      	movs	r2, r3
 8008ca0:	2364      	movs	r3, #100	; 0x64
 8008ca2:	4353      	muls	r3, r2
 8008ca4:	0018      	movs	r0, r3
				  ((uint32_t)(pcb_config.rs1[2] - '0') * 1000) +
 8008ca6:	4b28      	ldr	r3, [pc, #160]	; (8008d48 <USART2_ReInit+0xdc>)
 8008ca8:	22fa      	movs	r2, #250	; 0xfa
 8008caa:	5c9b      	ldrb	r3, [r3, r2]
 8008cac:	3b30      	subs	r3, #48	; 0x30
 8008cae:	001a      	movs	r2, r3
 8008cb0:	0013      	movs	r3, r2
 8008cb2:	015b      	lsls	r3, r3, #5
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	189b      	adds	r3, r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	18c3      	adds	r3, r0, r3
 8008cbe:	18ca      	adds	r2, r1, r3
				  ((uint32_t)(pcb_config.rs1[4] - '0') * 10) +
 8008cc0:	4b21      	ldr	r3, [pc, #132]	; (8008d48 <USART2_ReInit+0xdc>)
 8008cc2:	21fc      	movs	r1, #252	; 0xfc
 8008cc4:	5c5b      	ldrb	r3, [r3, r1]
 8008cc6:	3b30      	subs	r3, #48	; 0x30
 8008cc8:	0019      	movs	r1, r3
 8008cca:	000b      	movs	r3, r1
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	185b      	adds	r3, r3, r1
 8008cd0:	005b      	lsls	r3, r3, #1
				  ((uint32_t)(pcb_config.rs1[3] - '0') * 100) +
 8008cd2:	18d3      	adds	r3, r2, r3
				  ((uint32_t)(pcb_config.rs1[5] - '0'));
 8008cd4:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <USART2_ReInit+0xdc>)
 8008cd6:	21fd      	movs	r1, #253	; 0xfd
 8008cd8:	5c52      	ldrb	r2, [r2, r1]
				  ((uint32_t)(pcb_config.rs1[4] - '0') * 10) +
 8008cda:	189b      	adds	r3, r3, r2
 8008cdc:	3b30      	subs	r3, #48	; 0x30
	int baurate = ((uint32_t)(pcb_config.rs1[0] - '0') * 100000) +
 8008cde:	607b      	str	r3, [r7, #4]

	changeBaudRate(baurate, pcb_config.rs2[0] - '0', pcb_config.rs3[0] - '0');
 8008ce0:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <USART2_ReInit+0xdc>)
 8008ce2:	22fe      	movs	r2, #254	; 0xfe
 8008ce4:	5c9b      	ldrb	r3, [r3, r2]
 8008ce6:	3b30      	subs	r3, #48	; 0x30
 8008ce8:	0019      	movs	r1, r3
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <USART2_ReInit+0xdc>)
 8008cec:	2380      	movs	r3, #128	; 0x80
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	5cd3      	ldrb	r3, [r2, r3]
 8008cf2:	3b30      	subs	r3, #48	; 0x30
 8008cf4:	001a      	movs	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f005 fa23 	bl	800e144 <changeBaudRate>

	huart2.Init.Parity = UART_PARITY_NONE;
 8008cfe:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8008d04:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d06:	220c      	movs	r2, #12
 8008d08:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008d16:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008d1c:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d22:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8008d28:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <USART2_ReInit+0xd4>)
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f00c fa74 	bl	8015218 <HAL_UART_Init>
 8008d30:	1e03      	subs	r3, r0, #0
 8008d32:	d001      	beq.n	8008d38 <USART2_ReInit+0xcc>
	{
		Error_Handler();
 8008d34:	f003 fc66 	bl	800c604 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	// HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_uart, 1); //Init the UART interruption for the first time
	/* USER CODE END USART2_Init 2 */
}
 8008d38:	46c0      	nop			; (mov r8, r8)
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	b002      	add	sp, #8
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20006b24 	.word	0x20006b24
 8008d44:	40004400 	.word	0x40004400
 8008d48:	20006db4 	.word	0x20006db4
 8008d4c:	000186a0 	.word	0x000186a0
 8008d50:	00002710 	.word	0x00002710

08008d54 <ResetLoopProcess>:
void ResetLoopProcess()
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
	loop_state_process = LOOP_INIT;
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <ResetLoopProcess+0x1c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
	command_sent = 0;
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <ResetLoopProcess+0x20>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
	motion_state_process = INITMOT;
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <ResetLoopProcess+0x24>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]
}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	200068a7 	.word	0x200068a7
 8008d74:	20006be0 	.word	0x20006be0
 8008d78:	20006da5 	.word	0x20006da5

08008d7c <MeasureTemperature>:
	//		  					  				  			Panasonic_Send_Data(0x40040100BCBD);
	//		  					  				  		 NEC_Stop();
	//  BurstSony12TV(0xA90);
}
void MeasureTemperature(int tempsensortype)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8008d84:	4b94      	ldr	r3, [pc, #592]	; (8008fd8 <MeasureTemperature+0x25c>)
 8008d86:	0018      	movs	r0, r3
 8008d88:	f006 fe44 	bl	800fa14 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8008d8c:	23fa      	movs	r3, #250	; 0xfa
 8008d8e:	009a      	lsls	r2, r3, #2
 8008d90:	4b91      	ldr	r3, [pc, #580]	; (8008fd8 <MeasureTemperature+0x25c>)
 8008d92:	0011      	movs	r1, r2
 8008d94:	0018      	movs	r0, r3
 8008d96:	f006 fec7 	bl	800fb28 <HAL_ADC_PollForConversion>
	adcval = HAL_ADC_GetValue(&hadc1);
 8008d9a:	4b8f      	ldr	r3, [pc, #572]	; (8008fd8 <MeasureTemperature+0x25c>)
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f006 ff57 	bl	800fc50 <HAL_ADC_GetValue>
 8008da2:	0002      	movs	r2, r0
 8008da4:	4b8d      	ldr	r3, [pc, #564]	; (8008fdc <MeasureTemperature+0x260>)
 8008da6:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8008da8:	4b8b      	ldr	r3, [pc, #556]	; (8008fd8 <MeasureTemperature+0x25c>)
 8008daa:	0018      	movs	r0, r3
 8008dac:	f006 fe80 	bl	800fab0 <HAL_ADC_Stop>
	// HAL_ADC_Start(&hadc1);

	switch (tempsensortype)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d100      	bne.n	8008db8 <MeasureTemperature+0x3c>
 8008db6:	e089      	b.n	8008ecc <MeasureTemperature+0x150>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	dd00      	ble.n	8008dc0 <MeasureTemperature+0x44>
 8008dbe:	e0b4      	b.n	8008f2a <MeasureTemperature+0x1ae>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d05e      	beq.n	8008e84 <MeasureTemperature+0x108>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	dd00      	ble.n	8008dce <MeasureTemperature+0x52>
 8008dcc:	e0ad      	b.n	8008f2a <MeasureTemperature+0x1ae>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <MeasureTemperature+0x60>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d023      	beq.n	8008e22 <MeasureTemperature+0xa6>
 8008dda:	e0a6      	b.n	8008f2a <MeasureTemperature+0x1ae>
	{

	case 0 /* "LM35DZ"*/:
		adcval2 = adcval * 3.3 / 4095 * 100; // LM35DZ
 8008ddc:	4b7f      	ldr	r3, [pc, #508]	; (8008fdc <MeasureTemperature+0x260>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7fb fe67 	bl	8004ab4 <__aeabi_ui2d>
 8008de6:	4a7e      	ldr	r2, [pc, #504]	; (8008fe0 <MeasureTemperature+0x264>)
 8008de8:	4b7e      	ldr	r3, [pc, #504]	; (8008fe4 <MeasureTemperature+0x268>)
 8008dea:	f7fb f81f 	bl	8003e2c <__aeabi_dmul>
 8008dee:	0002      	movs	r2, r0
 8008df0:	000b      	movs	r3, r1
 8008df2:	0010      	movs	r0, r2
 8008df4:	0019      	movs	r1, r3
 8008df6:	2200      	movs	r2, #0
 8008df8:	4b7b      	ldr	r3, [pc, #492]	; (8008fe8 <MeasureTemperature+0x26c>)
 8008dfa:	f7fa fd29 	bl	8003850 <__aeabi_ddiv>
 8008dfe:	0002      	movs	r2, r0
 8008e00:	000b      	movs	r3, r1
 8008e02:	0010      	movs	r0, r2
 8008e04:	0019      	movs	r1, r3
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b78      	ldr	r3, [pc, #480]	; (8008fec <MeasureTemperature+0x270>)
 8008e0a:	f7fb f80f 	bl	8003e2c <__aeabi_dmul>
 8008e0e:	0002      	movs	r2, r0
 8008e10:	000b      	movs	r3, r1
 8008e12:	0010      	movs	r0, r2
 8008e14:	0019      	movs	r1, r3
 8008e16:	f7fb febb 	bl	8004b90 <__aeabi_d2f>
 8008e1a:	1c02      	adds	r2, r0, #0
 8008e1c:	4b74      	ldr	r3, [pc, #464]	; (8008ff0 <MeasureTemperature+0x274>)
 8008e1e:	601a      	str	r2, [r3, #0]
		break;
 8008e20:	e0a6      	b.n	8008f70 <MeasureTemperature+0x1f4>
	case 1 /*"LMT86LPGM"*/:
		adcval2 = -10 / 109 * (1000 * adcval * 3.3 / 4095 - 2103); // LMT86LPGM
 8008e22:	4b6e      	ldr	r3, [pc, #440]	; (8008fdc <MeasureTemperature+0x260>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	0013      	movs	r3, r2
 8008e28:	015b      	lsls	r3, r3, #5
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	189b      	adds	r3, r3, r2
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7fb fe3e 	bl	8004ab4 <__aeabi_ui2d>
 8008e38:	4a69      	ldr	r2, [pc, #420]	; (8008fe0 <MeasureTemperature+0x264>)
 8008e3a:	4b6a      	ldr	r3, [pc, #424]	; (8008fe4 <MeasureTemperature+0x268>)
 8008e3c:	f7fa fff6 	bl	8003e2c <__aeabi_dmul>
 8008e40:	0002      	movs	r2, r0
 8008e42:	000b      	movs	r3, r1
 8008e44:	0010      	movs	r0, r2
 8008e46:	0019      	movs	r1, r3
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4b67      	ldr	r3, [pc, #412]	; (8008fe8 <MeasureTemperature+0x26c>)
 8008e4c:	f7fa fd00 	bl	8003850 <__aeabi_ddiv>
 8008e50:	0002      	movs	r2, r0
 8008e52:	000b      	movs	r3, r1
 8008e54:	0010      	movs	r0, r2
 8008e56:	0019      	movs	r1, r3
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4b66      	ldr	r3, [pc, #408]	; (8008ff4 <MeasureTemperature+0x278>)
 8008e5c:	f7fb faa8 	bl	80043b0 <__aeabi_dsub>
 8008e60:	0002      	movs	r2, r0
 8008e62:	000b      	movs	r3, r1
 8008e64:	0010      	movs	r0, r2
 8008e66:	0019      	movs	r1, r3
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f7fa ffde 	bl	8003e2c <__aeabi_dmul>
 8008e70:	0002      	movs	r2, r0
 8008e72:	000b      	movs	r3, r1
 8008e74:	0010      	movs	r0, r2
 8008e76:	0019      	movs	r1, r3
 8008e78:	f7fb fe8a 	bl	8004b90 <__aeabi_d2f>
 8008e7c:	1c02      	adds	r2, r0, #0
 8008e7e:	4b5c      	ldr	r3, [pc, #368]	; (8008ff0 <MeasureTemperature+0x274>)
 8008e80:	601a      	str	r2, [r3, #0]
		break;
 8008e82:	e075      	b.n	8008f70 <MeasureTemperature+0x1f4>
	case 2 /*"LMT84LPGM"*/:
		adcval2 = -adcval * 1.1 / 4095 - 893 / 600; // LMT84LPGM
 8008e84:	4b55      	ldr	r3, [pc, #340]	; (8008fdc <MeasureTemperature+0x260>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	425b      	negs	r3, r3
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7fb fe12 	bl	8004ab4 <__aeabi_ui2d>
 8008e90:	4a59      	ldr	r2, [pc, #356]	; (8008ff8 <MeasureTemperature+0x27c>)
 8008e92:	4b5a      	ldr	r3, [pc, #360]	; (8008ffc <MeasureTemperature+0x280>)
 8008e94:	f7fa ffca 	bl	8003e2c <__aeabi_dmul>
 8008e98:	0002      	movs	r2, r0
 8008e9a:	000b      	movs	r3, r1
 8008e9c:	0010      	movs	r0, r2
 8008e9e:	0019      	movs	r1, r3
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4b51      	ldr	r3, [pc, #324]	; (8008fe8 <MeasureTemperature+0x26c>)
 8008ea4:	f7fa fcd4 	bl	8003850 <__aeabi_ddiv>
 8008ea8:	0002      	movs	r2, r0
 8008eaa:	000b      	movs	r3, r1
 8008eac:	0010      	movs	r0, r2
 8008eae:	0019      	movs	r1, r3
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4b53      	ldr	r3, [pc, #332]	; (8009000 <MeasureTemperature+0x284>)
 8008eb4:	f7fb fa7c 	bl	80043b0 <__aeabi_dsub>
 8008eb8:	0002      	movs	r2, r0
 8008eba:	000b      	movs	r3, r1
 8008ebc:	0010      	movs	r0, r2
 8008ebe:	0019      	movs	r1, r3
 8008ec0:	f7fb fe66 	bl	8004b90 <__aeabi_d2f>
 8008ec4:	1c02      	adds	r2, r0, #0
 8008ec6:	4b4a      	ldr	r3, [pc, #296]	; (8008ff0 <MeasureTemperature+0x274>)
 8008ec8:	601a      	str	r2, [r3, #0]
		break;
 8008eca:	e051      	b.n	8008f70 <MeasureTemperature+0x1f4>
	case 3 /*"LMT85LPGM"*/:
		adcval2 = 5 / 41 * (1569 - 1000 * adcval * 3.3 / 4095); // LMT85LPGM
 8008ecc:	4b43      	ldr	r3, [pc, #268]	; (8008fdc <MeasureTemperature+0x260>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	0013      	movs	r3, r2
 8008ed2:	015b      	lsls	r3, r3, #5
 8008ed4:	1a9b      	subs	r3, r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	189b      	adds	r3, r3, r2
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	0018      	movs	r0, r3
 8008ede:	f7fb fde9 	bl	8004ab4 <__aeabi_ui2d>
 8008ee2:	4a3f      	ldr	r2, [pc, #252]	; (8008fe0 <MeasureTemperature+0x264>)
 8008ee4:	4b3f      	ldr	r3, [pc, #252]	; (8008fe4 <MeasureTemperature+0x268>)
 8008ee6:	f7fa ffa1 	bl	8003e2c <__aeabi_dmul>
 8008eea:	0002      	movs	r2, r0
 8008eec:	000b      	movs	r3, r1
 8008eee:	0010      	movs	r0, r2
 8008ef0:	0019      	movs	r1, r3
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4b3c      	ldr	r3, [pc, #240]	; (8008fe8 <MeasureTemperature+0x26c>)
 8008ef6:	f7fa fcab 	bl	8003850 <__aeabi_ddiv>
 8008efa:	0002      	movs	r2, r0
 8008efc:	000b      	movs	r3, r1
 8008efe:	2000      	movs	r0, #0
 8008f00:	4940      	ldr	r1, [pc, #256]	; (8009004 <MeasureTemperature+0x288>)
 8008f02:	f7fb fa55 	bl	80043b0 <__aeabi_dsub>
 8008f06:	0002      	movs	r2, r0
 8008f08:	000b      	movs	r3, r1
 8008f0a:	0010      	movs	r0, r2
 8008f0c:	0019      	movs	r1, r3
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2300      	movs	r3, #0
 8008f12:	f7fa ff8b 	bl	8003e2c <__aeabi_dmul>
 8008f16:	0002      	movs	r2, r0
 8008f18:	000b      	movs	r3, r1
 8008f1a:	0010      	movs	r0, r2
 8008f1c:	0019      	movs	r1, r3
 8008f1e:	f7fb fe37 	bl	8004b90 <__aeabi_d2f>
 8008f22:	1c02      	adds	r2, r0, #0
 8008f24:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <MeasureTemperature+0x274>)
 8008f26:	601a      	str	r2, [r3, #0]
		break;
 8008f28:	e022      	b.n	8008f70 <MeasureTemperature+0x1f4>
	default:
		adcval2 = adcval * 3.3 / 4095 * 100; // LM35DZ
 8008f2a:	4b2c      	ldr	r3, [pc, #176]	; (8008fdc <MeasureTemperature+0x260>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f7fb fdc0 	bl	8004ab4 <__aeabi_ui2d>
 8008f34:	4a2a      	ldr	r2, [pc, #168]	; (8008fe0 <MeasureTemperature+0x264>)
 8008f36:	4b2b      	ldr	r3, [pc, #172]	; (8008fe4 <MeasureTemperature+0x268>)
 8008f38:	f7fa ff78 	bl	8003e2c <__aeabi_dmul>
 8008f3c:	0002      	movs	r2, r0
 8008f3e:	000b      	movs	r3, r1
 8008f40:	0010      	movs	r0, r2
 8008f42:	0019      	movs	r1, r3
 8008f44:	2200      	movs	r2, #0
 8008f46:	4b28      	ldr	r3, [pc, #160]	; (8008fe8 <MeasureTemperature+0x26c>)
 8008f48:	f7fa fc82 	bl	8003850 <__aeabi_ddiv>
 8008f4c:	0002      	movs	r2, r0
 8008f4e:	000b      	movs	r3, r1
 8008f50:	0010      	movs	r0, r2
 8008f52:	0019      	movs	r1, r3
 8008f54:	2200      	movs	r2, #0
 8008f56:	4b25      	ldr	r3, [pc, #148]	; (8008fec <MeasureTemperature+0x270>)
 8008f58:	f7fa ff68 	bl	8003e2c <__aeabi_dmul>
 8008f5c:	0002      	movs	r2, r0
 8008f5e:	000b      	movs	r3, r1
 8008f60:	0010      	movs	r0, r2
 8008f62:	0019      	movs	r1, r3
 8008f64:	f7fb fe14 	bl	8004b90 <__aeabi_d2f>
 8008f68:	1c02      	adds	r2, r0, #0
 8008f6a:	4b21      	ldr	r3, [pc, #132]	; (8008ff0 <MeasureTemperature+0x274>)
 8008f6c:	601a      	str	r2, [r3, #0]
		break;
 8008f6e:	46c0      	nop			; (mov r8, r8)
	}

	temperature_farenheit = (adcval2 * 9.0 / 5.0) + 30.25;
 8008f70:	4b1f      	ldr	r3, [pc, #124]	; (8008ff0 <MeasureTemperature+0x274>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	1c18      	adds	r0, r3, #0
 8008f76:	f7fb fdc3 	bl	8004b00 <__aeabi_f2d>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4b22      	ldr	r3, [pc, #136]	; (8009008 <MeasureTemperature+0x28c>)
 8008f7e:	f7fa ff55 	bl	8003e2c <__aeabi_dmul>
 8008f82:	0002      	movs	r2, r0
 8008f84:	000b      	movs	r3, r1
 8008f86:	0010      	movs	r0, r2
 8008f88:	0019      	movs	r1, r3
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4b1f      	ldr	r3, [pc, #124]	; (800900c <MeasureTemperature+0x290>)
 8008f8e:	f7fa fc5f 	bl	8003850 <__aeabi_ddiv>
 8008f92:	0002      	movs	r2, r0
 8008f94:	000b      	movs	r3, r1
 8008f96:	0010      	movs	r0, r2
 8008f98:	0019      	movs	r1, r3
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	; (8009010 <MeasureTemperature+0x294>)
 8008f9e:	f7fa f8f7 	bl	8003190 <__aeabi_dadd>
 8008fa2:	0002      	movs	r2, r0
 8008fa4:	000b      	movs	r3, r1
 8008fa6:	0010      	movs	r0, r2
 8008fa8:	0019      	movs	r1, r3
 8008faa:	f7fb fdf1 	bl	8004b90 <__aeabi_d2f>
 8008fae:	1c02      	adds	r2, r0, #0
 8008fb0:	4b18      	ldr	r3, [pc, #96]	; (8009014 <MeasureTemperature+0x298>)
 8008fb2:	601a      	str	r2, [r3, #0]
	Send_Temperature_Data(temperature_farenheit);
 8008fb4:	4b17      	ldr	r3, [pc, #92]	; (8009014 <MeasureTemperature+0x298>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	1c18      	adds	r0, r3, #0
 8008fba:	f004 ff87 	bl	800decc <Send_Temperature_Data>
	// command_sent = 0;
	dechundred = (pcb_config.sSetTempTreshMax[0] - '0') * 100;
 8008fbe:	4b16      	ldr	r3, [pc, #88]	; (8009018 <MeasureTemperature+0x29c>)
 8008fc0:	22ac      	movs	r2, #172	; 0xac
 8008fc2:	5c9b      	ldrb	r3, [r3, r2]
 8008fc4:	3b30      	subs	r3, #48	; 0x30
 8008fc6:	2264      	movs	r2, #100	; 0x64
 8008fc8:	435a      	muls	r2, r3
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <MeasureTemperature+0x2a0>)
 8008fcc:	601a      	str	r2, [r3, #0]
}
 8008fce:	46c0      	nop			; (mov r8, r8)
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	b002      	add	sp, #8
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	200068b0 	.word	0x200068b0
 8008fdc:	20006d50 	.word	0x20006d50
 8008fe0:	66666666 	.word	0x66666666
 8008fe4:	400a6666 	.word	0x400a6666
 8008fe8:	40affe00 	.word	0x40affe00
 8008fec:	40590000 	.word	0x40590000
 8008ff0:	20006d54 	.word	0x20006d54
 8008ff4:	40a06e00 	.word	0x40a06e00
 8008ff8:	9999999a 	.word	0x9999999a
 8008ffc:	3ff19999 	.word	0x3ff19999
 8009000:	3ff00000 	.word	0x3ff00000
 8009004:	40988400 	.word	0x40988400
 8009008:	40220000 	.word	0x40220000
 800900c:	40140000 	.word	0x40140000
 8009010:	403e4000 	.word	0x403e4000
 8009014:	20006d58 	.word	0x20006d58
 8009018:	20006db4 	.word	0x20006db4
 800901c:	20006d60 	.word	0x20006d60

08009020 <ButtonsAlgorithm>:

void ButtonsAlgorithm()
{
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
	function_code = (int)(BTN3_Is_Pressed()) * 4 + (int)(BTN2_Is_Pressed()) * 2 + (int)(BTN1_Is_Pressed());
 8009026:	f7fe ffbb 	bl	8007fa0 <BTN3_Is_Pressed>
 800902a:	0003      	movs	r3, r0
 800902c:	005c      	lsls	r4, r3, #1
 800902e:	f7fe ffad 	bl	8007f8c <BTN2_Is_Pressed>
 8009032:	0003      	movs	r3, r0
 8009034:	18e3      	adds	r3, r4, r3
 8009036:	005c      	lsls	r4, r3, #1
 8009038:	f7fe ff9e 	bl	8007f78 <BTN1_Is_Pressed>
 800903c:	0003      	movs	r3, r0
 800903e:	18e2      	adds	r2, r4, r3
 8009040:	4b94      	ldr	r3, [pc, #592]	; (8009294 <ButtonsAlgorithm+0x274>)
 8009042:	601a      	str	r2, [r3, #0]
	sw1_instantaneous = !(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin));
 8009044:	4b94      	ldr	r3, [pc, #592]	; (8009298 <ButtonsAlgorithm+0x278>)
 8009046:	2102      	movs	r1, #2
 8009048:	0018      	movs	r0, r3
 800904a:	f008 f86d 	bl	8011128 <HAL_GPIO_ReadPin>
 800904e:	0003      	movs	r3, r0
 8009050:	425a      	negs	r2, r3
 8009052:	4153      	adcs	r3, r2
 8009054:	b2db      	uxtb	r3, r3
 8009056:	001a      	movs	r2, r3
 8009058:	4b90      	ldr	r3, [pc, #576]	; (800929c <ButtonsAlgorithm+0x27c>)
 800905a:	601a      	str	r2, [r3, #0]
	sw2_instantaneous = !(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin));
 800905c:	2380      	movs	r3, #128	; 0x80
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	23a0      	movs	r3, #160	; 0xa0
 8009062:	05db      	lsls	r3, r3, #23
 8009064:	0011      	movs	r1, r2
 8009066:	0018      	movs	r0, r3
 8009068:	f008 f85e 	bl	8011128 <HAL_GPIO_ReadPin>
 800906c:	0003      	movs	r3, r0
 800906e:	425a      	negs	r2, r3
 8009070:	4153      	adcs	r3, r2
 8009072:	b2db      	uxtb	r3, r3
 8009074:	001a      	movs	r2, r3
 8009076:	4b8a      	ldr	r3, [pc, #552]	; (80092a0 <ButtonsAlgorithm+0x280>)
 8009078:	601a      	str	r2, [r3, #0]
	sw3_instantaneous = !(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin));
 800907a:	23a0      	movs	r3, #160	; 0xa0
 800907c:	05db      	lsls	r3, r3, #23
 800907e:	2102      	movs	r1, #2
 8009080:	0018      	movs	r0, r3
 8009082:	f008 f851 	bl	8011128 <HAL_GPIO_ReadPin>
 8009086:	0003      	movs	r3, r0
 8009088:	425a      	negs	r2, r3
 800908a:	4153      	adcs	r3, r2
 800908c:	b2db      	uxtb	r3, r3
 800908e:	001a      	movs	r2, r3
 8009090:	4b84      	ldr	r3, [pc, #528]	; (80092a4 <ButtonsAlgorithm+0x284>)
 8009092:	601a      	str	r2, [r3, #0]

	function_code = sw1_instantaneous * 16 + sw2_instantaneous * 8 + sw3_instantaneous * 4 + (int)(BTN2_Is_Pressed()) * 2 + (int)(BTN1_Is_Pressed());
 8009094:	4b81      	ldr	r3, [pc, #516]	; (800929c <ButtonsAlgorithm+0x27c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	005a      	lsls	r2, r3, #1
 800909a:	4b81      	ldr	r3, [pc, #516]	; (80092a0 <ButtonsAlgorithm+0x280>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	18d3      	adds	r3, r2, r3
 80090a0:	005a      	lsls	r2, r3, #1
 80090a2:	4b80      	ldr	r3, [pc, #512]	; (80092a4 <ButtonsAlgorithm+0x284>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	18d3      	adds	r3, r2, r3
 80090a8:	005c      	lsls	r4, r3, #1
 80090aa:	f7fe ff6f 	bl	8007f8c <BTN2_Is_Pressed>
 80090ae:	0003      	movs	r3, r0
 80090b0:	18e3      	adds	r3, r4, r3
 80090b2:	005c      	lsls	r4, r3, #1
 80090b4:	f7fe ff60 	bl	8007f78 <BTN1_Is_Pressed>
 80090b8:	0003      	movs	r3, r0
 80090ba:	18e2      	adds	r2, r4, r3
 80090bc:	4b75      	ldr	r3, [pc, #468]	; (8009294 <ButtonsAlgorithm+0x274>)
 80090be:	601a      	str	r2, [r3, #0]

	switch (function_code)
 80090c0:	4b74      	ldr	r3, [pc, #464]	; (8009294 <ButtonsAlgorithm+0x274>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3b05      	subs	r3, #5
 80090c6:	2b0d      	cmp	r3, #13
 80090c8:	d900      	bls.n	80090cc <ButtonsAlgorithm+0xac>
 80090ca:	e0da      	b.n	8009282 <ButtonsAlgorithm+0x262>
 80090cc:	009a      	lsls	r2, r3, #2
 80090ce:	4b76      	ldr	r3, [pc, #472]	; (80092a8 <ButtonsAlgorithm+0x288>)
 80090d0:	18d3      	adds	r3, r2, r3
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	469f      	mov	pc, r3
	{

	case 18: // IR LEARN ON

		Send_BTN_ON(1, 8);
 80090d6:	2108      	movs	r1, #8
 80090d8:	2001      	movs	r0, #1
 80090da:	f004 fceb 	bl	800dab4 <Send_BTN_ON>
		SetBtnPress(false, 2);
 80090de:	2102      	movs	r1, #2
 80090e0:	2000      	movs	r0, #0
 80090e2:	f7fe ff67 	bl	8007fb4 <SetBtnPress>
		on_receive = 1;
 80090e6:	4b71      	ldr	r3, [pc, #452]	; (80092ac <ButtonsAlgorithm+0x28c>)
 80090e8:	2201      	movs	r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
		locked = false;
 80090ec:	4b70      	ldr	r3, [pc, #448]	; (80092b0 <ButtonsAlgorithm+0x290>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
		IR_Receive_State = INIT_IR;
 80090f2:	4b70      	ldr	r3, [pc, #448]	; (80092b4 <ButtonsAlgorithm+0x294>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
		IR_Receive_OFF_State = INIT2;
 80090f8:	4b6f      	ldr	r3, [pc, #444]	; (80092b8 <ButtonsAlgorithm+0x298>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	701a      	strb	r2, [r3, #0]
		timestamp_1min_lock = HAL_GetTick();
 80090fe:	f006 f949 	bl	800f394 <HAL_GetTick>
 8009102:	0002      	movs	r2, r0
 8009104:	4b6d      	ldr	r3, [pc, #436]	; (80092bc <ButtonsAlgorithm+0x29c>)
 8009106:	601a      	str	r2, [r3, #0]
		Send_Version_Data();
 8009108:	f004 fdac 	bl	800dc64 <Send_Version_Data>
		led2_status = LEARN_STATUS_LED;
 800910c:	4b6c      	ldr	r3, [pc, #432]	; (80092c0 <ButtonsAlgorithm+0x2a0>)
 800910e:	2204      	movs	r2, #4
 8009110:	701a      	strb	r2, [r3, #0]
		break;
 8009112:	e0ba      	b.n	800928a <ButtonsAlgorithm+0x26a>

	case 17: // IR LEARNING OFF

		Send_BTN_ON(1, 7);
 8009114:	2107      	movs	r1, #7
 8009116:	2001      	movs	r0, #1
 8009118:	f004 fccc 	bl	800dab4 <Send_BTN_ON>
		SetBtnPress(false, 1);
 800911c:	2101      	movs	r1, #1
 800911e:	2000      	movs	r0, #0
 8009120:	f7fe ff48 	bl	8007fb4 <SetBtnPress>
		locked = false;
 8009124:	4b62      	ldr	r3, [pc, #392]	; (80092b0 <ButtonsAlgorithm+0x290>)
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
		on_receive = 0;
 800912a:	4b60      	ldr	r3, [pc, #384]	; (80092ac <ButtonsAlgorithm+0x28c>)
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
		timestamp_1min_lock = HAL_GetTick();
 8009130:	f006 f930 	bl	800f394 <HAL_GetTick>
 8009134:	0002      	movs	r2, r0
 8009136:	4b61      	ldr	r3, [pc, #388]	; (80092bc <ButtonsAlgorithm+0x29c>)
 8009138:	601a      	str	r2, [r3, #0]
		IR_Receive_State = INIT_IR;
 800913a:	4b5e      	ldr	r3, [pc, #376]	; (80092b4 <ButtonsAlgorithm+0x294>)
 800913c:	2200      	movs	r2, #0
 800913e:	701a      	strb	r2, [r3, #0]
		IR_Receive_OFF_State = INIT2;
 8009140:	4b5d      	ldr	r3, [pc, #372]	; (80092b8 <ButtonsAlgorithm+0x298>)
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
		led2_status = LEARN_STATUS_LED2;
 8009146:	4b5e      	ldr	r3, [pc, #376]	; (80092c0 <ButtonsAlgorithm+0x2a0>)
 8009148:	2205      	movs	r2, #5
 800914a:	701a      	strb	r2, [r3, #0]
		break;
 800914c:	e09d      	b.n	800928a <ButtonsAlgorithm+0x26a>

	case 10: // TRANSMIT OFF COMMAND
		led2_status = BTN_PRESSED2;
 800914e:	4b5c      	ldr	r3, [pc, #368]	; (80092c0 <ButtonsAlgorithm+0x2a0>)
 8009150:	2202      	movs	r2, #2
 8009152:	701a      	strb	r2, [r3, #0]
		SetBtnPress(false, 2);
 8009154:	2102      	movs	r1, #2
 8009156:	2000      	movs	r0, #0
 8009158:	f7fe ff2c 	bl	8007fb4 <SetBtnPress>
		Send_BTN_ON(1, 0);
 800915c:	2100      	movs	r1, #0
 800915e:	2001      	movs	r0, #1
 8009160:	f004 fca8 	bl	800dab4 <Send_BTN_ON>
		Send_RS232_Command_OFF();
 8009164:	f004 fcd6 	bl	800db14 <Send_RS232_Command_OFF>
		IRSend_NEC(false);
 8009168:	2000      	movs	r0, #0
 800916a:	f7fd fc45 	bl	80069f8 <IRSend_NEC>

		break;
 800916e:	e08c      	b.n	800928a <ButtonsAlgorithm+0x26a>

	case 9: // SEND RSR 232 COMMAND
		Send_BTN_ON(0, 9);
 8009170:	2109      	movs	r1, #9
 8009172:	2000      	movs	r0, #0
 8009174:	f004 fc9e 	bl	800dab4 <Send_BTN_ON>
		led2_status = BTN_PRESSED1;
 8009178:	4b51      	ldr	r3, [pc, #324]	; (80092c0 <ButtonsAlgorithm+0x2a0>)
 800917a:	2201      	movs	r2, #1
 800917c:	701a      	strb	r2, [r3, #0]
		SetBtnPress(false, 1);
 800917e:	2101      	movs	r1, #1
 8009180:	2000      	movs	r0, #0
 8009182:	f7fe ff17 	bl	8007fb4 <SetBtnPress>
		Send_RS232_Command_ON();
 8009186:	f004 fc47 	bl	800da18 <Send_RS232_Command_ON>
		IRSend_NEC(true);
 800918a:	2001      	movs	r0, #1
 800918c:	f7fd fc34 	bl	80069f8 <IRSend_NEC>

		break;
 8009190:	e07b      	b.n	800928a <ButtonsAlgorithm+0x26a>

	case 6: // LOG USB 18
		Send_BTN_ON(0, 6);
 8009192:	2106      	movs	r1, #6
 8009194:	2000      	movs	r0, #0
 8009196:	f004 fc8d 	bl	800dab4 <Send_BTN_ON>
		led2_status = LEARN_STATUS_LED;
 800919a:	4b49      	ldr	r3, [pc, #292]	; (80092c0 <ButtonsAlgorithm+0x2a0>)
 800919c:	2204      	movs	r2, #4
 800919e:	701a      	strb	r2, [r3, #0]
		SetBtnPress(false, 2);
 80091a0:	2102      	movs	r1, #2
 80091a2:	2000      	movs	r0, #0
 80091a4:	f7fe ff06 	bl	8007fb4 <SetBtnPress>
		loop2();
 80091a8:	f00e fcb2 	bl	8017b10 <loop2>
		loop3();
 80091ac:	f00e fd12 	bl	8017bd4 <loop3>
		Send_String("Logging to USB\n\r", sizeof("Logging to USB\n\r"));
 80091b0:	4b44      	ldr	r3, [pc, #272]	; (80092c4 <ButtonsAlgorithm+0x2a4>)
 80091b2:	2111      	movs	r1, #17
 80091b4:	0018      	movs	r0, r3
 80091b6:	f004 fd79 	bl	800dcac <Send_String>
		break;
 80091ba:	e066      	b.n	800928a <ButtonsAlgorithm+0x26a>
	case 5: // READ PCB CONFIG 17
	{
		led2_status = BTN_PRESSED1;
 80091bc:	4b40      	ldr	r3, [pc, #256]	; (80092c0 <ButtonsAlgorithm+0x2a0>)
 80091be:	2201      	movs	r2, #1
 80091c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80091c2:	23a0      	movs	r3, #160	; 0xa0
 80091c4:	05db      	lsls	r3, r3, #23
 80091c6:	2200      	movs	r2, #0
 80091c8:	2101      	movs	r1, #1
 80091ca:	0018      	movs	r0, r3
 80091cc:	f007 ffc9 	bl	8011162 <HAL_GPIO_WritePin>
		SetBtnPress(false, 1);
 80091d0:	2101      	movs	r1, #1
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7fe feee 	bl	8007fb4 <SetBtnPress>
		Send_BTN_ON(1, 7);
 80091d8:	2107      	movs	r1, #7
 80091da:	2001      	movs	r0, #1
 80091dc:	f004 fc6a 	bl	800dab4 <Send_BTN_ON>

		MyApp();
 80091e0:	f00e fd4a 	bl	8017c78 <MyApp>

		ReadAndSetConfig();
 80091e4:	f001 ffea 	bl	800b1bc <ReadAndSetConfig>
		Calculate_Temperatures_Offsets();
 80091e8:	f000 fc7e 	bl	8009ae8 <Calculate_Temperatures_Offsets>
		int baurate = ((uint32_t)(pcb_config.rs1[0] - '0') * 100000) + ((uint32_t)(pcb_config.rs1[1] - '0') * 10000) + ((uint32_t)(pcb_config.rs1[2] - '0') * 1000) + ((uint32_t)(pcb_config.rs1[3] - '0') * 100) + ((uint32_t)(pcb_config.rs1[4] - '0') * 10) + ((uint32_t)(pcb_config.rs1[5] - '0'));
 80091ec:	4b36      	ldr	r3, [pc, #216]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 80091ee:	22f8      	movs	r2, #248	; 0xf8
 80091f0:	5c9b      	ldrb	r3, [r3, r2]
 80091f2:	3b30      	subs	r3, #48	; 0x30
 80091f4:	001a      	movs	r2, r3
 80091f6:	4b35      	ldr	r3, [pc, #212]	; (80092cc <ButtonsAlgorithm+0x2ac>)
 80091f8:	435a      	muls	r2, r3
 80091fa:	4b33      	ldr	r3, [pc, #204]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 80091fc:	21f9      	movs	r1, #249	; 0xf9
 80091fe:	5c5b      	ldrb	r3, [r3, r1]
 8009200:	3b30      	subs	r3, #48	; 0x30
 8009202:	0019      	movs	r1, r3
 8009204:	4b32      	ldr	r3, [pc, #200]	; (80092d0 <ButtonsAlgorithm+0x2b0>)
 8009206:	434b      	muls	r3, r1
 8009208:	18d1      	adds	r1, r2, r3
 800920a:	4b2f      	ldr	r3, [pc, #188]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 800920c:	22fb      	movs	r2, #251	; 0xfb
 800920e:	5c9b      	ldrb	r3, [r3, r2]
 8009210:	3b30      	subs	r3, #48	; 0x30
 8009212:	001a      	movs	r2, r3
 8009214:	2364      	movs	r3, #100	; 0x64
 8009216:	4353      	muls	r3, r2
 8009218:	0018      	movs	r0, r3
 800921a:	4b2b      	ldr	r3, [pc, #172]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 800921c:	22fa      	movs	r2, #250	; 0xfa
 800921e:	5c9b      	ldrb	r3, [r3, r2]
 8009220:	3b30      	subs	r3, #48	; 0x30
 8009222:	001a      	movs	r2, r3
 8009224:	0013      	movs	r3, r2
 8009226:	015b      	lsls	r3, r3, #5
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	189b      	adds	r3, r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	18c3      	adds	r3, r0, r3
 8009232:	18ca      	adds	r2, r1, r3
 8009234:	4b24      	ldr	r3, [pc, #144]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 8009236:	21fc      	movs	r1, #252	; 0xfc
 8009238:	5c5b      	ldrb	r3, [r3, r1]
 800923a:	3b30      	subs	r3, #48	; 0x30
 800923c:	0019      	movs	r1, r3
 800923e:	000b      	movs	r3, r1
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	185b      	adds	r3, r3, r1
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	18d3      	adds	r3, r2, r3
 8009248:	4a1f      	ldr	r2, [pc, #124]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 800924a:	21fd      	movs	r1, #253	; 0xfd
 800924c:	5c52      	ldrb	r2, [r2, r1]
 800924e:	189b      	adds	r3, r3, r2
 8009250:	3b30      	subs	r3, #48	; 0x30
 8009252:	607b      	str	r3, [r7, #4]

		changeBaudRate(baurate, pcb_config.rs2[0] - '0',
 8009254:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 8009256:	22fe      	movs	r2, #254	; 0xfe
 8009258:	5c9b      	ldrb	r3, [r3, r2]
 800925a:	3b30      	subs	r3, #48	; 0x30
 800925c:	0019      	movs	r1, r3
					   pcb_config.rs3[0] - '0');
 800925e:	4a1a      	ldr	r2, [pc, #104]	; (80092c8 <ButtonsAlgorithm+0x2a8>)
 8009260:	2380      	movs	r3, #128	; 0x80
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	5cd3      	ldrb	r3, [r2, r3]
		changeBaudRate(baurate, pcb_config.rs2[0] - '0',
 8009266:	3b30      	subs	r3, #48	; 0x30
 8009268:	001a      	movs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	0018      	movs	r0, r3
 800926e:	f004 ff69 	bl	800e144 <changeBaudRate>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009272:	23a0      	movs	r3, #160	; 0xa0
 8009274:	05db      	lsls	r3, r3, #23
 8009276:	2201      	movs	r2, #1
 8009278:	2101      	movs	r1, #1
 800927a:	0018      	movs	r0, r3
 800927c:	f007 ff71 	bl	8011162 <HAL_GPIO_WritePin>
		break;
 8009280:	e003      	b.n	800928a <ButtonsAlgorithm+0x26a>
	}
	default:
		led2_status = IDLESTAT;
 8009282:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <ButtonsAlgorithm+0x2a0>)
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]
		break;
 8009288:	46c0      	nop			; (mov r8, r8)
	}
}
 800928a:	46c0      	nop			; (mov r8, r8)
 800928c:	46bd      	mov	sp, r7
 800928e:	b003      	add	sp, #12
 8009290:	bd90      	pop	{r4, r7, pc}
 8009292:	46c0      	nop			; (mov r8, r8)
 8009294:	20006d8c 	.word	0x20006d8c
 8009298:	50000400 	.word	0x50000400
 800929c:	20006bc0 	.word	0x20006bc0
 80092a0:	20006bc4 	.word	0x20006bc4
 80092a4:	20006bc8 	.word	0x20006bc8
 80092a8:	08031b20 	.word	0x08031b20
 80092ac:	20005014 	.word	0x20005014
 80092b0:	20005010 	.word	0x20005010
 80092b4:	20006759 	.word	0x20006759
 80092b8:	20006758 	.word	0x20006758
 80092bc:	20006bcc 	.word	0x20006bcc
 80092c0:	20006d91 	.word	0x20006d91
 80092c4:	080255dc 	.word	0x080255dc
 80092c8:	20006db4 	.word	0x20006db4
 80092cc:	000186a0 	.word	0x000186a0
 80092d0:	00002710 	.word	0x00002710

080092d4 <TimeSyncAlgorithm>:

void TimeSyncAlgorithm()
{
 80092d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - timesynch_counter) >= 20000)
 80092da:	f006 f85b 	bl	800f394 <HAL_GetTick>
 80092de:	0002      	movs	r2, r0
 80092e0:	4b3b      	ldr	r3, [pc, #236]	; (80093d0 <TimeSyncAlgorithm+0xfc>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	4a3b      	ldr	r2, [pc, #236]	; (80093d4 <TimeSyncAlgorithm+0x100>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d800      	bhi.n	80092ee <TimeSyncAlgorithm+0x1a>
 80092ec:	e06c      	b.n	80093c8 <TimeSyncAlgorithm+0xf4>
	{
		timesynch_counter = HAL_GetTick();
 80092ee:	f006 f851 	bl	800f394 <HAL_GetTick>
 80092f2:	0002      	movs	r2, r0
 80092f4:	4b36      	ldr	r3, [pc, #216]	; (80093d0 <TimeSyncAlgorithm+0xfc>)
 80092f6:	601a      	str	r2, [r3, #0]

		if (onSwitch == 1 && timesynch_on_was_sent == 0)
 80092f8:	4b37      	ldr	r3, [pc, #220]	; (80093d8 <TimeSyncAlgorithm+0x104>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d132      	bne.n	8009366 <TimeSyncAlgorithm+0x92>
 8009300:	4b36      	ldr	r3, [pc, #216]	; (80093dc <TimeSyncAlgorithm+0x108>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2201      	movs	r2, #1
 8009306:	4053      	eors	r3, r2
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d02b      	beq.n	8009366 <TimeSyncAlgorithm+0x92>
		{

			if (get_epoch_time() >= onDateTime)
 800930e:	f7fb fde7 	bl	8004ee0 <get_epoch_time>
 8009312:	0002      	movs	r2, r0
 8009314:	000b      	movs	r3, r1
 8009316:	4932      	ldr	r1, [pc, #200]	; (80093e0 <TimeSyncAlgorithm+0x10c>)
 8009318:	6809      	ldr	r1, [r1, #0]
 800931a:	6039      	str	r1, [r7, #0]
 800931c:	2100      	movs	r1, #0
 800931e:	6079      	str	r1, [r7, #4]
 8009320:	6838      	ldr	r0, [r7, #0]
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	000e      	movs	r6, r1
 8009326:	429e      	cmp	r6, r3
 8009328:	dc1d      	bgt.n	8009366 <TimeSyncAlgorithm+0x92>
 800932a:	000e      	movs	r6, r1
 800932c:	429e      	cmp	r6, r3
 800932e:	d102      	bne.n	8009336 <TimeSyncAlgorithm+0x62>
 8009330:	0001      	movs	r1, r0
 8009332:	4291      	cmp	r1, r2
 8009334:	d817      	bhi.n	8009366 <TimeSyncAlgorithm+0x92>
			{
				timesynch_on_was_sent = 1;
 8009336:	4b29      	ldr	r3, [pc, #164]	; (80093dc <TimeSyncAlgorithm+0x108>)
 8009338:	2201      	movs	r2, #1
 800933a:	701a      	strb	r2, [r3, #0]

				if (pcb_config.sSetIRON[0] - '0')
 800933c:	4b29      	ldr	r3, [pc, #164]	; (80093e4 <TimeSyncAlgorithm+0x110>)
 800933e:	22de      	movs	r2, #222	; 0xde
 8009340:	5c9b      	ldrb	r3, [r3, r2]
 8009342:	2b30      	cmp	r3, #48	; 0x30
 8009344:	d008      	beq.n	8009358 <TimeSyncAlgorithm+0x84>
				{
					IRSend_NEC(true);
 8009346:	2001      	movs	r0, #1
 8009348:	f7fd fb56 	bl	80069f8 <IRSend_NEC>
					IRSend_NEC(true);
 800934c:	2001      	movs	r0, #1
 800934e:	f7fd fb53 	bl	80069f8 <IRSend_NEC>
					IRSend_NEC(true);
 8009352:	2001      	movs	r0, #1
 8009354:	f7fd fb50 	bl	80069f8 <IRSend_NEC>
				}
				if (pcb_config.sSetRS232ON[0] - '0')
 8009358:	4b22      	ldr	r3, [pc, #136]	; (80093e4 <TimeSyncAlgorithm+0x110>)
 800935a:	22e8      	movs	r2, #232	; 0xe8
 800935c:	5c9b      	ldrb	r3, [r3, r2]
 800935e:	2b30      	cmp	r3, #48	; 0x30
 8009360:	d001      	beq.n	8009366 <TimeSyncAlgorithm+0x92>
					Send_RS232_Command_ON();
 8009362:	f004 fb59 	bl	800da18 <Send_RS232_Command_ON>
			}
		}

		if (offSwitch == 1 && timesynch_off_was_sent == 0)
 8009366:	4b20      	ldr	r3, [pc, #128]	; (80093e8 <TimeSyncAlgorithm+0x114>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d12c      	bne.n	80093c8 <TimeSyncAlgorithm+0xf4>
 800936e:	4b1f      	ldr	r3, [pc, #124]	; (80093ec <TimeSyncAlgorithm+0x118>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2201      	movs	r2, #1
 8009374:	4053      	eors	r3, r2
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d025      	beq.n	80093c8 <TimeSyncAlgorithm+0xf4>
		{

			if (get_epoch_time() >= offDateTime)
 800937c:	f7fb fdb0 	bl	8004ee0 <get_epoch_time>
 8009380:	0002      	movs	r2, r0
 8009382:	000b      	movs	r3, r1
 8009384:	491a      	ldr	r1, [pc, #104]	; (80093f0 <TimeSyncAlgorithm+0x11c>)
 8009386:	6809      	ldr	r1, [r1, #0]
 8009388:	000c      	movs	r4, r1
 800938a:	2100      	movs	r1, #0
 800938c:	000d      	movs	r5, r1
 800938e:	429d      	cmp	r5, r3
 8009390:	dc1a      	bgt.n	80093c8 <TimeSyncAlgorithm+0xf4>
 8009392:	d101      	bne.n	8009398 <TimeSyncAlgorithm+0xc4>
 8009394:	4294      	cmp	r4, r2
 8009396:	d817      	bhi.n	80093c8 <TimeSyncAlgorithm+0xf4>
			{
				timesynch_off_was_sent = 1;
 8009398:	4b14      	ldr	r3, [pc, #80]	; (80093ec <TimeSyncAlgorithm+0x118>)
 800939a:	2201      	movs	r2, #1
 800939c:	701a      	strb	r2, [r3, #0]

				if (pcb_config.sSetIRON[0] - '0')
 800939e:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <TimeSyncAlgorithm+0x110>)
 80093a0:	22de      	movs	r2, #222	; 0xde
 80093a2:	5c9b      	ldrb	r3, [r3, r2]
 80093a4:	2b30      	cmp	r3, #48	; 0x30
 80093a6:	d008      	beq.n	80093ba <TimeSyncAlgorithm+0xe6>
				{
					IRSend_NEC(false);
 80093a8:	2000      	movs	r0, #0
 80093aa:	f7fd fb25 	bl	80069f8 <IRSend_NEC>
					IRSend_NEC(false);
 80093ae:	2000      	movs	r0, #0
 80093b0:	f7fd fb22 	bl	80069f8 <IRSend_NEC>
					IRSend_NEC(false);
 80093b4:	2000      	movs	r0, #0
 80093b6:	f7fd fb1f 	bl	80069f8 <IRSend_NEC>
				}
				if (pcb_config.sSetRS232ON[0] - '0')
 80093ba:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <TimeSyncAlgorithm+0x110>)
 80093bc:	22e8      	movs	r2, #232	; 0xe8
 80093be:	5c9b      	ldrb	r3, [r3, r2]
 80093c0:	2b30      	cmp	r3, #48	; 0x30
 80093c2:	d001      	beq.n	80093c8 <TimeSyncAlgorithm+0xf4>
					Send_RS232_Command_OFF();
 80093c4:	f004 fba6 	bl	800db14 <Send_RS232_Command_OFF>
			}
		}
	}
}
 80093c8:	46c0      	nop			; (mov r8, r8)
 80093ca:	46bd      	mov	sp, r7
 80093cc:	b003      	add	sp, #12
 80093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d0:	20006bb8 	.word	0x20006bb8
 80093d4:	00004e1f 	.word	0x00004e1f
 80093d8:	2000522c 	.word	0x2000522c
 80093dc:	20006293 	.word	0x20006293
 80093e0:	20005230 	.word	0x20005230
 80093e4:	20006db4 	.word	0x20006db4
 80093e8:	20005234 	.word	0x20005234
 80093ec:	20006294 	.word	0x20006294
 80093f0:	20005238 	.word	0x20005238

080093f4 <RecursionAlarmAlgorithm>:

void RecursionAlarmAlgorithm()
{
 80093f4:	b5b0      	push	{r4, r5, r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
	int timezoneHours = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]

	if (ceilf(realTimeZone) == realTimeZone)
 80093fe:	4b69      	ldr	r3, [pc, #420]	; (80095a4 <RecursionAlarmAlgorithm+0x1b0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	1c18      	adds	r0, r3, #0
 8009404:	f018 ff74 	bl	80222f0 <ceilf>
 8009408:	1c02      	adds	r2, r0, #0
 800940a:	4b66      	ldr	r3, [pc, #408]	; (80095a4 <RecursionAlarmAlgorithm+0x1b0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	1c19      	adds	r1, r3, #0
 8009410:	1c10      	adds	r0, r2, #0
 8009412:	f7f9 f813 	bl	800243c <__aeabi_fcmpeq>
 8009416:	1e03      	subs	r3, r0, #0
 8009418:	d007      	beq.n	800942a <RecursionAlarmAlgorithm+0x36>
		timezoneHours = (int)realTimeZone;
 800941a:	4b62      	ldr	r3, [pc, #392]	; (80095a4 <RecursionAlarmAlgorithm+0x1b0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	1c18      	adds	r0, r3, #0
 8009420:	f7f9 fe4e 	bl	80030c0 <__aeabi_f2iz>
 8009424:	0003      	movs	r3, r0
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e01a      	b.n	8009460 <RecursionAlarmAlgorithm+0x6c>
	else
	{
		timezoneHours = floorf(realTimeZone);
 800942a:	4b5e      	ldr	r3, [pc, #376]	; (80095a4 <RecursionAlarmAlgorithm+0x1b0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	1c18      	adds	r0, r3, #0
 8009430:	f018 ff9c 	bl	802236c <floorf>
 8009434:	1c03      	adds	r3, r0, #0
 8009436:	1c18      	adds	r0, r3, #0
 8009438:	f7f9 fe42 	bl	80030c0 <__aeabi_f2iz>
 800943c:	0003      	movs	r3, r0
 800943e:	617b      	str	r3, [r7, #20]

		if (timezoneHours > 0)
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2b00      	cmp	r3, #0
 8009444:	dd06      	ble.n	8009454 <RecursionAlarmAlgorithm+0x60>
			time_alarm_on_mm += 30;
 8009446:	4b58      	ldr	r3, [pc, #352]	; (80095a8 <RecursionAlarmAlgorithm+0x1b4>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	331e      	adds	r3, #30
 800944c:	b2da      	uxtb	r2, r3
 800944e:	4b56      	ldr	r3, [pc, #344]	; (80095a8 <RecursionAlarmAlgorithm+0x1b4>)
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	e005      	b.n	8009460 <RecursionAlarmAlgorithm+0x6c>
		else
			time_alarm_on_mm -= 30;
 8009454:	4b54      	ldr	r3, [pc, #336]	; (80095a8 <RecursionAlarmAlgorithm+0x1b4>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	3b1e      	subs	r3, #30
 800945a:	b2da      	uxtb	r2, r3
 800945c:	4b52      	ldr	r3, [pc, #328]	; (80095a8 <RecursionAlarmAlgorithm+0x1b4>)
 800945e:	701a      	strb	r2, [r3, #0]
	}
	if ((HAL_GetTick() - recursion_counter) >= 59000)
 8009460:	f005 ff98 	bl	800f394 <HAL_GetTick>
 8009464:	0002      	movs	r2, r0
 8009466:	4b51      	ldr	r3, [pc, #324]	; (80095ac <RecursionAlarmAlgorithm+0x1b8>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	4a50      	ldr	r2, [pc, #320]	; (80095b0 <RecursionAlarmAlgorithm+0x1bc>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d800      	bhi.n	8009474 <RecursionAlarmAlgorithm+0x80>
 8009472:	e092      	b.n	800959a <RecursionAlarmAlgorithm+0x1a6>
	{
		recursion_counter = HAL_GetTick();
 8009474:	f005 ff8e 	bl	800f394 <HAL_GetTick>
 8009478:	0002      	movs	r2, r0
 800947a:	4b4c      	ldr	r3, [pc, #304]	; (80095ac <RecursionAlarmAlgorithm+0x1b8>)
 800947c:	601a      	str	r2, [r3, #0]

		// Convert to number of days since 1 Jan 1970 1 Jan 1970 was a Thursday, so add 4 so Sunday is day 0, and mod 7
		time_t localtime = get_epoch_time() + (timezoneHours * 60 * 60);
 800947e:	f7fb fd2f 	bl	8004ee0 <get_epoch_time>
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	0013      	movs	r3, r2
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	011a      	lsls	r2, r3, #4
 800948c:	1ad2      	subs	r2, r2, r3
 800948e:	0113      	lsls	r3, r2, #4
 8009490:	001a      	movs	r2, r3
 8009492:	0013      	movs	r3, r2
 8009494:	001c      	movs	r4, r3
 8009496:	17db      	asrs	r3, r3, #31
 8009498:	001d      	movs	r5, r3
 800949a:	0002      	movs	r2, r0
 800949c:	000b      	movs	r3, r1
 800949e:	1912      	adds	r2, r2, r4
 80094a0:	416b      	adcs	r3, r5
 80094a2:	60ba      	str	r2, [r7, #8]
 80094a4:	60fb      	str	r3, [r7, #12]
		int days_since_epoch = localtime / 86400;
 80094a6:	68b8      	ldr	r0, [r7, #8]
 80094a8:	68f9      	ldr	r1, [r7, #12]
 80094aa:	4a42      	ldr	r2, [pc, #264]	; (80095b4 <RecursionAlarmAlgorithm+0x1c0>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	f7f8 fff3 	bl	8002498 <__aeabi_ldivmod>
 80094b2:	0002      	movs	r2, r0
 80094b4:	000b      	movs	r3, r1
 80094b6:	0013      	movs	r3, r2
 80094b8:	607b      	str	r3, [r7, #4]
		int day_of_week = (days_since_epoch + 4) % 7;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3304      	adds	r3, #4
 80094be:	2107      	movs	r1, #7
 80094c0:	0018      	movs	r0, r3
 80094c2:	f7f8 ffa9 	bl	8002418 <__aeabi_idivmod>
 80094c6:	000b      	movs	r3, r1
 80094c8:	603b      	str	r3, [r7, #0]
		printf("Day of Week : %d\r\n", day_of_week);
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	4b3a      	ldr	r3, [pc, #232]	; (80095b8 <RecursionAlarmAlgorithm+0x1c4>)
 80094ce:	0011      	movs	r1, r2
 80094d0:	0018      	movs	r0, r3
 80094d2:	f019 f99f 	bl	8022814 <iprintf>

		// When DAY alarm is active
		if (Recursion_Alarm_ON[day_of_week] == 1)
 80094d6:	4b39      	ldr	r3, [pc, #228]	; (80095bc <RecursionAlarmAlgorithm+0x1c8>)
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	0092      	lsls	r2, r2, #2
 80094dc:	58d3      	ldr	r3, [r2, r3]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d12a      	bne.n	8009538 <RecursionAlarmAlgorithm+0x144>
		{
			// Did we reach desired local time?
			if (Get_Hours() + timezoneHours == time_alarm_on_hh)
 80094e2:	f7fb fd45 	bl	8004f70 <Get_Hours>
 80094e6:	0003      	movs	r3, r0
 80094e8:	001a      	movs	r2, r3
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	18d3      	adds	r3, r2, r3
 80094ee:	4a34      	ldr	r2, [pc, #208]	; (80095c0 <RecursionAlarmAlgorithm+0x1cc>)
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d120      	bne.n	8009538 <RecursionAlarmAlgorithm+0x144>
			{
				// Did we reach the desired minute?
				if (Get_Minutes() == time_alarm_on_mm)
 80094f6:	f7fb fd53 	bl	8004fa0 <Get_Minutes>
 80094fa:	0003      	movs	r3, r0
 80094fc:	001a      	movs	r2, r3
 80094fe:	4b2a      	ldr	r3, [pc, #168]	; (80095a8 <RecursionAlarmAlgorithm+0x1b4>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d118      	bne.n	8009538 <RecursionAlarmAlgorithm+0x144>
				{
					printf("DAILY ALARM ON /R/N");
 8009506:	4b2f      	ldr	r3, [pc, #188]	; (80095c4 <RecursionAlarmAlgorithm+0x1d0>)
 8009508:	0018      	movs	r0, r3
 800950a:	f019 f983 	bl	8022814 <iprintf>

					if (pcb_config.sSetIRON[0] - '0')
 800950e:	4b2e      	ldr	r3, [pc, #184]	; (80095c8 <RecursionAlarmAlgorithm+0x1d4>)
 8009510:	22de      	movs	r2, #222	; 0xde
 8009512:	5c9b      	ldrb	r3, [r3, r2]
 8009514:	2b30      	cmp	r3, #48	; 0x30
 8009516:	d008      	beq.n	800952a <RecursionAlarmAlgorithm+0x136>
					{
						IRSend_NEC(true);
 8009518:	2001      	movs	r0, #1
 800951a:	f7fd fa6d 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(true);
 800951e:	2001      	movs	r0, #1
 8009520:	f7fd fa6a 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(true);
 8009524:	2001      	movs	r0, #1
 8009526:	f7fd fa67 	bl	80069f8 <IRSend_NEC>
					}
					if (pcb_config.sSetRS232ON[0] - '0')
 800952a:	4b27      	ldr	r3, [pc, #156]	; (80095c8 <RecursionAlarmAlgorithm+0x1d4>)
 800952c:	22e8      	movs	r2, #232	; 0xe8
 800952e:	5c9b      	ldrb	r3, [r3, r2]
 8009530:	2b30      	cmp	r3, #48	; 0x30
 8009532:	d001      	beq.n	8009538 <RecursionAlarmAlgorithm+0x144>
						Send_RS232_Command_ON();
 8009534:	f004 fa70 	bl	800da18 <Send_RS232_Command_ON>
				}
			}
		}

		if (Recursion_Alarm_OFF[day_of_week] == 1)
 8009538:	4b24      	ldr	r3, [pc, #144]	; (80095cc <RecursionAlarmAlgorithm+0x1d8>)
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	0092      	lsls	r2, r2, #2
 800953e:	58d3      	ldr	r3, [r2, r3]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d12a      	bne.n	800959a <RecursionAlarmAlgorithm+0x1a6>
		{
			// Did we reach desired local time?
			if (Get_Hours() + timezoneHours == time_alarm_off_hh)
 8009544:	f7fb fd14 	bl	8004f70 <Get_Hours>
 8009548:	0003      	movs	r3, r0
 800954a:	001a      	movs	r2, r3
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	18d3      	adds	r3, r2, r3
 8009550:	4a1f      	ldr	r2, [pc, #124]	; (80095d0 <RecursionAlarmAlgorithm+0x1dc>)
 8009552:	7812      	ldrb	r2, [r2, #0]
 8009554:	4293      	cmp	r3, r2
 8009556:	d120      	bne.n	800959a <RecursionAlarmAlgorithm+0x1a6>
			{
				// Did we reach the desired minute?
				if (Get_Minutes() == time_alarm_off_mm)
 8009558:	f7fb fd22 	bl	8004fa0 <Get_Minutes>
 800955c:	0003      	movs	r3, r0
 800955e:	001a      	movs	r2, r3
 8009560:	4b1c      	ldr	r3, [pc, #112]	; (80095d4 <RecursionAlarmAlgorithm+0x1e0>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	429a      	cmp	r2, r3
 8009566:	d118      	bne.n	800959a <RecursionAlarmAlgorithm+0x1a6>
				{
					printf("DAILY ALARM OFF /R/N");
 8009568:	4b1b      	ldr	r3, [pc, #108]	; (80095d8 <RecursionAlarmAlgorithm+0x1e4>)
 800956a:	0018      	movs	r0, r3
 800956c:	f019 f952 	bl	8022814 <iprintf>

					if (pcb_config.sSetIRON[0] - '0')
 8009570:	4b15      	ldr	r3, [pc, #84]	; (80095c8 <RecursionAlarmAlgorithm+0x1d4>)
 8009572:	22de      	movs	r2, #222	; 0xde
 8009574:	5c9b      	ldrb	r3, [r3, r2]
 8009576:	2b30      	cmp	r3, #48	; 0x30
 8009578:	d008      	beq.n	800958c <RecursionAlarmAlgorithm+0x198>
					{
						IRSend_NEC(false);
 800957a:	2000      	movs	r0, #0
 800957c:	f7fd fa3c 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(false);
 8009580:	2000      	movs	r0, #0
 8009582:	f7fd fa39 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(false);
 8009586:	2000      	movs	r0, #0
 8009588:	f7fd fa36 	bl	80069f8 <IRSend_NEC>
					}
					if (pcb_config.sSetRS232ON[0] - '0')
 800958c:	4b0e      	ldr	r3, [pc, #56]	; (80095c8 <RecursionAlarmAlgorithm+0x1d4>)
 800958e:	22e8      	movs	r2, #232	; 0xe8
 8009590:	5c9b      	ldrb	r3, [r3, r2]
 8009592:	2b30      	cmp	r3, #48	; 0x30
 8009594:	d001      	beq.n	800959a <RecursionAlarmAlgorithm+0x1a6>
						Send_RS232_Command_OFF();
 8009596:	f004 fabd 	bl	800db14 <Send_RS232_Command_OFF>
				}
			}
		}
	}
}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	46bd      	mov	sp, r7
 800959e:	b006      	add	sp, #24
 80095a0:	bdb0      	pop	{r4, r5, r7, pc}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	20004f38 	.word	0x20004f38
 80095a8:	20006701 	.word	0x20006701
 80095ac:	20006bbc 	.word	0x20006bbc
 80095b0:	0000e677 	.word	0x0000e677
 80095b4:	00015180 	.word	0x00015180
 80095b8:	080255f0 	.word	0x080255f0
 80095bc:	20005240 	.word	0x20005240
 80095c0:	20006700 	.word	0x20006700
 80095c4:	08025604 	.word	0x08025604
 80095c8:	20006db4 	.word	0x20006db4
 80095cc:	2000525c 	.word	0x2000525c
 80095d0:	20006702 	.word	0x20006702
 80095d4:	20006703 	.word	0x20006703
 80095d8:	08025618 	.word	0x08025618

080095dc <MainAlgorithm>:
void MainAlgorithm()
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
	if (pcb_config.loopon == 2 && pcb_config.loopoff == 2)
 80095e0:	4a78      	ldr	r2, [pc, #480]	; (80097c4 <MainAlgorithm+0x1e8>)
 80095e2:	2381      	movs	r3, #129	; 0x81
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	5cd3      	ldrb	r3, [r2, r3]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d000      	beq.n	80095ee <MainAlgorithm+0x12>
 80095ec:	e0e3      	b.n	80097b6 <MainAlgorithm+0x1da>
 80095ee:	4a75      	ldr	r2, [pc, #468]	; (80097c4 <MainAlgorithm+0x1e8>)
 80095f0:	2304      	movs	r3, #4
 80095f2:	33ff      	adds	r3, #255	; 0xff
 80095f4:	5cd3      	ldrb	r3, [r2, r3]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d000      	beq.n	80095fc <MainAlgorithm+0x20>
 80095fa:	e0dc      	b.n	80097b6 <MainAlgorithm+0x1da>
	{
		if (command_sent == 0)
 80095fc:	4b72      	ldr	r3, [pc, #456]	; (80097c8 <MainAlgorithm+0x1ec>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d000      	beq.n	8009606 <MainAlgorithm+0x2a>
 8009604:	e06c      	b.n	80096e0 <MainAlgorithm+0x104>
		{
			if (pcb_config.sSetTempON[0] - '0' == 1)
 8009606:	4b6f      	ldr	r3, [pc, #444]	; (80097c4 <MainAlgorithm+0x1e8>)
 8009608:	22b6      	movs	r2, #182	; 0xb6
 800960a:	5c9b      	ldrb	r3, [r3, r2]
 800960c:	2b31      	cmp	r3, #49	; 0x31
 800960e:	d12b      	bne.n	8009668 <MainAlgorithm+0x8c>
			{

				if ((temperature_farenheit < temperature_min_treshold) || (temperature_farenheit > temperature_max_treshold))
 8009610:	4b6e      	ldr	r3, [pc, #440]	; (80097cc <MainAlgorithm+0x1f0>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4b6e      	ldr	r3, [pc, #440]	; (80097d0 <MainAlgorithm+0x1f4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	1c19      	adds	r1, r3, #0
 800961a:	1c10      	adds	r0, r2, #0
 800961c:	f7f8 ff14 	bl	8002448 <__aeabi_fcmplt>
 8009620:	1e03      	subs	r3, r0, #0
 8009622:	d109      	bne.n	8009638 <MainAlgorithm+0x5c>
 8009624:	4b69      	ldr	r3, [pc, #420]	; (80097cc <MainAlgorithm+0x1f0>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	4b6a      	ldr	r3, [pc, #424]	; (80097d4 <MainAlgorithm+0x1f8>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	1c19      	adds	r1, r3, #0
 800962e:	1c10      	adds	r0, r2, #0
 8009630:	f7f8 ff1e 	bl	8002470 <__aeabi_fcmpgt>
 8009634:	1e03      	subs	r3, r0, #0
 8009636:	d017      	beq.n	8009668 <MainAlgorithm+0x8c>
				{
					if (pcb_config.sSetIRON[0] - '0')
 8009638:	4b62      	ldr	r3, [pc, #392]	; (80097c4 <MainAlgorithm+0x1e8>)
 800963a:	22de      	movs	r2, #222	; 0xde
 800963c:	5c9b      	ldrb	r3, [r3, r2]
 800963e:	2b30      	cmp	r3, #48	; 0x30
 8009640:	d008      	beq.n	8009654 <MainAlgorithm+0x78>
					{
						IRSend_NEC(true);
 8009642:	2001      	movs	r0, #1
 8009644:	f7fd f9d8 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(true);
 8009648:	2001      	movs	r0, #1
 800964a:	f7fd f9d5 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(true);
 800964e:	2001      	movs	r0, #1
 8009650:	f7fd f9d2 	bl	80069f8 <IRSend_NEC>
					}
					if (pcb_config.sSetRS232ON[0] - '0')
 8009654:	4b5b      	ldr	r3, [pc, #364]	; (80097c4 <MainAlgorithm+0x1e8>)
 8009656:	22e8      	movs	r2, #232	; 0xe8
 8009658:	5c9b      	ldrb	r3, [r3, r2]
 800965a:	2b30      	cmp	r3, #48	; 0x30
 800965c:	d001      	beq.n	8009662 <MainAlgorithm+0x86>
						Send_RS232_Command_ON();
 800965e:	f004 f9db 	bl	800da18 <Send_RS232_Command_ON>

					command_sent = 1;
 8009662:	4b59      	ldr	r3, [pc, #356]	; (80097c8 <MainAlgorithm+0x1ec>)
 8009664:	2201      	movs	r2, #1
 8009666:	601a      	str	r2, [r3, #0]
				}
			}
			if (pcb_config.sSetPIRON[0] - '0' == 1)
 8009668:	4b56      	ldr	r3, [pc, #344]	; (80097c4 <MainAlgorithm+0x1e8>)
 800966a:	22c0      	movs	r2, #192	; 0xc0
 800966c:	5c9b      	ldrb	r3, [r3, r2]
 800966e:	2b31      	cmp	r3, #49	; 0x31
 8009670:	d000      	beq.n	8009674 <MainAlgorithm+0x98>
 8009672:	e0a3      	b.n	80097bc <MainAlgorithm+0x1e0>
			{
				if (send_var == 1)
 8009674:	4b58      	ldr	r3, [pc, #352]	; (80097d8 <MainAlgorithm+0x1fc>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d000      	beq.n	800967e <MainAlgorithm+0xa2>
 800967c:	e09e      	b.n	80097bc <MainAlgorithm+0x1e0>
				{
					send_var = 0;
 800967e:	4b56      	ldr	r3, [pc, #344]	; (80097d8 <MainAlgorithm+0x1fc>)
 8009680:	2200      	movs	r2, #0
 8009682:	601a      	str	r2, [r3, #0]

					if (pcb_config.sSetIRON[0] - '0')
 8009684:	4b4f      	ldr	r3, [pc, #316]	; (80097c4 <MainAlgorithm+0x1e8>)
 8009686:	22de      	movs	r2, #222	; 0xde
 8009688:	5c9b      	ldrb	r3, [r3, r2]
 800968a:	2b30      	cmp	r3, #48	; 0x30
 800968c:	d016      	beq.n	80096bc <MainAlgorithm+0xe0>
					{
						if (Motion_Is_Detected())
 800968e:	f003 f921 	bl	800c8d4 <Motion_Is_Detected>
 8009692:	1e03      	subs	r3, r0, #0
 8009694:	d009      	beq.n	80096aa <MainAlgorithm+0xce>
						{
							IRSend_NEC(true);
 8009696:	2001      	movs	r0, #1
 8009698:	f7fd f9ae 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(true);
 800969c:	2001      	movs	r0, #1
 800969e:	f7fd f9ab 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(true);
 80096a2:	2001      	movs	r0, #1
 80096a4:	f7fd f9a8 	bl	80069f8 <IRSend_NEC>
 80096a8:	e008      	b.n	80096bc <MainAlgorithm+0xe0>
						}
						else
						{
							IRSend_NEC(false);
 80096aa:	2000      	movs	r0, #0
 80096ac:	f7fd f9a4 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(false);
 80096b0:	2000      	movs	r0, #0
 80096b2:	f7fd f9a1 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(false);
 80096b6:	2000      	movs	r0, #0
 80096b8:	f7fd f99e 	bl	80069f8 <IRSend_NEC>
						}
					}
					if (pcb_config.sSetRS232ON[0] - '0')
 80096bc:	4b41      	ldr	r3, [pc, #260]	; (80097c4 <MainAlgorithm+0x1e8>)
 80096be:	22e8      	movs	r2, #232	; 0xe8
 80096c0:	5c9b      	ldrb	r3, [r3, r2]
 80096c2:	2b30      	cmp	r3, #48	; 0x30
 80096c4:	d008      	beq.n	80096d8 <MainAlgorithm+0xfc>
					{
						if (Motion_Is_Detected())
 80096c6:	f003 f905 	bl	800c8d4 <Motion_Is_Detected>
 80096ca:	1e03      	subs	r3, r0, #0
 80096cc:	d002      	beq.n	80096d4 <MainAlgorithm+0xf8>
							Send_RS232_Command_ON();
 80096ce:	f004 f9a3 	bl	800da18 <Send_RS232_Command_ON>
 80096d2:	e001      	b.n	80096d8 <MainAlgorithm+0xfc>
						else
							Send_RS232_Command_OFF();
 80096d4:	f004 fa1e 	bl	800db14 <Send_RS232_Command_OFF>
					}
					command_sent = 1;
 80096d8:	4b3b      	ldr	r3, [pc, #236]	; (80097c8 <MainAlgorithm+0x1ec>)
 80096da:	2201      	movs	r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
		if (command_sent == 0)
 80096de:	e06d      	b.n	80097bc <MainAlgorithm+0x1e0>
				}
			}
		}
		else
		{
			if (pcb_config.sSetTempON[0] - '0' == 1)
 80096e0:	4b38      	ldr	r3, [pc, #224]	; (80097c4 <MainAlgorithm+0x1e8>)
 80096e2:	22b6      	movs	r2, #182	; 0xb6
 80096e4:	5c9b      	ldrb	r3, [r3, r2]
 80096e6:	2b31      	cmp	r3, #49	; 0x31
 80096e8:	d12b      	bne.n	8009742 <MainAlgorithm+0x166>
			{

				if ((temperature_farenheit < temperature_min_treshold) && (temperature_farenheit < temperature_max_treshold))
 80096ea:	4b38      	ldr	r3, [pc, #224]	; (80097cc <MainAlgorithm+0x1f0>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b38      	ldr	r3, [pc, #224]	; (80097d0 <MainAlgorithm+0x1f4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	1c19      	adds	r1, r3, #0
 80096f4:	1c10      	adds	r0, r2, #0
 80096f6:	f7f8 fea7 	bl	8002448 <__aeabi_fcmplt>
 80096fa:	1e03      	subs	r3, r0, #0
 80096fc:	d021      	beq.n	8009742 <MainAlgorithm+0x166>
 80096fe:	4b33      	ldr	r3, [pc, #204]	; (80097cc <MainAlgorithm+0x1f0>)
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	4b34      	ldr	r3, [pc, #208]	; (80097d4 <MainAlgorithm+0x1f8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	1c19      	adds	r1, r3, #0
 8009708:	1c10      	adds	r0, r2, #0
 800970a:	f7f8 fe9d 	bl	8002448 <__aeabi_fcmplt>
 800970e:	1e03      	subs	r3, r0, #0
 8009710:	d017      	beq.n	8009742 <MainAlgorithm+0x166>
				{
					if (pcb_config.sSetIRON[0] - '0')
 8009712:	4b2c      	ldr	r3, [pc, #176]	; (80097c4 <MainAlgorithm+0x1e8>)
 8009714:	22de      	movs	r2, #222	; 0xde
 8009716:	5c9b      	ldrb	r3, [r3, r2]
 8009718:	2b30      	cmp	r3, #48	; 0x30
 800971a:	d008      	beq.n	800972e <MainAlgorithm+0x152>
					{
						IRSend_NEC(false);
 800971c:	2000      	movs	r0, #0
 800971e:	f7fd f96b 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(false);
 8009722:	2000      	movs	r0, #0
 8009724:	f7fd f968 	bl	80069f8 <IRSend_NEC>
						IRSend_NEC(false);
 8009728:	2000      	movs	r0, #0
 800972a:	f7fd f965 	bl	80069f8 <IRSend_NEC>
					}
					if (pcb_config.sSetRS232ON[0] - '0')
 800972e:	4b25      	ldr	r3, [pc, #148]	; (80097c4 <MainAlgorithm+0x1e8>)
 8009730:	22e8      	movs	r2, #232	; 0xe8
 8009732:	5c9b      	ldrb	r3, [r3, r2]
 8009734:	2b30      	cmp	r3, #48	; 0x30
 8009736:	d001      	beq.n	800973c <MainAlgorithm+0x160>
						Send_RS232_Command_OFF();
 8009738:	f004 f9ec 	bl	800db14 <Send_RS232_Command_OFF>

					command_sent = 0;
 800973c:	4b22      	ldr	r3, [pc, #136]	; (80097c8 <MainAlgorithm+0x1ec>)
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
				}
			}
			if (pcb_config.sSetPIRON[0] - '0' == 1)
 8009742:	4b20      	ldr	r3, [pc, #128]	; (80097c4 <MainAlgorithm+0x1e8>)
 8009744:	22c0      	movs	r2, #192	; 0xc0
 8009746:	5c9b      	ldrb	r3, [r3, r2]
 8009748:	2b31      	cmp	r3, #49	; 0x31
 800974a:	d137      	bne.n	80097bc <MainAlgorithm+0x1e0>
			{
				if (send_var == 1)
 800974c:	4b22      	ldr	r3, [pc, #136]	; (80097d8 <MainAlgorithm+0x1fc>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d133      	bne.n	80097bc <MainAlgorithm+0x1e0>
				{
					send_var = 0;
 8009754:	4b20      	ldr	r3, [pc, #128]	; (80097d8 <MainAlgorithm+0x1fc>)
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
					if (pcb_config.sSetIRON[0] - '0')
 800975a:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <MainAlgorithm+0x1e8>)
 800975c:	22de      	movs	r2, #222	; 0xde
 800975e:	5c9b      	ldrb	r3, [r3, r2]
 8009760:	2b30      	cmp	r3, #48	; 0x30
 8009762:	d016      	beq.n	8009792 <MainAlgorithm+0x1b6>
					{
						if (Motion_Is_Detected())
 8009764:	f003 f8b6 	bl	800c8d4 <Motion_Is_Detected>
 8009768:	1e03      	subs	r3, r0, #0
 800976a:	d009      	beq.n	8009780 <MainAlgorithm+0x1a4>
						{
							IRSend_NEC(true);
 800976c:	2001      	movs	r0, #1
 800976e:	f7fd f943 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(true);
 8009772:	2001      	movs	r0, #1
 8009774:	f7fd f940 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(true);
 8009778:	2001      	movs	r0, #1
 800977a:	f7fd f93d 	bl	80069f8 <IRSend_NEC>
 800977e:	e008      	b.n	8009792 <MainAlgorithm+0x1b6>
						}
						else
						{
							IRSend_NEC(false);
 8009780:	2000      	movs	r0, #0
 8009782:	f7fd f939 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(false);
 8009786:	2000      	movs	r0, #0
 8009788:	f7fd f936 	bl	80069f8 <IRSend_NEC>
							IRSend_NEC(false);
 800978c:	2000      	movs	r0, #0
 800978e:	f7fd f933 	bl	80069f8 <IRSend_NEC>
						}
					}
					if (pcb_config.sSetRS232ON[0] - '0')
 8009792:	4b0c      	ldr	r3, [pc, #48]	; (80097c4 <MainAlgorithm+0x1e8>)
 8009794:	22e8      	movs	r2, #232	; 0xe8
 8009796:	5c9b      	ldrb	r3, [r3, r2]
 8009798:	2b30      	cmp	r3, #48	; 0x30
 800979a:	d008      	beq.n	80097ae <MainAlgorithm+0x1d2>
					{
						if (Motion_Is_Detected())
 800979c:	f003 f89a 	bl	800c8d4 <Motion_Is_Detected>
 80097a0:	1e03      	subs	r3, r0, #0
 80097a2:	d002      	beq.n	80097aa <MainAlgorithm+0x1ce>
							Send_RS232_Command_ON();
 80097a4:	f004 f938 	bl	800da18 <Send_RS232_Command_ON>
 80097a8:	e001      	b.n	80097ae <MainAlgorithm+0x1d2>
						else
							Send_RS232_Command_OFF();
 80097aa:	f004 f9b3 	bl	800db14 <Send_RS232_Command_OFF>
					}

					command_sent = 0;
 80097ae:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <MainAlgorithm+0x1ec>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]
		if (command_sent == 0)
 80097b4:	e002      	b.n	80097bc <MainAlgorithm+0x1e0>
			}
		}
	}
	else
	{
		loop_process();
 80097b6:	f7fe fc23 	bl	8008000 <loop_process>
	}
}
 80097ba:	e000      	b.n	80097be <MainAlgorithm+0x1e2>
		if (command_sent == 0)
 80097bc:	46c0      	nop			; (mov r8, r8)
}
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20006db4 	.word	0x20006db4
 80097c8:	20006be0 	.word	0x20006be0
 80097cc:	20006d58 	.word	0x20006d58
 80097d0:	20006d84 	.word	0x20006d84
 80097d4:	20006d80 	.word	0x20006d80
 80097d8:	20006748 	.word	0x20006748

080097dc <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <__io_putchar+0x20>)
 80097e6:	1d39      	adds	r1, r7, #4
 80097e8:	4805      	ldr	r0, [pc, #20]	; (8009800 <__io_putchar+0x24>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	f00b fdaa 	bl	8015344 <HAL_UART_Transmit>

	return ch;
 80097f0:	687b      	ldr	r3, [r7, #4]
}
 80097f2:	0018      	movs	r0, r3
 80097f4:	46bd      	mov	sp, r7
 80097f6:	b002      	add	sp, #8
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	0000ffff 	.word	0x0000ffff
 8009800:	20006a90 	.word	0x20006a90

08009804 <HeartBeatLedStart>:
		timestamp_led = HAL_GetTick();
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}
}
void HeartBeatLedStart()
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - timestamp_led) >= 500 && !stop_heart_beat_led)
 8009808:	f005 fdc4 	bl	800f394 <HAL_GetTick>
 800980c:	0002      	movs	r2, r0
 800980e:	4b19      	ldr	r3, [pc, #100]	; (8009874 <HeartBeatLedStart+0x70>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	1ad2      	subs	r2, r2, r3
 8009814:	23fa      	movs	r3, #250	; 0xfa
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	429a      	cmp	r2, r3
 800981a:	d316      	bcc.n	800984a <HeartBeatLedStart+0x46>
 800981c:	4b16      	ldr	r3, [pc, #88]	; (8009878 <HeartBeatLedStart+0x74>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2201      	movs	r2, #1
 8009822:	4053      	eors	r3, r2
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00f      	beq.n	800984a <HeartBeatLedStart+0x46>
	{
		count_led_status2++;
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <HeartBeatLedStart+0x78>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	4b12      	ldr	r3, [pc, #72]	; (800987c <HeartBeatLedStart+0x78>)
 8009832:	601a      	str	r2, [r3, #0]
		timestamp_led = HAL_GetTick();
 8009834:	f005 fdae 	bl	800f394 <HAL_GetTick>
 8009838:	0002      	movs	r2, r0
 800983a:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <HeartBeatLedStart+0x70>)
 800983c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800983e:	23a0      	movs	r3, #160	; 0xa0
 8009840:	05db      	lsls	r3, r3, #23
 8009842:	2101      	movs	r1, #1
 8009844:	0018      	movs	r0, r3
 8009846:	f007 fca9 	bl	801119c <HAL_GPIO_TogglePin>
	}
	if (count_led_status2 >= 20)
 800984a:	4b0c      	ldr	r3, [pc, #48]	; (800987c <HeartBeatLedStart+0x78>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b13      	cmp	r3, #19
 8009850:	d90c      	bls.n	800986c <HeartBeatLedStart+0x68>
	{
		stop_heart_beat_led = true;
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <HeartBeatLedStart+0x74>)
 8009854:	2201      	movs	r2, #1
 8009856:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009858:	23a0      	movs	r3, #160	; 0xa0
 800985a:	05db      	lsls	r3, r3, #23
 800985c:	2201      	movs	r2, #1
 800985e:	2101      	movs	r1, #1
 8009860:	0018      	movs	r0, r3
 8009862:	f007 fc7e 	bl	8011162 <HAL_GPIO_WritePin>
		count_led_status2 = 0;
 8009866:	4b05      	ldr	r3, [pc, #20]	; (800987c <HeartBeatLedStart+0x78>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
	}
}
 800986c:	46c0      	nop			; (mov r8, r8)
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	20006bd8 	.word	0x20006bd8
 8009878:	20006da4 	.word	0x20006da4
 800987c:	20006da0 	.word	0x20006da0

08009880 <Status_Led>:

void Status_Led()
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
	switch (status_led_state)
 8009884:	4b93      	ldr	r3, [pc, #588]	; (8009ad4 <Status_Led+0x254>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b0a      	cmp	r3, #10
 800988a:	d900      	bls.n	800988e <Status_Led+0xe>
 800988c:	e110      	b.n	8009ab0 <Status_Led+0x230>
 800988e:	009a      	lsls	r2, r3, #2
 8009890:	4b91      	ldr	r3, [pc, #580]	; (8009ad8 <Status_Led+0x258>)
 8009892:	18d3      	adds	r3, r2, r3
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	469f      	mov	pc, r3
	{
	case INIT_STATUS_LED:
	{
		status_led_state = IDLE_STATUS_LED;
 8009898:	4b8e      	ldr	r3, [pc, #568]	; (8009ad4 <Status_Led+0x254>)
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
		led2_status = IDLESTAT;
 800989e:	4b8f      	ldr	r3, [pc, #572]	; (8009adc <Status_Led+0x25c>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	701a      	strb	r2, [r3, #0]
		break;
 80098a4:	e113      	b.n	8009ace <Status_Led+0x24e>
	}
	case IDLE_STATUS_LED:
	{
		if (led2_status == BTN_PRESSED1)
 80098a6:	4b8d      	ldr	r3, [pc, #564]	; (8009adc <Status_Led+0x25c>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d103      	bne.n	80098b6 <Status_Led+0x36>
			status_led_state = BUTTON_PRESSED_LED_3;
 80098ae:	4b89      	ldr	r3, [pc, #548]	; (8009ad4 <Status_Led+0x254>)
 80098b0:	2205      	movs	r2, #5
 80098b2:	701a      	strb	r2, [r3, #0]
			status_led_state = LEARNLED;
		else if (led2_status == LEARN_STATUS_LED2)
			status_led_state = LEARNLED3;
		else if (led2_status == BTN_PRESSED2)
			status_led_state = BUTTON_PRESSED_LED_1;
		break;
 80098b4:	e102      	b.n	8009abc <Status_Led+0x23c>
		else if (led2_status == LEARN_STATUS_LED)
 80098b6:	4b89      	ldr	r3, [pc, #548]	; (8009adc <Status_Led+0x25c>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d103      	bne.n	80098c6 <Status_Led+0x46>
			status_led_state = LEARNLED;
 80098be:	4b85      	ldr	r3, [pc, #532]	; (8009ad4 <Status_Led+0x254>)
 80098c0:	2207      	movs	r2, #7
 80098c2:	701a      	strb	r2, [r3, #0]
		break;
 80098c4:	e0fa      	b.n	8009abc <Status_Led+0x23c>
		else if (led2_status == LEARN_STATUS_LED2)
 80098c6:	4b85      	ldr	r3, [pc, #532]	; (8009adc <Status_Led+0x25c>)
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b05      	cmp	r3, #5
 80098cc:	d103      	bne.n	80098d6 <Status_Led+0x56>
			status_led_state = LEARNLED3;
 80098ce:	4b81      	ldr	r3, [pc, #516]	; (8009ad4 <Status_Led+0x254>)
 80098d0:	2209      	movs	r2, #9
 80098d2:	701a      	strb	r2, [r3, #0]
		break;
 80098d4:	e0f2      	b.n	8009abc <Status_Led+0x23c>
		else if (led2_status == BTN_PRESSED2)
 80098d6:	4b81      	ldr	r3, [pc, #516]	; (8009adc <Status_Led+0x25c>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d000      	beq.n	80098e0 <Status_Led+0x60>
 80098de:	e0ed      	b.n	8009abc <Status_Led+0x23c>
			status_led_state = BUTTON_PRESSED_LED_1;
 80098e0:	4b7c      	ldr	r3, [pc, #496]	; (8009ad4 <Status_Led+0x254>)
 80098e2:	2203      	movs	r2, #3
 80098e4:	701a      	strb	r2, [r3, #0]
		break;
 80098e6:	e0e9      	b.n	8009abc <Status_Led+0x23c>

		break;
	}
	case LEARNLED:
	{
		led2_status = IDLESTAT;
 80098e8:	4b7c      	ldr	r3, [pc, #496]	; (8009adc <Status_Led+0x25c>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
		timestamp_status_led = HAL_GetTick();
 80098ee:	f005 fd51 	bl	800f394 <HAL_GetTick>
 80098f2:	0002      	movs	r2, r0
 80098f4:	4b7a      	ldr	r3, [pc, #488]	; (8009ae0 <Status_Led+0x260>)
 80098f6:	601a      	str	r2, [r3, #0]
		status_led_state = LEARNLED2;
 80098f8:	4b76      	ldr	r3, [pc, #472]	; (8009ad4 <Status_Led+0x254>)
 80098fa:	2208      	movs	r2, #8
 80098fc:	701a      	strb	r2, [r3, #0]
		break;
 80098fe:	e0e6      	b.n	8009ace <Status_Led+0x24e>
	}
	case LEARNLED2:
	{
		if ((HAL_GetTick() - timestamp_status_led) >= 100)
 8009900:	f005 fd48 	bl	800f394 <HAL_GetTick>
 8009904:	0002      	movs	r2, r0
 8009906:	4b76      	ldr	r3, [pc, #472]	; (8009ae0 <Status_Led+0x260>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b63      	cmp	r3, #99	; 0x63
 800990e:	d911      	bls.n	8009934 <Status_Led+0xb4>
		{
			count_led_status++;
 8009910:	4b74      	ldr	r3, [pc, #464]	; (8009ae4 <Status_Led+0x264>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	4b73      	ldr	r3, [pc, #460]	; (8009ae4 <Status_Led+0x264>)
 8009918:	601a      	str	r2, [r3, #0]
			timestamp_status_led = HAL_GetTick();
 800991a:	f005 fd3b 	bl	800f394 <HAL_GetTick>
 800991e:	0002      	movs	r2, r0
 8009920:	4b6f      	ldr	r3, [pc, #444]	; (8009ae0 <Status_Led+0x260>)
 8009922:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8009924:	2380      	movs	r3, #128	; 0x80
 8009926:	011a      	lsls	r2, r3, #4
 8009928:	23a0      	movs	r3, #160	; 0xa0
 800992a:	05db      	lsls	r3, r3, #23
 800992c:	0011      	movs	r1, r2
 800992e:	0018      	movs	r0, r3
 8009930:	f007 fc34 	bl	801119c <HAL_GPIO_TogglePin>
		}
		if (count_led_status == 300)
 8009934:	4b6b      	ldr	r3, [pc, #428]	; (8009ae4 <Status_Led+0x264>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	2396      	movs	r3, #150	; 0x96
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	429a      	cmp	r2, r3
 800993e:	d000      	beq.n	8009942 <Status_Led+0xc2>
 8009940:	e0be      	b.n	8009ac0 <Status_Led+0x240>
		{
			status_led_state = IDLE_STATUS_LED;
 8009942:	4b64      	ldr	r3, [pc, #400]	; (8009ad4 <Status_Led+0x254>)
 8009944:	2201      	movs	r2, #1
 8009946:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8009948:	2380      	movs	r3, #128	; 0x80
 800994a:	0119      	lsls	r1, r3, #4
 800994c:	23a0      	movs	r3, #160	; 0xa0
 800994e:	05db      	lsls	r3, r3, #23
 8009950:	2201      	movs	r2, #1
 8009952:	0018      	movs	r0, r3
 8009954:	f007 fc05 	bl	8011162 <HAL_GPIO_WritePin>
			count_led_status = 0;
 8009958:	4b62      	ldr	r3, [pc, #392]	; (8009ae4 <Status_Led+0x264>)
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]
		}
		break;
 800995e:	e0af      	b.n	8009ac0 <Status_Led+0x240>
		break;
	}
	case LEARNLED3:
	{
		led2_status = IDLESTAT;
 8009960:	4b5e      	ldr	r3, [pc, #376]	; (8009adc <Status_Led+0x25c>)
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
		timestamp_status_led = HAL_GetTick();
 8009966:	f005 fd15 	bl	800f394 <HAL_GetTick>
 800996a:	0002      	movs	r2, r0
 800996c:	4b5c      	ldr	r3, [pc, #368]	; (8009ae0 <Status_Led+0x260>)
 800996e:	601a      	str	r2, [r3, #0]
		status_led_state = LEARNLED4;
 8009970:	4b58      	ldr	r3, [pc, #352]	; (8009ad4 <Status_Led+0x254>)
 8009972:	220a      	movs	r2, #10
 8009974:	701a      	strb	r2, [r3, #0]
		break;
 8009976:	e0aa      	b.n	8009ace <Status_Led+0x24e>
	}
	case LEARNLED4:
	{
		if ((HAL_GetTick() - timestamp_status_led) >= 100)
 8009978:	f005 fd0c 	bl	800f394 <HAL_GetTick>
 800997c:	0002      	movs	r2, r0
 800997e:	4b58      	ldr	r3, [pc, #352]	; (8009ae0 <Status_Led+0x260>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	2b63      	cmp	r3, #99	; 0x63
 8009986:	d90f      	bls.n	80099a8 <Status_Led+0x128>
		{
			count_led_status++;
 8009988:	4b56      	ldr	r3, [pc, #344]	; (8009ae4 <Status_Led+0x264>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	4b55      	ldr	r3, [pc, #340]	; (8009ae4 <Status_Led+0x264>)
 8009990:	601a      	str	r2, [r3, #0]
			timestamp_status_led = HAL_GetTick();
 8009992:	f005 fcff 	bl	800f394 <HAL_GetTick>
 8009996:	0002      	movs	r2, r0
 8009998:	4b51      	ldr	r3, [pc, #324]	; (8009ae0 <Status_Led+0x260>)
 800999a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800999c:	23a0      	movs	r3, #160	; 0xa0
 800999e:	05db      	lsls	r3, r3, #23
 80099a0:	2101      	movs	r1, #1
 80099a2:	0018      	movs	r0, r3
 80099a4:	f007 fbfa 	bl	801119c <HAL_GPIO_TogglePin>
		}
		if (count_led_status == 300)
 80099a8:	4b4e      	ldr	r3, [pc, #312]	; (8009ae4 <Status_Led+0x264>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	2396      	movs	r3, #150	; 0x96
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d000      	beq.n	80099b6 <Status_Led+0x136>
 80099b4:	e086      	b.n	8009ac4 <Status_Led+0x244>
		{
			status_led_state = IDLE_STATUS_LED;
 80099b6:	4b47      	ldr	r3, [pc, #284]	; (8009ad4 <Status_Led+0x254>)
 80099b8:	2201      	movs	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80099bc:	23a0      	movs	r3, #160	; 0xa0
 80099be:	05db      	lsls	r3, r3, #23
 80099c0:	2201      	movs	r2, #1
 80099c2:	2101      	movs	r1, #1
 80099c4:	0018      	movs	r0, r3
 80099c6:	f007 fbcc 	bl	8011162 <HAL_GPIO_WritePin>
			count_led_status = 0;
 80099ca:	4b46      	ldr	r3, [pc, #280]	; (8009ae4 <Status_Led+0x264>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
		}

		break;
 80099d0:	e078      	b.n	8009ac4 <Status_Led+0x244>
	}
	case BUTTON_PRESSED_LED_1:
		led2_status = IDLESTAT;
 80099d2:	4b42      	ldr	r3, [pc, #264]	; (8009adc <Status_Led+0x25c>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
		timestamp_status_led = HAL_GetTick();
 80099d8:	f005 fcdc 	bl	800f394 <HAL_GetTick>
 80099dc:	0002      	movs	r2, r0
 80099de:	4b40      	ldr	r3, [pc, #256]	; (8009ae0 <Status_Led+0x260>)
 80099e0:	601a      	str	r2, [r3, #0]
		status_led_state = BUTTON_PRESSED_LED_2;
 80099e2:	4b3c      	ldr	r3, [pc, #240]	; (8009ad4 <Status_Led+0x254>)
 80099e4:	2204      	movs	r2, #4
 80099e6:	701a      	strb	r2, [r3, #0]
		break;
 80099e8:	e071      	b.n	8009ace <Status_Led+0x24e>
	case BUTTON_PRESSED_LED_2:
	{
		if ((HAL_GetTick() - timestamp_status_led) >= 100)
 80099ea:	f005 fcd3 	bl	800f394 <HAL_GetTick>
 80099ee:	0002      	movs	r2, r0
 80099f0:	4b3b      	ldr	r3, [pc, #236]	; (8009ae0 <Status_Led+0x260>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	2b63      	cmp	r3, #99	; 0x63
 80099f8:	d911      	bls.n	8009a1e <Status_Led+0x19e>
		{
			count_led_status++;
 80099fa:	4b3a      	ldr	r3, [pc, #232]	; (8009ae4 <Status_Led+0x264>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	4b38      	ldr	r3, [pc, #224]	; (8009ae4 <Status_Led+0x264>)
 8009a02:	601a      	str	r2, [r3, #0]
			timestamp_status_led = HAL_GetTick();
 8009a04:	f005 fcc6 	bl	800f394 <HAL_GetTick>
 8009a08:	0002      	movs	r2, r0
 8009a0a:	4b35      	ldr	r3, [pc, #212]	; (8009ae0 <Status_Led+0x260>)
 8009a0c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8009a0e:	2380      	movs	r3, #128	; 0x80
 8009a10:	011a      	lsls	r2, r3, #4
 8009a12:	23a0      	movs	r3, #160	; 0xa0
 8009a14:	05db      	lsls	r3, r3, #23
 8009a16:	0011      	movs	r1, r2
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f007 fbbf 	bl	801119c <HAL_GPIO_TogglePin>
		}
		if (count_led_status == 20)
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <Status_Led+0x264>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b14      	cmp	r3, #20
 8009a24:	d150      	bne.n	8009ac8 <Status_Led+0x248>
		{
			status_led_state = IDLE_STATUS_LED;
 8009a26:	4b2b      	ldr	r3, [pc, #172]	; (8009ad4 <Status_Led+0x254>)
 8009a28:	2201      	movs	r2, #1
 8009a2a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	0119      	lsls	r1, r3, #4
 8009a30:	23a0      	movs	r3, #160	; 0xa0
 8009a32:	05db      	lsls	r3, r3, #23
 8009a34:	2201      	movs	r2, #1
 8009a36:	0018      	movs	r0, r3
 8009a38:	f007 fb93 	bl	8011162 <HAL_GPIO_WritePin>
			count_led_status = 0;
 8009a3c:	4b29      	ldr	r3, [pc, #164]	; (8009ae4 <Status_Led+0x264>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
		}
		break;
 8009a42:	e041      	b.n	8009ac8 <Status_Led+0x248>
	}
	case BUTTON_PRESSED_LED_3:
		led2_status = IDLESTAT;
 8009a44:	4b25      	ldr	r3, [pc, #148]	; (8009adc <Status_Led+0x25c>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
		timestamp_status_led = HAL_GetTick();
 8009a4a:	f005 fca3 	bl	800f394 <HAL_GetTick>
 8009a4e:	0002      	movs	r2, r0
 8009a50:	4b23      	ldr	r3, [pc, #140]	; (8009ae0 <Status_Led+0x260>)
 8009a52:	601a      	str	r2, [r3, #0]
		status_led_state = BUTTON_PRESSED_LED_4;
 8009a54:	4b1f      	ldr	r3, [pc, #124]	; (8009ad4 <Status_Led+0x254>)
 8009a56:	2206      	movs	r2, #6
 8009a58:	701a      	strb	r2, [r3, #0]
		break;
 8009a5a:	e038      	b.n	8009ace <Status_Led+0x24e>
	case BUTTON_PRESSED_LED_4:
	{
		if ((HAL_GetTick() - timestamp_status_led) >= 100)
 8009a5c:	f005 fc9a 	bl	800f394 <HAL_GetTick>
 8009a60:	0002      	movs	r2, r0
 8009a62:	4b1f      	ldr	r3, [pc, #124]	; (8009ae0 <Status_Led+0x260>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	2b63      	cmp	r3, #99	; 0x63
 8009a6a:	d90f      	bls.n	8009a8c <Status_Led+0x20c>
		{
			count_led_status++;
 8009a6c:	4b1d      	ldr	r3, [pc, #116]	; (8009ae4 <Status_Led+0x264>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <Status_Led+0x264>)
 8009a74:	601a      	str	r2, [r3, #0]
			timestamp_status_led = HAL_GetTick();
 8009a76:	f005 fc8d 	bl	800f394 <HAL_GetTick>
 8009a7a:	0002      	movs	r2, r0
 8009a7c:	4b18      	ldr	r3, [pc, #96]	; (8009ae0 <Status_Led+0x260>)
 8009a7e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8009a80:	23a0      	movs	r3, #160	; 0xa0
 8009a82:	05db      	lsls	r3, r3, #23
 8009a84:	2101      	movs	r1, #1
 8009a86:	0018      	movs	r0, r3
 8009a88:	f007 fb88 	bl	801119c <HAL_GPIO_TogglePin>
		}
		if (count_led_status == 20)
 8009a8c:	4b15      	ldr	r3, [pc, #84]	; (8009ae4 <Status_Led+0x264>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b14      	cmp	r3, #20
 8009a92:	d11b      	bne.n	8009acc <Status_Led+0x24c>
		{
			status_led_state = IDLE_STATUS_LED;
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <Status_Led+0x254>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009a9a:	23a0      	movs	r3, #160	; 0xa0
 8009a9c:	05db      	lsls	r3, r3, #23
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f007 fb5d 	bl	8011162 <HAL_GPIO_WritePin>
			count_led_status = 0;
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <Status_Led+0x264>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	601a      	str	r2, [r3, #0]
		}
		break;
 8009aae:	e00d      	b.n	8009acc <Status_Led+0x24c>
	}
	default:
		status_led_state = INIT_STATUS_LED;
 8009ab0:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <Status_Led+0x254>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
	}
}
 8009ab6:	e00a      	b.n	8009ace <Status_Led+0x24e>
		break;
 8009ab8:	46c0      	nop			; (mov r8, r8)
 8009aba:	e008      	b.n	8009ace <Status_Led+0x24e>
		break;
 8009abc:	46c0      	nop			; (mov r8, r8)
 8009abe:	e006      	b.n	8009ace <Status_Led+0x24e>
		break;
 8009ac0:	46c0      	nop			; (mov r8, r8)
 8009ac2:	e004      	b.n	8009ace <Status_Led+0x24e>
		break;
 8009ac4:	46c0      	nop			; (mov r8, r8)
 8009ac6:	e002      	b.n	8009ace <Status_Led+0x24e>
		break;
 8009ac8:	46c0      	nop			; (mov r8, r8)
 8009aca:	e000      	b.n	8009ace <Status_Led+0x24e>
		break;
 8009acc:	46c0      	nop			; (mov r8, r8)
}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20006d90 	.word	0x20006d90
 8009ad8:	08031b58 	.word	0x08031b58
 8009adc:	20006d91 	.word	0x20006d91
 8009ae0:	20006d98 	.word	0x20006d98
 8009ae4:	20006d94 	.word	0x20006d94

08009ae8 <Calculate_Temperatures_Offsets>:

void Calculate_Temperatures_Offsets()
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0

	dechundred = (pcb_config.sSetTempTreshMax[0] - '0') * 100;
 8009aec:	4b39      	ldr	r3, [pc, #228]	; (8009bd4 <Calculate_Temperatures_Offsets+0xec>)
 8009aee:	22ac      	movs	r2, #172	; 0xac
 8009af0:	5c9b      	ldrb	r3, [r3, r2]
 8009af2:	3b30      	subs	r3, #48	; 0x30
 8009af4:	2264      	movs	r2, #100	; 0x64
 8009af6:	435a      	muls	r2, r3
 8009af8:	4b37      	ldr	r3, [pc, #220]	; (8009bd8 <Calculate_Temperatures_Offsets+0xf0>)
 8009afa:	601a      	str	r2, [r3, #0]
	decten = (pcb_config.sSetTempTreshMax[1] - '0') * 10;
 8009afc:	4b35      	ldr	r3, [pc, #212]	; (8009bd4 <Calculate_Temperatures_Offsets+0xec>)
 8009afe:	22ad      	movs	r2, #173	; 0xad
 8009b00:	5c9b      	ldrb	r3, [r3, r2]
 8009b02:	3b30      	subs	r3, #48	; 0x30
 8009b04:	001a      	movs	r2, r3
 8009b06:	0013      	movs	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	189b      	adds	r3, r3, r2
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	001a      	movs	r2, r3
 8009b10:	4b32      	ldr	r3, [pc, #200]	; (8009bdc <Calculate_Temperatures_Offsets+0xf4>)
 8009b12:	601a      	str	r2, [r3, #0]
	dec = (pcb_config.sSetTempTreshMax[2] - '0');
 8009b14:	4b2f      	ldr	r3, [pc, #188]	; (8009bd4 <Calculate_Temperatures_Offsets+0xec>)
 8009b16:	22ae      	movs	r2, #174	; 0xae
 8009b18:	5c9b      	ldrb	r3, [r3, r2]
 8009b1a:	3b30      	subs	r3, #48	; 0x30
 8009b1c:	001a      	movs	r2, r3
 8009b1e:	4b30      	ldr	r3, [pc, #192]	; (8009be0 <Calculate_Temperatures_Offsets+0xf8>)
 8009b20:	601a      	str	r2, [r3, #0]

	temp_max = dechundred + decten + dec;
 8009b22:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <Calculate_Temperatures_Offsets+0xf0>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	4b2c      	ldr	r3, [pc, #176]	; (8009bdc <Calculate_Temperatures_Offsets+0xf4>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	18d3      	adds	r3, r2, r3
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	4b2b      	ldr	r3, [pc, #172]	; (8009be0 <Calculate_Temperatures_Offsets+0xf8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	18d3      	adds	r3, r2, r3
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <Calculate_Temperatures_Offsets+0xfc>)
 8009b3e:	801a      	strh	r2, [r3, #0]

	dechundred_min = (pcb_config.sSetTempTreshMin[0] - '0') * 100;
 8009b40:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <Calculate_Temperatures_Offsets+0xec>)
 8009b42:	22a2      	movs	r2, #162	; 0xa2
 8009b44:	5c9b      	ldrb	r3, [r3, r2]
 8009b46:	3b30      	subs	r3, #48	; 0x30
 8009b48:	2264      	movs	r2, #100	; 0x64
 8009b4a:	435a      	muls	r2, r3
 8009b4c:	4b26      	ldr	r3, [pc, #152]	; (8009be8 <Calculate_Temperatures_Offsets+0x100>)
 8009b4e:	601a      	str	r2, [r3, #0]
	decten_min = (pcb_config.sSetTempTreshMin[1] - '0') * 10;
 8009b50:	4b20      	ldr	r3, [pc, #128]	; (8009bd4 <Calculate_Temperatures_Offsets+0xec>)
 8009b52:	22a3      	movs	r2, #163	; 0xa3
 8009b54:	5c9b      	ldrb	r3, [r3, r2]
 8009b56:	3b30      	subs	r3, #48	; 0x30
 8009b58:	001a      	movs	r2, r3
 8009b5a:	0013      	movs	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	001a      	movs	r2, r3
 8009b64:	4b21      	ldr	r3, [pc, #132]	; (8009bec <Calculate_Temperatures_Offsets+0x104>)
 8009b66:	601a      	str	r2, [r3, #0]
	dec_min = (pcb_config.sSetTempTreshMin[2] - '0');
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <Calculate_Temperatures_Offsets+0xec>)
 8009b6a:	22a4      	movs	r2, #164	; 0xa4
 8009b6c:	5c9b      	ldrb	r3, [r3, r2]
 8009b6e:	3b30      	subs	r3, #48	; 0x30
 8009b70:	001a      	movs	r2, r3
 8009b72:	4b1f      	ldr	r3, [pc, #124]	; (8009bf0 <Calculate_Temperatures_Offsets+0x108>)
 8009b74:	601a      	str	r2, [r3, #0]

	temp_min = dechundred_min + decten_min + dec_min;
 8009b76:	4b1c      	ldr	r3, [pc, #112]	; (8009be8 <Calculate_Temperatures_Offsets+0x100>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <Calculate_Temperatures_Offsets+0x104>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	18d3      	adds	r3, r2, r3
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <Calculate_Temperatures_Offsets+0x108>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	18d3      	adds	r3, r2, r3
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	4b18      	ldr	r3, [pc, #96]	; (8009bf4 <Calculate_Temperatures_Offsets+0x10c>)
 8009b92:	801a      	strh	r2, [r3, #0]

	temperature_max_treshold = (float)(temp_max) / 10;
 8009b94:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <Calculate_Temperatures_Offsets+0xfc>)
 8009b96:	881b      	ldrh	r3, [r3, #0]
 8009b98:	0018      	movs	r0, r3
 8009b9a:	f7f9 fab1 	bl	8003100 <__aeabi_ui2f>
 8009b9e:	1c03      	adds	r3, r0, #0
 8009ba0:	4915      	ldr	r1, [pc, #84]	; (8009bf8 <Calculate_Temperatures_Offsets+0x110>)
 8009ba2:	1c18      	adds	r0, r3, #0
 8009ba4:	f7f8 ff74 	bl	8002a90 <__aeabi_fdiv>
 8009ba8:	1c03      	adds	r3, r0, #0
 8009baa:	1c1a      	adds	r2, r3, #0
 8009bac:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <Calculate_Temperatures_Offsets+0x114>)
 8009bae:	601a      	str	r2, [r3, #0]
	temperature_min_treshold = (float)(temp_min) / 10;
 8009bb0:	4b10      	ldr	r3, [pc, #64]	; (8009bf4 <Calculate_Temperatures_Offsets+0x10c>)
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	f7f9 faa3 	bl	8003100 <__aeabi_ui2f>
 8009bba:	1c03      	adds	r3, r0, #0
 8009bbc:	490e      	ldr	r1, [pc, #56]	; (8009bf8 <Calculate_Temperatures_Offsets+0x110>)
 8009bbe:	1c18      	adds	r0, r3, #0
 8009bc0:	f7f8 ff66 	bl	8002a90 <__aeabi_fdiv>
 8009bc4:	1c03      	adds	r3, r0, #0
 8009bc6:	1c1a      	adds	r2, r3, #0
 8009bc8:	4b0d      	ldr	r3, [pc, #52]	; (8009c00 <Calculate_Temperatures_Offsets+0x118>)
 8009bca:	601a      	str	r2, [r3, #0]

	// Send_Temperature_Data(temperature_max_treshold);
}
 8009bcc:	46c0      	nop			; (mov r8, r8)
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	20006db4 	.word	0x20006db4
 8009bd8:	20006d60 	.word	0x20006d60
 8009bdc:	20006d64 	.word	0x20006d64
 8009be0:	20006d68 	.word	0x20006d68
 8009be4:	20006d6c 	.word	0x20006d6c
 8009be8:	20006d70 	.word	0x20006d70
 8009bec:	20006d74 	.word	0x20006d74
 8009bf0:	20006d78 	.word	0x20006d78
 8009bf4:	20006d7c 	.word	0x20006d7c
 8009bf8:	41200000 	.word	0x41200000
 8009bfc:	20006d80 	.word	0x20006d80
 8009c00:	20006d84 	.word	0x20006d84

08009c04 <WriteToEeprom>:

void WriteToEeprom()
{
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	46d6      	mov	lr, sl
 8009c08:	464f      	mov	r7, r9
 8009c0a:	4646      	mov	r6, r8
 8009c0c:	b5c0      	push	{r6, r7, lr}
 8009c0e:	4cf2      	ldr	r4, [pc, #968]	; (8009fd8 <WriteToEeprom+0x3d4>)
 8009c10:	44a5      	add	sp, r4
 8009c12:	af04      	add	r7, sp, #16
	uint8_t buffercopy[sizeof(pcb_config)];

	// Write the default config into the eeprom
	memcpy(buffercopy, &pcb_config, sizeof(pcb_config));
 8009c14:	4bf1      	ldr	r3, [pc, #964]	; (8009fdc <WriteToEeprom+0x3d8>)
 8009c16:	22be      	movs	r2, #190	; 0xbe
 8009c18:	0092      	lsls	r2, r2, #2
 8009c1a:	189b      	adds	r3, r3, r2
 8009c1c:	2694      	movs	r6, #148	; 0x94
 8009c1e:	0076      	lsls	r6, r6, #1
 8009c20:	2208      	movs	r2, #8
 8009c22:	18b2      	adds	r2, r6, r2
 8009c24:	2108      	movs	r1, #8
 8009c26:	468c      	mov	ip, r1
 8009c28:	2108      	movs	r1, #8
 8009c2a:	4688      	mov	r8, r1
 8009c2c:	44b8      	add	r8, r7
 8009c2e:	44c4      	add	ip, r8
 8009c30:	4462      	add	r2, ip
 8009c32:	189a      	adds	r2, r3, r2
 8009c34:	4bea      	ldr	r3, [pc, #936]	; (8009fe0 <WriteToEeprom+0x3dc>)
 8009c36:	0010      	movs	r0, r2
 8009c38:	0019      	movs	r1, r3
 8009c3a:	23b6      	movs	r3, #182	; 0xb6
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	001a      	movs	r2, r3
 8009c40:	f019 fe92 	bl	8023968 <memcpy>
	for (unsigned int i = 0; i < 255; i++)
 8009c44:	2300      	movs	r3, #0
 8009c46:	22bd      	movs	r2, #189	; 0xbd
 8009c48:	0092      	lsls	r2, r2, #2
 8009c4a:	1992      	adds	r2, r2, r6
 8009c4c:	2108      	movs	r1, #8
 8009c4e:	468c      	mov	ip, r1
 8009c50:	2108      	movs	r1, #8
 8009c52:	4688      	mov	r8, r1
 8009c54:	2108      	movs	r1, #8
 8009c56:	4689      	mov	r9, r1
 8009c58:	44b9      	add	r9, r7
 8009c5a:	44c8      	add	r8, r9
 8009c5c:	44c4      	add	ip, r8
 8009c5e:	4462      	add	r2, ip
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	e053      	b.n	8009d0c <WriteToEeprom+0x108>
	{
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_C24_ADDR_WRITE, i, 1, &buffercopy[i], 1, 1000);
 8009c64:	26bd      	movs	r6, #189	; 0xbd
 8009c66:	00b6      	lsls	r6, r6, #2
 8009c68:	2294      	movs	r2, #148	; 0x94
 8009c6a:	0052      	lsls	r2, r2, #1
 8009c6c:	18b3      	adds	r3, r6, r2
 8009c6e:	2108      	movs	r1, #8
 8009c70:	468c      	mov	ip, r1
 8009c72:	2108      	movs	r1, #8
 8009c74:	4688      	mov	r8, r1
 8009c76:	2108      	movs	r1, #8
 8009c78:	4689      	mov	r9, r1
 8009c7a:	44b9      	add	r9, r7
 8009c7c:	44c8      	add	r8, r9
 8009c7e:	44c4      	add	ip, r8
 8009c80:	4463      	add	r3, ip
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	b299      	uxth	r1, r3
 8009c86:	23b6      	movs	r3, #182	; 0xb6
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	0010      	movs	r0, r2
 8009c8c:	189b      	adds	r3, r3, r2
 8009c8e:	2208      	movs	r2, #8
 8009c90:	2408      	movs	r4, #8
 8009c92:	1912      	adds	r2, r2, r4
 8009c94:	2408      	movs	r4, #8
 8009c96:	46a4      	mov	ip, r4
 8009c98:	44bc      	add	ip, r7
 8009c9a:	4462      	add	r2, ip
 8009c9c:	189a      	adds	r2, r3, r2
 8009c9e:	1833      	adds	r3, r6, r0
 8009ca0:	2008      	movs	r0, #8
 8009ca2:	4684      	mov	ip, r0
 8009ca4:	2008      	movs	r0, #8
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	2008      	movs	r0, #8
 8009caa:	4681      	mov	r9, r0
 8009cac:	44b9      	add	r9, r7
 8009cae:	44c8      	add	r8, r9
 8009cb0:	44c4      	add	ip, r8
 8009cb2:	4463      	add	r3, ip
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	18d2      	adds	r2, r2, r3
 8009cb8:	48ca      	ldr	r0, [pc, #808]	; (8009fe4 <WriteToEeprom+0x3e0>)
 8009cba:	23fa      	movs	r3, #250	; 0xfa
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	9302      	str	r3, [sp, #8]
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	9301      	str	r3, [sp, #4]
 8009cc4:	9200      	str	r2, [sp, #0]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	000a      	movs	r2, r1
 8009cca:	21a0      	movs	r1, #160	; 0xa0
 8009ccc:	f007 fb28 	bl	8011320 <HAL_I2C_Mem_Write>
		HAL_Delay(15);
 8009cd0:	200f      	movs	r0, #15
 8009cd2:	f005 fb69 	bl	800f3a8 <HAL_Delay>
	for (unsigned int i = 0; i < 255; i++)
 8009cd6:	2294      	movs	r2, #148	; 0x94
 8009cd8:	0052      	lsls	r2, r2, #1
 8009cda:	18b3      	adds	r3, r6, r2
 8009cdc:	2108      	movs	r1, #8
 8009cde:	468c      	mov	ip, r1
 8009ce0:	2108      	movs	r1, #8
 8009ce2:	4688      	mov	r8, r1
 8009ce4:	2108      	movs	r1, #8
 8009ce6:	4689      	mov	r9, r1
 8009ce8:	44b9      	add	r9, r7
 8009cea:	44c8      	add	r8, r9
 8009cec:	44c4      	add	ip, r8
 8009cee:	4463      	add	r3, ip
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	18b2      	adds	r2, r6, r2
 8009cf6:	2108      	movs	r1, #8
 8009cf8:	468c      	mov	ip, r1
 8009cfa:	2108      	movs	r1, #8
 8009cfc:	4688      	mov	r8, r1
 8009cfe:	2108      	movs	r1, #8
 8009d00:	4689      	mov	r9, r1
 8009d02:	44b9      	add	r9, r7
 8009d04:	44c8      	add	r8, r9
 8009d06:	44c4      	add	ip, r8
 8009d08:	4462      	add	r2, ip
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	23bd      	movs	r3, #189	; 0xbd
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	2194      	movs	r1, #148	; 0x94
 8009d12:	0049      	lsls	r1, r1, #1
 8009d14:	185b      	adds	r3, r3, r1
 8009d16:	2208      	movs	r2, #8
 8009d18:	4694      	mov	ip, r2
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	4690      	mov	r8, r2
 8009d1e:	2208      	movs	r2, #8
 8009d20:	4691      	mov	r9, r2
 8009d22:	44b9      	add	r9, r7
 8009d24:	44c8      	add	r8, r9
 8009d26:	44c4      	add	ip, r8
 8009d28:	4463      	add	r3, ip
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8009d2e:	d999      	bls.n	8009c64 <WriteToEeprom+0x60>
	}
	for (unsigned int i = 0; i < (sizeof(pcb_config) - 255); i++)
 8009d30:	2300      	movs	r3, #0
 8009d32:	22bc      	movs	r2, #188	; 0xbc
 8009d34:	0092      	lsls	r2, r2, #2
 8009d36:	1852      	adds	r2, r2, r1
 8009d38:	2108      	movs	r1, #8
 8009d3a:	468c      	mov	ip, r1
 8009d3c:	2108      	movs	r1, #8
 8009d3e:	4688      	mov	r8, r1
 8009d40:	2108      	movs	r1, #8
 8009d42:	4689      	mov	r9, r1
 8009d44:	44b9      	add	r9, r7
 8009d46:	44c8      	add	r8, r9
 8009d48:	44c4      	add	ip, r8
 8009d4a:	4462      	add	r2, ip
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	e057      	b.n	8009e00 <WriteToEeprom+0x1fc>
	{
		HAL_I2C_Mem_Write(&hi2c1, (EEPROM_C24_ADDR_WRITE + 2), i, 1, &buffercopy[i + 255], 1, 1000);
 8009d50:	26bc      	movs	r6, #188	; 0xbc
 8009d52:	00b6      	lsls	r6, r6, #2
 8009d54:	2294      	movs	r2, #148	; 0x94
 8009d56:	0052      	lsls	r2, r2, #1
 8009d58:	18b3      	adds	r3, r6, r2
 8009d5a:	2108      	movs	r1, #8
 8009d5c:	468c      	mov	ip, r1
 8009d5e:	2108      	movs	r1, #8
 8009d60:	4688      	mov	r8, r1
 8009d62:	2108      	movs	r1, #8
 8009d64:	4689      	mov	r9, r1
 8009d66:	44b9      	add	r9, r7
 8009d68:	44c8      	add	r8, r9
 8009d6a:	44c4      	add	ip, r8
 8009d6c:	4463      	add	r3, ip
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	b299      	uxth	r1, r3
 8009d72:	0010      	movs	r0, r2
 8009d74:	18b3      	adds	r3, r6, r2
 8009d76:	2208      	movs	r2, #8
 8009d78:	4694      	mov	ip, r2
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	4690      	mov	r8, r2
 8009d7e:	2208      	movs	r2, #8
 8009d80:	4691      	mov	r9, r2
 8009d82:	44b9      	add	r9, r7
 8009d84:	44c8      	add	r8, r9
 8009d86:	44c4      	add	ip, r8
 8009d88:	4463      	add	r3, ip
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	33ff      	adds	r3, #255	; 0xff
 8009d8e:	001a      	movs	r2, r3
 8009d90:	23b6      	movs	r3, #182	; 0xb6
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	181b      	adds	r3, r3, r0
 8009d96:	2008      	movs	r0, #8
 8009d98:	4684      	mov	ip, r0
 8009d9a:	2008      	movs	r0, #8
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	2008      	movs	r0, #8
 8009da0:	4681      	mov	r9, r0
 8009da2:	44b9      	add	r9, r7
 8009da4:	44c8      	add	r8, r9
 8009da6:	44c4      	add	ip, r8
 8009da8:	4463      	add	r3, ip
 8009daa:	189a      	adds	r2, r3, r2
 8009dac:	488d      	ldr	r0, [pc, #564]	; (8009fe4 <WriteToEeprom+0x3e0>)
 8009dae:	23fa      	movs	r3, #250	; 0xfa
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	9302      	str	r3, [sp, #8]
 8009db4:	2301      	movs	r3, #1
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	9200      	str	r2, [sp, #0]
 8009dba:	2301      	movs	r3, #1
 8009dbc:	000a      	movs	r2, r1
 8009dbe:	21a2      	movs	r1, #162	; 0xa2
 8009dc0:	f007 faae 	bl	8011320 <HAL_I2C_Mem_Write>
		HAL_Delay(15);
 8009dc4:	200f      	movs	r0, #15
 8009dc6:	f005 faef 	bl	800f3a8 <HAL_Delay>
	for (unsigned int i = 0; i < (sizeof(pcb_config) - 255); i++)
 8009dca:	2294      	movs	r2, #148	; 0x94
 8009dcc:	0052      	lsls	r2, r2, #1
 8009dce:	18b3      	adds	r3, r6, r2
 8009dd0:	2108      	movs	r1, #8
 8009dd2:	468c      	mov	ip, r1
 8009dd4:	2108      	movs	r1, #8
 8009dd6:	4688      	mov	r8, r1
 8009dd8:	2108      	movs	r1, #8
 8009dda:	4689      	mov	r9, r1
 8009ddc:	44b9      	add	r9, r7
 8009dde:	44c8      	add	r8, r9
 8009de0:	44c4      	add	ip, r8
 8009de2:	4463      	add	r3, ip
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3301      	adds	r3, #1
 8009de8:	18b2      	adds	r2, r6, r2
 8009dea:	2108      	movs	r1, #8
 8009dec:	468c      	mov	ip, r1
 8009dee:	2108      	movs	r1, #8
 8009df0:	4688      	mov	r8, r1
 8009df2:	2108      	movs	r1, #8
 8009df4:	4689      	mov	r9, r1
 8009df6:	44b9      	add	r9, r7
 8009df8:	44c8      	add	r8, r9
 8009dfa:	44c4      	add	ip, r8
 8009dfc:	4462      	add	r2, ip
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	23bc      	movs	r3, #188	; 0xbc
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	2694      	movs	r6, #148	; 0x94
 8009e06:	0076      	lsls	r6, r6, #1
 8009e08:	199b      	adds	r3, r3, r6
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	4694      	mov	ip, r2
 8009e0e:	2208      	movs	r2, #8
 8009e10:	4690      	mov	r8, r2
 8009e12:	2208      	movs	r2, #8
 8009e14:	4691      	mov	r9, r2
 8009e16:	44b9      	add	r9, r7
 8009e18:	44c8      	add	r8, r9
 8009e1a:	44c4      	add	ip, r8
 8009e1c:	4463      	add	r3, ip
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b6c      	cmp	r3, #108	; 0x6c
 8009e22:	d995      	bls.n	8009d50 <WriteToEeprom+0x14c>
	}
	HAL_Delay(50);
 8009e24:	2032      	movs	r0, #50	; 0x32
 8009e26:	f005 fabf 	bl	800f3a8 <HAL_Delay>

	tv_type = pcb_config.tvtype[0] - '0';
 8009e2a:	4a6d      	ldr	r2, [pc, #436]	; (8009fe0 <WriteToEeprom+0x3dc>)
 8009e2c:	23f2      	movs	r3, #242	; 0xf2
 8009e2e:	5cd3      	ldrb	r3, [r2, r3]
 8009e30:	3b30      	subs	r3, #48	; 0x30
 8009e32:	001a      	movs	r2, r3
 8009e34:	4b6c      	ldr	r3, [pc, #432]	; (8009fe8 <WriteToEeprom+0x3e4>)
 8009e36:	601a      	str	r2, [r3, #0]
	struct PCB_Config copy_config;
	memcpy(&copy_config, &pcb_config, sizeof(pcb_config));
 8009e38:	4b6c      	ldr	r3, [pc, #432]	; (8009fec <WriteToEeprom+0x3e8>)
 8009e3a:	22be      	movs	r2, #190	; 0xbe
 8009e3c:	0092      	lsls	r2, r2, #2
 8009e3e:	189b      	adds	r3, r3, r2
 8009e40:	2208      	movs	r2, #8
 8009e42:	18b2      	adds	r2, r6, r2
 8009e44:	2108      	movs	r1, #8
 8009e46:	468c      	mov	ip, r1
 8009e48:	2108      	movs	r1, #8
 8009e4a:	4688      	mov	r8, r1
 8009e4c:	44b8      	add	r8, r7
 8009e4e:	44c4      	add	ip, r8
 8009e50:	4462      	add	r2, ip
 8009e52:	189a      	adds	r2, r3, r2
 8009e54:	4b62      	ldr	r3, [pc, #392]	; (8009fe0 <WriteToEeprom+0x3dc>)
 8009e56:	0010      	movs	r0, r2
 8009e58:	0019      	movs	r1, r3
 8009e5a:	23b6      	movs	r3, #182	; 0xb6
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	001a      	movs	r2, r3
 8009e60:	f019 fd82 	bl	8023968 <memcpy>
	switch (tv_type)
 8009e64:	4b60      	ldr	r3, [pc, #384]	; (8009fe8 <WriteToEeprom+0x3e4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d101      	bne.n	8009e70 <WriteToEeprom+0x26c>
 8009e6c:	f000 fc0b 	bl	800a686 <WriteToEeprom+0xa82>
 8009e70:	d304      	bcc.n	8009e7c <WriteToEeprom+0x278>
 8009e72:	3b03      	subs	r3, #3
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d801      	bhi.n	8009e7c <WriteToEeprom+0x278>
 8009e78:	f001 f80f 	bl	800ae9a <WriteToEeprom+0x1296>

	case 0: // LG
	case 1: // Samsung

	default:
		to_hex(copy_config.sSetIR, 0);
 8009e7c:	2694      	movs	r6, #148	; 0x94
 8009e7e:	0076      	lsls	r6, r6, #1
 8009e80:	2308      	movs	r3, #8
 8009e82:	18f3      	adds	r3, r6, r3
 8009e84:	2208      	movs	r2, #8
 8009e86:	4694      	mov	ip, r2
 8009e88:	2208      	movs	r2, #8
 8009e8a:	4690      	mov	r8, r2
 8009e8c:	44b8      	add	r8, r7
 8009e8e:	44c4      	add	ip, r8
 8009e90:	4463      	add	r3, ip
 8009e92:	3304      	adds	r3, #4
 8009e94:	2100      	movs	r1, #0
 8009e96:	0018      	movs	r0, r3
 8009e98:	f00e fe86 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 4; i++)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	22bb      	movs	r2, #187	; 0xbb
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	1992      	adds	r2, r2, r6
 8009ea4:	2108      	movs	r1, #8
 8009ea6:	468c      	mov	ip, r1
 8009ea8:	2108      	movs	r1, #8
 8009eaa:	4688      	mov	r8, r1
 8009eac:	2108      	movs	r1, #8
 8009eae:	4689      	mov	r9, r1
 8009eb0:	44b9      	add	r9, r7
 8009eb2:	44c8      	add	r8, r9
 8009eb4:	44c4      	add	ip, r8
 8009eb6:	4462      	add	r2, ip
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	e05c      	b.n	8009f76 <WriteToEeprom+0x372>
			copy_config.sSetIR[i] = copy_config.sSetIR[2 * i + 1];
 8009ebc:	20bb      	movs	r0, #187	; 0xbb
 8009ebe:	0080      	lsls	r0, r0, #2
 8009ec0:	2694      	movs	r6, #148	; 0x94
 8009ec2:	0076      	lsls	r6, r6, #1
 8009ec4:	1983      	adds	r3, r0, r6
 8009ec6:	2208      	movs	r2, #8
 8009ec8:	4694      	mov	ip, r2
 8009eca:	2208      	movs	r2, #8
 8009ecc:	4690      	mov	r8, r2
 8009ece:	2208      	movs	r2, #8
 8009ed0:	4691      	mov	r9, r2
 8009ed2:	44b9      	add	r9, r7
 8009ed4:	44c8      	add	r8, r9
 8009ed6:	44c4      	add	ip, r8
 8009ed8:	4463      	add	r3, ip
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	4b42      	ldr	r3, [pc, #264]	; (8009fec <WriteToEeprom+0x3e8>)
 8009ee2:	26be      	movs	r6, #190	; 0xbe
 8009ee4:	00b6      	lsls	r6, r6, #2
 8009ee6:	199b      	adds	r3, r3, r6
 8009ee8:	2194      	movs	r1, #148	; 0x94
 8009eea:	0049      	lsls	r1, r1, #1
 8009eec:	468c      	mov	ip, r1
 8009eee:	2108      	movs	r1, #8
 8009ef0:	4688      	mov	r8, r1
 8009ef2:	2108      	movs	r1, #8
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	2108      	movs	r1, #8
 8009ef8:	468a      	mov	sl, r1
 8009efa:	44ba      	add	sl, r7
 8009efc:	44d1      	add	r9, sl
 8009efe:	44c8      	add	r8, r9
 8009f00:	44c4      	add	ip, r8
 8009f02:	4463      	add	r3, ip
 8009f04:	189b      	adds	r3, r3, r2
 8009f06:	7919      	ldrb	r1, [r3, #4]
 8009f08:	4b38      	ldr	r3, [pc, #224]	; (8009fec <WriteToEeprom+0x3e8>)
 8009f0a:	199b      	adds	r3, r3, r6
 8009f0c:	2694      	movs	r6, #148	; 0x94
 8009f0e:	0076      	lsls	r6, r6, #1
 8009f10:	2208      	movs	r2, #8
 8009f12:	18b2      	adds	r2, r6, r2
 8009f14:	2408      	movs	r4, #8
 8009f16:	46a4      	mov	ip, r4
 8009f18:	2408      	movs	r4, #8
 8009f1a:	46a0      	mov	r8, r4
 8009f1c:	44b8      	add	r8, r7
 8009f1e:	44c4      	add	ip, r8
 8009f20:	4462      	add	r2, ip
 8009f22:	189a      	adds	r2, r3, r2
 8009f24:	1983      	adds	r3, r0, r6
 8009f26:	2408      	movs	r4, #8
 8009f28:	46a4      	mov	ip, r4
 8009f2a:	2408      	movs	r4, #8
 8009f2c:	46a0      	mov	r8, r4
 8009f2e:	2408      	movs	r4, #8
 8009f30:	46a1      	mov	r9, r4
 8009f32:	44b9      	add	r9, r7
 8009f34:	44c8      	add	r8, r9
 8009f36:	44c4      	add	ip, r8
 8009f38:	4463      	add	r3, ip
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	18d3      	adds	r3, r2, r3
 8009f3e:	1d1a      	adds	r2, r3, #4
 8009f40:	1c0b      	adds	r3, r1, #0
 8009f42:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 4; i++)
 8009f44:	1983      	adds	r3, r0, r6
 8009f46:	2208      	movs	r2, #8
 8009f48:	4694      	mov	ip, r2
 8009f4a:	2208      	movs	r2, #8
 8009f4c:	4690      	mov	r8, r2
 8009f4e:	2208      	movs	r2, #8
 8009f50:	4691      	mov	r9, r2
 8009f52:	44b9      	add	r9, r7
 8009f54:	44c8      	add	r8, r9
 8009f56:	44c4      	add	ip, r8
 8009f58:	4463      	add	r3, ip
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	1982      	adds	r2, r0, r6
 8009f60:	2108      	movs	r1, #8
 8009f62:	468c      	mov	ip, r1
 8009f64:	2108      	movs	r1, #8
 8009f66:	4688      	mov	r8, r1
 8009f68:	2108      	movs	r1, #8
 8009f6a:	4689      	mov	r9, r1
 8009f6c:	44b9      	add	r9, r7
 8009f6e:	44c8      	add	r8, r9
 8009f70:	44c4      	add	ip, r8
 8009f72:	4462      	add	r2, ip
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	23bb      	movs	r3, #187	; 0xbb
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	2694      	movs	r6, #148	; 0x94
 8009f7c:	0076      	lsls	r6, r6, #1
 8009f7e:	199b      	adds	r3, r3, r6
 8009f80:	2208      	movs	r2, #8
 8009f82:	4694      	mov	ip, r2
 8009f84:	2208      	movs	r2, #8
 8009f86:	4690      	mov	r8, r2
 8009f88:	2208      	movs	r2, #8
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	44b9      	add	r9, r7
 8009f8e:	44c8      	add	r8, r9
 8009f90:	44c4      	add	ip, r8
 8009f92:	4463      	add	r3, ip
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	dd90      	ble.n	8009ebc <WriteToEeprom+0x2b8>
		to_hex(copy_config.sSetIROFF, 0);
 8009f9a:	2308      	movs	r3, #8
 8009f9c:	18f3      	adds	r3, r6, r3
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	4694      	mov	ip, r2
 8009fa2:	2208      	movs	r2, #8
 8009fa4:	4690      	mov	r8, r2
 8009fa6:	44b8      	add	r8, r7
 8009fa8:	44c4      	add	ip, r8
 8009faa:	4463      	add	r3, ip
 8009fac:	3313      	adds	r3, #19
 8009fae:	2100      	movs	r1, #0
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f00e fdf9 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 4; i++)
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	22ba      	movs	r2, #186	; 0xba
 8009fba:	0092      	lsls	r2, r2, #2
 8009fbc:	1992      	adds	r2, r2, r6
 8009fbe:	2108      	movs	r1, #8
 8009fc0:	468c      	mov	ip, r1
 8009fc2:	2108      	movs	r1, #8
 8009fc4:	4688      	mov	r8, r1
 8009fc6:	2108      	movs	r1, #8
 8009fc8:	4689      	mov	r9, r1
 8009fca:	44b9      	add	r9, r7
 8009fcc:	44c8      	add	r8, r9
 8009fce:	44c4      	add	ip, r8
 8009fd0:	4462      	add	r2, ip
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	e06a      	b.n	800a0ac <WriteToEeprom+0x4a8>
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	fffffbb8 	.word	0xfffffbb8
 8009fdc:	fffffe74 	.word	0xfffffe74
 8009fe0:	20006db4 	.word	0x20006db4
 8009fe4:	20006914 	.word	0x20006914
 8009fe8:	20005018 	.word	0x20005018
 8009fec:	fffffd08 	.word	0xfffffd08
			copy_config.sSetIROFF[i] = copy_config.sSetIROFF[2 * i + 1];
 8009ff0:	20ba      	movs	r0, #186	; 0xba
 8009ff2:	0080      	lsls	r0, r0, #2
 8009ff4:	2694      	movs	r6, #148	; 0x94
 8009ff6:	0076      	lsls	r6, r6, #1
 8009ff8:	1983      	adds	r3, r0, r6
 8009ffa:	2208      	movs	r2, #8
 8009ffc:	4694      	mov	ip, r2
 8009ffe:	2208      	movs	r2, #8
 800a000:	4690      	mov	r8, r2
 800a002:	2208      	movs	r2, #8
 800a004:	4691      	mov	r9, r2
 800a006:	44b9      	add	r9, r7
 800a008:	44c8      	add	r8, r9
 800a00a:	44c4      	add	ip, r8
 800a00c:	4463      	add	r3, ip
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	4bf8      	ldr	r3, [pc, #992]	; (800a3f8 <WriteToEeprom+0x7f4>)
 800a016:	26be      	movs	r6, #190	; 0xbe
 800a018:	00b6      	lsls	r6, r6, #2
 800a01a:	199b      	adds	r3, r3, r6
 800a01c:	2194      	movs	r1, #148	; 0x94
 800a01e:	0049      	lsls	r1, r1, #1
 800a020:	468c      	mov	ip, r1
 800a022:	2108      	movs	r1, #8
 800a024:	4688      	mov	r8, r1
 800a026:	2108      	movs	r1, #8
 800a028:	4689      	mov	r9, r1
 800a02a:	2108      	movs	r1, #8
 800a02c:	468a      	mov	sl, r1
 800a02e:	44ba      	add	sl, r7
 800a030:	44d1      	add	r9, sl
 800a032:	44c8      	add	r8, r9
 800a034:	44c4      	add	ip, r8
 800a036:	4463      	add	r3, ip
 800a038:	189b      	adds	r3, r3, r2
 800a03a:	7cd9      	ldrb	r1, [r3, #19]
 800a03c:	4bee      	ldr	r3, [pc, #952]	; (800a3f8 <WriteToEeprom+0x7f4>)
 800a03e:	199b      	adds	r3, r3, r6
 800a040:	2694      	movs	r6, #148	; 0x94
 800a042:	0076      	lsls	r6, r6, #1
 800a044:	2208      	movs	r2, #8
 800a046:	18b2      	adds	r2, r6, r2
 800a048:	2408      	movs	r4, #8
 800a04a:	46a4      	mov	ip, r4
 800a04c:	2408      	movs	r4, #8
 800a04e:	46a0      	mov	r8, r4
 800a050:	44b8      	add	r8, r7
 800a052:	44c4      	add	ip, r8
 800a054:	4462      	add	r2, ip
 800a056:	189a      	adds	r2, r3, r2
 800a058:	1983      	adds	r3, r0, r6
 800a05a:	2408      	movs	r4, #8
 800a05c:	46a4      	mov	ip, r4
 800a05e:	2408      	movs	r4, #8
 800a060:	46a0      	mov	r8, r4
 800a062:	2408      	movs	r4, #8
 800a064:	46a1      	mov	r9, r4
 800a066:	44b9      	add	r9, r7
 800a068:	44c8      	add	r8, r9
 800a06a:	44c4      	add	ip, r8
 800a06c:	4463      	add	r3, ip
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	18d3      	adds	r3, r2, r3
 800a072:	3313      	adds	r3, #19
 800a074:	001a      	movs	r2, r3
 800a076:	1c0b      	adds	r3, r1, #0
 800a078:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 4; i++)
 800a07a:	1983      	adds	r3, r0, r6
 800a07c:	2208      	movs	r2, #8
 800a07e:	4694      	mov	ip, r2
 800a080:	2208      	movs	r2, #8
 800a082:	4690      	mov	r8, r2
 800a084:	2208      	movs	r2, #8
 800a086:	4691      	mov	r9, r2
 800a088:	44b9      	add	r9, r7
 800a08a:	44c8      	add	r8, r9
 800a08c:	44c4      	add	ip, r8
 800a08e:	4463      	add	r3, ip
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	1982      	adds	r2, r0, r6
 800a096:	2108      	movs	r1, #8
 800a098:	468c      	mov	ip, r1
 800a09a:	2108      	movs	r1, #8
 800a09c:	4688      	mov	r8, r1
 800a09e:	2108      	movs	r1, #8
 800a0a0:	4689      	mov	r9, r1
 800a0a2:	44b9      	add	r9, r7
 800a0a4:	44c8      	add	r8, r9
 800a0a6:	44c4      	add	ip, r8
 800a0a8:	4462      	add	r2, ip
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	23ba      	movs	r3, #186	; 0xba
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	2294      	movs	r2, #148	; 0x94
 800a0b2:	0052      	lsls	r2, r2, #1
 800a0b4:	189b      	adds	r3, r3, r2
 800a0b6:	2208      	movs	r2, #8
 800a0b8:	4694      	mov	ip, r2
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	4690      	mov	r8, r2
 800a0be:	2208      	movs	r2, #8
 800a0c0:	4691      	mov	r9, r2
 800a0c2:	44b9      	add	r9, r7
 800a0c4:	44c8      	add	r8, r9
 800a0c6:	44c4      	add	ip, r8
 800a0c8:	4463      	add	r3, ip
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	dd8f      	ble.n	8009ff0 <WriteToEeprom+0x3ec>

		code_ON[0] = ((uint64_t)(copy_config.sSetIR[0]) << 24) + ((uint64_t)(copy_config.sSetIR[1]) << 16) + ((uint64_t)(copy_config.sSetIR[2]) << 8) + (uint64_t)(copy_config.sSetIR[3]); // full_ir_code_from_db;//
 800a0d0:	4bc9      	ldr	r3, [pc, #804]	; (800a3f8 <WriteToEeprom+0x7f4>)
 800a0d2:	26be      	movs	r6, #190	; 0xbe
 800a0d4:	00b6      	lsls	r6, r6, #2
 800a0d6:	199b      	adds	r3, r3, r6
 800a0d8:	2294      	movs	r2, #148	; 0x94
 800a0da:	0052      	lsls	r2, r2, #1
 800a0dc:	4694      	mov	ip, r2
 800a0de:	2208      	movs	r2, #8
 800a0e0:	4690      	mov	r8, r2
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	4691      	mov	r9, r2
 800a0e6:	2208      	movs	r2, #8
 800a0e8:	4692      	mov	sl, r2
 800a0ea:	44ba      	add	sl, r7
 800a0ec:	44d1      	add	r9, sl
 800a0ee:	44c8      	add	r8, r9
 800a0f0:	44c4      	add	ip, r8
 800a0f2:	4463      	add	r3, ip
 800a0f4:	791b      	ldrb	r3, [r3, #4]
 800a0f6:	22e8      	movs	r2, #232	; 0xe8
 800a0f8:	2108      	movs	r1, #8
 800a0fa:	1851      	adds	r1, r2, r1
 800a0fc:	2008      	movs	r0, #8
 800a0fe:	4684      	mov	ip, r0
 800a100:	2008      	movs	r0, #8
 800a102:	4680      	mov	r8, r0
 800a104:	44b8      	add	r8, r7
 800a106:	44c4      	add	ip, r8
 800a108:	4461      	add	r1, ip
 800a10a:	600b      	str	r3, [r1, #0]
 800a10c:	2300      	movs	r3, #0
 800a10e:	21ec      	movs	r1, #236	; 0xec
 800a110:	2008      	movs	r0, #8
 800a112:	1809      	adds	r1, r1, r0
 800a114:	2008      	movs	r0, #8
 800a116:	4684      	mov	ip, r0
 800a118:	2008      	movs	r0, #8
 800a11a:	4680      	mov	r8, r0
 800a11c:	44b8      	add	r8, r7
 800a11e:	44c4      	add	ip, r8
 800a120:	4461      	add	r1, ip
 800a122:	600b      	str	r3, [r1, #0]
 800a124:	2308      	movs	r3, #8
 800a126:	18d3      	adds	r3, r2, r3
 800a128:	2208      	movs	r2, #8
 800a12a:	4694      	mov	ip, r2
 800a12c:	2208      	movs	r2, #8
 800a12e:	4690      	mov	r8, r2
 800a130:	44b8      	add	r8, r7
 800a132:	44c4      	add	ip, r8
 800a134:	4463      	add	r3, ip
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	0011      	movs	r1, r2
 800a13c:	0a09      	lsrs	r1, r1, #8
 800a13e:	20e4      	movs	r0, #228	; 0xe4
 800a140:	2408      	movs	r4, #8
 800a142:	1900      	adds	r0, r0, r4
 800a144:	2408      	movs	r4, #8
 800a146:	46a4      	mov	ip, r4
 800a148:	2408      	movs	r4, #8
 800a14a:	46a0      	mov	r8, r4
 800a14c:	44b8      	add	r8, r7
 800a14e:	44c4      	add	ip, r8
 800a150:	4460      	add	r0, ip
 800a152:	6001      	str	r1, [r0, #0]
 800a154:	0013      	movs	r3, r2
 800a156:	061b      	lsls	r3, r3, #24
 800a158:	22e0      	movs	r2, #224	; 0xe0
 800a15a:	2108      	movs	r1, #8
 800a15c:	1852      	adds	r2, r2, r1
 800a15e:	2108      	movs	r1, #8
 800a160:	2008      	movs	r0, #8
 800a162:	1809      	adds	r1, r1, r0
 800a164:	19c9      	adds	r1, r1, r7
 800a166:	1851      	adds	r1, r2, r1
 800a168:	600b      	str	r3, [r1, #0]
 800a16a:	4ba3      	ldr	r3, [pc, #652]	; (800a3f8 <WriteToEeprom+0x7f4>)
 800a16c:	199b      	adds	r3, r3, r6
 800a16e:	2194      	movs	r1, #148	; 0x94
 800a170:	0049      	lsls	r1, r1, #1
 800a172:	468c      	mov	ip, r1
 800a174:	2208      	movs	r2, #8
 800a176:	4690      	mov	r8, r2
 800a178:	2208      	movs	r2, #8
 800a17a:	4691      	mov	r9, r2
 800a17c:	2208      	movs	r2, #8
 800a17e:	4692      	mov	sl, r2
 800a180:	44ba      	add	sl, r7
 800a182:	44d1      	add	r9, sl
 800a184:	44c8      	add	r8, r9
 800a186:	44c4      	add	ip, r8
 800a188:	4463      	add	r3, ip
 800a18a:	795b      	ldrb	r3, [r3, #5]
 800a18c:	22d8      	movs	r2, #216	; 0xd8
 800a18e:	2108      	movs	r1, #8
 800a190:	1851      	adds	r1, r2, r1
 800a192:	2008      	movs	r0, #8
 800a194:	4684      	mov	ip, r0
 800a196:	2008      	movs	r0, #8
 800a198:	4680      	mov	r8, r0
 800a19a:	44b8      	add	r8, r7
 800a19c:	44c4      	add	ip, r8
 800a19e:	4461      	add	r1, ip
 800a1a0:	600b      	str	r3, [r1, #0]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	21dc      	movs	r1, #220	; 0xdc
 800a1a6:	2008      	movs	r0, #8
 800a1a8:	1809      	adds	r1, r1, r0
 800a1aa:	2008      	movs	r0, #8
 800a1ac:	4684      	mov	ip, r0
 800a1ae:	2008      	movs	r0, #8
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	44b8      	add	r8, r7
 800a1b4:	44c4      	add	ip, r8
 800a1b6:	4461      	add	r1, ip
 800a1b8:	600b      	str	r3, [r1, #0]
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	18d3      	adds	r3, r2, r3
 800a1be:	2208      	movs	r2, #8
 800a1c0:	2108      	movs	r1, #8
 800a1c2:	1852      	adds	r2, r2, r1
 800a1c4:	19d2      	adds	r2, r2, r7
 800a1c6:	1899      	adds	r1, r3, r2
 800a1c8:	684a      	ldr	r2, [r1, #4]
 800a1ca:	6809      	ldr	r1, [r1, #0]
 800a1cc:	000b      	movs	r3, r1
 800a1ce:	0c1b      	lsrs	r3, r3, #16
 800a1d0:	0010      	movs	r0, r2
 800a1d2:	0400      	lsls	r0, r0, #16
 800a1d4:	60f8      	str	r0, [r7, #12]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	4318      	orrs	r0, r3
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	000b      	movs	r3, r1
 800a1de:	041b      	lsls	r3, r3, #16
 800a1e0:	60bb      	str	r3, [r7, #8]
 800a1e2:	23e0      	movs	r3, #224	; 0xe0
 800a1e4:	2208      	movs	r2, #8
 800a1e6:	189b      	adds	r3, r3, r2
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	4694      	mov	ip, r2
 800a1ec:	2208      	movs	r2, #8
 800a1ee:	4690      	mov	r8, r2
 800a1f0:	44b8      	add	r8, r7
 800a1f2:	44c4      	add	ip, r8
 800a1f4:	4463      	add	r3, ip
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	6859      	ldr	r1, [r3, #4]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	68fc      	ldr	r4, [r7, #12]
 800a1fe:	18c0      	adds	r0, r0, r3
 800a200:	4161      	adcs	r1, r4
 800a202:	6138      	str	r0, [r7, #16]
 800a204:	6179      	str	r1, [r7, #20]
 800a206:	4b7c      	ldr	r3, [pc, #496]	; (800a3f8 <WriteToEeprom+0x7f4>)
 800a208:	0032      	movs	r2, r6
 800a20a:	189b      	adds	r3, r3, r2
 800a20c:	2194      	movs	r1, #148	; 0x94
 800a20e:	0049      	lsls	r1, r1, #1
 800a210:	468c      	mov	ip, r1
 800a212:	2108      	movs	r1, #8
 800a214:	4688      	mov	r8, r1
 800a216:	2108      	movs	r1, #8
 800a218:	4689      	mov	r9, r1
 800a21a:	2108      	movs	r1, #8
 800a21c:	468a      	mov	sl, r1
 800a21e:	44ba      	add	sl, r7
 800a220:	44d1      	add	r9, sl
 800a222:	44c8      	add	r8, r9
 800a224:	44c4      	add	ip, r8
 800a226:	4463      	add	r3, ip
 800a228:	799b      	ldrb	r3, [r3, #6]
 800a22a:	21d0      	movs	r1, #208	; 0xd0
 800a22c:	2008      	movs	r0, #8
 800a22e:	1808      	adds	r0, r1, r0
 800a230:	2408      	movs	r4, #8
 800a232:	46a4      	mov	ip, r4
 800a234:	2408      	movs	r4, #8
 800a236:	46a0      	mov	r8, r4
 800a238:	44b8      	add	r8, r7
 800a23a:	44c4      	add	ip, r8
 800a23c:	4460      	add	r0, ip
 800a23e:	6003      	str	r3, [r0, #0]
 800a240:	2300      	movs	r3, #0
 800a242:	20d4      	movs	r0, #212	; 0xd4
 800a244:	2408      	movs	r4, #8
 800a246:	1900      	adds	r0, r0, r4
 800a248:	2408      	movs	r4, #8
 800a24a:	46a4      	mov	ip, r4
 800a24c:	2408      	movs	r4, #8
 800a24e:	46a0      	mov	r8, r4
 800a250:	44b8      	add	r8, r7
 800a252:	44c4      	add	ip, r8
 800a254:	4460      	add	r0, ip
 800a256:	6003      	str	r3, [r0, #0]
 800a258:	2308      	movs	r3, #8
 800a25a:	18cb      	adds	r3, r1, r3
 800a25c:	2108      	movs	r1, #8
 800a25e:	468c      	mov	ip, r1
 800a260:	2108      	movs	r1, #8
 800a262:	4688      	mov	r8, r1
 800a264:	44b8      	add	r8, r7
 800a266:	44c4      	add	ip, r8
 800a268:	4463      	add	r3, ip
 800a26a:	681c      	ldr	r4, [r3, #0]
 800a26c:	685d      	ldr	r5, [r3, #4]
 800a26e:	0023      	movs	r3, r4
 800a270:	0e1b      	lsrs	r3, r3, #24
 800a272:	4698      	mov	r8, r3
 800a274:	002e      	movs	r6, r5
 800a276:	0236      	lsls	r6, r6, #8
 800a278:	2192      	movs	r1, #146	; 0x92
 800a27a:	0049      	lsls	r1, r1, #1
 800a27c:	2008      	movs	r0, #8
 800a27e:	1808      	adds	r0, r1, r0
 800a280:	2308      	movs	r3, #8
 800a282:	469c      	mov	ip, r3
 800a284:	2308      	movs	r3, #8
 800a286:	4699      	mov	r9, r3
 800a288:	44b9      	add	r9, r7
 800a28a:	44cc      	add	ip, r9
 800a28c:	4460      	add	r0, ip
 800a28e:	6006      	str	r6, [r0, #0]
 800a290:	000e      	movs	r6, r1
 800a292:	0030      	movs	r0, r6
 800a294:	2108      	movs	r1, #8
 800a296:	1871      	adds	r1, r6, r1
 800a298:	2308      	movs	r3, #8
 800a29a:	469c      	mov	ip, r3
 800a29c:	2308      	movs	r3, #8
 800a29e:	4699      	mov	r9, r3
 800a2a0:	44b9      	add	r9, r7
 800a2a2:	44cc      	add	ip, r9
 800a2a4:	4461      	add	r1, ip
 800a2a6:	680e      	ldr	r6, [r1, #0]
 800a2a8:	4643      	mov	r3, r8
 800a2aa:	431e      	orrs	r6, r3
 800a2ac:	0003      	movs	r3, r0
 800a2ae:	2108      	movs	r1, #8
 800a2b0:	185b      	adds	r3, r3, r1
 800a2b2:	2108      	movs	r1, #8
 800a2b4:	468c      	mov	ip, r1
 800a2b6:	2108      	movs	r1, #8
 800a2b8:	4688      	mov	r8, r1
 800a2ba:	44b8      	add	r8, r7
 800a2bc:	44c4      	add	ip, r8
 800a2be:	4463      	add	r3, ip
 800a2c0:	601e      	str	r6, [r3, #0]
 800a2c2:	0023      	movs	r3, r4
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	2190      	movs	r1, #144	; 0x90
 800a2c8:	0049      	lsls	r1, r1, #1
 800a2ca:	2008      	movs	r0, #8
 800a2cc:	1808      	adds	r0, r1, r0
 800a2ce:	2408      	movs	r4, #8
 800a2d0:	46a4      	mov	ip, r4
 800a2d2:	2408      	movs	r4, #8
 800a2d4:	46a0      	mov	r8, r4
 800a2d6:	44b8      	add	r8, r7
 800a2d8:	44c4      	add	ip, r8
 800a2da:	4460      	add	r0, ip
 800a2dc:	6003      	str	r3, [r0, #0]
 800a2de:	2308      	movs	r3, #8
 800a2e0:	18cb      	adds	r3, r1, r3
 800a2e2:	2108      	movs	r1, #8
 800a2e4:	468c      	mov	ip, r1
 800a2e6:	2108      	movs	r1, #8
 800a2e8:	4688      	mov	r8, r1
 800a2ea:	44b8      	add	r8, r7
 800a2ec:	44c4      	add	ip, r8
 800a2ee:	4463      	add	r3, ip
 800a2f0:	685c      	ldr	r4, [r3, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6938      	ldr	r0, [r7, #16]
 800a2f6:	6979      	ldr	r1, [r7, #20]
 800a2f8:	18c0      	adds	r0, r0, r3
 800a2fa:	4161      	adcs	r1, r4
 800a2fc:	4b3e      	ldr	r3, [pc, #248]	; (800a3f8 <WriteToEeprom+0x7f4>)
 800a2fe:	0014      	movs	r4, r2
 800a300:	189b      	adds	r3, r3, r2
 800a302:	2294      	movs	r2, #148	; 0x94
 800a304:	0052      	lsls	r2, r2, #1
 800a306:	4694      	mov	ip, r2
 800a308:	2208      	movs	r2, #8
 800a30a:	4690      	mov	r8, r2
 800a30c:	2208      	movs	r2, #8
 800a30e:	4691      	mov	r9, r2
 800a310:	2208      	movs	r2, #8
 800a312:	4692      	mov	sl, r2
 800a314:	44ba      	add	sl, r7
 800a316:	44d1      	add	r9, sl
 800a318:	44c8      	add	r8, r9
 800a31a:	44c4      	add	ip, r8
 800a31c:	4463      	add	r3, ip
 800a31e:	79db      	ldrb	r3, [r3, #7]
 800a320:	22c8      	movs	r2, #200	; 0xc8
 800a322:	2508      	movs	r5, #8
 800a324:	1955      	adds	r5, r2, r5
 800a326:	2608      	movs	r6, #8
 800a328:	46b4      	mov	ip, r6
 800a32a:	2608      	movs	r6, #8
 800a32c:	46b0      	mov	r8, r6
 800a32e:	44b8      	add	r8, r7
 800a330:	44c4      	add	ip, r8
 800a332:	4465      	add	r5, ip
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	2300      	movs	r3, #0
 800a338:	25cc      	movs	r5, #204	; 0xcc
 800a33a:	2608      	movs	r6, #8
 800a33c:	19ad      	adds	r5, r5, r6
 800a33e:	2608      	movs	r6, #8
 800a340:	46b4      	mov	ip, r6
 800a342:	2608      	movs	r6, #8
 800a344:	46b0      	mov	r8, r6
 800a346:	44b8      	add	r8, r7
 800a348:	44c4      	add	ip, r8
 800a34a:	4465      	add	r5, ip
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	2308      	movs	r3, #8
 800a350:	18d3      	adds	r3, r2, r3
 800a352:	2208      	movs	r2, #8
 800a354:	4694      	mov	ip, r2
 800a356:	2208      	movs	r2, #8
 800a358:	4690      	mov	r8, r2
 800a35a:	44b8      	add	r8, r7
 800a35c:	44c4      	add	ip, r8
 800a35e:	4463      	add	r3, ip
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	1812      	adds	r2, r2, r0
 800a366:	414b      	adcs	r3, r1
 800a368:	4924      	ldr	r1, [pc, #144]	; (800a3fc <WriteToEeprom+0x7f8>)
 800a36a:	600a      	str	r2, [r1, #0]
 800a36c:	604b      	str	r3, [r1, #4]
		code_OFF[0] = ((uint64_t)(copy_config.sSetIROFF[0]) << 24) + ((uint64_t)(copy_config.sSetIROFF[1]) << 16) + ((uint64_t)(copy_config.sSetIROFF[2]) << 8) + (uint64_t)(copy_config.sSetIROFF[3]);
 800a36e:	4b22      	ldr	r3, [pc, #136]	; (800a3f8 <WriteToEeprom+0x7f4>)
 800a370:	0022      	movs	r2, r4
 800a372:	189b      	adds	r3, r3, r2
 800a374:	2194      	movs	r1, #148	; 0x94
 800a376:	0049      	lsls	r1, r1, #1
 800a378:	468c      	mov	ip, r1
 800a37a:	2108      	movs	r1, #8
 800a37c:	4688      	mov	r8, r1
 800a37e:	2108      	movs	r1, #8
 800a380:	4689      	mov	r9, r1
 800a382:	2108      	movs	r1, #8
 800a384:	468a      	mov	sl, r1
 800a386:	44ba      	add	sl, r7
 800a388:	44d1      	add	r9, sl
 800a38a:	44c8      	add	r8, r9
 800a38c:	44c4      	add	ip, r8
 800a38e:	4463      	add	r3, ip
 800a390:	7cdb      	ldrb	r3, [r3, #19]
 800a392:	21c0      	movs	r1, #192	; 0xc0
 800a394:	2008      	movs	r0, #8
 800a396:	1808      	adds	r0, r1, r0
 800a398:	2408      	movs	r4, #8
 800a39a:	46a4      	mov	ip, r4
 800a39c:	2408      	movs	r4, #8
 800a39e:	46a0      	mov	r8, r4
 800a3a0:	44b8      	add	r8, r7
 800a3a2:	44c4      	add	ip, r8
 800a3a4:	4460      	add	r0, ip
 800a3a6:	6003      	str	r3, [r0, #0]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	20c4      	movs	r0, #196	; 0xc4
 800a3ac:	2408      	movs	r4, #8
 800a3ae:	1900      	adds	r0, r0, r4
 800a3b0:	2408      	movs	r4, #8
 800a3b2:	46a4      	mov	ip, r4
 800a3b4:	2408      	movs	r4, #8
 800a3b6:	46a0      	mov	r8, r4
 800a3b8:	44b8      	add	r8, r7
 800a3ba:	44c4      	add	ip, r8
 800a3bc:	4460      	add	r0, ip
 800a3be:	6003      	str	r3, [r0, #0]
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	18cb      	adds	r3, r1, r3
 800a3c4:	2108      	movs	r1, #8
 800a3c6:	468c      	mov	ip, r1
 800a3c8:	2108      	movs	r1, #8
 800a3ca:	4688      	mov	r8, r1
 800a3cc:	44b8      	add	r8, r7
 800a3ce:	44c4      	add	ip, r8
 800a3d0:	4463      	add	r3, ip
 800a3d2:	685c      	ldr	r4, [r3, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	0019      	movs	r1, r3
 800a3d8:	0a09      	lsrs	r1, r1, #8
 800a3da:	20bc      	movs	r0, #188	; 0xbc
 800a3dc:	2508      	movs	r5, #8
 800a3de:	1940      	adds	r0, r0, r5
 800a3e0:	2508      	movs	r5, #8
 800a3e2:	46ac      	mov	ip, r5
 800a3e4:	2508      	movs	r5, #8
 800a3e6:	46a8      	mov	r8, r5
 800a3e8:	44b8      	add	r8, r7
 800a3ea:	44c4      	add	ip, r8
 800a3ec:	4460      	add	r0, ip
 800a3ee:	6001      	str	r1, [r0, #0]
 800a3f0:	061b      	lsls	r3, r3, #24
 800a3f2:	26b8      	movs	r6, #184	; 0xb8
 800a3f4:	2108      	movs	r1, #8
 800a3f6:	e003      	b.n	800a400 <WriteToEeprom+0x7fc>
 800a3f8:	fffffd08 	.word	0xfffffd08
 800a3fc:	20006720 	.word	0x20006720
 800a400:	1871      	adds	r1, r6, r1
 800a402:	2008      	movs	r0, #8
 800a404:	4684      	mov	ip, r0
 800a406:	2008      	movs	r0, #8
 800a408:	4680      	mov	r8, r0
 800a40a:	44b8      	add	r8, r7
 800a40c:	44c4      	add	ip, r8
 800a40e:	4461      	add	r1, ip
 800a410:	600b      	str	r3, [r1, #0]
 800a412:	4bf2      	ldr	r3, [pc, #968]	; (800a7dc <WriteToEeprom+0xbd8>)
 800a414:	0014      	movs	r4, r2
 800a416:	189b      	adds	r3, r3, r2
 800a418:	2294      	movs	r2, #148	; 0x94
 800a41a:	0052      	lsls	r2, r2, #1
 800a41c:	4694      	mov	ip, r2
 800a41e:	2208      	movs	r2, #8
 800a420:	4690      	mov	r8, r2
 800a422:	2208      	movs	r2, #8
 800a424:	4691      	mov	r9, r2
 800a426:	2208      	movs	r2, #8
 800a428:	4692      	mov	sl, r2
 800a42a:	44ba      	add	sl, r7
 800a42c:	44d1      	add	r9, sl
 800a42e:	44c8      	add	r8, r9
 800a430:	44c4      	add	ip, r8
 800a432:	4463      	add	r3, ip
 800a434:	7d1b      	ldrb	r3, [r3, #20]
 800a436:	22b0      	movs	r2, #176	; 0xb0
 800a438:	2108      	movs	r1, #8
 800a43a:	1851      	adds	r1, r2, r1
 800a43c:	2008      	movs	r0, #8
 800a43e:	4684      	mov	ip, r0
 800a440:	2008      	movs	r0, #8
 800a442:	4680      	mov	r8, r0
 800a444:	44b8      	add	r8, r7
 800a446:	44c4      	add	ip, r8
 800a448:	4461      	add	r1, ip
 800a44a:	600b      	str	r3, [r1, #0]
 800a44c:	2300      	movs	r3, #0
 800a44e:	21b4      	movs	r1, #180	; 0xb4
 800a450:	2008      	movs	r0, #8
 800a452:	1809      	adds	r1, r1, r0
 800a454:	2008      	movs	r0, #8
 800a456:	4684      	mov	ip, r0
 800a458:	2008      	movs	r0, #8
 800a45a:	4680      	mov	r8, r0
 800a45c:	44b8      	add	r8, r7
 800a45e:	44c4      	add	ip, r8
 800a460:	4461      	add	r1, ip
 800a462:	600b      	str	r3, [r1, #0]
 800a464:	2308      	movs	r3, #8
 800a466:	18d3      	adds	r3, r2, r3
 800a468:	2208      	movs	r2, #8
 800a46a:	4694      	mov	ip, r2
 800a46c:	2208      	movs	r2, #8
 800a46e:	4690      	mov	r8, r2
 800a470:	44b8      	add	r8, r7
 800a472:	44c4      	add	ip, r8
 800a474:	4463      	add	r3, ip
 800a476:	6819      	ldr	r1, [r3, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	000b      	movs	r3, r1
 800a47c:	0c1b      	lsrs	r3, r3, #16
 800a47e:	469c      	mov	ip, r3
 800a480:	0010      	movs	r0, r2
 800a482:	0400      	lsls	r0, r0, #16
 800a484:	258e      	movs	r5, #142	; 0x8e
 800a486:	006d      	lsls	r5, r5, #1
 800a488:	2308      	movs	r3, #8
 800a48a:	18eb      	adds	r3, r5, r3
 800a48c:	607b      	str	r3, [r7, #4]
 800a48e:	2308      	movs	r3, #8
 800a490:	4698      	mov	r8, r3
 800a492:	2308      	movs	r3, #8
 800a494:	4699      	mov	r9, r3
 800a496:	44b9      	add	r9, r7
 800a498:	44c8      	add	r8, r9
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4443      	add	r3, r8
 800a49e:	6018      	str	r0, [r3, #0]
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	18eb      	adds	r3, r5, r3
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	2008      	movs	r0, #8
 800a4a8:	2308      	movs	r3, #8
 800a4aa:	18c0      	adds	r0, r0, r3
 800a4ac:	19c0      	adds	r0, r0, r7
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	4698      	mov	r8, r3
 800a4b2:	4440      	add	r0, r8
 800a4b4:	6800      	ldr	r0, [r0, #0]
 800a4b6:	4663      	mov	r3, ip
 800a4b8:	4318      	orrs	r0, r3
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	18eb      	adds	r3, r5, r3
 800a4be:	2508      	movs	r5, #8
 800a4c0:	46ac      	mov	ip, r5
 800a4c2:	2508      	movs	r5, #8
 800a4c4:	46a8      	mov	r8, r5
 800a4c6:	44b8      	add	r8, r7
 800a4c8:	44c4      	add	ip, r8
 800a4ca:	4463      	add	r3, ip
 800a4cc:	6018      	str	r0, [r3, #0]
 800a4ce:	000b      	movs	r3, r1
 800a4d0:	041b      	lsls	r3, r3, #16
 800a4d2:	218c      	movs	r1, #140	; 0x8c
 800a4d4:	0049      	lsls	r1, r1, #1
 800a4d6:	2208      	movs	r2, #8
 800a4d8:	188a      	adds	r2, r1, r2
 800a4da:	2008      	movs	r0, #8
 800a4dc:	4684      	mov	ip, r0
 800a4de:	2008      	movs	r0, #8
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	44b8      	add	r8, r7
 800a4e4:	44c4      	add	ip, r8
 800a4e6:	4462      	add	r2, ip
 800a4e8:	6013      	str	r3, [r2, #0]
 800a4ea:	2308      	movs	r3, #8
 800a4ec:	18f3      	adds	r3, r6, r3
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	4694      	mov	ip, r2
 800a4f2:	2208      	movs	r2, #8
 800a4f4:	4690      	mov	r8, r2
 800a4f6:	44b8      	add	r8, r7
 800a4f8:	44c4      	add	ip, r8
 800a4fa:	4463      	add	r3, ip
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	2008      	movs	r0, #8
 800a502:	1809      	adds	r1, r1, r0
 800a504:	2008      	movs	r0, #8
 800a506:	4684      	mov	ip, r0
 800a508:	2008      	movs	r0, #8
 800a50a:	4680      	mov	r8, r0
 800a50c:	44b8      	add	r8, r7
 800a50e:	44c4      	add	ip, r8
 800a510:	4461      	add	r1, ip
 800a512:	6808      	ldr	r0, [r1, #0]
 800a514:	6849      	ldr	r1, [r1, #4]
 800a516:	1812      	adds	r2, r2, r0
 800a518:	414b      	adcs	r3, r1
 800a51a:	613a      	str	r2, [r7, #16]
 800a51c:	617b      	str	r3, [r7, #20]
 800a51e:	49af      	ldr	r1, [pc, #700]	; (800a7dc <WriteToEeprom+0xbd8>)
 800a520:	0026      	movs	r6, r4
 800a522:	1909      	adds	r1, r1, r4
 800a524:	2394      	movs	r3, #148	; 0x94
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	469c      	mov	ip, r3
 800a52a:	2308      	movs	r3, #8
 800a52c:	4698      	mov	r8, r3
 800a52e:	2308      	movs	r3, #8
 800a530:	4699      	mov	r9, r3
 800a532:	2308      	movs	r3, #8
 800a534:	469a      	mov	sl, r3
 800a536:	44ba      	add	sl, r7
 800a538:	44d1      	add	r9, sl
 800a53a:	44c8      	add	r8, r9
 800a53c:	44c4      	add	ip, r8
 800a53e:	4461      	add	r1, ip
 800a540:	7d49      	ldrb	r1, [r1, #21]
 800a542:	23a8      	movs	r3, #168	; 0xa8
 800a544:	2208      	movs	r2, #8
 800a546:	189a      	adds	r2, r3, r2
 800a548:	2008      	movs	r0, #8
 800a54a:	4684      	mov	ip, r0
 800a54c:	2008      	movs	r0, #8
 800a54e:	4680      	mov	r8, r0
 800a550:	44b8      	add	r8, r7
 800a552:	44c4      	add	ip, r8
 800a554:	4462      	add	r2, ip
 800a556:	6011      	str	r1, [r2, #0]
 800a558:	2100      	movs	r1, #0
 800a55a:	22ac      	movs	r2, #172	; 0xac
 800a55c:	2008      	movs	r0, #8
 800a55e:	1812      	adds	r2, r2, r0
 800a560:	2008      	movs	r0, #8
 800a562:	4684      	mov	ip, r0
 800a564:	2008      	movs	r0, #8
 800a566:	4680      	mov	r8, r0
 800a568:	44b8      	add	r8, r7
 800a56a:	44c4      	add	ip, r8
 800a56c:	4462      	add	r2, ip
 800a56e:	6011      	str	r1, [r2, #0]
 800a570:	2208      	movs	r2, #8
 800a572:	189b      	adds	r3, r3, r2
 800a574:	2208      	movs	r2, #8
 800a576:	4694      	mov	ip, r2
 800a578:	2208      	movs	r2, #8
 800a57a:	4690      	mov	r8, r2
 800a57c:	44b8      	add	r8, r7
 800a57e:	44c4      	add	ip, r8
 800a580:	4463      	add	r3, ip
 800a582:	681c      	ldr	r4, [r3, #0]
 800a584:	685d      	ldr	r5, [r3, #4]
 800a586:	0021      	movs	r1, r4
 800a588:	0e09      	lsrs	r1, r1, #24
 800a58a:	0028      	movs	r0, r5
 800a58c:	0200      	lsls	r0, r0, #8
 800a58e:	238a      	movs	r3, #138	; 0x8a
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	607b      	str	r3, [r7, #4]
 800a594:	2208      	movs	r2, #8
 800a596:	189a      	adds	r2, r3, r2
 800a598:	2308      	movs	r3, #8
 800a59a:	469c      	mov	ip, r3
 800a59c:	2308      	movs	r3, #8
 800a59e:	4698      	mov	r8, r3
 800a5a0:	44b8      	add	r8, r7
 800a5a2:	44c4      	add	ip, r8
 800a5a4:	4462      	add	r2, ip
 800a5a6:	6010      	str	r0, [r2, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	0002      	movs	r2, r0
 800a5ac:	2308      	movs	r3, #8
 800a5ae:	18c3      	adds	r3, r0, r3
 800a5b0:	2008      	movs	r0, #8
 800a5b2:	4684      	mov	ip, r0
 800a5b4:	2008      	movs	r0, #8
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	44b8      	add	r8, r7
 800a5ba:	44c4      	add	ip, r8
 800a5bc:	4463      	add	r3, ip
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	4308      	orrs	r0, r1
 800a5c2:	0011      	movs	r1, r2
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	18cb      	adds	r3, r1, r3
 800a5c8:	2208      	movs	r2, #8
 800a5ca:	4694      	mov	ip, r2
 800a5cc:	2208      	movs	r2, #8
 800a5ce:	4690      	mov	r8, r2
 800a5d0:	44b8      	add	r8, r7
 800a5d2:	44c4      	add	ip, r8
 800a5d4:	4463      	add	r3, ip
 800a5d6:	6018      	str	r0, [r3, #0]
 800a5d8:	0021      	movs	r1, r4
 800a5da:	0209      	lsls	r1, r1, #8
 800a5dc:	2388      	movs	r3, #136	; 0x88
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	2208      	movs	r2, #8
 800a5e2:	189a      	adds	r2, r3, r2
 800a5e4:	2008      	movs	r0, #8
 800a5e6:	4684      	mov	ip, r0
 800a5e8:	2008      	movs	r0, #8
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	44b8      	add	r8, r7
 800a5ee:	44c4      	add	ip, r8
 800a5f0:	4462      	add	r2, ip
 800a5f2:	6011      	str	r1, [r2, #0]
 800a5f4:	2208      	movs	r2, #8
 800a5f6:	189b      	adds	r3, r3, r2
 800a5f8:	2208      	movs	r2, #8
 800a5fa:	4694      	mov	ip, r2
 800a5fc:	2208      	movs	r2, #8
 800a5fe:	4690      	mov	r8, r2
 800a600:	44b8      	add	r8, r7
 800a602:	44c4      	add	ip, r8
 800a604:	4463      	add	r3, ip
 800a606:	6818      	ldr	r0, [r3, #0]
 800a608:	6859      	ldr	r1, [r3, #4]
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	1812      	adds	r2, r2, r0
 800a610:	414b      	adcs	r3, r1
 800a612:	4972      	ldr	r1, [pc, #456]	; (800a7dc <WriteToEeprom+0xbd8>)
 800a614:	1989      	adds	r1, r1, r6
 800a616:	2094      	movs	r0, #148	; 0x94
 800a618:	0040      	lsls	r0, r0, #1
 800a61a:	4684      	mov	ip, r0
 800a61c:	2008      	movs	r0, #8
 800a61e:	4680      	mov	r8, r0
 800a620:	2008      	movs	r0, #8
 800a622:	4681      	mov	r9, r0
 800a624:	2008      	movs	r0, #8
 800a626:	4682      	mov	sl, r0
 800a628:	44ba      	add	sl, r7
 800a62a:	44d1      	add	r9, sl
 800a62c:	44c8      	add	r8, r9
 800a62e:	44c4      	add	ip, r8
 800a630:	4461      	add	r1, ip
 800a632:	7d89      	ldrb	r1, [r1, #22]
 800a634:	20a0      	movs	r0, #160	; 0xa0
 800a636:	2408      	movs	r4, #8
 800a638:	1904      	adds	r4, r0, r4
 800a63a:	2508      	movs	r5, #8
 800a63c:	46ac      	mov	ip, r5
 800a63e:	2508      	movs	r5, #8
 800a640:	46a8      	mov	r8, r5
 800a642:	44b8      	add	r8, r7
 800a644:	44c4      	add	ip, r8
 800a646:	4464      	add	r4, ip
 800a648:	6021      	str	r1, [r4, #0]
 800a64a:	2100      	movs	r1, #0
 800a64c:	24a4      	movs	r4, #164	; 0xa4
 800a64e:	2508      	movs	r5, #8
 800a650:	1964      	adds	r4, r4, r5
 800a652:	2508      	movs	r5, #8
 800a654:	46ac      	mov	ip, r5
 800a656:	2508      	movs	r5, #8
 800a658:	46a8      	mov	r8, r5
 800a65a:	44b8      	add	r8, r7
 800a65c:	44c4      	add	ip, r8
 800a65e:	4464      	add	r4, ip
 800a660:	6021      	str	r1, [r4, #0]
 800a662:	2108      	movs	r1, #8
 800a664:	1841      	adds	r1, r0, r1
 800a666:	2008      	movs	r0, #8
 800a668:	4684      	mov	ip, r0
 800a66a:	2008      	movs	r0, #8
 800a66c:	4680      	mov	r8, r0
 800a66e:	44b8      	add	r8, r7
 800a670:	44c4      	add	ip, r8
 800a672:	4461      	add	r1, ip
 800a674:	6808      	ldr	r0, [r1, #0]
 800a676:	6849      	ldr	r1, [r1, #4]
 800a678:	1812      	adds	r2, r2, r0
 800a67a:	414b      	adcs	r3, r1
 800a67c:	4958      	ldr	r1, [pc, #352]	; (800a7e0 <WriteToEeprom+0xbdc>)
 800a67e:	600a      	str	r2, [r1, #0]
 800a680:	604b      	str	r3, [r1, #4]
		break;
 800a682:	f000 fd8a 	bl	800b19a <WriteToEeprom+0x1596>

	case 2: // PANASONIC
		to_hex(copy_config.sSetIR, 0);
 800a686:	2494      	movs	r4, #148	; 0x94
 800a688:	0064      	lsls	r4, r4, #1
 800a68a:	2308      	movs	r3, #8
 800a68c:	18e3      	adds	r3, r4, r3
 800a68e:	2208      	movs	r2, #8
 800a690:	4694      	mov	ip, r2
 800a692:	2208      	movs	r2, #8
 800a694:	4690      	mov	r8, r2
 800a696:	44b8      	add	r8, r7
 800a698:	44c4      	add	ip, r8
 800a69a:	4463      	add	r3, ip
 800a69c:	3304      	adds	r3, #4
 800a69e:	2100      	movs	r1, #0
 800a6a0:	0018      	movs	r0, r3
 800a6a2:	f00e fa81 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 6; i++)
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	22b9      	movs	r2, #185	; 0xb9
 800a6aa:	0092      	lsls	r2, r2, #2
 800a6ac:	1912      	adds	r2, r2, r4
 800a6ae:	2108      	movs	r1, #8
 800a6b0:	468c      	mov	ip, r1
 800a6b2:	2108      	movs	r1, #8
 800a6b4:	4688      	mov	r8, r1
 800a6b6:	2108      	movs	r1, #8
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	44b9      	add	r9, r7
 800a6bc:	44c8      	add	r8, r9
 800a6be:	44c4      	add	ip, r8
 800a6c0:	4462      	add	r2, ip
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	e05a      	b.n	800a77c <WriteToEeprom+0xb78>
			copy_config.sSetIR[i] = copy_config.sSetIR[2 * i + 1];
 800a6c6:	20b9      	movs	r0, #185	; 0xb9
 800a6c8:	0080      	lsls	r0, r0, #2
 800a6ca:	2594      	movs	r5, #148	; 0x94
 800a6cc:	006d      	lsls	r5, r5, #1
 800a6ce:	1943      	adds	r3, r0, r5
 800a6d0:	2208      	movs	r2, #8
 800a6d2:	4694      	mov	ip, r2
 800a6d4:	2208      	movs	r2, #8
 800a6d6:	4690      	mov	r8, r2
 800a6d8:	2208      	movs	r2, #8
 800a6da:	4691      	mov	r9, r2
 800a6dc:	44b9      	add	r9, r7
 800a6de:	44c8      	add	r8, r9
 800a6e0:	44c4      	add	ip, r8
 800a6e2:	4463      	add	r3, ip
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	4b3c      	ldr	r3, [pc, #240]	; (800a7dc <WriteToEeprom+0xbd8>)
 800a6ec:	24be      	movs	r4, #190	; 0xbe
 800a6ee:	00a4      	lsls	r4, r4, #2
 800a6f0:	191b      	adds	r3, r3, r4
 800a6f2:	2194      	movs	r1, #148	; 0x94
 800a6f4:	0049      	lsls	r1, r1, #1
 800a6f6:	468c      	mov	ip, r1
 800a6f8:	2108      	movs	r1, #8
 800a6fa:	4688      	mov	r8, r1
 800a6fc:	2108      	movs	r1, #8
 800a6fe:	4689      	mov	r9, r1
 800a700:	2108      	movs	r1, #8
 800a702:	468a      	mov	sl, r1
 800a704:	44ba      	add	sl, r7
 800a706:	44d1      	add	r9, sl
 800a708:	44c8      	add	r8, r9
 800a70a:	44c4      	add	ip, r8
 800a70c:	4463      	add	r3, ip
 800a70e:	189b      	adds	r3, r3, r2
 800a710:	7919      	ldrb	r1, [r3, #4]
 800a712:	4b32      	ldr	r3, [pc, #200]	; (800a7dc <WriteToEeprom+0xbd8>)
 800a714:	191b      	adds	r3, r3, r4
 800a716:	2208      	movs	r2, #8
 800a718:	18aa      	adds	r2, r5, r2
 800a71a:	2408      	movs	r4, #8
 800a71c:	46a4      	mov	ip, r4
 800a71e:	2408      	movs	r4, #8
 800a720:	46a0      	mov	r8, r4
 800a722:	44b8      	add	r8, r7
 800a724:	44c4      	add	ip, r8
 800a726:	4462      	add	r2, ip
 800a728:	189a      	adds	r2, r3, r2
 800a72a:	1943      	adds	r3, r0, r5
 800a72c:	2408      	movs	r4, #8
 800a72e:	46a4      	mov	ip, r4
 800a730:	2408      	movs	r4, #8
 800a732:	46a0      	mov	r8, r4
 800a734:	2408      	movs	r4, #8
 800a736:	46a1      	mov	r9, r4
 800a738:	44b9      	add	r9, r7
 800a73a:	44c8      	add	r8, r9
 800a73c:	44c4      	add	ip, r8
 800a73e:	4463      	add	r3, ip
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	18d3      	adds	r3, r2, r3
 800a744:	1d1a      	adds	r2, r3, #4
 800a746:	1c0b      	adds	r3, r1, #0
 800a748:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 6; i++)
 800a74a:	1943      	adds	r3, r0, r5
 800a74c:	2208      	movs	r2, #8
 800a74e:	4694      	mov	ip, r2
 800a750:	2208      	movs	r2, #8
 800a752:	4690      	mov	r8, r2
 800a754:	2208      	movs	r2, #8
 800a756:	4691      	mov	r9, r2
 800a758:	44b9      	add	r9, r7
 800a75a:	44c8      	add	r8, r9
 800a75c:	44c4      	add	ip, r8
 800a75e:	4463      	add	r3, ip
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	1942      	adds	r2, r0, r5
 800a766:	2108      	movs	r1, #8
 800a768:	468c      	mov	ip, r1
 800a76a:	2108      	movs	r1, #8
 800a76c:	4688      	mov	r8, r1
 800a76e:	2108      	movs	r1, #8
 800a770:	4689      	mov	r9, r1
 800a772:	44b9      	add	r9, r7
 800a774:	44c8      	add	r8, r9
 800a776:	44c4      	add	ip, r8
 800a778:	4462      	add	r2, ip
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	23b9      	movs	r3, #185	; 0xb9
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	2494      	movs	r4, #148	; 0x94
 800a782:	0064      	lsls	r4, r4, #1
 800a784:	191b      	adds	r3, r3, r4
 800a786:	2208      	movs	r2, #8
 800a788:	4694      	mov	ip, r2
 800a78a:	2208      	movs	r2, #8
 800a78c:	4690      	mov	r8, r2
 800a78e:	2208      	movs	r2, #8
 800a790:	4691      	mov	r9, r2
 800a792:	44b9      	add	r9, r7
 800a794:	44c8      	add	r8, r9
 800a796:	44c4      	add	ip, r8
 800a798:	4463      	add	r3, ip
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b05      	cmp	r3, #5
 800a79e:	dd92      	ble.n	800a6c6 <WriteToEeprom+0xac2>
		to_hex(copy_config.sSetIROFF, 0);
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	18e3      	adds	r3, r4, r3
 800a7a4:	2208      	movs	r2, #8
 800a7a6:	4694      	mov	ip, r2
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	4690      	mov	r8, r2
 800a7ac:	44b8      	add	r8, r7
 800a7ae:	44c4      	add	ip, r8
 800a7b0:	4463      	add	r3, ip
 800a7b2:	3313      	adds	r3, #19
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	f00e f9f6 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 6; i++)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	22b8      	movs	r2, #184	; 0xb8
 800a7c0:	0092      	lsls	r2, r2, #2
 800a7c2:	1912      	adds	r2, r2, r4
 800a7c4:	2108      	movs	r1, #8
 800a7c6:	468c      	mov	ip, r1
 800a7c8:	2108      	movs	r1, #8
 800a7ca:	4688      	mov	r8, r1
 800a7cc:	2108      	movs	r1, #8
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	44b9      	add	r9, r7
 800a7d2:	44c8      	add	r8, r9
 800a7d4:	44c4      	add	ip, r8
 800a7d6:	4462      	add	r2, ip
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	e05f      	b.n	800a89c <WriteToEeprom+0xc98>
 800a7dc:	fffffd08 	.word	0xfffffd08
 800a7e0:	20006728 	.word	0x20006728
			copy_config.sSetIROFF[i] = copy_config.sSetIROFF[2 * i + 1];
 800a7e4:	20b8      	movs	r0, #184	; 0xb8
 800a7e6:	0080      	lsls	r0, r0, #2
 800a7e8:	2594      	movs	r5, #148	; 0x94
 800a7ea:	006d      	lsls	r5, r5, #1
 800a7ec:	1943      	adds	r3, r0, r5
 800a7ee:	2208      	movs	r2, #8
 800a7f0:	4694      	mov	ip, r2
 800a7f2:	2208      	movs	r2, #8
 800a7f4:	4690      	mov	r8, r2
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	4691      	mov	r9, r2
 800a7fa:	44b9      	add	r9, r7
 800a7fc:	44c8      	add	r8, r9
 800a7fe:	44c4      	add	ip, r8
 800a800:	4463      	add	r3, ip
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	4bf9      	ldr	r3, [pc, #996]	; (800abf0 <WriteToEeprom+0xfec>)
 800a80a:	24be      	movs	r4, #190	; 0xbe
 800a80c:	00a4      	lsls	r4, r4, #2
 800a80e:	191b      	adds	r3, r3, r4
 800a810:	2194      	movs	r1, #148	; 0x94
 800a812:	0049      	lsls	r1, r1, #1
 800a814:	468c      	mov	ip, r1
 800a816:	2108      	movs	r1, #8
 800a818:	4688      	mov	r8, r1
 800a81a:	2108      	movs	r1, #8
 800a81c:	4689      	mov	r9, r1
 800a81e:	2108      	movs	r1, #8
 800a820:	468a      	mov	sl, r1
 800a822:	44ba      	add	sl, r7
 800a824:	44d1      	add	r9, sl
 800a826:	44c8      	add	r8, r9
 800a828:	44c4      	add	ip, r8
 800a82a:	4463      	add	r3, ip
 800a82c:	189b      	adds	r3, r3, r2
 800a82e:	7cd9      	ldrb	r1, [r3, #19]
 800a830:	4bef      	ldr	r3, [pc, #956]	; (800abf0 <WriteToEeprom+0xfec>)
 800a832:	191b      	adds	r3, r3, r4
 800a834:	2208      	movs	r2, #8
 800a836:	18aa      	adds	r2, r5, r2
 800a838:	2408      	movs	r4, #8
 800a83a:	46a4      	mov	ip, r4
 800a83c:	2408      	movs	r4, #8
 800a83e:	46a0      	mov	r8, r4
 800a840:	44b8      	add	r8, r7
 800a842:	44c4      	add	ip, r8
 800a844:	4462      	add	r2, ip
 800a846:	189a      	adds	r2, r3, r2
 800a848:	1943      	adds	r3, r0, r5
 800a84a:	2408      	movs	r4, #8
 800a84c:	46a4      	mov	ip, r4
 800a84e:	2408      	movs	r4, #8
 800a850:	46a0      	mov	r8, r4
 800a852:	2408      	movs	r4, #8
 800a854:	46a1      	mov	r9, r4
 800a856:	44b9      	add	r9, r7
 800a858:	44c8      	add	r8, r9
 800a85a:	44c4      	add	ip, r8
 800a85c:	4463      	add	r3, ip
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	18d3      	adds	r3, r2, r3
 800a862:	3313      	adds	r3, #19
 800a864:	001a      	movs	r2, r3
 800a866:	1c0b      	adds	r3, r1, #0
 800a868:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 6; i++)
 800a86a:	1943      	adds	r3, r0, r5
 800a86c:	2208      	movs	r2, #8
 800a86e:	4694      	mov	ip, r2
 800a870:	2208      	movs	r2, #8
 800a872:	4690      	mov	r8, r2
 800a874:	2208      	movs	r2, #8
 800a876:	4691      	mov	r9, r2
 800a878:	44b9      	add	r9, r7
 800a87a:	44c8      	add	r8, r9
 800a87c:	44c4      	add	ip, r8
 800a87e:	4463      	add	r3, ip
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3301      	adds	r3, #1
 800a884:	1942      	adds	r2, r0, r5
 800a886:	2108      	movs	r1, #8
 800a888:	468c      	mov	ip, r1
 800a88a:	2108      	movs	r1, #8
 800a88c:	4688      	mov	r8, r1
 800a88e:	2108      	movs	r1, #8
 800a890:	4689      	mov	r9, r1
 800a892:	44b9      	add	r9, r7
 800a894:	44c8      	add	r8, r9
 800a896:	44c4      	add	ip, r8
 800a898:	4462      	add	r2, ip
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	23b8      	movs	r3, #184	; 0xb8
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	2294      	movs	r2, #148	; 0x94
 800a8a2:	0052      	lsls	r2, r2, #1
 800a8a4:	189b      	adds	r3, r3, r2
 800a8a6:	2208      	movs	r2, #8
 800a8a8:	4694      	mov	ip, r2
 800a8aa:	2208      	movs	r2, #8
 800a8ac:	4690      	mov	r8, r2
 800a8ae:	2208      	movs	r2, #8
 800a8b0:	4691      	mov	r9, r2
 800a8b2:	44b9      	add	r9, r7
 800a8b4:	44c8      	add	r8, r9
 800a8b6:	44c4      	add	ip, r8
 800a8b8:	4463      	add	r3, ip
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	dd91      	ble.n	800a7e4 <WriteToEeprom+0xbe0>

		code_ON[0] = ((uint64_t)(copy_config.sSetIR[0]) << 40) + ((uint64_t)(copy_config.sSetIR[1]) << 32) + ((uint64_t)(copy_config.sSetIR[2]) << 24) + ((uint64_t)(copy_config.sSetIR[3]) << 16) + ((uint64_t)(copy_config.sSetIR[4]) << 8) + (uint64_t)(copy_config.sSetIR[5]); // full_ir_code_from_db;//
 800a8c0:	4bcb      	ldr	r3, [pc, #812]	; (800abf0 <WriteToEeprom+0xfec>)
 800a8c2:	22be      	movs	r2, #190	; 0xbe
 800a8c4:	0092      	lsls	r2, r2, #2
 800a8c6:	189b      	adds	r3, r3, r2
 800a8c8:	2194      	movs	r1, #148	; 0x94
 800a8ca:	0049      	lsls	r1, r1, #1
 800a8cc:	468c      	mov	ip, r1
 800a8ce:	2108      	movs	r1, #8
 800a8d0:	4688      	mov	r8, r1
 800a8d2:	2108      	movs	r1, #8
 800a8d4:	4689      	mov	r9, r1
 800a8d6:	2108      	movs	r1, #8
 800a8d8:	468a      	mov	sl, r1
 800a8da:	44ba      	add	sl, r7
 800a8dc:	44d1      	add	r9, sl
 800a8de:	44c8      	add	r8, r9
 800a8e0:	44c4      	add	ip, r8
 800a8e2:	4463      	add	r3, ip
 800a8e4:	791b      	ldrb	r3, [r3, #4]
 800a8e6:	2198      	movs	r1, #152	; 0x98
 800a8e8:	2008      	movs	r0, #8
 800a8ea:	1808      	adds	r0, r1, r0
 800a8ec:	2408      	movs	r4, #8
 800a8ee:	46a4      	mov	ip, r4
 800a8f0:	2408      	movs	r4, #8
 800a8f2:	46a0      	mov	r8, r4
 800a8f4:	44b8      	add	r8, r7
 800a8f6:	44c4      	add	ip, r8
 800a8f8:	4460      	add	r0, ip
 800a8fa:	6003      	str	r3, [r0, #0]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	209c      	movs	r0, #156	; 0x9c
 800a900:	2408      	movs	r4, #8
 800a902:	1900      	adds	r0, r0, r4
 800a904:	2408      	movs	r4, #8
 800a906:	46a4      	mov	ip, r4
 800a908:	2408      	movs	r4, #8
 800a90a:	46a0      	mov	r8, r4
 800a90c:	44b8      	add	r8, r7
 800a90e:	44c4      	add	ip, r8
 800a910:	4460      	add	r0, ip
 800a912:	6003      	str	r3, [r0, #0]
 800a914:	2308      	movs	r3, #8
 800a916:	18cb      	adds	r3, r1, r3
 800a918:	2108      	movs	r1, #8
 800a91a:	468c      	mov	ip, r1
 800a91c:	2108      	movs	r1, #8
 800a91e:	4688      	mov	r8, r1
 800a920:	44b8      	add	r8, r7
 800a922:	44c4      	add	ip, r8
 800a924:	4463      	add	r3, ip
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	021b      	lsls	r3, r3, #8
 800a92a:	2194      	movs	r1, #148	; 0x94
 800a92c:	2008      	movs	r0, #8
 800a92e:	1809      	adds	r1, r1, r0
 800a930:	2008      	movs	r0, #8
 800a932:	4684      	mov	ip, r0
 800a934:	2008      	movs	r0, #8
 800a936:	4680      	mov	r8, r0
 800a938:	44b8      	add	r8, r7
 800a93a:	44c4      	add	ip, r8
 800a93c:	4461      	add	r1, ip
 800a93e:	600b      	str	r3, [r1, #0]
 800a940:	2300      	movs	r3, #0
 800a942:	2090      	movs	r0, #144	; 0x90
 800a944:	2108      	movs	r1, #8
 800a946:	1841      	adds	r1, r0, r1
 800a948:	2408      	movs	r4, #8
 800a94a:	46a4      	mov	ip, r4
 800a94c:	2408      	movs	r4, #8
 800a94e:	46a0      	mov	r8, r4
 800a950:	44b8      	add	r8, r7
 800a952:	44c4      	add	ip, r8
 800a954:	4461      	add	r1, ip
 800a956:	600b      	str	r3, [r1, #0]
 800a958:	4ba5      	ldr	r3, [pc, #660]	; (800abf0 <WriteToEeprom+0xfec>)
 800a95a:	189b      	adds	r3, r3, r2
 800a95c:	2194      	movs	r1, #148	; 0x94
 800a95e:	0049      	lsls	r1, r1, #1
 800a960:	468c      	mov	ip, r1
 800a962:	2108      	movs	r1, #8
 800a964:	4688      	mov	r8, r1
 800a966:	2108      	movs	r1, #8
 800a968:	4689      	mov	r9, r1
 800a96a:	2108      	movs	r1, #8
 800a96c:	468a      	mov	sl, r1
 800a96e:	44ba      	add	sl, r7
 800a970:	44d1      	add	r9, sl
 800a972:	44c8      	add	r8, r9
 800a974:	44c4      	add	ip, r8
 800a976:	4463      	add	r3, ip
 800a978:	795b      	ldrb	r3, [r3, #5]
 800a97a:	2188      	movs	r1, #136	; 0x88
 800a97c:	2408      	movs	r4, #8
 800a97e:	190c      	adds	r4, r1, r4
 800a980:	2508      	movs	r5, #8
 800a982:	46ac      	mov	ip, r5
 800a984:	2508      	movs	r5, #8
 800a986:	46a8      	mov	r8, r5
 800a988:	44b8      	add	r8, r7
 800a98a:	44c4      	add	ip, r8
 800a98c:	4464      	add	r4, ip
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	2300      	movs	r3, #0
 800a992:	248c      	movs	r4, #140	; 0x8c
 800a994:	2508      	movs	r5, #8
 800a996:	1964      	adds	r4, r4, r5
 800a998:	2508      	movs	r5, #8
 800a99a:	46ac      	mov	ip, r5
 800a99c:	2508      	movs	r5, #8
 800a99e:	46a8      	mov	r8, r5
 800a9a0:	44b8      	add	r8, r7
 800a9a2:	44c4      	add	ip, r8
 800a9a4:	4464      	add	r4, ip
 800a9a6:	6023      	str	r3, [r4, #0]
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	18cb      	adds	r3, r1, r3
 800a9ac:	2108      	movs	r1, #8
 800a9ae:	468c      	mov	ip, r1
 800a9b0:	2108      	movs	r1, #8
 800a9b2:	4688      	mov	r8, r1
 800a9b4:	44b8      	add	r8, r7
 800a9b6:	44c4      	add	ip, r8
 800a9b8:	4463      	add	r3, ip
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	001b      	movs	r3, r3
 800a9be:	2184      	movs	r1, #132	; 0x84
 800a9c0:	2408      	movs	r4, #8
 800a9c2:	1909      	adds	r1, r1, r4
 800a9c4:	2408      	movs	r4, #8
 800a9c6:	46a4      	mov	ip, r4
 800a9c8:	2408      	movs	r4, #8
 800a9ca:	46a0      	mov	r8, r4
 800a9cc:	44b8      	add	r8, r7
 800a9ce:	44c4      	add	ip, r8
 800a9d0:	4461      	add	r1, ip
 800a9d2:	600b      	str	r3, [r1, #0]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	2480      	movs	r4, #128	; 0x80
 800a9d8:	2108      	movs	r1, #8
 800a9da:	1861      	adds	r1, r4, r1
 800a9dc:	2508      	movs	r5, #8
 800a9de:	46ac      	mov	ip, r5
 800a9e0:	2508      	movs	r5, #8
 800a9e2:	46a8      	mov	r8, r5
 800a9e4:	44b8      	add	r8, r7
 800a9e6:	44c4      	add	ip, r8
 800a9e8:	4461      	add	r1, ip
 800a9ea:	600b      	str	r3, [r1, #0]
 800a9ec:	2308      	movs	r3, #8
 800a9ee:	18c3      	adds	r3, r0, r3
 800a9f0:	2108      	movs	r1, #8
 800a9f2:	468c      	mov	ip, r1
 800a9f4:	2108      	movs	r1, #8
 800a9f6:	4688      	mov	r8, r1
 800a9f8:	44b8      	add	r8, r7
 800a9fa:	44c4      	add	ip, r8
 800a9fc:	4463      	add	r3, ip
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	6859      	ldr	r1, [r3, #4]
 800aa02:	2308      	movs	r3, #8
 800aa04:	18e3      	adds	r3, r4, r3
 800aa06:	2408      	movs	r4, #8
 800aa08:	46a4      	mov	ip, r4
 800aa0a:	2408      	movs	r4, #8
 800aa0c:	46a0      	mov	r8, r4
 800aa0e:	44b8      	add	r8, r7
 800aa10:	44c4      	add	ip, r8
 800aa12:	4463      	add	r3, ip
 800aa14:	685c      	ldr	r4, [r3, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	18c0      	adds	r0, r0, r3
 800aa1a:	4161      	adcs	r1, r4
 800aa1c:	4b74      	ldr	r3, [pc, #464]	; (800abf0 <WriteToEeprom+0xfec>)
 800aa1e:	603a      	str	r2, [r7, #0]
 800aa20:	189b      	adds	r3, r3, r2
 800aa22:	2494      	movs	r4, #148	; 0x94
 800aa24:	0064      	lsls	r4, r4, #1
 800aa26:	46a4      	mov	ip, r4
 800aa28:	2408      	movs	r4, #8
 800aa2a:	46a0      	mov	r8, r4
 800aa2c:	2408      	movs	r4, #8
 800aa2e:	46a1      	mov	r9, r4
 800aa30:	2208      	movs	r2, #8
 800aa32:	4692      	mov	sl, r2
 800aa34:	44ba      	add	sl, r7
 800aa36:	44d1      	add	r9, sl
 800aa38:	44c8      	add	r8, r9
 800aa3a:	44c4      	add	ip, r8
 800aa3c:	4463      	add	r3, ip
 800aa3e:	799b      	ldrb	r3, [r3, #6]
 800aa40:	2480      	movs	r4, #128	; 0x80
 800aa42:	2508      	movs	r5, #8
 800aa44:	1964      	adds	r4, r4, r5
 800aa46:	2208      	movs	r2, #8
 800aa48:	4694      	mov	ip, r2
 800aa4a:	44bc      	add	ip, r7
 800aa4c:	4464      	add	r4, ip
 800aa4e:	6023      	str	r3, [r4, #0]
 800aa50:	2300      	movs	r3, #0
 800aa52:	2484      	movs	r4, #132	; 0x84
 800aa54:	2508      	movs	r5, #8
 800aa56:	1964      	adds	r4, r4, r5
 800aa58:	2208      	movs	r2, #8
 800aa5a:	4694      	mov	ip, r2
 800aa5c:	44bc      	add	ip, r7
 800aa5e:	4464      	add	r4, ip
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	2380      	movs	r3, #128	; 0x80
 800aa64:	2408      	movs	r4, #8
 800aa66:	191b      	adds	r3, r3, r4
 800aa68:	2208      	movs	r2, #8
 800aa6a:	4694      	mov	ip, r2
 800aa6c:	44bc      	add	ip, r7
 800aa6e:	4463      	add	r3, ip
 800aa70:	685c      	ldr	r4, [r3, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	001d      	movs	r5, r3
 800aa76:	0a2d      	lsrs	r5, r5, #8
 800aa78:	2684      	movs	r6, #132	; 0x84
 800aa7a:	2208      	movs	r2, #8
 800aa7c:	18b6      	adds	r6, r6, r2
 800aa7e:	19f6      	adds	r6, r6, r7
 800aa80:	6035      	str	r5, [r6, #0]
 800aa82:	061b      	lsls	r3, r3, #24
 800aa84:	2480      	movs	r4, #128	; 0x80
 800aa86:	2208      	movs	r2, #8
 800aa88:	18a2      	adds	r2, r4, r2
 800aa8a:	19d4      	adds	r4, r2, r7
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	2380      	movs	r3, #128	; 0x80
 800aa90:	2208      	movs	r2, #8
 800aa92:	189b      	adds	r3, r3, r2
 800aa94:	19db      	adds	r3, r3, r7
 800aa96:	685c      	ldr	r4, [r3, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	18c0      	adds	r0, r0, r3
 800aa9c:	4161      	adcs	r1, r4
 800aa9e:	6138      	str	r0, [r7, #16]
 800aaa0:	6179      	str	r1, [r7, #20]
 800aaa2:	4b53      	ldr	r3, [pc, #332]	; (800abf0 <WriteToEeprom+0xfec>)
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	189b      	adds	r3, r3, r2
 800aaa8:	2194      	movs	r1, #148	; 0x94
 800aaaa:	0049      	lsls	r1, r1, #1
 800aaac:	468c      	mov	ip, r1
 800aaae:	2108      	movs	r1, #8
 800aab0:	4688      	mov	r8, r1
 800aab2:	2108      	movs	r1, #8
 800aab4:	4689      	mov	r9, r1
 800aab6:	2108      	movs	r1, #8
 800aab8:	468a      	mov	sl, r1
 800aaba:	44ba      	add	sl, r7
 800aabc:	44d1      	add	r9, sl
 800aabe:	44c8      	add	r8, r9
 800aac0:	44c4      	add	ip, r8
 800aac2:	4463      	add	r3, ip
 800aac4:	79db      	ldrb	r3, [r3, #7]
 800aac6:	2180      	movs	r1, #128	; 0x80
 800aac8:	1879      	adds	r1, r7, r1
 800aaca:	600b      	str	r3, [r1, #0]
 800aacc:	2300      	movs	r3, #0
 800aace:	2184      	movs	r1, #132	; 0x84
 800aad0:	1879      	adds	r1, r7, r1
 800aad2:	600b      	str	r3, [r1, #0]
 800aad4:	2380      	movs	r3, #128	; 0x80
 800aad6:	18fb      	adds	r3, r7, r3
 800aad8:	681c      	ldr	r4, [r3, #0]
 800aada:	685d      	ldr	r5, [r3, #4]
 800aadc:	0023      	movs	r3, r4
 800aade:	0c1b      	lsrs	r3, r3, #16
 800aae0:	4698      	mov	r8, r3
 800aae2:	002e      	movs	r6, r5
 800aae4:	0436      	lsls	r6, r6, #16
 800aae6:	2186      	movs	r1, #134	; 0x86
 800aae8:	0049      	lsls	r1, r1, #1
 800aaea:	2008      	movs	r0, #8
 800aaec:	1808      	adds	r0, r1, r0
 800aaee:	2308      	movs	r3, #8
 800aaf0:	469c      	mov	ip, r3
 800aaf2:	2308      	movs	r3, #8
 800aaf4:	4699      	mov	r9, r3
 800aaf6:	44b9      	add	r9, r7
 800aaf8:	44cc      	add	ip, r9
 800aafa:	4460      	add	r0, ip
 800aafc:	6006      	str	r6, [r0, #0]
 800aafe:	000e      	movs	r6, r1
 800ab00:	0030      	movs	r0, r6
 800ab02:	2108      	movs	r1, #8
 800ab04:	1871      	adds	r1, r6, r1
 800ab06:	2308      	movs	r3, #8
 800ab08:	469c      	mov	ip, r3
 800ab0a:	2308      	movs	r3, #8
 800ab0c:	4699      	mov	r9, r3
 800ab0e:	44b9      	add	r9, r7
 800ab10:	44cc      	add	ip, r9
 800ab12:	4461      	add	r1, ip
 800ab14:	680e      	ldr	r6, [r1, #0]
 800ab16:	4643      	mov	r3, r8
 800ab18:	431e      	orrs	r6, r3
 800ab1a:	0003      	movs	r3, r0
 800ab1c:	2108      	movs	r1, #8
 800ab1e:	185b      	adds	r3, r3, r1
 800ab20:	2108      	movs	r1, #8
 800ab22:	468c      	mov	ip, r1
 800ab24:	2108      	movs	r1, #8
 800ab26:	4688      	mov	r8, r1
 800ab28:	44b8      	add	r8, r7
 800ab2a:	44c4      	add	ip, r8
 800ab2c:	4463      	add	r3, ip
 800ab2e:	601e      	str	r6, [r3, #0]
 800ab30:	0023      	movs	r3, r4
 800ab32:	041b      	lsls	r3, r3, #16
 800ab34:	2184      	movs	r1, #132	; 0x84
 800ab36:	0049      	lsls	r1, r1, #1
 800ab38:	2008      	movs	r0, #8
 800ab3a:	1808      	adds	r0, r1, r0
 800ab3c:	2408      	movs	r4, #8
 800ab3e:	46a4      	mov	ip, r4
 800ab40:	2408      	movs	r4, #8
 800ab42:	46a0      	mov	r8, r4
 800ab44:	44b8      	add	r8, r7
 800ab46:	44c4      	add	ip, r8
 800ab48:	4460      	add	r0, ip
 800ab4a:	6003      	str	r3, [r0, #0]
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	18cb      	adds	r3, r1, r3
 800ab50:	2108      	movs	r1, #8
 800ab52:	468c      	mov	ip, r1
 800ab54:	2108      	movs	r1, #8
 800ab56:	4688      	mov	r8, r1
 800ab58:	44b8      	add	r8, r7
 800ab5a:	44c4      	add	ip, r8
 800ab5c:	4463      	add	r3, ip
 800ab5e:	685c      	ldr	r4, [r3, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	6938      	ldr	r0, [r7, #16]
 800ab64:	6979      	ldr	r1, [r7, #20]
 800ab66:	18c0      	adds	r0, r0, r3
 800ab68:	4161      	adcs	r1, r4
 800ab6a:	4b21      	ldr	r3, [pc, #132]	; (800abf0 <WriteToEeprom+0xfec>)
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	189b      	adds	r3, r3, r2
 800ab70:	2494      	movs	r4, #148	; 0x94
 800ab72:	0064      	lsls	r4, r4, #1
 800ab74:	46a4      	mov	ip, r4
 800ab76:	2408      	movs	r4, #8
 800ab78:	46a0      	mov	r8, r4
 800ab7a:	2408      	movs	r4, #8
 800ab7c:	46a1      	mov	r9, r4
 800ab7e:	2208      	movs	r2, #8
 800ab80:	4692      	mov	sl, r2
 800ab82:	44ba      	add	sl, r7
 800ab84:	44d1      	add	r9, sl
 800ab86:	44c8      	add	r8, r9
 800ab88:	44c4      	add	ip, r8
 800ab8a:	4463      	add	r3, ip
 800ab8c:	7a1b      	ldrb	r3, [r3, #8]
 800ab8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab90:	2300      	movs	r3, #0
 800ab92:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab94:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800ab96:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 800ab98:	0023      	movs	r3, r4
 800ab9a:	0e1b      	lsrs	r3, r3, #24
 800ab9c:	469c      	mov	ip, r3
 800ab9e:	002e      	movs	r6, r5
 800aba0:	0236      	lsls	r6, r6, #8
 800aba2:	2386      	movs	r3, #134	; 0x86
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	2208      	movs	r2, #8
 800aba8:	189b      	adds	r3, r3, r2
 800abaa:	2208      	movs	r2, #8
 800abac:	4690      	mov	r8, r2
 800abae:	44b8      	add	r8, r7
 800abb0:	4443      	add	r3, r8
 800abb2:	601e      	str	r6, [r3, #0]
 800abb4:	2386      	movs	r3, #134	; 0x86
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	2208      	movs	r2, #8
 800abba:	189b      	adds	r3, r3, r2
 800abbc:	2208      	movs	r2, #8
 800abbe:	18ba      	adds	r2, r7, r2
 800abc0:	189e      	adds	r6, r3, r2
 800abc2:	6836      	ldr	r6, [r6, #0]
 800abc4:	4663      	mov	r3, ip
 800abc6:	431e      	orrs	r6, r3
 800abc8:	2386      	movs	r3, #134	; 0x86
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	2208      	movs	r2, #8
 800abce:	189b      	adds	r3, r3, r2
 800abd0:	2208      	movs	r2, #8
 800abd2:	4694      	mov	ip, r2
 800abd4:	44bc      	add	ip, r7
 800abd6:	4463      	add	r3, ip
 800abd8:	601e      	str	r6, [r3, #0]
 800abda:	0023      	movs	r3, r4
 800abdc:	021b      	lsls	r3, r3, #8
 800abde:	2484      	movs	r4, #132	; 0x84
 800abe0:	0064      	lsls	r4, r4, #1
 800abe2:	2208      	movs	r2, #8
 800abe4:	18a2      	adds	r2, r4, r2
 800abe6:	2408      	movs	r4, #8
 800abe8:	193c      	adds	r4, r7, r4
 800abea:	1914      	adds	r4, r2, r4
 800abec:	e002      	b.n	800abf4 <WriteToEeprom+0xff0>
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	fffffd08 	.word	0xfffffd08
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	2384      	movs	r3, #132	; 0x84
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	2208      	movs	r2, #8
 800abfc:	189b      	adds	r3, r3, r2
 800abfe:	2208      	movs	r2, #8
 800ac00:	4694      	mov	ip, r2
 800ac02:	44bc      	add	ip, r7
 800ac04:	4463      	add	r3, ip
 800ac06:	685c      	ldr	r4, [r3, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	18c0      	adds	r0, r0, r3
 800ac0c:	4161      	adcs	r1, r4
 800ac0e:	4bb3      	ldr	r3, [pc, #716]	; (800aedc <WriteToEeprom+0x12d8>)
 800ac10:	687e      	ldr	r6, [r7, #4]
 800ac12:	199b      	adds	r3, r3, r6
 800ac14:	2294      	movs	r2, #148	; 0x94
 800ac16:	0052      	lsls	r2, r2, #1
 800ac18:	4694      	mov	ip, r2
 800ac1a:	2208      	movs	r2, #8
 800ac1c:	4690      	mov	r8, r2
 800ac1e:	2208      	movs	r2, #8
 800ac20:	4691      	mov	r9, r2
 800ac22:	2208      	movs	r2, #8
 800ac24:	4692      	mov	sl, r2
 800ac26:	44ba      	add	sl, r7
 800ac28:	44d1      	add	r9, sl
 800ac2a:	44c8      	add	r8, r9
 800ac2c:	44c4      	add	ip, r8
 800ac2e:	4463      	add	r3, ip
 800ac30:	7a5b      	ldrb	r3, [r3, #9]
 800ac32:	673b      	str	r3, [r7, #112]	; 0x70
 800ac34:	2300      	movs	r3, #0
 800ac36:	677b      	str	r3, [r7, #116]	; 0x74
 800ac38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac3c:	1812      	adds	r2, r2, r0
 800ac3e:	414b      	adcs	r3, r1
 800ac40:	49a7      	ldr	r1, [pc, #668]	; (800aee0 <WriteToEeprom+0x12dc>)
 800ac42:	600a      	str	r2, [r1, #0]
 800ac44:	604b      	str	r3, [r1, #4]
		code_OFF[0] = ((uint64_t)(copy_config.sSetIROFF[0]) << 40) + ((uint64_t)(copy_config.sSetIROFF[1]) << 32) + ((uint64_t)(copy_config.sSetIROFF[2]) << 24) + ((uint64_t)(copy_config.sSetIROFF[3]) << 16) + ((uint64_t)(copy_config.sSetIROFF[4]) << 8) + (uint64_t)(copy_config.sSetIROFF[5]);
 800ac46:	4ba5      	ldr	r3, [pc, #660]	; (800aedc <WriteToEeprom+0x12d8>)
 800ac48:	199b      	adds	r3, r3, r6
 800ac4a:	2294      	movs	r2, #148	; 0x94
 800ac4c:	0052      	lsls	r2, r2, #1
 800ac4e:	4694      	mov	ip, r2
 800ac50:	2208      	movs	r2, #8
 800ac52:	4690      	mov	r8, r2
 800ac54:	2208      	movs	r2, #8
 800ac56:	4691      	mov	r9, r2
 800ac58:	2208      	movs	r2, #8
 800ac5a:	4692      	mov	sl, r2
 800ac5c:	44ba      	add	sl, r7
 800ac5e:	44d1      	add	r9, sl
 800ac60:	44c8      	add	r8, r9
 800ac62:	44c4      	add	ip, r8
 800ac64:	4463      	add	r3, ip
 800ac66:	7cdb      	ldrb	r3, [r3, #19]
 800ac68:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	667b      	str	r3, [r7, #100]	; 0x64
 800ac74:	2300      	movs	r3, #0
 800ac76:	663b      	str	r3, [r7, #96]	; 0x60
 800ac78:	4b98      	ldr	r3, [pc, #608]	; (800aedc <WriteToEeprom+0x12d8>)
 800ac7a:	199b      	adds	r3, r3, r6
 800ac7c:	2294      	movs	r2, #148	; 0x94
 800ac7e:	0052      	lsls	r2, r2, #1
 800ac80:	4694      	mov	ip, r2
 800ac82:	2208      	movs	r2, #8
 800ac84:	4690      	mov	r8, r2
 800ac86:	2208      	movs	r2, #8
 800ac88:	4691      	mov	r9, r2
 800ac8a:	2208      	movs	r2, #8
 800ac8c:	4692      	mov	sl, r2
 800ac8e:	44ba      	add	sl, r7
 800ac90:	44d1      	add	r9, sl
 800ac92:	44c8      	add	r8, r9
 800ac94:	44c4      	add	ip, r8
 800ac96:	4463      	add	r3, ip
 800ac98:	7d1b      	ldrb	r3, [r3, #20]
 800ac9a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aca2:	001b      	movs	r3, r3
 800aca4:	657b      	str	r3, [r7, #84]	; 0x54
 800aca6:	2300      	movs	r3, #0
 800aca8:	653b      	str	r3, [r7, #80]	; 0x50
 800acaa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800acac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800acae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb0:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800acb2:	18c0      	adds	r0, r0, r3
 800acb4:	4161      	adcs	r1, r4
 800acb6:	4b89      	ldr	r3, [pc, #548]	; (800aedc <WriteToEeprom+0x12d8>)
 800acb8:	199b      	adds	r3, r3, r6
 800acba:	2294      	movs	r2, #148	; 0x94
 800acbc:	0052      	lsls	r2, r2, #1
 800acbe:	4694      	mov	ip, r2
 800acc0:	2208      	movs	r2, #8
 800acc2:	4690      	mov	r8, r2
 800acc4:	2208      	movs	r2, #8
 800acc6:	4691      	mov	r9, r2
 800acc8:	2208      	movs	r2, #8
 800acca:	4692      	mov	sl, r2
 800accc:	44ba      	add	sl, r7
 800acce:	44d1      	add	r9, sl
 800acd0:	44c8      	add	r8, r9
 800acd2:	44c4      	add	ip, r8
 800acd4:	4463      	add	r3, ip
 800acd6:	7d5b      	ldrb	r3, [r3, #21]
 800acd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800acda:	2300      	movs	r3, #0
 800acdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ace0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800ace2:	001a      	movs	r2, r3
 800ace4:	0a12      	lsrs	r2, r2, #8
 800ace6:	647a      	str	r2, [r7, #68]	; 0x44
 800ace8:	061b      	lsls	r3, r3, #24
 800acea:	643b      	str	r3, [r7, #64]	; 0x40
 800acec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800acf0:	18c0      	adds	r0, r0, r3
 800acf2:	4161      	adcs	r1, r4
 800acf4:	6138      	str	r0, [r7, #16]
 800acf6:	6179      	str	r1, [r7, #20]
 800acf8:	4b78      	ldr	r3, [pc, #480]	; (800aedc <WriteToEeprom+0x12d8>)
 800acfa:	199b      	adds	r3, r3, r6
 800acfc:	2294      	movs	r2, #148	; 0x94
 800acfe:	0052      	lsls	r2, r2, #1
 800ad00:	4694      	mov	ip, r2
 800ad02:	2208      	movs	r2, #8
 800ad04:	4690      	mov	r8, r2
 800ad06:	2208      	movs	r2, #8
 800ad08:	4691      	mov	r9, r2
 800ad0a:	2208      	movs	r2, #8
 800ad0c:	4692      	mov	sl, r2
 800ad0e:	44ba      	add	sl, r7
 800ad10:	44d1      	add	r9, sl
 800ad12:	44c8      	add	r8, r9
 800ad14:	44c4      	add	ip, r8
 800ad16:	4463      	add	r3, ip
 800ad18:	7d9b      	ldrb	r3, [r3, #22]
 800ad1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad20:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800ad22:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800ad24:	0023      	movs	r3, r4
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	4698      	mov	r8, r3
 800ad2a:	002a      	movs	r2, r5
 800ad2c:	0412      	lsls	r2, r2, #16
 800ad2e:	21fc      	movs	r1, #252	; 0xfc
 800ad30:	2008      	movs	r0, #8
 800ad32:	1808      	adds	r0, r1, r0
 800ad34:	2308      	movs	r3, #8
 800ad36:	469c      	mov	ip, r3
 800ad38:	2308      	movs	r3, #8
 800ad3a:	4699      	mov	r9, r3
 800ad3c:	44b9      	add	r9, r7
 800ad3e:	44cc      	add	ip, r9
 800ad40:	4460      	add	r0, ip
 800ad42:	6002      	str	r2, [r0, #0]
 800ad44:	000a      	movs	r2, r1
 800ad46:	0010      	movs	r0, r2
 800ad48:	2108      	movs	r1, #8
 800ad4a:	1852      	adds	r2, r2, r1
 800ad4c:	2308      	movs	r3, #8
 800ad4e:	2108      	movs	r1, #8
 800ad50:	185b      	adds	r3, r3, r1
 800ad52:	19db      	adds	r3, r3, r7
 800ad54:	18d1      	adds	r1, r2, r3
 800ad56:	680a      	ldr	r2, [r1, #0]
 800ad58:	4643      	mov	r3, r8
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	0003      	movs	r3, r0
 800ad5e:	2108      	movs	r1, #8
 800ad60:	185b      	adds	r3, r3, r1
 800ad62:	2108      	movs	r1, #8
 800ad64:	468c      	mov	ip, r1
 800ad66:	2108      	movs	r1, #8
 800ad68:	4688      	mov	r8, r1
 800ad6a:	44b8      	add	r8, r7
 800ad6c:	44c4      	add	ip, r8
 800ad6e:	4463      	add	r3, ip
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	0023      	movs	r3, r4
 800ad74:	041b      	lsls	r3, r3, #16
 800ad76:	22f8      	movs	r2, #248	; 0xf8
 800ad78:	2108      	movs	r1, #8
 800ad7a:	1851      	adds	r1, r2, r1
 800ad7c:	2008      	movs	r0, #8
 800ad7e:	4684      	mov	ip, r0
 800ad80:	2008      	movs	r0, #8
 800ad82:	4680      	mov	r8, r0
 800ad84:	44b8      	add	r8, r7
 800ad86:	44c4      	add	ip, r8
 800ad88:	4461      	add	r1, ip
 800ad8a:	600b      	str	r3, [r1, #0]
 800ad8c:	2308      	movs	r3, #8
 800ad8e:	18d3      	adds	r3, r2, r3
 800ad90:	2208      	movs	r2, #8
 800ad92:	4694      	mov	ip, r2
 800ad94:	2208      	movs	r2, #8
 800ad96:	4690      	mov	r8, r2
 800ad98:	44b8      	add	r8, r7
 800ad9a:	44c4      	add	ip, r8
 800ad9c:	4463      	add	r3, ip
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	6938      	ldr	r0, [r7, #16]
 800ada4:	6979      	ldr	r1, [r7, #20]
 800ada6:	1812      	adds	r2, r2, r0
 800ada8:	414b      	adcs	r3, r1
 800adaa:	613a      	str	r2, [r7, #16]
 800adac:	617b      	str	r3, [r7, #20]
 800adae:	494b      	ldr	r1, [pc, #300]	; (800aedc <WriteToEeprom+0x12d8>)
 800adb0:	1989      	adds	r1, r1, r6
 800adb2:	2394      	movs	r3, #148	; 0x94
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	469c      	mov	ip, r3
 800adb8:	2308      	movs	r3, #8
 800adba:	4698      	mov	r8, r3
 800adbc:	2308      	movs	r3, #8
 800adbe:	4699      	mov	r9, r3
 800adc0:	2308      	movs	r3, #8
 800adc2:	469a      	mov	sl, r3
 800adc4:	44ba      	add	sl, r7
 800adc6:	44d1      	add	r9, sl
 800adc8:	44c8      	add	r8, r9
 800adca:	44c4      	add	ip, r8
 800adcc:	4461      	add	r1, ip
 800adce:	7dc9      	ldrb	r1, [r1, #23]
 800add0:	6339      	str	r1, [r7, #48]	; 0x30
 800add2:	2100      	movs	r1, #0
 800add4:	6379      	str	r1, [r7, #52]	; 0x34
 800add6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800add8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800adda:	0021      	movs	r1, r4
 800addc:	0e09      	lsrs	r1, r1, #24
 800adde:	0028      	movs	r0, r5
 800ade0:	0200      	lsls	r0, r0, #8
 800ade2:	23f4      	movs	r3, #244	; 0xf4
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	2208      	movs	r2, #8
 800ade8:	189a      	adds	r2, r3, r2
 800adea:	2308      	movs	r3, #8
 800adec:	469c      	mov	ip, r3
 800adee:	2308      	movs	r3, #8
 800adf0:	4698      	mov	r8, r3
 800adf2:	44b8      	add	r8, r7
 800adf4:	44c4      	add	ip, r8
 800adf6:	4462      	add	r2, ip
 800adf8:	6010      	str	r0, [r2, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	0002      	movs	r2, r0
 800adfe:	2308      	movs	r3, #8
 800ae00:	18c3      	adds	r3, r0, r3
 800ae02:	2008      	movs	r0, #8
 800ae04:	4684      	mov	ip, r0
 800ae06:	2008      	movs	r0, #8
 800ae08:	4680      	mov	r8, r0
 800ae0a:	44b8      	add	r8, r7
 800ae0c:	44c4      	add	ip, r8
 800ae0e:	4463      	add	r3, ip
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	4308      	orrs	r0, r1
 800ae14:	0011      	movs	r1, r2
 800ae16:	2308      	movs	r3, #8
 800ae18:	18cb      	adds	r3, r1, r3
 800ae1a:	2208      	movs	r2, #8
 800ae1c:	4694      	mov	ip, r2
 800ae1e:	2208      	movs	r2, #8
 800ae20:	4690      	mov	r8, r2
 800ae22:	44b8      	add	r8, r7
 800ae24:	44c4      	add	ip, r8
 800ae26:	4463      	add	r3, ip
 800ae28:	6018      	str	r0, [r3, #0]
 800ae2a:	0021      	movs	r1, r4
 800ae2c:	0209      	lsls	r1, r1, #8
 800ae2e:	23f0      	movs	r3, #240	; 0xf0
 800ae30:	2208      	movs	r2, #8
 800ae32:	189a      	adds	r2, r3, r2
 800ae34:	2008      	movs	r0, #8
 800ae36:	4684      	mov	ip, r0
 800ae38:	2008      	movs	r0, #8
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	44b8      	add	r8, r7
 800ae3e:	44c4      	add	ip, r8
 800ae40:	4462      	add	r2, ip
 800ae42:	6011      	str	r1, [r2, #0]
 800ae44:	2208      	movs	r2, #8
 800ae46:	189b      	adds	r3, r3, r2
 800ae48:	2208      	movs	r2, #8
 800ae4a:	4694      	mov	ip, r2
 800ae4c:	2208      	movs	r2, #8
 800ae4e:	4690      	mov	r8, r2
 800ae50:	44b8      	add	r8, r7
 800ae52:	44c4      	add	ip, r8
 800ae54:	4463      	add	r3, ip
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	6859      	ldr	r1, [r3, #4]
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	1812      	adds	r2, r2, r0
 800ae60:	414b      	adcs	r3, r1
 800ae62:	491e      	ldr	r1, [pc, #120]	; (800aedc <WriteToEeprom+0x12d8>)
 800ae64:	1989      	adds	r1, r1, r6
 800ae66:	2094      	movs	r0, #148	; 0x94
 800ae68:	0040      	lsls	r0, r0, #1
 800ae6a:	4684      	mov	ip, r0
 800ae6c:	2008      	movs	r0, #8
 800ae6e:	4680      	mov	r8, r0
 800ae70:	2008      	movs	r0, #8
 800ae72:	4681      	mov	r9, r0
 800ae74:	2008      	movs	r0, #8
 800ae76:	4682      	mov	sl, r0
 800ae78:	44ba      	add	sl, r7
 800ae7a:	44d1      	add	r9, sl
 800ae7c:	44c8      	add	r8, r9
 800ae7e:	44c4      	add	ip, r8
 800ae80:	4461      	add	r1, ip
 800ae82:	7e09      	ldrb	r1, [r1, #24]
 800ae84:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae86:	2100      	movs	r1, #0
 800ae88:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ae8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae8e:	1812      	adds	r2, r2, r0
 800ae90:	414b      	adcs	r3, r1
 800ae92:	4914      	ldr	r1, [pc, #80]	; (800aee4 <WriteToEeprom+0x12e0>)
 800ae94:	600a      	str	r2, [r1, #0]
 800ae96:	604b      	str	r3, [r1, #4]
		break;
 800ae98:	e17f      	b.n	800b19a <WriteToEeprom+0x1596>
	case 3: // SONY12
	case 6: // SHARP
	case 4: // RC5
	case 5:
		to_hex(copy_config.sSetIR, 0);
 800ae9a:	2494      	movs	r4, #148	; 0x94
 800ae9c:	0064      	lsls	r4, r4, #1
 800ae9e:	2308      	movs	r3, #8
 800aea0:	18e3      	adds	r3, r4, r3
 800aea2:	2208      	movs	r2, #8
 800aea4:	4694      	mov	ip, r2
 800aea6:	2208      	movs	r2, #8
 800aea8:	4690      	mov	r8, r2
 800aeaa:	44b8      	add	r8, r7
 800aeac:	44c4      	add	ip, r8
 800aeae:	4463      	add	r3, ip
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	f00d fe77 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 2; i++)
 800aeba:	2300      	movs	r3, #0
 800aebc:	22b7      	movs	r2, #183	; 0xb7
 800aebe:	0092      	lsls	r2, r2, #2
 800aec0:	1912      	adds	r2, r2, r4
 800aec2:	2108      	movs	r1, #8
 800aec4:	468c      	mov	ip, r1
 800aec6:	2108      	movs	r1, #8
 800aec8:	4688      	mov	r8, r1
 800aeca:	2108      	movs	r1, #8
 800aecc:	4689      	mov	r9, r1
 800aece:	44b9      	add	r9, r7
 800aed0:	44c8      	add	r8, r9
 800aed2:	44c4      	add	ip, r8
 800aed4:	4462      	add	r2, ip
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	e061      	b.n	800af9e <WriteToEeprom+0x139a>
 800aeda:	46c0      	nop			; (mov r8, r8)
 800aedc:	fffffd08 	.word	0xfffffd08
 800aee0:	20006720 	.word	0x20006720
 800aee4:	20006728 	.word	0x20006728
			copy_config.sSetIR[i] = copy_config.sSetIR[2 * i + 1];
 800aee8:	20b7      	movs	r0, #183	; 0xb7
 800aeea:	0080      	lsls	r0, r0, #2
 800aeec:	2594      	movs	r5, #148	; 0x94
 800aeee:	006d      	lsls	r5, r5, #1
 800aef0:	1943      	adds	r3, r0, r5
 800aef2:	2208      	movs	r2, #8
 800aef4:	4694      	mov	ip, r2
 800aef6:	2208      	movs	r2, #8
 800aef8:	4690      	mov	r8, r2
 800aefa:	2208      	movs	r2, #8
 800aefc:	4691      	mov	r9, r2
 800aefe:	44b9      	add	r9, r7
 800af00:	44c8      	add	r8, r9
 800af02:	44c4      	add	ip, r8
 800af04:	4463      	add	r3, ip
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	3301      	adds	r3, #1
 800af0c:	4aa8      	ldr	r2, [pc, #672]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800af0e:	24be      	movs	r4, #190	; 0xbe
 800af10:	00a4      	lsls	r4, r4, #2
 800af12:	1912      	adds	r2, r2, r4
 800af14:	2194      	movs	r1, #148	; 0x94
 800af16:	0049      	lsls	r1, r1, #1
 800af18:	468c      	mov	ip, r1
 800af1a:	2108      	movs	r1, #8
 800af1c:	4688      	mov	r8, r1
 800af1e:	2108      	movs	r1, #8
 800af20:	4689      	mov	r9, r1
 800af22:	2108      	movs	r1, #8
 800af24:	468a      	mov	sl, r1
 800af26:	44ba      	add	sl, r7
 800af28:	44d1      	add	r9, sl
 800af2a:	44c8      	add	r8, r9
 800af2c:	44c4      	add	ip, r8
 800af2e:	4462      	add	r2, ip
 800af30:	18d3      	adds	r3, r2, r3
 800af32:	7919      	ldrb	r1, [r3, #4]
 800af34:	4b9e      	ldr	r3, [pc, #632]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800af36:	191b      	adds	r3, r3, r4
 800af38:	2208      	movs	r2, #8
 800af3a:	18aa      	adds	r2, r5, r2
 800af3c:	2408      	movs	r4, #8
 800af3e:	46a4      	mov	ip, r4
 800af40:	2408      	movs	r4, #8
 800af42:	46a0      	mov	r8, r4
 800af44:	44b8      	add	r8, r7
 800af46:	44c4      	add	ip, r8
 800af48:	4462      	add	r2, ip
 800af4a:	189a      	adds	r2, r3, r2
 800af4c:	1943      	adds	r3, r0, r5
 800af4e:	2408      	movs	r4, #8
 800af50:	46a4      	mov	ip, r4
 800af52:	2408      	movs	r4, #8
 800af54:	46a0      	mov	r8, r4
 800af56:	2408      	movs	r4, #8
 800af58:	46a1      	mov	r9, r4
 800af5a:	44b9      	add	r9, r7
 800af5c:	44c8      	add	r8, r9
 800af5e:	44c4      	add	ip, r8
 800af60:	4463      	add	r3, ip
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	18d3      	adds	r3, r2, r3
 800af66:	3304      	adds	r3, #4
 800af68:	1c0a      	adds	r2, r1, #0
 800af6a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 2; i++)
 800af6c:	1943      	adds	r3, r0, r5
 800af6e:	2208      	movs	r2, #8
 800af70:	4694      	mov	ip, r2
 800af72:	2208      	movs	r2, #8
 800af74:	4690      	mov	r8, r2
 800af76:	2208      	movs	r2, #8
 800af78:	4691      	mov	r9, r2
 800af7a:	44b9      	add	r9, r7
 800af7c:	44c8      	add	r8, r9
 800af7e:	44c4      	add	ip, r8
 800af80:	4463      	add	r3, ip
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	1942      	adds	r2, r0, r5
 800af88:	2108      	movs	r1, #8
 800af8a:	468c      	mov	ip, r1
 800af8c:	2108      	movs	r1, #8
 800af8e:	4688      	mov	r8, r1
 800af90:	2108      	movs	r1, #8
 800af92:	4689      	mov	r9, r1
 800af94:	44b9      	add	r9, r7
 800af96:	44c8      	add	r8, r9
 800af98:	44c4      	add	ip, r8
 800af9a:	4462      	add	r2, ip
 800af9c:	6013      	str	r3, [r2, #0]
 800af9e:	23b7      	movs	r3, #183	; 0xb7
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	2494      	movs	r4, #148	; 0x94
 800afa4:	0064      	lsls	r4, r4, #1
 800afa6:	191b      	adds	r3, r3, r4
 800afa8:	2208      	movs	r2, #8
 800afaa:	4694      	mov	ip, r2
 800afac:	2208      	movs	r2, #8
 800afae:	4690      	mov	r8, r2
 800afb0:	2208      	movs	r2, #8
 800afb2:	4691      	mov	r9, r2
 800afb4:	44b9      	add	r9, r7
 800afb6:	44c8      	add	r8, r9
 800afb8:	44c4      	add	ip, r8
 800afba:	4463      	add	r3, ip
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	dd92      	ble.n	800aee8 <WriteToEeprom+0x12e4>
		to_hex(copy_config.sSetIROFF, 0);
 800afc2:	2308      	movs	r3, #8
 800afc4:	18e3      	adds	r3, r4, r3
 800afc6:	2208      	movs	r2, #8
 800afc8:	4694      	mov	ip, r2
 800afca:	2208      	movs	r2, #8
 800afcc:	4690      	mov	r8, r2
 800afce:	44b8      	add	r8, r7
 800afd0:	44c4      	add	ip, r8
 800afd2:	4463      	add	r3, ip
 800afd4:	3313      	adds	r3, #19
 800afd6:	2100      	movs	r1, #0
 800afd8:	0018      	movs	r0, r3
 800afda:	f00d fde5 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 2; i++)
 800afde:	2300      	movs	r3, #0
 800afe0:	22b6      	movs	r2, #182	; 0xb6
 800afe2:	0092      	lsls	r2, r2, #2
 800afe4:	1912      	adds	r2, r2, r4
 800afe6:	2108      	movs	r1, #8
 800afe8:	468c      	mov	ip, r1
 800afea:	2108      	movs	r1, #8
 800afec:	4688      	mov	r8, r1
 800afee:	2108      	movs	r1, #8
 800aff0:	4689      	mov	r9, r1
 800aff2:	44b9      	add	r9, r7
 800aff4:	44c8      	add	r8, r9
 800aff6:	44c4      	add	ip, r8
 800aff8:	4462      	add	r2, ip
 800affa:	6013      	str	r3, [r2, #0]
 800affc:	e05a      	b.n	800b0b4 <WriteToEeprom+0x14b0>
			copy_config.sSetIROFF[i] = copy_config.sSetIROFF[2 * i + 1];
 800affe:	20b6      	movs	r0, #182	; 0xb6
 800b000:	0080      	lsls	r0, r0, #2
 800b002:	2594      	movs	r5, #148	; 0x94
 800b004:	006d      	lsls	r5, r5, #1
 800b006:	1943      	adds	r3, r0, r5
 800b008:	2208      	movs	r2, #8
 800b00a:	4694      	mov	ip, r2
 800b00c:	2208      	movs	r2, #8
 800b00e:	4690      	mov	r8, r2
 800b010:	2208      	movs	r2, #8
 800b012:	4691      	mov	r9, r2
 800b014:	44b9      	add	r9, r7
 800b016:	44c8      	add	r8, r9
 800b018:	44c4      	add	ip, r8
 800b01a:	4463      	add	r3, ip
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	3301      	adds	r3, #1
 800b022:	4a63      	ldr	r2, [pc, #396]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800b024:	24be      	movs	r4, #190	; 0xbe
 800b026:	00a4      	lsls	r4, r4, #2
 800b028:	1912      	adds	r2, r2, r4
 800b02a:	2194      	movs	r1, #148	; 0x94
 800b02c:	0049      	lsls	r1, r1, #1
 800b02e:	468c      	mov	ip, r1
 800b030:	2108      	movs	r1, #8
 800b032:	4688      	mov	r8, r1
 800b034:	2108      	movs	r1, #8
 800b036:	4689      	mov	r9, r1
 800b038:	2108      	movs	r1, #8
 800b03a:	468a      	mov	sl, r1
 800b03c:	44ba      	add	sl, r7
 800b03e:	44d1      	add	r9, sl
 800b040:	44c8      	add	r8, r9
 800b042:	44c4      	add	ip, r8
 800b044:	4462      	add	r2, ip
 800b046:	18d3      	adds	r3, r2, r3
 800b048:	7cd9      	ldrb	r1, [r3, #19]
 800b04a:	4b59      	ldr	r3, [pc, #356]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800b04c:	191b      	adds	r3, r3, r4
 800b04e:	2208      	movs	r2, #8
 800b050:	18aa      	adds	r2, r5, r2
 800b052:	2408      	movs	r4, #8
 800b054:	46a4      	mov	ip, r4
 800b056:	2408      	movs	r4, #8
 800b058:	46a0      	mov	r8, r4
 800b05a:	44b8      	add	r8, r7
 800b05c:	44c4      	add	ip, r8
 800b05e:	4462      	add	r2, ip
 800b060:	189a      	adds	r2, r3, r2
 800b062:	1943      	adds	r3, r0, r5
 800b064:	2408      	movs	r4, #8
 800b066:	46a4      	mov	ip, r4
 800b068:	2408      	movs	r4, #8
 800b06a:	46a0      	mov	r8, r4
 800b06c:	2408      	movs	r4, #8
 800b06e:	46a1      	mov	r9, r4
 800b070:	44b9      	add	r9, r7
 800b072:	44c8      	add	r8, r9
 800b074:	44c4      	add	ip, r8
 800b076:	4463      	add	r3, ip
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	18d3      	adds	r3, r2, r3
 800b07c:	3313      	adds	r3, #19
 800b07e:	1c0a      	adds	r2, r1, #0
 800b080:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 2; i++)
 800b082:	1943      	adds	r3, r0, r5
 800b084:	2208      	movs	r2, #8
 800b086:	4694      	mov	ip, r2
 800b088:	2208      	movs	r2, #8
 800b08a:	4690      	mov	r8, r2
 800b08c:	2208      	movs	r2, #8
 800b08e:	4691      	mov	r9, r2
 800b090:	44b9      	add	r9, r7
 800b092:	44c8      	add	r8, r9
 800b094:	44c4      	add	ip, r8
 800b096:	4463      	add	r3, ip
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3301      	adds	r3, #1
 800b09c:	1942      	adds	r2, r0, r5
 800b09e:	2108      	movs	r1, #8
 800b0a0:	468c      	mov	ip, r1
 800b0a2:	2108      	movs	r1, #8
 800b0a4:	4688      	mov	r8, r1
 800b0a6:	2108      	movs	r1, #8
 800b0a8:	4689      	mov	r9, r1
 800b0aa:	44b9      	add	r9, r7
 800b0ac:	44c8      	add	r8, r9
 800b0ae:	44c4      	add	ip, r8
 800b0b0:	4462      	add	r2, ip
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	23b6      	movs	r3, #182	; 0xb6
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	2294      	movs	r2, #148	; 0x94
 800b0ba:	0052      	lsls	r2, r2, #1
 800b0bc:	189b      	adds	r3, r3, r2
 800b0be:	2208      	movs	r2, #8
 800b0c0:	4694      	mov	ip, r2
 800b0c2:	2208      	movs	r2, #8
 800b0c4:	4690      	mov	r8, r2
 800b0c6:	2208      	movs	r2, #8
 800b0c8:	4691      	mov	r9, r2
 800b0ca:	44b9      	add	r9, r7
 800b0cc:	44c8      	add	r8, r9
 800b0ce:	44c4      	add	ip, r8
 800b0d0:	4463      	add	r3, ip
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	dd92      	ble.n	800affe <WriteToEeprom+0x13fa>

		code_ON[0] = ((uint16_t)((uint32_t)(copy_config.sSetIR[0]) << 8) + copy_config.sSetIR[1]); // full_ir_code_from_db;//
 800b0d8:	4b35      	ldr	r3, [pc, #212]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800b0da:	20be      	movs	r0, #190	; 0xbe
 800b0dc:	0080      	lsls	r0, r0, #2
 800b0de:	181b      	adds	r3, r3, r0
 800b0e0:	2294      	movs	r2, #148	; 0x94
 800b0e2:	0052      	lsls	r2, r2, #1
 800b0e4:	4694      	mov	ip, r2
 800b0e6:	2208      	movs	r2, #8
 800b0e8:	4690      	mov	r8, r2
 800b0ea:	2208      	movs	r2, #8
 800b0ec:	4691      	mov	r9, r2
 800b0ee:	2208      	movs	r2, #8
 800b0f0:	4692      	mov	sl, r2
 800b0f2:	44ba      	add	sl, r7
 800b0f4:	44d1      	add	r9, sl
 800b0f6:	44c8      	add	r8, r9
 800b0f8:	44c4      	add	ip, r8
 800b0fa:	4463      	add	r3, ip
 800b0fc:	791b      	ldrb	r3, [r3, #4]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	b29b      	uxth	r3, r3
 800b104:	001a      	movs	r2, r3
 800b106:	4b2a      	ldr	r3, [pc, #168]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800b108:	181b      	adds	r3, r3, r0
 800b10a:	2194      	movs	r1, #148	; 0x94
 800b10c:	0049      	lsls	r1, r1, #1
 800b10e:	468c      	mov	ip, r1
 800b110:	2108      	movs	r1, #8
 800b112:	4688      	mov	r8, r1
 800b114:	2108      	movs	r1, #8
 800b116:	4689      	mov	r9, r1
 800b118:	2108      	movs	r1, #8
 800b11a:	468a      	mov	sl, r1
 800b11c:	44ba      	add	sl, r7
 800b11e:	44d1      	add	r9, sl
 800b120:	44c8      	add	r8, r9
 800b122:	44c4      	add	ip, r8
 800b124:	4463      	add	r3, ip
 800b126:	795b      	ldrb	r3, [r3, #5]
 800b128:	18d3      	adds	r3, r2, r3
 800b12a:	623b      	str	r3, [r7, #32]
 800b12c:	17db      	asrs	r3, r3, #31
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
 800b130:	4b20      	ldr	r3, [pc, #128]	; (800b1b4 <WriteToEeprom+0x15b0>)
 800b132:	6a39      	ldr	r1, [r7, #32]
 800b134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b136:	6019      	str	r1, [r3, #0]
 800b138:	605a      	str	r2, [r3, #4]
		code_OFF[0] = ((uint16_t)((uint32_t)(copy_config.sSetIROFF[0]) << 8) + copy_config.sSetIROFF[1]);
 800b13a:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800b13c:	181b      	adds	r3, r3, r0
 800b13e:	2294      	movs	r2, #148	; 0x94
 800b140:	0052      	lsls	r2, r2, #1
 800b142:	4694      	mov	ip, r2
 800b144:	2208      	movs	r2, #8
 800b146:	4690      	mov	r8, r2
 800b148:	2208      	movs	r2, #8
 800b14a:	4691      	mov	r9, r2
 800b14c:	2208      	movs	r2, #8
 800b14e:	4692      	mov	sl, r2
 800b150:	44ba      	add	sl, r7
 800b152:	44d1      	add	r9, sl
 800b154:	44c8      	add	r8, r9
 800b156:	44c4      	add	ip, r8
 800b158:	4463      	add	r3, ip
 800b15a:	7cdb      	ldrb	r3, [r3, #19]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	b29b      	uxth	r3, r3
 800b162:	001a      	movs	r2, r3
 800b164:	4b12      	ldr	r3, [pc, #72]	; (800b1b0 <WriteToEeprom+0x15ac>)
 800b166:	181b      	adds	r3, r3, r0
 800b168:	2194      	movs	r1, #148	; 0x94
 800b16a:	0049      	lsls	r1, r1, #1
 800b16c:	468c      	mov	ip, r1
 800b16e:	2108      	movs	r1, #8
 800b170:	4688      	mov	r8, r1
 800b172:	2108      	movs	r1, #8
 800b174:	4689      	mov	r9, r1
 800b176:	2108      	movs	r1, #8
 800b178:	468a      	mov	sl, r1
 800b17a:	44ba      	add	sl, r7
 800b17c:	44d1      	add	r9, sl
 800b17e:	44c8      	add	r8, r9
 800b180:	44c4      	add	ip, r8
 800b182:	4463      	add	r3, ip
 800b184:	7d1b      	ldrb	r3, [r3, #20]
 800b186:	18d3      	adds	r3, r2, r3
 800b188:	61bb      	str	r3, [r7, #24]
 800b18a:	17db      	asrs	r3, r3, #31
 800b18c:	61fb      	str	r3, [r7, #28]
 800b18e:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <WriteToEeprom+0x15b4>)
 800b190:	69b9      	ldr	r1, [r7, #24]
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	6019      	str	r1, [r3, #0]
 800b196:	605a      	str	r2, [r3, #4]

		break;
 800b198:	46c0      	nop			; (mov r8, r8)
	}
}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	46bd      	mov	sp, r7
 800b19e:	2387      	movs	r3, #135	; 0x87
 800b1a0:	00db      	lsls	r3, r3, #3
 800b1a2:	449d      	add	sp, r3
 800b1a4:	bce0      	pop	{r5, r6, r7}
 800b1a6:	46ba      	mov	sl, r7
 800b1a8:	46b1      	mov	r9, r6
 800b1aa:	46a8      	mov	r8, r5
 800b1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ae:	46c0      	nop			; (mov r8, r8)
 800b1b0:	fffffd08 	.word	0xfffffd08
 800b1b4:	20006720 	.word	0x20006720
 800b1b8:	20006728 	.word	0x20006728

0800b1bc <ReadAndSetConfig>:

void ReadAndSetConfig()
{
 800b1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1be:	46ce      	mov	lr, r9
 800b1c0:	4647      	mov	r7, r8
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	4cdf      	ldr	r4, [pc, #892]	; (800b544 <ReadAndSetConfig+0x388>)
 800b1c6:	44a5      	add	sp, r4
 800b1c8:	af04      	add	r7, sp, #16
	vptr_test = &pcb_config;
 800b1ca:	4adf      	ldr	r2, [pc, #892]	; (800b548 <ReadAndSetConfig+0x38c>)
 800b1cc:	4bdf      	ldr	r3, [pc, #892]	; (800b54c <ReadAndSetConfig+0x390>)
 800b1ce:	6013      	str	r3, [r2, #0]
	//		  HAL_I2C_Mem_Read (&hi2c1, EEPROM_C24_ADDR_READ, (j<<4), 1, &buffer2[16*j], 16, 1000); //read 16 bytes * 18 pages  = 288 bytes
	//		  HAL_Delay(50);
	//	  }

	// Read the config
	for (int j = 0; j < 255; j++)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4adf      	ldr	r2, [pc, #892]	; (800b550 <ReadAndSetConfig+0x394>)
 800b1d4:	21c8      	movs	r1, #200	; 0xc8
 800b1d6:	1852      	adds	r2, r2, r1
 800b1d8:	2108      	movs	r1, #8
 800b1da:	468c      	mov	ip, r1
 800b1dc:	2108      	movs	r1, #8
 800b1de:	4688      	mov	r8, r1
 800b1e0:	44b8      	add	r8, r7
 800b1e2:	44c4      	add	ip, r8
 800b1e4:	4462      	add	r2, ip
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	e043      	b.n	800b272 <ReadAndSetConfig+0xb6>
	{
		HAL_I2C_Mem_Read(&hi2c1, EEPROM_C24_ADDR_READ, j, 1, &buffer2[j], 1, 1000);
 800b1ea:	4ed9      	ldr	r6, [pc, #868]	; (800b550 <ReadAndSetConfig+0x394>)
 800b1ec:	23c8      	movs	r3, #200	; 0xc8
 800b1ee:	18f3      	adds	r3, r6, r3
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	4694      	mov	ip, r2
 800b1f4:	2208      	movs	r2, #8
 800b1f6:	4690      	mov	r8, r2
 800b1f8:	44b8      	add	r8, r7
 800b1fa:	44c4      	add	ip, r8
 800b1fc:	4463      	add	r3, ip
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	b299      	uxth	r1, r3
 800b202:	23b8      	movs	r3, #184	; 0xb8
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	22c8      	movs	r2, #200	; 0xc8
 800b208:	189b      	adds	r3, r3, r2
 800b20a:	2208      	movs	r2, #8
 800b20c:	2008      	movs	r0, #8
 800b20e:	1812      	adds	r2, r2, r0
 800b210:	19d2      	adds	r2, r2, r7
 800b212:	189a      	adds	r2, r3, r2
 800b214:	23c8      	movs	r3, #200	; 0xc8
 800b216:	18f3      	adds	r3, r6, r3
 800b218:	2008      	movs	r0, #8
 800b21a:	4684      	mov	ip, r0
 800b21c:	2008      	movs	r0, #8
 800b21e:	4680      	mov	r8, r0
 800b220:	44b8      	add	r8, r7
 800b222:	44c4      	add	ip, r8
 800b224:	4463      	add	r3, ip
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	18d2      	adds	r2, r2, r3
 800b22a:	48ca      	ldr	r0, [pc, #808]	; (800b554 <ReadAndSetConfig+0x398>)
 800b22c:	23fa      	movs	r3, #250	; 0xfa
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	9302      	str	r3, [sp, #8]
 800b232:	2301      	movs	r3, #1
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	9200      	str	r2, [sp, #0]
 800b238:	2301      	movs	r3, #1
 800b23a:	000a      	movs	r2, r1
 800b23c:	21a1      	movs	r1, #161	; 0xa1
 800b23e:	f006 f99d 	bl	801157c <HAL_I2C_Mem_Read>
		HAL_Delay(15);
 800b242:	200f      	movs	r0, #15
 800b244:	f004 f8b0 	bl	800f3a8 <HAL_Delay>
	for (int j = 0; j < 255; j++)
 800b248:	23c8      	movs	r3, #200	; 0xc8
 800b24a:	18f3      	adds	r3, r6, r3
 800b24c:	2208      	movs	r2, #8
 800b24e:	4694      	mov	ip, r2
 800b250:	2208      	movs	r2, #8
 800b252:	4690      	mov	r8, r2
 800b254:	44b8      	add	r8, r7
 800b256:	44c4      	add	ip, r8
 800b258:	4463      	add	r3, ip
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3301      	adds	r3, #1
 800b25e:	22c8      	movs	r2, #200	; 0xc8
 800b260:	18b2      	adds	r2, r6, r2
 800b262:	2108      	movs	r1, #8
 800b264:	468c      	mov	ip, r1
 800b266:	2108      	movs	r1, #8
 800b268:	4688      	mov	r8, r1
 800b26a:	44b8      	add	r8, r7
 800b26c:	44c4      	add	ip, r8
 800b26e:	4462      	add	r2, ip
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	4bb7      	ldr	r3, [pc, #732]	; (800b550 <ReadAndSetConfig+0x394>)
 800b274:	22c8      	movs	r2, #200	; 0xc8
 800b276:	189b      	adds	r3, r3, r2
 800b278:	2208      	movs	r2, #8
 800b27a:	4694      	mov	ip, r2
 800b27c:	2208      	movs	r2, #8
 800b27e:	4690      	mov	r8, r2
 800b280:	44b8      	add	r8, r7
 800b282:	44c4      	add	ip, r8
 800b284:	4463      	add	r3, ip
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2bfe      	cmp	r3, #254	; 0xfe
 800b28a:	ddae      	ble.n	800b1ea <ReadAndSetConfig+0x2e>
	}
	for (int j = 0; j < (sizeof(pcb_config) - 255); j++)
 800b28c:	2300      	movs	r3, #0
 800b28e:	2297      	movs	r2, #151	; 0x97
 800b290:	00d2      	lsls	r2, r2, #3
 800b292:	21c8      	movs	r1, #200	; 0xc8
 800b294:	1852      	adds	r2, r2, r1
 800b296:	2108      	movs	r1, #8
 800b298:	468c      	mov	ip, r1
 800b29a:	2108      	movs	r1, #8
 800b29c:	4688      	mov	r8, r1
 800b29e:	44b8      	add	r8, r7
 800b2a0:	44c4      	add	ip, r8
 800b2a2:	4462      	add	r2, ip
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	e048      	b.n	800b33a <ReadAndSetConfig+0x17e>
	{
		HAL_I2C_Mem_Read(&hi2c1, (EEPROM_C24_ADDR_READ + 2), j, 1, &buffer2[j + 255], 1, 1000);
 800b2a8:	2697      	movs	r6, #151	; 0x97
 800b2aa:	00f6      	lsls	r6, r6, #3
 800b2ac:	23c8      	movs	r3, #200	; 0xc8
 800b2ae:	18f3      	adds	r3, r6, r3
 800b2b0:	2208      	movs	r2, #8
 800b2b2:	4694      	mov	ip, r2
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	4690      	mov	r8, r2
 800b2b8:	44b8      	add	r8, r7
 800b2ba:	44c4      	add	ip, r8
 800b2bc:	4463      	add	r3, ip
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	b299      	uxth	r1, r3
 800b2c2:	23c8      	movs	r3, #200	; 0xc8
 800b2c4:	18f3      	adds	r3, r6, r3
 800b2c6:	2208      	movs	r2, #8
 800b2c8:	4694      	mov	ip, r2
 800b2ca:	2208      	movs	r2, #8
 800b2cc:	4690      	mov	r8, r2
 800b2ce:	44b8      	add	r8, r7
 800b2d0:	44c4      	add	ip, r8
 800b2d2:	4463      	add	r3, ip
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	33ff      	adds	r3, #255	; 0xff
 800b2d8:	001a      	movs	r2, r3
 800b2da:	23b8      	movs	r3, #184	; 0xb8
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	20c8      	movs	r0, #200	; 0xc8
 800b2e0:	181b      	adds	r3, r3, r0
 800b2e2:	2008      	movs	r0, #8
 800b2e4:	4684      	mov	ip, r0
 800b2e6:	2008      	movs	r0, #8
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	44b8      	add	r8, r7
 800b2ec:	44c4      	add	ip, r8
 800b2ee:	4463      	add	r3, ip
 800b2f0:	189a      	adds	r2, r3, r2
 800b2f2:	4898      	ldr	r0, [pc, #608]	; (800b554 <ReadAndSetConfig+0x398>)
 800b2f4:	23fa      	movs	r3, #250	; 0xfa
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	9302      	str	r3, [sp, #8]
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	9200      	str	r2, [sp, #0]
 800b300:	2301      	movs	r3, #1
 800b302:	000a      	movs	r2, r1
 800b304:	21a3      	movs	r1, #163	; 0xa3
 800b306:	f006 f939 	bl	801157c <HAL_I2C_Mem_Read>
		HAL_Delay(15);
 800b30a:	200f      	movs	r0, #15
 800b30c:	f004 f84c 	bl	800f3a8 <HAL_Delay>
	for (int j = 0; j < (sizeof(pcb_config) - 255); j++)
 800b310:	23c8      	movs	r3, #200	; 0xc8
 800b312:	18f3      	adds	r3, r6, r3
 800b314:	2208      	movs	r2, #8
 800b316:	4694      	mov	ip, r2
 800b318:	2208      	movs	r2, #8
 800b31a:	4690      	mov	r8, r2
 800b31c:	44b8      	add	r8, r7
 800b31e:	44c4      	add	ip, r8
 800b320:	4463      	add	r3, ip
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3301      	adds	r3, #1
 800b326:	22c8      	movs	r2, #200	; 0xc8
 800b328:	18b2      	adds	r2, r6, r2
 800b32a:	2108      	movs	r1, #8
 800b32c:	468c      	mov	ip, r1
 800b32e:	2108      	movs	r1, #8
 800b330:	4688      	mov	r8, r1
 800b332:	44b8      	add	r8, r7
 800b334:	44c4      	add	ip, r8
 800b336:	4462      	add	r2, ip
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	2397      	movs	r3, #151	; 0x97
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	22c8      	movs	r2, #200	; 0xc8
 800b340:	189b      	adds	r3, r3, r2
 800b342:	2208      	movs	r2, #8
 800b344:	4694      	mov	ip, r2
 800b346:	2208      	movs	r2, #8
 800b348:	4690      	mov	r8, r2
 800b34a:	44b8      	add	r8, r7
 800b34c:	44c4      	add	ip, r8
 800b34e:	4463      	add	r3, ip
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b6c      	cmp	r3, #108	; 0x6c
 800b354:	d9a8      	bls.n	800b2a8 <ReadAndSetConfig+0xec>
	}
	memcpy(&pcb_config_read, &buffer2, sizeof(pcb_config));
 800b356:	23b6      	movs	r3, #182	; 0xb6
 800b358:	005a      	lsls	r2, r3, #1
 800b35a:	23b8      	movs	r3, #184	; 0xb8
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	21c8      	movs	r1, #200	; 0xc8
 800b360:	185b      	adds	r3, r3, r1
 800b362:	2108      	movs	r1, #8
 800b364:	2008      	movs	r0, #8
 800b366:	1809      	adds	r1, r1, r0
 800b368:	19c9      	adds	r1, r1, r7
 800b36a:	1859      	adds	r1, r3, r1
 800b36c:	4b7a      	ldr	r3, [pc, #488]	; (800b558 <ReadAndSetConfig+0x39c>)
 800b36e:	0018      	movs	r0, r3
 800b370:	f018 fafa 	bl	8023968 <memcpy>
	HAL_Delay(20);
 800b374:	2014      	movs	r0, #20
 800b376:	f004 f817 	bl	800f3a8 <HAL_Delay>

	// If we have never written default params, write default params, else do nothing and get params from eeprom
	if (pcb_config_read.MagicNumber[2] != MAGIC)
 800b37a:	4b77      	ldr	r3, [pc, #476]	; (800b558 <ReadAndSetConfig+0x39c>)
 800b37c:	789b      	ldrb	r3, [r3, #2]
 800b37e:	2bdc      	cmp	r3, #220	; 0xdc
 800b380:	d100      	bne.n	800b384 <ReadAndSetConfig+0x1c8>
 800b382:	e1b5      	b.n	800b6f0 <ReadAndSetConfig+0x534>
	{
		// Write the default config into the eeprom
		memcpy(buffer, vptr_test, sizeof(pcb_config));
 800b384:	4b70      	ldr	r3, [pc, #448]	; (800b548 <ReadAndSetConfig+0x38c>)
 800b386:	6819      	ldr	r1, [r3, #0]
 800b388:	23b6      	movs	r3, #182	; 0xb6
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	22c0      	movs	r2, #192	; 0xc0
 800b38e:	0092      	lsls	r2, r2, #2
 800b390:	20c8      	movs	r0, #200	; 0xc8
 800b392:	1812      	adds	r2, r2, r0
 800b394:	2008      	movs	r0, #8
 800b396:	2608      	movs	r6, #8
 800b398:	1980      	adds	r0, r0, r6
 800b39a:	19c0      	adds	r0, r0, r7
 800b39c:	1810      	adds	r0, r2, r0
 800b39e:	001a      	movs	r2, r3
 800b3a0:	f018 fae2 	bl	8023968 <memcpy>

		// HAL_I2C_Mem_Write(&hi2c1, EEPROM_C24_ADDR_WRITE, 0x0, 1, &buffer[0], 1, 1000);
		// HAL_I2C_Mem_Write(&hi2c1, EEPROM_C24_ADDR_WRITE, 0x1, 1, &buffer[1], 1, 1000);
		for (int i = 0; i < 255; i++)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4a6d      	ldr	r2, [pc, #436]	; (800b55c <ReadAndSetConfig+0x3a0>)
 800b3a8:	21c8      	movs	r1, #200	; 0xc8
 800b3aa:	1852      	adds	r2, r2, r1
 800b3ac:	2108      	movs	r1, #8
 800b3ae:	468c      	mov	ip, r1
 800b3b0:	2108      	movs	r1, #8
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	44b8      	add	r8, r7
 800b3b6:	44c4      	add	ip, r8
 800b3b8:	4462      	add	r2, ip
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	e043      	b.n	800b446 <ReadAndSetConfig+0x28a>
		{
			HAL_I2C_Mem_Write(&hi2c1, EEPROM_C24_ADDR_WRITE, i, 1, &buffer[i], 1, 1000);
 800b3be:	4e67      	ldr	r6, [pc, #412]	; (800b55c <ReadAndSetConfig+0x3a0>)
 800b3c0:	23c8      	movs	r3, #200	; 0xc8
 800b3c2:	18f3      	adds	r3, r6, r3
 800b3c4:	2208      	movs	r2, #8
 800b3c6:	4694      	mov	ip, r2
 800b3c8:	2208      	movs	r2, #8
 800b3ca:	4690      	mov	r8, r2
 800b3cc:	44b8      	add	r8, r7
 800b3ce:	44c4      	add	ip, r8
 800b3d0:	4463      	add	r3, ip
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	b299      	uxth	r1, r3
 800b3d6:	23c0      	movs	r3, #192	; 0xc0
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	22c8      	movs	r2, #200	; 0xc8
 800b3dc:	189b      	adds	r3, r3, r2
 800b3de:	2208      	movs	r2, #8
 800b3e0:	2008      	movs	r0, #8
 800b3e2:	1812      	adds	r2, r2, r0
 800b3e4:	19d2      	adds	r2, r2, r7
 800b3e6:	189a      	adds	r2, r3, r2
 800b3e8:	23c8      	movs	r3, #200	; 0xc8
 800b3ea:	18f3      	adds	r3, r6, r3
 800b3ec:	2008      	movs	r0, #8
 800b3ee:	4684      	mov	ip, r0
 800b3f0:	2008      	movs	r0, #8
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	44b8      	add	r8, r7
 800b3f6:	44c4      	add	ip, r8
 800b3f8:	4463      	add	r3, ip
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	18d2      	adds	r2, r2, r3
 800b3fe:	4855      	ldr	r0, [pc, #340]	; (800b554 <ReadAndSetConfig+0x398>)
 800b400:	23fa      	movs	r3, #250	; 0xfa
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	9302      	str	r3, [sp, #8]
 800b406:	2301      	movs	r3, #1
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	9200      	str	r2, [sp, #0]
 800b40c:	2301      	movs	r3, #1
 800b40e:	000a      	movs	r2, r1
 800b410:	21a0      	movs	r1, #160	; 0xa0
 800b412:	f005 ff85 	bl	8011320 <HAL_I2C_Mem_Write>
			HAL_Delay(15);
 800b416:	200f      	movs	r0, #15
 800b418:	f003 ffc6 	bl	800f3a8 <HAL_Delay>
		for (int i = 0; i < 255; i++)
 800b41c:	23c8      	movs	r3, #200	; 0xc8
 800b41e:	18f3      	adds	r3, r6, r3
 800b420:	2208      	movs	r2, #8
 800b422:	4694      	mov	ip, r2
 800b424:	2208      	movs	r2, #8
 800b426:	4690      	mov	r8, r2
 800b428:	44b8      	add	r8, r7
 800b42a:	44c4      	add	ip, r8
 800b42c:	4463      	add	r3, ip
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	22c8      	movs	r2, #200	; 0xc8
 800b434:	18b2      	adds	r2, r6, r2
 800b436:	2108      	movs	r1, #8
 800b438:	468c      	mov	ip, r1
 800b43a:	2108      	movs	r1, #8
 800b43c:	4688      	mov	r8, r1
 800b43e:	44b8      	add	r8, r7
 800b440:	44c4      	add	ip, r8
 800b442:	4462      	add	r2, ip
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	4b45      	ldr	r3, [pc, #276]	; (800b55c <ReadAndSetConfig+0x3a0>)
 800b448:	22c8      	movs	r2, #200	; 0xc8
 800b44a:	189b      	adds	r3, r3, r2
 800b44c:	2208      	movs	r2, #8
 800b44e:	4694      	mov	ip, r2
 800b450:	2208      	movs	r2, #8
 800b452:	4690      	mov	r8, r2
 800b454:	44b8      	add	r8, r7
 800b456:	44c4      	add	ip, r8
 800b458:	4463      	add	r3, ip
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2bfe      	cmp	r3, #254	; 0xfe
 800b45e:	ddae      	ble.n	800b3be <ReadAndSetConfig+0x202>
		}
		for (int i = 0; i < (sizeof(pcb_config) - 255); i++)
 800b460:	2300      	movs	r3, #0
 800b462:	2296      	movs	r2, #150	; 0x96
 800b464:	00d2      	lsls	r2, r2, #3
 800b466:	21c8      	movs	r1, #200	; 0xc8
 800b468:	1852      	adds	r2, r2, r1
 800b46a:	2108      	movs	r1, #8
 800b46c:	468c      	mov	ip, r1
 800b46e:	2108      	movs	r1, #8
 800b470:	4688      	mov	r8, r1
 800b472:	44b8      	add	r8, r7
 800b474:	44c4      	add	ip, r8
 800b476:	4462      	add	r2, ip
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	e048      	b.n	800b50e <ReadAndSetConfig+0x352>
		{
			HAL_I2C_Mem_Write(&hi2c1, (EEPROM_C24_ADDR_WRITE + 2), i, 1, &buffer[i + 255], 1, 1000);
 800b47c:	2696      	movs	r6, #150	; 0x96
 800b47e:	00f6      	lsls	r6, r6, #3
 800b480:	23c8      	movs	r3, #200	; 0xc8
 800b482:	18f3      	adds	r3, r6, r3
 800b484:	2208      	movs	r2, #8
 800b486:	4694      	mov	ip, r2
 800b488:	2208      	movs	r2, #8
 800b48a:	4690      	mov	r8, r2
 800b48c:	44b8      	add	r8, r7
 800b48e:	44c4      	add	ip, r8
 800b490:	4463      	add	r3, ip
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	b299      	uxth	r1, r3
 800b496:	23c8      	movs	r3, #200	; 0xc8
 800b498:	18f3      	adds	r3, r6, r3
 800b49a:	2208      	movs	r2, #8
 800b49c:	4694      	mov	ip, r2
 800b49e:	2208      	movs	r2, #8
 800b4a0:	4690      	mov	r8, r2
 800b4a2:	44b8      	add	r8, r7
 800b4a4:	44c4      	add	ip, r8
 800b4a6:	4463      	add	r3, ip
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	33ff      	adds	r3, #255	; 0xff
 800b4ac:	001a      	movs	r2, r3
 800b4ae:	23c0      	movs	r3, #192	; 0xc0
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	20c8      	movs	r0, #200	; 0xc8
 800b4b4:	181b      	adds	r3, r3, r0
 800b4b6:	2008      	movs	r0, #8
 800b4b8:	4684      	mov	ip, r0
 800b4ba:	2008      	movs	r0, #8
 800b4bc:	4680      	mov	r8, r0
 800b4be:	44b8      	add	r8, r7
 800b4c0:	44c4      	add	ip, r8
 800b4c2:	4463      	add	r3, ip
 800b4c4:	189a      	adds	r2, r3, r2
 800b4c6:	4823      	ldr	r0, [pc, #140]	; (800b554 <ReadAndSetConfig+0x398>)
 800b4c8:	23fa      	movs	r3, #250	; 0xfa
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	9200      	str	r2, [sp, #0]
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	000a      	movs	r2, r1
 800b4d8:	21a2      	movs	r1, #162	; 0xa2
 800b4da:	f005 ff21 	bl	8011320 <HAL_I2C_Mem_Write>
			HAL_Delay(15);
 800b4de:	200f      	movs	r0, #15
 800b4e0:	f003 ff62 	bl	800f3a8 <HAL_Delay>
		for (int i = 0; i < (sizeof(pcb_config) - 255); i++)
 800b4e4:	23c8      	movs	r3, #200	; 0xc8
 800b4e6:	18f3      	adds	r3, r6, r3
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	4694      	mov	ip, r2
 800b4ec:	2208      	movs	r2, #8
 800b4ee:	4690      	mov	r8, r2
 800b4f0:	44b8      	add	r8, r7
 800b4f2:	44c4      	add	ip, r8
 800b4f4:	4463      	add	r3, ip
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	22c8      	movs	r2, #200	; 0xc8
 800b4fc:	18b2      	adds	r2, r6, r2
 800b4fe:	2108      	movs	r1, #8
 800b500:	468c      	mov	ip, r1
 800b502:	2108      	movs	r1, #8
 800b504:	4688      	mov	r8, r1
 800b506:	44b8      	add	r8, r7
 800b508:	44c4      	add	ip, r8
 800b50a:	4462      	add	r2, ip
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	2396      	movs	r3, #150	; 0x96
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	22c8      	movs	r2, #200	; 0xc8
 800b514:	189b      	adds	r3, r3, r2
 800b516:	2208      	movs	r2, #8
 800b518:	4694      	mov	ip, r2
 800b51a:	2208      	movs	r2, #8
 800b51c:	4690      	mov	r8, r2
 800b51e:	44b8      	add	r8, r7
 800b520:	44c4      	add	ip, r8
 800b522:	4463      	add	r3, ip
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b6c      	cmp	r3, #108	; 0x6c
 800b528:	d9a8      	bls.n	800b47c <ReadAndSetConfig+0x2c0>
		}

		// Read the config
		for (int j = 0; j < 255; j++)
 800b52a:	2300      	movs	r3, #0
 800b52c:	4a0c      	ldr	r2, [pc, #48]	; (800b560 <ReadAndSetConfig+0x3a4>)
 800b52e:	21c8      	movs	r1, #200	; 0xc8
 800b530:	1852      	adds	r2, r2, r1
 800b532:	2108      	movs	r1, #8
 800b534:	468c      	mov	ip, r1
 800b536:	2108      	movs	r1, #8
 800b538:	4688      	mov	r8, r1
 800b53a:	44b8      	add	r8, r7
 800b53c:	44c4      	add	ip, r8
 800b53e:	4462      	add	r2, ip
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	e053      	b.n	800b5ec <ReadAndSetConfig+0x430>
 800b544:	fffffa54 	.word	0xfffffa54
 800b548:	20006d88 	.word	0x20006d88
 800b54c:	20006db4 	.word	0x20006db4
 800b550:	000004bc 	.word	0x000004bc
 800b554:	20006914 	.word	0x20006914
 800b558:	20006be4 	.word	0x20006be4
 800b55c:	000004b4 	.word	0x000004b4
 800b560:	000004ac 	.word	0x000004ac
		{
			HAL_I2C_Mem_Read(&hi2c1, EEPROM_C24_ADDR_READ, j, 1, &buffer2[j], 1, 1000);
 800b564:	4ebe      	ldr	r6, [pc, #760]	; (800b860 <ReadAndSetConfig+0x6a4>)
 800b566:	23c8      	movs	r3, #200	; 0xc8
 800b568:	18f3      	adds	r3, r6, r3
 800b56a:	2208      	movs	r2, #8
 800b56c:	4694      	mov	ip, r2
 800b56e:	2208      	movs	r2, #8
 800b570:	4690      	mov	r8, r2
 800b572:	44b8      	add	r8, r7
 800b574:	44c4      	add	ip, r8
 800b576:	4463      	add	r3, ip
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	b299      	uxth	r1, r3
 800b57c:	23b8      	movs	r3, #184	; 0xb8
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	22c8      	movs	r2, #200	; 0xc8
 800b582:	189b      	adds	r3, r3, r2
 800b584:	2208      	movs	r2, #8
 800b586:	2008      	movs	r0, #8
 800b588:	1812      	adds	r2, r2, r0
 800b58a:	19d2      	adds	r2, r2, r7
 800b58c:	189a      	adds	r2, r3, r2
 800b58e:	23c8      	movs	r3, #200	; 0xc8
 800b590:	18f3      	adds	r3, r6, r3
 800b592:	2008      	movs	r0, #8
 800b594:	4684      	mov	ip, r0
 800b596:	2008      	movs	r0, #8
 800b598:	4680      	mov	r8, r0
 800b59a:	44b8      	add	r8, r7
 800b59c:	44c4      	add	ip, r8
 800b59e:	4463      	add	r3, ip
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	18d2      	adds	r2, r2, r3
 800b5a4:	48af      	ldr	r0, [pc, #700]	; (800b864 <ReadAndSetConfig+0x6a8>)
 800b5a6:	23fa      	movs	r3, #250	; 0xfa
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	9302      	str	r3, [sp, #8]
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	9301      	str	r3, [sp, #4]
 800b5b0:	9200      	str	r2, [sp, #0]
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	000a      	movs	r2, r1
 800b5b6:	21a1      	movs	r1, #161	; 0xa1
 800b5b8:	f005 ffe0 	bl	801157c <HAL_I2C_Mem_Read>
			HAL_Delay(15);
 800b5bc:	200f      	movs	r0, #15
 800b5be:	f003 fef3 	bl	800f3a8 <HAL_Delay>
		for (int j = 0; j < 255; j++)
 800b5c2:	23c8      	movs	r3, #200	; 0xc8
 800b5c4:	18f3      	adds	r3, r6, r3
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	4694      	mov	ip, r2
 800b5ca:	2208      	movs	r2, #8
 800b5cc:	4690      	mov	r8, r2
 800b5ce:	44b8      	add	r8, r7
 800b5d0:	44c4      	add	ip, r8
 800b5d2:	4463      	add	r3, ip
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	22c8      	movs	r2, #200	; 0xc8
 800b5da:	18b2      	adds	r2, r6, r2
 800b5dc:	2108      	movs	r1, #8
 800b5de:	468c      	mov	ip, r1
 800b5e0:	2108      	movs	r1, #8
 800b5e2:	4688      	mov	r8, r1
 800b5e4:	44b8      	add	r8, r7
 800b5e6:	44c4      	add	ip, r8
 800b5e8:	4462      	add	r2, ip
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	4b9c      	ldr	r3, [pc, #624]	; (800b860 <ReadAndSetConfig+0x6a4>)
 800b5ee:	22c8      	movs	r2, #200	; 0xc8
 800b5f0:	189b      	adds	r3, r3, r2
 800b5f2:	2208      	movs	r2, #8
 800b5f4:	4694      	mov	ip, r2
 800b5f6:	2208      	movs	r2, #8
 800b5f8:	4690      	mov	r8, r2
 800b5fa:	44b8      	add	r8, r7
 800b5fc:	44c4      	add	ip, r8
 800b5fe:	4463      	add	r3, ip
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2bfe      	cmp	r3, #254	; 0xfe
 800b604:	ddae      	ble.n	800b564 <ReadAndSetConfig+0x3a8>
		}
		for (int j = 0; j < (sizeof(pcb_config) - 255); j++)
 800b606:	2300      	movs	r3, #0
 800b608:	2295      	movs	r2, #149	; 0x95
 800b60a:	00d2      	lsls	r2, r2, #3
 800b60c:	21c8      	movs	r1, #200	; 0xc8
 800b60e:	1852      	adds	r2, r2, r1
 800b610:	2108      	movs	r1, #8
 800b612:	468c      	mov	ip, r1
 800b614:	2108      	movs	r1, #8
 800b616:	4688      	mov	r8, r1
 800b618:	44b8      	add	r8, r7
 800b61a:	44c4      	add	ip, r8
 800b61c:	4462      	add	r2, ip
 800b61e:	6013      	str	r3, [r2, #0]
 800b620:	e048      	b.n	800b6b4 <ReadAndSetConfig+0x4f8>
		{
			HAL_I2C_Mem_Read(&hi2c1, (EEPROM_C24_ADDR_READ + 2), j, 1, &buffer2[j + 255], 1, 1000);
 800b622:	2695      	movs	r6, #149	; 0x95
 800b624:	00f6      	lsls	r6, r6, #3
 800b626:	23c8      	movs	r3, #200	; 0xc8
 800b628:	18f3      	adds	r3, r6, r3
 800b62a:	2208      	movs	r2, #8
 800b62c:	4694      	mov	ip, r2
 800b62e:	2208      	movs	r2, #8
 800b630:	4690      	mov	r8, r2
 800b632:	44b8      	add	r8, r7
 800b634:	44c4      	add	ip, r8
 800b636:	4463      	add	r3, ip
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	b299      	uxth	r1, r3
 800b63c:	23c8      	movs	r3, #200	; 0xc8
 800b63e:	18f3      	adds	r3, r6, r3
 800b640:	2208      	movs	r2, #8
 800b642:	4694      	mov	ip, r2
 800b644:	2208      	movs	r2, #8
 800b646:	4690      	mov	r8, r2
 800b648:	44b8      	add	r8, r7
 800b64a:	44c4      	add	ip, r8
 800b64c:	4463      	add	r3, ip
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	33ff      	adds	r3, #255	; 0xff
 800b652:	001a      	movs	r2, r3
 800b654:	23b8      	movs	r3, #184	; 0xb8
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	20c8      	movs	r0, #200	; 0xc8
 800b65a:	181b      	adds	r3, r3, r0
 800b65c:	2008      	movs	r0, #8
 800b65e:	4684      	mov	ip, r0
 800b660:	2008      	movs	r0, #8
 800b662:	4680      	mov	r8, r0
 800b664:	44b8      	add	r8, r7
 800b666:	44c4      	add	ip, r8
 800b668:	4463      	add	r3, ip
 800b66a:	189a      	adds	r2, r3, r2
 800b66c:	487d      	ldr	r0, [pc, #500]	; (800b864 <ReadAndSetConfig+0x6a8>)
 800b66e:	23fa      	movs	r3, #250	; 0xfa
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	9302      	str	r3, [sp, #8]
 800b674:	2301      	movs	r3, #1
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	9200      	str	r2, [sp, #0]
 800b67a:	2301      	movs	r3, #1
 800b67c:	000a      	movs	r2, r1
 800b67e:	21a3      	movs	r1, #163	; 0xa3
 800b680:	f005 ff7c 	bl	801157c <HAL_I2C_Mem_Read>
			HAL_Delay(15);
 800b684:	200f      	movs	r0, #15
 800b686:	f003 fe8f 	bl	800f3a8 <HAL_Delay>
		for (int j = 0; j < (sizeof(pcb_config) - 255); j++)
 800b68a:	23c8      	movs	r3, #200	; 0xc8
 800b68c:	18f3      	adds	r3, r6, r3
 800b68e:	2208      	movs	r2, #8
 800b690:	4694      	mov	ip, r2
 800b692:	2208      	movs	r2, #8
 800b694:	4690      	mov	r8, r2
 800b696:	44b8      	add	r8, r7
 800b698:	44c4      	add	ip, r8
 800b69a:	4463      	add	r3, ip
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	22c8      	movs	r2, #200	; 0xc8
 800b6a2:	18b2      	adds	r2, r6, r2
 800b6a4:	2108      	movs	r1, #8
 800b6a6:	468c      	mov	ip, r1
 800b6a8:	2108      	movs	r1, #8
 800b6aa:	4688      	mov	r8, r1
 800b6ac:	44b8      	add	r8, r7
 800b6ae:	44c4      	add	ip, r8
 800b6b0:	4462      	add	r2, ip
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	2395      	movs	r3, #149	; 0x95
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	22c8      	movs	r2, #200	; 0xc8
 800b6ba:	189b      	adds	r3, r3, r2
 800b6bc:	2208      	movs	r2, #8
 800b6be:	4694      	mov	ip, r2
 800b6c0:	2208      	movs	r2, #8
 800b6c2:	4690      	mov	r8, r2
 800b6c4:	44b8      	add	r8, r7
 800b6c6:	44c4      	add	ip, r8
 800b6c8:	4463      	add	r3, ip
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b6c      	cmp	r3, #108	; 0x6c
 800b6ce:	d9a8      	bls.n	800b622 <ReadAndSetConfig+0x466>
		//				  {
		//					  HAL_I2C_Mem_Read (&hi2c1, EEPROM_C24_ADDR_READ, (j<<4), 1, &buffer2[16*j], 16, 1000); //read 16 bytes * 18 pages  = 288 bytes
		//					  HAL_Delay(50);
		//				  }

		memcpy(&pcb_config_read, &buffer2, sizeof(pcb_config));
 800b6d0:	23b6      	movs	r3, #182	; 0xb6
 800b6d2:	005a      	lsls	r2, r3, #1
 800b6d4:	23b8      	movs	r3, #184	; 0xb8
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	21c8      	movs	r1, #200	; 0xc8
 800b6da:	185b      	adds	r3, r3, r1
 800b6dc:	2108      	movs	r1, #8
 800b6de:	2008      	movs	r0, #8
 800b6e0:	1809      	adds	r1, r1, r0
 800b6e2:	19c9      	adds	r1, r1, r7
 800b6e4:	1859      	adds	r1, r3, r1
 800b6e6:	4b60      	ldr	r3, [pc, #384]	; (800b868 <ReadAndSetConfig+0x6ac>)
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f018 f93d 	bl	8023968 <memcpy>
 800b6ee:	e008      	b.n	800b702 <ReadAndSetConfig+0x546>
	}
	else

		memcpy(&pcb_config, &pcb_config_read, sizeof(pcb_config));
 800b6f0:	4a5e      	ldr	r2, [pc, #376]	; (800b86c <ReadAndSetConfig+0x6b0>)
 800b6f2:	4b5d      	ldr	r3, [pc, #372]	; (800b868 <ReadAndSetConfig+0x6ac>)
 800b6f4:	0010      	movs	r0, r2
 800b6f6:	0019      	movs	r1, r3
 800b6f8:	23b6      	movs	r3, #182	; 0xb6
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	001a      	movs	r2, r3
 800b6fe:	f018 f933 	bl	8023968 <memcpy>

	tv_type = pcb_config.tvtype[0] - '0';
 800b702:	4a5a      	ldr	r2, [pc, #360]	; (800b86c <ReadAndSetConfig+0x6b0>)
 800b704:	23f2      	movs	r3, #242	; 0xf2
 800b706:	5cd3      	ldrb	r3, [r2, r3]
 800b708:	3b30      	subs	r3, #48	; 0x30
 800b70a:	001a      	movs	r2, r3
 800b70c:	4b58      	ldr	r3, [pc, #352]	; (800b870 <ReadAndSetConfig+0x6b4>)
 800b70e:	601a      	str	r2, [r3, #0]
	struct PCB_Config copy_config;
	memcpy(&copy_config, &pcb_config, sizeof(pcb_config));
 800b710:	4b58      	ldr	r3, [pc, #352]	; (800b874 <ReadAndSetConfig+0x6b8>)
 800b712:	2298      	movs	r2, #152	; 0x98
 800b714:	00d2      	lsls	r2, r2, #3
 800b716:	189b      	adds	r3, r3, r2
 800b718:	22c8      	movs	r2, #200	; 0xc8
 800b71a:	2108      	movs	r1, #8
 800b71c:	1852      	adds	r2, r2, r1
 800b71e:	2108      	movs	r1, #8
 800b720:	468c      	mov	ip, r1
 800b722:	44bc      	add	ip, r7
 800b724:	4462      	add	r2, ip
 800b726:	189a      	adds	r2, r3, r2
 800b728:	4b50      	ldr	r3, [pc, #320]	; (800b86c <ReadAndSetConfig+0x6b0>)
 800b72a:	0010      	movs	r0, r2
 800b72c:	0019      	movs	r1, r3
 800b72e:	23b6      	movs	r3, #182	; 0xb6
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	001a      	movs	r2, r3
 800b734:	f018 f918 	bl	8023968 <memcpy>
	switch (tv_type)
 800b738:	4b4d      	ldr	r3, [pc, #308]	; (800b870 <ReadAndSetConfig+0x6b4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d100      	bne.n	800b742 <ReadAndSetConfig+0x586>
 800b740:	e1a7      	b.n	800ba92 <ReadAndSetConfig+0x8d6>
 800b742:	2b03      	cmp	r3, #3
 800b744:	d101      	bne.n	800b74a <ReadAndSetConfig+0x58e>
 800b746:	f000 fcca 	bl	800c0de <ReadAndSetConfig+0xf22>
	case 1: // Samsung
	case 4: // RC5
	case 5:
	case 6:
	default:
		to_hex(copy_config.sSetIR, 0);
 800b74a:	23cc      	movs	r3, #204	; 0xcc
 800b74c:	2208      	movs	r2, #8
 800b74e:	189b      	adds	r3, r3, r2
 800b750:	2208      	movs	r2, #8
 800b752:	4694      	mov	ip, r2
 800b754:	44bc      	add	ip, r7
 800b756:	4463      	add	r3, ip
 800b758:	3304      	adds	r3, #4
 800b75a:	2100      	movs	r1, #0
 800b75c:	0018      	movs	r0, r3
 800b75e:	f00d fa23 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 4; i++)
 800b762:	2300      	movs	r3, #0
 800b764:	4a44      	ldr	r2, [pc, #272]	; (800b878 <ReadAndSetConfig+0x6bc>)
 800b766:	21c8      	movs	r1, #200	; 0xc8
 800b768:	1852      	adds	r2, r2, r1
 800b76a:	2108      	movs	r1, #8
 800b76c:	468c      	mov	ip, r1
 800b76e:	2108      	movs	r1, #8
 800b770:	4688      	mov	r8, r1
 800b772:	44b8      	add	r8, r7
 800b774:	44c4      	add	ip, r8
 800b776:	4462      	add	r2, ip
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	e049      	b.n	800b810 <ReadAndSetConfig+0x654>
			copy_config.sSetIR[i] = copy_config.sSetIR[2 * i + 1];
 800b77c:	483e      	ldr	r0, [pc, #248]	; (800b878 <ReadAndSetConfig+0x6bc>)
 800b77e:	23c8      	movs	r3, #200	; 0xc8
 800b780:	18c3      	adds	r3, r0, r3
 800b782:	2208      	movs	r2, #8
 800b784:	4694      	mov	ip, r2
 800b786:	2208      	movs	r2, #8
 800b788:	4690      	mov	r8, r2
 800b78a:	44b8      	add	r8, r7
 800b78c:	44c4      	add	ip, r8
 800b78e:	4463      	add	r3, ip
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	3301      	adds	r3, #1
 800b796:	4a37      	ldr	r2, [pc, #220]	; (800b874 <ReadAndSetConfig+0x6b8>)
 800b798:	2498      	movs	r4, #152	; 0x98
 800b79a:	00e4      	lsls	r4, r4, #3
 800b79c:	1912      	adds	r2, r2, r4
 800b79e:	21c8      	movs	r1, #200	; 0xc8
 800b7a0:	468c      	mov	ip, r1
 800b7a2:	2108      	movs	r1, #8
 800b7a4:	4688      	mov	r8, r1
 800b7a6:	2108      	movs	r1, #8
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	44b9      	add	r9, r7
 800b7ac:	44c8      	add	r8, r9
 800b7ae:	44c4      	add	ip, r8
 800b7b0:	4462      	add	r2, ip
 800b7b2:	18d3      	adds	r3, r2, r3
 800b7b4:	7919      	ldrb	r1, [r3, #4]
 800b7b6:	4b2f      	ldr	r3, [pc, #188]	; (800b874 <ReadAndSetConfig+0x6b8>)
 800b7b8:	191b      	adds	r3, r3, r4
 800b7ba:	22c8      	movs	r2, #200	; 0xc8
 800b7bc:	2408      	movs	r4, #8
 800b7be:	1912      	adds	r2, r2, r4
 800b7c0:	2408      	movs	r4, #8
 800b7c2:	46a4      	mov	ip, r4
 800b7c4:	44bc      	add	ip, r7
 800b7c6:	4462      	add	r2, ip
 800b7c8:	189a      	adds	r2, r3, r2
 800b7ca:	23c8      	movs	r3, #200	; 0xc8
 800b7cc:	18c3      	adds	r3, r0, r3
 800b7ce:	2408      	movs	r4, #8
 800b7d0:	46a4      	mov	ip, r4
 800b7d2:	2408      	movs	r4, #8
 800b7d4:	46a0      	mov	r8, r4
 800b7d6:	44b8      	add	r8, r7
 800b7d8:	44c4      	add	ip, r8
 800b7da:	4463      	add	r3, ip
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	18d3      	adds	r3, r2, r3
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	1c0a      	adds	r2, r1, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
 800b7e6:	23c8      	movs	r3, #200	; 0xc8
 800b7e8:	18c3      	adds	r3, r0, r3
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	4694      	mov	ip, r2
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	4690      	mov	r8, r2
 800b7f2:	44b8      	add	r8, r7
 800b7f4:	44c4      	add	ip, r8
 800b7f6:	4463      	add	r3, ip
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	22c8      	movs	r2, #200	; 0xc8
 800b7fe:	1882      	adds	r2, r0, r2
 800b800:	2108      	movs	r1, #8
 800b802:	468c      	mov	ip, r1
 800b804:	2108      	movs	r1, #8
 800b806:	4688      	mov	r8, r1
 800b808:	44b8      	add	r8, r7
 800b80a:	44c4      	add	ip, r8
 800b80c:	4462      	add	r2, ip
 800b80e:	6013      	str	r3, [r2, #0]
 800b810:	4b19      	ldr	r3, [pc, #100]	; (800b878 <ReadAndSetConfig+0x6bc>)
 800b812:	22c8      	movs	r2, #200	; 0xc8
 800b814:	189b      	adds	r3, r3, r2
 800b816:	2208      	movs	r2, #8
 800b818:	4694      	mov	ip, r2
 800b81a:	2208      	movs	r2, #8
 800b81c:	4690      	mov	r8, r2
 800b81e:	44b8      	add	r8, r7
 800b820:	44c4      	add	ip, r8
 800b822:	4463      	add	r3, ip
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b03      	cmp	r3, #3
 800b828:	dda8      	ble.n	800b77c <ReadAndSetConfig+0x5c0>
		to_hex(copy_config.sSetIROFF, 0);
 800b82a:	23cc      	movs	r3, #204	; 0xcc
 800b82c:	2208      	movs	r2, #8
 800b82e:	189b      	adds	r3, r3, r2
 800b830:	2208      	movs	r2, #8
 800b832:	4694      	mov	ip, r2
 800b834:	44bc      	add	ip, r7
 800b836:	4463      	add	r3, ip
 800b838:	3313      	adds	r3, #19
 800b83a:	2100      	movs	r1, #0
 800b83c:	0018      	movs	r0, r3
 800b83e:	f00d f9b3 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 4; i++)
 800b842:	2300      	movs	r3, #0
 800b844:	2294      	movs	r2, #148	; 0x94
 800b846:	00d2      	lsls	r2, r2, #3
 800b848:	21c8      	movs	r1, #200	; 0xc8
 800b84a:	1852      	adds	r2, r2, r1
 800b84c:	2108      	movs	r1, #8
 800b84e:	468c      	mov	ip, r1
 800b850:	2108      	movs	r1, #8
 800b852:	4688      	mov	r8, r1
 800b854:	44b8      	add	r8, r7
 800b856:	44c4      	add	ip, r8
 800b858:	4462      	add	r2, ip
 800b85a:	6013      	str	r3, [r2, #0]
 800b85c:	e059      	b.n	800b912 <ReadAndSetConfig+0x756>
 800b85e:	46c0      	nop			; (mov r8, r8)
 800b860:	000004ac 	.word	0x000004ac
 800b864:	20006914 	.word	0x20006914
 800b868:	20006be4 	.word	0x20006be4
 800b86c:	20006db4 	.word	0x20006db4
 800b870:	20005018 	.word	0x20005018
 800b874:	fffffb44 	.word	0xfffffb44
 800b878:	000004a4 	.word	0x000004a4
			copy_config.sSetIROFF[i] = copy_config.sSetIROFF[2 * i + 1];
 800b87c:	2094      	movs	r0, #148	; 0x94
 800b87e:	00c0      	lsls	r0, r0, #3
 800b880:	23c8      	movs	r3, #200	; 0xc8
 800b882:	18c3      	adds	r3, r0, r3
 800b884:	2208      	movs	r2, #8
 800b886:	4694      	mov	ip, r2
 800b888:	2208      	movs	r2, #8
 800b88a:	4690      	mov	r8, r2
 800b88c:	44b8      	add	r8, r7
 800b88e:	44c4      	add	ip, r8
 800b890:	4463      	add	r3, ip
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	005b      	lsls	r3, r3, #1
 800b896:	3301      	adds	r3, #1
 800b898:	4ac3      	ldr	r2, [pc, #780]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b89a:	2498      	movs	r4, #152	; 0x98
 800b89c:	00e4      	lsls	r4, r4, #3
 800b89e:	1912      	adds	r2, r2, r4
 800b8a0:	21c8      	movs	r1, #200	; 0xc8
 800b8a2:	468c      	mov	ip, r1
 800b8a4:	2108      	movs	r1, #8
 800b8a6:	4688      	mov	r8, r1
 800b8a8:	2108      	movs	r1, #8
 800b8aa:	4689      	mov	r9, r1
 800b8ac:	44b9      	add	r9, r7
 800b8ae:	44c8      	add	r8, r9
 800b8b0:	44c4      	add	ip, r8
 800b8b2:	4462      	add	r2, ip
 800b8b4:	18d3      	adds	r3, r2, r3
 800b8b6:	7cd9      	ldrb	r1, [r3, #19]
 800b8b8:	4bbb      	ldr	r3, [pc, #748]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b8ba:	191b      	adds	r3, r3, r4
 800b8bc:	22c8      	movs	r2, #200	; 0xc8
 800b8be:	2408      	movs	r4, #8
 800b8c0:	1912      	adds	r2, r2, r4
 800b8c2:	2408      	movs	r4, #8
 800b8c4:	46a4      	mov	ip, r4
 800b8c6:	44bc      	add	ip, r7
 800b8c8:	4462      	add	r2, ip
 800b8ca:	189a      	adds	r2, r3, r2
 800b8cc:	23c8      	movs	r3, #200	; 0xc8
 800b8ce:	18c3      	adds	r3, r0, r3
 800b8d0:	2408      	movs	r4, #8
 800b8d2:	46a4      	mov	ip, r4
 800b8d4:	2408      	movs	r4, #8
 800b8d6:	46a0      	mov	r8, r4
 800b8d8:	44b8      	add	r8, r7
 800b8da:	44c4      	add	ip, r8
 800b8dc:	4463      	add	r3, ip
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	18d3      	adds	r3, r2, r3
 800b8e2:	3313      	adds	r3, #19
 800b8e4:	1c0a      	adds	r2, r1, #0
 800b8e6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
 800b8e8:	23c8      	movs	r3, #200	; 0xc8
 800b8ea:	18c3      	adds	r3, r0, r3
 800b8ec:	2208      	movs	r2, #8
 800b8ee:	4694      	mov	ip, r2
 800b8f0:	2208      	movs	r2, #8
 800b8f2:	4690      	mov	r8, r2
 800b8f4:	44b8      	add	r8, r7
 800b8f6:	44c4      	add	ip, r8
 800b8f8:	4463      	add	r3, ip
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	22c8      	movs	r2, #200	; 0xc8
 800b900:	1882      	adds	r2, r0, r2
 800b902:	2108      	movs	r1, #8
 800b904:	468c      	mov	ip, r1
 800b906:	2108      	movs	r1, #8
 800b908:	4688      	mov	r8, r1
 800b90a:	44b8      	add	r8, r7
 800b90c:	44c4      	add	ip, r8
 800b90e:	4462      	add	r2, ip
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	2394      	movs	r3, #148	; 0x94
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	22c8      	movs	r2, #200	; 0xc8
 800b918:	189b      	adds	r3, r3, r2
 800b91a:	2208      	movs	r2, #8
 800b91c:	4694      	mov	ip, r2
 800b91e:	2208      	movs	r2, #8
 800b920:	4690      	mov	r8, r2
 800b922:	44b8      	add	r8, r7
 800b924:	44c4      	add	ip, r8
 800b926:	4463      	add	r3, ip
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	dda6      	ble.n	800b87c <ReadAndSetConfig+0x6c0>

		code_ON[0] = ((uint32_t)(copy_config.sSetIR[0]) << 24) + ((uint32_t)(copy_config.sSetIR[1]) << 16) + ((uint32_t)(copy_config.sSetIR[2]) << 8) + copy_config.sSetIR[3]; // full_ir_code_from_db;//
 800b92e:	4b9e      	ldr	r3, [pc, #632]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b930:	2098      	movs	r0, #152	; 0x98
 800b932:	00c0      	lsls	r0, r0, #3
 800b934:	181b      	adds	r3, r3, r0
 800b936:	22c8      	movs	r2, #200	; 0xc8
 800b938:	4694      	mov	ip, r2
 800b93a:	2208      	movs	r2, #8
 800b93c:	4690      	mov	r8, r2
 800b93e:	2208      	movs	r2, #8
 800b940:	4691      	mov	r9, r2
 800b942:	44b9      	add	r9, r7
 800b944:	44c8      	add	r8, r9
 800b946:	44c4      	add	ip, r8
 800b948:	4463      	add	r3, ip
 800b94a:	791b      	ldrb	r3, [r3, #4]
 800b94c:	061a      	lsls	r2, r3, #24
 800b94e:	4b96      	ldr	r3, [pc, #600]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b950:	181b      	adds	r3, r3, r0
 800b952:	21c8      	movs	r1, #200	; 0xc8
 800b954:	468c      	mov	ip, r1
 800b956:	2108      	movs	r1, #8
 800b958:	4688      	mov	r8, r1
 800b95a:	2108      	movs	r1, #8
 800b95c:	4689      	mov	r9, r1
 800b95e:	44b9      	add	r9, r7
 800b960:	44c8      	add	r8, r9
 800b962:	44c4      	add	ip, r8
 800b964:	4463      	add	r3, ip
 800b966:	795b      	ldrb	r3, [r3, #5]
 800b968:	041b      	lsls	r3, r3, #16
 800b96a:	18d2      	adds	r2, r2, r3
 800b96c:	4b8e      	ldr	r3, [pc, #568]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b96e:	181b      	adds	r3, r3, r0
 800b970:	21c8      	movs	r1, #200	; 0xc8
 800b972:	468c      	mov	ip, r1
 800b974:	2108      	movs	r1, #8
 800b976:	4688      	mov	r8, r1
 800b978:	2108      	movs	r1, #8
 800b97a:	4689      	mov	r9, r1
 800b97c:	44b9      	add	r9, r7
 800b97e:	44c8      	add	r8, r9
 800b980:	44c4      	add	ip, r8
 800b982:	4463      	add	r3, ip
 800b984:	799b      	ldrb	r3, [r3, #6]
 800b986:	021b      	lsls	r3, r3, #8
 800b988:	18d3      	adds	r3, r2, r3
 800b98a:	4a87      	ldr	r2, [pc, #540]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b98c:	1812      	adds	r2, r2, r0
 800b98e:	21c8      	movs	r1, #200	; 0xc8
 800b990:	468c      	mov	ip, r1
 800b992:	2108      	movs	r1, #8
 800b994:	4688      	mov	r8, r1
 800b996:	2108      	movs	r1, #8
 800b998:	4689      	mov	r9, r1
 800b99a:	44b9      	add	r9, r7
 800b99c:	44c8      	add	r8, r9
 800b99e:	44c4      	add	ip, r8
 800b9a0:	4462      	add	r2, ip
 800b9a2:	79d2      	ldrb	r2, [r2, #7]
 800b9a4:	189b      	adds	r3, r3, r2
 800b9a6:	22a0      	movs	r2, #160	; 0xa0
 800b9a8:	2108      	movs	r1, #8
 800b9aa:	1852      	adds	r2, r2, r1
 800b9ac:	2108      	movs	r1, #8
 800b9ae:	468c      	mov	ip, r1
 800b9b0:	44bc      	add	ip, r7
 800b9b2:	4462      	add	r2, ip
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	22a4      	movs	r2, #164	; 0xa4
 800b9ba:	2108      	movs	r1, #8
 800b9bc:	1852      	adds	r2, r2, r1
 800b9be:	2108      	movs	r1, #8
 800b9c0:	468c      	mov	ip, r1
 800b9c2:	44bc      	add	ip, r7
 800b9c4:	4462      	add	r2, ip
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	4b78      	ldr	r3, [pc, #480]	; (800bbac <ReadAndSetConfig+0x9f0>)
 800b9ca:	22a0      	movs	r2, #160	; 0xa0
 800b9cc:	2108      	movs	r1, #8
 800b9ce:	1852      	adds	r2, r2, r1
 800b9d0:	2108      	movs	r1, #8
 800b9d2:	468c      	mov	ip, r1
 800b9d4:	44bc      	add	ip, r7
 800b9d6:	4462      	add	r2, ip
 800b9d8:	6811      	ldr	r1, [r2, #0]
 800b9da:	6852      	ldr	r2, [r2, #4]
 800b9dc:	6019      	str	r1, [r3, #0]
 800b9de:	605a      	str	r2, [r3, #4]
		code_OFF[0] = ((uint32_t)(copy_config.sSetIROFF[0]) << 24) + ((uint32_t)(copy_config.sSetIROFF[1]) << 16) + ((uint32_t)(copy_config.sSetIROFF[2]) << 8) + copy_config.sSetIROFF[3];
 800b9e0:	4b71      	ldr	r3, [pc, #452]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b9e2:	181b      	adds	r3, r3, r0
 800b9e4:	22c8      	movs	r2, #200	; 0xc8
 800b9e6:	4694      	mov	ip, r2
 800b9e8:	2208      	movs	r2, #8
 800b9ea:	4690      	mov	r8, r2
 800b9ec:	2208      	movs	r2, #8
 800b9ee:	4691      	mov	r9, r2
 800b9f0:	44b9      	add	r9, r7
 800b9f2:	44c8      	add	r8, r9
 800b9f4:	44c4      	add	ip, r8
 800b9f6:	4463      	add	r3, ip
 800b9f8:	7cdb      	ldrb	r3, [r3, #19]
 800b9fa:	061a      	lsls	r2, r3, #24
 800b9fc:	4b6a      	ldr	r3, [pc, #424]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800b9fe:	181b      	adds	r3, r3, r0
 800ba00:	21c8      	movs	r1, #200	; 0xc8
 800ba02:	468c      	mov	ip, r1
 800ba04:	2108      	movs	r1, #8
 800ba06:	4688      	mov	r8, r1
 800ba08:	2108      	movs	r1, #8
 800ba0a:	4689      	mov	r9, r1
 800ba0c:	44b9      	add	r9, r7
 800ba0e:	44c8      	add	r8, r9
 800ba10:	44c4      	add	ip, r8
 800ba12:	4463      	add	r3, ip
 800ba14:	7d1b      	ldrb	r3, [r3, #20]
 800ba16:	041b      	lsls	r3, r3, #16
 800ba18:	18d2      	adds	r2, r2, r3
 800ba1a:	4b63      	ldr	r3, [pc, #396]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800ba1c:	181b      	adds	r3, r3, r0
 800ba1e:	21c8      	movs	r1, #200	; 0xc8
 800ba20:	468c      	mov	ip, r1
 800ba22:	2108      	movs	r1, #8
 800ba24:	4688      	mov	r8, r1
 800ba26:	2108      	movs	r1, #8
 800ba28:	4689      	mov	r9, r1
 800ba2a:	44b9      	add	r9, r7
 800ba2c:	44c8      	add	r8, r9
 800ba2e:	44c4      	add	ip, r8
 800ba30:	4463      	add	r3, ip
 800ba32:	7d5b      	ldrb	r3, [r3, #21]
 800ba34:	021b      	lsls	r3, r3, #8
 800ba36:	18d3      	adds	r3, r2, r3
 800ba38:	4a5b      	ldr	r2, [pc, #364]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800ba3a:	1812      	adds	r2, r2, r0
 800ba3c:	21c8      	movs	r1, #200	; 0xc8
 800ba3e:	468c      	mov	ip, r1
 800ba40:	2108      	movs	r1, #8
 800ba42:	4688      	mov	r8, r1
 800ba44:	2108      	movs	r1, #8
 800ba46:	4689      	mov	r9, r1
 800ba48:	44b9      	add	r9, r7
 800ba4a:	44c8      	add	r8, r9
 800ba4c:	44c4      	add	ip, r8
 800ba4e:	4462      	add	r2, ip
 800ba50:	7d92      	ldrb	r2, [r2, #22]
 800ba52:	189b      	adds	r3, r3, r2
 800ba54:	2298      	movs	r2, #152	; 0x98
 800ba56:	2108      	movs	r1, #8
 800ba58:	1852      	adds	r2, r2, r1
 800ba5a:	2108      	movs	r1, #8
 800ba5c:	468c      	mov	ip, r1
 800ba5e:	44bc      	add	ip, r7
 800ba60:	4462      	add	r2, ip
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	2300      	movs	r3, #0
 800ba66:	229c      	movs	r2, #156	; 0x9c
 800ba68:	2108      	movs	r1, #8
 800ba6a:	1852      	adds	r2, r2, r1
 800ba6c:	2108      	movs	r1, #8
 800ba6e:	468c      	mov	ip, r1
 800ba70:	44bc      	add	ip, r7
 800ba72:	4462      	add	r2, ip
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	4b4e      	ldr	r3, [pc, #312]	; (800bbb0 <ReadAndSetConfig+0x9f4>)
 800ba78:	2298      	movs	r2, #152	; 0x98
 800ba7a:	2108      	movs	r1, #8
 800ba7c:	1852      	adds	r2, r2, r1
 800ba7e:	2108      	movs	r1, #8
 800ba80:	468c      	mov	ip, r1
 800ba82:	44bc      	add	ip, r7
 800ba84:	4462      	add	r2, ip
 800ba86:	6811      	ldr	r1, [r2, #0]
 800ba88:	6852      	ldr	r2, [r2, #4]
 800ba8a:	6019      	str	r1, [r3, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
		break;
 800ba8e:	f000 fc7b 	bl	800c388 <ReadAndSetConfig+0x11cc>

	case 2: // PANASONIC
		to_hex(copy_config.sSetIR, 0);
 800ba92:	23cc      	movs	r3, #204	; 0xcc
 800ba94:	2208      	movs	r2, #8
 800ba96:	189b      	adds	r3, r3, r2
 800ba98:	2208      	movs	r2, #8
 800ba9a:	4694      	mov	ip, r2
 800ba9c:	44bc      	add	ip, r7
 800ba9e:	4463      	add	r3, ip
 800baa0:	3304      	adds	r3, #4
 800baa2:	2100      	movs	r1, #0
 800baa4:	0018      	movs	r0, r3
 800baa6:	f00d f87f 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 6; i++)
 800baaa:	2300      	movs	r3, #0
 800baac:	4a41      	ldr	r2, [pc, #260]	; (800bbb4 <ReadAndSetConfig+0x9f8>)
 800baae:	21c8      	movs	r1, #200	; 0xc8
 800bab0:	1852      	adds	r2, r2, r1
 800bab2:	2108      	movs	r1, #8
 800bab4:	468c      	mov	ip, r1
 800bab6:	2108      	movs	r1, #8
 800bab8:	4688      	mov	r8, r1
 800baba:	44b8      	add	r8, r7
 800babc:	44c4      	add	ip, r8
 800babe:	4462      	add	r2, ip
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	e049      	b.n	800bb58 <ReadAndSetConfig+0x99c>
			copy_config.sSetIR[i] = copy_config.sSetIR[2 * i + 1];
 800bac4:	483b      	ldr	r0, [pc, #236]	; (800bbb4 <ReadAndSetConfig+0x9f8>)
 800bac6:	23c8      	movs	r3, #200	; 0xc8
 800bac8:	18c3      	adds	r3, r0, r3
 800baca:	2208      	movs	r2, #8
 800bacc:	4694      	mov	ip, r2
 800bace:	2208      	movs	r2, #8
 800bad0:	4690      	mov	r8, r2
 800bad2:	44b8      	add	r8, r7
 800bad4:	44c4      	add	ip, r8
 800bad6:	4463      	add	r3, ip
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	4b32      	ldr	r3, [pc, #200]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800bae0:	2698      	movs	r6, #152	; 0x98
 800bae2:	00f6      	lsls	r6, r6, #3
 800bae4:	199b      	adds	r3, r3, r6
 800bae6:	21c8      	movs	r1, #200	; 0xc8
 800bae8:	468c      	mov	ip, r1
 800baea:	2108      	movs	r1, #8
 800baec:	4688      	mov	r8, r1
 800baee:	2108      	movs	r1, #8
 800baf0:	4689      	mov	r9, r1
 800baf2:	44b9      	add	r9, r7
 800baf4:	44c8      	add	r8, r9
 800baf6:	44c4      	add	ip, r8
 800baf8:	4463      	add	r3, ip
 800bafa:	189b      	adds	r3, r3, r2
 800bafc:	7919      	ldrb	r1, [r3, #4]
 800bafe:	4b2a      	ldr	r3, [pc, #168]	; (800bba8 <ReadAndSetConfig+0x9ec>)
 800bb00:	199b      	adds	r3, r3, r6
 800bb02:	22c8      	movs	r2, #200	; 0xc8
 800bb04:	2608      	movs	r6, #8
 800bb06:	1992      	adds	r2, r2, r6
 800bb08:	2608      	movs	r6, #8
 800bb0a:	46b4      	mov	ip, r6
 800bb0c:	44bc      	add	ip, r7
 800bb0e:	4462      	add	r2, ip
 800bb10:	189a      	adds	r2, r3, r2
 800bb12:	23c8      	movs	r3, #200	; 0xc8
 800bb14:	18c3      	adds	r3, r0, r3
 800bb16:	2608      	movs	r6, #8
 800bb18:	46b4      	mov	ip, r6
 800bb1a:	2608      	movs	r6, #8
 800bb1c:	46b0      	mov	r8, r6
 800bb1e:	44b8      	add	r8, r7
 800bb20:	44c4      	add	ip, r8
 800bb22:	4463      	add	r3, ip
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	18d3      	adds	r3, r2, r3
 800bb28:	1d1a      	adds	r2, r3, #4
 800bb2a:	1c0b      	adds	r3, r1, #0
 800bb2c:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 6; i++)
 800bb2e:	23c8      	movs	r3, #200	; 0xc8
 800bb30:	18c3      	adds	r3, r0, r3
 800bb32:	2208      	movs	r2, #8
 800bb34:	4694      	mov	ip, r2
 800bb36:	2208      	movs	r2, #8
 800bb38:	4690      	mov	r8, r2
 800bb3a:	44b8      	add	r8, r7
 800bb3c:	44c4      	add	ip, r8
 800bb3e:	4463      	add	r3, ip
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3301      	adds	r3, #1
 800bb44:	22c8      	movs	r2, #200	; 0xc8
 800bb46:	1882      	adds	r2, r0, r2
 800bb48:	2108      	movs	r1, #8
 800bb4a:	468c      	mov	ip, r1
 800bb4c:	2108      	movs	r1, #8
 800bb4e:	4688      	mov	r8, r1
 800bb50:	44b8      	add	r8, r7
 800bb52:	44c4      	add	ip, r8
 800bb54:	4462      	add	r2, ip
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	4b16      	ldr	r3, [pc, #88]	; (800bbb4 <ReadAndSetConfig+0x9f8>)
 800bb5a:	22c8      	movs	r2, #200	; 0xc8
 800bb5c:	189b      	adds	r3, r3, r2
 800bb5e:	2208      	movs	r2, #8
 800bb60:	4694      	mov	ip, r2
 800bb62:	2208      	movs	r2, #8
 800bb64:	4690      	mov	r8, r2
 800bb66:	44b8      	add	r8, r7
 800bb68:	44c4      	add	ip, r8
 800bb6a:	4463      	add	r3, ip
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b05      	cmp	r3, #5
 800bb70:	dda8      	ble.n	800bac4 <ReadAndSetConfig+0x908>
		to_hex(copy_config.sSetIROFF, 0);
 800bb72:	23cc      	movs	r3, #204	; 0xcc
 800bb74:	2208      	movs	r2, #8
 800bb76:	189b      	adds	r3, r3, r2
 800bb78:	2208      	movs	r2, #8
 800bb7a:	4694      	mov	ip, r2
 800bb7c:	44bc      	add	ip, r7
 800bb7e:	4463      	add	r3, ip
 800bb80:	3313      	adds	r3, #19
 800bb82:	2100      	movs	r1, #0
 800bb84:	0018      	movs	r0, r3
 800bb86:	f00d f80f 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 6; i++)
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2293      	movs	r2, #147	; 0x93
 800bb8e:	00d2      	lsls	r2, r2, #3
 800bb90:	21c8      	movs	r1, #200	; 0xc8
 800bb92:	1852      	adds	r2, r2, r1
 800bb94:	2108      	movs	r1, #8
 800bb96:	468c      	mov	ip, r1
 800bb98:	2108      	movs	r1, #8
 800bb9a:	4688      	mov	r8, r1
 800bb9c:	44b8      	add	r8, r7
 800bb9e:	44c4      	add	ip, r8
 800bba0:	4462      	add	r2, ip
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	e054      	b.n	800bc50 <ReadAndSetConfig+0xa94>
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	fffffb44 	.word	0xfffffb44
 800bbac:	20006720 	.word	0x20006720
 800bbb0:	20006728 	.word	0x20006728
 800bbb4:	0000049c 	.word	0x0000049c
			copy_config.sSetIROFF[i] = copy_config.sSetIROFF[2 * i + 1];
 800bbb8:	2093      	movs	r0, #147	; 0x93
 800bbba:	00c0      	lsls	r0, r0, #3
 800bbbc:	23c8      	movs	r3, #200	; 0xc8
 800bbbe:	18c3      	adds	r3, r0, r3
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	4694      	mov	ip, r2
 800bbc4:	2208      	movs	r2, #8
 800bbc6:	4690      	mov	r8, r2
 800bbc8:	44b8      	add	r8, r7
 800bbca:	44c4      	add	ip, r8
 800bbcc:	4463      	add	r3, ip
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	005b      	lsls	r3, r3, #1
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	4bf6      	ldr	r3, [pc, #984]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bbd6:	2698      	movs	r6, #152	; 0x98
 800bbd8:	00f6      	lsls	r6, r6, #3
 800bbda:	199b      	adds	r3, r3, r6
 800bbdc:	21c8      	movs	r1, #200	; 0xc8
 800bbde:	468c      	mov	ip, r1
 800bbe0:	2108      	movs	r1, #8
 800bbe2:	4688      	mov	r8, r1
 800bbe4:	2108      	movs	r1, #8
 800bbe6:	4689      	mov	r9, r1
 800bbe8:	44b9      	add	r9, r7
 800bbea:	44c8      	add	r8, r9
 800bbec:	44c4      	add	ip, r8
 800bbee:	4463      	add	r3, ip
 800bbf0:	189b      	adds	r3, r3, r2
 800bbf2:	7cd9      	ldrb	r1, [r3, #19]
 800bbf4:	4bee      	ldr	r3, [pc, #952]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bbf6:	199b      	adds	r3, r3, r6
 800bbf8:	22c8      	movs	r2, #200	; 0xc8
 800bbfa:	2608      	movs	r6, #8
 800bbfc:	1992      	adds	r2, r2, r6
 800bbfe:	2608      	movs	r6, #8
 800bc00:	46b4      	mov	ip, r6
 800bc02:	44bc      	add	ip, r7
 800bc04:	4462      	add	r2, ip
 800bc06:	189a      	adds	r2, r3, r2
 800bc08:	23c8      	movs	r3, #200	; 0xc8
 800bc0a:	18c3      	adds	r3, r0, r3
 800bc0c:	2608      	movs	r6, #8
 800bc0e:	46b4      	mov	ip, r6
 800bc10:	2608      	movs	r6, #8
 800bc12:	46b0      	mov	r8, r6
 800bc14:	44b8      	add	r8, r7
 800bc16:	44c4      	add	ip, r8
 800bc18:	4463      	add	r3, ip
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	18d3      	adds	r3, r2, r3
 800bc1e:	3313      	adds	r3, #19
 800bc20:	001a      	movs	r2, r3
 800bc22:	1c0b      	adds	r3, r1, #0
 800bc24:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 6; i++)
 800bc26:	23c8      	movs	r3, #200	; 0xc8
 800bc28:	18c3      	adds	r3, r0, r3
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	4694      	mov	ip, r2
 800bc2e:	2208      	movs	r2, #8
 800bc30:	4690      	mov	r8, r2
 800bc32:	44b8      	add	r8, r7
 800bc34:	44c4      	add	ip, r8
 800bc36:	4463      	add	r3, ip
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	22c8      	movs	r2, #200	; 0xc8
 800bc3e:	1882      	adds	r2, r0, r2
 800bc40:	2108      	movs	r1, #8
 800bc42:	468c      	mov	ip, r1
 800bc44:	2108      	movs	r1, #8
 800bc46:	4688      	mov	r8, r1
 800bc48:	44b8      	add	r8, r7
 800bc4a:	44c4      	add	ip, r8
 800bc4c:	4462      	add	r2, ip
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	2393      	movs	r3, #147	; 0x93
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	22c8      	movs	r2, #200	; 0xc8
 800bc56:	189b      	adds	r3, r3, r2
 800bc58:	2208      	movs	r2, #8
 800bc5a:	4694      	mov	ip, r2
 800bc5c:	2208      	movs	r2, #8
 800bc5e:	4690      	mov	r8, r2
 800bc60:	44b8      	add	r8, r7
 800bc62:	44c4      	add	ip, r8
 800bc64:	4463      	add	r3, ip
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b05      	cmp	r3, #5
 800bc6a:	dda5      	ble.n	800bbb8 <ReadAndSetConfig+0x9fc>

		code_ON[0] = ((uint64_t)(copy_config.sSetIR[0]) << 40) + ((uint64_t)(copy_config.sSetIR[1]) << 32) + ((uint64_t)(copy_config.sSetIR[2]) << 24) + ((uint64_t)(copy_config.sSetIR[3]) << 16) + ((uint64_t)(copy_config.sSetIR[4]) << 8) + copy_config.sSetIR[5]; // full_ir_code_from_db;//
 800bc6c:	4bd0      	ldr	r3, [pc, #832]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bc6e:	2698      	movs	r6, #152	; 0x98
 800bc70:	00f6      	lsls	r6, r6, #3
 800bc72:	199b      	adds	r3, r3, r6
 800bc74:	22c8      	movs	r2, #200	; 0xc8
 800bc76:	4694      	mov	ip, r2
 800bc78:	2208      	movs	r2, #8
 800bc7a:	4690      	mov	r8, r2
 800bc7c:	2208      	movs	r2, #8
 800bc7e:	4691      	mov	r9, r2
 800bc80:	44b9      	add	r9, r7
 800bc82:	44c8      	add	r8, r9
 800bc84:	44c4      	add	ip, r8
 800bc86:	4463      	add	r3, ip
 800bc88:	791b      	ldrb	r3, [r3, #4]
 800bc8a:	001c      	movs	r4, r3
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	001d      	movs	r5, r3
 800bc90:	0023      	movs	r3, r4
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	2294      	movs	r2, #148	; 0x94
 800bc96:	2108      	movs	r1, #8
 800bc98:	1852      	adds	r2, r2, r1
 800bc9a:	2108      	movs	r1, #8
 800bc9c:	468c      	mov	ip, r1
 800bc9e:	44bc      	add	ip, r7
 800bca0:	4462      	add	r2, ip
 800bca2:	6013      	str	r3, [r2, #0]
 800bca4:	2300      	movs	r3, #0
 800bca6:	2290      	movs	r2, #144	; 0x90
 800bca8:	2108      	movs	r1, #8
 800bcaa:	1852      	adds	r2, r2, r1
 800bcac:	2108      	movs	r1, #8
 800bcae:	468c      	mov	ip, r1
 800bcb0:	44bc      	add	ip, r7
 800bcb2:	4462      	add	r2, ip
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	4bbe      	ldr	r3, [pc, #760]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bcb8:	199b      	adds	r3, r3, r6
 800bcba:	22c8      	movs	r2, #200	; 0xc8
 800bcbc:	4694      	mov	ip, r2
 800bcbe:	2208      	movs	r2, #8
 800bcc0:	4690      	mov	r8, r2
 800bcc2:	2208      	movs	r2, #8
 800bcc4:	4691      	mov	r9, r2
 800bcc6:	44b9      	add	r9, r7
 800bcc8:	44c8      	add	r8, r9
 800bcca:	44c4      	add	ip, r8
 800bccc:	4463      	add	r3, ip
 800bcce:	795b      	ldrb	r3, [r3, #5]
 800bcd0:	2288      	movs	r2, #136	; 0x88
 800bcd2:	2108      	movs	r1, #8
 800bcd4:	1852      	adds	r2, r2, r1
 800bcd6:	2108      	movs	r1, #8
 800bcd8:	468c      	mov	ip, r1
 800bcda:	44bc      	add	ip, r7
 800bcdc:	4462      	add	r2, ip
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	2300      	movs	r3, #0
 800bce2:	228c      	movs	r2, #140	; 0x8c
 800bce4:	2108      	movs	r1, #8
 800bce6:	1852      	adds	r2, r2, r1
 800bce8:	2108      	movs	r1, #8
 800bcea:	468c      	mov	ip, r1
 800bcec:	44bc      	add	ip, r7
 800bcee:	4462      	add	r2, ip
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	2388      	movs	r3, #136	; 0x88
 800bcf4:	2208      	movs	r2, #8
 800bcf6:	189b      	adds	r3, r3, r2
 800bcf8:	2208      	movs	r2, #8
 800bcfa:	4694      	mov	ip, r2
 800bcfc:	44bc      	add	ip, r7
 800bcfe:	4463      	add	r3, ip
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	001b      	movs	r3, r3
 800bd04:	2284      	movs	r2, #132	; 0x84
 800bd06:	2108      	movs	r1, #8
 800bd08:	1852      	adds	r2, r2, r1
 800bd0a:	2108      	movs	r1, #8
 800bd0c:	468c      	mov	ip, r1
 800bd0e:	44bc      	add	ip, r7
 800bd10:	4462      	add	r2, ip
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	2300      	movs	r3, #0
 800bd16:	2280      	movs	r2, #128	; 0x80
 800bd18:	2108      	movs	r1, #8
 800bd1a:	1852      	adds	r2, r2, r1
 800bd1c:	2108      	movs	r1, #8
 800bd1e:	468c      	mov	ip, r1
 800bd20:	44bc      	add	ip, r7
 800bd22:	4462      	add	r2, ip
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	2390      	movs	r3, #144	; 0x90
 800bd28:	2208      	movs	r2, #8
 800bd2a:	189b      	adds	r3, r3, r2
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	4694      	mov	ip, r2
 800bd30:	44bc      	add	ip, r7
 800bd32:	4463      	add	r3, ip
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	6859      	ldr	r1, [r3, #4]
 800bd38:	2380      	movs	r3, #128	; 0x80
 800bd3a:	2208      	movs	r2, #8
 800bd3c:	189b      	adds	r3, r3, r2
 800bd3e:	2208      	movs	r2, #8
 800bd40:	4694      	mov	ip, r2
 800bd42:	44bc      	add	ip, r7
 800bd44:	4463      	add	r3, ip
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	1880      	adds	r0, r0, r2
 800bd4c:	4159      	adcs	r1, r3
 800bd4e:	4b98      	ldr	r3, [pc, #608]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bd50:	199b      	adds	r3, r3, r6
 800bd52:	22c8      	movs	r2, #200	; 0xc8
 800bd54:	4694      	mov	ip, r2
 800bd56:	2208      	movs	r2, #8
 800bd58:	4690      	mov	r8, r2
 800bd5a:	2208      	movs	r2, #8
 800bd5c:	4691      	mov	r9, r2
 800bd5e:	44b9      	add	r9, r7
 800bd60:	44c8      	add	r8, r9
 800bd62:	44c4      	add	ip, r8
 800bd64:	4463      	add	r3, ip
 800bd66:	799b      	ldrb	r3, [r3, #6]
 800bd68:	2280      	movs	r2, #128	; 0x80
 800bd6a:	2408      	movs	r4, #8
 800bd6c:	1912      	adds	r2, r2, r4
 800bd6e:	19d2      	adds	r2, r2, r7
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	2300      	movs	r3, #0
 800bd74:	2284      	movs	r2, #132	; 0x84
 800bd76:	2408      	movs	r4, #8
 800bd78:	1912      	adds	r2, r2, r4
 800bd7a:	19d2      	adds	r2, r2, r7
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	2380      	movs	r3, #128	; 0x80
 800bd80:	2208      	movs	r2, #8
 800bd82:	189b      	adds	r3, r3, r2
 800bd84:	19db      	adds	r3, r3, r7
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	0014      	movs	r4, r2
 800bd8c:	0a24      	lsrs	r4, r4, #8
 800bd8e:	2584      	movs	r5, #132	; 0x84
 800bd90:	197d      	adds	r5, r7, r5
 800bd92:	602c      	str	r4, [r5, #0]
 800bd94:	0013      	movs	r3, r2
 800bd96:	061b      	lsls	r3, r3, #24
 800bd98:	2280      	movs	r2, #128	; 0x80
 800bd9a:	18ba      	adds	r2, r7, r2
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	2380      	movs	r3, #128	; 0x80
 800bda0:	18fb      	adds	r3, r7, r3
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	1880      	adds	r0, r0, r2
 800bda8:	4159      	adcs	r1, r3
 800bdaa:	4b81      	ldr	r3, [pc, #516]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bdac:	0032      	movs	r2, r6
 800bdae:	603a      	str	r2, [r7, #0]
 800bdb0:	189b      	adds	r3, r3, r2
 800bdb2:	24c8      	movs	r4, #200	; 0xc8
 800bdb4:	46a4      	mov	ip, r4
 800bdb6:	2208      	movs	r2, #8
 800bdb8:	4690      	mov	r8, r2
 800bdba:	2208      	movs	r2, #8
 800bdbc:	4691      	mov	r9, r2
 800bdbe:	44b9      	add	r9, r7
 800bdc0:	44c8      	add	r8, r9
 800bdc2:	44c4      	add	ip, r8
 800bdc4:	4463      	add	r3, ip
 800bdc6:	79db      	ldrb	r3, [r3, #7]
 800bdc8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdca:	2300      	movs	r3, #0
 800bdcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdce:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800bdd0:	6ffe      	ldr	r6, [r7, #124]	; 0x7c
 800bdd2:	002b      	movs	r3, r5
 800bdd4:	0c1b      	lsrs	r3, r3, #16
 800bdd6:	469c      	mov	ip, r3
 800bdd8:	0034      	movs	r4, r6
 800bdda:	0424      	lsls	r4, r4, #16
 800bddc:	23c4      	movs	r3, #196	; 0xc4
 800bdde:	2208      	movs	r2, #8
 800bde0:	189b      	adds	r3, r3, r2
 800bde2:	2208      	movs	r2, #8
 800bde4:	4690      	mov	r8, r2
 800bde6:	44b8      	add	r8, r7
 800bde8:	4443      	add	r3, r8
 800bdea:	601c      	str	r4, [r3, #0]
 800bdec:	24c4      	movs	r4, #196	; 0xc4
 800bdee:	2308      	movs	r3, #8
 800bdf0:	18e3      	adds	r3, r4, r3
 800bdf2:	2208      	movs	r2, #8
 800bdf4:	18ba      	adds	r2, r7, r2
 800bdf6:	189c      	adds	r4, r3, r2
 800bdf8:	6824      	ldr	r4, [r4, #0]
 800bdfa:	4663      	mov	r3, ip
 800bdfc:	431c      	orrs	r4, r3
 800bdfe:	23c4      	movs	r3, #196	; 0xc4
 800be00:	2208      	movs	r2, #8
 800be02:	189b      	adds	r3, r3, r2
 800be04:	2208      	movs	r2, #8
 800be06:	4694      	mov	ip, r2
 800be08:	44bc      	add	ip, r7
 800be0a:	4463      	add	r3, ip
 800be0c:	601c      	str	r4, [r3, #0]
 800be0e:	002b      	movs	r3, r5
 800be10:	041b      	lsls	r3, r3, #16
 800be12:	24c0      	movs	r4, #192	; 0xc0
 800be14:	2208      	movs	r2, #8
 800be16:	18a2      	adds	r2, r4, r2
 800be18:	2408      	movs	r4, #8
 800be1a:	193c      	adds	r4, r7, r4
 800be1c:	1914      	adds	r4, r2, r4
 800be1e:	6023      	str	r3, [r4, #0]
 800be20:	23c0      	movs	r3, #192	; 0xc0
 800be22:	2208      	movs	r2, #8
 800be24:	189b      	adds	r3, r3, r2
 800be26:	2208      	movs	r2, #8
 800be28:	4694      	mov	ip, r2
 800be2a:	44bc      	add	ip, r7
 800be2c:	4463      	add	r3, ip
 800be2e:	685c      	ldr	r4, [r3, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	18c0      	adds	r0, r0, r3
 800be34:	4161      	adcs	r1, r4
 800be36:	4b5e      	ldr	r3, [pc, #376]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	603a      	str	r2, [r7, #0]
 800be3c:	189b      	adds	r3, r3, r2
 800be3e:	24c8      	movs	r4, #200	; 0xc8
 800be40:	46a4      	mov	ip, r4
 800be42:	2208      	movs	r2, #8
 800be44:	4690      	mov	r8, r2
 800be46:	2208      	movs	r2, #8
 800be48:	4691      	mov	r9, r2
 800be4a:	44b9      	add	r9, r7
 800be4c:	44c8      	add	r8, r9
 800be4e:	44c4      	add	ip, r8
 800be50:	4463      	add	r3, ip
 800be52:	7a1b      	ldrb	r3, [r3, #8]
 800be54:	673b      	str	r3, [r7, #112]	; 0x70
 800be56:	2300      	movs	r3, #0
 800be58:	677b      	str	r3, [r7, #116]	; 0x74
 800be5a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800be5c:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800be5e:	0023      	movs	r3, r4
 800be60:	0e1b      	lsrs	r3, r3, #24
 800be62:	469c      	mov	ip, r3
 800be64:	002e      	movs	r6, r5
 800be66:	0236      	lsls	r6, r6, #8
 800be68:	23bc      	movs	r3, #188	; 0xbc
 800be6a:	2208      	movs	r2, #8
 800be6c:	189b      	adds	r3, r3, r2
 800be6e:	2208      	movs	r2, #8
 800be70:	4690      	mov	r8, r2
 800be72:	44b8      	add	r8, r7
 800be74:	4443      	add	r3, r8
 800be76:	601e      	str	r6, [r3, #0]
 800be78:	26bc      	movs	r6, #188	; 0xbc
 800be7a:	2308      	movs	r3, #8
 800be7c:	18f3      	adds	r3, r6, r3
 800be7e:	2208      	movs	r2, #8
 800be80:	18ba      	adds	r2, r7, r2
 800be82:	189e      	adds	r6, r3, r2
 800be84:	6836      	ldr	r6, [r6, #0]
 800be86:	4663      	mov	r3, ip
 800be88:	431e      	orrs	r6, r3
 800be8a:	23bc      	movs	r3, #188	; 0xbc
 800be8c:	2208      	movs	r2, #8
 800be8e:	189b      	adds	r3, r3, r2
 800be90:	2208      	movs	r2, #8
 800be92:	4694      	mov	ip, r2
 800be94:	44bc      	add	ip, r7
 800be96:	4463      	add	r3, ip
 800be98:	601e      	str	r6, [r3, #0]
 800be9a:	0023      	movs	r3, r4
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	24b8      	movs	r4, #184	; 0xb8
 800bea0:	2208      	movs	r2, #8
 800bea2:	18a2      	adds	r2, r4, r2
 800bea4:	2408      	movs	r4, #8
 800bea6:	193c      	adds	r4, r7, r4
 800bea8:	1914      	adds	r4, r2, r4
 800beaa:	6023      	str	r3, [r4, #0]
 800beac:	23b8      	movs	r3, #184	; 0xb8
 800beae:	2208      	movs	r2, #8
 800beb0:	189b      	adds	r3, r3, r2
 800beb2:	2208      	movs	r2, #8
 800beb4:	4694      	mov	ip, r2
 800beb6:	44bc      	add	ip, r7
 800beb8:	4463      	add	r3, ip
 800beba:	685c      	ldr	r4, [r3, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	18c0      	adds	r0, r0, r3
 800bec0:	4161      	adcs	r1, r4
 800bec2:	4b3b      	ldr	r3, [pc, #236]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bec4:	683e      	ldr	r6, [r7, #0]
 800bec6:	199b      	adds	r3, r3, r6
 800bec8:	22c8      	movs	r2, #200	; 0xc8
 800beca:	4694      	mov	ip, r2
 800becc:	2208      	movs	r2, #8
 800bece:	4690      	mov	r8, r2
 800bed0:	2208      	movs	r2, #8
 800bed2:	4691      	mov	r9, r2
 800bed4:	44b9      	add	r9, r7
 800bed6:	44c8      	add	r8, r9
 800bed8:	44c4      	add	ip, r8
 800beda:	4463      	add	r3, ip
 800bedc:	7a5b      	ldrb	r3, [r3, #9]
 800bede:	66bb      	str	r3, [r7, #104]	; 0x68
 800bee0:	2300      	movs	r3, #0
 800bee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bee4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee8:	1812      	adds	r2, r2, r0
 800beea:	414b      	adcs	r3, r1
 800beec:	4931      	ldr	r1, [pc, #196]	; (800bfb4 <ReadAndSetConfig+0xdf8>)
 800beee:	600a      	str	r2, [r1, #0]
 800bef0:	604b      	str	r3, [r1, #4]
		code_OFF[0] = ((uint64_t)(copy_config.sSetIROFF[0]) << 40) + ((uint64_t)(copy_config.sSetIROFF[1]) << 32) + ((uint64_t)(copy_config.sSetIROFF[2]) << 24) + ((uint64_t)(copy_config.sSetIROFF[3]) << 16) + ((uint64_t)(copy_config.sSetIROFF[4]) << 8) + copy_config.sSetIROFF[5];
 800bef2:	4b2f      	ldr	r3, [pc, #188]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bef4:	199b      	adds	r3, r3, r6
 800bef6:	22c8      	movs	r2, #200	; 0xc8
 800bef8:	4694      	mov	ip, r2
 800befa:	2208      	movs	r2, #8
 800befc:	4690      	mov	r8, r2
 800befe:	2208      	movs	r2, #8
 800bf00:	4691      	mov	r9, r2
 800bf02:	44b9      	add	r9, r7
 800bf04:	44c8      	add	r8, r9
 800bf06:	44c4      	add	ip, r8
 800bf08:	4463      	add	r3, ip
 800bf0a:	7cdb      	ldrb	r3, [r3, #19]
 800bf0c:	663b      	str	r3, [r7, #96]	; 0x60
 800bf0e:	2300      	movs	r3, #0
 800bf10:	667b      	str	r3, [r7, #100]	; 0x64
 800bf12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf14:	021b      	lsls	r3, r3, #8
 800bf16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf18:	2300      	movs	r3, #0
 800bf1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf1c:	4b24      	ldr	r3, [pc, #144]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bf1e:	199b      	adds	r3, r3, r6
 800bf20:	22c8      	movs	r2, #200	; 0xc8
 800bf22:	4694      	mov	ip, r2
 800bf24:	2208      	movs	r2, #8
 800bf26:	4690      	mov	r8, r2
 800bf28:	2208      	movs	r2, #8
 800bf2a:	4691      	mov	r9, r2
 800bf2c:	44b9      	add	r9, r7
 800bf2e:	44c8      	add	r8, r9
 800bf30:	44c4      	add	ip, r8
 800bf32:	4463      	add	r3, ip
 800bf34:	7d1b      	ldrb	r3, [r3, #20]
 800bf36:	653b      	str	r3, [r7, #80]	; 0x50
 800bf38:	2300      	movs	r3, #0
 800bf3a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf3e:	001b      	movs	r3, r3
 800bf40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf42:	2300      	movs	r3, #0
 800bf44:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf46:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bf48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bf4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf4c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800bf4e:	18c0      	adds	r0, r0, r3
 800bf50:	4161      	adcs	r1, r4
 800bf52:	4b17      	ldr	r3, [pc, #92]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bf54:	199b      	adds	r3, r3, r6
 800bf56:	22c8      	movs	r2, #200	; 0xc8
 800bf58:	4694      	mov	ip, r2
 800bf5a:	2208      	movs	r2, #8
 800bf5c:	4690      	mov	r8, r2
 800bf5e:	2208      	movs	r2, #8
 800bf60:	4691      	mov	r9, r2
 800bf62:	44b9      	add	r9, r7
 800bf64:	44c8      	add	r8, r9
 800bf66:	44c4      	add	ip, r8
 800bf68:	4463      	add	r3, ip
 800bf6a:	7d5b      	ldrb	r3, [r3, #21]
 800bf6c:	643b      	str	r3, [r7, #64]	; 0x40
 800bf6e:	2300      	movs	r3, #0
 800bf70:	647b      	str	r3, [r7, #68]	; 0x44
 800bf72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf74:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800bf76:	001a      	movs	r2, r3
 800bf78:	0a12      	lsrs	r2, r2, #8
 800bf7a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf7c:	061b      	lsls	r3, r3, #24
 800bf7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800bf84:	18c0      	adds	r0, r0, r3
 800bf86:	4161      	adcs	r1, r4
 800bf88:	6038      	str	r0, [r7, #0]
 800bf8a:	6079      	str	r1, [r7, #4]
 800bf8c:	4b08      	ldr	r3, [pc, #32]	; (800bfb0 <ReadAndSetConfig+0xdf4>)
 800bf8e:	199b      	adds	r3, r3, r6
 800bf90:	22c8      	movs	r2, #200	; 0xc8
 800bf92:	4694      	mov	ip, r2
 800bf94:	2208      	movs	r2, #8
 800bf96:	4690      	mov	r8, r2
 800bf98:	2208      	movs	r2, #8
 800bf9a:	4691      	mov	r9, r2
 800bf9c:	44b9      	add	r9, r7
 800bf9e:	44c8      	add	r8, r9
 800bfa0:	44c4      	add	ip, r8
 800bfa2:	4463      	add	r3, ip
 800bfa4:	7d9b      	ldrb	r3, [r3, #22]
 800bfa6:	633b      	str	r3, [r7, #48]	; 0x30
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	637b      	str	r3, [r7, #52]	; 0x34
 800bfac:	e004      	b.n	800bfb8 <ReadAndSetConfig+0xdfc>
 800bfae:	46c0      	nop			; (mov r8, r8)
 800bfb0:	fffffb44 	.word	0xfffffb44
 800bfb4:	20006720 	.word	0x20006720
 800bfb8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bfba:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800bfbc:	0023      	movs	r3, r4
 800bfbe:	0c1b      	lsrs	r3, r3, #16
 800bfc0:	469c      	mov	ip, r3
 800bfc2:	002a      	movs	r2, r5
 800bfc4:	0412      	lsls	r2, r2, #16
 800bfc6:	23b4      	movs	r3, #180	; 0xb4
 800bfc8:	2108      	movs	r1, #8
 800bfca:	185b      	adds	r3, r3, r1
 800bfcc:	2108      	movs	r1, #8
 800bfce:	4688      	mov	r8, r1
 800bfd0:	44b8      	add	r8, r7
 800bfd2:	4443      	add	r3, r8
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	22b4      	movs	r2, #180	; 0xb4
 800bfd8:	2308      	movs	r3, #8
 800bfda:	18d3      	adds	r3, r2, r3
 800bfdc:	2208      	movs	r2, #8
 800bfde:	18ba      	adds	r2, r7, r2
 800bfe0:	189a      	adds	r2, r3, r2
 800bfe2:	6812      	ldr	r2, [r2, #0]
 800bfe4:	4663      	mov	r3, ip
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	23b4      	movs	r3, #180	; 0xb4
 800bfea:	2108      	movs	r1, #8
 800bfec:	185b      	adds	r3, r3, r1
 800bfee:	2108      	movs	r1, #8
 800bff0:	468c      	mov	ip, r1
 800bff2:	44bc      	add	ip, r7
 800bff4:	4463      	add	r3, ip
 800bff6:	601a      	str	r2, [r3, #0]
 800bff8:	0023      	movs	r3, r4
 800bffa:	041b      	lsls	r3, r3, #16
 800bffc:	22b0      	movs	r2, #176	; 0xb0
 800bffe:	2108      	movs	r1, #8
 800c000:	1852      	adds	r2, r2, r1
 800c002:	2108      	movs	r1, #8
 800c004:	468c      	mov	ip, r1
 800c006:	44bc      	add	ip, r7
 800c008:	4462      	add	r2, ip
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	23b0      	movs	r3, #176	; 0xb0
 800c00e:	2208      	movs	r2, #8
 800c010:	189b      	adds	r3, r3, r2
 800c012:	2208      	movs	r2, #8
 800c014:	4694      	mov	ip, r2
 800c016:	44bc      	add	ip, r7
 800c018:	4463      	add	r3, ip
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	6838      	ldr	r0, [r7, #0]
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	1812      	adds	r2, r2, r0
 800c024:	414b      	adcs	r3, r1
 800c026:	60ba      	str	r2, [r7, #8]
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	4972      	ldr	r1, [pc, #456]	; (800c1f4 <ReadAndSetConfig+0x1038>)
 800c02c:	1989      	adds	r1, r1, r6
 800c02e:	20c8      	movs	r0, #200	; 0xc8
 800c030:	4684      	mov	ip, r0
 800c032:	2308      	movs	r3, #8
 800c034:	4698      	mov	r8, r3
 800c036:	2308      	movs	r3, #8
 800c038:	4699      	mov	r9, r3
 800c03a:	44b9      	add	r9, r7
 800c03c:	44c8      	add	r8, r9
 800c03e:	44c4      	add	ip, r8
 800c040:	4461      	add	r1, ip
 800c042:	7dc9      	ldrb	r1, [r1, #23]
 800c044:	62b9      	str	r1, [r7, #40]	; 0x28
 800c046:	2100      	movs	r1, #0
 800c048:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c04a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800c04c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c04e:	0021      	movs	r1, r4
 800c050:	0e09      	lsrs	r1, r1, #24
 800c052:	0028      	movs	r0, r5
 800c054:	0200      	lsls	r0, r0, #8
 800c056:	23ac      	movs	r3, #172	; 0xac
 800c058:	2208      	movs	r2, #8
 800c05a:	189b      	adds	r3, r3, r2
 800c05c:	2208      	movs	r2, #8
 800c05e:	4694      	mov	ip, r2
 800c060:	44bc      	add	ip, r7
 800c062:	4463      	add	r3, ip
 800c064:	6018      	str	r0, [r3, #0]
 800c066:	20ac      	movs	r0, #172	; 0xac
 800c068:	2308      	movs	r3, #8
 800c06a:	18c3      	adds	r3, r0, r3
 800c06c:	2208      	movs	r2, #8
 800c06e:	18ba      	adds	r2, r7, r2
 800c070:	1898      	adds	r0, r3, r2
 800c072:	6800      	ldr	r0, [r0, #0]
 800c074:	4308      	orrs	r0, r1
 800c076:	21ac      	movs	r1, #172	; 0xac
 800c078:	2308      	movs	r3, #8
 800c07a:	18cb      	adds	r3, r1, r3
 800c07c:	2208      	movs	r2, #8
 800c07e:	18ba      	adds	r2, r7, r2
 800c080:	1899      	adds	r1, r3, r2
 800c082:	6008      	str	r0, [r1, #0]
 800c084:	0021      	movs	r1, r4
 800c086:	0209      	lsls	r1, r1, #8
 800c088:	20a8      	movs	r0, #168	; 0xa8
 800c08a:	2308      	movs	r3, #8
 800c08c:	18c3      	adds	r3, r0, r3
 800c08e:	2208      	movs	r2, #8
 800c090:	18ba      	adds	r2, r7, r2
 800c092:	1898      	adds	r0, r3, r2
 800c094:	6001      	str	r1, [r0, #0]
 800c096:	21a8      	movs	r1, #168	; 0xa8
 800c098:	2308      	movs	r3, #8
 800c09a:	18cb      	adds	r3, r1, r3
 800c09c:	2208      	movs	r2, #8
 800c09e:	18ba      	adds	r2, r7, r2
 800c0a0:	1899      	adds	r1, r3, r2
 800c0a2:	6808      	ldr	r0, [r1, #0]
 800c0a4:	6849      	ldr	r1, [r1, #4]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	1812      	adds	r2, r2, r0
 800c0ac:	414b      	adcs	r3, r1
 800c0ae:	4951      	ldr	r1, [pc, #324]	; (800c1f4 <ReadAndSetConfig+0x1038>)
 800c0b0:	1989      	adds	r1, r1, r6
 800c0b2:	20c8      	movs	r0, #200	; 0xc8
 800c0b4:	4684      	mov	ip, r0
 800c0b6:	2008      	movs	r0, #8
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	2008      	movs	r0, #8
 800c0bc:	4681      	mov	r9, r0
 800c0be:	44b9      	add	r9, r7
 800c0c0:	44c8      	add	r8, r9
 800c0c2:	44c4      	add	ip, r8
 800c0c4:	4461      	add	r1, ip
 800c0c6:	7e09      	ldrb	r1, [r1, #24]
 800c0c8:	6239      	str	r1, [r7, #32]
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	6279      	str	r1, [r7, #36]	; 0x24
 800c0ce:	6a38      	ldr	r0, [r7, #32]
 800c0d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0d2:	1812      	adds	r2, r2, r0
 800c0d4:	414b      	adcs	r3, r1
 800c0d6:	4948      	ldr	r1, [pc, #288]	; (800c1f8 <ReadAndSetConfig+0x103c>)
 800c0d8:	600a      	str	r2, [r1, #0]
 800c0da:	604b      	str	r3, [r1, #4]
		break;
 800c0dc:	e154      	b.n	800c388 <ReadAndSetConfig+0x11cc>
	case 3: // SONY12
		to_hex(copy_config.sSetIR, 0);
 800c0de:	23cc      	movs	r3, #204	; 0xcc
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	189b      	adds	r3, r3, r2
 800c0e4:	2208      	movs	r2, #8
 800c0e6:	4694      	mov	ip, r2
 800c0e8:	44bc      	add	ip, r7
 800c0ea:	4463      	add	r3, ip
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	0018      	movs	r0, r3
 800c0f2:	f00c fd59 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 3; i++)
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	4a40      	ldr	r2, [pc, #256]	; (800c1fc <ReadAndSetConfig+0x1040>)
 800c0fa:	21c8      	movs	r1, #200	; 0xc8
 800c0fc:	1852      	adds	r2, r2, r1
 800c0fe:	2108      	movs	r1, #8
 800c100:	468c      	mov	ip, r1
 800c102:	2108      	movs	r1, #8
 800c104:	4688      	mov	r8, r1
 800c106:	44b8      	add	r8, r7
 800c108:	44c4      	add	ip, r8
 800c10a:	4462      	add	r2, ip
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	e049      	b.n	800c1a4 <ReadAndSetConfig+0xfe8>
			copy_config.sSetIR[i] = copy_config.sSetIR[2 * i + 1];
 800c110:	483a      	ldr	r0, [pc, #232]	; (800c1fc <ReadAndSetConfig+0x1040>)
 800c112:	23c8      	movs	r3, #200	; 0xc8
 800c114:	18c3      	adds	r3, r0, r3
 800c116:	2208      	movs	r2, #8
 800c118:	4694      	mov	ip, r2
 800c11a:	2208      	movs	r2, #8
 800c11c:	4690      	mov	r8, r2
 800c11e:	44b8      	add	r8, r7
 800c120:	44c4      	add	ip, r8
 800c122:	4463      	add	r3, ip
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	3301      	adds	r3, #1
 800c12a:	4a32      	ldr	r2, [pc, #200]	; (800c1f4 <ReadAndSetConfig+0x1038>)
 800c12c:	2498      	movs	r4, #152	; 0x98
 800c12e:	00e4      	lsls	r4, r4, #3
 800c130:	1912      	adds	r2, r2, r4
 800c132:	21c8      	movs	r1, #200	; 0xc8
 800c134:	468c      	mov	ip, r1
 800c136:	2108      	movs	r1, #8
 800c138:	4688      	mov	r8, r1
 800c13a:	2108      	movs	r1, #8
 800c13c:	4689      	mov	r9, r1
 800c13e:	44b9      	add	r9, r7
 800c140:	44c8      	add	r8, r9
 800c142:	44c4      	add	ip, r8
 800c144:	4462      	add	r2, ip
 800c146:	18d3      	adds	r3, r2, r3
 800c148:	7919      	ldrb	r1, [r3, #4]
 800c14a:	4b2a      	ldr	r3, [pc, #168]	; (800c1f4 <ReadAndSetConfig+0x1038>)
 800c14c:	191b      	adds	r3, r3, r4
 800c14e:	22c8      	movs	r2, #200	; 0xc8
 800c150:	2408      	movs	r4, #8
 800c152:	1912      	adds	r2, r2, r4
 800c154:	2408      	movs	r4, #8
 800c156:	46a4      	mov	ip, r4
 800c158:	44bc      	add	ip, r7
 800c15a:	4462      	add	r2, ip
 800c15c:	189a      	adds	r2, r3, r2
 800c15e:	23c8      	movs	r3, #200	; 0xc8
 800c160:	18c3      	adds	r3, r0, r3
 800c162:	2408      	movs	r4, #8
 800c164:	46a4      	mov	ip, r4
 800c166:	2408      	movs	r4, #8
 800c168:	46a0      	mov	r8, r4
 800c16a:	44b8      	add	r8, r7
 800c16c:	44c4      	add	ip, r8
 800c16e:	4463      	add	r3, ip
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	18d3      	adds	r3, r2, r3
 800c174:	3304      	adds	r3, #4
 800c176:	1c0a      	adds	r2, r1, #0
 800c178:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3; i++)
 800c17a:	23c8      	movs	r3, #200	; 0xc8
 800c17c:	18c3      	adds	r3, r0, r3
 800c17e:	2208      	movs	r2, #8
 800c180:	4694      	mov	ip, r2
 800c182:	2208      	movs	r2, #8
 800c184:	4690      	mov	r8, r2
 800c186:	44b8      	add	r8, r7
 800c188:	44c4      	add	ip, r8
 800c18a:	4463      	add	r3, ip
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	3301      	adds	r3, #1
 800c190:	22c8      	movs	r2, #200	; 0xc8
 800c192:	1882      	adds	r2, r0, r2
 800c194:	2108      	movs	r1, #8
 800c196:	468c      	mov	ip, r1
 800c198:	2108      	movs	r1, #8
 800c19a:	4688      	mov	r8, r1
 800c19c:	44b8      	add	r8, r7
 800c19e:	44c4      	add	ip, r8
 800c1a0:	4462      	add	r2, ip
 800c1a2:	6013      	str	r3, [r2, #0]
 800c1a4:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <ReadAndSetConfig+0x1040>)
 800c1a6:	22c8      	movs	r2, #200	; 0xc8
 800c1a8:	189b      	adds	r3, r3, r2
 800c1aa:	2208      	movs	r2, #8
 800c1ac:	4694      	mov	ip, r2
 800c1ae:	2208      	movs	r2, #8
 800c1b0:	4690      	mov	r8, r2
 800c1b2:	44b8      	add	r8, r7
 800c1b4:	44c4      	add	ip, r8
 800c1b6:	4463      	add	r3, ip
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b02      	cmp	r3, #2
 800c1bc:	dda8      	ble.n	800c110 <ReadAndSetConfig+0xf54>
		to_hex(copy_config.sSetIROFF, 0);
 800c1be:	23cc      	movs	r3, #204	; 0xcc
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	189b      	adds	r3, r3, r2
 800c1c4:	2208      	movs	r2, #8
 800c1c6:	4694      	mov	ip, r2
 800c1c8:	44bc      	add	ip, r7
 800c1ca:	4463      	add	r3, ip
 800c1cc:	3313      	adds	r3, #19
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f00c fce9 	bl	8018ba8 <to_hex>
		for (int i = 0; i < 3; i++)
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2292      	movs	r2, #146	; 0x92
 800c1da:	00d2      	lsls	r2, r2, #3
 800c1dc:	21c8      	movs	r1, #200	; 0xc8
 800c1de:	1852      	adds	r2, r2, r1
 800c1e0:	2108      	movs	r1, #8
 800c1e2:	468c      	mov	ip, r1
 800c1e4:	2108      	movs	r1, #8
 800c1e6:	4688      	mov	r8, r1
 800c1e8:	44b8      	add	r8, r7
 800c1ea:	44c4      	add	ip, r8
 800c1ec:	4462      	add	r2, ip
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	e051      	b.n	800c296 <ReadAndSetConfig+0x10da>
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	fffffb44 	.word	0xfffffb44
 800c1f8:	20006728 	.word	0x20006728
 800c1fc:	00000494 	.word	0x00000494
			copy_config.sSetIROFF[i] = copy_config.sSetIROFF[2 * i + 1];
 800c200:	2092      	movs	r0, #146	; 0x92
 800c202:	00c0      	lsls	r0, r0, #3
 800c204:	23c8      	movs	r3, #200	; 0xc8
 800c206:	18c3      	adds	r3, r0, r3
 800c208:	2208      	movs	r2, #8
 800c20a:	4694      	mov	ip, r2
 800c20c:	2208      	movs	r2, #8
 800c20e:	4690      	mov	r8, r2
 800c210:	44b8      	add	r8, r7
 800c212:	44c4      	add	ip, r8
 800c214:	4463      	add	r3, ip
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	3301      	adds	r3, #1
 800c21c:	4ace      	ldr	r2, [pc, #824]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c21e:	2498      	movs	r4, #152	; 0x98
 800c220:	00e4      	lsls	r4, r4, #3
 800c222:	1912      	adds	r2, r2, r4
 800c224:	21c8      	movs	r1, #200	; 0xc8
 800c226:	468c      	mov	ip, r1
 800c228:	2108      	movs	r1, #8
 800c22a:	4688      	mov	r8, r1
 800c22c:	2108      	movs	r1, #8
 800c22e:	4689      	mov	r9, r1
 800c230:	44b9      	add	r9, r7
 800c232:	44c8      	add	r8, r9
 800c234:	44c4      	add	ip, r8
 800c236:	4462      	add	r2, ip
 800c238:	18d3      	adds	r3, r2, r3
 800c23a:	7cd9      	ldrb	r1, [r3, #19]
 800c23c:	4bc6      	ldr	r3, [pc, #792]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c23e:	191b      	adds	r3, r3, r4
 800c240:	22c8      	movs	r2, #200	; 0xc8
 800c242:	2408      	movs	r4, #8
 800c244:	1912      	adds	r2, r2, r4
 800c246:	2408      	movs	r4, #8
 800c248:	46a4      	mov	ip, r4
 800c24a:	44bc      	add	ip, r7
 800c24c:	4462      	add	r2, ip
 800c24e:	189a      	adds	r2, r3, r2
 800c250:	23c8      	movs	r3, #200	; 0xc8
 800c252:	18c3      	adds	r3, r0, r3
 800c254:	2408      	movs	r4, #8
 800c256:	46a4      	mov	ip, r4
 800c258:	2408      	movs	r4, #8
 800c25a:	46a0      	mov	r8, r4
 800c25c:	44b8      	add	r8, r7
 800c25e:	44c4      	add	ip, r8
 800c260:	4463      	add	r3, ip
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	18d3      	adds	r3, r2, r3
 800c266:	3313      	adds	r3, #19
 800c268:	1c0a      	adds	r2, r1, #0
 800c26a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3; i++)
 800c26c:	23c8      	movs	r3, #200	; 0xc8
 800c26e:	18c3      	adds	r3, r0, r3
 800c270:	2208      	movs	r2, #8
 800c272:	4694      	mov	ip, r2
 800c274:	2208      	movs	r2, #8
 800c276:	4690      	mov	r8, r2
 800c278:	44b8      	add	r8, r7
 800c27a:	44c4      	add	ip, r8
 800c27c:	4463      	add	r3, ip
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3301      	adds	r3, #1
 800c282:	22c8      	movs	r2, #200	; 0xc8
 800c284:	1882      	adds	r2, r0, r2
 800c286:	2108      	movs	r1, #8
 800c288:	468c      	mov	ip, r1
 800c28a:	2108      	movs	r1, #8
 800c28c:	4688      	mov	r8, r1
 800c28e:	44b8      	add	r8, r7
 800c290:	44c4      	add	ip, r8
 800c292:	4462      	add	r2, ip
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	2392      	movs	r3, #146	; 0x92
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	22c8      	movs	r2, #200	; 0xc8
 800c29c:	189b      	adds	r3, r3, r2
 800c29e:	2208      	movs	r2, #8
 800c2a0:	4694      	mov	ip, r2
 800c2a2:	2208      	movs	r2, #8
 800c2a4:	4690      	mov	r8, r2
 800c2a6:	44b8      	add	r8, r7
 800c2a8:	44c4      	add	ip, r8
 800c2aa:	4463      	add	r3, ip
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	dda6      	ble.n	800c200 <ReadAndSetConfig+0x1044>

		code_ON[0] = ((uint16_t)(copy_config.sSetIR[0]) << 16) + ((uint32_t)(copy_config.sSetIR[1]) << 8) + copy_config.sSetIR[2]; // full_ir_code_from_db;//
 800c2b2:	4ba9      	ldr	r3, [pc, #676]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c2b4:	2098      	movs	r0, #152	; 0x98
 800c2b6:	00c0      	lsls	r0, r0, #3
 800c2b8:	181b      	adds	r3, r3, r0
 800c2ba:	22c8      	movs	r2, #200	; 0xc8
 800c2bc:	4694      	mov	ip, r2
 800c2be:	2208      	movs	r2, #8
 800c2c0:	4690      	mov	r8, r2
 800c2c2:	2208      	movs	r2, #8
 800c2c4:	4691      	mov	r9, r2
 800c2c6:	44b9      	add	r9, r7
 800c2c8:	44c8      	add	r8, r9
 800c2ca:	44c4      	add	ip, r8
 800c2cc:	4463      	add	r3, ip
 800c2ce:	791b      	ldrb	r3, [r3, #4]
 800c2d0:	041b      	lsls	r3, r3, #16
 800c2d2:	001a      	movs	r2, r3
 800c2d4:	4ba0      	ldr	r3, [pc, #640]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c2d6:	181b      	adds	r3, r3, r0
 800c2d8:	21c8      	movs	r1, #200	; 0xc8
 800c2da:	468c      	mov	ip, r1
 800c2dc:	2108      	movs	r1, #8
 800c2de:	4688      	mov	r8, r1
 800c2e0:	2108      	movs	r1, #8
 800c2e2:	4689      	mov	r9, r1
 800c2e4:	44b9      	add	r9, r7
 800c2e6:	44c8      	add	r8, r9
 800c2e8:	44c4      	add	ip, r8
 800c2ea:	4463      	add	r3, ip
 800c2ec:	795b      	ldrb	r3, [r3, #5]
 800c2ee:	021b      	lsls	r3, r3, #8
 800c2f0:	18d3      	adds	r3, r2, r3
 800c2f2:	4a99      	ldr	r2, [pc, #612]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c2f4:	1812      	adds	r2, r2, r0
 800c2f6:	21c8      	movs	r1, #200	; 0xc8
 800c2f8:	468c      	mov	ip, r1
 800c2fa:	2108      	movs	r1, #8
 800c2fc:	4688      	mov	r8, r1
 800c2fe:	2108      	movs	r1, #8
 800c300:	4689      	mov	r9, r1
 800c302:	44b9      	add	r9, r7
 800c304:	44c8      	add	r8, r9
 800c306:	44c4      	add	ip, r8
 800c308:	4462      	add	r2, ip
 800c30a:	7992      	ldrb	r2, [r2, #6]
 800c30c:	189b      	adds	r3, r3, r2
 800c30e:	61bb      	str	r3, [r7, #24]
 800c310:	2300      	movs	r3, #0
 800c312:	61fb      	str	r3, [r7, #28]
 800c314:	4b91      	ldr	r3, [pc, #580]	; (800c55c <ReadAndSetConfig+0x13a0>)
 800c316:	69b9      	ldr	r1, [r7, #24]
 800c318:	69fa      	ldr	r2, [r7, #28]
 800c31a:	6019      	str	r1, [r3, #0]
 800c31c:	605a      	str	r2, [r3, #4]
		code_OFF[0] = ((uint16_t)(copy_config.sSetIROFF[0]) << 16) + ((uint32_t)(copy_config.sSetIROFF[1]) << 8) + copy_config.sSetIROFF[2];
 800c31e:	4b8e      	ldr	r3, [pc, #568]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c320:	181b      	adds	r3, r3, r0
 800c322:	22c8      	movs	r2, #200	; 0xc8
 800c324:	4694      	mov	ip, r2
 800c326:	2208      	movs	r2, #8
 800c328:	4690      	mov	r8, r2
 800c32a:	2208      	movs	r2, #8
 800c32c:	4691      	mov	r9, r2
 800c32e:	44b9      	add	r9, r7
 800c330:	44c8      	add	r8, r9
 800c332:	44c4      	add	ip, r8
 800c334:	4463      	add	r3, ip
 800c336:	7cdb      	ldrb	r3, [r3, #19]
 800c338:	041b      	lsls	r3, r3, #16
 800c33a:	001a      	movs	r2, r3
 800c33c:	4b86      	ldr	r3, [pc, #536]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c33e:	181b      	adds	r3, r3, r0
 800c340:	21c8      	movs	r1, #200	; 0xc8
 800c342:	468c      	mov	ip, r1
 800c344:	2108      	movs	r1, #8
 800c346:	4688      	mov	r8, r1
 800c348:	2108      	movs	r1, #8
 800c34a:	4689      	mov	r9, r1
 800c34c:	44b9      	add	r9, r7
 800c34e:	44c8      	add	r8, r9
 800c350:	44c4      	add	ip, r8
 800c352:	4463      	add	r3, ip
 800c354:	7d1b      	ldrb	r3, [r3, #20]
 800c356:	021b      	lsls	r3, r3, #8
 800c358:	18d3      	adds	r3, r2, r3
 800c35a:	4a7f      	ldr	r2, [pc, #508]	; (800c558 <ReadAndSetConfig+0x139c>)
 800c35c:	1812      	adds	r2, r2, r0
 800c35e:	21c8      	movs	r1, #200	; 0xc8
 800c360:	468c      	mov	ip, r1
 800c362:	2108      	movs	r1, #8
 800c364:	4688      	mov	r8, r1
 800c366:	2108      	movs	r1, #8
 800c368:	4689      	mov	r9, r1
 800c36a:	44b9      	add	r9, r7
 800c36c:	44c8      	add	r8, r9
 800c36e:	44c4      	add	ip, r8
 800c370:	4462      	add	r2, ip
 800c372:	7d52      	ldrb	r2, [r2, #21]
 800c374:	189b      	adds	r3, r3, r2
 800c376:	613b      	str	r3, [r7, #16]
 800c378:	2300      	movs	r3, #0
 800c37a:	617b      	str	r3, [r7, #20]
 800c37c:	4b78      	ldr	r3, [pc, #480]	; (800c560 <ReadAndSetConfig+0x13a4>)
 800c37e:	6939      	ldr	r1, [r7, #16]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	6019      	str	r1, [r3, #0]
 800c384:	605a      	str	r2, [r3, #4]

		break;
 800c386:	46c0      	nop			; (mov r8, r8)
	}

	loopon = pcb_config.loopon;
 800c388:	4a76      	ldr	r2, [pc, #472]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c38a:	2381      	movs	r3, #129	; 0x81
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	5cd2      	ldrb	r2, [r2, r3]
 800c390:	4b75      	ldr	r3, [pc, #468]	; (800c568 <ReadAndSetConfig+0x13ac>)
 800c392:	701a      	strb	r2, [r3, #0]
	loopoff = pcb_config.loopoff;
 800c394:	4a73      	ldr	r2, [pc, #460]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c396:	2304      	movs	r3, #4
 800c398:	33ff      	adds	r3, #255	; 0xff
 800c39a:	5cd2      	ldrb	r2, [r2, r3]
 800c39c:	4b73      	ldr	r3, [pc, #460]	; (800c56c <ReadAndSetConfig+0x13b0>)
 800c39e:	701a      	strb	r2, [r3, #0]
	looptime = pcb_config.looptime;
 800c3a0:	4a70      	ldr	r2, [pc, #448]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c3a2:	2382      	movs	r3, #130	; 0x82
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	5cd2      	ldrb	r2, [r2, r3]
 800c3a8:	4b71      	ldr	r3, [pc, #452]	; (800c570 <ReadAndSetConfig+0x13b4>)
 800c3aa:	701a      	strb	r2, [r3, #0]

	memcpy(&gWIZNETINFO.mac, &pcb_config.mac, 6);
 800c3ac:	4971      	ldr	r1, [pc, #452]	; (800c574 <ReadAndSetConfig+0x13b8>)
 800c3ae:	4a6d      	ldr	r2, [pc, #436]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c3b0:	2306      	movs	r3, #6
 800c3b2:	33ff      	adds	r3, #255	; 0xff
 800c3b4:	0008      	movs	r0, r1
 800c3b6:	18d3      	adds	r3, r2, r3
 800c3b8:	2206      	movs	r2, #6
 800c3ba:	0019      	movs	r1, r3
 800c3bc:	f017 fad4 	bl	8023968 <memcpy>
	memcpy(&gWIZNETINFO.dns, &pcb_config.dns, 4);
 800c3c0:	496c      	ldr	r1, [pc, #432]	; (800c574 <ReadAndSetConfig+0x13b8>)
 800c3c2:	2012      	movs	r0, #18
 800c3c4:	4a67      	ldr	r2, [pc, #412]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c3c6:	2318      	movs	r3, #24
 800c3c8:	33ff      	adds	r3, #255	; 0xff
 800c3ca:	1808      	adds	r0, r1, r0
 800c3cc:	18d3      	adds	r3, r2, r3
 800c3ce:	2204      	movs	r2, #4
 800c3d0:	0019      	movs	r1, r3
 800c3d2:	f017 fac9 	bl	8023968 <memcpy>
	memcpy(&gWIZNETINFO.gw, &pcb_config.gw, 4);
 800c3d6:	4967      	ldr	r1, [pc, #412]	; (800c574 <ReadAndSetConfig+0x13b8>)
 800c3d8:	200e      	movs	r0, #14
 800c3da:	4a62      	ldr	r2, [pc, #392]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c3dc:	2314      	movs	r3, #20
 800c3de:	33ff      	adds	r3, #255	; 0xff
 800c3e0:	1808      	adds	r0, r1, r0
 800c3e2:	18d3      	adds	r3, r2, r3
 800c3e4:	2204      	movs	r2, #4
 800c3e6:	0019      	movs	r1, r3
 800c3e8:	f017 fabe 	bl	8023968 <memcpy>
	memcpy(&gWIZNETINFO.ip, &pcb_config.ip, 4);
 800c3ec:	4961      	ldr	r1, [pc, #388]	; (800c574 <ReadAndSetConfig+0x13b8>)
 800c3ee:	2006      	movs	r0, #6
 800c3f0:	4a5c      	ldr	r2, [pc, #368]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c3f2:	230c      	movs	r3, #12
 800c3f4:	33ff      	adds	r3, #255	; 0xff
 800c3f6:	1808      	adds	r0, r1, r0
 800c3f8:	18d3      	adds	r3, r2, r3
 800c3fa:	2204      	movs	r2, #4
 800c3fc:	0019      	movs	r1, r3
 800c3fe:	f017 fab3 	bl	8023968 <memcpy>
	memcpy(&gWIZNETINFO.sn, &pcb_config.sn, 4);
 800c402:	495c      	ldr	r1, [pc, #368]	; (800c574 <ReadAndSetConfig+0x13b8>)
 800c404:	200a      	movs	r0, #10
 800c406:	4a57      	ldr	r2, [pc, #348]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c408:	2310      	movs	r3, #16
 800c40a:	33ff      	adds	r3, #255	; 0xff
 800c40c:	1808      	adds	r0, r1, r0
 800c40e:	18d3      	adds	r3, r2, r3
 800c410:	2204      	movs	r2, #4
 800c412:	0019      	movs	r1, r3
 800c414:	f017 faa8 	bl	8023968 <memcpy>
 800c418:	4a52      	ldr	r2, [pc, #328]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c41a:	231c      	movs	r3, #28
 800c41c:	33ff      	adds	r3, #255	; 0xff
 800c41e:	5cd2      	ldrb	r2, [r2, r3]
	memcpy(&gWIZNETINFO.dhcp, &pcb_config.dhcp, 1);
 800c420:	4b54      	ldr	r3, [pc, #336]	; (800c574 <ReadAndSetConfig+0x13b8>)
 800c422:	759a      	strb	r2, [r3, #22]

	onSwitch = pcb_config.pcb_config_onSwitch;
 800c424:	4a4f      	ldr	r2, [pc, #316]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c426:	238e      	movs	r3, #142	; 0x8e
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	5cd2      	ldrb	r2, [r2, r3]
 800c42c:	4b52      	ldr	r3, [pc, #328]	; (800c578 <ReadAndSetConfig+0x13bc>)
 800c42e:	701a      	strb	r2, [r3, #0]
	onDateTime = pcb_config.pcb_config_onDateTime;
 800c430:	4a4c      	ldr	r2, [pc, #304]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c432:	2390      	movs	r3, #144	; 0x90
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	58d2      	ldr	r2, [r2, r3]
 800c438:	4b50      	ldr	r3, [pc, #320]	; (800c57c <ReadAndSetConfig+0x13c0>)
 800c43a:	601a      	str	r2, [r3, #0]
	offSwitch = pcb_config.pcb_config_offSwitch;
 800c43c:	4a49      	ldr	r2, [pc, #292]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c43e:	2392      	movs	r3, #146	; 0x92
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	5cd2      	ldrb	r2, [r2, r3]
 800c444:	4b4e      	ldr	r3, [pc, #312]	; (800c580 <ReadAndSetConfig+0x13c4>)
 800c446:	701a      	strb	r2, [r3, #0]
	offDateTime = pcb_config.pcb_config_offDateTime;
 800c448:	4a46      	ldr	r2, [pc, #280]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c44a:	2394      	movs	r3, #148	; 0x94
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	58d2      	ldr	r2, [r2, r3]
 800c450:	4b4c      	ldr	r3, [pc, #304]	; (800c584 <ReadAndSetConfig+0x13c8>)
 800c452:	601a      	str	r2, [r3, #0]
	timezone = pcb_config.pcb_config_timezone;
 800c454:	4a43      	ldr	r2, [pc, #268]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c456:	2396      	movs	r3, #150	; 0x96
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	5cd2      	ldrb	r2, [r2, r3]
 800c45c:	4b4a      	ldr	r3, [pc, #296]	; (800c588 <ReadAndSetConfig+0x13cc>)
 800c45e:	701a      	strb	r2, [r3, #0]

	time_alarm_on_hh = pcb_config.pcb_config_time_alarm_on_hh;
 800c460:	4a40      	ldr	r2, [pc, #256]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c462:	23b4      	movs	r3, #180	; 0xb4
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	5cd2      	ldrb	r2, [r2, r3]
 800c468:	4b48      	ldr	r3, [pc, #288]	; (800c58c <ReadAndSetConfig+0x13d0>)
 800c46a:	701a      	strb	r2, [r3, #0]
	time_alarm_on_mm = pcb_config.pcb_config_time_alarm_on_mm;
 800c46c:	4a3d      	ldr	r2, [pc, #244]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c46e:	236a      	movs	r3, #106	; 0x6a
 800c470:	33ff      	adds	r3, #255	; 0xff
 800c472:	5cd2      	ldrb	r2, [r2, r3]
 800c474:	4b46      	ldr	r3, [pc, #280]	; (800c590 <ReadAndSetConfig+0x13d4>)
 800c476:	701a      	strb	r2, [r3, #0]
	time_alarm_off_hh = pcb_config.pcb_config_time_alarm_off_hh;
 800c478:	4a3a      	ldr	r2, [pc, #232]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c47a:	23b5      	movs	r3, #181	; 0xb5
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	5cd2      	ldrb	r2, [r2, r3]
 800c480:	4b44      	ldr	r3, [pc, #272]	; (800c594 <ReadAndSetConfig+0x13d8>)
 800c482:	701a      	strb	r2, [r3, #0]
	time_alarm_off_mm = pcb_config.pcb_config_time_alarm_off_mm;
 800c484:	4a37      	ldr	r2, [pc, #220]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c486:	236c      	movs	r3, #108	; 0x6c
 800c488:	33ff      	adds	r3, #255	; 0xff
 800c48a:	5cd2      	ldrb	r2, [r2, r3]
 800c48c:	4b42      	ldr	r3, [pc, #264]	; (800c598 <ReadAndSetConfig+0x13dc>)
 800c48e:	701a      	strb	r2, [r3, #0]

	memcpy(Recursion_Alarm_ON, pcb_config.pcb_config_Recursion_Alarm_ON, sizeof(Recursion_Alarm_ON));
 800c490:	4a42      	ldr	r2, [pc, #264]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c492:	4934      	ldr	r1, [pc, #208]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c494:	2398      	movs	r3, #152	; 0x98
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	18cb      	adds	r3, r1, r3
 800c49a:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c49c:	c213      	stmia	r2!, {r0, r1, r4}
 800c49e:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c4a0:	c213      	stmia	r2!, {r0, r1, r4}
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6013      	str	r3, [r2, #0]
	memcpy(Recursion_Alarm_OFF, pcb_config.pcb_config_Recursion_Alarm_OFF, sizeof(Recursion_Alarm_OFF));
 800c4a6:	4a3e      	ldr	r2, [pc, #248]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c4a8:	492e      	ldr	r1, [pc, #184]	; (800c564 <ReadAndSetConfig+0x13a8>)
 800c4aa:	23a6      	movs	r3, #166	; 0xa6
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	18cb      	adds	r3, r1, r3
 800c4b0:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c4b2:	c213      	stmia	r2!, {r0, r1, r4}
 800c4b4:	cb13      	ldmia	r3!, {r0, r1, r4}
 800c4b6:	c213      	stmia	r2!, {r0, r1, r4}
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6013      	str	r3, [r2, #0]

	time_alarm_on_sun = Recursion_Alarm_ON[0];
 800c4bc:	4b37      	ldr	r3, [pc, #220]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	4b38      	ldr	r3, [pc, #224]	; (800c5a4 <ReadAndSetConfig+0x13e8>)
 800c4c4:	701a      	strb	r2, [r3, #0]
	time_alarm_on_mon = Recursion_Alarm_ON[1];
 800c4c6:	4b35      	ldr	r3, [pc, #212]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	4b36      	ldr	r3, [pc, #216]	; (800c5a8 <ReadAndSetConfig+0x13ec>)
 800c4ce:	701a      	strb	r2, [r3, #0]
	time_alarm_on_tue = Recursion_Alarm_ON[2];
 800c4d0:	4b32      	ldr	r3, [pc, #200]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	4b35      	ldr	r3, [pc, #212]	; (800c5ac <ReadAndSetConfig+0x13f0>)
 800c4d8:	701a      	strb	r2, [r3, #0]
	time_alarm_on_wed = Recursion_Alarm_ON[3];
 800c4da:	4b30      	ldr	r3, [pc, #192]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	4b33      	ldr	r3, [pc, #204]	; (800c5b0 <ReadAndSetConfig+0x13f4>)
 800c4e2:	701a      	strb	r2, [r3, #0]
	time_alarm_on_thu = Recursion_Alarm_ON[4];
 800c4e4:	4b2d      	ldr	r3, [pc, #180]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	4b32      	ldr	r3, [pc, #200]	; (800c5b4 <ReadAndSetConfig+0x13f8>)
 800c4ec:	701a      	strb	r2, [r3, #0]
	time_alarm_on_fri = Recursion_Alarm_ON[5];
 800c4ee:	4b2b      	ldr	r3, [pc, #172]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	4b30      	ldr	r3, [pc, #192]	; (800c5b8 <ReadAndSetConfig+0x13fc>)
 800c4f6:	701a      	strb	r2, [r3, #0]
	time_alarm_on_sat = Recursion_Alarm_ON[6];
 800c4f8:	4b28      	ldr	r3, [pc, #160]	; (800c59c <ReadAndSetConfig+0x13e0>)
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	b2da      	uxtb	r2, r3
 800c4fe:	4b2f      	ldr	r3, [pc, #188]	; (800c5bc <ReadAndSetConfig+0x1400>)
 800c500:	701a      	strb	r2, [r3, #0]

	time_alarm_off_sun = Recursion_Alarm_OFF[0];
 800c502:	4b27      	ldr	r3, [pc, #156]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	b2da      	uxtb	r2, r3
 800c508:	4b2d      	ldr	r3, [pc, #180]	; (800c5c0 <ReadAndSetConfig+0x1404>)
 800c50a:	701a      	strb	r2, [r3, #0]
	time_alarm_off_mon = Recursion_Alarm_OFF[1];
 800c50c:	4b24      	ldr	r3, [pc, #144]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	b2da      	uxtb	r2, r3
 800c512:	4b2c      	ldr	r3, [pc, #176]	; (800c5c4 <ReadAndSetConfig+0x1408>)
 800c514:	701a      	strb	r2, [r3, #0]
	time_alarm_off_tue = Recursion_Alarm_OFF[2];
 800c516:	4b22      	ldr	r3, [pc, #136]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	4b2a      	ldr	r3, [pc, #168]	; (800c5c8 <ReadAndSetConfig+0x140c>)
 800c51e:	701a      	strb	r2, [r3, #0]
	time_alarm_off_wed = Recursion_Alarm_OFF[3];
 800c520:	4b1f      	ldr	r3, [pc, #124]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	b2da      	uxtb	r2, r3
 800c526:	4b29      	ldr	r3, [pc, #164]	; (800c5cc <ReadAndSetConfig+0x1410>)
 800c528:	701a      	strb	r2, [r3, #0]
	time_alarm_off_thu = Recursion_Alarm_OFF[4];
 800c52a:	4b1d      	ldr	r3, [pc, #116]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	4b27      	ldr	r3, [pc, #156]	; (800c5d0 <ReadAndSetConfig+0x1414>)
 800c532:	701a      	strb	r2, [r3, #0]
	time_alarm_off_fri = Recursion_Alarm_OFF[5];
 800c534:	4b1a      	ldr	r3, [pc, #104]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	4b26      	ldr	r3, [pc, #152]	; (800c5d4 <ReadAndSetConfig+0x1418>)
 800c53c:	701a      	strb	r2, [r3, #0]
	time_alarm_off_sat = Recursion_Alarm_OFF[6];
 800c53e:	4b18      	ldr	r3, [pc, #96]	; (800c5a0 <ReadAndSetConfig+0x13e4>)
 800c540:	699b      	ldr	r3, [r3, #24]
 800c542:	b2da      	uxtb	r2, r3
 800c544:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <ReadAndSetConfig+0x141c>)
 800c546:	701a      	strb	r2, [r3, #0]
}
 800c548:	46c0      	nop			; (mov r8, r8)
 800c54a:	46bd      	mov	sp, r7
 800c54c:	4b23      	ldr	r3, [pc, #140]	; (800c5dc <ReadAndSetConfig+0x1420>)
 800c54e:	449d      	add	sp, r3
 800c550:	bcc0      	pop	{r6, r7}
 800c552:	46b9      	mov	r9, r7
 800c554:	46b0      	mov	r8, r6
 800c556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c558:	fffffb44 	.word	0xfffffb44
 800c55c:	20006720 	.word	0x20006720
 800c560:	20006728 	.word	0x20006728
 800c564:	20006db4 	.word	0x20006db4
 800c568:	20007e10 	.word	0x20007e10
 800c56c:	20007e11 	.word	0x20007e11
 800c570:	20007e12 	.word	0x20007e12
 800c574:	2000627c 	.word	0x2000627c
 800c578:	2000522c 	.word	0x2000522c
 800c57c:	20005230 	.word	0x20005230
 800c580:	20005234 	.word	0x20005234
 800c584:	20005238 	.word	0x20005238
 800c588:	2000523c 	.word	0x2000523c
 800c58c:	20006700 	.word	0x20006700
 800c590:	20006701 	.word	0x20006701
 800c594:	20006702 	.word	0x20006702
 800c598:	20006703 	.word	0x20006703
 800c59c:	20005240 	.word	0x20005240
 800c5a0:	2000525c 	.word	0x2000525c
 800c5a4:	20006704 	.word	0x20006704
 800c5a8:	20006705 	.word	0x20006705
 800c5ac:	20006706 	.word	0x20006706
 800c5b0:	20006707 	.word	0x20006707
 800c5b4:	20006708 	.word	0x20006708
 800c5b8:	20006709 	.word	0x20006709
 800c5bc:	2000670a 	.word	0x2000670a
 800c5c0:	2000670b 	.word	0x2000670b
 800c5c4:	2000670c 	.word	0x2000670c
 800c5c8:	2000670d 	.word	0x2000670d
 800c5cc:	2000670e 	.word	0x2000670e
 800c5d0:	2000670f 	.word	0x2000670f
 800c5d4:	20006710 	.word	0x20006710
 800c5d8:	20006711 	.word	0x20006711
 800c5dc:	0000059c 	.word	0x0000059c

0800c5e0 <Send>:

void Send(uint8_t data)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	0002      	movs	r2, r0
 800c5e8:	1dfb      	adds	r3, r7, #7
 800c5ea:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &data, 1, 100);
 800c5ec:	1df9      	adds	r1, r7, #7
 800c5ee:	4804      	ldr	r0, [pc, #16]	; (800c600 <Send+0x20>)
 800c5f0:	2364      	movs	r3, #100	; 0x64
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f008 fea6 	bl	8015344 <HAL_UART_Transmit>
}
 800c5f8:	46c0      	nop			; (mov r8, r8)
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	b002      	add	sp, #8
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	20006a90 	.word	0x20006a90

0800c604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c608:	b672      	cpsid	i
}
 800c60a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c60c:	e7fe      	b.n	800c60c <Error_Handler+0x8>
	...

0800c610 <Set_PIR_Delay_OFF>:
int PIR_Delay_OFF = NUMBER_OF_COUNTS_NO_MOTION;
/* Output*/
bool motion_detected = false;

void Set_PIR_Delay_OFF(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4)
{
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	0005      	movs	r5, r0
 800c618:	000c      	movs	r4, r1
 800c61a:	0010      	movs	r0, r2
 800c61c:	0019      	movs	r1, r3
 800c61e:	1dfb      	adds	r3, r7, #7
 800c620:	1c2a      	adds	r2, r5, #0
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	1dbb      	adds	r3, r7, #6
 800c626:	1c22      	adds	r2, r4, #0
 800c628:	701a      	strb	r2, [r3, #0]
 800c62a:	1d7b      	adds	r3, r7, #5
 800c62c:	1c02      	adds	r2, r0, #0
 800c62e:	701a      	strb	r2, [r3, #0]
 800c630:	1d3b      	adds	r3, r7, #4
 800c632:	1c0a      	adds	r2, r1, #0
 800c634:	701a      	strb	r2, [r3, #0]
	PIR_Delay_ON = (uint32_t)(byte1 << 24) + (uint32_t)(byte2 << 16) + (uint32_t)(byte3 << 8) + byte4;
 800c636:	1dfb      	adds	r3, r7, #7
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	061b      	lsls	r3, r3, #24
 800c63c:	001a      	movs	r2, r3
 800c63e:	1dbb      	adds	r3, r7, #6
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	041b      	lsls	r3, r3, #16
 800c644:	18d3      	adds	r3, r2, r3
 800c646:	1d7a      	adds	r2, r7, #5
 800c648:	7812      	ldrb	r2, [r2, #0]
 800c64a:	0212      	lsls	r2, r2, #8
 800c64c:	189a      	adds	r2, r3, r2
 800c64e:	1d3b      	adds	r3, r7, #4
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	18d3      	adds	r3, r2, r3
 800c654:	001a      	movs	r2, r3
 800c656:	4b03      	ldr	r3, [pc, #12]	; (800c664 <Set_PIR_Delay_OFF+0x54>)
 800c658:	601a      	str	r2, [r3, #0]
	;
}
 800c65a:	46c0      	nop			; (mov r8, r8)
 800c65c:	46bd      	mov	sp, r7
 800c65e:	b002      	add	sp, #8
 800c660:	bdb0      	pop	{r4, r5, r7, pc}
 800c662:	46c0      	nop			; (mov r8, r8)
 800c664:	2000501c 	.word	0x2000501c

0800c668 <Set_PIR_Delay_ON>:
void Set_PIR_Delay_ON(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4)
{
 800c668:	b5b0      	push	{r4, r5, r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	0005      	movs	r5, r0
 800c670:	000c      	movs	r4, r1
 800c672:	0010      	movs	r0, r2
 800c674:	0019      	movs	r1, r3
 800c676:	1dfb      	adds	r3, r7, #7
 800c678:	1c2a      	adds	r2, r5, #0
 800c67a:	701a      	strb	r2, [r3, #0]
 800c67c:	1dbb      	adds	r3, r7, #6
 800c67e:	1c22      	adds	r2, r4, #0
 800c680:	701a      	strb	r2, [r3, #0]
 800c682:	1d7b      	adds	r3, r7, #5
 800c684:	1c02      	adds	r2, r0, #0
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	1d3b      	adds	r3, r7, #4
 800c68a:	1c0a      	adds	r2, r1, #0
 800c68c:	701a      	strb	r2, [r3, #0]
	PIR_Delay_OFF = (uint32_t)(byte1 << 24) + (uint32_t)(byte2 << 16) + (uint32_t)(byte3 << 8) + byte4;
 800c68e:	1dfb      	adds	r3, r7, #7
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	061b      	lsls	r3, r3, #24
 800c694:	001a      	movs	r2, r3
 800c696:	1dbb      	adds	r3, r7, #6
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	041b      	lsls	r3, r3, #16
 800c69c:	18d3      	adds	r3, r2, r3
 800c69e:	1d7a      	adds	r2, r7, #5
 800c6a0:	7812      	ldrb	r2, [r2, #0]
 800c6a2:	0212      	lsls	r2, r2, #8
 800c6a4:	189a      	adds	r2, r3, r2
 800c6a6:	1d3b      	adds	r3, r7, #4
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	18d3      	adds	r3, r2, r3
 800c6ac:	001a      	movs	r2, r3
 800c6ae:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <Set_PIR_Delay_ON+0x54>)
 800c6b0:	601a      	str	r2, [r3, #0]
	;
}
 800c6b2:	46c0      	nop			; (mov r8, r8)
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	b002      	add	sp, #8
 800c6b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c6ba:	46c0      	nop			; (mov r8, r8)
 800c6bc:	20005020 	.word	0x20005020

0800c6c0 <Motion_Detection_Process>:

void Motion_Detection_Process()
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b088      	sub	sp, #32
 800c6c4:	af00      	add	r7, sp, #0
	/* State Machine switch */
	switch (motion_state_process)
 800c6c6:	4b7c      	ldr	r3, [pc, #496]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d100      	bne.n	800c6d0 <Motion_Detection_Process+0x10>
 800c6ce:	e07c      	b.n	800c7ca <Motion_Detection_Process+0x10a>
 800c6d0:	dd00      	ble.n	800c6d4 <Motion_Detection_Process+0x14>
 800c6d2:	e0e6      	b.n	800c8a2 <Motion_Detection_Process+0x1e2>
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <Motion_Detection_Process+0x1e>
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d00c      	beq.n	800c6f6 <Motion_Detection_Process+0x36>
 800c6dc:	e0e1      	b.n	800c8a2 <Motion_Detection_Process+0x1e2>
	{
	case INITMOT:
	{

		/* Next state -> NO_WATER */
		motion_state_process = NO_MOTION;
 800c6de:	4b76      	ldr	r3, [pc, #472]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	701a      	strb	r2, [r3, #0]

		/* By default, no water is detected */
		motion_detected = false;
 800c6e4:	4b75      	ldr	r3, [pc, #468]	; (800c8bc <Motion_Detection_Process+0x1fc>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	701a      	strb	r2, [r3, #0]

		/* Get t0 */
		motion_time = HAL_GetTick();
 800c6ea:	f002 fe53 	bl	800f394 <HAL_GetTick>
 800c6ee:	0002      	movs	r2, r0
 800c6f0:	4b73      	ldr	r3, [pc, #460]	; (800c8c0 <Motion_Detection_Process+0x200>)
 800c6f2:	601a      	str	r2, [r3, #0]

		break;
 800c6f4:	e0dc      	b.n	800c8b0 <Motion_Detection_Process+0x1f0>
	}

	case NO_MOTION:
	{
		/* If 100 ms has passed since t0 (10 Hz sampling) */
		if ((HAL_GetTick() - motion_time) >= TIME_INTERVAL)
 800c6f6:	f002 fe4d 	bl	800f394 <HAL_GetTick>
 800c6fa:	0002      	movs	r2, r0
 800c6fc:	4b70      	ldr	r3, [pc, #448]	; (800c8c0 <Motion_Detection_Process+0x200>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	220a      	movs	r2, #10
 800c704:	4293      	cmp	r3, r2
 800c706:	d200      	bcs.n	800c70a <Motion_Detection_Process+0x4a>
 800c708:	e0cf      	b.n	800c8aa <Motion_Detection_Process+0x1ea>
		{
			/* Reinitialize timer */
			motion_time = HAL_GetTick();
 800c70a:	f002 fe43 	bl	800f394 <HAL_GetTick>
 800c70e:	0002      	movs	r2, r0
 800c710:	4b6b      	ldr	r3, [pc, #428]	; (800c8c0 <Motion_Detection_Process+0x200>)
 800c712:	601a      	str	r2, [r3, #0]

			/* If Freq < LOW_FREQ water is present : increment counter */
			if ((HAL_GPIO_ReadPin(DETECT_GPIO_Port, DETECT_Pin) == GPIO_PIN_SET))
 800c714:	23a0      	movs	r3, #160	; 0xa0
 800c716:	05db      	lsls	r3, r3, #23
 800c718:	2140      	movs	r1, #64	; 0x40
 800c71a:	0018      	movs	r0, r3
 800c71c:	f004 fd04 	bl	8011128 <HAL_GPIO_ReadPin>
 800c720:	0003      	movs	r3, r0
 800c722:	2b01      	cmp	r3, #1
 800c724:	d108      	bne.n	800c738 <Motion_Detection_Process+0x78>
			{
				motion_counter++;
 800c726:	4b67      	ldr	r3, [pc, #412]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	4b65      	ldr	r3, [pc, #404]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c72e:	601a      	str	r2, [r3, #0]
				motion_state_process = NO_MOTION;
 800c730:	4b61      	ldr	r3, [pc, #388]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c732:	2201      	movs	r2, #1
 800c734:	701a      	strb	r2, [r3, #0]
 800c736:	e008      	b.n	800c74a <Motion_Detection_Process+0x8a>
			}

			/* Else restart the measuring */
			else
			{
				motion_counter = 0;
 800c738:	4b62      	ldr	r3, [pc, #392]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	601a      	str	r2, [r3, #0]
				motion_detected = false;
 800c73e:	4b5f      	ldr	r3, [pc, #380]	; (800c8bc <Motion_Detection_Process+0x1fc>)
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]

				motion_state_process = NO_MOTION;
 800c744:	4b5c      	ldr	r3, [pc, #368]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c746:	2201      	movs	r2, #1
 800c748:	701a      	strb	r2, [r3, #0]
			}

			/* When 5 consecutive readings are lower than LOW_FREQ water is present */

			int decthousand_min = (pcb_config.sPIRDelayON[0] - '0') * 1000;
 800c74a:	4b5f      	ldr	r3, [pc, #380]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c74c:	22ca      	movs	r2, #202	; 0xca
 800c74e:	5c9b      	ldrb	r3, [r3, r2]
 800c750:	3b30      	subs	r3, #48	; 0x30
 800c752:	001a      	movs	r2, r3
 800c754:	0013      	movs	r3, r2
 800c756:	015b      	lsls	r3, r3, #5
 800c758:	1a9b      	subs	r3, r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	189b      	adds	r3, r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	60fb      	str	r3, [r7, #12]
			int dechundred_min = (pcb_config.sPIRDelayON[1] - '0') * 100;
 800c762:	4b59      	ldr	r3, [pc, #356]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c764:	22cb      	movs	r2, #203	; 0xcb
 800c766:	5c9b      	ldrb	r3, [r3, r2]
 800c768:	3b30      	subs	r3, #48	; 0x30
 800c76a:	2264      	movs	r2, #100	; 0x64
 800c76c:	4353      	muls	r3, r2
 800c76e:	60bb      	str	r3, [r7, #8]
			int decten_min = (pcb_config.sPIRDelayON[2] - '0') * 10;
 800c770:	4b55      	ldr	r3, [pc, #340]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c772:	22cc      	movs	r2, #204	; 0xcc
 800c774:	5c9b      	ldrb	r3, [r3, r2]
 800c776:	3b30      	subs	r3, #48	; 0x30
 800c778:	001a      	movs	r2, r3
 800c77a:	0013      	movs	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	189b      	adds	r3, r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	607b      	str	r3, [r7, #4]
			int dec_min = (pcb_config.sPIRDelayON[3] - '0');
 800c784:	4b50      	ldr	r3, [pc, #320]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c786:	22cd      	movs	r2, #205	; 0xcd
 800c788:	5c9b      	ldrb	r3, [r3, r2]
 800c78a:	3b30      	subs	r3, #48	; 0x30
 800c78c:	603b      	str	r3, [r7, #0]
			PIR_Delay_ON = decthousand_min + dechundred_min + decten_min + dec_min;
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	18d2      	adds	r2, r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	18d2      	adds	r2, r2, r3
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	18d2      	adds	r2, r2, r3
 800c79c:	4b4b      	ldr	r3, [pc, #300]	; (800c8cc <Motion_Detection_Process+0x20c>)
 800c79e:	601a      	str	r2, [r3, #0]

			if (motion_counter >= PIR_Delay_ON)
 800c7a0:	4b48      	ldr	r3, [pc, #288]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	4b49      	ldr	r3, [pc, #292]	; (800c8cc <Motion_Detection_Process+0x20c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	da00      	bge.n	800c7ae <Motion_Detection_Process+0xee>
 800c7ac:	e07d      	b.n	800c8aa <Motion_Detection_Process+0x1ea>
			{
				motion_detected = true;
 800c7ae:	4b43      	ldr	r3, [pc, #268]	; (800c8bc <Motion_Detection_Process+0x1fc>)
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	701a      	strb	r2, [r3, #0]
				motion_state_process = MOTION;
 800c7b4:	4b40      	ldr	r3, [pc, #256]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	701a      	strb	r2, [r3, #0]
				motion_counter = 0;
 800c7ba:	4b42      	ldr	r3, [pc, #264]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
				IRSend_Var_True();
 800c7c0:	f7fa fad2 	bl	8006d68 <IRSend_Var_True>
				Send_Motion_Data(); // reply through uart
 800c7c4:	f001 fb44 	bl	800de50 <Send_Motion_Data>
				// HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			}
		}

		break;
 800c7c8:	e06f      	b.n	800c8aa <Motion_Detection_Process+0x1ea>
	}

	case MOTION:
	{
		/* If 100 ms has passed since t0 (10 Hz sampling) */
		if ((HAL_GetTick() - motion_time) >= TIME_INTERVAL)
 800c7ca:	f002 fde3 	bl	800f394 <HAL_GetTick>
 800c7ce:	0002      	movs	r2, r0
 800c7d0:	4b3b      	ldr	r3, [pc, #236]	; (800c8c0 <Motion_Detection_Process+0x200>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	220a      	movs	r2, #10
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d368      	bcc.n	800c8ae <Motion_Detection_Process+0x1ee>
		{

			/* Reinitialize timer */
			motion_time = HAL_GetTick();
 800c7dc:	f002 fdda 	bl	800f394 <HAL_GetTick>
 800c7e0:	0002      	movs	r2, r0
 800c7e2:	4b37      	ldr	r3, [pc, #220]	; (800c8c0 <Motion_Detection_Process+0x200>)
 800c7e4:	601a      	str	r2, [r3, #0]

			/* If Freq > LOW_FREQ no water is present : increment counter */
			if ((HAL_GPIO_ReadPin(DETECT_GPIO_Port, DETECT_Pin) == GPIO_PIN_RESET))
 800c7e6:	23a0      	movs	r3, #160	; 0xa0
 800c7e8:	05db      	lsls	r3, r3, #23
 800c7ea:	2140      	movs	r1, #64	; 0x40
 800c7ec:	0018      	movs	r0, r3
 800c7ee:	f004 fc9b 	bl	8011128 <HAL_GPIO_ReadPin>
 800c7f2:	1e03      	subs	r3, r0, #0
 800c7f4:	d108      	bne.n	800c808 <Motion_Detection_Process+0x148>
			{
				motion_counter++;
 800c7f6:	4b33      	ldr	r3, [pc, #204]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	1c5a      	adds	r2, r3, #1
 800c7fc:	4b31      	ldr	r3, [pc, #196]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c7fe:	601a      	str	r2, [r3, #0]
				motion_state_process = MOTION;
 800c800:	4b2d      	ldr	r3, [pc, #180]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c802:	2202      	movs	r2, #2
 800c804:	701a      	strb	r2, [r3, #0]
 800c806:	e008      	b.n	800c81a <Motion_Detection_Process+0x15a>
			}

			/* Else restart the measuring */
			else
			{
				motion_counter = 0;
 800c808:	4b2e      	ldr	r3, [pc, #184]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]
				motion_detected = true;
 800c80e:	4b2b      	ldr	r3, [pc, #172]	; (800c8bc <Motion_Detection_Process+0x1fc>)
 800c810:	2201      	movs	r2, #1
 800c812:	701a      	strb	r2, [r3, #0]
				motion_state_process = MOTION;
 800c814:	4b28      	ldr	r3, [pc, #160]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c816:	2202      	movs	r2, #2
 800c818:	701a      	strb	r2, [r3, #0]
			}

			/* When 20 consecutive readings are higher than HIGH_FREQ water is not present */

			int decthousand_min = (pcb_config.sPIRDelayOFF[0] - '0') * 1000;
 800c81a:	4b2b      	ldr	r3, [pc, #172]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c81c:	22d4      	movs	r2, #212	; 0xd4
 800c81e:	5c9b      	ldrb	r3, [r3, r2]
 800c820:	3b30      	subs	r3, #48	; 0x30
 800c822:	001a      	movs	r2, r3
 800c824:	0013      	movs	r3, r2
 800c826:	015b      	lsls	r3, r3, #5
 800c828:	1a9b      	subs	r3, r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	189b      	adds	r3, r3, r2
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	61fb      	str	r3, [r7, #28]
			int dechundred_min = (pcb_config.sPIRDelayOFF[1] - '0') * 100;
 800c832:	4b25      	ldr	r3, [pc, #148]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c834:	22d5      	movs	r2, #213	; 0xd5
 800c836:	5c9b      	ldrb	r3, [r3, r2]
 800c838:	3b30      	subs	r3, #48	; 0x30
 800c83a:	2264      	movs	r2, #100	; 0x64
 800c83c:	4353      	muls	r3, r2
 800c83e:	61bb      	str	r3, [r7, #24]
			int decten_min = (pcb_config.sPIRDelayOFF[2] - '0') * 10;
 800c840:	4b21      	ldr	r3, [pc, #132]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c842:	22d6      	movs	r2, #214	; 0xd6
 800c844:	5c9b      	ldrb	r3, [r3, r2]
 800c846:	3b30      	subs	r3, #48	; 0x30
 800c848:	001a      	movs	r2, r3
 800c84a:	0013      	movs	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	189b      	adds	r3, r3, r2
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	617b      	str	r3, [r7, #20]
			int dec_min = (pcb_config.sPIRDelayOFF[3] - '0');
 800c854:	4b1c      	ldr	r3, [pc, #112]	; (800c8c8 <Motion_Detection_Process+0x208>)
 800c856:	22d7      	movs	r2, #215	; 0xd7
 800c858:	5c9b      	ldrb	r3, [r3, r2]
 800c85a:	3b30      	subs	r3, #48	; 0x30
 800c85c:	613b      	str	r3, [r7, #16]
			PIR_Delay_OFF = (decthousand_min + dechundred_min + decten_min + dec_min) * 6;
 800c85e:	69fa      	ldr	r2, [r7, #28]
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	18d2      	adds	r2, r2, r3
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	18d2      	adds	r2, r2, r3
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	18d2      	adds	r2, r2, r3
 800c86c:	0013      	movs	r3, r2
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	189b      	adds	r3, r3, r2
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	001a      	movs	r2, r3
 800c876:	4b16      	ldr	r3, [pc, #88]	; (800c8d0 <Motion_Detection_Process+0x210>)
 800c878:	601a      	str	r2, [r3, #0]
			if (motion_counter >= PIR_Delay_OFF)
 800c87a:	4b12      	ldr	r3, [pc, #72]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	4b14      	ldr	r3, [pc, #80]	; (800c8d0 <Motion_Detection_Process+0x210>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	db13      	blt.n	800c8ae <Motion_Detection_Process+0x1ee>
			{
				motion_detected = false;
 800c886:	4b0d      	ldr	r3, [pc, #52]	; (800c8bc <Motion_Detection_Process+0x1fc>)
 800c888:	2200      	movs	r2, #0
 800c88a:	701a      	strb	r2, [r3, #0]
				motion_state_process = NO_MOTION;
 800c88c:	4b0a      	ldr	r3, [pc, #40]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c88e:	2201      	movs	r2, #1
 800c890:	701a      	strb	r2, [r3, #0]
				motion_counter = 0;
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <Motion_Detection_Process+0x204>)
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]
				IRSend_Var_True();
 800c898:	f7fa fa66 	bl	8006d68 <IRSend_Var_True>
				Send_Motion_Data(); // reply through uart
 800c89c:	f001 fad8 	bl	800de50 <Send_Motion_Data>
				//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			}
		}

		break;
 800c8a0:	e005      	b.n	800c8ae <Motion_Detection_Process+0x1ee>
	}

	default:
		motion_state_process = INITMOT;
 800c8a2:	4b05      	ldr	r3, [pc, #20]	; (800c8b8 <Motion_Detection_Process+0x1f8>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	701a      	strb	r2, [r3, #0]

	} /* switch ( motion_state_process ) */
}
 800c8a8:	e002      	b.n	800c8b0 <Motion_Detection_Process+0x1f0>
		break;
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	e000      	b.n	800c8b0 <Motion_Detection_Process+0x1f0>
		break;
 800c8ae:	46c0      	nop			; (mov r8, r8)
}
 800c8b0:	46c0      	nop			; (mov r8, r8)
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	b008      	add	sp, #32
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	20006da5 	.word	0x20006da5
 800c8bc:	20006db0 	.word	0x20006db0
 800c8c0:	20006da8 	.word	0x20006da8
 800c8c4:	20006dac 	.word	0x20006dac
 800c8c8:	20006db4 	.word	0x20006db4
 800c8cc:	2000501c 	.word	0x2000501c
 800c8d0:	20005020 	.word	0x20005020

0800c8d4 <Motion_Is_Detected>:

bool Motion_Is_Detected()
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
	return motion_detected;
 800c8d8:	4b02      	ldr	r3, [pc, #8]	; (800c8e4 <Motion_Is_Detected+0x10>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
}
 800c8dc:	0018      	movs	r0, r3
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	46c0      	nop			; (mov r8, r8)
 800c8e4:	20006db0 	.word	0x20006db0

0800c8e8 <SetPCB_Config>:
#include "APP_Web.h"

struct PCB_Config pcb_config;

void SetPCB_Config()
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0

	const int magic_define_version = MAGIC;
 800c8ee:	23dc      	movs	r3, #220	; 0xdc
 800c8f0:	607b      	str	r3, [r7, #4]

	// Set the default config parameters
	pcb_config.MagicNumber[0] = 0xDD;
 800c8f2:	4bdf      	ldr	r3, [pc, #892]	; (800cc70 <SetPCB_Config+0x388>)
 800c8f4:	22dd      	movs	r2, #221	; 0xdd
 800c8f6:	701a      	strb	r2, [r3, #0]
	pcb_config.MagicNumber[1] = 0x55;
 800c8f8:	4bdd      	ldr	r3, [pc, #884]	; (800cc70 <SetPCB_Config+0x388>)
 800c8fa:	2255      	movs	r2, #85	; 0x55
 800c8fc:	705a      	strb	r2, [r3, #1]
	pcb_config.MagicNumber[2] = magic_define_version;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	b2da      	uxtb	r2, r3
 800c902:	4bdb      	ldr	r3, [pc, #876]	; (800cc70 <SetPCB_Config+0x388>)
 800c904:	709a      	strb	r2, [r3, #2]
	pcb_config.MagicNumber[3] = 0x11;
 800c906:	4bda      	ldr	r3, [pc, #872]	; (800cc70 <SetPCB_Config+0x388>)
 800c908:	2211      	movs	r2, #17
 800c90a:	70da      	strb	r2, [r3, #3]
	//	pcb_config.sSetIROFF[4] = 'A';
	//	pcb_config.sSetIROFF[5] = '3';
	//	pcb_config.sSetIROFF[6] = '5';
	//	pcb_config.sSetIROFF[7] = 'C';

	pcb_config.sSetIR[0] = 'E';
 800c90c:	4bd8      	ldr	r3, [pc, #864]	; (800cc70 <SetPCB_Config+0x388>)
 800c90e:	2245      	movs	r2, #69	; 0x45
 800c910:	711a      	strb	r2, [r3, #4]
	pcb_config.sSetIR[1] = '0';
 800c912:	4bd7      	ldr	r3, [pc, #860]	; (800cc70 <SetPCB_Config+0x388>)
 800c914:	2230      	movs	r2, #48	; 0x30
 800c916:	715a      	strb	r2, [r3, #5]
	pcb_config.sSetIR[2] = 'E';
 800c918:	4bd5      	ldr	r3, [pc, #852]	; (800cc70 <SetPCB_Config+0x388>)
 800c91a:	2245      	movs	r2, #69	; 0x45
 800c91c:	719a      	strb	r2, [r3, #6]
	pcb_config.sSetIR[3] = '0';
 800c91e:	4bd4      	ldr	r3, [pc, #848]	; (800cc70 <SetPCB_Config+0x388>)
 800c920:	2230      	movs	r2, #48	; 0x30
 800c922:	71da      	strb	r2, [r3, #7]
	pcb_config.sSetIR[4] = '4';
 800c924:	4bd2      	ldr	r3, [pc, #840]	; (800cc70 <SetPCB_Config+0x388>)
 800c926:	2234      	movs	r2, #52	; 0x34
 800c928:	721a      	strb	r2, [r3, #8]
	pcb_config.sSetIR[5] = '0';
 800c92a:	4bd1      	ldr	r3, [pc, #836]	; (800cc70 <SetPCB_Config+0x388>)
 800c92c:	2230      	movs	r2, #48	; 0x30
 800c92e:	725a      	strb	r2, [r3, #9]
	pcb_config.sSetIR[6] = 'B';
 800c930:	4bcf      	ldr	r3, [pc, #828]	; (800cc70 <SetPCB_Config+0x388>)
 800c932:	2242      	movs	r2, #66	; 0x42
 800c934:	729a      	strb	r2, [r3, #10]
	pcb_config.sSetIR[7] = 'F';
 800c936:	4bce      	ldr	r3, [pc, #824]	; (800cc70 <SetPCB_Config+0x388>)
 800c938:	2246      	movs	r2, #70	; 0x46
 800c93a:	72da      	strb	r2, [r3, #11]

	pcb_config.sSetIROFF[0] = 'E';
 800c93c:	4bcc      	ldr	r3, [pc, #816]	; (800cc70 <SetPCB_Config+0x388>)
 800c93e:	2245      	movs	r2, #69	; 0x45
 800c940:	74da      	strb	r2, [r3, #19]
	pcb_config.sSetIROFF[1] = '0';
 800c942:	4bcb      	ldr	r3, [pc, #812]	; (800cc70 <SetPCB_Config+0x388>)
 800c944:	2230      	movs	r2, #48	; 0x30
 800c946:	751a      	strb	r2, [r3, #20]
	pcb_config.sSetIROFF[2] = 'E';
 800c948:	4bc9      	ldr	r3, [pc, #804]	; (800cc70 <SetPCB_Config+0x388>)
 800c94a:	2245      	movs	r2, #69	; 0x45
 800c94c:	755a      	strb	r2, [r3, #21]
	pcb_config.sSetIROFF[3] = '0';
 800c94e:	4bc8      	ldr	r3, [pc, #800]	; (800cc70 <SetPCB_Config+0x388>)
 800c950:	2230      	movs	r2, #48	; 0x30
 800c952:	759a      	strb	r2, [r3, #22]
	pcb_config.sSetIROFF[4] = '1';
 800c954:	4bc6      	ldr	r3, [pc, #792]	; (800cc70 <SetPCB_Config+0x388>)
 800c956:	2231      	movs	r2, #49	; 0x31
 800c958:	75da      	strb	r2, [r3, #23]
	pcb_config.sSetIROFF[5] = '9';
 800c95a:	4bc5      	ldr	r3, [pc, #788]	; (800cc70 <SetPCB_Config+0x388>)
 800c95c:	2239      	movs	r2, #57	; 0x39
 800c95e:	761a      	strb	r2, [r3, #24]
	pcb_config.sSetIROFF[6] = 'E';
 800c960:	4bc3      	ldr	r3, [pc, #780]	; (800cc70 <SetPCB_Config+0x388>)
 800c962:	2245      	movs	r2, #69	; 0x45
 800c964:	765a      	strb	r2, [r3, #25]
	pcb_config.sSetIROFF[7] = '6';
 800c966:	4bc2      	ldr	r3, [pc, #776]	; (800cc70 <SetPCB_Config+0x388>)
 800c968:	2236      	movs	r2, #54	; 0x36
 800c96a:	769a      	strb	r2, [r3, #26]
	//		pcb_config.sSetIROFF[4] = 'B';
	//		pcb_config.sSetIROFF[5] = 'C';
	//		pcb_config.sSetIROFF[6] = '4';
	//		pcb_config.sSetIROFF[7] = '3';

	pcb_config.tvtype[0] = '1'; // 0 = lg and 1 = samsung 2= panasonic
 800c96c:	4bc0      	ldr	r3, [pc, #768]	; (800cc70 <SetPCB_Config+0x388>)
 800c96e:	22f2      	movs	r2, #242	; 0xf2
 800c970:	2131      	movs	r1, #49	; 0x31
 800c972:	5499      	strb	r1, [r3, r2]

	pcb_config.sSetR2S9C[0] = 'A';
 800c974:	4bbe      	ldr	r3, [pc, #760]	; (800cc70 <SetPCB_Config+0x388>)
 800c976:	2222      	movs	r2, #34	; 0x22
 800c978:	2141      	movs	r1, #65	; 0x41
 800c97a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[1] = 'A';
 800c97c:	4bbc      	ldr	r3, [pc, #752]	; (800cc70 <SetPCB_Config+0x388>)
 800c97e:	2223      	movs	r2, #35	; 0x23
 800c980:	2141      	movs	r1, #65	; 0x41
 800c982:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[2] = '1';
 800c984:	4bba      	ldr	r3, [pc, #744]	; (800cc70 <SetPCB_Config+0x388>)
 800c986:	2224      	movs	r2, #36	; 0x24
 800c988:	2131      	movs	r1, #49	; 0x31
 800c98a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[3] = '1';
 800c98c:	4bb8      	ldr	r3, [pc, #736]	; (800cc70 <SetPCB_Config+0x388>)
 800c98e:	2225      	movs	r2, #37	; 0x25
 800c990:	2131      	movs	r1, #49	; 0x31
 800c992:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[4] = 'F';
 800c994:	4bb6      	ldr	r3, [pc, #728]	; (800cc70 <SetPCB_Config+0x388>)
 800c996:	2226      	movs	r2, #38	; 0x26
 800c998:	2146      	movs	r1, #70	; 0x46
 800c99a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[5] = 'E';
 800c99c:	4bb4      	ldr	r3, [pc, #720]	; (800cc70 <SetPCB_Config+0x388>)
 800c99e:	2227      	movs	r2, #39	; 0x27
 800c9a0:	2145      	movs	r1, #69	; 0x45
 800c9a2:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[6] = '0';
 800c9a4:	4bb2      	ldr	r3, [pc, #712]	; (800cc70 <SetPCB_Config+0x388>)
 800c9a6:	2228      	movs	r2, #40	; 0x28
 800c9a8:	2130      	movs	r1, #48	; 0x30
 800c9aa:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[7] = '1';
 800c9ac:	4bb0      	ldr	r3, [pc, #704]	; (800cc70 <SetPCB_Config+0x388>)
 800c9ae:	2229      	movs	r2, #41	; 0x29
 800c9b0:	2131      	movs	r1, #49	; 0x31
 800c9b2:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[8] = '0';
 800c9b4:	4bae      	ldr	r3, [pc, #696]	; (800cc70 <SetPCB_Config+0x388>)
 800c9b6:	222a      	movs	r2, #42	; 0x2a
 800c9b8:	2130      	movs	r1, #48	; 0x30
 800c9ba:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[9] = '1';
 800c9bc:	4bac      	ldr	r3, [pc, #688]	; (800cc70 <SetPCB_Config+0x388>)
 800c9be:	222b      	movs	r2, #43	; 0x2b
 800c9c0:	2131      	movs	r1, #49	; 0x31
 800c9c2:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[10] = '1';
 800c9c4:	4baa      	ldr	r3, [pc, #680]	; (800cc70 <SetPCB_Config+0x388>)
 800c9c6:	222c      	movs	r2, #44	; 0x2c
 800c9c8:	2131      	movs	r1, #49	; 0x31
 800c9ca:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9C[11] = '1';
 800c9cc:	4ba8      	ldr	r3, [pc, #672]	; (800cc70 <SetPCB_Config+0x388>)
 800c9ce:	222d      	movs	r2, #45	; 0x2d
 800c9d0:	2131      	movs	r1, #49	; 0x31
 800c9d2:	5499      	strb	r1, [r3, r2]
	//	pcb_config.sSetR2S9C[14] = '3';
	//	pcb_config.sSetR2S9C[15] = '1';
	//	pcb_config.sSetR2S9C[16] = '0';
	//	pcb_config.sSetR2S9C[17] = 'A';

	pcb_config.sSetR2S9COFF[0] = 'A';
 800c9d4:	4ba6      	ldr	r3, [pc, #664]	; (800cc70 <SetPCB_Config+0x388>)
 800c9d6:	2262      	movs	r2, #98	; 0x62
 800c9d8:	2141      	movs	r1, #65	; 0x41
 800c9da:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[1] = 'A';
 800c9dc:	4ba4      	ldr	r3, [pc, #656]	; (800cc70 <SetPCB_Config+0x388>)
 800c9de:	2263      	movs	r2, #99	; 0x63
 800c9e0:	2141      	movs	r1, #65	; 0x41
 800c9e2:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[2] = '1';
 800c9e4:	4ba2      	ldr	r3, [pc, #648]	; (800cc70 <SetPCB_Config+0x388>)
 800c9e6:	2264      	movs	r2, #100	; 0x64
 800c9e8:	2131      	movs	r1, #49	; 0x31
 800c9ea:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[3] = '1';
 800c9ec:	4ba0      	ldr	r3, [pc, #640]	; (800cc70 <SetPCB_Config+0x388>)
 800c9ee:	2265      	movs	r2, #101	; 0x65
 800c9f0:	2131      	movs	r1, #49	; 0x31
 800c9f2:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[4] = 'F';
 800c9f4:	4b9e      	ldr	r3, [pc, #632]	; (800cc70 <SetPCB_Config+0x388>)
 800c9f6:	2266      	movs	r2, #102	; 0x66
 800c9f8:	2146      	movs	r1, #70	; 0x46
 800c9fa:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[5] = 'E';
 800c9fc:	4b9c      	ldr	r3, [pc, #624]	; (800cc70 <SetPCB_Config+0x388>)
 800c9fe:	2267      	movs	r2, #103	; 0x67
 800ca00:	2145      	movs	r1, #69	; 0x45
 800ca02:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[6] = '0';
 800ca04:	4b9a      	ldr	r3, [pc, #616]	; (800cc70 <SetPCB_Config+0x388>)
 800ca06:	2268      	movs	r2, #104	; 0x68
 800ca08:	2130      	movs	r1, #48	; 0x30
 800ca0a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[7] = '1';
 800ca0c:	4b98      	ldr	r3, [pc, #608]	; (800cc70 <SetPCB_Config+0x388>)
 800ca0e:	2269      	movs	r2, #105	; 0x69
 800ca10:	2131      	movs	r1, #49	; 0x31
 800ca12:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[8] = '0';
 800ca14:	4b96      	ldr	r3, [pc, #600]	; (800cc70 <SetPCB_Config+0x388>)
 800ca16:	226a      	movs	r2, #106	; 0x6a
 800ca18:	2130      	movs	r1, #48	; 0x30
 800ca1a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[9] = '0';
 800ca1c:	4b94      	ldr	r3, [pc, #592]	; (800cc70 <SetPCB_Config+0x388>)
 800ca1e:	226b      	movs	r2, #107	; 0x6b
 800ca20:	2130      	movs	r1, #48	; 0x30
 800ca22:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[10] = '1';
 800ca24:	4b92      	ldr	r3, [pc, #584]	; (800cc70 <SetPCB_Config+0x388>)
 800ca26:	226c      	movs	r2, #108	; 0x6c
 800ca28:	2131      	movs	r1, #49	; 0x31
 800ca2a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetR2S9COFF[11] = '0';
 800ca2c:	4b90      	ldr	r3, [pc, #576]	; (800cc70 <SetPCB_Config+0x388>)
 800ca2e:	226d      	movs	r2, #109	; 0x6d
 800ca30:	2130      	movs	r1, #48	; 0x30
 800ca32:	5499      	strb	r1, [r3, r2]
	//	pcb_config.sSetR2S9COFF[14] = '3';
	//	pcb_config.sSetR2S9COFF[15] = '0';
	//	pcb_config.sSetR2S9COFF[16] = '0';
	//	pcb_config.sSetR2S9COFF[17] = 'A';

	pcb_config.sSetTempTreshMin[0] = '2';
 800ca34:	4b8e      	ldr	r3, [pc, #568]	; (800cc70 <SetPCB_Config+0x388>)
 800ca36:	22a2      	movs	r2, #162	; 0xa2
 800ca38:	2132      	movs	r1, #50	; 0x32
 800ca3a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetTempTreshMin[1] = '1';
 800ca3c:	4b8c      	ldr	r3, [pc, #560]	; (800cc70 <SetPCB_Config+0x388>)
 800ca3e:	22a3      	movs	r2, #163	; 0xa3
 800ca40:	2131      	movs	r1, #49	; 0x31
 800ca42:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetTempTreshMin[2] = '3';
 800ca44:	4b8a      	ldr	r3, [pc, #552]	; (800cc70 <SetPCB_Config+0x388>)
 800ca46:	22a4      	movs	r2, #164	; 0xa4
 800ca48:	2133      	movs	r1, #51	; 0x33
 800ca4a:	5499      	strb	r1, [r3, r2]

	pcb_config.sSetTempTreshMax[0] = '4';
 800ca4c:	4b88      	ldr	r3, [pc, #544]	; (800cc70 <SetPCB_Config+0x388>)
 800ca4e:	22ac      	movs	r2, #172	; 0xac
 800ca50:	2134      	movs	r1, #52	; 0x34
 800ca52:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetTempTreshMax[1] = '5';
 800ca54:	4b86      	ldr	r3, [pc, #536]	; (800cc70 <SetPCB_Config+0x388>)
 800ca56:	22ad      	movs	r2, #173	; 0xad
 800ca58:	2135      	movs	r1, #53	; 0x35
 800ca5a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetTempTreshMax[2] = '5';
 800ca5c:	4b84      	ldr	r3, [pc, #528]	; (800cc70 <SetPCB_Config+0x388>)
 800ca5e:	22ae      	movs	r2, #174	; 0xae
 800ca60:	2135      	movs	r1, #53	; 0x35
 800ca62:	5499      	strb	r1, [r3, r2]

	pcb_config.sSetTempON[0] = '0';
 800ca64:	4b82      	ldr	r3, [pc, #520]	; (800cc70 <SetPCB_Config+0x388>)
 800ca66:	22b6      	movs	r2, #182	; 0xb6
 800ca68:	2130      	movs	r1, #48	; 0x30
 800ca6a:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetPIRON[0] = '1';
 800ca6c:	4b80      	ldr	r3, [pc, #512]	; (800cc70 <SetPCB_Config+0x388>)
 800ca6e:	22c0      	movs	r2, #192	; 0xc0
 800ca70:	2131      	movs	r1, #49	; 0x31
 800ca72:	5499      	strb	r1, [r3, r2]

	pcb_config.sPIRDelayON[0] = '0';
 800ca74:	4b7e      	ldr	r3, [pc, #504]	; (800cc70 <SetPCB_Config+0x388>)
 800ca76:	22ca      	movs	r2, #202	; 0xca
 800ca78:	2130      	movs	r1, #48	; 0x30
 800ca7a:	5499      	strb	r1, [r3, r2]
	pcb_config.sPIRDelayON[1] = '0';
 800ca7c:	4b7c      	ldr	r3, [pc, #496]	; (800cc70 <SetPCB_Config+0x388>)
 800ca7e:	22cb      	movs	r2, #203	; 0xcb
 800ca80:	2130      	movs	r1, #48	; 0x30
 800ca82:	5499      	strb	r1, [r3, r2]
	pcb_config.sPIRDelayON[2] = '1';
 800ca84:	4b7a      	ldr	r3, [pc, #488]	; (800cc70 <SetPCB_Config+0x388>)
 800ca86:	22cc      	movs	r2, #204	; 0xcc
 800ca88:	2131      	movs	r1, #49	; 0x31
 800ca8a:	5499      	strb	r1, [r3, r2]
	pcb_config.sPIRDelayON[3] = '0';
 800ca8c:	4b78      	ldr	r3, [pc, #480]	; (800cc70 <SetPCB_Config+0x388>)
 800ca8e:	22cd      	movs	r2, #205	; 0xcd
 800ca90:	2130      	movs	r1, #48	; 0x30
 800ca92:	5499      	strb	r1, [r3, r2]

	pcb_config.sPIRDelayOFF[0] = '0';
 800ca94:	4b76      	ldr	r3, [pc, #472]	; (800cc70 <SetPCB_Config+0x388>)
 800ca96:	22d4      	movs	r2, #212	; 0xd4
 800ca98:	2130      	movs	r1, #48	; 0x30
 800ca9a:	5499      	strb	r1, [r3, r2]
	pcb_config.sPIRDelayOFF[1] = '0';
 800ca9c:	4b74      	ldr	r3, [pc, #464]	; (800cc70 <SetPCB_Config+0x388>)
 800ca9e:	22d5      	movs	r2, #213	; 0xd5
 800caa0:	2130      	movs	r1, #48	; 0x30
 800caa2:	5499      	strb	r1, [r3, r2]
	pcb_config.sPIRDelayOFF[2] = '5';
 800caa4:	4b72      	ldr	r3, [pc, #456]	; (800cc70 <SetPCB_Config+0x388>)
 800caa6:	22d6      	movs	r2, #214	; 0xd6
 800caa8:	2135      	movs	r1, #53	; 0x35
 800caaa:	5499      	strb	r1, [r3, r2]
	pcb_config.sPIRDelayOFF[3] = '0';
 800caac:	4b70      	ldr	r3, [pc, #448]	; (800cc70 <SetPCB_Config+0x388>)
 800caae:	22d7      	movs	r2, #215	; 0xd7
 800cab0:	2130      	movs	r1, #48	; 0x30
 800cab2:	5499      	strb	r1, [r3, r2]

	pcb_config.sSetIRON[0] = '1';
 800cab4:	4b6e      	ldr	r3, [pc, #440]	; (800cc70 <SetPCB_Config+0x388>)
 800cab6:	22de      	movs	r2, #222	; 0xde
 800cab8:	2131      	movs	r1, #49	; 0x31
 800caba:	5499      	strb	r1, [r3, r2]
	pcb_config.sSetRS232ON[0] = '1';
 800cabc:	4b6c      	ldr	r3, [pc, #432]	; (800cc70 <SetPCB_Config+0x388>)
 800cabe:	22e8      	movs	r2, #232	; 0xe8
 800cac0:	2131      	movs	r1, #49	; 0x31
 800cac2:	5499      	strb	r1, [r3, r2]
	pcb_config.rs232nbcharsON[0] = 6;
 800cac4:	4b6a      	ldr	r3, [pc, #424]	; (800cc70 <SetPCB_Config+0x388>)
 800cac6:	22f4      	movs	r2, #244	; 0xf4
 800cac8:	2106      	movs	r1, #6
 800caca:	5499      	strb	r1, [r3, r2]
	pcb_config.rs232nbcharsOFF[0] = 6;
 800cacc:	4b68      	ldr	r3, [pc, #416]	; (800cc70 <SetPCB_Config+0x388>)
 800cace:	22f6      	movs	r2, #246	; 0xf6
 800cad0:	2106      	movs	r1, #6
 800cad2:	5499      	strb	r1, [r3, r2]

	pcb_config.rs1[0] = '0';
 800cad4:	4b66      	ldr	r3, [pc, #408]	; (800cc70 <SetPCB_Config+0x388>)
 800cad6:	22f8      	movs	r2, #248	; 0xf8
 800cad8:	2130      	movs	r1, #48	; 0x30
 800cada:	5499      	strb	r1, [r3, r2]
	pcb_config.rs1[1] = '0';
 800cadc:	4b64      	ldr	r3, [pc, #400]	; (800cc70 <SetPCB_Config+0x388>)
 800cade:	22f9      	movs	r2, #249	; 0xf9
 800cae0:	2130      	movs	r1, #48	; 0x30
 800cae2:	5499      	strb	r1, [r3, r2]
	pcb_config.rs1[2] = '9';
 800cae4:	4b62      	ldr	r3, [pc, #392]	; (800cc70 <SetPCB_Config+0x388>)
 800cae6:	22fa      	movs	r2, #250	; 0xfa
 800cae8:	2139      	movs	r1, #57	; 0x39
 800caea:	5499      	strb	r1, [r3, r2]
	pcb_config.rs1[3] = '6';
 800caec:	4b60      	ldr	r3, [pc, #384]	; (800cc70 <SetPCB_Config+0x388>)
 800caee:	22fb      	movs	r2, #251	; 0xfb
 800caf0:	2136      	movs	r1, #54	; 0x36
 800caf2:	5499      	strb	r1, [r3, r2]
	pcb_config.rs1[4] = '0';
 800caf4:	4b5e      	ldr	r3, [pc, #376]	; (800cc70 <SetPCB_Config+0x388>)
 800caf6:	22fc      	movs	r2, #252	; 0xfc
 800caf8:	2130      	movs	r1, #48	; 0x30
 800cafa:	5499      	strb	r1, [r3, r2]
	pcb_config.rs1[5] = '0';
 800cafc:	4b5c      	ldr	r3, [pc, #368]	; (800cc70 <SetPCB_Config+0x388>)
 800cafe:	22fd      	movs	r2, #253	; 0xfd
 800cb00:	2130      	movs	r1, #48	; 0x30
 800cb02:	5499      	strb	r1, [r3, r2]

	pcb_config.rs2[0] = '2';
 800cb04:	4b5a      	ldr	r3, [pc, #360]	; (800cc70 <SetPCB_Config+0x388>)
 800cb06:	22fe      	movs	r2, #254	; 0xfe
 800cb08:	2132      	movs	r1, #50	; 0x32
 800cb0a:	5499      	strb	r1, [r3, r2]
	pcb_config.rs3[0] = '2';
 800cb0c:	4a58      	ldr	r2, [pc, #352]	; (800cc70 <SetPCB_Config+0x388>)
 800cb0e:	2380      	movs	r3, #128	; 0x80
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	2132      	movs	r1, #50	; 0x32
 800cb14:	54d1      	strb	r1, [r2, r3]

	// todo HERE : ADD NEW INIT OF PARAMETERS. DEFAULT CONFIG WILL BE WRITTEN ON 1ST BOOT.
	pcb_config.loopoff = 2;
 800cb16:	4a56      	ldr	r2, [pc, #344]	; (800cc70 <SetPCB_Config+0x388>)
 800cb18:	2304      	movs	r3, #4
 800cb1a:	33ff      	adds	r3, #255	; 0xff
 800cb1c:	2102      	movs	r1, #2
 800cb1e:	54d1      	strb	r1, [r2, r3]
	pcb_config.loopon = 2;
 800cb20:	4a53      	ldr	r2, [pc, #332]	; (800cc70 <SetPCB_Config+0x388>)
 800cb22:	2381      	movs	r3, #129	; 0x81
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	2102      	movs	r1, #2
 800cb28:	54d1      	strb	r1, [r2, r3]
	pcb_config.looptime = 5;
 800cb2a:	4a51      	ldr	r2, [pc, #324]	; (800cc70 <SetPCB_Config+0x388>)
 800cb2c:	2382      	movs	r3, #130	; 0x82
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	2105      	movs	r1, #5
 800cb32:	54d1      	strb	r1, [r2, r3]
	// Mac address
	pcb_config.mac[0] = 0x00;
 800cb34:	4a4e      	ldr	r2, [pc, #312]	; (800cc70 <SetPCB_Config+0x388>)
 800cb36:	2306      	movs	r3, #6
 800cb38:	33ff      	adds	r3, #255	; 0xff
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	54d1      	strb	r1, [r2, r3]
	pcb_config.mac[1] = 0x08;
 800cb3e:	4a4c      	ldr	r2, [pc, #304]	; (800cc70 <SetPCB_Config+0x388>)
 800cb40:	2383      	movs	r3, #131	; 0x83
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	2108      	movs	r1, #8
 800cb46:	54d1      	strb	r1, [r2, r3]
	pcb_config.mac[2] = 0xdc;
 800cb48:	4a49      	ldr	r2, [pc, #292]	; (800cc70 <SetPCB_Config+0x388>)
 800cb4a:	2308      	movs	r3, #8
 800cb4c:	33ff      	adds	r3, #255	; 0xff
 800cb4e:	21dc      	movs	r1, #220	; 0xdc
 800cb50:	54d1      	strb	r1, [r2, r3]
	pcb_config.mac[3] = 0xab;
 800cb52:	4a47      	ldr	r2, [pc, #284]	; (800cc70 <SetPCB_Config+0x388>)
 800cb54:	2384      	movs	r3, #132	; 0x84
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	21ab      	movs	r1, #171	; 0xab
 800cb5a:	54d1      	strb	r1, [r2, r3]
	pcb_config.mac[4] = 0xcd;
 800cb5c:	4a44      	ldr	r2, [pc, #272]	; (800cc70 <SetPCB_Config+0x388>)
 800cb5e:	230a      	movs	r3, #10
 800cb60:	33ff      	adds	r3, #255	; 0xff
 800cb62:	21cd      	movs	r1, #205	; 0xcd
 800cb64:	54d1      	strb	r1, [r2, r3]
	pcb_config.mac[5] = 0xef;
 800cb66:	4a42      	ldr	r2, [pc, #264]	; (800cc70 <SetPCB_Config+0x388>)
 800cb68:	2385      	movs	r3, #133	; 0x85
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	21ef      	movs	r1, #239	; 0xef
 800cb6e:	54d1      	strb	r1, [r2, r3]
	// IP address
	pcb_config.ip[0] = 192;
 800cb70:	4a3f      	ldr	r2, [pc, #252]	; (800cc70 <SetPCB_Config+0x388>)
 800cb72:	230c      	movs	r3, #12
 800cb74:	33ff      	adds	r3, #255	; 0xff
 800cb76:	21c0      	movs	r1, #192	; 0xc0
 800cb78:	54d1      	strb	r1, [r2, r3]
	pcb_config.ip[1] = 168;
 800cb7a:	4a3d      	ldr	r2, [pc, #244]	; (800cc70 <SetPCB_Config+0x388>)
 800cb7c:	2386      	movs	r3, #134	; 0x86
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	21a8      	movs	r1, #168	; 0xa8
 800cb82:	54d1      	strb	r1, [r2, r3]
	pcb_config.ip[2] = 0;
 800cb84:	4a3a      	ldr	r2, [pc, #232]	; (800cc70 <SetPCB_Config+0x388>)
 800cb86:	230e      	movs	r3, #14
 800cb88:	33ff      	adds	r3, #255	; 0xff
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	54d1      	strb	r1, [r2, r3]
	pcb_config.ip[3] = 111;
 800cb8e:	4a38      	ldr	r2, [pc, #224]	; (800cc70 <SetPCB_Config+0x388>)
 800cb90:	2387      	movs	r3, #135	; 0x87
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	216f      	movs	r1, #111	; 0x6f
 800cb96:	54d1      	strb	r1, [r2, r3]
	// Subnet mask
	pcb_config.sn[0] = 255;
 800cb98:	4a35      	ldr	r2, [pc, #212]	; (800cc70 <SetPCB_Config+0x388>)
 800cb9a:	2310      	movs	r3, #16
 800cb9c:	33ff      	adds	r3, #255	; 0xff
 800cb9e:	21ff      	movs	r1, #255	; 0xff
 800cba0:	54d1      	strb	r1, [r2, r3]
	pcb_config.sn[1] = 255;
 800cba2:	4a33      	ldr	r2, [pc, #204]	; (800cc70 <SetPCB_Config+0x388>)
 800cba4:	2388      	movs	r3, #136	; 0x88
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	21ff      	movs	r1, #255	; 0xff
 800cbaa:	54d1      	strb	r1, [r2, r3]
	pcb_config.sn[2] = 255;
 800cbac:	4a30      	ldr	r2, [pc, #192]	; (800cc70 <SetPCB_Config+0x388>)
 800cbae:	2312      	movs	r3, #18
 800cbb0:	33ff      	adds	r3, #255	; 0xff
 800cbb2:	21ff      	movs	r1, #255	; 0xff
 800cbb4:	54d1      	strb	r1, [r2, r3]
	pcb_config.sn[3] = 0;
 800cbb6:	4a2e      	ldr	r2, [pc, #184]	; (800cc70 <SetPCB_Config+0x388>)
 800cbb8:	2389      	movs	r3, #137	; 0x89
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	54d1      	strb	r1, [r2, r3]
	// Gateway address
	pcb_config.gw[0] = 192;
 800cbc0:	4a2b      	ldr	r2, [pc, #172]	; (800cc70 <SetPCB_Config+0x388>)
 800cbc2:	2314      	movs	r3, #20
 800cbc4:	33ff      	adds	r3, #255	; 0xff
 800cbc6:	21c0      	movs	r1, #192	; 0xc0
 800cbc8:	54d1      	strb	r1, [r2, r3]
	pcb_config.gw[1] = 168;
 800cbca:	4a29      	ldr	r2, [pc, #164]	; (800cc70 <SetPCB_Config+0x388>)
 800cbcc:	238a      	movs	r3, #138	; 0x8a
 800cbce:	005b      	lsls	r3, r3, #1
 800cbd0:	21a8      	movs	r1, #168	; 0xa8
 800cbd2:	54d1      	strb	r1, [r2, r3]
	pcb_config.gw[2] = 0;
 800cbd4:	4a26      	ldr	r2, [pc, #152]	; (800cc70 <SetPCB_Config+0x388>)
 800cbd6:	2316      	movs	r3, #22
 800cbd8:	33ff      	adds	r3, #255	; 0xff
 800cbda:	2100      	movs	r1, #0
 800cbdc:	54d1      	strb	r1, [r2, r3]
	pcb_config.gw[3] = 1;
 800cbde:	4a24      	ldr	r2, [pc, #144]	; (800cc70 <SetPCB_Config+0x388>)
 800cbe0:	238b      	movs	r3, #139	; 0x8b
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	54d1      	strb	r1, [r2, r3]
	// DNS server
	pcb_config.dns[0] = 8;
 800cbe8:	4a21      	ldr	r2, [pc, #132]	; (800cc70 <SetPCB_Config+0x388>)
 800cbea:	2318      	movs	r3, #24
 800cbec:	33ff      	adds	r3, #255	; 0xff
 800cbee:	2108      	movs	r1, #8
 800cbf0:	54d1      	strb	r1, [r2, r3]
	pcb_config.dns[1] = 8;
 800cbf2:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <SetPCB_Config+0x388>)
 800cbf4:	238c      	movs	r3, #140	; 0x8c
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	2108      	movs	r1, #8
 800cbfa:	54d1      	strb	r1, [r2, r3]
	pcb_config.dns[2] = 8;
 800cbfc:	4a1c      	ldr	r2, [pc, #112]	; (800cc70 <SetPCB_Config+0x388>)
 800cbfe:	231a      	movs	r3, #26
 800cc00:	33ff      	adds	r3, #255	; 0xff
 800cc02:	2108      	movs	r1, #8
 800cc04:	54d1      	strb	r1, [r2, r3]
	pcb_config.dns[3] = 8;
 800cc06:	4a1a      	ldr	r2, [pc, #104]	; (800cc70 <SetPCB_Config+0x388>)
 800cc08:	238d      	movs	r3, #141	; 0x8d
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	2108      	movs	r1, #8
 800cc0e:	54d1      	strb	r1, [r2, r3]
	// DHCP enable / disable
	pcb_config.dhcp = NETINFO_STATIC;
 800cc10:	4a17      	ldr	r2, [pc, #92]	; (800cc70 <SetPCB_Config+0x388>)
 800cc12:	231c      	movs	r3, #28
 800cc14:	33ff      	adds	r3, #255	; 0xff
 800cc16:	2101      	movs	r1, #1
 800cc18:	54d1      	strb	r1, [r2, r3]

	pcb_config.pcb_config_onSwitch = 0;
 800cc1a:	4a15      	ldr	r2, [pc, #84]	; (800cc70 <SetPCB_Config+0x388>)
 800cc1c:	238e      	movs	r3, #142	; 0x8e
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	2100      	movs	r1, #0
 800cc22:	54d1      	strb	r1, [r2, r3]
	pcb_config.pcb_config_onDateTime = 0;
 800cc24:	4a12      	ldr	r2, [pc, #72]	; (800cc70 <SetPCB_Config+0x388>)
 800cc26:	2390      	movs	r3, #144	; 0x90
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	50d1      	str	r1, [r2, r3]
	pcb_config.pcb_config_offSwitch = 0;
 800cc2e:	4a10      	ldr	r2, [pc, #64]	; (800cc70 <SetPCB_Config+0x388>)
 800cc30:	2392      	movs	r3, #146	; 0x92
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	2100      	movs	r1, #0
 800cc36:	54d1      	strb	r1, [r2, r3]
	pcb_config.pcb_config_offDateTime = 0;
 800cc38:	4a0d      	ldr	r2, [pc, #52]	; (800cc70 <SetPCB_Config+0x388>)
 800cc3a:	2394      	movs	r3, #148	; 0x94
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	2100      	movs	r1, #0
 800cc40:	50d1      	str	r1, [r2, r3]
	pcb_config.pcb_config_timezone = 15;
 800cc42:	4a0b      	ldr	r2, [pc, #44]	; (800cc70 <SetPCB_Config+0x388>)
 800cc44:	2396      	movs	r3, #150	; 0x96
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	210f      	movs	r1, #15
 800cc4a:	54d1      	strb	r1, [r2, r3]

	for (int i = 0; i < 7; i++)
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	e008      	b.n	800cc64 <SetPCB_Config+0x37c>
		pcb_config.pcb_config_Recursion_Alarm_ON[i] = 0;
 800cc52:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <SetPCB_Config+0x388>)
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	324c      	adds	r2, #76	; 0x4c
 800cc58:	0092      	lsls	r2, r2, #2
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < 7; i++)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3301      	adds	r3, #1
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b06      	cmp	r3, #6
 800cc68:	ddf3      	ble.n	800cc52 <SetPCB_Config+0x36a>
	for (int i = 0; i < 7; i++)
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60bb      	str	r3, [r7, #8]
 800cc6e:	e00c      	b.n	800cc8a <SetPCB_Config+0x3a2>
 800cc70:	20006db4 	.word	0x20006db4
		pcb_config.pcb_config_Recursion_Alarm_OFF[i] = 0;
 800cc74:	4a12      	ldr	r2, [pc, #72]	; (800ccc0 <SetPCB_Config+0x3d8>)
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	3352      	adds	r3, #82	; 0x52
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	18d3      	adds	r3, r2, r3
 800cc7e:	3304      	adds	r3, #4
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	3301      	adds	r3, #1
 800cc88:	60bb      	str	r3, [r7, #8]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	2b06      	cmp	r3, #6
 800cc8e:	ddf1      	ble.n	800cc74 <SetPCB_Config+0x38c>

	pcb_config.pcb_config_time_alarm_on_hh = 0;
 800cc90:	4a0b      	ldr	r2, [pc, #44]	; (800ccc0 <SetPCB_Config+0x3d8>)
 800cc92:	23b4      	movs	r3, #180	; 0xb4
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	2100      	movs	r1, #0
 800cc98:	54d1      	strb	r1, [r2, r3]
	pcb_config.pcb_config_time_alarm_on_mm = 0;
 800cc9a:	4a09      	ldr	r2, [pc, #36]	; (800ccc0 <SetPCB_Config+0x3d8>)
 800cc9c:	236a      	movs	r3, #106	; 0x6a
 800cc9e:	33ff      	adds	r3, #255	; 0xff
 800cca0:	2100      	movs	r1, #0
 800cca2:	54d1      	strb	r1, [r2, r3]
	pcb_config.pcb_config_time_alarm_off_hh = 0;
 800cca4:	4a06      	ldr	r2, [pc, #24]	; (800ccc0 <SetPCB_Config+0x3d8>)
 800cca6:	23b5      	movs	r3, #181	; 0xb5
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	2100      	movs	r1, #0
 800ccac:	54d1      	strb	r1, [r2, r3]
	pcb_config.pcb_config_time_alarm_off_mm = 0;
 800ccae:	4a04      	ldr	r2, [pc, #16]	; (800ccc0 <SetPCB_Config+0x3d8>)
 800ccb0:	236c      	movs	r3, #108	; 0x6c
 800ccb2:	33ff      	adds	r3, #255	; 0xff
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	54d1      	strb	r1, [r2, r3]
}
 800ccb8:	46c0      	nop			; (mov r8, r8)
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	b004      	add	sp, #16
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	20006db4 	.word	0x20006db4

0800ccc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ccca:	4b0f      	ldr	r3, [pc, #60]	; (800cd08 <HAL_MspInit+0x44>)
 800cccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccce:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <HAL_MspInit+0x44>)
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	430a      	orrs	r2, r1
 800ccd4:	641a      	str	r2, [r3, #64]	; 0x40
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <HAL_MspInit+0x44>)
 800ccd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccda:	2201      	movs	r2, #1
 800ccdc:	4013      	ands	r3, r2
 800ccde:	607b      	str	r3, [r7, #4]
 800cce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cce2:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <HAL_MspInit+0x44>)
 800cce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cce6:	4b08      	ldr	r3, [pc, #32]	; (800cd08 <HAL_MspInit+0x44>)
 800cce8:	2180      	movs	r1, #128	; 0x80
 800ccea:	0549      	lsls	r1, r1, #21
 800ccec:	430a      	orrs	r2, r1
 800ccee:	63da      	str	r2, [r3, #60]	; 0x3c
 800ccf0:	4b05      	ldr	r3, [pc, #20]	; (800cd08 <HAL_MspInit+0x44>)
 800ccf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccf4:	2380      	movs	r3, #128	; 0x80
 800ccf6:	055b      	lsls	r3, r3, #21
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	603b      	str	r3, [r7, #0]
 800ccfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ccfe:	46c0      	nop			; (mov r8, r8)
 800cd00:	46bd      	mov	sp, r7
 800cd02:	b002      	add	sp, #8
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	46c0      	nop			; (mov r8, r8)
 800cd08:	40021000 	.word	0x40021000

0800cd0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800cd0c:	b590      	push	{r4, r7, lr}
 800cd0e:	b08b      	sub	sp, #44	; 0x2c
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd14:	2414      	movs	r4, #20
 800cd16:	193b      	adds	r3, r7, r4
 800cd18:	0018      	movs	r0, r3
 800cd1a:	2314      	movs	r3, #20
 800cd1c:	001a      	movs	r2, r3
 800cd1e:	2100      	movs	r1, #0
 800cd20:	f015 ff3a 	bl	8022b98 <memset>
  if(hadc->Instance==ADC1)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a18      	ldr	r2, [pc, #96]	; (800cd8c <HAL_ADC_MspInit+0x80>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d129      	bne.n	800cd82 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800cd2e:	4b18      	ldr	r3, [pc, #96]	; (800cd90 <HAL_ADC_MspInit+0x84>)
 800cd30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd32:	4b17      	ldr	r3, [pc, #92]	; (800cd90 <HAL_ADC_MspInit+0x84>)
 800cd34:	2180      	movs	r1, #128	; 0x80
 800cd36:	0349      	lsls	r1, r1, #13
 800cd38:	430a      	orrs	r2, r1
 800cd3a:	641a      	str	r2, [r3, #64]	; 0x40
 800cd3c:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <HAL_ADC_MspInit+0x84>)
 800cd3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd40:	2380      	movs	r3, #128	; 0x80
 800cd42:	035b      	lsls	r3, r3, #13
 800cd44:	4013      	ands	r3, r2
 800cd46:	613b      	str	r3, [r7, #16]
 800cd48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd4a:	4b11      	ldr	r3, [pc, #68]	; (800cd90 <HAL_ADC_MspInit+0x84>)
 800cd4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd4e:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <HAL_ADC_MspInit+0x84>)
 800cd50:	2101      	movs	r1, #1
 800cd52:	430a      	orrs	r2, r1
 800cd54:	635a      	str	r2, [r3, #52]	; 0x34
 800cd56:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <HAL_ADC_MspInit+0x84>)
 800cd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cd62:	193b      	adds	r3, r7, r4
 800cd64:	2220      	movs	r2, #32
 800cd66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cd68:	193b      	adds	r3, r7, r4
 800cd6a:	2203      	movs	r2, #3
 800cd6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd6e:	193b      	adds	r3, r7, r4
 800cd70:	2200      	movs	r2, #0
 800cd72:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd74:	193a      	adds	r2, r7, r4
 800cd76:	23a0      	movs	r3, #160	; 0xa0
 800cd78:	05db      	lsls	r3, r3, #23
 800cd7a:	0011      	movs	r1, r2
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	f003 ff8f 	bl	8010ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800cd82:	46c0      	nop			; (mov r8, r8)
 800cd84:	46bd      	mov	sp, r7
 800cd86:	b00b      	add	sp, #44	; 0x2c
 800cd88:	bd90      	pop	{r4, r7, pc}
 800cd8a:	46c0      	nop			; (mov r8, r8)
 800cd8c:	40012400 	.word	0x40012400
 800cd90:	40021000 	.word	0x40021000

0800cd94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800cd94:	b590      	push	{r4, r7, lr}
 800cd96:	b095      	sub	sp, #84	; 0x54
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd9c:	233c      	movs	r3, #60	; 0x3c
 800cd9e:	18fb      	adds	r3, r7, r3
 800cda0:	0018      	movs	r0, r3
 800cda2:	2314      	movs	r3, #20
 800cda4:	001a      	movs	r2, r3
 800cda6:	2100      	movs	r1, #0
 800cda8:	f015 fef6 	bl	8022b98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cdac:	2410      	movs	r4, #16
 800cdae:	193b      	adds	r3, r7, r4
 800cdb0:	0018      	movs	r0, r3
 800cdb2:	232c      	movs	r3, #44	; 0x2c
 800cdb4:	001a      	movs	r2, r3
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	f015 feee 	bl	8022b98 <memset>
  if(hi2c->Instance==I2C1)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a23      	ldr	r2, [pc, #140]	; (800ce50 <HAL_I2C_MspInit+0xbc>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d13f      	bne.n	800ce46 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800cdc6:	193b      	adds	r3, r7, r4
 800cdc8:	2220      	movs	r2, #32
 800cdca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800cdcc:	193b      	adds	r3, r7, r4
 800cdce:	2200      	movs	r2, #0
 800cdd0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cdd2:	193b      	adds	r3, r7, r4
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	f005 fdb1 	bl	801293c <HAL_RCCEx_PeriphCLKConfig>
 800cdda:	1e03      	subs	r3, r0, #0
 800cddc:	d001      	beq.n	800cde2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800cdde:	f7ff fc11 	bl	800c604 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cde2:	4b1c      	ldr	r3, [pc, #112]	; (800ce54 <HAL_I2C_MspInit+0xc0>)
 800cde4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cde6:	4b1b      	ldr	r3, [pc, #108]	; (800ce54 <HAL_I2C_MspInit+0xc0>)
 800cde8:	2101      	movs	r1, #1
 800cdea:	430a      	orrs	r2, r1
 800cdec:	635a      	str	r2, [r3, #52]	; 0x34
 800cdee:	4b19      	ldr	r3, [pc, #100]	; (800ce54 <HAL_I2C_MspInit+0xc0>)
 800cdf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cdfa:	213c      	movs	r1, #60	; 0x3c
 800cdfc:	187b      	adds	r3, r7, r1
 800cdfe:	22c0      	movs	r2, #192	; 0xc0
 800ce00:	00d2      	lsls	r2, r2, #3
 800ce02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ce04:	187b      	adds	r3, r7, r1
 800ce06:	2212      	movs	r2, #18
 800ce08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce0a:	187b      	adds	r3, r7, r1
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce10:	187b      	adds	r3, r7, r1
 800ce12:	2200      	movs	r2, #0
 800ce14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800ce16:	187b      	adds	r3, r7, r1
 800ce18:	2206      	movs	r2, #6
 800ce1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce1c:	187a      	adds	r2, r7, r1
 800ce1e:	23a0      	movs	r3, #160	; 0xa0
 800ce20:	05db      	lsls	r3, r3, #23
 800ce22:	0011      	movs	r1, r2
 800ce24:	0018      	movs	r0, r3
 800ce26:	f003 ff3b 	bl	8010ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ce2a:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <HAL_I2C_MspInit+0xc0>)
 800ce2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce2e:	4b09      	ldr	r3, [pc, #36]	; (800ce54 <HAL_I2C_MspInit+0xc0>)
 800ce30:	2180      	movs	r1, #128	; 0x80
 800ce32:	0389      	lsls	r1, r1, #14
 800ce34:	430a      	orrs	r2, r1
 800ce36:	63da      	str	r2, [r3, #60]	; 0x3c
 800ce38:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <HAL_I2C_MspInit+0xc0>)
 800ce3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce3c:	2380      	movs	r3, #128	; 0x80
 800ce3e:	039b      	lsls	r3, r3, #14
 800ce40:	4013      	ands	r3, r2
 800ce42:	60bb      	str	r3, [r7, #8]
 800ce44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	b015      	add	sp, #84	; 0x54
 800ce4c:	bd90      	pop	{r4, r7, pc}
 800ce4e:	46c0      	nop			; (mov r8, r8)
 800ce50:	40005400 	.word	0x40005400
 800ce54:	40021000 	.word	0x40021000

0800ce58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ce58:	b590      	push	{r4, r7, lr}
 800ce5a:	b08f      	sub	sp, #60	; 0x3c
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce60:	240c      	movs	r4, #12
 800ce62:	193b      	adds	r3, r7, r4
 800ce64:	0018      	movs	r0, r3
 800ce66:	232c      	movs	r3, #44	; 0x2c
 800ce68:	001a      	movs	r2, r3
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	f015 fe94 	bl	8022b98 <memset>
  if(hrtc->Instance==RTC)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a15      	ldr	r2, [pc, #84]	; (800cecc <HAL_RTC_MspInit+0x74>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d124      	bne.n	800cec4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ce7a:	193b      	adds	r3, r7, r4
 800ce7c:	2280      	movs	r2, #128	; 0x80
 800ce7e:	0292      	lsls	r2, r2, #10
 800ce80:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800ce82:	193b      	adds	r3, r7, r4
 800ce84:	2280      	movs	r2, #128	; 0x80
 800ce86:	0092      	lsls	r2, r2, #2
 800ce88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce8a:	193b      	adds	r3, r7, r4
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	f005 fd55 	bl	801293c <HAL_RCCEx_PeriphCLKConfig>
 800ce92:	1e03      	subs	r3, r0, #0
 800ce94:	d001      	beq.n	800ce9a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800ce96:	f7ff fbb5 	bl	800c604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ce9a:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <HAL_RTC_MspInit+0x78>)
 800ce9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce9e:	4b0c      	ldr	r3, [pc, #48]	; (800ced0 <HAL_RTC_MspInit+0x78>)
 800cea0:	2180      	movs	r1, #128	; 0x80
 800cea2:	0209      	lsls	r1, r1, #8
 800cea4:	430a      	orrs	r2, r1
 800cea6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800cea8:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <HAL_RTC_MspInit+0x78>)
 800ceaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceac:	4b08      	ldr	r3, [pc, #32]	; (800ced0 <HAL_RTC_MspInit+0x78>)
 800ceae:	2180      	movs	r1, #128	; 0x80
 800ceb0:	00c9      	lsls	r1, r1, #3
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	63da      	str	r2, [r3, #60]	; 0x3c
 800ceb6:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <HAL_RTC_MspInit+0x78>)
 800ceb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceba:	2380      	movs	r3, #128	; 0x80
 800cebc:	00db      	lsls	r3, r3, #3
 800cebe:	4013      	ands	r3, r2
 800cec0:	60bb      	str	r3, [r7, #8]
 800cec2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800cec4:	46c0      	nop			; (mov r8, r8)
 800cec6:	46bd      	mov	sp, r7
 800cec8:	b00f      	add	sp, #60	; 0x3c
 800ceca:	bd90      	pop	{r4, r7, pc}
 800cecc:	40002800 	.word	0x40002800
 800ced0:	40021000 	.word	0x40021000

0800ced4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ced4:	b590      	push	{r4, r7, lr}
 800ced6:	b08b      	sub	sp, #44	; 0x2c
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cedc:	2414      	movs	r4, #20
 800cede:	193b      	adds	r3, r7, r4
 800cee0:	0018      	movs	r0, r3
 800cee2:	2314      	movs	r3, #20
 800cee4:	001a      	movs	r2, r3
 800cee6:	2100      	movs	r1, #0
 800cee8:	f015 fe56 	bl	8022b98 <memset>
  if(hspi->Instance==SPI1)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a1b      	ldr	r2, [pc, #108]	; (800cf60 <HAL_SPI_MspInit+0x8c>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d12f      	bne.n	800cf56 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800cef6:	4b1b      	ldr	r3, [pc, #108]	; (800cf64 <HAL_SPI_MspInit+0x90>)
 800cef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cefa:	4b1a      	ldr	r3, [pc, #104]	; (800cf64 <HAL_SPI_MspInit+0x90>)
 800cefc:	2180      	movs	r1, #128	; 0x80
 800cefe:	0149      	lsls	r1, r1, #5
 800cf00:	430a      	orrs	r2, r1
 800cf02:	641a      	str	r2, [r3, #64]	; 0x40
 800cf04:	4b17      	ldr	r3, [pc, #92]	; (800cf64 <HAL_SPI_MspInit+0x90>)
 800cf06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf08:	2380      	movs	r3, #128	; 0x80
 800cf0a:	015b      	lsls	r3, r3, #5
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	613b      	str	r3, [r7, #16]
 800cf10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf12:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <HAL_SPI_MspInit+0x90>)
 800cf14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf16:	4b13      	ldr	r3, [pc, #76]	; (800cf64 <HAL_SPI_MspInit+0x90>)
 800cf18:	2102      	movs	r1, #2
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	635a      	str	r2, [r3, #52]	; 0x34
 800cf1e:	4b11      	ldr	r3, [pc, #68]	; (800cf64 <HAL_SPI_MspInit+0x90>)
 800cf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf22:	2202      	movs	r2, #2
 800cf24:	4013      	ands	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800cf2a:	0021      	movs	r1, r4
 800cf2c:	187b      	adds	r3, r7, r1
 800cf2e:	2238      	movs	r2, #56	; 0x38
 800cf30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf32:	187b      	adds	r3, r7, r1
 800cf34:	2202      	movs	r2, #2
 800cf36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf38:	187b      	adds	r3, r7, r1
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf3e:	187b      	adds	r3, r7, r1
 800cf40:	2200      	movs	r2, #0
 800cf42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800cf44:	187b      	adds	r3, r7, r1
 800cf46:	2200      	movs	r2, #0
 800cf48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf4a:	187b      	adds	r3, r7, r1
 800cf4c:	4a06      	ldr	r2, [pc, #24]	; (800cf68 <HAL_SPI_MspInit+0x94>)
 800cf4e:	0019      	movs	r1, r3
 800cf50:	0010      	movs	r0, r2
 800cf52:	f003 fea5 	bl	8010ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800cf56:	46c0      	nop			; (mov r8, r8)
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	b00b      	add	sp, #44	; 0x2c
 800cf5c:	bd90      	pop	{r4, r7, pc}
 800cf5e:	46c0      	nop			; (mov r8, r8)
 800cf60:	40013000 	.word	0x40013000
 800cf64:	40021000 	.word	0x40021000
 800cf68:	50000400 	.word	0x50000400

0800cf6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a14      	ldr	r2, [pc, #80]	; (800cfcc <HAL_TIM_Base_MspInit+0x60>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d10e      	bne.n	800cf9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cf7e:	4b14      	ldr	r3, [pc, #80]	; (800cfd0 <HAL_TIM_Base_MspInit+0x64>)
 800cf80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf82:	4b13      	ldr	r3, [pc, #76]	; (800cfd0 <HAL_TIM_Base_MspInit+0x64>)
 800cf84:	2180      	movs	r1, #128	; 0x80
 800cf86:	0109      	lsls	r1, r1, #4
 800cf88:	430a      	orrs	r2, r1
 800cf8a:	641a      	str	r2, [r3, #64]	; 0x40
 800cf8c:	4b10      	ldr	r3, [pc, #64]	; (800cfd0 <HAL_TIM_Base_MspInit+0x64>)
 800cf8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf90:	2380      	movs	r3, #128	; 0x80
 800cf92:	011b      	lsls	r3, r3, #4
 800cf94:	4013      	ands	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800cf9a:	e012      	b.n	800cfc2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a0c      	ldr	r2, [pc, #48]	; (800cfd4 <HAL_TIM_Base_MspInit+0x68>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d10d      	bne.n	800cfc2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <HAL_TIM_Base_MspInit+0x64>)
 800cfa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfaa:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <HAL_TIM_Base_MspInit+0x64>)
 800cfac:	2180      	movs	r1, #128	; 0x80
 800cfae:	0209      	lsls	r1, r1, #8
 800cfb0:	430a      	orrs	r2, r1
 800cfb2:	641a      	str	r2, [r3, #64]	; 0x40
 800cfb4:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <HAL_TIM_Base_MspInit+0x64>)
 800cfb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfb8:	2380      	movs	r3, #128	; 0x80
 800cfba:	021b      	lsls	r3, r3, #8
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	60bb      	str	r3, [r7, #8]
 800cfc0:	68bb      	ldr	r3, [r7, #8]
}
 800cfc2:	46c0      	nop			; (mov r8, r8)
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	b004      	add	sp, #16
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	40012c00 	.word	0x40012c00
 800cfd0:	40021000 	.word	0x40021000
 800cfd4:	40002000 	.word	0x40002000

0800cfd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b089      	sub	sp, #36	; 0x24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfe0:	240c      	movs	r4, #12
 800cfe2:	193b      	adds	r3, r7, r4
 800cfe4:	0018      	movs	r0, r3
 800cfe6:	2314      	movs	r3, #20
 800cfe8:	001a      	movs	r2, r3
 800cfea:	2100      	movs	r1, #0
 800cfec:	f015 fdd4 	bl	8022b98 <memset>
  if(htim->Instance==TIM14)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a14      	ldr	r2, [pc, #80]	; (800d048 <HAL_TIM_MspPostInit+0x70>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d122      	bne.n	800d040 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cffa:	4b14      	ldr	r3, [pc, #80]	; (800d04c <HAL_TIM_MspPostInit+0x74>)
 800cffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <HAL_TIM_MspPostInit+0x74>)
 800d000:	2101      	movs	r1, #1
 800d002:	430a      	orrs	r2, r1
 800d004:	635a      	str	r2, [r3, #52]	; 0x34
 800d006:	4b11      	ldr	r3, [pc, #68]	; (800d04c <HAL_TIM_MspPostInit+0x74>)
 800d008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d00a:	2201      	movs	r2, #1
 800d00c:	4013      	ands	r3, r2
 800d00e:	60bb      	str	r3, [r7, #8]
 800d010:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d012:	0021      	movs	r1, r4
 800d014:	187b      	adds	r3, r7, r1
 800d016:	2210      	movs	r2, #16
 800d018:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d01a:	187b      	adds	r3, r7, r1
 800d01c:	2202      	movs	r2, #2
 800d01e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d020:	187b      	adds	r3, r7, r1
 800d022:	2200      	movs	r2, #0
 800d024:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d026:	187b      	adds	r3, r7, r1
 800d028:	2200      	movs	r2, #0
 800d02a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800d02c:	187b      	adds	r3, r7, r1
 800d02e:	2204      	movs	r2, #4
 800d030:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d032:	187a      	adds	r2, r7, r1
 800d034:	23a0      	movs	r3, #160	; 0xa0
 800d036:	05db      	lsls	r3, r3, #23
 800d038:	0011      	movs	r1, r2
 800d03a:	0018      	movs	r0, r3
 800d03c:	f003 fe30 	bl	8010ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800d040:	46c0      	nop			; (mov r8, r8)
 800d042:	46bd      	mov	sp, r7
 800d044:	b009      	add	sp, #36	; 0x24
 800d046:	bd90      	pop	{r4, r7, pc}
 800d048:	40002000 	.word	0x40002000
 800d04c:	40021000 	.word	0x40021000

0800d050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d050:	b590      	push	{r4, r7, lr}
 800d052:	b097      	sub	sp, #92	; 0x5c
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d058:	2344      	movs	r3, #68	; 0x44
 800d05a:	18fb      	adds	r3, r7, r3
 800d05c:	0018      	movs	r0, r3
 800d05e:	2314      	movs	r3, #20
 800d060:	001a      	movs	r2, r3
 800d062:	2100      	movs	r1, #0
 800d064:	f015 fd98 	bl	8022b98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d068:	2418      	movs	r4, #24
 800d06a:	193b      	adds	r3, r7, r4
 800d06c:	0018      	movs	r0, r3
 800d06e:	232c      	movs	r3, #44	; 0x2c
 800d070:	001a      	movs	r2, r3
 800d072:	2100      	movs	r1, #0
 800d074:	f015 fd90 	bl	8022b98 <memset>
  if(huart->Instance==USART1)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a4d      	ldr	r2, [pc, #308]	; (800d1b4 <HAL_UART_MspInit+0x164>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d146      	bne.n	800d110 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800d082:	193b      	adds	r3, r7, r4
 800d084:	2201      	movs	r2, #1
 800d086:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800d088:	193b      	adds	r3, r7, r4
 800d08a:	2200      	movs	r2, #0
 800d08c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d08e:	193b      	adds	r3, r7, r4
 800d090:	0018      	movs	r0, r3
 800d092:	f005 fc53 	bl	801293c <HAL_RCCEx_PeriphCLKConfig>
 800d096:	1e03      	subs	r3, r0, #0
 800d098:	d001      	beq.n	800d09e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800d09a:	f7ff fab3 	bl	800c604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d09e:	4b46      	ldr	r3, [pc, #280]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d0a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0a2:	4b45      	ldr	r3, [pc, #276]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d0a4:	2180      	movs	r1, #128	; 0x80
 800d0a6:	01c9      	lsls	r1, r1, #7
 800d0a8:	430a      	orrs	r2, r1
 800d0aa:	641a      	str	r2, [r3, #64]	; 0x40
 800d0ac:	4b42      	ldr	r3, [pc, #264]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d0ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0b0:	2380      	movs	r3, #128	; 0x80
 800d0b2:	01db      	lsls	r3, r3, #7
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	617b      	str	r3, [r7, #20]
 800d0b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d0ba:	4b3f      	ldr	r3, [pc, #252]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d0bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0be:	4b3e      	ldr	r3, [pc, #248]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d0c0:	2102      	movs	r1, #2
 800d0c2:	430a      	orrs	r2, r1
 800d0c4:	635a      	str	r2, [r3, #52]	; 0x34
 800d0c6:	4b3c      	ldr	r3, [pc, #240]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	613b      	str	r3, [r7, #16]
 800d0d0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d0d2:	2144      	movs	r1, #68	; 0x44
 800d0d4:	187b      	adds	r3, r7, r1
 800d0d6:	22c0      	movs	r2, #192	; 0xc0
 800d0d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0da:	187b      	adds	r3, r7, r1
 800d0dc:	2202      	movs	r2, #2
 800d0de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0e0:	187b      	adds	r3, r7, r1
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0e6:	187b      	adds	r3, r7, r1
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800d0ec:	187b      	adds	r3, r7, r1
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d0f2:	187b      	adds	r3, r7, r1
 800d0f4:	4a31      	ldr	r2, [pc, #196]	; (800d1bc <HAL_UART_MspInit+0x16c>)
 800d0f6:	0019      	movs	r1, r3
 800d0f8:	0010      	movs	r0, r2
 800d0fa:	f003 fdd1 	bl	8010ca0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d0fe:	2200      	movs	r2, #0
 800d100:	2100      	movs	r1, #0
 800d102:	201b      	movs	r0, #27
 800d104:	f003 fb10 	bl	8010728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d108:	201b      	movs	r0, #27
 800d10a:	f003 fb22 	bl	8010752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800d10e:	e04c      	b.n	800d1aa <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a2a      	ldr	r2, [pc, #168]	; (800d1c0 <HAL_UART_MspInit+0x170>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d147      	bne.n	800d1aa <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800d11a:	2118      	movs	r1, #24
 800d11c:	187b      	adds	r3, r7, r1
 800d11e:	2202      	movs	r2, #2
 800d120:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800d122:	187b      	adds	r3, r7, r1
 800d124:	2200      	movs	r2, #0
 800d126:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d128:	187b      	adds	r3, r7, r1
 800d12a:	0018      	movs	r0, r3
 800d12c:	f005 fc06 	bl	801293c <HAL_RCCEx_PeriphCLKConfig>
 800d130:	1e03      	subs	r3, r0, #0
 800d132:	d001      	beq.n	800d138 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 800d134:	f7ff fa66 	bl	800c604 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d138:	4b1f      	ldr	r3, [pc, #124]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d13a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d13c:	4b1e      	ldr	r3, [pc, #120]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d13e:	2180      	movs	r1, #128	; 0x80
 800d140:	0289      	lsls	r1, r1, #10
 800d142:	430a      	orrs	r2, r1
 800d144:	63da      	str	r2, [r3, #60]	; 0x3c
 800d146:	4b1c      	ldr	r3, [pc, #112]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d14a:	2380      	movs	r3, #128	; 0x80
 800d14c:	029b      	lsls	r3, r3, #10
 800d14e:	4013      	ands	r3, r2
 800d150:	60fb      	str	r3, [r7, #12]
 800d152:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d154:	4b18      	ldr	r3, [pc, #96]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d158:	4b17      	ldr	r3, [pc, #92]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d15a:	2101      	movs	r1, #1
 800d15c:	430a      	orrs	r2, r1
 800d15e:	635a      	str	r2, [r3, #52]	; 0x34
 800d160:	4b15      	ldr	r3, [pc, #84]	; (800d1b8 <HAL_UART_MspInit+0x168>)
 800d162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d164:	2201      	movs	r2, #1
 800d166:	4013      	ands	r3, r2
 800d168:	60bb      	str	r3, [r7, #8]
 800d16a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800d16c:	2144      	movs	r1, #68	; 0x44
 800d16e:	187b      	adds	r3, r7, r1
 800d170:	220c      	movs	r2, #12
 800d172:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d174:	187b      	adds	r3, r7, r1
 800d176:	2202      	movs	r2, #2
 800d178:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d17a:	187b      	adds	r3, r7, r1
 800d17c:	2200      	movs	r2, #0
 800d17e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d180:	187b      	adds	r3, r7, r1
 800d182:	2200      	movs	r2, #0
 800d184:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800d186:	187b      	adds	r3, r7, r1
 800d188:	2201      	movs	r2, #1
 800d18a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d18c:	187a      	adds	r2, r7, r1
 800d18e:	23a0      	movs	r3, #160	; 0xa0
 800d190:	05db      	lsls	r3, r3, #23
 800d192:	0011      	movs	r1, r2
 800d194:	0018      	movs	r0, r3
 800d196:	f003 fd83 	bl	8010ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d19a:	2200      	movs	r2, #0
 800d19c:	2100      	movs	r1, #0
 800d19e:	201c      	movs	r0, #28
 800d1a0:	f003 fac2 	bl	8010728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d1a4:	201c      	movs	r0, #28
 800d1a6:	f003 fad4 	bl	8010752 <HAL_NVIC_EnableIRQ>
}
 800d1aa:	46c0      	nop			; (mov r8, r8)
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	b017      	add	sp, #92	; 0x5c
 800d1b0:	bd90      	pop	{r4, r7, pc}
 800d1b2:	46c0      	nop			; (mov r8, r8)
 800d1b4:	40013800 	.word	0x40013800
 800d1b8:	40021000 	.word	0x40021000
 800d1bc:	50000400 	.word	0x50000400
 800d1c0:	40004400 	.word	0x40004400

0800d1c4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a14      	ldr	r2, [pc, #80]	; (800d224 <HAL_UART_MspDeInit+0x60>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d10e      	bne.n	800d1f4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800d1d6:	4b14      	ldr	r3, [pc, #80]	; (800d228 <HAL_UART_MspDeInit+0x64>)
 800d1d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1da:	4b13      	ldr	r3, [pc, #76]	; (800d228 <HAL_UART_MspDeInit+0x64>)
 800d1dc:	4913      	ldr	r1, [pc, #76]	; (800d22c <HAL_UART_MspDeInit+0x68>)
 800d1de:	400a      	ands	r2, r1
 800d1e0:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800d1e2:	4b13      	ldr	r3, [pc, #76]	; (800d230 <HAL_UART_MspDeInit+0x6c>)
 800d1e4:	21c0      	movs	r1, #192	; 0xc0
 800d1e6:	0018      	movs	r0, r3
 800d1e8:	f003 fec6 	bl	8010f78 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800d1ec:	201b      	movs	r0, #27
 800d1ee:	f003 fac0 	bl	8010772 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800d1f2:	e013      	b.n	800d21c <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART2)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a0e      	ldr	r2, [pc, #56]	; (800d234 <HAL_UART_MspDeInit+0x70>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d10e      	bne.n	800d21c <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART2_CLK_DISABLE();
 800d1fe:	4b0a      	ldr	r3, [pc, #40]	; (800d228 <HAL_UART_MspDeInit+0x64>)
 800d200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d202:	4b09      	ldr	r3, [pc, #36]	; (800d228 <HAL_UART_MspDeInit+0x64>)
 800d204:	490c      	ldr	r1, [pc, #48]	; (800d238 <HAL_UART_MspDeInit+0x74>)
 800d206:	400a      	ands	r2, r1
 800d208:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800d20a:	23a0      	movs	r3, #160	; 0xa0
 800d20c:	05db      	lsls	r3, r3, #23
 800d20e:	210c      	movs	r1, #12
 800d210:	0018      	movs	r0, r3
 800d212:	f003 feb1 	bl	8010f78 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800d216:	201c      	movs	r0, #28
 800d218:	f003 faab 	bl	8010772 <HAL_NVIC_DisableIRQ>
}
 800d21c:	46c0      	nop			; (mov r8, r8)
 800d21e:	46bd      	mov	sp, r7
 800d220:	b002      	add	sp, #8
 800d222:	bd80      	pop	{r7, pc}
 800d224:	40013800 	.word	0x40013800
 800d228:	40021000 	.word	0x40021000
 800d22c:	ffffbfff 	.word	0xffffbfff
 800d230:	50000400 	.word	0x50000400
 800d234:	40004400 	.word	0x40004400
 800d238:	fffdffff 	.word	0xfffdffff

0800d23c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d240:	e7fe      	b.n	800d240 <NMI_Handler+0x4>

0800d242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d246:	e7fe      	b.n	800d246 <HardFault_Handler+0x4>

0800d248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d24c:	46c0      	nop			; (mov r8, r8)
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d256:	46c0      	nop			; (mov r8, r8)
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	TickWeb++;
 800d260:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <SysTick_Handler+0x30>)
 800d262:	881b      	ldrh	r3, [r3, #0]
 800d264:	3301      	adds	r3, #1
 800d266:	b29a      	uxth	r2, r3
 800d268:	4b08      	ldr	r3, [pc, #32]	; (800d28c <SysTick_Handler+0x30>)
 800d26a:	801a      	strh	r2, [r3, #0]
	if (TickWeb == 1000)
 800d26c:	4b07      	ldr	r3, [pc, #28]	; (800d28c <SysTick_Handler+0x30>)
 800d26e:	881a      	ldrh	r2, [r3, #0]
 800d270:	23fa      	movs	r3, #250	; 0xfa
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	429a      	cmp	r2, r3
 800d276:	d104      	bne.n	800d282 <SysTick_Handler+0x26>
	{
		TickWeb = 0;
 800d278:	4b04      	ldr	r3, [pc, #16]	; (800d28c <SysTick_Handler+0x30>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	801a      	strh	r2, [r3, #0]
		httpServer_time_handler();
 800d27e:	f014 fdd5 	bl	8021e2c <httpServer_time_handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d282:	f002 f875 	bl	800f370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d286:	46c0      	nop			; (mov r8, r8)
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	20006f20 	.word	0x20006f20

0800d290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d294:	4b03      	ldr	r3, [pc, #12]	; (800d2a4 <USART1_IRQHandler+0x14>)
 800d296:	0018      	movs	r0, r3
 800d298:	f008 fb12 	bl	80158c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d29c:	46c0      	nop			; (mov r8, r8)
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	46c0      	nop			; (mov r8, r8)
 800d2a4:	20006a90 	.word	0x20006a90

0800d2a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d2ac:	4b03      	ldr	r3, [pc, #12]	; (800d2bc <USART2_IRQHandler+0x14>)
 800d2ae:	0018      	movs	r0, r3
 800d2b0:	f008 fb06 	bl	80158c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d2b4:	46c0      	nop			; (mov r8, r8)
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	46c0      	nop			; (mov r8, r8)
 800d2bc:	20006b24 	.word	0x20006b24

0800d2c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	af00      	add	r7, sp, #0
  return 1;
 800d2c4:	2301      	movs	r3, #1
}
 800d2c6:	0018      	movs	r0, r3
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <_kill>:

int _kill(int pid, int sig)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d2d6:	f016 fb11 	bl	80238fc <__errno>
 800d2da:	0003      	movs	r3, r0
 800d2dc:	2216      	movs	r2, #22
 800d2de:	601a      	str	r2, [r3, #0]
  return -1;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	425b      	negs	r3, r3
}
 800d2e4:	0018      	movs	r0, r3
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	b002      	add	sp, #8
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <_exit>:

void _exit (int status)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	425a      	negs	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	0011      	movs	r1, r2
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	f7ff ffe5 	bl	800d2cc <_kill>
  while (1) {}    /* Make sure we hang here */
 800d302:	e7fe      	b.n	800d302 <_exit+0x16>

0800d304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d310:	2300      	movs	r3, #0
 800d312:	617b      	str	r3, [r7, #20]
 800d314:	e00a      	b.n	800d32c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d316:	e000      	b.n	800d31a <_read+0x16>
 800d318:	bf00      	nop
 800d31a:	0001      	movs	r1, r0
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	60ba      	str	r2, [r7, #8]
 800d322:	b2ca      	uxtb	r2, r1
 800d324:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	3301      	adds	r3, #1
 800d32a:	617b      	str	r3, [r7, #20]
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	dbf0      	blt.n	800d316 <_read+0x12>
  }

  return len;
 800d334:	687b      	ldr	r3, [r7, #4]
}
 800d336:	0018      	movs	r0, r3
 800d338:	46bd      	mov	sp, r7
 800d33a:	b006      	add	sp, #24
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b086      	sub	sp, #24
 800d342:	af00      	add	r7, sp, #0
 800d344:	60f8      	str	r0, [r7, #12]
 800d346:	60b9      	str	r1, [r7, #8]
 800d348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d34a:	2300      	movs	r3, #0
 800d34c:	617b      	str	r3, [r7, #20]
 800d34e:	e009      	b.n	800d364 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	60ba      	str	r2, [r7, #8]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	0018      	movs	r0, r3
 800d35a:	f7fc fa3f 	bl	80097dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	3301      	adds	r3, #1
 800d362:	617b      	str	r3, [r7, #20]
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	429a      	cmp	r2, r3
 800d36a:	dbf1      	blt.n	800d350 <_write+0x12>
  }
  return len;
 800d36c:	687b      	ldr	r3, [r7, #4]
}
 800d36e:	0018      	movs	r0, r3
 800d370:	46bd      	mov	sp, r7
 800d372:	b006      	add	sp, #24
 800d374:	bd80      	pop	{r7, pc}

0800d376 <_close>:

int _close(int file)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d37e:	2301      	movs	r3, #1
 800d380:	425b      	negs	r3, r3
}
 800d382:	0018      	movs	r0, r3
 800d384:	46bd      	mov	sp, r7
 800d386:	b002      	add	sp, #8
 800d388:	bd80      	pop	{r7, pc}

0800d38a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2280      	movs	r2, #128	; 0x80
 800d398:	0192      	lsls	r2, r2, #6
 800d39a:	605a      	str	r2, [r3, #4]
  return 0;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	0018      	movs	r0, r3
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	b002      	add	sp, #8
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <_isatty>:

int _isatty(int file)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d3ae:	2301      	movs	r3, #1
}
 800d3b0:	0018      	movs	r0, r3
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	b002      	add	sp, #8
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	b004      	add	sp, #16
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d3d8:	4a14      	ldr	r2, [pc, #80]	; (800d42c <_sbrk+0x5c>)
 800d3da:	4b15      	ldr	r3, [pc, #84]	; (800d430 <_sbrk+0x60>)
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d3e4:	4b13      	ldr	r3, [pc, #76]	; (800d434 <_sbrk+0x64>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d102      	bne.n	800d3f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d3ec:	4b11      	ldr	r3, [pc, #68]	; (800d434 <_sbrk+0x64>)
 800d3ee:	4a12      	ldr	r2, [pc, #72]	; (800d438 <_sbrk+0x68>)
 800d3f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d3f2:	4b10      	ldr	r3, [pc, #64]	; (800d434 <_sbrk+0x64>)
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	18d3      	adds	r3, r2, r3
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d207      	bcs.n	800d410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d400:	f016 fa7c 	bl	80238fc <__errno>
 800d404:	0003      	movs	r3, r0
 800d406:	220c      	movs	r2, #12
 800d408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d40a:	2301      	movs	r3, #1
 800d40c:	425b      	negs	r3, r3
 800d40e:	e009      	b.n	800d424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d410:	4b08      	ldr	r3, [pc, #32]	; (800d434 <_sbrk+0x64>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d416:	4b07      	ldr	r3, [pc, #28]	; (800d434 <_sbrk+0x64>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	18d2      	adds	r2, r2, r3
 800d41e:	4b05      	ldr	r3, [pc, #20]	; (800d434 <_sbrk+0x64>)
 800d420:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d422:	68fb      	ldr	r3, [r7, #12]
}
 800d424:	0018      	movs	r0, r3
 800d426:	46bd      	mov	sp, r7
 800d428:	b006      	add	sp, #24
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20024000 	.word	0x20024000
 800d430:	00000400 	.word	0x00000400
 800d434:	20006f28 	.word	0x20006f28
 800d438:	2001c380 	.word	0x2001c380

0800d43c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 800d440:	4b02      	ldr	r3, [pc, #8]	; (800d44c <SystemInit+0x10>)
 800d442:	4a03      	ldr	r2, [pc, #12]	; (800d450 <SystemInit+0x14>)
 800d444:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d446:	46c0      	nop			; (mov r8, r8)
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	e000ed00 	.word	0xe000ed00
 800d450:	08002000 	.word	0x08002000

0800d454 <Uart_process>:
	IDLE,
	COMMAND
} Uart_State;
static Uart_State uart_state_process = IDLE;
void Uart_process(void)
{
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	af00      	add	r7, sp, #0

	switch (uart_state_process)
 800d458:	4bd5      	ldr	r3, [pc, #852]	; (800d7b0 <Uart_process+0x35c>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <Uart_process+0x12>
 800d460:	2b01      	cmp	r3, #1
 800d462:	d00c      	beq.n	800d47e <Uart_process+0x2a>
 800d464:	e1ed      	b.n	800d842 <Uart_process+0x3ee>
	{
	case IDLE:

		if (Get_Carriage_Return_Flag() == true) // if we receive the end of frame
 800d466:	f000 fe53 	bl	800e110 <Get_Carriage_Return_Flag>
 800d46a:	1e03      	subs	r3, r0, #0
 800d46c:	d100      	bne.n	800d470 <Uart_process+0x1c>
 800d46e:	e1ec      	b.n	800d84a <Uart_process+0x3f6>
		{
			//	   		   if (getRxUartBuffer(0) == 'p' || getRxUartBuffer(0) == 'v' )
			//	   		   {
			Set_Carriage_Return_Flag(false); // Initialize at false for the next frame
 800d470:	2000      	movs	r0, #0
 800d472:	f000 fe57 	bl	800e124 <Set_Carriage_Return_Flag>
			uart_state_process = COMMAND;
 800d476:	4bce      	ldr	r3, [pc, #824]	; (800d7b0 <Uart_process+0x35c>)
 800d478:	2201      	movs	r2, #1
 800d47a:	701a      	strb	r2, [r3, #0]
			//	   		   }
		}
		break;
 800d47c:	e1e5      	b.n	800d84a <Uart_process+0x3f6>

	case COMMAND:
	{
		rx_Buffer[0] = getRxUartBuffer(0);	 // store command high
 800d47e:	2000      	movs	r0, #0
 800d480:	f000 fe36 	bl	800e0f0 <getRxUartBuffer>
 800d484:	0003      	movs	r3, r0
 800d486:	001a      	movs	r2, r3
 800d488:	4bca      	ldr	r3, [pc, #808]	; (800d7b4 <Uart_process+0x360>)
 800d48a:	701a      	strb	r2, [r3, #0]
		rx_Buffer[1] = getRxUartBuffer(1);	 // store command high
 800d48c:	2001      	movs	r0, #1
 800d48e:	f000 fe2f 	bl	800e0f0 <getRxUartBuffer>
 800d492:	0003      	movs	r3, r0
 800d494:	001a      	movs	r2, r3
 800d496:	4bc7      	ldr	r3, [pc, #796]	; (800d7b4 <Uart_process+0x360>)
 800d498:	705a      	strb	r2, [r3, #1]
		rx_Buffer[2] = getRxUartBuffer(2);	 // store command high
 800d49a:	2002      	movs	r0, #2
 800d49c:	f000 fe28 	bl	800e0f0 <getRxUartBuffer>
 800d4a0:	0003      	movs	r3, r0
 800d4a2:	001a      	movs	r2, r3
 800d4a4:	4bc3      	ldr	r3, [pc, #780]	; (800d7b4 <Uart_process+0x360>)
 800d4a6:	709a      	strb	r2, [r3, #2]
		rx_Buffer[3] = getRxUartBuffer(3);	 // store command high
 800d4a8:	2003      	movs	r0, #3
 800d4aa:	f000 fe21 	bl	800e0f0 <getRxUartBuffer>
 800d4ae:	0003      	movs	r3, r0
 800d4b0:	001a      	movs	r2, r3
 800d4b2:	4bc0      	ldr	r3, [pc, #768]	; (800d7b4 <Uart_process+0x360>)
 800d4b4:	70da      	strb	r2, [r3, #3]
		rx_Buffer[4] = getRxUartBuffer(4);	 // store command high
 800d4b6:	2004      	movs	r0, #4
 800d4b8:	f000 fe1a 	bl	800e0f0 <getRxUartBuffer>
 800d4bc:	0003      	movs	r3, r0
 800d4be:	001a      	movs	r2, r3
 800d4c0:	4bbc      	ldr	r3, [pc, #752]	; (800d7b4 <Uart_process+0x360>)
 800d4c2:	711a      	strb	r2, [r3, #4]
		rx_Buffer[5] = getRxUartBuffer(5);	 // store command high
 800d4c4:	2005      	movs	r0, #5
 800d4c6:	f000 fe13 	bl	800e0f0 <getRxUartBuffer>
 800d4ca:	0003      	movs	r3, r0
 800d4cc:	001a      	movs	r2, r3
 800d4ce:	4bb9      	ldr	r3, [pc, #740]	; (800d7b4 <Uart_process+0x360>)
 800d4d0:	715a      	strb	r2, [r3, #5]
		rx_Buffer[6] = getRxUartBuffer(6);	 // store command high
 800d4d2:	2006      	movs	r0, #6
 800d4d4:	f000 fe0c 	bl	800e0f0 <getRxUartBuffer>
 800d4d8:	0003      	movs	r3, r0
 800d4da:	001a      	movs	r2, r3
 800d4dc:	4bb5      	ldr	r3, [pc, #724]	; (800d7b4 <Uart_process+0x360>)
 800d4de:	719a      	strb	r2, [r3, #6]
		rx_Buffer[7] = getRxUartBuffer(7);	 // store command high
 800d4e0:	2007      	movs	r0, #7
 800d4e2:	f000 fe05 	bl	800e0f0 <getRxUartBuffer>
 800d4e6:	0003      	movs	r3, r0
 800d4e8:	001a      	movs	r2, r3
 800d4ea:	4bb2      	ldr	r3, [pc, #712]	; (800d7b4 <Uart_process+0x360>)
 800d4ec:	71da      	strb	r2, [r3, #7]
		rx_Buffer[8] = getRxUartBuffer(8);	 // store command high
 800d4ee:	2008      	movs	r0, #8
 800d4f0:	f000 fdfe 	bl	800e0f0 <getRxUartBuffer>
 800d4f4:	0003      	movs	r3, r0
 800d4f6:	001a      	movs	r2, r3
 800d4f8:	4bae      	ldr	r3, [pc, #696]	; (800d7b4 <Uart_process+0x360>)
 800d4fa:	721a      	strb	r2, [r3, #8]
		rx_Buffer[9] = getRxUartBuffer(9);	 // store command high
 800d4fc:	2009      	movs	r0, #9
 800d4fe:	f000 fdf7 	bl	800e0f0 <getRxUartBuffer>
 800d502:	0003      	movs	r3, r0
 800d504:	001a      	movs	r2, r3
 800d506:	4bab      	ldr	r3, [pc, #684]	; (800d7b4 <Uart_process+0x360>)
 800d508:	725a      	strb	r2, [r3, #9]
		rx_Buffer[10] = getRxUartBuffer(10); // store command high
 800d50a:	200a      	movs	r0, #10
 800d50c:	f000 fdf0 	bl	800e0f0 <getRxUartBuffer>
 800d510:	0003      	movs	r3, r0
 800d512:	001a      	movs	r2, r3
 800d514:	4ba7      	ldr	r3, [pc, #668]	; (800d7b4 <Uart_process+0x360>)
 800d516:	729a      	strb	r2, [r3, #10]
		rx_Buffer[11] = getRxUartBuffer(11); // store command high
 800d518:	200b      	movs	r0, #11
 800d51a:	f000 fde9 	bl	800e0f0 <getRxUartBuffer>
 800d51e:	0003      	movs	r3, r0
 800d520:	001a      	movs	r2, r3
 800d522:	4ba4      	ldr	r3, [pc, #656]	; (800d7b4 <Uart_process+0x360>)
 800d524:	72da      	strb	r2, [r3, #11]
		rx_Buffer[12] = getRxUartBuffer(12); // store command high
 800d526:	200c      	movs	r0, #12
 800d528:	f000 fde2 	bl	800e0f0 <getRxUartBuffer>
 800d52c:	0003      	movs	r3, r0
 800d52e:	001a      	movs	r2, r3
 800d530:	4ba0      	ldr	r3, [pc, #640]	; (800d7b4 <Uart_process+0x360>)
 800d532:	731a      	strb	r2, [r3, #12]
		rx_Buffer[13] = getRxUartBuffer(13); // store command high
 800d534:	200d      	movs	r0, #13
 800d536:	f000 fddb 	bl	800e0f0 <getRxUartBuffer>
 800d53a:	0003      	movs	r3, r0
 800d53c:	001a      	movs	r2, r3
 800d53e:	4b9d      	ldr	r3, [pc, #628]	; (800d7b4 <Uart_process+0x360>)
 800d540:	735a      	strb	r2, [r3, #13]
		rx_Buffer[14] = getRxUartBuffer(14); // store command high
 800d542:	200e      	movs	r0, #14
 800d544:	f000 fdd4 	bl	800e0f0 <getRxUartBuffer>
 800d548:	0003      	movs	r3, r0
 800d54a:	001a      	movs	r2, r3
 800d54c:	4b99      	ldr	r3, [pc, #612]	; (800d7b4 <Uart_process+0x360>)
 800d54e:	739a      	strb	r2, [r3, #14]
		rx_Buffer[15] = getRxUartBuffer(15); // store command high
 800d550:	200f      	movs	r0, #15
 800d552:	f000 fdcd 	bl	800e0f0 <getRxUartBuffer>
 800d556:	0003      	movs	r3, r0
 800d558:	001a      	movs	r2, r3
 800d55a:	4b96      	ldr	r3, [pc, #600]	; (800d7b4 <Uart_process+0x360>)
 800d55c:	73da      	strb	r2, [r3, #15]
		rx_Buffer[16] = getRxUartBuffer(16); // store command high
 800d55e:	2010      	movs	r0, #16
 800d560:	f000 fdc6 	bl	800e0f0 <getRxUartBuffer>
 800d564:	0003      	movs	r3, r0
 800d566:	001a      	movs	r2, r3
 800d568:	4b92      	ldr	r3, [pc, #584]	; (800d7b4 <Uart_process+0x360>)
 800d56a:	741a      	strb	r2, [r3, #16]
		rx_Buffer[17] = getRxUartBuffer(17); // store command high
 800d56c:	2011      	movs	r0, #17
 800d56e:	f000 fdbf 	bl	800e0f0 <getRxUartBuffer>
 800d572:	0003      	movs	r3, r0
 800d574:	001a      	movs	r2, r3
 800d576:	4b8f      	ldr	r3, [pc, #572]	; (800d7b4 <Uart_process+0x360>)
 800d578:	745a      	strb	r2, [r3, #17]
		rx_Buffer[18] = getRxUartBuffer(18); // store command high
 800d57a:	2012      	movs	r0, #18
 800d57c:	f000 fdb8 	bl	800e0f0 <getRxUartBuffer>
 800d580:	0003      	movs	r3, r0
 800d582:	001a      	movs	r2, r3
 800d584:	4b8b      	ldr	r3, [pc, #556]	; (800d7b4 <Uart_process+0x360>)
 800d586:	749a      	strb	r2, [r3, #18]
		rx_Buffer[19] = getRxUartBuffer(19); // store command high
 800d588:	2013      	movs	r0, #19
 800d58a:	f000 fdb1 	bl	800e0f0 <getRxUartBuffer>
 800d58e:	0003      	movs	r3, r0
 800d590:	001a      	movs	r2, r3
 800d592:	4b88      	ldr	r3, [pc, #544]	; (800d7b4 <Uart_process+0x360>)
 800d594:	74da      	strb	r2, [r3, #19]
		rx_Buffer[20] = getRxUartBuffer(20); // store command high
 800d596:	2014      	movs	r0, #20
 800d598:	f000 fdaa 	bl	800e0f0 <getRxUartBuffer>
 800d59c:	0003      	movs	r3, r0
 800d59e:	001a      	movs	r2, r3
 800d5a0:	4b84      	ldr	r3, [pc, #528]	; (800d7b4 <Uart_process+0x360>)
 800d5a2:	751a      	strb	r2, [r3, #20]

		if (Compare_Command("ver", sizeof("ver")))
 800d5a4:	4b84      	ldr	r3, [pc, #528]	; (800d7b8 <Uart_process+0x364>)
 800d5a6:	2104      	movs	r1, #4
 800d5a8:	0018      	movs	r0, r3
 800d5aa:	f000 f9fb 	bl	800d9a4 <Compare_Command>
 800d5ae:	1e03      	subs	r3, r0, #0
 800d5b0:	d002      	beq.n	800d5b8 <Uart_process+0x164>
		{
			Send_Version_Data(); // reply through uart
 800d5b2:	f000 fb57 	bl	800dc64 <Send_Version_Data>
 800d5b6:	e140      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("pr", sizeof("pr")))
 800d5b8:	4b80      	ldr	r3, [pc, #512]	; (800d7bc <Uart_process+0x368>)
 800d5ba:	2103      	movs	r1, #3
 800d5bc:	0018      	movs	r0, r3
 800d5be:	f000 f9f1 	bl	800d9a4 <Compare_Command>
 800d5c2:	1e03      	subs	r3, r0, #0
 800d5c4:	d002      	beq.n	800d5cc <Uart_process+0x178>
		{
			Send_Motion_Data(); // reply through uart
 800d5c6:	f000 fc43 	bl	800de50 <Send_Motion_Data>
 800d5ca:	e136      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetIR", sizeof("SetIR")))
 800d5cc:	4b7c      	ldr	r3, [pc, #496]	; (800d7c0 <Uart_process+0x36c>)
 800d5ce:	2106      	movs	r1, #6
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	f000 f9e7 	bl	800d9a4 <Compare_Command>
 800d5d6:	1e03      	subs	r3, r0, #0
 800d5d8:	d01a      	beq.n	800d610 <Uart_process+0x1bc>
		{
			Set_IR_Command(getRxUartBuffer(5), getRxUartBuffer(6), getRxUartBuffer(7), getRxUartBuffer(8));
 800d5da:	2005      	movs	r0, #5
 800d5dc:	f000 fd88 	bl	800e0f0 <getRxUartBuffer>
 800d5e0:	0003      	movs	r3, r0
 800d5e2:	001c      	movs	r4, r3
 800d5e4:	2006      	movs	r0, #6
 800d5e6:	f000 fd83 	bl	800e0f0 <getRxUartBuffer>
 800d5ea:	0003      	movs	r3, r0
 800d5ec:	001d      	movs	r5, r3
 800d5ee:	2007      	movs	r0, #7
 800d5f0:	f000 fd7e 	bl	800e0f0 <getRxUartBuffer>
 800d5f4:	0003      	movs	r3, r0
 800d5f6:	001e      	movs	r6, r3
 800d5f8:	2008      	movs	r0, #8
 800d5fa:	f000 fd79 	bl	800e0f0 <getRxUartBuffer>
 800d5fe:	0003      	movs	r3, r0
 800d600:	0032      	movs	r2, r6
 800d602:	0029      	movs	r1, r5
 800d604:	0020      	movs	r0, r4
 800d606:	f000 fae1 	bl	800dbcc <Set_IR_Command>
			Send_IR_Command_Debug();
 800d60a:	f000 fad9 	bl	800dbc0 <Send_IR_Command_Debug>
 800d60e:	e114      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("ReadIR", sizeof("ReadIR")))
 800d610:	4b6c      	ldr	r3, [pc, #432]	; (800d7c4 <Uart_process+0x370>)
 800d612:	2107      	movs	r1, #7
 800d614:	0018      	movs	r0, r3
 800d616:	f000 f9c5 	bl	800d9a4 <Compare_Command>
 800d61a:	1e03      	subs	r3, r0, #0
 800d61c:	d002      	beq.n	800d624 <Uart_process+0x1d0>
		{
			Send_IR_Command_Debug();
 800d61e:	f000 facf 	bl	800dbc0 <Send_IR_Command_Debug>
 800d622:	e10a      	b.n	800d83a <Uart_process+0x3e6>
		//			else if (Compare_Command("SetR2S", sizeof("SetR2S")))
		//			{
		//				Set_RS232_Command(getRxUartBuffer(6),getRxUartBuffer(7), getRxUartBuffer(8), getRxUartBuffer(9));
		//			    Send_RS232_Command_Debug();
		//			}
		else if (Compare_Command("SetR2S9C", sizeof("SetR2S9C")))
 800d624:	4b68      	ldr	r3, [pc, #416]	; (800d7c8 <Uart_process+0x374>)
 800d626:	2109      	movs	r1, #9
 800d628:	0018      	movs	r0, r3
 800d62a:	f000 f9bb 	bl	800d9a4 <Compare_Command>
 800d62e:	1e03      	subs	r3, r0, #0
 800d630:	d004      	beq.n	800d63c <Uart_process+0x1e8>
		{
			Set_RS232_Command();
 800d632:	f000 faf5 	bl	800dc20 <Set_RS232_Command>
			Send_RS232_Command_Debug();
 800d636:	f000 f9d5 	bl	800d9e4 <Send_RS232_Command_Debug>
 800d63a:	e0fe      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("ReadRS", sizeof("ReadIR")))
 800d63c:	4b63      	ldr	r3, [pc, #396]	; (800d7cc <Uart_process+0x378>)
 800d63e:	2107      	movs	r1, #7
 800d640:	0018      	movs	r0, r3
 800d642:	f000 f9af 	bl	800d9a4 <Compare_Command>
 800d646:	1e03      	subs	r3, r0, #0
 800d648:	d002      	beq.n	800d650 <Uart_process+0x1fc>
		{
			Send_RS232_Command_Debug();
 800d64a:	f000 f9cb 	bl	800d9e4 <Send_RS232_Command_Debug>
 800d64e:	e0f4      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetTempTreshMin", sizeof("SetTempTreshMin")))
 800d650:	4b5f      	ldr	r3, [pc, #380]	; (800d7d0 <Uart_process+0x37c>)
 800d652:	2110      	movs	r1, #16
 800d654:	0018      	movs	r0, r3
 800d656:	f000 f9a5 	bl	800d9a4 <Compare_Command>
 800d65a:	1e03      	subs	r3, r0, #0
 800d65c:	d018      	beq.n	800d690 <Uart_process+0x23c>
		{
			Set_Temp_Treshold_Min(getRxUartBuffer(15), getRxUartBuffer(16), getRxUartBuffer(17), getRxUartBuffer(18));
 800d65e:	200f      	movs	r0, #15
 800d660:	f000 fd46 	bl	800e0f0 <getRxUartBuffer>
 800d664:	0003      	movs	r3, r0
 800d666:	001c      	movs	r4, r3
 800d668:	2010      	movs	r0, #16
 800d66a:	f000 fd41 	bl	800e0f0 <getRxUartBuffer>
 800d66e:	0003      	movs	r3, r0
 800d670:	001d      	movs	r5, r3
 800d672:	2011      	movs	r0, #17
 800d674:	f000 fd3c 	bl	800e0f0 <getRxUartBuffer>
 800d678:	0003      	movs	r3, r0
 800d67a:	001e      	movs	r6, r3
 800d67c:	2012      	movs	r0, #18
 800d67e:	f000 fd37 	bl	800e0f0 <getRxUartBuffer>
 800d682:	0003      	movs	r3, r0
 800d684:	0032      	movs	r2, r6
 800d686:	0029      	movs	r1, r5
 800d688:	0020      	movs	r0, r4
 800d68a:	f000 f937 	bl	800d8fc <Set_Temp_Treshold_Min>
 800d68e:	e0d4      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetTempTreshMax", sizeof("SetTempTreshMax")))
 800d690:	4b50      	ldr	r3, [pc, #320]	; (800d7d4 <Uart_process+0x380>)
 800d692:	2110      	movs	r1, #16
 800d694:	0018      	movs	r0, r3
 800d696:	f000 f985 	bl	800d9a4 <Compare_Command>
 800d69a:	1e03      	subs	r3, r0, #0
 800d69c:	d018      	beq.n	800d6d0 <Uart_process+0x27c>
		{
			Set_Temp_Treshold_Max(getRxUartBuffer(15), getRxUartBuffer(16), getRxUartBuffer(17), getRxUartBuffer(18));
 800d69e:	200f      	movs	r0, #15
 800d6a0:	f000 fd26 	bl	800e0f0 <getRxUartBuffer>
 800d6a4:	0003      	movs	r3, r0
 800d6a6:	001c      	movs	r4, r3
 800d6a8:	2010      	movs	r0, #16
 800d6aa:	f000 fd21 	bl	800e0f0 <getRxUartBuffer>
 800d6ae:	0003      	movs	r3, r0
 800d6b0:	001d      	movs	r5, r3
 800d6b2:	2011      	movs	r0, #17
 800d6b4:	f000 fd1c 	bl	800e0f0 <getRxUartBuffer>
 800d6b8:	0003      	movs	r3, r0
 800d6ba:	001e      	movs	r6, r3
 800d6bc:	2012      	movs	r0, #18
 800d6be:	f000 fd17 	bl	800e0f0 <getRxUartBuffer>
 800d6c2:	0003      	movs	r3, r0
 800d6c4:	0032      	movs	r2, r6
 800d6c6:	0029      	movs	r1, r5
 800d6c8:	0020      	movs	r0, r4
 800d6ca:	f000 f941 	bl	800d950 <Set_Temp_Treshold_Max>
 800d6ce:	e0b4      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetTempON", sizeof("SetTempON")))
 800d6d0:	4b41      	ldr	r3, [pc, #260]	; (800d7d8 <Uart_process+0x384>)
 800d6d2:	210a      	movs	r1, #10
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	f000 f965 	bl	800d9a4 <Compare_Command>
 800d6da:	1e03      	subs	r3, r0, #0
 800d6dc:	d002      	beq.n	800d6e4 <Uart_process+0x290>
		{
			Set_Temp_On();
 800d6de:	f000 f8bd 	bl	800d85c <Set_Temp_On>
 800d6e2:	e0aa      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetTempOFF", sizeof("SetTempOFF")))
 800d6e4:	4b3d      	ldr	r3, [pc, #244]	; (800d7dc <Uart_process+0x388>)
 800d6e6:	210b      	movs	r1, #11
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	f000 f95b 	bl	800d9a4 <Compare_Command>
 800d6ee:	1e03      	subs	r3, r0, #0
 800d6f0:	d002      	beq.n	800d6f8 <Uart_process+0x2a4>
		{
			Set_Temp_Off();
 800d6f2:	f000 f8bd 	bl	800d870 <Set_Temp_Off>
 800d6f6:	e0a0      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetPIRON", sizeof("SetPIRON")))
 800d6f8:	4b39      	ldr	r3, [pc, #228]	; (800d7e0 <Uart_process+0x38c>)
 800d6fa:	2109      	movs	r1, #9
 800d6fc:	0018      	movs	r0, r3
 800d6fe:	f000 f951 	bl	800d9a4 <Compare_Command>
 800d702:	1e03      	subs	r3, r0, #0
 800d704:	d002      	beq.n	800d70c <Uart_process+0x2b8>
		{
			Set_PIR_On();
 800d706:	f000 f8bd 	bl	800d884 <Set_PIR_On>
 800d70a:	e096      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetPIROFF", sizeof("SetPIROFF")))
 800d70c:	4b35      	ldr	r3, [pc, #212]	; (800d7e4 <Uart_process+0x390>)
 800d70e:	210a      	movs	r1, #10
 800d710:	0018      	movs	r0, r3
 800d712:	f000 f947 	bl	800d9a4 <Compare_Command>
 800d716:	1e03      	subs	r3, r0, #0
 800d718:	d002      	beq.n	800d720 <Uart_process+0x2cc>
		{
			Set_PIR_Off();
 800d71a:	f000 f8bd 	bl	800d898 <Set_PIR_Off>
 800d71e:	e08c      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetIRON", sizeof("SetPIRON")))
 800d720:	4b31      	ldr	r3, [pc, #196]	; (800d7e8 <Uart_process+0x394>)
 800d722:	2109      	movs	r1, #9
 800d724:	0018      	movs	r0, r3
 800d726:	f000 f93d 	bl	800d9a4 <Compare_Command>
 800d72a:	1e03      	subs	r3, r0, #0
 800d72c:	d002      	beq.n	800d734 <Uart_process+0x2e0>
		{
			Set_IR_On();
 800d72e:	f000 f8bd 	bl	800d8ac <Set_IR_On>
 800d732:	e082      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetIROFF", sizeof("SetIROFF")))
 800d734:	4b2d      	ldr	r3, [pc, #180]	; (800d7ec <Uart_process+0x398>)
 800d736:	2109      	movs	r1, #9
 800d738:	0018      	movs	r0, r3
 800d73a:	f000 f933 	bl	800d9a4 <Compare_Command>
 800d73e:	1e03      	subs	r3, r0, #0
 800d740:	d002      	beq.n	800d748 <Uart_process+0x2f4>
		{
			Set_IR_Off();
 800d742:	f000 f8bd 	bl	800d8c0 <Set_IR_Off>
 800d746:	e078      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetRS232ON", sizeof("SetRS232ON")))
 800d748:	4b29      	ldr	r3, [pc, #164]	; (800d7f0 <Uart_process+0x39c>)
 800d74a:	210b      	movs	r1, #11
 800d74c:	0018      	movs	r0, r3
 800d74e:	f000 f929 	bl	800d9a4 <Compare_Command>
 800d752:	1e03      	subs	r3, r0, #0
 800d754:	d002      	beq.n	800d75c <Uart_process+0x308>
		{
			Set_RS232_On();
 800d756:	f000 f8bd 	bl	800d8d4 <Set_RS232_On>
 800d75a:	e06e      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("SetRS232OFF", sizeof("SetRS232OFF")))
 800d75c:	4b25      	ldr	r3, [pc, #148]	; (800d7f4 <Uart_process+0x3a0>)
 800d75e:	210c      	movs	r1, #12
 800d760:	0018      	movs	r0, r3
 800d762:	f000 f91f 	bl	800d9a4 <Compare_Command>
 800d766:	1e03      	subs	r3, r0, #0
 800d768:	d002      	beq.n	800d770 <Uart_process+0x31c>
		{
			Set_RS232_Off();
 800d76a:	f000 f8bd 	bl	800d8e8 <Set_RS232_Off>
 800d76e:	e064      	b.n	800d83a <Uart_process+0x3e6>
		}
		else if (Compare_Command("PIRDelayON", sizeof("PIRDelayON")))
 800d770:	4b21      	ldr	r3, [pc, #132]	; (800d7f8 <Uart_process+0x3a4>)
 800d772:	210b      	movs	r1, #11
 800d774:	0018      	movs	r0, r3
 800d776:	f000 f915 	bl	800d9a4 <Compare_Command>
 800d77a:	1e03      	subs	r3, r0, #0
 800d77c:	d03e      	beq.n	800d7fc <Uart_process+0x3a8>
		{
			Set_PIR_Delay_ON(getRxUartBuffer(10), getRxUartBuffer(11), getRxUartBuffer(12), getRxUartBuffer(13));
 800d77e:	200a      	movs	r0, #10
 800d780:	f000 fcb6 	bl	800e0f0 <getRxUartBuffer>
 800d784:	0003      	movs	r3, r0
 800d786:	001c      	movs	r4, r3
 800d788:	200b      	movs	r0, #11
 800d78a:	f000 fcb1 	bl	800e0f0 <getRxUartBuffer>
 800d78e:	0003      	movs	r3, r0
 800d790:	001d      	movs	r5, r3
 800d792:	200c      	movs	r0, #12
 800d794:	f000 fcac 	bl	800e0f0 <getRxUartBuffer>
 800d798:	0003      	movs	r3, r0
 800d79a:	001e      	movs	r6, r3
 800d79c:	200d      	movs	r0, #13
 800d79e:	f000 fca7 	bl	800e0f0 <getRxUartBuffer>
 800d7a2:	0003      	movs	r3, r0
 800d7a4:	0032      	movs	r2, r6
 800d7a6:	0029      	movs	r1, r5
 800d7a8:	0020      	movs	r0, r4
 800d7aa:	f7fe ff5d 	bl	800c668 <Set_PIR_Delay_ON>
 800d7ae:	e044      	b.n	800d83a <Uart_process+0x3e6>
 800d7b0:	20006fcc 	.word	0x20006fcc
 800d7b4:	20006f2c 	.word	0x20006f2c
 800d7b8:	08025630 	.word	0x08025630
 800d7bc:	08025634 	.word	0x08025634
 800d7c0:	08025638 	.word	0x08025638
 800d7c4:	08025640 	.word	0x08025640
 800d7c8:	08025648 	.word	0x08025648
 800d7cc:	08025654 	.word	0x08025654
 800d7d0:	0802565c 	.word	0x0802565c
 800d7d4:	0802566c 	.word	0x0802566c
 800d7d8:	0802567c 	.word	0x0802567c
 800d7dc:	08025688 	.word	0x08025688
 800d7e0:	08025694 	.word	0x08025694
 800d7e4:	080256a0 	.word	0x080256a0
 800d7e8:	080256ac 	.word	0x080256ac
 800d7ec:	080256b4 	.word	0x080256b4
 800d7f0:	080256c0 	.word	0x080256c0
 800d7f4:	080256cc 	.word	0x080256cc
 800d7f8:	080256d8 	.word	0x080256d8
		}
		else if (Compare_Command("PIRDelayOFF", sizeof("PIRDelayOFF")))
 800d7fc:	4b15      	ldr	r3, [pc, #84]	; (800d854 <Uart_process+0x400>)
 800d7fe:	210c      	movs	r1, #12
 800d800:	0018      	movs	r0, r3
 800d802:	f000 f8cf 	bl	800d9a4 <Compare_Command>
 800d806:	1e03      	subs	r3, r0, #0
 800d808:	d017      	beq.n	800d83a <Uart_process+0x3e6>
		{
			Set_PIR_Delay_OFF(getRxUartBuffer(11), getRxUartBuffer(12), getRxUartBuffer(13), getRxUartBuffer(14));
 800d80a:	200b      	movs	r0, #11
 800d80c:	f000 fc70 	bl	800e0f0 <getRxUartBuffer>
 800d810:	0003      	movs	r3, r0
 800d812:	001c      	movs	r4, r3
 800d814:	200c      	movs	r0, #12
 800d816:	f000 fc6b 	bl	800e0f0 <getRxUartBuffer>
 800d81a:	0003      	movs	r3, r0
 800d81c:	001d      	movs	r5, r3
 800d81e:	200d      	movs	r0, #13
 800d820:	f000 fc66 	bl	800e0f0 <getRxUartBuffer>
 800d824:	0003      	movs	r3, r0
 800d826:	001e      	movs	r6, r3
 800d828:	200e      	movs	r0, #14
 800d82a:	f000 fc61 	bl	800e0f0 <getRxUartBuffer>
 800d82e:	0003      	movs	r3, r0
 800d830:	0032      	movs	r2, r6
 800d832:	0029      	movs	r1, r5
 800d834:	0020      	movs	r0, r4
 800d836:	f7fe feeb 	bl	800c610 <Set_PIR_Delay_OFF>
		}

		uart_state_process = IDLE;
 800d83a:	4b07      	ldr	r3, [pc, #28]	; (800d858 <Uart_process+0x404>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	701a      	strb	r2, [r3, #0]

		break;
 800d840:	e004      	b.n	800d84c <Uart_process+0x3f8>
	}
	default:
		uart_state_process = IDLE;
 800d842:	4b05      	ldr	r3, [pc, #20]	; (800d858 <Uart_process+0x404>)
 800d844:	2200      	movs	r2, #0
 800d846:	701a      	strb	r2, [r3, #0]
	}
}
 800d848:	e000      	b.n	800d84c <Uart_process+0x3f8>
		break;
 800d84a:	46c0      	nop			; (mov r8, r8)
}
 800d84c:	46c0      	nop			; (mov r8, r8)
 800d84e:	46bd      	mov	sp, r7
 800d850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d852:	46c0      	nop			; (mov r8, r8)
 800d854:	080256e4 	.word	0x080256e4
 800d858:	20006fcc 	.word	0x20006fcc

0800d85c <Set_Temp_On>:

void Set_Temp_On()
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
	TempAlarm = 1;
 800d860:	4b02      	ldr	r3, [pc, #8]	; (800d86c <Set_Temp_On+0x10>)
 800d862:	2201      	movs	r2, #1
 800d864:	601a      	str	r2, [r3, #0]
}
 800d866:	46c0      	nop			; (mov r8, r8)
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	20006fc8 	.word	0x20006fc8

0800d870 <Set_Temp_Off>:
void Set_Temp_Off()
{
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
	TempAlarm = 0;
 800d874:	4b02      	ldr	r3, [pc, #8]	; (800d880 <Set_Temp_Off+0x10>)
 800d876:	2200      	movs	r2, #0
 800d878:	601a      	str	r2, [r3, #0]
}
 800d87a:	46c0      	nop			; (mov r8, r8)
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20006fc8 	.word	0x20006fc8

0800d884 <Set_PIR_On>:
void Set_PIR_On()
{
 800d884:	b580      	push	{r7, lr}
 800d886:	af00      	add	r7, sp, #0
	PIRAlarm = 1;
 800d888:	4b02      	ldr	r3, [pc, #8]	; (800d894 <Set_PIR_On+0x10>)
 800d88a:	2201      	movs	r2, #1
 800d88c:	601a      	str	r2, [r3, #0]
}
 800d88e:	46c0      	nop			; (mov r8, r8)
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	20005038 	.word	0x20005038

0800d898 <Set_PIR_Off>:
void Set_PIR_Off()
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
	PIRAlarm = 0;
 800d89c:	4b02      	ldr	r3, [pc, #8]	; (800d8a8 <Set_PIR_Off+0x10>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	601a      	str	r2, [r3, #0]
}
 800d8a2:	46c0      	nop			; (mov r8, r8)
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	20005038 	.word	0x20005038

0800d8ac <Set_IR_On>:
void Set_IR_On()
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
	IRAlarm = 1;
 800d8b0:	4b02      	ldr	r3, [pc, #8]	; (800d8bc <Set_IR_On+0x10>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	601a      	str	r2, [r3, #0]
}
 800d8b6:	46c0      	nop			; (mov r8, r8)
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20005040 	.word	0x20005040

0800d8c0 <Set_IR_Off>:
void Set_IR_Off()
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
	IRAlarm = 0;
 800d8c4:	4b02      	ldr	r3, [pc, #8]	; (800d8d0 <Set_IR_Off+0x10>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	601a      	str	r2, [r3, #0]
}
 800d8ca:	46c0      	nop			; (mov r8, r8)
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	20005040 	.word	0x20005040

0800d8d4 <Set_RS232_On>:
void Set_RS232_On()
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	af00      	add	r7, sp, #0
	RS232Alarm = 1;
 800d8d8:	4b02      	ldr	r3, [pc, #8]	; (800d8e4 <Set_RS232_On+0x10>)
 800d8da:	2201      	movs	r2, #1
 800d8dc:	601a      	str	r2, [r3, #0]
}
 800d8de:	46c0      	nop			; (mov r8, r8)
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	2000503c 	.word	0x2000503c

0800d8e8 <Set_RS232_Off>:
void Set_RS232_Off()
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	af00      	add	r7, sp, #0
	RS232Alarm = 0;
 800d8ec:	4b02      	ldr	r3, [pc, #8]	; (800d8f8 <Set_RS232_Off+0x10>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	601a      	str	r2, [r3, #0]
}
 800d8f2:	46c0      	nop			; (mov r8, r8)
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	2000503c 	.word	0x2000503c

0800d8fc <Set_Temp_Treshold_Min>:
void Set_Temp_Treshold_Min(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4)
{
 800d8fc:	b5b0      	push	{r4, r5, r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	0005      	movs	r5, r0
 800d904:	000c      	movs	r4, r1
 800d906:	0010      	movs	r0, r2
 800d908:	0019      	movs	r1, r3
 800d90a:	1dfb      	adds	r3, r7, #7
 800d90c:	1c2a      	adds	r2, r5, #0
 800d90e:	701a      	strb	r2, [r3, #0]
 800d910:	1dbb      	adds	r3, r7, #6
 800d912:	1c22      	adds	r2, r4, #0
 800d914:	701a      	strb	r2, [r3, #0]
 800d916:	1d7b      	adds	r3, r7, #5
 800d918:	1c02      	adds	r2, r0, #0
 800d91a:	701a      	strb	r2, [r3, #0]
 800d91c:	1d3b      	adds	r3, r7, #4
 800d91e:	1c0a      	adds	r2, r1, #0
 800d920:	701a      	strb	r2, [r3, #0]
	Temp_Treshold_Min = (uint32_t)(byte1 << 24) + (uint32_t)(byte2 << 16) + (uint32_t)(byte3 << 8) + byte4;
 800d922:	1dfb      	adds	r3, r7, #7
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	061b      	lsls	r3, r3, #24
 800d928:	001a      	movs	r2, r3
 800d92a:	1dbb      	adds	r3, r7, #6
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	041b      	lsls	r3, r3, #16
 800d930:	18d3      	adds	r3, r2, r3
 800d932:	1d7a      	adds	r2, r7, #5
 800d934:	7812      	ldrb	r2, [r2, #0]
 800d936:	0212      	lsls	r2, r2, #8
 800d938:	189a      	adds	r2, r3, r2
 800d93a:	1d3b      	adds	r3, r7, #4
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	18d2      	adds	r2, r2, r3
 800d940:	4b02      	ldr	r3, [pc, #8]	; (800d94c <Set_Temp_Treshold_Min+0x50>)
 800d942:	601a      	str	r2, [r3, #0]
	;
}
 800d944:	46c0      	nop			; (mov r8, r8)
 800d946:	46bd      	mov	sp, r7
 800d948:	b002      	add	sp, #8
 800d94a:	bdb0      	pop	{r4, r5, r7, pc}
 800d94c:	20005030 	.word	0x20005030

0800d950 <Set_Temp_Treshold_Max>:
void Set_Temp_Treshold_Max(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4)
{
 800d950:	b5b0      	push	{r4, r5, r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	0005      	movs	r5, r0
 800d958:	000c      	movs	r4, r1
 800d95a:	0010      	movs	r0, r2
 800d95c:	0019      	movs	r1, r3
 800d95e:	1dfb      	adds	r3, r7, #7
 800d960:	1c2a      	adds	r2, r5, #0
 800d962:	701a      	strb	r2, [r3, #0]
 800d964:	1dbb      	adds	r3, r7, #6
 800d966:	1c22      	adds	r2, r4, #0
 800d968:	701a      	strb	r2, [r3, #0]
 800d96a:	1d7b      	adds	r3, r7, #5
 800d96c:	1c02      	adds	r2, r0, #0
 800d96e:	701a      	strb	r2, [r3, #0]
 800d970:	1d3b      	adds	r3, r7, #4
 800d972:	1c0a      	adds	r2, r1, #0
 800d974:	701a      	strb	r2, [r3, #0]
	Temp_Treshold_Max = (uint32_t)(byte1 << 24) + (uint32_t)(byte2 << 16) + (uint32_t)(byte3 << 8) + byte4;
 800d976:	1dfb      	adds	r3, r7, #7
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	061b      	lsls	r3, r3, #24
 800d97c:	001a      	movs	r2, r3
 800d97e:	1dbb      	adds	r3, r7, #6
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	041b      	lsls	r3, r3, #16
 800d984:	18d3      	adds	r3, r2, r3
 800d986:	1d7a      	adds	r2, r7, #5
 800d988:	7812      	ldrb	r2, [r2, #0]
 800d98a:	0212      	lsls	r2, r2, #8
 800d98c:	189a      	adds	r2, r3, r2
 800d98e:	1d3b      	adds	r3, r7, #4
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	18d2      	adds	r2, r2, r3
 800d994:	4b02      	ldr	r3, [pc, #8]	; (800d9a0 <Set_Temp_Treshold_Max+0x50>)
 800d996:	601a      	str	r2, [r3, #0]
	;
}
 800d998:	46c0      	nop			; (mov r8, r8)
 800d99a:	46bd      	mov	sp, r7
 800d99c:	b002      	add	sp, #8
 800d99e:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a0:	20005034 	.word	0x20005034

0800d9a4 <Compare_Command>:

int Compare_Command(char *command, int size)
{
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b08b      	sub	sp, #44	; 0x2c
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
	char command_string[25];
	strcpy(command_string, rx_Buffer);
 800d9ae:	4a0c      	ldr	r2, [pc, #48]	; (800d9e0 <Compare_Command+0x3c>)
 800d9b0:	240c      	movs	r4, #12
 800d9b2:	193b      	adds	r3, r7, r4
 800d9b4:	0011      	movs	r1, r2
 800d9b6:	0018      	movs	r0, r3
 800d9b8:	f015 ffce 	bl	8023958 <strcpy>
	if (strncmp(command_string, command, size - 1))
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	001a      	movs	r2, r3
 800d9c2:	6879      	ldr	r1, [r7, #4]
 800d9c4:	193b      	adds	r3, r7, r4
 800d9c6:	0018      	movs	r0, r3
 800d9c8:	f015 f909 	bl	8022bde <strncmp>
 800d9cc:	1e03      	subs	r3, r0, #0
 800d9ce:	d001      	beq.n	800d9d4 <Compare_Command+0x30>
	{
		return 0; // reply through uart
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e000      	b.n	800d9d6 <Compare_Command+0x32>
	}
	else
	{
		return 1;
 800d9d4:	2301      	movs	r3, #1
	}
}
 800d9d6:	0018      	movs	r0, r3
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	b00b      	add	sp, #44	; 0x2c
 800d9dc:	bd90      	pop	{r4, r7, pc}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	20006f2c 	.word	0x20006f2c

0800d9e4 <Send_RS232_Command_Debug>:
//		data[5] = '\r';
//
//	HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), 1000); //Send dataFrame through UART
// }
void Send_RS232_Command_Debug()
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b090      	sub	sp, #64	; 0x40
 800d9e8:	af00      	add	r7, sp, #0
	char data5[NB_CHARS_RS232]; // size of the number
	// strcpy(data5, RS232_command_ON);
	memcpy(data5, RS232_command_ON, sizeof(data5));
 800d9ea:	003a      	movs	r2, r7
 800d9ec:	4b08      	ldr	r3, [pc, #32]	; (800da10 <Send_RS232_Command_Debug+0x2c>)
 800d9ee:	0010      	movs	r0, r2
 800d9f0:	0019      	movs	r1, r3
 800d9f2:	2340      	movs	r3, #64	; 0x40
 800d9f4:	001a      	movs	r2, r3
 800d9f6:	f015 ffb7 	bl	8023968 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t *)data5, sizeof(data5), 1000); // Send dataFrame through UART
 800d9fa:	23fa      	movs	r3, #250	; 0xfa
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	0039      	movs	r1, r7
 800da00:	4804      	ldr	r0, [pc, #16]	; (800da14 <Send_RS232_Command_Debug+0x30>)
 800da02:	2240      	movs	r2, #64	; 0x40
 800da04:	f007 fc9e 	bl	8015344 <HAL_UART_Transmit>
}
 800da08:	46c0      	nop			; (mov r8, r8)
 800da0a:	46bd      	mov	sp, r7
 800da0c:	b010      	add	sp, #64	; 0x40
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	20006f88 	.word	0x20006f88
 800da14:	20006a90 	.word	0x20006a90

0800da18 <Send_RS232_Command_ON>:
void Send_RS232_Command_ON()
{
 800da18:	b590      	push	{r4, r7, lr}
 800da1a:	b08b      	sub	sp, #44	; 0x2c
 800da1c:	af00      	add	r7, sp, #0
//	char data[6]; // size of the number
	char data2[30];

	memcpy(&RS232_command_ON, &pcb_config.sSetR2S9C, NB_CHARS_RS232);
 800da1e:	4920      	ldr	r1, [pc, #128]	; (800daa0 <Send_RS232_Command_ON+0x88>)
 800da20:	4b20      	ldr	r3, [pc, #128]	; (800daa4 <Send_RS232_Command_ON+0x8c>)
 800da22:	2222      	movs	r2, #34	; 0x22
 800da24:	0008      	movs	r0, r1
 800da26:	189b      	adds	r3, r3, r2
 800da28:	2240      	movs	r2, #64	; 0x40
 800da2a:	0019      	movs	r1, r3
 800da2c:	f015 ff9c 	bl	8023968 <memcpy>
	to_hex(RS232_command_ON, 0);
 800da30:	4b1b      	ldr	r3, [pc, #108]	; (800daa0 <Send_RS232_Command_ON+0x88>)
 800da32:	2100      	movs	r1, #0
 800da34:	0018      	movs	r0, r3
 800da36:	f00b f8b7 	bl	8018ba8 <to_hex>
	for (int i = 0; i < NB_CHARS_RS232 / 2; i++)
 800da3a:	2300      	movs	r3, #0
 800da3c:	627b      	str	r3, [r7, #36]	; 0x24
 800da3e:	e00c      	b.n	800da5a <Send_RS232_Command_ON+0x42>
		RS232_command_ON[i] = RS232_command_ON[2 * i + 1];
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	3301      	adds	r3, #1
 800da46:	4a16      	ldr	r2, [pc, #88]	; (800daa0 <Send_RS232_Command_ON+0x88>)
 800da48:	5cd1      	ldrb	r1, [r2, r3]
 800da4a:	4a15      	ldr	r2, [pc, #84]	; (800daa0 <Send_RS232_Command_ON+0x88>)
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	18d3      	adds	r3, r2, r3
 800da50:	1c0a      	adds	r2, r1, #0
 800da52:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_CHARS_RS232 / 2; i++)
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	3301      	adds	r3, #1
 800da58:	627b      	str	r3, [r7, #36]	; 0x24
 800da5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5c:	2b1f      	cmp	r3, #31
 800da5e:	ddef      	ble.n	800da40 <Send_RS232_Command_ON+0x28>

	HAL_UART_Transmit(&huart2, (uint8_t *)RS232_command_ON, pcb_config.rs232nbcharsON[0], 1000); // Send dataFrame through UART
 800da60:	4b10      	ldr	r3, [pc, #64]	; (800daa4 <Send_RS232_Command_ON+0x8c>)
 800da62:	22f4      	movs	r2, #244	; 0xf4
 800da64:	5c9b      	ldrb	r3, [r3, r2]
 800da66:	b29a      	uxth	r2, r3
 800da68:	23fa      	movs	r3, #250	; 0xfa
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	490c      	ldr	r1, [pc, #48]	; (800daa0 <Send_RS232_Command_ON+0x88>)
 800da6e:	480e      	ldr	r0, [pc, #56]	; (800daa8 <Send_RS232_Command_ON+0x90>)
 800da70:	f007 fc68 	bl	8015344 <HAL_UART_Transmit>

	strcpy(data2, "Rs232 command ON sent\n\r");
 800da74:	1d3b      	adds	r3, r7, #4
 800da76:	4a0d      	ldr	r2, [pc, #52]	; (800daac <Send_RS232_Command_ON+0x94>)
 800da78:	ca13      	ldmia	r2!, {r0, r1, r4}
 800da7a:	c313      	stmia	r3!, {r0, r1, r4}
 800da7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800da7e:	c313      	stmia	r3!, {r0, r1, r4}
	HAL_UART_Transmit(&huart1, (uint8_t *)data2, sizeof("Rs232 command ON sent\n\r"), 1000); // Send dataFrame through UART
 800da80:	23fa      	movs	r3, #250	; 0xfa
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	1d39      	adds	r1, r7, #4
 800da86:	480a      	ldr	r0, [pc, #40]	; (800dab0 <Send_RS232_Command_ON+0x98>)
 800da88:	2218      	movs	r2, #24
 800da8a:	f007 fc5b 	bl	8015344 <HAL_UART_Transmit>

	LogToBufferLog(data2, sizeof("Rs232 command ON sent\n\r"));
 800da8e:	1d3b      	adds	r3, r7, #4
 800da90:	2118      	movs	r1, #24
 800da92:	0018      	movs	r0, r3
 800da94:	f00a f8be 	bl	8017c14 <LogToBufferLog>
	// HAL_UART_Transmit(&huart1, (uint8_t *)RS232_command_ON, pcb_config.rs232nbcharsON[0], 1000); //Send dataFrame through UART
	// strcpy(data2, "\r");
	// HAL_UART_Transmit(&huart1, (uint8_t *)data2, 1, 1000); //Send dataFrame through UART
}
 800da98:	46c0      	nop			; (mov r8, r8)
 800da9a:	46bd      	mov	sp, r7
 800da9c:	b00b      	add	sp, #44	; 0x2c
 800da9e:	bd90      	pop	{r4, r7, pc}
 800daa0:	20006f88 	.word	0x20006f88
 800daa4:	20006db4 	.word	0x20006db4
 800daa8:	20006b24 	.word	0x20006b24
 800daac:	080256f0 	.word	0x080256f0
 800dab0:	20006a90 	.word	0x20006a90

0800dab4 <Send_BTN_ON>:
void Send_BTN_ON(int btn1, int btn2)
{
 800dab4:	b590      	push	{r4, r7, lr}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
//	char data[6]; // size of the number
//	char data2[30];
	Send_String("Function Pressed: ", sizeof("Function Pressed: "));
 800dabe:	4b13      	ldr	r3, [pc, #76]	; (800db0c <Send_BTN_ON+0x58>)
 800dac0:	2113      	movs	r1, #19
 800dac2:	0018      	movs	r0, r3
 800dac4:	f000 f8f2 	bl	800dcac <Send_String>
	char btnx = (char)(btn1) + '0';
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	3330      	adds	r3, #48	; 0x30
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	210f      	movs	r1, #15
 800dad2:	187b      	adds	r3, r7, r1
 800dad4:	701a      	strb	r2, [r3, #0]
	char btny = (char)(btn2) + '0';
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	3330      	adds	r3, #48	; 0x30
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	240e      	movs	r4, #14
 800dae0:	193b      	adds	r3, r7, r4
 800dae2:	701a      	strb	r2, [r3, #0]
	Send_String(&btnx, 2);
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	2102      	movs	r1, #2
 800dae8:	0018      	movs	r0, r3
 800daea:	f000 f8df 	bl	800dcac <Send_String>
	Send_String(&btny, 2);
 800daee:	193b      	adds	r3, r7, r4
 800daf0:	2102      	movs	r1, #2
 800daf2:	0018      	movs	r0, r3
 800daf4:	f000 f8da 	bl	800dcac <Send_String>
	Send_String("\n\r", sizeof("\n\r"));
 800daf8:	4b05      	ldr	r3, [pc, #20]	; (800db10 <Send_BTN_ON+0x5c>)
 800dafa:	2103      	movs	r1, #3
 800dafc:	0018      	movs	r0, r3
 800dafe:	f000 f8d5 	bl	800dcac <Send_String>

	// HAL_UART_Transmit(&huart1, (uint8_t *)data2, sizeof("BTN 1 pressed\n\r"), 1000); //Send dataFrame through UART
	// HAL_UART_Transmit(&huart1, (uint8_t *)RS232_command_ON, pcb_config.rs232nbcharsON[0], 1000); //Send dataFrame through UART
	// strcpy(data2, "\r");
	// HAL_UART_Transmit(&huart1, (uint8_t *)data2, 1, 1000); //Send dataFrame through UART
}
 800db02:	46c0      	nop			; (mov r8, r8)
 800db04:	46bd      	mov	sp, r7
 800db06:	b005      	add	sp, #20
 800db08:	bd90      	pop	{r4, r7, pc}
 800db0a:	46c0      	nop			; (mov r8, r8)
 800db0c:	08025708 	.word	0x08025708
 800db10:	0802571c 	.word	0x0802571c

0800db14 <Send_RS232_Command_OFF>:
void Send_RS232_Command_OFF()
{
 800db14:	b590      	push	{r4, r7, lr}
 800db16:	b08b      	sub	sp, #44	; 0x2c
 800db18:	af00      	add	r7, sp, #0
	char data2[30];

	memcpy(&RS232_command_OFF, &pcb_config.sSetR2S9COFF, NB_CHARS_RS232);
 800db1a:	4924      	ldr	r1, [pc, #144]	; (800dbac <Send_RS232_Command_OFF+0x98>)
 800db1c:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <Send_RS232_Command_OFF+0x9c>)
 800db1e:	2262      	movs	r2, #98	; 0x62
 800db20:	0008      	movs	r0, r1
 800db22:	189b      	adds	r3, r3, r2
 800db24:	2240      	movs	r2, #64	; 0x40
 800db26:	0019      	movs	r1, r3
 800db28:	f015 ff1e 	bl	8023968 <memcpy>
	to_hex(RS232_command_OFF, 0);
 800db2c:	4b1f      	ldr	r3, [pc, #124]	; (800dbac <Send_RS232_Command_OFF+0x98>)
 800db2e:	2100      	movs	r1, #0
 800db30:	0018      	movs	r0, r3
 800db32:	f00b f839 	bl	8018ba8 <to_hex>
	for (int i = 0; i < NB_CHARS_RS232 / 2; i++)
 800db36:	2300      	movs	r3, #0
 800db38:	627b      	str	r3, [r7, #36]	; 0x24
 800db3a:	e00c      	b.n	800db56 <Send_RS232_Command_OFF+0x42>
		RS232_command_OFF[i] = RS232_command_OFF[2 * i + 1];
 800db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3e:	005b      	lsls	r3, r3, #1
 800db40:	3301      	adds	r3, #1
 800db42:	4a1a      	ldr	r2, [pc, #104]	; (800dbac <Send_RS232_Command_OFF+0x98>)
 800db44:	5cd1      	ldrb	r1, [r2, r3]
 800db46:	4a19      	ldr	r2, [pc, #100]	; (800dbac <Send_RS232_Command_OFF+0x98>)
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	18d3      	adds	r3, r2, r3
 800db4c:	1c0a      	adds	r2, r1, #0
 800db4e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_CHARS_RS232 / 2; i++)
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	3301      	adds	r3, #1
 800db54:	627b      	str	r3, [r7, #36]	; 0x24
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	2b1f      	cmp	r3, #31
 800db5a:	ddef      	ble.n	800db3c <Send_RS232_Command_OFF+0x28>

	HAL_UART_Transmit(&huart2, (uint8_t *)RS232_command_OFF, pcb_config.rs232nbcharsOFF[0], 1000); // Send dataFrame through UART
 800db5c:	4b14      	ldr	r3, [pc, #80]	; (800dbb0 <Send_RS232_Command_OFF+0x9c>)
 800db5e:	22f6      	movs	r2, #246	; 0xf6
 800db60:	5c9b      	ldrb	r3, [r3, r2]
 800db62:	b29a      	uxth	r2, r3
 800db64:	23fa      	movs	r3, #250	; 0xfa
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	4910      	ldr	r1, [pc, #64]	; (800dbac <Send_RS232_Command_OFF+0x98>)
 800db6a:	4812      	ldr	r0, [pc, #72]	; (800dbb4 <Send_RS232_Command_OFF+0xa0>)
 800db6c:	f007 fbea 	bl	8015344 <HAL_UART_Transmit>
	memset(data2, 0, sizeof(data2));
 800db70:	1d3b      	adds	r3, r7, #4
 800db72:	221e      	movs	r2, #30
 800db74:	2100      	movs	r1, #0
 800db76:	0018      	movs	r0, r3
 800db78:	f015 f80e 	bl	8022b98 <memset>
	strcpy(data2, "Rs232 command OFF sent\n\r");
 800db7c:	1d3b      	adds	r3, r7, #4
 800db7e:	4a0e      	ldr	r2, [pc, #56]	; (800dbb8 <Send_RS232_Command_OFF+0xa4>)
 800db80:	ca13      	ldmia	r2!, {r0, r1, r4}
 800db82:	c313      	stmia	r3!, {r0, r1, r4}
 800db84:	ca13      	ldmia	r2!, {r0, r1, r4}
 800db86:	c313      	stmia	r3!, {r0, r1, r4}
 800db88:	7812      	ldrb	r2, [r2, #0]
 800db8a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)data2, sizeof("Rs232 command OFF sent\n\r"), 1000); // Send dataFrame through UART
 800db8c:	23fa      	movs	r3, #250	; 0xfa
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	1d39      	adds	r1, r7, #4
 800db92:	480a      	ldr	r0, [pc, #40]	; (800dbbc <Send_RS232_Command_OFF+0xa8>)
 800db94:	2219      	movs	r2, #25
 800db96:	f007 fbd5 	bl	8015344 <HAL_UART_Transmit>

	LogToBufferLog(data2, sizeof("Rs232 command OFF sent\n\r"));
 800db9a:	1d3b      	adds	r3, r7, #4
 800db9c:	2119      	movs	r1, #25
 800db9e:	0018      	movs	r0, r3
 800dba0:	f00a f838 	bl	8017c14 <LogToBufferLog>
	// HAL_UART_Transmit(&huart1, (uint8_t *)RS232_command_OFF, pcb_config.rs232nbcharsOFF[0], 1000); //Send dataFrame through UART
	// strcpy(data2, "\r");
	// HAL_UART_Transmit(&huart1, (uint8_t *)data2, sizeof(data2), 1000); //Send dataFrame through UART
}
 800dba4:	46c0      	nop			; (mov r8, r8)
 800dba6:	46bd      	mov	sp, r7
 800dba8:	b00b      	add	sp, #44	; 0x2c
 800dbaa:	bd90      	pop	{r4, r7, pc}
 800dbac:	20006f48 	.word	0x20006f48
 800dbb0:	20006db4 	.word	0x20006db4
 800dbb4:	20006b24 	.word	0x20006b24
 800dbb8:	08025720 	.word	0x08025720
 800dbbc:	20006a90 	.word	0x20006a90

0800dbc0 <Send_IR_Command_Debug>:
void Send_IR_Command_Debug()
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0
	//		data[4] = '\n';
	//		data[5] = '\r';

	// HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), 1000); //Send dataFrame through UART
	//IRSend_NEC(true);
}
 800dbc4:	46c0      	nop			; (mov r8, r8)
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
	...

0800dbcc <Set_IR_Command>:

	// HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), 1000); //Send dataFrame through UART
	//IRSend_off_Var_NEC();
}
void Set_IR_Command(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4)
{
 800dbcc:	b5b0      	push	{r4, r5, r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	0005      	movs	r5, r0
 800dbd4:	000c      	movs	r4, r1
 800dbd6:	0010      	movs	r0, r2
 800dbd8:	0019      	movs	r1, r3
 800dbda:	1dfb      	adds	r3, r7, #7
 800dbdc:	1c2a      	adds	r2, r5, #0
 800dbde:	701a      	strb	r2, [r3, #0]
 800dbe0:	1dbb      	adds	r3, r7, #6
 800dbe2:	1c22      	adds	r2, r4, #0
 800dbe4:	701a      	strb	r2, [r3, #0]
 800dbe6:	1d7b      	adds	r3, r7, #5
 800dbe8:	1c02      	adds	r2, r0, #0
 800dbea:	701a      	strb	r2, [r3, #0]
 800dbec:	1d3b      	adds	r3, r7, #4
 800dbee:	1c0a      	adds	r2, r1, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
	IR_command = (uint32_t)(byte1 << 24) + (uint32_t)(byte2 << 16) + (uint32_t)(byte3 << 8) + byte4;
 800dbf2:	1dfb      	adds	r3, r7, #7
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	061b      	lsls	r3, r3, #24
 800dbf8:	001a      	movs	r2, r3
 800dbfa:	1dbb      	adds	r3, r7, #6
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	041b      	lsls	r3, r3, #16
 800dc00:	18d3      	adds	r3, r2, r3
 800dc02:	1d7a      	adds	r2, r7, #5
 800dc04:	7812      	ldrb	r2, [r2, #0]
 800dc06:	0212      	lsls	r2, r2, #8
 800dc08:	189a      	adds	r2, r3, r2
 800dc0a:	1d3b      	adds	r3, r7, #4
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	18d2      	adds	r2, r2, r3
 800dc10:	4b02      	ldr	r3, [pc, #8]	; (800dc1c <Set_IR_Command+0x50>)
 800dc12:	601a      	str	r2, [r3, #0]
}
 800dc14:	46c0      	nop			; (mov r8, r8)
 800dc16:	46bd      	mov	sp, r7
 800dc18:	b002      	add	sp, #8
 800dc1a:	bdb0      	pop	{r4, r5, r7, pc}
 800dc1c:	2000502c 	.word	0x2000502c

0800dc20 <Set_RS232_Command>:
//{
//	RS232_command = (uint32_t)(byte1 << 24) + (uint32_t)(byte2 << 16) + (uint32_t)(byte3 << 8) + byte4;
// }

void Set_RS232_Command()
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_CHARS_RS232; i++)
 800dc26:	2300      	movs	r3, #0
 800dc28:	607b      	str	r3, [r7, #4]
 800dc2a:	e010      	b.n	800dc4e <Set_RS232_Command+0x2e>
		RS232_command_ON[i] = getRxUartBuffer(i + sizeof("SetR2S9C"));
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	3309      	adds	r3, #9
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	0018      	movs	r0, r3
 800dc36:	f000 fa5b 	bl	800e0f0 <getRxUartBuffer>
 800dc3a:	0003      	movs	r3, r0
 800dc3c:	0019      	movs	r1, r3
 800dc3e:	4a08      	ldr	r2, [pc, #32]	; (800dc60 <Set_RS232_Command+0x40>)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	18d3      	adds	r3, r2, r3
 800dc44:	1c0a      	adds	r2, r1, #0
 800dc46:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_CHARS_RS232; i++)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	607b      	str	r3, [r7, #4]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2b3f      	cmp	r3, #63	; 0x3f
 800dc52:	ddeb      	ble.n	800dc2c <Set_RS232_Command+0xc>
}
 800dc54:	46c0      	nop			; (mov r8, r8)
 800dc56:	46c0      	nop			; (mov r8, r8)
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	b002      	add	sp, #8
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	20006f88 	.word	0x20006f88

0800dc64 <Send_Version_Data>:
void Send_Version_Data(void)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
	char data[7];

	strcpy(data, FIRMWARE_VERSION);
 800dc6a:	003b      	movs	r3, r7
 800dc6c:	4a0c      	ldr	r2, [pc, #48]	; (800dca0 <Send_Version_Data+0x3c>)
 800dc6e:	6811      	ldr	r1, [r2, #0]
 800dc70:	6019      	str	r1, [r3, #0]
 800dc72:	8891      	ldrh	r1, [r2, #4]
 800dc74:	8099      	strh	r1, [r3, #4]
 800dc76:	7992      	ldrb	r2, [r2, #6]
 800dc78:	719a      	strb	r2, [r3, #6]

	// charCount = strlen(data) + 3 ; //calcul the number of characters to send and add the 2 characters for the command + 1 character for the \r(0xOD)
	// sprintf(dataFrame, "test", charCount, GET_DATA, data); //assemble the frame to send with dataframe (7E + char count + command + data + \r(0xOD)
	HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data) - 1, 1000); // Send dataFrame through UART
 800dc7a:	23fa      	movs	r3, #250	; 0xfa
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	0039      	movs	r1, r7
 800dc80:	4808      	ldr	r0, [pc, #32]	; (800dca4 <Send_Version_Data+0x40>)
 800dc82:	2206      	movs	r2, #6
 800dc84:	f007 fb5e 	bl	8015344 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sizeof(data) - 1, 1000); // Send dataFrame through UART
 800dc88:	23fa      	movs	r3, #250	; 0xfa
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	0039      	movs	r1, r7
 800dc8e:	4806      	ldr	r0, [pc, #24]	; (800dca8 <Send_Version_Data+0x44>)
 800dc90:	2206      	movs	r2, #6
 800dc92:	f007 fb57 	bl	8015344 <HAL_UART_Transmit>
}
 800dc96:	46c0      	nop			; (mov r8, r8)
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	b002      	add	sp, #8
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	46c0      	nop			; (mov r8, r8)
 800dca0:	0802573c 	.word	0x0802573c
 800dca4:	20006a90 	.word	0x20006a90
 800dca8:	20006b24 	.word	0x20006b24

0800dcac <Send_String>:
void Send_String(char *string1, int size)
{
 800dcac:	b590      	push	{r4, r7, lr}
 800dcae:	b08b      	sub	sp, #44	; 0x2c
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
	char data[30];

	strcpy(data, string1);
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	2408      	movs	r4, #8
 800dcba:	193b      	adds	r3, r7, r4
 800dcbc:	0011      	movs	r1, r2
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f015 fe4a 	bl	8023958 <strcpy>

	// charCount = strlen(data) + 3 ; //calcul the number of characters to send and add the 2 characters for the command + 1 character for the \r(0xOD)
	// sprintf(dataFrame, "test", charCount, GET_DATA, data); //assemble the frame to send with dataframe (7E + char count + command + data + \r(0xOD)
	HAL_UART_Transmit(&huart1, (uint8_t *)data, size - 1, 1000); // Send dataFrame through UART
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	23fa      	movs	r3, #250	; 0xfa
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	1939      	adds	r1, r7, r4
 800dcd2:	4807      	ldr	r0, [pc, #28]	; (800dcf0 <Send_String+0x44>)
 800dcd4:	f007 fb36 	bl	8015344 <HAL_UART_Transmit>
	// HAL_UART_Transmit(&huart2, (uint8_t *)data, size, 1000); //Send dataFrame through UART

	LogToBufferLog(data, size - 1);
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	1e5a      	subs	r2, r3, #1
 800dcdc:	193b      	adds	r3, r7, r4
 800dcde:	0011      	movs	r1, r2
 800dce0:	0018      	movs	r0, r3
 800dce2:	f009 ff97 	bl	8017c14 <LogToBufferLog>
}
 800dce6:	46c0      	nop			; (mov r8, r8)
 800dce8:	46bd      	mov	sp, r7
 800dcea:	b00b      	add	sp, #44	; 0x2c
 800dcec:	bd90      	pop	{r4, r7, pc}
 800dcee:	46c0      	nop			; (mov r8, r8)
 800dcf0:	20006a90 	.word	0x20006a90

0800dcf4 <Send_Command_Data>:
void Send_Command_Data(uint32_t* command, int k, int on)
{
 800dcf4:	b590      	push	{r4, r7, lr}
 800dcf6:	b08b      	sub	sp, #44	; 0x2c
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
	uint8_t data[9 + MAX_NUMBER * 4];
	data[0] = 'I';
 800dd00:	2114      	movs	r1, #20
 800dd02:	187b      	adds	r3, r7, r1
 800dd04:	2249      	movs	r2, #73	; 0x49
 800dd06:	701a      	strb	r2, [r3, #0]
	data[1] = 'R';
 800dd08:	187b      	adds	r3, r7, r1
 800dd0a:	2252      	movs	r2, #82	; 0x52
 800dd0c:	705a      	strb	r2, [r3, #1]
	data[2] = 'C';
 800dd0e:	187b      	adds	r3, r7, r1
 800dd10:	2243      	movs	r2, #67	; 0x43
 800dd12:	709a      	strb	r2, [r3, #2]
	data[3] = 'o';
 800dd14:	187b      	adds	r3, r7, r1
 800dd16:	226f      	movs	r2, #111	; 0x6f
 800dd18:	70da      	strb	r2, [r3, #3]
	if (on)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d006      	beq.n	800dd2e <Send_Command_Data+0x3a>
	{
		data[4] = 'O';
 800dd20:	187b      	adds	r3, r7, r1
 800dd22:	224f      	movs	r2, #79	; 0x4f
 800dd24:	711a      	strb	r2, [r3, #4]
		data[5] = 'N';
 800dd26:	187b      	adds	r3, r7, r1
 800dd28:	224e      	movs	r2, #78	; 0x4e
 800dd2a:	715a      	strb	r2, [r3, #5]
 800dd2c:	e006      	b.n	800dd3c <Send_Command_Data+0x48>
	}
	else
	{
		data[4] = 'O';
 800dd2e:	2114      	movs	r1, #20
 800dd30:	187b      	adds	r3, r7, r1
 800dd32:	224f      	movs	r2, #79	; 0x4f
 800dd34:	711a      	strb	r2, [r3, #4]
		data[5] = 'F';
 800dd36:	187b      	adds	r3, r7, r1
 800dd38:	2246      	movs	r2, #70	; 0x46
 800dd3a:	715a      	strb	r2, [r3, #5]
	}
	data[6] = ':';
 800dd3c:	2314      	movs	r3, #20
 800dd3e:	18fb      	adds	r3, r7, r3
 800dd40:	223a      	movs	r2, #58	; 0x3a
 800dd42:	719a      	strb	r2, [r3, #6]

	for (int i = 0; i < k; i++)
 800dd44:	2300      	movs	r3, #0
 800dd46:	627b      	str	r3, [r7, #36]	; 0x24
 800dd48:	e032      	b.n	800ddb0 <Send_Command_Data+0xbc>
	{
		data[7 + 4 * i] = (uint8_t)((command[i] >> 24) & 0xFF);
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	18d3      	adds	r3, r2, r3
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	0e1a      	lsrs	r2, r3, #24
 800dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	3307      	adds	r3, #7
 800dd5c:	b2d1      	uxtb	r1, r2
 800dd5e:	2014      	movs	r0, #20
 800dd60:	183a      	adds	r2, r7, r0
 800dd62:	54d1      	strb	r1, [r2, r3]
		data[8 + 4 * i] = (uint8_t)((command[i] >> 16) & 0xFF);
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	18d3      	adds	r3, r2, r3
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	0c1a      	lsrs	r2, r3, #16
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	3302      	adds	r3, #2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	b2d1      	uxtb	r1, r2
 800dd78:	183a      	adds	r2, r7, r0
 800dd7a:	54d1      	strb	r1, [r2, r3]
		data[9 + 4 * i] = (uint8_t)((command[i] >> 8) & 0xFF);
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	18d3      	adds	r3, r2, r3
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	0a1a      	lsrs	r2, r3, #8
 800dd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	3309      	adds	r3, #9
 800dd8e:	b2d1      	uxtb	r1, r2
 800dd90:	183a      	adds	r2, r7, r0
 800dd92:	54d1      	strb	r1, [r2, r3]
		data[10 + 4 * i] = (uint8_t)(command[i] & 0xFF);
 800dd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	18d3      	adds	r3, r2, r3
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	330a      	adds	r3, #10
 800dda4:	b2d1      	uxtb	r1, r2
 800dda6:	183a      	adds	r2, r7, r0
 800dda8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < k; i++)
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	3301      	adds	r3, #1
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
 800ddb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	dbc8      	blt.n	800dd4a <Send_Command_Data+0x56>
	}

	data[9 + (k) * 4 - 2] = '\n';
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	3307      	adds	r3, #7
 800ddbe:	2014      	movs	r0, #20
 800ddc0:	183a      	adds	r2, r7, r0
 800ddc2:	210a      	movs	r1, #10
 800ddc4:	54d1      	strb	r1, [r2, r3]
	data[9 + (k) * 4 - 1] = '\r';
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	3302      	adds	r3, #2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	183a      	adds	r2, r7, r0
 800ddce:	210d      	movs	r1, #13
 800ddd0:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(&huart1, (uint8_t *)data, 9 + (k) * 4, 2000); // Send dataFrame through UART
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	3309      	adds	r3, #9
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	23fa      	movs	r3, #250	; 0xfa
 800dde0:	00db      	lsls	r3, r3, #3
 800dde2:	0004      	movs	r4, r0
 800dde4:	1839      	adds	r1, r7, r0
 800dde6:	4819      	ldr	r0, [pc, #100]	; (800de4c <Send_Command_Data+0x158>)
 800dde8:	f007 faac 	bl	8015344 <HAL_UART_Transmit>
	LogToBufferLog((char*)&data, 9 + (k) * 4);
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	3309      	adds	r3, #9
 800ddf2:	001a      	movs	r2, r3
 800ddf4:	193b      	adds	r3, r7, r4
 800ddf6:	0011      	movs	r1, r2
 800ddf8:	0018      	movs	r0, r3
 800ddfa:	f009 ff0b 	bl	8017c14 <LogToBufferLog>
	data[0] = 'M';
 800ddfe:	0021      	movs	r1, r4
 800de00:	187b      	adds	r3, r7, r1
 800de02:	224d      	movs	r2, #77	; 0x4d
 800de04:	701a      	strb	r2, [r3, #0]
	data[1] = 'A';
 800de06:	187b      	adds	r3, r7, r1
 800de08:	2241      	movs	r2, #65	; 0x41
 800de0a:	705a      	strb	r2, [r3, #1]
	data[2] = 'X';
 800de0c:	187b      	adds	r3, r7, r1
 800de0e:	2258      	movs	r2, #88	; 0x58
 800de10:	709a      	strb	r2, [r3, #2]
	data[3] = 'N';
 800de12:	187b      	adds	r3, r7, r1
 800de14:	224e      	movs	r2, #78	; 0x4e
 800de16:	70da      	strb	r2, [r3, #3]
	data[4] = 'B';
 800de18:	187b      	adds	r3, r7, r1
 800de1a:	2242      	movs	r2, #66	; 0x42
 800de1c:	711a      	strb	r2, [r3, #4]
	data[5] = 'R';
 800de1e:	187b      	adds	r3, r7, r1
 800de20:	2252      	movs	r2, #82	; 0x52
 800de22:	715a      	strb	r2, [r3, #5]
	data[6] = ':';
 800de24:	187b      	adds	r3, r7, r1
 800de26:	223a      	movs	r2, #58	; 0x3a
 800de28:	719a      	strb	r2, [r3, #6]
	data[7] = k + 1 + 48;
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	3331      	adds	r3, #49	; 0x31
 800de30:	b2da      	uxtb	r2, r3
 800de32:	187b      	adds	r3, r7, r1
 800de34:	71da      	strb	r2, [r3, #7]
	data[8] = '\n';
 800de36:	187b      	adds	r3, r7, r1
 800de38:	220a      	movs	r2, #10
 800de3a:	721a      	strb	r2, [r3, #8]
	data[9] = '\r';
 800de3c:	187b      	adds	r3, r7, r1
 800de3e:	220d      	movs	r2, #13
 800de40:	725a      	strb	r2, [r3, #9]

	// HAL_UART_Transmit(&huart1, (uint8_t *)data, 10, 1000); //Send dataFrame through UART
}
 800de42:	46c0      	nop			; (mov r8, r8)
 800de44:	46bd      	mov	sp, r7
 800de46:	b00b      	add	sp, #44	; 0x2c
 800de48:	bd90      	pop	{r4, r7, pc}
 800de4a:	46c0      	nop			; (mov r8, r8)
 800de4c:	20006a90 	.word	0x20006a90

0800de50 <Send_Motion_Data>:
void Send_Motion_Data(void)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
	char data[6] = "\0";
 800de56:	003b      	movs	r3, r7
 800de58:	2200      	movs	r2, #0
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	2200      	movs	r2, #0
 800de5e:	809a      	strh	r2, [r3, #4]

	// Real data
	data[0] = 'p';
 800de60:	003b      	movs	r3, r7
 800de62:	2270      	movs	r2, #112	; 0x70
 800de64:	701a      	strb	r2, [r3, #0]
	data[1] = 'r';
 800de66:	003b      	movs	r3, r7
 800de68:	2272      	movs	r2, #114	; 0x72
 800de6a:	705a      	strb	r2, [r3, #1]
	data[2] = '0';
 800de6c:	003b      	movs	r3, r7
 800de6e:	2230      	movs	r2, #48	; 0x30
 800de70:	709a      	strb	r2, [r3, #2]

	if (Motion_Is_Detected())
 800de72:	f7fe fd2f 	bl	800c8d4 <Motion_Is_Detected>
 800de76:	1e03      	subs	r3, r0, #0
 800de78:	d003      	beq.n	800de82 <Send_Motion_Data+0x32>
	{
		data[3] = '1';
 800de7a:	003b      	movs	r3, r7
 800de7c:	2231      	movs	r2, #49	; 0x31
 800de7e:	70da      	strb	r2, [r3, #3]
 800de80:	e002      	b.n	800de88 <Send_Motion_Data+0x38>
	}
	else
	{
		data[3] = '0';
 800de82:	003b      	movs	r3, r7
 800de84:	2230      	movs	r2, #48	; 0x30
 800de86:	70da      	strb	r2, [r3, #3]
	}

	data[4] = '\n';
 800de88:	003b      	movs	r3, r7
 800de8a:	220a      	movs	r2, #10
 800de8c:	711a      	strb	r2, [r3, #4]

	data[5] = '\r';
 800de8e:	003b      	movs	r3, r7
 800de90:	220d      	movs	r2, #13
 800de92:	715a      	strb	r2, [r3, #5]

	// charCount = strlen(data) + 3 ; //calcul the number of characters to send and add the 2 characters for the command + 1 character for the \r(0xOD)
	// sprintf(dataFrame, "test", charCount, GET_DATA, data); //assemble the frame to send with dataframe (7E + char count + command + data + \r(0xOD)
	HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), 1000); // Send dataFrame through UART
 800de94:	23fa      	movs	r3, #250	; 0xfa
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	0039      	movs	r1, r7
 800de9a:	480a      	ldr	r0, [pc, #40]	; (800dec4 <Send_Motion_Data+0x74>)
 800de9c:	2206      	movs	r2, #6
 800de9e:	f007 fa51 	bl	8015344 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sizeof(data), 1000); // Send dataFrame through UART
 800dea2:	23fa      	movs	r3, #250	; 0xfa
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	0039      	movs	r1, r7
 800dea8:	4807      	ldr	r0, [pc, #28]	; (800dec8 <Send_Motion_Data+0x78>)
 800deaa:	2206      	movs	r2, #6
 800deac:	f007 fa4a 	bl	8015344 <HAL_UART_Transmit>
	LogToBufferLog(data, sizeof(data));
 800deb0:	003b      	movs	r3, r7
 800deb2:	2106      	movs	r1, #6
 800deb4:	0018      	movs	r0, r3
 800deb6:	f009 fead 	bl	8017c14 <LogToBufferLog>
}
 800deba:	46c0      	nop			; (mov r8, r8)
 800debc:	46bd      	mov	sp, r7
 800debe:	b002      	add	sp, #8
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	46c0      	nop			; (mov r8, r8)
 800dec4:	20006a90 	.word	0x20006a90
 800dec8:	20006b24 	.word	0x20006b24

0800decc <Send_Temperature_Data>:

void Send_Temperature_Data(float temp)
{
 800decc:	b5b0      	push	{r4, r5, r7, lr}
 800dece:	b0a2      	sub	sp, #136	; 0x88
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
	char result[100];
	int dVal, dec, i;
	char data[15];
	temp += 0.005; // added after a comment from Matt McNabb, see below.
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7f6 fe13 	bl	8004b00 <__aeabi_f2d>
 800deda:	4a80      	ldr	r2, [pc, #512]	; (800e0dc <Send_Temperature_Data+0x210>)
 800dedc:	4b80      	ldr	r3, [pc, #512]	; (800e0e0 <Send_Temperature_Data+0x214>)
 800dede:	f7f5 f957 	bl	8003190 <__aeabi_dadd>
 800dee2:	0002      	movs	r2, r0
 800dee4:	000b      	movs	r3, r1
 800dee6:	0010      	movs	r0, r2
 800dee8:	0019      	movs	r1, r3
 800deea:	f7f6 fe51 	bl	8004b90 <__aeabi_d2f>
 800deee:	1c03      	adds	r3, r0, #0
 800def0:	607b      	str	r3, [r7, #4]

	dVal = temp;
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7f5 f8e4 	bl	80030c0 <__aeabi_f2iz>
 800def8:	0003      	movs	r3, r0
 800defa:	2284      	movs	r2, #132	; 0x84
 800defc:	18ba      	adds	r2, r7, r2
 800defe:	6013      	str	r3, [r2, #0]
	dec = (int)(temp * 100) % 100;
 800df00:	4978      	ldr	r1, [pc, #480]	; (800e0e4 <Send_Temperature_Data+0x218>)
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7f4 ff8e 	bl	8002e24 <__aeabi_fmul>
 800df08:	1c03      	adds	r3, r0, #0
 800df0a:	1c18      	adds	r0, r3, #0
 800df0c:	f7f5 f8d8 	bl	80030c0 <__aeabi_f2iz>
 800df10:	0003      	movs	r3, r0
 800df12:	2164      	movs	r1, #100	; 0x64
 800df14:	0018      	movs	r0, r3
 800df16:	f7f4 fa7f 	bl	8002418 <__aeabi_idivmod>
 800df1a:	000b      	movs	r3, r1
 800df1c:	67fb      	str	r3, [r7, #124]	; 0x7c

	memset(result, 0, 100);
 800df1e:	2418      	movs	r4, #24
 800df20:	193b      	adds	r3, r7, r4
 800df22:	2264      	movs	r2, #100	; 0x64
 800df24:	2100      	movs	r1, #0
 800df26:	0018      	movs	r0, r3
 800df28:	f014 fe36 	bl	8022b98 <memset>
	result[0] = (dec % 10) + '0';
 800df2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df2e:	210a      	movs	r1, #10
 800df30:	0018      	movs	r0, r3
 800df32:	f7f4 fa71 	bl	8002418 <__aeabi_idivmod>
 800df36:	000b      	movs	r3, r1
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	3330      	adds	r3, #48	; 0x30
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	193b      	adds	r3, r7, r4
 800df40:	701a      	strb	r2, [r3, #0]
	result[1] = (dec / 10) + '0';
 800df42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df44:	210a      	movs	r1, #10
 800df46:	0018      	movs	r0, r3
 800df48:	f7f4 f980 	bl	800224c <__divsi3>
 800df4c:	0003      	movs	r3, r0
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	3330      	adds	r3, #48	; 0x30
 800df52:	b2da      	uxtb	r2, r3
 800df54:	193b      	adds	r3, r7, r4
 800df56:	705a      	strb	r2, [r3, #1]
	result[2] = '.';
 800df58:	193b      	adds	r3, r7, r4
 800df5a:	222e      	movs	r2, #46	; 0x2e
 800df5c:	709a      	strb	r2, [r3, #2]

	i = 3;
 800df5e:	2303      	movs	r3, #3
 800df60:	2280      	movs	r2, #128	; 0x80
 800df62:	18ba      	adds	r2, r7, r2
 800df64:	6013      	str	r3, [r2, #0]
	while (dVal > 0)
 800df66:	e020      	b.n	800dfaa <Send_Temperature_Data+0xde>
	{
		result[i] = (dVal % 10) + '0';
 800df68:	2484      	movs	r4, #132	; 0x84
 800df6a:	193b      	adds	r3, r7, r4
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	210a      	movs	r1, #10
 800df70:	0018      	movs	r0, r3
 800df72:	f7f4 fa51 	bl	8002418 <__aeabi_idivmod>
 800df76:	000b      	movs	r3, r1
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	3330      	adds	r3, #48	; 0x30
 800df7c:	b2d9      	uxtb	r1, r3
 800df7e:	2318      	movs	r3, #24
 800df80:	18fa      	adds	r2, r7, r3
 800df82:	2580      	movs	r5, #128	; 0x80
 800df84:	197b      	adds	r3, r7, r5
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	18d3      	adds	r3, r2, r3
 800df8a:	1c0a      	adds	r2, r1, #0
 800df8c:	701a      	strb	r2, [r3, #0]
		dVal /= 10;
 800df8e:	193b      	adds	r3, r7, r4
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	210a      	movs	r1, #10
 800df94:	0018      	movs	r0, r3
 800df96:	f7f4 f959 	bl	800224c <__divsi3>
 800df9a:	0003      	movs	r3, r0
 800df9c:	193a      	adds	r2, r7, r4
 800df9e:	6013      	str	r3, [r2, #0]
		i++;
 800dfa0:	197b      	adds	r3, r7, r5
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	197a      	adds	r2, r7, r5
 800dfa8:	6013      	str	r3, [r2, #0]
	while (dVal > 0)
 800dfaa:	2384      	movs	r3, #132	; 0x84
 800dfac:	18fb      	adds	r3, r7, r3
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dcd9      	bgt.n	800df68 <Send_Temperature_Data+0x9c>
	}

	if (result[5] == 0)
 800dfb4:	2018      	movs	r0, #24
 800dfb6:	183b      	adds	r3, r7, r0
 800dfb8:	795b      	ldrb	r3, [r3, #5]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d13f      	bne.n	800e03e <Send_Temperature_Data+0x172>
	{
		data[0] = 'T';
 800dfbe:	2108      	movs	r1, #8
 800dfc0:	187b      	adds	r3, r7, r1
 800dfc2:	2254      	movs	r2, #84	; 0x54
 800dfc4:	701a      	strb	r2, [r3, #0]
		data[1] = 'e';
 800dfc6:	187b      	adds	r3, r7, r1
 800dfc8:	2265      	movs	r2, #101	; 0x65
 800dfca:	705a      	strb	r2, [r3, #1]
		data[2] = 'm';
 800dfcc:	187b      	adds	r3, r7, r1
 800dfce:	226d      	movs	r2, #109	; 0x6d
 800dfd0:	709a      	strb	r2, [r3, #2]
		data[3] = 'p';
 800dfd2:	187b      	adds	r3, r7, r1
 800dfd4:	2270      	movs	r2, #112	; 0x70
 800dfd6:	70da      	strb	r2, [r3, #3]
		data[4] = ':';
 800dfd8:	187b      	adds	r3, r7, r1
 800dfda:	223a      	movs	r2, #58	; 0x3a
 800dfdc:	711a      	strb	r2, [r3, #4]
		data[5] = result[4];
 800dfde:	183b      	adds	r3, r7, r0
 800dfe0:	791a      	ldrb	r2, [r3, #4]
 800dfe2:	187b      	adds	r3, r7, r1
 800dfe4:	715a      	strb	r2, [r3, #5]
		data[6] = result[3];
 800dfe6:	183b      	adds	r3, r7, r0
 800dfe8:	78da      	ldrb	r2, [r3, #3]
 800dfea:	187b      	adds	r3, r7, r1
 800dfec:	719a      	strb	r2, [r3, #6]
		data[7] = result[2];
 800dfee:	183b      	adds	r3, r7, r0
 800dff0:	789a      	ldrb	r2, [r3, #2]
 800dff2:	187b      	adds	r3, r7, r1
 800dff4:	71da      	strb	r2, [r3, #7]
		data[8] = result[1];
 800dff6:	183b      	adds	r3, r7, r0
 800dff8:	785a      	ldrb	r2, [r3, #1]
 800dffa:	187b      	adds	r3, r7, r1
 800dffc:	721a      	strb	r2, [r3, #8]
		data[9] = result[0];
 800dffe:	183b      	adds	r3, r7, r0
 800e000:	781a      	ldrb	r2, [r3, #0]
 800e002:	187b      	adds	r3, r7, r1
 800e004:	725a      	strb	r2, [r3, #9]
		data[10] = ' ';
 800e006:	187b      	adds	r3, r7, r1
 800e008:	2220      	movs	r2, #32
 800e00a:	729a      	strb	r2, [r3, #10]
		data[11] = 'F';
 800e00c:	187b      	adds	r3, r7, r1
 800e00e:	2246      	movs	r2, #70	; 0x46
 800e010:	72da      	strb	r2, [r3, #11]
		data[12] = '\n';
 800e012:	187b      	adds	r3, r7, r1
 800e014:	220a      	movs	r2, #10
 800e016:	731a      	strb	r2, [r3, #12]
		data[13] = '\r';
 800e018:	187b      	adds	r3, r7, r1
 800e01a:	220d      	movs	r2, #13
 800e01c:	735a      	strb	r2, [r3, #13]

		HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data) - 1, 1000); // Send dataFrame through UART
 800e01e:	23fa      	movs	r3, #250	; 0xfa
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	000c      	movs	r4, r1
 800e024:	1879      	adds	r1, r7, r1
 800e026:	4830      	ldr	r0, [pc, #192]	; (800e0e8 <Send_Temperature_Data+0x21c>)
 800e028:	220e      	movs	r2, #14
 800e02a:	f007 f98b 	bl	8015344 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)data, sizeof(data) - 1, 1000); // Send dataFrame through UART
 800e02e:	23fa      	movs	r3, #250	; 0xfa
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	1939      	adds	r1, r7, r4
 800e034:	482d      	ldr	r0, [pc, #180]	; (800e0ec <Send_Temperature_Data+0x220>)
 800e036:	220e      	movs	r2, #14
 800e038:	f007 f984 	bl	8015344 <HAL_UART_Transmit>
 800e03c:	e043      	b.n	800e0c6 <Send_Temperature_Data+0x1fa>
	}
	else
	{
		data[0] = 'T';
 800e03e:	2108      	movs	r1, #8
 800e040:	187b      	adds	r3, r7, r1
 800e042:	2254      	movs	r2, #84	; 0x54
 800e044:	701a      	strb	r2, [r3, #0]
		data[1] = 'e';
 800e046:	187b      	adds	r3, r7, r1
 800e048:	2265      	movs	r2, #101	; 0x65
 800e04a:	705a      	strb	r2, [r3, #1]
		data[2] = 'm';
 800e04c:	187b      	adds	r3, r7, r1
 800e04e:	226d      	movs	r2, #109	; 0x6d
 800e050:	709a      	strb	r2, [r3, #2]
		data[3] = 'p';
 800e052:	187b      	adds	r3, r7, r1
 800e054:	2270      	movs	r2, #112	; 0x70
 800e056:	70da      	strb	r2, [r3, #3]
		data[4] = ':';
 800e058:	187b      	adds	r3, r7, r1
 800e05a:	223a      	movs	r2, #58	; 0x3a
 800e05c:	711a      	strb	r2, [r3, #4]
		data[5] = result[5];
 800e05e:	2018      	movs	r0, #24
 800e060:	183b      	adds	r3, r7, r0
 800e062:	795a      	ldrb	r2, [r3, #5]
 800e064:	187b      	adds	r3, r7, r1
 800e066:	715a      	strb	r2, [r3, #5]
		data[6] = result[4];
 800e068:	183b      	adds	r3, r7, r0
 800e06a:	791a      	ldrb	r2, [r3, #4]
 800e06c:	187b      	adds	r3, r7, r1
 800e06e:	719a      	strb	r2, [r3, #6]
		data[7] = result[3];
 800e070:	183b      	adds	r3, r7, r0
 800e072:	78da      	ldrb	r2, [r3, #3]
 800e074:	187b      	adds	r3, r7, r1
 800e076:	71da      	strb	r2, [r3, #7]
		data[8] = result[2];
 800e078:	183b      	adds	r3, r7, r0
 800e07a:	789a      	ldrb	r2, [r3, #2]
 800e07c:	187b      	adds	r3, r7, r1
 800e07e:	721a      	strb	r2, [r3, #8]
		data[9] = result[1];
 800e080:	183b      	adds	r3, r7, r0
 800e082:	785a      	ldrb	r2, [r3, #1]
 800e084:	187b      	adds	r3, r7, r1
 800e086:	725a      	strb	r2, [r3, #9]
		data[10] = result[0];
 800e088:	183b      	adds	r3, r7, r0
 800e08a:	781a      	ldrb	r2, [r3, #0]
 800e08c:	187b      	adds	r3, r7, r1
 800e08e:	729a      	strb	r2, [r3, #10]
		data[11] = ' ';
 800e090:	187b      	adds	r3, r7, r1
 800e092:	2220      	movs	r2, #32
 800e094:	72da      	strb	r2, [r3, #11]
		data[12] = 'F';
 800e096:	187b      	adds	r3, r7, r1
 800e098:	2246      	movs	r2, #70	; 0x46
 800e09a:	731a      	strb	r2, [r3, #12]
		data[13] = '\n';
 800e09c:	187b      	adds	r3, r7, r1
 800e09e:	220a      	movs	r2, #10
 800e0a0:	735a      	strb	r2, [r3, #13]
		data[14] = '\r';
 800e0a2:	187b      	adds	r3, r7, r1
 800e0a4:	220d      	movs	r2, #13
 800e0a6:	739a      	strb	r2, [r3, #14]

		HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), 1000); // Send dataFrame through UART
 800e0a8:	23fa      	movs	r3, #250	; 0xfa
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	000c      	movs	r4, r1
 800e0ae:	1879      	adds	r1, r7, r1
 800e0b0:	480d      	ldr	r0, [pc, #52]	; (800e0e8 <Send_Temperature_Data+0x21c>)
 800e0b2:	220f      	movs	r2, #15
 800e0b4:	f007 f946 	bl	8015344 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)data, sizeof(data), 1000); // Send dataFrame through UART
 800e0b8:	23fa      	movs	r3, #250	; 0xfa
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	1939      	adds	r1, r7, r4
 800e0be:	480b      	ldr	r0, [pc, #44]	; (800e0ec <Send_Temperature_Data+0x220>)
 800e0c0:	220f      	movs	r2, #15
 800e0c2:	f007 f93f 	bl	8015344 <HAL_UART_Transmit>
	}

	LogToBufferLog(data, sizeof(data));
 800e0c6:	2308      	movs	r3, #8
 800e0c8:	18fb      	adds	r3, r7, r3
 800e0ca:	210f      	movs	r1, #15
 800e0cc:	0018      	movs	r0, r3
 800e0ce:	f009 fda1 	bl	8017c14 <LogToBufferLog>
}
 800e0d2:	46c0      	nop			; (mov r8, r8)
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	b022      	add	sp, #136	; 0x88
 800e0d8:	bdb0      	pop	{r4, r5, r7, pc}
 800e0da:	46c0      	nop			; (mov r8, r8)
 800e0dc:	47ae147b 	.word	0x47ae147b
 800e0e0:	3f747ae1 	.word	0x3f747ae1
 800e0e4:	42c80000 	.word	0x42c80000
 800e0e8:	20006a90 	.word	0x20006a90
 800e0ec:	20006b24 	.word	0x20006b24

0800e0f0 <getRxUartBuffer>:
//	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_uart, 1);  //Call again the UART interruption for the next time
//	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_uart, 1);  //Call again the UART interruption for the next time
// }

char getRxUartBuffer(uint8_t index)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	0002      	movs	r2, r0
 800e0f8:	1dfb      	adds	r3, r7, #7
 800e0fa:	701a      	strb	r2, [r3, #0]
	return rx_Buffer[index];
 800e0fc:	1dfb      	adds	r3, r7, #7
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	4a02      	ldr	r2, [pc, #8]	; (800e10c <getRxUartBuffer+0x1c>)
 800e102:	5cd3      	ldrb	r3, [r2, r3]
}
 800e104:	0018      	movs	r0, r3
 800e106:	46bd      	mov	sp, r7
 800e108:	b002      	add	sp, #8
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	20006f2c 	.word	0x20006f2c

0800e110 <Get_Carriage_Return_Flag>:

bool Get_Carriage_Return_Flag(void)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
	return carriage_return_flag;
 800e114:	4b02      	ldr	r3, [pc, #8]	; (800e120 <Get_Carriage_Return_Flag+0x10>)
 800e116:	781b      	ldrb	r3, [r3, #0]
}
 800e118:	0018      	movs	r0, r3
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	46c0      	nop			; (mov r8, r8)
 800e120:	20006f45 	.word	0x20006f45

0800e124 <Set_Carriage_Return_Flag>:

void Set_Carriage_Return_Flag(bool new_flag)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	0002      	movs	r2, r0
 800e12c:	1dfb      	adds	r3, r7, #7
 800e12e:	701a      	strb	r2, [r3, #0]
	carriage_return_flag = new_flag;
 800e130:	4b03      	ldr	r3, [pc, #12]	; (800e140 <Set_Carriage_Return_Flag+0x1c>)
 800e132:	1dfa      	adds	r2, r7, #7
 800e134:	7812      	ldrb	r2, [r2, #0]
 800e136:	701a      	strb	r2, [r3, #0]
}
 800e138:	46c0      	nop			; (mov r8, r8)
 800e13a:	46bd      	mov	sp, r7
 800e13c:	b002      	add	sp, #8
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	20006f45 	.word	0x20006f45

0800e144 <changeBaudRate>:

void changeBaudRate(int baudrate, int word_length, int stop_bits)
{
 800e144:	b5b0      	push	{r4, r5, r7, lr}
 800e146:	b08a      	sub	sp, #40	; 0x28
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]

	HAL_UART_Abort_IT(&huart2);
 800e150:	4b33      	ldr	r3, [pc, #204]	; (800e220 <changeBaudRate+0xdc>)
 800e152:	0018      	movs	r0, r3
 800e154:	f007 fa80 	bl	8015658 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&huart2);
 800e158:	4b31      	ldr	r3, [pc, #196]	; (800e220 <changeBaudRate+0xdc>)
 800e15a:	0018      	movs	r0, r3
 800e15c:	f007 f8b2 	bl	80152c4 <HAL_UART_DeInit>
	huart2.Init.BaudRate = baudrate;
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	4b2f      	ldr	r3, [pc, #188]	; (800e220 <changeBaudRate+0xdc>)
 800e164:	605a      	str	r2, [r3, #4]

	if (word_length == 1)
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d104      	bne.n	800e176 <changeBaudRate+0x32>
		huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800e16c:	4b2c      	ldr	r3, [pc, #176]	; (800e220 <changeBaudRate+0xdc>)
 800e16e:	2280      	movs	r2, #128	; 0x80
 800e170:	0552      	lsls	r2, r2, #21
 800e172:	609a      	str	r2, [r3, #8]
 800e174:	e011      	b.n	800e19a <changeBaudRate+0x56>
	else if (word_length == 2)
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d103      	bne.n	800e184 <changeBaudRate+0x40>
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e17c:	4b28      	ldr	r3, [pc, #160]	; (800e220 <changeBaudRate+0xdc>)
 800e17e:	2200      	movs	r2, #0
 800e180:	609a      	str	r2, [r3, #8]
 800e182:	e00a      	b.n	800e19a <changeBaudRate+0x56>
	else if (word_length == 3)
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2b03      	cmp	r3, #3
 800e188:	d104      	bne.n	800e194 <changeBaudRate+0x50>
		huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800e18a:	4b25      	ldr	r3, [pc, #148]	; (800e220 <changeBaudRate+0xdc>)
 800e18c:	2280      	movs	r2, #128	; 0x80
 800e18e:	0152      	lsls	r2, r2, #5
 800e190:	609a      	str	r2, [r3, #8]
 800e192:	e002      	b.n	800e19a <changeBaudRate+0x56>
	else
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e194:	4b22      	ldr	r3, [pc, #136]	; (800e220 <changeBaudRate+0xdc>)
 800e196:	2200      	movs	r2, #0
 800e198:	609a      	str	r2, [r3, #8]

	if (stop_bits == 1)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d104      	bne.n	800e1aa <changeBaudRate+0x66>
		huart2.Init.StopBits = UART_STOPBITS_0_5;
 800e1a0:	4b1f      	ldr	r3, [pc, #124]	; (800e220 <changeBaudRate+0xdc>)
 800e1a2:	2280      	movs	r2, #128	; 0x80
 800e1a4:	0152      	lsls	r2, r2, #5
 800e1a6:	60da      	str	r2, [r3, #12]
 800e1a8:	e019      	b.n	800e1de <changeBaudRate+0x9a>
	else if (stop_bits == 2)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d103      	bne.n	800e1b8 <changeBaudRate+0x74>
		huart2.Init.StopBits = UART_STOPBITS_1;
 800e1b0:	4b1b      	ldr	r3, [pc, #108]	; (800e220 <changeBaudRate+0xdc>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	60da      	str	r2, [r3, #12]
 800e1b6:	e012      	b.n	800e1de <changeBaudRate+0x9a>
	else if (stop_bits == 3)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b03      	cmp	r3, #3
 800e1bc:	d104      	bne.n	800e1c8 <changeBaudRate+0x84>
		huart2.Init.StopBits = UART_STOPBITS_1_5;
 800e1be:	4b18      	ldr	r3, [pc, #96]	; (800e220 <changeBaudRate+0xdc>)
 800e1c0:	22c0      	movs	r2, #192	; 0xc0
 800e1c2:	0192      	lsls	r2, r2, #6
 800e1c4:	60da      	str	r2, [r3, #12]
 800e1c6:	e00a      	b.n	800e1de <changeBaudRate+0x9a>
	else if (stop_bits == 4)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b04      	cmp	r3, #4
 800e1cc:	d104      	bne.n	800e1d8 <changeBaudRate+0x94>
		huart2.Init.StopBits = UART_STOPBITS_2;
 800e1ce:	4b14      	ldr	r3, [pc, #80]	; (800e220 <changeBaudRate+0xdc>)
 800e1d0:	2280      	movs	r2, #128	; 0x80
 800e1d2:	0192      	lsls	r2, r2, #6
 800e1d4:	60da      	str	r2, [r3, #12]
 800e1d6:	e002      	b.n	800e1de <changeBaudRate+0x9a>
	else
		huart2.Init.StopBits = UART_STOPBITS_1;
 800e1d8:	4b11      	ldr	r3, [pc, #68]	; (800e220 <changeBaudRate+0xdc>)
 800e1da:	2200      	movs	r2, #0
 800e1dc:	60da      	str	r2, [r3, #12]

	if (HAL_UART_Init(&huart2) != HAL_OK)
 800e1de:	4b10      	ldr	r3, [pc, #64]	; (800e220 <changeBaudRate+0xdc>)
 800e1e0:	0018      	movs	r0, r3
 800e1e2:	f007 f819 	bl	8015218 <HAL_UART_Init>
 800e1e6:	1e03      	subs	r3, r0, #0
 800e1e8:	d001      	beq.n	800e1ee <changeBaudRate+0xaa>
	{
		Error_Handler();
 800e1ea:	f7fe fa0b 	bl	800c604 <Error_Handler>
	}
	// if (HAL_UART_Receive_IT(&huart2, BUFFER, YOUR_BUFFER_SIZE) != HAL_OK) {
	//     Error_Handler();
	// }
	Send_String("Baudrate changed\r\n", sizeof("Baudrate changed\r\n"));
 800e1ee:	4b0d      	ldr	r3, [pc, #52]	; (800e224 <changeBaudRate+0xe0>)
 800e1f0:	2113      	movs	r1, #19
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	f7ff fd5a 	bl	800dcac <Send_String>
	char stringrer[] = "Baudrate changed\r\n";
 800e1f8:	2514      	movs	r5, #20
 800e1fa:	197b      	adds	r3, r7, r5
 800e1fc:	4a09      	ldr	r2, [pc, #36]	; (800e224 <changeBaudRate+0xe0>)
 800e1fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e200:	c313      	stmia	r3!, {r0, r1, r4}
 800e202:	6811      	ldr	r1, [r2, #0]
 800e204:	6019      	str	r1, [r3, #0]
 800e206:	8891      	ldrh	r1, [r2, #4]
 800e208:	8099      	strh	r1, [r3, #4]
 800e20a:	7992      	ldrb	r2, [r2, #6]
 800e20c:	719a      	strb	r2, [r3, #6]
	LogToBufferLog(stringrer, sizeof(stringrer));
 800e20e:	197b      	adds	r3, r7, r5
 800e210:	2113      	movs	r1, #19
 800e212:	0018      	movs	r0, r3
 800e214:	f009 fcfe 	bl	8017c14 <LogToBufferLog>
}
 800e218:	46c0      	nop			; (mov r8, r8)
 800e21a:	46bd      	mov	sp, r7
 800e21c:	b00a      	add	sp, #40	; 0x28
 800e21e:	bdb0      	pop	{r4, r5, r7, pc}
 800e220:	20006b24 	.word	0x20006b24
 800e224:	08025744 	.word	0x08025744

0800e228 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]

	/* Restart DMA RX even if we encountered framing error, etc */

	// HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_uart, 1);
	// HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_uart, 1);  //Call again the UART interruption for the next time
}
 800e230:	46c0      	nop			; (mov r8, r8)
 800e232:	46bd      	mov	sp, r7
 800e234:	b002      	add	sp, #8
 800e236:	bd80      	pop	{r7, pc}

0800e238 <strtoI>:
extern uint32_t JumpAddress;
// Pre-defined Set CGI functions
int8_t set_diodir(uint8_t * uri);
int8_t set_diostate(uint8_t * uri);
uint32_t strtoI(char*s)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	60fb      	str	r3, [r7, #12]
	while(*s)
 800e244:	e00d      	b.n	800e262 <strtoI+0x2a>
	{
		ret = ret*10 + (*s - '0');
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	0013      	movs	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	189b      	adds	r3, r3, r2
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	001a      	movs	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	18d3      	adds	r3, r2, r3
 800e258:	3b30      	subs	r3, #48	; 0x30
 800e25a:	60fb      	str	r3, [r7, #12]
		s++;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3301      	adds	r3, #1
 800e260:	607b      	str	r3, [r7, #4]
	while(*s)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1ed      	bne.n	800e246 <strtoI+0xe>
	}
	return ret;
 800e26a:	68fb      	ldr	r3, [r7, #12]
}
 800e26c:	0018      	movs	r0, r3
 800e26e:	46bd      	mov	sp, r7
 800e270:	b004      	add	sp, #16
 800e272:	bd80      	pop	{r7, pc}

0800e274 <base64_decode>:
    // '=' (padding) is mapped to 0xFF, we'll handle it explicitly later
    ['='] = 0xFF
};

// Function to decode Base64 string into binary data
int base64_decode(const char *input, uint8_t *output, int *output_len) {
 800e274:	b580      	push	{r7, lr}
 800e276:	b08e      	sub	sp, #56	; 0x38
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
    size_t input_len = strlen(input);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	0018      	movs	r0, r3
 800e284:	f7f3 ff46 	bl	8002114 <strlen>
 800e288:	0003      	movs	r3, r0
 800e28a:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t decoded_len = (input_len / 4) * 3;
 800e28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28e:	089a      	lsrs	r2, r3, #2
 800e290:	0013      	movs	r3, r2
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	189b      	adds	r3, r3, r2
 800e296:	637b      	str	r3, [r7, #52]	; 0x34

    if (input_len % 4 != 0) {
 800e298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29a:	2203      	movs	r2, #3
 800e29c:	4013      	ands	r3, r2
 800e29e:	d002      	beq.n	800e2a6 <base64_decode+0x32>
        // Invalid Base64 string length
        return -1;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	425b      	negs	r3, r3
 800e2a4:	e0a6      	b.n	800e3f4 <base64_decode+0x180>
    }

    // Adjust decoded length based on padding
    if (input[input_len - 1] == '=') decoded_len--;
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	18d3      	adds	r3, r2, r3
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b3d      	cmp	r3, #61	; 0x3d
 800e2b2:	d102      	bne.n	800e2ba <base64_decode+0x46>
 800e2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	637b      	str	r3, [r7, #52]	; 0x34
    if (input[input_len - 2] == '=') decoded_len--;
 800e2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2bc:	3b02      	subs	r3, #2
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	18d3      	adds	r3, r2, r3
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b3d      	cmp	r3, #61	; 0x3d
 800e2c6:	d102      	bne.n	800e2ce <base64_decode+0x5a>
 800e2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	637b      	str	r3, [r7, #52]	; 0x34

    *output_len = decoded_len;  // Set the output length
 800e2ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	601a      	str	r2, [r3, #0]

    for (size_t i = 0, j = 0; i < input_len;) {
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	633b      	str	r3, [r7, #48]	; 0x30
 800e2d8:	2300      	movs	r3, #0
 800e2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2dc:	e084      	b.n	800e3e8 <base64_decode+0x174>
        // Get the 4 characters to decode
        uint32_t sextet_a = input[i] == '=' ? 0 & i++ : base64_table[(unsigned char)input[i++]];
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e2:	18d3      	adds	r3, r2, r3
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b3d      	cmp	r3, #61	; 0x3d
 800e2e8:	d104      	bne.n	800e2f4 <base64_decode+0x80>
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	633b      	str	r3, [r7, #48]	; 0x30
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	e008      	b.n	800e306 <base64_decode+0x92>
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f6:	1c5a      	adds	r2, r3, #1
 800e2f8:	633a      	str	r2, [r7, #48]	; 0x30
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	18d3      	adds	r3, r2, r3
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	001a      	movs	r2, r3
 800e302:	4b3e      	ldr	r3, [pc, #248]	; (800e3fc <base64_decode+0x188>)
 800e304:	5c9b      	ldrb	r3, [r3, r2]
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t sextet_b = input[i] == '=' ? 0 & i++ : base64_table[(unsigned char)input[i++]];
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30c:	18d3      	adds	r3, r2, r3
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	2b3d      	cmp	r3, #61	; 0x3d
 800e312:	d104      	bne.n	800e31e <base64_decode+0xaa>
 800e314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e316:	3301      	adds	r3, #1
 800e318:	633b      	str	r3, [r7, #48]	; 0x30
 800e31a:	2300      	movs	r3, #0
 800e31c:	e008      	b.n	800e330 <base64_decode+0xbc>
 800e31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	633a      	str	r2, [r7, #48]	; 0x30
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	18d3      	adds	r3, r2, r3
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	001a      	movs	r2, r3
 800e32c:	4b33      	ldr	r3, [pc, #204]	; (800e3fc <base64_decode+0x188>)
 800e32e:	5c9b      	ldrb	r3, [r3, r2]
 800e330:	623b      	str	r3, [r7, #32]
        uint32_t sextet_c = input[i] == '=' ? 0 & i++ : base64_table[(unsigned char)input[i++]];
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	18d3      	adds	r3, r2, r3
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	2b3d      	cmp	r3, #61	; 0x3d
 800e33c:	d104      	bne.n	800e348 <base64_decode+0xd4>
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	3301      	adds	r3, #1
 800e342:	633b      	str	r3, [r7, #48]	; 0x30
 800e344:	2300      	movs	r3, #0
 800e346:	e008      	b.n	800e35a <base64_decode+0xe6>
 800e348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	633a      	str	r2, [r7, #48]	; 0x30
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	18d3      	adds	r3, r2, r3
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	001a      	movs	r2, r3
 800e356:	4b29      	ldr	r3, [pc, #164]	; (800e3fc <base64_decode+0x188>)
 800e358:	5c9b      	ldrb	r3, [r3, r2]
 800e35a:	61fb      	str	r3, [r7, #28]
        uint32_t sextet_d = input[i] == '=' ? 0 & i++ : base64_table[(unsigned char)input[i++]];
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	18d3      	adds	r3, r2, r3
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b3d      	cmp	r3, #61	; 0x3d
 800e366:	d104      	bne.n	800e372 <base64_decode+0xfe>
 800e368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36a:	3301      	adds	r3, #1
 800e36c:	633b      	str	r3, [r7, #48]	; 0x30
 800e36e:	2300      	movs	r3, #0
 800e370:	e008      	b.n	800e384 <base64_decode+0x110>
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	1c5a      	adds	r2, r3, #1
 800e376:	633a      	str	r2, [r7, #48]	; 0x30
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	18d3      	adds	r3, r2, r3
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	001a      	movs	r2, r3
 800e380:	4b1e      	ldr	r3, [pc, #120]	; (800e3fc <base64_decode+0x188>)
 800e382:	5c9b      	ldrb	r3, [r3, r2]
 800e384:	61bb      	str	r3, [r7, #24]

        // Combine into 24-bit binary
        uint32_t triple = (sextet_a << 18) | (sextet_b << 12) | (sextet_c << 6) | sextet_d;
 800e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e388:	049a      	lsls	r2, r3, #18
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	031b      	lsls	r3, r3, #12
 800e38e:	431a      	orrs	r2, r3
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	019b      	lsls	r3, r3, #6
 800e394:	4313      	orrs	r3, r2
 800e396:	69ba      	ldr	r2, [r7, #24]
 800e398:	4313      	orrs	r3, r2
 800e39a:	617b      	str	r3, [r7, #20]

        // Extract and write the 3 bytes
        if (j < decoded_len) output[j++] = (triple >> 16) & 0xFF;
 800e39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d208      	bcs.n	800e3b6 <base64_decode+0x142>
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	0c19      	lsrs	r1, r3, #16
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	18d3      	adds	r3, r2, r3
 800e3b2:	b2ca      	uxtb	r2, r1
 800e3b4:	701a      	strb	r2, [r3, #0]
        if (j < decoded_len) output[j++] = (triple >> 8) & 0xFF;
 800e3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d208      	bcs.n	800e3d0 <base64_decode+0x15c>
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	0a19      	lsrs	r1, r3, #8
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	1c5a      	adds	r2, r3, #1
 800e3c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	18d3      	adds	r3, r2, r3
 800e3cc:	b2ca      	uxtb	r2, r1
 800e3ce:	701a      	strb	r2, [r3, #0]
        if (j < decoded_len) output[j++] = triple & 0xFF;
 800e3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d207      	bcs.n	800e3e8 <base64_decode+0x174>
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	1c5a      	adds	r2, r3, #1
 800e3dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3de:	68ba      	ldr	r2, [r7, #8]
 800e3e0:	18d3      	adds	r3, r2, r3
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	b2d2      	uxtb	r2, r2
 800e3e6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0, j = 0; i < input_len;) {
 800e3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d200      	bcs.n	800e3f2 <base64_decode+0x17e>
 800e3f0:	e775      	b.n	800e2de <base64_decode+0x6a>
    }

    return 0;  // Success
 800e3f2:	2300      	movs	r3, #0
}
 800e3f4:	0018      	movs	r0, r3
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	b00e      	add	sp, #56	; 0x38
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	08031be4 	.word	0x08031be4

0800e400 <extract>:

void extract(char * s, char * PATTERN1, char * PATTERN2, char* ret)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	603b      	str	r3, [r7, #0]
	char *start, *end;
	start = strstr( s, PATTERN1 );
 800e40e:	68ba      	ldr	r2, [r7, #8]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	0011      	movs	r1, r2
 800e414:	0018      	movs	r0, r3
 800e416:	f014 fc6f 	bl	8022cf8 <strstr>
 800e41a:	0003      	movs	r3, r0
 800e41c:	617b      	str	r3, [r7, #20]
	if (start)
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d028      	beq.n	800e476 <extract+0x76>
	{
		start += strlen( PATTERN1 );
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	0018      	movs	r0, r3
 800e428:	f7f3 fe74 	bl	8002114 <strlen>
 800e42c:	0002      	movs	r2, r0
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	189b      	adds	r3, r3, r2
 800e432:	617b      	str	r3, [r7, #20]
		end = strstr( start, PATTERN2 );
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	0011      	movs	r1, r2
 800e43a:	0018      	movs	r0, r3
 800e43c:	f014 fc5c 	bl	8022cf8 <strstr>
 800e440:	0003      	movs	r3, r0
 800e442:	613b      	str	r3, [r7, #16]
		if (end)
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d011      	beq.n	800e46e <extract+0x6e>
		{
			memcpy( ret, start, end - start );
 800e44a:	693a      	ldr	r2, [r7, #16]
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	001a      	movs	r2, r3
 800e452:	6979      	ldr	r1, [r7, #20]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	0018      	movs	r0, r3
 800e458:	f015 fa86 	bl	8023968 <memcpy>
			ret[end - start] = '\0';
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	001a      	movs	r2, r3
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	189b      	adds	r3, r3, r2
 800e468:	2200      	movs	r2, #0
 800e46a:	701a      	strb	r2, [r3, #0]
		}
		else ret[0] = 0;
	}
	else ret[0] = 0;
}
 800e46c:	e006      	b.n	800e47c <extract+0x7c>
		else ret[0] = 0;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2200      	movs	r2, #0
 800e472:	701a      	strb	r2, [r3, #0]
}
 800e474:	e002      	b.n	800e47c <extract+0x7c>
	else ret[0] = 0;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	2200      	movs	r2, #0
 800e47a:	701a      	strb	r2, [r3, #0]
}
 800e47c:	46c0      	nop			; (mov r8, r8)
 800e47e:	46bd      	mov	sp, r7
 800e480:	b006      	add	sp, #24
 800e482:	bd80      	pop	{r7, pc}

0800e484 <predefined_get_cgi_processor>:
uint8_t predefined_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 800e484:	b5b0      	push	{r4, r5, r7, lr}
 800e486:	b08a      	sub	sp, #40	; 0x28
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
	uint8_t ret = 1;	// ret = 1 means 'uri_name' matched
 800e490:	2327      	movs	r3, #39	; 0x27
 800e492:	18fb      	adds	r3, r7, r3
 800e494:	2201      	movs	r2, #1
 800e496:	701a      	strb	r2, [r3, #0]
	uint8_t cgibuf[14] = {0, };
 800e498:	2314      	movs	r3, #20
 800e49a:	18fb      	adds	r3, r7, r3
 800e49c:	2200      	movs	r2, #0
 800e49e:	601a      	str	r2, [r3, #0]
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	220a      	movs	r2, #10
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f014 fb76 	bl	8022b98 <memset>
	int8_t cgi_dio = -1;
 800e4ac:	2326      	movs	r3, #38	; 0x26
 800e4ae:	18fb      	adds	r3, r7, r3
 800e4b0:	22ff      	movs	r2, #255	; 0xff
 800e4b2:	701a      	strb	r2, [r3, #0]
	int8_t cgi_ain = -1;
 800e4b4:	2325      	movs	r3, #37	; 0x25
 800e4b6:	18fb      	adds	r3, r7, r3
 800e4b8:	22ff      	movs	r2, #255	; 0xff
 800e4ba:	701a      	strb	r2, [r3, #0]

	uint8_t i;

	if(strcmp((const char *)uri_name, "todo.cgi") == 0)
 800e4bc:	4a4c      	ldr	r2, [pc, #304]	; (800e5f0 <predefined_get_cgi_processor+0x16c>)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	0011      	movs	r1, r2
 800e4c2:	0018      	movs	r0, r3
 800e4c4:	f7f3 fe1c 	bl	8002100 <strcmp>
 800e4c8:	1e03      	subs	r3, r0, #0
 800e4ca:	d100      	bne.n	800e4ce <predefined_get_cgi_processor+0x4a>
 800e4cc:	e089      	b.n	800e5e2 <predefined_get_cgi_processor+0x15e>
	{
		// to do
		;//make_json_todo(buf, len);
	}
	else if(strcmp((const char *)uri_name, "get_netinfo.cgi") == 0)
 800e4ce:	4a49      	ldr	r2, [pc, #292]	; (800e5f4 <predefined_get_cgi_processor+0x170>)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	0011      	movs	r1, r2
 800e4d4:	0018      	movs	r0, r3
 800e4d6:	f7f3 fe13 	bl	8002100 <strcmp>
 800e4da:	1e03      	subs	r3, r0, #0
 800e4dc:	d106      	bne.n	800e4ec <predefined_get_cgi_processor+0x68>
	{
		make_json_netinfo(buf, len);
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	0011      	movs	r1, r2
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	f000 fbe9 	bl	800ecbc <make_json_netinfo>
 800e4ea:	e07a      	b.n	800e5e2 <predefined_get_cgi_processor+0x15e>
	}
	else
	{
		// get_dio0.cgi ~ get_dio15.cgi
		for(i = 0; i < 53; i++)
 800e4ec:	2324      	movs	r3, #36	; 0x24
 800e4ee:	18fb      	adds	r3, r7, r3
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	701a      	strb	r2, [r3, #0]
 800e4f4:	e029      	b.n	800e54a <predefined_get_cgi_processor+0xc6>
		{
			memset(cgibuf, 0x00, 14);
 800e4f6:	2414      	movs	r4, #20
 800e4f8:	193b      	adds	r3, r7, r4
 800e4fa:	220e      	movs	r2, #14
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	0018      	movs	r0, r3
 800e500:	f014 fb4a 	bl	8022b98 <memset>
			sprintf((char *)cgibuf, "get_dio%d.cgi", i);
 800e504:	2524      	movs	r5, #36	; 0x24
 800e506:	197b      	adds	r3, r7, r5
 800e508:	781a      	ldrb	r2, [r3, #0]
 800e50a:	493b      	ldr	r1, [pc, #236]	; (800e5f8 <predefined_get_cgi_processor+0x174>)
 800e50c:	193b      	adds	r3, r7, r4
 800e50e:	0018      	movs	r0, r3
 800e510:	f014 fa2e 	bl	8022970 <siprintf>
			if(strcmp((const char *)uri_name, (const char *)cgibuf) == 0)
 800e514:	193a      	adds	r2, r7, r4
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	0011      	movs	r1, r2
 800e51a:	0018      	movs	r0, r3
 800e51c:	f7f3 fdf0 	bl	8002100 <strcmp>
 800e520:	1e03      	subs	r3, r0, #0
 800e522:	d10c      	bne.n	800e53e <predefined_get_cgi_processor+0xba>
			{
				make_json_dio(buf, len, i);
 800e524:	197b      	adds	r3, r7, r5
 800e526:	781a      	ldrb	r2, [r3, #0]
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	0018      	movs	r0, r3
 800e52e:	f000 fb87 	bl	800ec40 <make_json_dio>
				cgi_dio = i;
 800e532:	2326      	movs	r3, #38	; 0x26
 800e534:	18fb      	adds	r3, r7, r3
 800e536:	197a      	adds	r2, r7, r5
 800e538:	7812      	ldrb	r2, [r2, #0]
 800e53a:	701a      	strb	r2, [r3, #0]
				break;
 800e53c:	e00a      	b.n	800e554 <predefined_get_cgi_processor+0xd0>
		for(i = 0; i < 53; i++)
 800e53e:	2124      	movs	r1, #36	; 0x24
 800e540:	187b      	adds	r3, r7, r1
 800e542:	781a      	ldrb	r2, [r3, #0]
 800e544:	187b      	adds	r3, r7, r1
 800e546:	3201      	adds	r2, #1
 800e548:	701a      	strb	r2, [r3, #0]
 800e54a:	2324      	movs	r3, #36	; 0x24
 800e54c:	18fb      	adds	r3, r7, r3
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b34      	cmp	r3, #52	; 0x34
 800e552:	d9d0      	bls.n	800e4f6 <predefined_get_cgi_processor+0x72>
			}
		}

		if(cgi_dio < 0)
 800e554:	2326      	movs	r3, #38	; 0x26
 800e556:	18fb      	adds	r3, r7, r3
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	2b7f      	cmp	r3, #127	; 0x7f
 800e55c:	d933      	bls.n	800e5c6 <predefined_get_cgi_processor+0x142>
		{
			// get_ain0.cgi ~ get_ain5.cgi (A0 - A5), get_ain6.cgi for on-board potentiometer / Temp.Sensor
			for(i = 0; i < 28; i++)
 800e55e:	2324      	movs	r3, #36	; 0x24
 800e560:	18fb      	adds	r3, r7, r3
 800e562:	2200      	movs	r2, #0
 800e564:	701a      	strb	r2, [r3, #0]
 800e566:	e029      	b.n	800e5bc <predefined_get_cgi_processor+0x138>
			{
				memset(cgibuf, 0x00, 14);
 800e568:	2414      	movs	r4, #20
 800e56a:	193b      	adds	r3, r7, r4
 800e56c:	220e      	movs	r2, #14
 800e56e:	2100      	movs	r1, #0
 800e570:	0018      	movs	r0, r3
 800e572:	f014 fb11 	bl	8022b98 <memset>
				sprintf((char *)cgibuf, "get_ain%d.cgi", i);
 800e576:	2524      	movs	r5, #36	; 0x24
 800e578:	197b      	adds	r3, r7, r5
 800e57a:	781a      	ldrb	r2, [r3, #0]
 800e57c:	491f      	ldr	r1, [pc, #124]	; (800e5fc <predefined_get_cgi_processor+0x178>)
 800e57e:	193b      	adds	r3, r7, r4
 800e580:	0018      	movs	r0, r3
 800e582:	f014 f9f5 	bl	8022970 <siprintf>
				if(strcmp((const char *)uri_name, (const char *)cgibuf) == 0)
 800e586:	193a      	adds	r2, r7, r4
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	0011      	movs	r1, r2
 800e58c:	0018      	movs	r0, r3
 800e58e:	f7f3 fdb7 	bl	8002100 <strcmp>
 800e592:	1e03      	subs	r3, r0, #0
 800e594:	d10c      	bne.n	800e5b0 <predefined_get_cgi_processor+0x12c>
				{
					make_json_ain(buf, len, i);
 800e596:	197b      	adds	r3, r7, r5
 800e598:	781a      	ldrb	r2, [r3, #0]
 800e59a:	6879      	ldr	r1, [r7, #4]
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	0018      	movs	r0, r3
 800e5a0:	f000 fb74 	bl	800ec8c <make_json_ain>
					cgi_ain = i;
 800e5a4:	2325      	movs	r3, #37	; 0x25
 800e5a6:	18fb      	adds	r3, r7, r3
 800e5a8:	197a      	adds	r2, r7, r5
 800e5aa:	7812      	ldrb	r2, [r2, #0]
 800e5ac:	701a      	strb	r2, [r3, #0]
					break;
 800e5ae:	e00a      	b.n	800e5c6 <predefined_get_cgi_processor+0x142>
			for(i = 0; i < 28; i++)
 800e5b0:	2124      	movs	r1, #36	; 0x24
 800e5b2:	187b      	adds	r3, r7, r1
 800e5b4:	781a      	ldrb	r2, [r3, #0]
 800e5b6:	187b      	adds	r3, r7, r1
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	701a      	strb	r2, [r3, #0]
 800e5bc:	2324      	movs	r3, #36	; 0x24
 800e5be:	18fb      	adds	r3, r7, r3
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b1b      	cmp	r3, #27
 800e5c4:	d9d0      	bls.n	800e568 <predefined_get_cgi_processor+0xe4>
				}
			}
		}

		if((cgi_dio < 0) && (cgi_ain < 0)) ret = 0;
 800e5c6:	2326      	movs	r3, #38	; 0x26
 800e5c8:	18fb      	adds	r3, r7, r3
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b7f      	cmp	r3, #127	; 0x7f
 800e5ce:	d908      	bls.n	800e5e2 <predefined_get_cgi_processor+0x15e>
 800e5d0:	2325      	movs	r3, #37	; 0x25
 800e5d2:	18fb      	adds	r3, r7, r3
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	2b7f      	cmp	r3, #127	; 0x7f
 800e5d8:	d903      	bls.n	800e5e2 <predefined_get_cgi_processor+0x15e>
 800e5da:	2327      	movs	r3, #39	; 0x27
 800e5dc:	18fb      	adds	r3, r7, r3
 800e5de:	2200      	movs	r2, #0
 800e5e0:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 800e5e2:	2327      	movs	r3, #39	; 0x27
 800e5e4:	18fb      	adds	r3, r7, r3
 800e5e6:	781b      	ldrb	r3, [r3, #0]
}
 800e5e8:	0018      	movs	r0, r3
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	b00a      	add	sp, #40	; 0x28
 800e5ee:	bdb0      	pop	{r4, r5, r7, pc}
 800e5f0:	08025758 	.word	0x08025758
 800e5f4:	08025764 	.word	0x08025764
 800e5f8:	08025774 	.word	0x08025774
 800e5fc:	08025784 	.word	0x08025784

0800e600 <predefined_set_cgi_processor>:

uint8_t predefined_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 800e600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e602:	46c6      	mov	lr, r8
 800e604:	b500      	push	{lr}
 800e606:	4cee      	ldr	r4, [pc, #952]	; (800e9c0 <predefined_set_cgi_processor+0x3c0>)
 800e608:	44a5      	add	sp, r4
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e60e:	62b9      	str	r1, [r7, #40]	; 0x28
 800e610:	627a      	str	r2, [r7, #36]	; 0x24
 800e612:	623b      	str	r3, [r7, #32]
	uint8_t ret = 1;	// ret = '1' means 'uri_name' matched
 800e614:	4beb      	ldr	r3, [pc, #940]	; (800e9c4 <predefined_set_cgi_processor+0x3c4>)
 800e616:	2118      	movs	r1, #24
 800e618:	185b      	adds	r3, r3, r1
 800e61a:	2208      	movs	r2, #8
 800e61c:	4694      	mov	ip, r2
 800e61e:	44bc      	add	ip, r7
 800e620:	4463      	add	r3, ip
 800e622:	2201      	movs	r2, #1
 800e624:	701a      	strb	r2, [r3, #0]
	uint8_t val = 0;
 800e626:	4be8      	ldr	r3, [pc, #928]	; (800e9c8 <predefined_set_cgi_processor+0x3c8>)
 800e628:	185b      	adds	r3, r3, r1
 800e62a:	2208      	movs	r2, #8
 800e62c:	4694      	mov	ip, r2
 800e62e:	44bc      	add	ip, r7
 800e630:	4463      	add	r3, ip
 800e632:	2200      	movs	r2, #0
 800e634:	701a      	strb	r2, [r3, #0]
	uint32_t crc;
	uint32_t crc_calc;
	uint64_t data;
	int index;
	int totalSize = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	4ae4      	ldr	r2, [pc, #912]	; (800e9cc <predefined_set_cgi_processor+0x3cc>)
 800e63a:	0008      	movs	r0, r1
 800e63c:	1852      	adds	r2, r2, r1
 800e63e:	2108      	movs	r1, #8
 800e640:	1879      	adds	r1, r7, r1
 800e642:	1851      	adds	r1, r2, r1
 800e644:	600b      	str	r3, [r1, #0]
	int chunksize = 0;
 800e646:	2300      	movs	r3, #0
 800e648:	21ca      	movs	r1, #202	; 0xca
 800e64a:	00c9      	lsls	r1, r1, #3
 800e64c:	0004      	movs	r4, r0
 800e64e:	1809      	adds	r1, r1, r0
 800e650:	2208      	movs	r2, #8
 800e652:	18ba      	adds	r2, r7, r2
 800e654:	1888      	adds	r0, r1, r2
 800e656:	6003      	str	r3, [r0, #0]
	int br;
	uint8_t payload[512];
	char temp_str[1024];

	// Here we run the firmware.cgi receiving the data chosen in the file by the user on the browser
	if(strcmp((const char *)uri_name, "firmware.cgi") == 0)
 800e658:	4add      	ldr	r2, [pc, #884]	; (800e9d0 <predefined_set_cgi_processor+0x3d0>)
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	0011      	movs	r1, r2
 800e65e:	0018      	movs	r0, r3
 800e660:	f7f3 fd4e 	bl	8002100 <strcmp>
 800e664:	1e03      	subs	r3, r0, #0
 800e666:	d000      	beq.n	800e66a <predefined_set_cgi_processor+0x6a>
 800e668:	e263      	b.n	800eb32 <predefined_set_cgi_processor+0x532>
	{
		// We start by getting the BODY
		char  * full_string = strstr((char*)uri,(char*)"WebKitFormBoundary");
 800e66a:	4ada      	ldr	r2, [pc, #872]	; (800e9d4 <predefined_set_cgi_processor+0x3d4>)
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	0011      	movs	r1, r2
 800e670:	0018      	movs	r0, r3
 800e672:	f014 fb41 	bl	8022cf8 <strstr>
 800e676:	0003      	movs	r3, r0
 800e678:	26c8      	movs	r6, #200	; 0xc8
 800e67a:	00f6      	lsls	r6, r6, #3
 800e67c:	0022      	movs	r2, r4
 800e67e:	18b1      	adds	r1, r6, r2
 800e680:	2008      	movs	r0, #8
 800e682:	1838      	adds	r0, r7, r0
 800e684:	1808      	adds	r0, r1, r0
 800e686:	6003      	str	r3, [r0, #0]
		// Ignore the "WebKitFormBoundary" part
		full_string = full_string + 36;
 800e688:	18b3      	adds	r3, r6, r2
 800e68a:	2108      	movs	r1, #8
 800e68c:	468c      	mov	ip, r1
 800e68e:	44bc      	add	ip, r7
 800e690:	4463      	add	r3, ip
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	3324      	adds	r3, #36	; 0x24
 800e696:	18b1      	adds	r1, r6, r2
 800e698:	2008      	movs	r0, #8
 800e69a:	1838      	adds	r0, r7, r0
 800e69c:	1808      	adds	r0, r1, r0
 800e69e:	6003      	str	r3, [r0, #0]
		extract((char*)full_string, (char*)"currentChunk_", (char*)"_totalSize_",temp_str);
 800e6a0:	2324      	movs	r3, #36	; 0x24
 800e6a2:	0010      	movs	r0, r2
 800e6a4:	189b      	adds	r3, r3, r2
 800e6a6:	2208      	movs	r2, #8
 800e6a8:	4694      	mov	ip, r2
 800e6aa:	44bc      	add	ip, r7
 800e6ac:	4463      	add	r3, ip
 800e6ae:	4aca      	ldr	r2, [pc, #808]	; (800e9d8 <predefined_set_cgi_processor+0x3d8>)
 800e6b0:	49ca      	ldr	r1, [pc, #808]	; (800e9dc <predefined_set_cgi_processor+0x3dc>)
 800e6b2:	0005      	movs	r5, r0
 800e6b4:	1834      	adds	r4, r6, r0
 800e6b6:	2008      	movs	r0, #8
 800e6b8:	1838      	adds	r0, r7, r0
 800e6ba:	1820      	adds	r0, r4, r0
 800e6bc:	6800      	ldr	r0, [r0, #0]
 800e6be:	f7ff fe9f 	bl	800e400 <extract>
		index = atoi(temp_str);
 800e6c2:	2324      	movs	r3, #36	; 0x24
 800e6c4:	0028      	movs	r0, r5
 800e6c6:	0004      	movs	r4, r0
 800e6c8:	181b      	adds	r3, r3, r0
 800e6ca:	2208      	movs	r2, #8
 800e6cc:	4694      	mov	ip, r2
 800e6ce:	44bc      	add	ip, r7
 800e6d0:	4463      	add	r3, ip
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	f013 fe88 	bl	80223e8 <atoi>
 800e6d8:	0003      	movs	r3, r0
 800e6da:	48c1      	ldr	r0, [pc, #772]	; (800e9e0 <predefined_set_cgi_processor+0x3e0>)
 800e6dc:	0022      	movs	r2, r4
 800e6de:	1881      	adds	r1, r0, r2
 800e6e0:	2008      	movs	r0, #8
 800e6e2:	1838      	adds	r0, r7, r0
 800e6e4:	1808      	adds	r0, r1, r0
 800e6e6:	6003      	str	r3, [r0, #0]
		extract((char*)full_string, (char*)"_totalSize_", (char*)"_endChunk",temp_str);
 800e6e8:	2324      	movs	r3, #36	; 0x24
 800e6ea:	0010      	movs	r0, r2
 800e6ec:	189b      	adds	r3, r3, r2
 800e6ee:	2208      	movs	r2, #8
 800e6f0:	4694      	mov	ip, r2
 800e6f2:	44bc      	add	ip, r7
 800e6f4:	4463      	add	r3, ip
 800e6f6:	4abb      	ldr	r2, [pc, #748]	; (800e9e4 <predefined_set_cgi_processor+0x3e4>)
 800e6f8:	49b7      	ldr	r1, [pc, #732]	; (800e9d8 <predefined_set_cgi_processor+0x3d8>)
 800e6fa:	0005      	movs	r5, r0
 800e6fc:	1834      	adds	r4, r6, r0
 800e6fe:	2008      	movs	r0, #8
 800e700:	1838      	adds	r0, r7, r0
 800e702:	1826      	adds	r6, r4, r0
 800e704:	6830      	ldr	r0, [r6, #0]
 800e706:	f7ff fe7b 	bl	800e400 <extract>
		totalSize = atoi(temp_str);
 800e70a:	2324      	movs	r3, #36	; 0x24
 800e70c:	002e      	movs	r6, r5
 800e70e:	199b      	adds	r3, r3, r6
 800e710:	2208      	movs	r2, #8
 800e712:	4694      	mov	ip, r2
 800e714:	44bc      	add	ip, r7
 800e716:	4463      	add	r3, ip
 800e718:	0018      	movs	r0, r3
 800e71a:	f013 fe65 	bl	80223e8 <atoi>
 800e71e:	0003      	movs	r3, r0
 800e720:	4aaa      	ldr	r2, [pc, #680]	; (800e9cc <predefined_set_cgi_processor+0x3cc>)
 800e722:	0031      	movs	r1, r6
 800e724:	1850      	adds	r0, r2, r1
 800e726:	2408      	movs	r4, #8
 800e728:	193c      	adds	r4, r7, r4
 800e72a:	1906      	adds	r6, r0, r4
 800e72c:	6033      	str	r3, [r6, #0]
		chunksize = totalSize - 512*index;
 800e72e:	48ac      	ldr	r0, [pc, #688]	; (800e9e0 <predefined_set_cgi_processor+0x3e0>)
 800e730:	1843      	adds	r3, r0, r1
 800e732:	2008      	movs	r0, #8
 800e734:	4684      	mov	ip, r0
 800e736:	44bc      	add	ip, r7
 800e738:	4463      	add	r3, ip
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	025b      	lsls	r3, r3, #9
 800e73e:	0008      	movs	r0, r1
 800e740:	1812      	adds	r2, r2, r0
 800e742:	2108      	movs	r1, #8
 800e744:	468c      	mov	ip, r1
 800e746:	44bc      	add	ip, r7
 800e748:	4462      	add	r2, ip
 800e74a:	6812      	ldr	r2, [r2, #0]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	21ca      	movs	r1, #202	; 0xca
 800e750:	00c9      	lsls	r1, r1, #3
 800e752:	180a      	adds	r2, r1, r0
 800e754:	2408      	movs	r4, #8
 800e756:	46a4      	mov	ip, r4
 800e758:	44bc      	add	ip, r7
 800e75a:	4462      	add	r2, ip
 800e75c:	6013      	str	r3, [r2, #0]
		if(chunksize > 512) chunksize = 512;
 800e75e:	180b      	adds	r3, r1, r0
 800e760:	2208      	movs	r2, #8
 800e762:	4694      	mov	ip, r2
 800e764:	44bc      	add	ip, r7
 800e766:	4463      	add	r3, ip
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	2380      	movs	r3, #128	; 0x80
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	429a      	cmp	r2, r3
 800e770:	dd07      	ble.n	800e782 <predefined_set_cgi_processor+0x182>
 800e772:	2380      	movs	r3, #128	; 0x80
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	180a      	adds	r2, r1, r0
 800e778:	2108      	movs	r1, #8
 800e77a:	468c      	mov	ip, r1
 800e77c:	44bc      	add	ip, r7
 800e77e:	4462      	add	r2, ip
 800e780:	6013      	str	r3, [r2, #0]
		extract(full_string, "crc32\"\r\n\r\n", "\r\n------WebKitFormBoundary",temp_str);
 800e782:	2624      	movs	r6, #36	; 0x24
 800e784:	2418      	movs	r4, #24
 800e786:	1933      	adds	r3, r6, r4
 800e788:	2208      	movs	r2, #8
 800e78a:	4694      	mov	ip, r2
 800e78c:	44bc      	add	ip, r7
 800e78e:	4463      	add	r3, ip
 800e790:	4a95      	ldr	r2, [pc, #596]	; (800e9e8 <predefined_set_cgi_processor+0x3e8>)
 800e792:	4996      	ldr	r1, [pc, #600]	; (800e9ec <predefined_set_cgi_processor+0x3ec>)
 800e794:	20c8      	movs	r0, #200	; 0xc8
 800e796:	00c0      	lsls	r0, r0, #3
 800e798:	1900      	adds	r0, r0, r4
 800e79a:	2508      	movs	r5, #8
 800e79c:	46ac      	mov	ip, r5
 800e79e:	44bc      	add	ip, r7
 800e7a0:	4460      	add	r0, ip
 800e7a2:	6800      	ldr	r0, [r0, #0]
 800e7a4:	f7ff fe2c 	bl	800e400 <extract>
		crc = strtoI(temp_str);
 800e7a8:	0021      	movs	r1, r4
 800e7aa:	000c      	movs	r4, r1
 800e7ac:	1873      	adds	r3, r6, r1
 800e7ae:	2208      	movs	r2, #8
 800e7b0:	4694      	mov	ip, r2
 800e7b2:	44bc      	add	ip, r7
 800e7b4:	4463      	add	r3, ip
 800e7b6:	0018      	movs	r0, r3
 800e7b8:	f7ff fd3e 	bl	800e238 <strtoI>
 800e7bc:	0003      	movs	r3, r0
 800e7be:	22c7      	movs	r2, #199	; 0xc7
 800e7c0:	00d2      	lsls	r2, r2, #3
 800e7c2:	0021      	movs	r1, r4
 800e7c4:	1852      	adds	r2, r2, r1
 800e7c6:	2008      	movs	r0, #8
 800e7c8:	4684      	mov	ip, r0
 800e7ca:	44bc      	add	ip, r7
 800e7cc:	4462      	add	r2, ip
 800e7ce:	6013      	str	r3, [r2, #0]
		extract(full_string, "fileChunk\"\r\n\r\n", "\r\n------WebKitFormBoundary",temp_str);
 800e7d0:	000c      	movs	r4, r1
 800e7d2:	1873      	adds	r3, r6, r1
 800e7d4:	2208      	movs	r2, #8
 800e7d6:	4694      	mov	ip, r2
 800e7d8:	44bc      	add	ip, r7
 800e7da:	4463      	add	r3, ip
 800e7dc:	4a82      	ldr	r2, [pc, #520]	; (800e9e8 <predefined_set_cgi_processor+0x3e8>)
 800e7de:	4984      	ldr	r1, [pc, #528]	; (800e9f0 <predefined_set_cgi_processor+0x3f0>)
 800e7e0:	20c8      	movs	r0, #200	; 0xc8
 800e7e2:	00c0      	lsls	r0, r0, #3
 800e7e4:	0026      	movs	r6, r4
 800e7e6:	1980      	adds	r0, r0, r6
 800e7e8:	2408      	movs	r4, #8
 800e7ea:	46a4      	mov	ip, r4
 800e7ec:	44bc      	add	ip, r7
 800e7ee:	4460      	add	r0, ip
 800e7f0:	6800      	ldr	r0, [r0, #0]
 800e7f2:	f7ff fe05 	bl	800e400 <extract>
		if(!temp_str[0])
 800e7f6:	4b7f      	ldr	r3, [pc, #508]	; (800e9f4 <predefined_set_cgi_processor+0x3f4>)
 800e7f8:	22cb      	movs	r2, #203	; 0xcb
 800e7fa:	00d2      	lsls	r2, r2, #3
 800e7fc:	189b      	adds	r3, r3, r2
 800e7fe:	2218      	movs	r2, #24
 800e800:	4694      	mov	ip, r2
 800e802:	2208      	movs	r2, #8
 800e804:	4690      	mov	r8, r2
 800e806:	44b8      	add	r8, r7
 800e808:	44c4      	add	ip, r8
 800e80a:	4463      	add	r3, ip
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d101      	bne.n	800e816 <predefined_set_cgi_processor+0x216>
			return 0;
 800e812:	2300      	movs	r3, #0
 800e814:	e1f2      	b.n	800ebfc <predefined_set_cgi_processor+0x5fc>
		base64_decode(temp_str, payload, &br);
 800e816:	4e78      	ldr	r6, [pc, #480]	; (800e9f8 <predefined_set_cgi_processor+0x3f8>)
 800e818:	2418      	movs	r4, #24
 800e81a:	1933      	adds	r3, r6, r4
 800e81c:	2208      	movs	r2, #8
 800e81e:	18ba      	adds	r2, r7, r2
 800e820:	189a      	adds	r2, r3, r2
 800e822:	4b76      	ldr	r3, [pc, #472]	; (800e9fc <predefined_set_cgi_processor+0x3fc>)
 800e824:	191b      	adds	r3, r3, r4
 800e826:	2108      	movs	r1, #8
 800e828:	1879      	adds	r1, r7, r1
 800e82a:	1859      	adds	r1, r3, r1
 800e82c:	2324      	movs	r3, #36	; 0x24
 800e82e:	191b      	adds	r3, r3, r4
 800e830:	2008      	movs	r0, #8
 800e832:	4684      	mov	ip, r0
 800e834:	44bc      	add	ip, r7
 800e836:	4463      	add	r3, ip
 800e838:	0018      	movs	r0, r3
 800e83a:	f7ff fd1b 	bl	800e274 <base64_decode>
		//TODO: CALCULATE CRC32 FOR EACH CHUNK before
		if(br != chunksize)
 800e83e:	0021      	movs	r1, r4
 800e840:	1873      	adds	r3, r6, r1
 800e842:	2208      	movs	r2, #8
 800e844:	4694      	mov	ip, r2
 800e846:	44bc      	add	ip, r7
 800e848:	4463      	add	r3, ip
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	22ca      	movs	r2, #202	; 0xca
 800e84e:	00d2      	lsls	r2, r2, #3
 800e850:	1852      	adds	r2, r2, r1
 800e852:	2108      	movs	r1, #8
 800e854:	468c      	mov	ip, r1
 800e856:	44bc      	add	ip, r7
 800e858:	4462      	add	r2, ip
 800e85a:	6812      	ldr	r2, [r2, #0]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d001      	beq.n	800e864 <predefined_set_cgi_processor+0x264>
			return 0;
 800e860:	2300      	movs	r3, #0
 800e862:	e1cb      	b.n	800ebfc <predefined_set_cgi_processor+0x5fc>
		crc_calc = crc32((uint8_t*)payload,chunksize);
 800e864:	23ca      	movs	r3, #202	; 0xca
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	2418      	movs	r4, #24
 800e86a:	191b      	adds	r3, r3, r4
 800e86c:	2208      	movs	r2, #8
 800e86e:	4694      	mov	ip, r2
 800e870:	44bc      	add	ip, r7
 800e872:	4463      	add	r3, ip
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	4b61      	ldr	r3, [pc, #388]	; (800e9fc <predefined_set_cgi_processor+0x3fc>)
 800e878:	191b      	adds	r3, r3, r4
 800e87a:	2108      	movs	r1, #8
 800e87c:	468c      	mov	ip, r1
 800e87e:	44bc      	add	ip, r7
 800e880:	4463      	add	r3, ip
 800e882:	0011      	movs	r1, r2
 800e884:	0018      	movs	r0, r3
 800e886:	f000 fb2f 	bl	800eee8 <crc32>
 800e88a:	0003      	movs	r3, r0
 800e88c:	495c      	ldr	r1, [pc, #368]	; (800ea00 <predefined_set_cgi_processor+0x400>)
 800e88e:	0020      	movs	r0, r4
 800e890:	180a      	adds	r2, r1, r0
 800e892:	2408      	movs	r4, #8
 800e894:	46a4      	mov	ip, r4
 800e896:	44bc      	add	ip, r7
 800e898:	4462      	add	r2, ip
 800e89a:	6013      	str	r3, [r2, #0]
		if(crc != crc_calc)
 800e89c:	23c7      	movs	r3, #199	; 0xc7
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	181b      	adds	r3, r3, r0
 800e8a2:	2208      	movs	r2, #8
 800e8a4:	4694      	mov	ip, r2
 800e8a6:	44bc      	add	ip, r7
 800e8a8:	4463      	add	r3, ip
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	180b      	adds	r3, r1, r0
 800e8ae:	2108      	movs	r1, #8
 800e8b0:	468c      	mov	ip, r1
 800e8b2:	44bc      	add	ip, r7
 800e8b4:	4463      	add	r3, ip
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d001      	beq.n	800e8c0 <predefined_set_cgi_processor+0x2c0>
			return 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	e19d      	b.n	800ebfc <predefined_set_cgi_processor+0x5fc>
		uint32_t PageError = 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	643b      	str	r3, [r7, #64]	; 0x40
		FLASH_EraseInitTypeDef EraseInitStruct = {0};
 800e8c4:	4b4f      	ldr	r3, [pc, #316]	; (800ea04 <predefined_set_cgi_processor+0x404>)
 800e8c6:	26cb      	movs	r6, #203	; 0xcb
 800e8c8:	00f6      	lsls	r6, r6, #3
 800e8ca:	199b      	adds	r3, r3, r6
 800e8cc:	2218      	movs	r2, #24
 800e8ce:	4694      	mov	ip, r2
 800e8d0:	2208      	movs	r2, #8
 800e8d2:	4690      	mov	r8, r2
 800e8d4:	44b8      	add	r8, r7
 800e8d6:	44c4      	add	ip, r8
 800e8d8:	4463      	add	r3, ip
 800e8da:	0018      	movs	r0, r3
 800e8dc:	2310      	movs	r3, #16
 800e8de:	001a      	movs	r2, r3
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	f014 f959 	bl	8022b98 <memset>
		HAL_FLASH_Unlock();
 800e8e6:	f002 f877 	bl	80109d8 <HAL_FLASH_Unlock>
		EraseInitStruct.Banks = FLASH_BANK_2;
 800e8ea:	4b46      	ldr	r3, [pc, #280]	; (800ea04 <predefined_set_cgi_processor+0x404>)
 800e8ec:	0031      	movs	r1, r6
 800e8ee:	185b      	adds	r3, r3, r1
 800e8f0:	2218      	movs	r2, #24
 800e8f2:	4694      	mov	ip, r2
 800e8f4:	2208      	movs	r2, #8
 800e8f6:	4690      	mov	r8, r2
 800e8f8:	44b8      	add	r8, r7
 800e8fa:	44c4      	add	ip, r8
 800e8fc:	4463      	add	r3, ip
 800e8fe:	2280      	movs	r2, #128	; 0x80
 800e900:	0212      	lsls	r2, r2, #8
 800e902:	605a      	str	r2, [r3, #4]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_MASS;
 800e904:	4b3f      	ldr	r3, [pc, #252]	; (800ea04 <predefined_set_cgi_processor+0x404>)
 800e906:	185b      	adds	r3, r3, r1
 800e908:	2218      	movs	r2, #24
 800e90a:	4694      	mov	ip, r2
 800e90c:	2208      	movs	r2, #8
 800e90e:	4690      	mov	r8, r2
 800e910:	44b8      	add	r8, r7
 800e912:	44c4      	add	ip, r8
 800e914:	4463      	add	r3, ip
 800e916:	2204      	movs	r2, #4
 800e918:	601a      	str	r2, [r3, #0]

		if(index == 0){
 800e91a:	4b31      	ldr	r3, [pc, #196]	; (800e9e0 <predefined_set_cgi_processor+0x3e0>)
 800e91c:	2118      	movs	r1, #24
 800e91e:	185b      	adds	r3, r3, r1
 800e920:	2208      	movs	r2, #8
 800e922:	4694      	mov	ip, r2
 800e924:	44bc      	add	ip, r7
 800e926:	4463      	add	r3, ip
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d13d      	bne.n	800e9aa <predefined_set_cgi_processor+0x3aa>
			HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800e92e:	2320      	movs	r3, #32
 800e930:	185b      	adds	r3, r3, r1
 800e932:	2208      	movs	r2, #8
 800e934:	18ba      	adds	r2, r7, r2
 800e936:	189a      	adds	r2, r3, r2
 800e938:	2310      	movs	r3, #16
 800e93a:	000e      	movs	r6, r1
 800e93c:	185b      	adds	r3, r3, r1
 800e93e:	2108      	movs	r1, #8
 800e940:	468c      	mov	ip, r1
 800e942:	44bc      	add	ip, r7
 800e944:	4463      	add	r3, ip
 800e946:	0011      	movs	r1, r2
 800e948:	0018      	movs	r0, r3
 800e94a:	f002 f8f9 	bl	8010b40 <HAL_FLASHEx_Erase>
			data = ((uint64_t)totalSize<<32)|0x1234ABCD;
 800e94e:	4b1f      	ldr	r3, [pc, #124]	; (800e9cc <predefined_set_cgi_processor+0x3cc>)
 800e950:	0031      	movs	r1, r6
 800e952:	185b      	adds	r3, r3, r1
 800e954:	2208      	movs	r2, #8
 800e956:	4694      	mov	ip, r2
 800e958:	44bc      	add	ip, r7
 800e95a:	4463      	add	r3, ip
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	61bb      	str	r3, [r7, #24]
 800e960:	17db      	asrs	r3, r3, #31
 800e962:	61fb      	str	r3, [r7, #28]
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	001b      	movs	r3, r3
 800e968:	607b      	str	r3, [r7, #4]
 800e96a:	2300      	movs	r3, #0
 800e96c:	603b      	str	r3, [r7, #0]
 800e96e:	4b26      	ldr	r3, [pc, #152]	; (800ea08 <predefined_set_cgi_processor+0x408>)
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	4313      	orrs	r3, r2
 800e974:	613b      	str	r3, [r7, #16]
 800e976:	2300      	movs	r3, #0
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	617b      	str	r3, [r7, #20]
 800e97e:	22c5      	movs	r2, #197	; 0xc5
 800e980:	00d2      	lsls	r2, r2, #3
 800e982:	0008      	movs	r0, r1
 800e984:	1853      	adds	r3, r2, r1
 800e986:	2108      	movs	r1, #8
 800e988:	1879      	adds	r1, r7, r1
 800e98a:	1859      	adds	r1, r3, r1
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	697c      	ldr	r4, [r7, #20]
 800e990:	600b      	str	r3, [r1, #0]
 800e992:	604c      	str	r4, [r1, #4]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, META_ADDRESS, data);
 800e994:	1813      	adds	r3, r2, r0
 800e996:	2208      	movs	r2, #8
 800e998:	4694      	mov	ip, r2
 800e99a:	44bc      	add	ip, r7
 800e99c:	4463      	add	r3, ip
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	491a      	ldr	r1, [pc, #104]	; (800ea0c <predefined_set_cgi_processor+0x40c>)
 800e9a4:	2001      	movs	r0, #1
 800e9a6:	f001 ffc9 	bl	801093c <HAL_FLASH_Program>
		}
		for(int i = 0 ; i < 512 ; i += 8){
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	4a18      	ldr	r2, [pc, #96]	; (800ea10 <predefined_set_cgi_processor+0x410>)
 800e9ae:	2118      	movs	r1, #24
 800e9b0:	1852      	adds	r2, r2, r1
 800e9b2:	2108      	movs	r1, #8
 800e9b4:	468c      	mov	ip, r1
 800e9b6:	44bc      	add	ip, r7
 800e9b8:	4462      	add	r2, ip
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	e070      	b.n	800eaa0 <predefined_set_cgi_processor+0x4a0>
 800e9be:	46c0      	nop			; (mov r8, r8)
 800e9c0:	fffff988 	.word	0xfffff988
 800e9c4:	00000657 	.word	0x00000657
 800e9c8:	0000064b 	.word	0x0000064b
 800e9cc:	00000644 	.word	0x00000644
 800e9d0:	08025794 	.word	0x08025794
 800e9d4:	080257a4 	.word	0x080257a4
 800e9d8:	080257b8 	.word	0x080257b8
 800e9dc:	080257c4 	.word	0x080257c4
 800e9e0:	0000063c 	.word	0x0000063c
 800e9e4:	080257d4 	.word	0x080257d4
 800e9e8:	080257e0 	.word	0x080257e0
 800e9ec:	080257fc 	.word	0x080257fc
 800e9f0:	08025808 	.word	0x08025808
 800e9f4:	fffff9cc 	.word	0xfffff9cc
 800e9f8:	00000624 	.word	0x00000624
 800e9fc:	00000424 	.word	0x00000424
 800ea00:	00000634 	.word	0x00000634
 800ea04:	fffff9b8 	.word	0xfffff9b8
 800ea08:	1234abcd 	.word	0x1234abcd
 800ea0c:	08040000 	.word	0x08040000
 800ea10:	0000064c 	.word	0x0000064c
			memcpy(&data, payload + i, 8);
 800ea14:	4c7d      	ldr	r4, [pc, #500]	; (800ec0c <predefined_set_cgi_processor+0x60c>)
 800ea16:	2618      	movs	r6, #24
 800ea18:	19a3      	adds	r3, r4, r6
 800ea1a:	2208      	movs	r2, #8
 800ea1c:	4694      	mov	ip, r2
 800ea1e:	44bc      	add	ip, r7
 800ea20:	4463      	add	r3, ip
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a7a      	ldr	r2, [pc, #488]	; (800ec10 <predefined_set_cgi_processor+0x610>)
 800ea26:	1992      	adds	r2, r2, r6
 800ea28:	2108      	movs	r1, #8
 800ea2a:	468c      	mov	ip, r1
 800ea2c:	44bc      	add	ip, r7
 800ea2e:	4462      	add	r2, ip
 800ea30:	18d1      	adds	r1, r2, r3
 800ea32:	25c5      	movs	r5, #197	; 0xc5
 800ea34:	00ed      	lsls	r5, r5, #3
 800ea36:	19ab      	adds	r3, r5, r6
 800ea38:	2208      	movs	r2, #8
 800ea3a:	4694      	mov	ip, r2
 800ea3c:	44bc      	add	ip, r7
 800ea3e:	4463      	add	r3, ip
 800ea40:	2208      	movs	r2, #8
 800ea42:	0018      	movs	r0, r3
 800ea44:	f014 ff90 	bl	8023968 <memcpy>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, APPLICATION_ADDRESS + index*512 + i, data);
 800ea48:	4b72      	ldr	r3, [pc, #456]	; (800ec14 <predefined_set_cgi_processor+0x614>)
 800ea4a:	0030      	movs	r0, r6
 800ea4c:	181b      	adds	r3, r3, r0
 800ea4e:	2208      	movs	r2, #8
 800ea50:	4694      	mov	ip, r2
 800ea52:	44bc      	add	ip, r7
 800ea54:	4463      	add	r3, ip
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	025b      	lsls	r3, r3, #9
 800ea5a:	001a      	movs	r2, r3
 800ea5c:	1823      	adds	r3, r4, r0
 800ea5e:	2108      	movs	r1, #8
 800ea60:	468c      	mov	ip, r1
 800ea62:	44bc      	add	ip, r7
 800ea64:	4463      	add	r3, ip
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	18d3      	adds	r3, r2, r3
 800ea6a:	4a6b      	ldr	r2, [pc, #428]	; (800ec18 <predefined_set_cgi_processor+0x618>)
 800ea6c:	1899      	adds	r1, r3, r2
 800ea6e:	0006      	movs	r6, r0
 800ea70:	182b      	adds	r3, r5, r0
 800ea72:	2208      	movs	r2, #8
 800ea74:	4694      	mov	ip, r2
 800ea76:	44bc      	add	ip, r7
 800ea78:	4463      	add	r3, ip
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	2001      	movs	r0, #1
 800ea80:	f001 ff5c 	bl	801093c <HAL_FLASH_Program>
		for(int i = 0 ; i < 512 ; i += 8){
 800ea84:	0030      	movs	r0, r6
 800ea86:	1823      	adds	r3, r4, r0
 800ea88:	2208      	movs	r2, #8
 800ea8a:	4694      	mov	ip, r2
 800ea8c:	44bc      	add	ip, r7
 800ea8e:	4463      	add	r3, ip
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3308      	adds	r3, #8
 800ea94:	1822      	adds	r2, r4, r0
 800ea96:	2108      	movs	r1, #8
 800ea98:	468c      	mov	ip, r1
 800ea9a:	44bc      	add	ip, r7
 800ea9c:	4462      	add	r2, ip
 800ea9e:	6013      	str	r3, [r2, #0]
 800eaa0:	4b5a      	ldr	r3, [pc, #360]	; (800ec0c <predefined_set_cgi_processor+0x60c>)
 800eaa2:	2418      	movs	r4, #24
 800eaa4:	191b      	adds	r3, r3, r4
 800eaa6:	2208      	movs	r2, #8
 800eaa8:	4694      	mov	ip, r2
 800eaaa:	44bc      	add	ip, r7
 800eaac:	4463      	add	r3, ip
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	2380      	movs	r3, #128	; 0x80
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	429a      	cmp	r2, r3
 800eab6:	dbad      	blt.n	800ea14 <predefined_set_cgi_processor+0x414>
		}
		if((index+1)*512 >= totalSize)
 800eab8:	4b56      	ldr	r3, [pc, #344]	; (800ec14 <predefined_set_cgi_processor+0x614>)
 800eaba:	191b      	adds	r3, r3, r4
 800eabc:	2208      	movs	r2, #8
 800eabe:	4694      	mov	ip, r2
 800eac0:	44bc      	add	ip, r7
 800eac2:	4463      	add	r3, ip
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	3301      	adds	r3, #1
 800eac8:	025b      	lsls	r3, r3, #9
 800eaca:	4954      	ldr	r1, [pc, #336]	; (800ec1c <predefined_set_cgi_processor+0x61c>)
 800eacc:	190a      	adds	r2, r1, r4
 800eace:	2008      	movs	r0, #8
 800ead0:	4684      	mov	ip, r0
 800ead2:	44bc      	add	ip, r7
 800ead4:	4462      	add	r2, ip
 800ead6:	6812      	ldr	r2, [r2, #0]
 800ead8:	429a      	cmp	r2, r3
 800eada:	dc27      	bgt.n	800eb2c <predefined_set_cgi_processor+0x52c>
		{
			data = crc32((uint8_t*)APPLICATION_ADDRESS, totalSize);
 800eadc:	190b      	adds	r3, r1, r4
 800eade:	2208      	movs	r2, #8
 800eae0:	4694      	mov	ip, r2
 800eae2:	44bc      	add	ip, r7
 800eae4:	4463      	add	r3, ip
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a4b      	ldr	r2, [pc, #300]	; (800ec18 <predefined_set_cgi_processor+0x618>)
 800eaea:	0019      	movs	r1, r3
 800eaec:	0010      	movs	r0, r2
 800eaee:	f000 f9fb 	bl	800eee8 <crc32>
 800eaf2:	0003      	movs	r3, r0
 800eaf4:	60bb      	str	r3, [r7, #8]
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	22c5      	movs	r2, #197	; 0xc5
 800eafc:	00d2      	lsls	r2, r2, #3
 800eafe:	0020      	movs	r0, r4
 800eb00:	1813      	adds	r3, r2, r0
 800eb02:	2108      	movs	r1, #8
 800eb04:	1879      	adds	r1, r7, r1
 800eb06:	1859      	adds	r1, r3, r1
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	68fc      	ldr	r4, [r7, #12]
 800eb0c:	600b      	str	r3, [r1, #0]
 800eb0e:	604c      	str	r4, [r1, #4]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, META_ADDRESS + 8, data);
 800eb10:	1813      	adds	r3, r2, r0
 800eb12:	2208      	movs	r2, #8
 800eb14:	4694      	mov	ip, r2
 800eb16:	44bc      	add	ip, r7
 800eb18:	4463      	add	r3, ip
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	4940      	ldr	r1, [pc, #256]	; (800ec20 <predefined_set_cgi_processor+0x620>)
 800eb20:	2001      	movs	r0, #1
 800eb22:	f001 ff0b 	bl	801093c <HAL_FLASH_Program>
			firmware_update = 1;
 800eb26:	4b3f      	ldr	r3, [pc, #252]	; (800ec24 <predefined_set_cgi_processor+0x624>)
 800eb28:	2201      	movs	r2, #1
 800eb2a:	701a      	strb	r2, [r3, #0]
		}
		HAL_FLASH_Lock();
 800eb2c:	f001 ff78 	bl	8010a20 <HAL_FLASH_Lock>
 800eb30:	e05c      	b.n	800ebec <predefined_set_cgi_processor+0x5ec>
	}
	else if(strcmp((const char *)uri_name, "todo.cgi") == 0)
 800eb32:	4a3d      	ldr	r2, [pc, #244]	; (800ec28 <predefined_set_cgi_processor+0x628>)
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	0011      	movs	r1, r2
 800eb38:	0018      	movs	r0, r3
 800eb3a:	f7f3 fae1 	bl	8002100 <strcmp>
 800eb3e:	1e03      	subs	r3, r0, #0
 800eb40:	d054      	beq.n	800ebec <predefined_set_cgi_processor+0x5ec>
		// to do
		;//val = todo(uri);
		//*len = sprintf((char *)buf, "%d", val);
	}
	// Digital I/O; dio_s, dio_d
	else if(strcmp((const char *)uri_name, "set_diodir.cgi") == 0)
 800eb42:	4a3a      	ldr	r2, [pc, #232]	; (800ec2c <predefined_set_cgi_processor+0x62c>)
 800eb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb46:	0011      	movs	r1, r2
 800eb48:	0018      	movs	r0, r3
 800eb4a:	f7f3 fad9 	bl	8002100 <strcmp>
 800eb4e:	1e03      	subs	r3, r0, #0
 800eb50:	d11d      	bne.n	800eb8e <predefined_set_cgi_processor+0x58e>
	{
		val = set_diodir(uri);
 800eb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb54:	0018      	movs	r0, r3
 800eb56:	f000 f95b 	bl	800ee10 <set_diodir>
 800eb5a:	0003      	movs	r3, r0
 800eb5c:	001a      	movs	r2, r3
 800eb5e:	4934      	ldr	r1, [pc, #208]	; (800ec30 <predefined_set_cgi_processor+0x630>)
 800eb60:	2018      	movs	r0, #24
 800eb62:	180b      	adds	r3, r1, r0
 800eb64:	2408      	movs	r4, #8
 800eb66:	46a4      	mov	ip, r4
 800eb68:	44bc      	add	ip, r7
 800eb6a:	4463      	add	r3, ip
 800eb6c:	701a      	strb	r2, [r3, #0]
		*len = sprintf((char *)buf, "%d", val);
 800eb6e:	180b      	adds	r3, r1, r0
 800eb70:	2208      	movs	r2, #8
 800eb72:	4694      	mov	ip, r2
 800eb74:	44bc      	add	ip, r7
 800eb76:	4463      	add	r3, ip
 800eb78:	781a      	ldrb	r2, [r3, #0]
 800eb7a:	492e      	ldr	r1, [pc, #184]	; (800ec34 <predefined_set_cgi_processor+0x634>)
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7e:	0018      	movs	r0, r3
 800eb80:	f013 fef6 	bl	8022970 <siprintf>
 800eb84:	0003      	movs	r3, r0
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	6a3b      	ldr	r3, [r7, #32]
 800eb8a:	801a      	strh	r2, [r3, #0]
 800eb8c:	e02e      	b.n	800ebec <predefined_set_cgi_processor+0x5ec>
	}
	else if(strcmp((const char *)uri_name, "set_diostate.cgi") == 0)
 800eb8e:	4a2a      	ldr	r2, [pc, #168]	; (800ec38 <predefined_set_cgi_processor+0x638>)
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	0011      	movs	r1, r2
 800eb94:	0018      	movs	r0, r3
 800eb96:	f7f3 fab3 	bl	8002100 <strcmp>
 800eb9a:	1e03      	subs	r3, r0, #0
 800eb9c:	d11d      	bne.n	800ebda <predefined_set_cgi_processor+0x5da>
	{
		val = set_diostate(uri);
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	0018      	movs	r0, r3
 800eba2:	f000 f96b 	bl	800ee7c <set_diostate>
 800eba6:	0003      	movs	r3, r0
 800eba8:	001a      	movs	r2, r3
 800ebaa:	4921      	ldr	r1, [pc, #132]	; (800ec30 <predefined_set_cgi_processor+0x630>)
 800ebac:	2018      	movs	r0, #24
 800ebae:	180b      	adds	r3, r1, r0
 800ebb0:	2408      	movs	r4, #8
 800ebb2:	46a4      	mov	ip, r4
 800ebb4:	44bc      	add	ip, r7
 800ebb6:	4463      	add	r3, ip
 800ebb8:	701a      	strb	r2, [r3, #0]
		*len = sprintf((char *)buf, "%d", val);
 800ebba:	180b      	adds	r3, r1, r0
 800ebbc:	2208      	movs	r2, #8
 800ebbe:	4694      	mov	ip, r2
 800ebc0:	44bc      	add	ip, r7
 800ebc2:	4463      	add	r3, ip
 800ebc4:	781a      	ldrb	r2, [r3, #0]
 800ebc6:	491b      	ldr	r1, [pc, #108]	; (800ec34 <predefined_set_cgi_processor+0x634>)
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	0018      	movs	r0, r3
 800ebcc:	f013 fed0 	bl	8022970 <siprintf>
 800ebd0:	0003      	movs	r3, r0
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	6a3b      	ldr	r3, [r7, #32]
 800ebd6:	801a      	strh	r2, [r3, #0]
 800ebd8:	e008      	b.n	800ebec <predefined_set_cgi_processor+0x5ec>
	}
	else
	{
		ret = 0;
 800ebda:	4b18      	ldr	r3, [pc, #96]	; (800ec3c <predefined_set_cgi_processor+0x63c>)
 800ebdc:	2218      	movs	r2, #24
 800ebde:	189b      	adds	r3, r3, r2
 800ebe0:	2208      	movs	r2, #8
 800ebe2:	4694      	mov	ip, r2
 800ebe4:	44bc      	add	ip, r7
 800ebe6:	4463      	add	r3, ip
 800ebe8:	2200      	movs	r2, #0
 800ebea:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 800ebec:	4b13      	ldr	r3, [pc, #76]	; (800ec3c <predefined_set_cgi_processor+0x63c>)
 800ebee:	2218      	movs	r2, #24
 800ebf0:	189b      	adds	r3, r3, r2
 800ebf2:	2208      	movs	r2, #8
 800ebf4:	4694      	mov	ip, r2
 800ebf6:	44bc      	add	ip, r7
 800ebf8:	4463      	add	r3, ip
 800ebfa:	781b      	ldrb	r3, [r3, #0]
}
 800ebfc:	0018      	movs	r0, r3
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	23cf      	movs	r3, #207	; 0xcf
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	449d      	add	sp, r3
 800ec06:	bc80      	pop	{r7}
 800ec08:	46b8      	mov	r8, r7
 800ec0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec0c:	0000064c 	.word	0x0000064c
 800ec10:	00000424 	.word	0x00000424
 800ec14:	0000063c 	.word	0x0000063c
 800ec18:	08040800 	.word	0x08040800
 800ec1c:	00000644 	.word	0x00000644
 800ec20:	08040008 	.word	0x08040008
 800ec24:	20006d9c 	.word	0x20006d9c
 800ec28:	08025758 	.word	0x08025758
 800ec2c:	08025818 	.word	0x08025818
 800ec30:	0000064b 	.word	0x0000064b
 800ec34:	08025828 	.word	0x08025828
 800ec38:	0802582c 	.word	0x0802582c
 800ec3c:	00000657 	.word	0x00000657

0800ec40 <make_json_dio>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pre-defined Get CGI functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void make_json_dio(uint8_t * buf, uint16_t * len, uint8_t pin)
{
 800ec40:	b590      	push	{r4, r7, lr}
 800ec42:	b089      	sub	sp, #36	; 0x24
 800ec44:	af02      	add	r7, sp, #8
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	1dfb      	adds	r3, r7, #7
 800ec4c:	701a      	strb	r2, [r3, #0]
	uint8_t pin_state 	= 36;
 800ec4e:	2117      	movs	r1, #23
 800ec50:	187b      	adds	r3, r7, r1
 800ec52:	2224      	movs	r2, #36	; 0x24
 800ec54:	701a      	strb	r2, [r3, #0]
	uint8_t pin_dir 	= 1;
 800ec56:	2016      	movs	r0, #22
 800ec58:	183b      	adds	r3, r7, r0
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	701a      	strb	r2, [r3, #0]

	*len = sprintf((char *)buf, "DioCallback({\"dio_p\":\"%d\",\
 800ec5e:	1dfb      	adds	r3, r7, #7
 800ec60:	781a      	ldrb	r2, [r3, #0]
 800ec62:	187b      	adds	r3, r7, r1
 800ec64:	781c      	ldrb	r4, [r3, #0]
 800ec66:	183b      	adds	r3, r7, r0
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	4907      	ldr	r1, [pc, #28]	; (800ec88 <make_json_dio+0x48>)
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	9300      	str	r3, [sp, #0]
 800ec70:	0023      	movs	r3, r4
 800ec72:	f013 fe7d 	bl	8022970 <siprintf>
 800ec76:	0003      	movs	r3, r0
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	801a      	strh	r2, [r3, #0]
											});",
											pin,					// Digital io pin number
											pin_state,				// Digital io status
											pin_dir					// Digital io directions
											);
}
 800ec7e:	46c0      	nop			; (mov r8, r8)
 800ec80:	46bd      	mov	sp, r7
 800ec82:	b007      	add	sp, #28
 800ec84:	bd90      	pop	{r4, r7, pc}
 800ec86:	46c0      	nop			; (mov r8, r8)
 800ec88:	08025840 	.word	0x08025840

0800ec8c <make_json_ain>:

void make_json_ain(uint8_t * buf, uint16_t * len, uint8_t pin)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	1dfb      	adds	r3, r7, #7
 800ec98:	701a      	strb	r2, [r3, #0]
	*len = sprintf((char *)buf, "AinCallback({\"ain_p\":\"%d\",\
 800ec9a:	1dfb      	adds	r3, r7, #7
 800ec9c:	781a      	ldrb	r2, [r3, #0]
 800ec9e:	4906      	ldr	r1, [pc, #24]	; (800ecb8 <make_json_ain+0x2c>)
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	2343      	movs	r3, #67	; 0x43
 800eca4:	f013 fe64 	bl	8022970 <siprintf>
 800eca8:	0003      	movs	r3, r0
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	801a      	strh	r2, [r3, #0]
											\"ain_v\":\"%d\"\
											});",
											pin,					// ADC input pin number
											67		// ADC input value
											);
}
 800ecb0:	46c0      	nop			; (mov r8, r8)
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	b004      	add	sp, #16
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	08025898 	.word	0x08025898

0800ecbc <make_json_netinfo>:

void make_json_netinfo(uint8_t * buf, uint16_t * len)
{
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	46de      	mov	lr, fp
 800ecc0:	4657      	mov	r7, sl
 800ecc2:	464e      	mov	r6, r9
 800ecc4:	4645      	mov	r5, r8
 800ecc6:	b5e0      	push	{r5, r6, r7, lr}
 800ecc8:	b0ad      	sub	sp, #180	; 0xb4
 800ecca:	af16      	add	r7, sp, #88	; 0x58
 800eccc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ecce:	63b9      	str	r1, [r7, #56]	; 0x38
	wiz_NetInfo netinfo;
	ctlnetwork(CN_GET_NETINFO, (void*) &netinfo);
 800ecd0:	2408      	movs	r4, #8
 800ecd2:	2538      	movs	r5, #56	; 0x38
 800ecd4:	1963      	adds	r3, r4, r5
 800ecd6:	19db      	adds	r3, r3, r7
 800ecd8:	0019      	movs	r1, r3
 800ecda:	2001      	movs	r0, #1
 800ecdc:	f00d fc10 	bl	801c500 <ctlnetwork>
											\"gw\":\"%d.%d.%d.%d\",\
											\"sn\":\"%d.%d.%d.%d\",\
											\"dns\":\"%d.%d.%d.%d\",\
											\"dhcp\":\"%d\"\
											});",
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 800ece0:	0021      	movs	r1, r4
 800ece2:	0028      	movs	r0, r5
 800ece4:	180b      	adds	r3, r1, r0
 800ece6:	19db      	adds	r3, r3, r7
 800ece8:	781b      	ldrb	r3, [r3, #0]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ecea:	637b      	str	r3, [r7, #52]	; 0x34
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 800ecec:	180b      	adds	r3, r1, r0
 800ecee:	19db      	adds	r3, r3, r7
 800ecf0:	785b      	ldrb	r3, [r3, #1]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ecf2:	633b      	str	r3, [r7, #48]	; 0x30
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 800ecf4:	180b      	adds	r3, r1, r0
 800ecf6:	19db      	adds	r3, r3, r7
 800ecf8:	789b      	ldrb	r3, [r3, #2]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ecfa:	62fb      	str	r3, [r7, #44]	; 0x2c
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 800ecfc:	180b      	adds	r3, r1, r0
 800ecfe:	19db      	adds	r3, r3, r7
 800ed00:	78db      	ldrb	r3, [r3, #3]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed02:	62bb      	str	r3, [r7, #40]	; 0x28
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 800ed04:	180b      	adds	r3, r1, r0
 800ed06:	19db      	adds	r3, r3, r7
 800ed08:	791b      	ldrb	r3, [r3, #4]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed0a:	627b      	str	r3, [r7, #36]	; 0x24
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 800ed0c:	180b      	adds	r3, r1, r0
 800ed0e:	19db      	adds	r3, r3, r7
 800ed10:	795b      	ldrb	r3, [r3, #5]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed12:	623b      	str	r3, [r7, #32]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 800ed14:	180b      	adds	r3, r1, r0
 800ed16:	19db      	adds	r3, r3, r7
 800ed18:	799b      	ldrb	r3, [r3, #6]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed1a:	61fb      	str	r3, [r7, #28]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 800ed1c:	180b      	adds	r3, r1, r0
 800ed1e:	19db      	adds	r3, r3, r7
 800ed20:	79db      	ldrb	r3, [r3, #7]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed22:	61bb      	str	r3, [r7, #24]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 800ed24:	180b      	adds	r3, r1, r0
 800ed26:	19db      	adds	r3, r3, r7
 800ed28:	7a1b      	ldrb	r3, [r3, #8]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed2a:	617b      	str	r3, [r7, #20]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 800ed2c:	180b      	adds	r3, r1, r0
 800ed2e:	19db      	adds	r3, r3, r7
 800ed30:	7a5b      	ldrb	r3, [r3, #9]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed32:	613b      	str	r3, [r7, #16]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 800ed34:	180b      	adds	r3, r1, r0
 800ed36:	19db      	adds	r3, r3, r7
 800ed38:	7b9b      	ldrb	r3, [r3, #14]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed3a:	60fb      	str	r3, [r7, #12]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 800ed3c:	180b      	adds	r3, r1, r0
 800ed3e:	19db      	adds	r3, r3, r7
 800ed40:	7bdb      	ldrb	r3, [r3, #15]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed42:	60bb      	str	r3, [r7, #8]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 800ed44:	180b      	adds	r3, r1, r0
 800ed46:	19db      	adds	r3, r3, r7
 800ed48:	7c1b      	ldrb	r3, [r3, #16]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed4a:	607b      	str	r3, [r7, #4]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 800ed4c:	180b      	adds	r3, r1, r0
 800ed4e:	19db      	adds	r3, r3, r7
 800ed50:	7c5b      	ldrb	r3, [r3, #17]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed52:	469b      	mov	fp, r3
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 800ed54:	180b      	adds	r3, r1, r0
 800ed56:	19db      	adds	r3, r3, r7
 800ed58:	7a9b      	ldrb	r3, [r3, #10]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed5a:	469a      	mov	sl, r3
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 800ed5c:	180b      	adds	r3, r1, r0
 800ed5e:	19db      	adds	r3, r3, r7
 800ed60:	7adb      	ldrb	r3, [r3, #11]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed62:	4699      	mov	r9, r3
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 800ed64:	180b      	adds	r3, r1, r0
 800ed66:	19db      	adds	r3, r3, r7
 800ed68:	7b1b      	ldrb	r3, [r3, #12]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed6a:	4698      	mov	r8, r3
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 800ed6c:	180b      	adds	r3, r1, r0
 800ed6e:	19db      	adds	r3, r3, r7
 800ed70:	7b5b      	ldrb	r3, [r3, #13]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed72:	469c      	mov	ip, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 800ed74:	180b      	adds	r3, r1, r0
 800ed76:	19db      	adds	r3, r3, r7
 800ed78:	7c9b      	ldrb	r3, [r3, #18]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed7a:	001e      	movs	r6, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 800ed7c:	180b      	adds	r3, r1, r0
 800ed7e:	19db      	adds	r3, r3, r7
 800ed80:	7cdb      	ldrb	r3, [r3, #19]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed82:	001d      	movs	r5, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 800ed84:	180b      	adds	r3, r1, r0
 800ed86:	19db      	adds	r3, r3, r7
 800ed88:	7d1b      	ldrb	r3, [r3, #20]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed8a:	001c      	movs	r4, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 800ed8c:	180b      	adds	r3, r1, r0
 800ed8e:	19db      	adds	r3, r3, r7
 800ed90:	7d5b      	ldrb	r3, [r3, #21]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed92:	001a      	movs	r2, r3
											netinfo.dhcp
 800ed94:	180b      	adds	r3, r1, r0
 800ed96:	19db      	adds	r3, r3, r7
 800ed98:	7d9b      	ldrb	r3, [r3, #22]
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800ed9a:	491c      	ldr	r1, [pc, #112]	; (800ee0c <make_json_netinfo+0x150>)
 800ed9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ed9e:	9314      	str	r3, [sp, #80]	; 0x50
 800eda0:	9213      	str	r2, [sp, #76]	; 0x4c
 800eda2:	9412      	str	r4, [sp, #72]	; 0x48
 800eda4:	9511      	str	r5, [sp, #68]	; 0x44
 800eda6:	9610      	str	r6, [sp, #64]	; 0x40
 800eda8:	4664      	mov	r4, ip
 800edaa:	940f      	str	r4, [sp, #60]	; 0x3c
 800edac:	4644      	mov	r4, r8
 800edae:	940e      	str	r4, [sp, #56]	; 0x38
 800edb0:	464c      	mov	r4, r9
 800edb2:	940d      	str	r4, [sp, #52]	; 0x34
 800edb4:	4654      	mov	r4, sl
 800edb6:	940c      	str	r4, [sp, #48]	; 0x30
 800edb8:	465c      	mov	r4, fp
 800edba:	940b      	str	r4, [sp, #44]	; 0x2c
 800edbc:	687c      	ldr	r4, [r7, #4]
 800edbe:	940a      	str	r4, [sp, #40]	; 0x28
 800edc0:	68bc      	ldr	r4, [r7, #8]
 800edc2:	9409      	str	r4, [sp, #36]	; 0x24
 800edc4:	68fc      	ldr	r4, [r7, #12]
 800edc6:	9408      	str	r4, [sp, #32]
 800edc8:	693c      	ldr	r4, [r7, #16]
 800edca:	9407      	str	r4, [sp, #28]
 800edcc:	697c      	ldr	r4, [r7, #20]
 800edce:	9406      	str	r4, [sp, #24]
 800edd0:	69bc      	ldr	r4, [r7, #24]
 800edd2:	9405      	str	r4, [sp, #20]
 800edd4:	69fc      	ldr	r4, [r7, #28]
 800edd6:	9404      	str	r4, [sp, #16]
 800edd8:	6a3c      	ldr	r4, [r7, #32]
 800edda:	9403      	str	r4, [sp, #12]
 800eddc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800edde:	9402      	str	r4, [sp, #8]
 800ede0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800ede2:	9401      	str	r4, [sp, #4]
 800ede4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800ede6:	9400      	str	r4, [sp, #0]
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edec:	f013 fdc0 	bl	8022970 <siprintf>
 800edf0:	0003      	movs	r3, r0
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf6:	801a      	strh	r2, [r3, #0]
											);
}
 800edf8:	46c0      	nop			; (mov r8, r8)
 800edfa:	46bd      	mov	sp, r7
 800edfc:	b017      	add	sp, #92	; 0x5c
 800edfe:	bcf0      	pop	{r4, r5, r6, r7}
 800ee00:	46bb      	mov	fp, r7
 800ee02:	46b2      	mov	sl, r6
 800ee04:	46a9      	mov	r9, r5
 800ee06:	46a0      	mov	r8, r4
 800ee08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee0a:	46c0      	nop			; (mov r8, r8)
 800ee0c:	080258d8 	.word	0x080258d8

0800ee10 <set_diodir>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pre-defined Set CGI functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int8_t set_diodir(uint8_t * uri)
{
 800ee10:	b590      	push	{r4, r7, lr}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
	uint8_t * param;
	uint8_t pin = 0;
 800ee18:	240f      	movs	r4, #15
 800ee1a:	193b      	adds	r3, r7, r4
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	701a      	strb	r2, [r3, #0]
	//, val = 0;

	if((param = get_http_param_value((char *)uri, "pin"))) // GPIO; D0 ~ D15
 800ee20:	4a14      	ldr	r2, [pc, #80]	; (800ee74 <set_diodir+0x64>)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	0011      	movs	r1, r2
 800ee26:	0018      	movs	r0, r3
 800ee28:	f00f f8f4 	bl	801e014 <get_http_param_value>
 800ee2c:	0003      	movs	r3, r0
 800ee2e:	60bb      	str	r3, [r7, #8]
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d016      	beq.n	800ee64 <set_diodir+0x54>
	{
		pin = (uint8_t)ATOI(param, 10);
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	210a      	movs	r1, #10
 800ee3a:	0018      	movs	r0, r3
 800ee3c:	f00f ff1c 	bl	801ec78 <ATOI>
 800ee40:	0002      	movs	r2, r0
 800ee42:	193b      	adds	r3, r7, r4
 800ee44:	701a      	strb	r2, [r3, #0]
		if(pin > 15) return -1;
 800ee46:	193b      	adds	r3, r7, r4
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	2b0f      	cmp	r3, #15
 800ee4c:	d902      	bls.n	800ee54 <set_diodir+0x44>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	425b      	negs	r3, r3
 800ee52:	e00b      	b.n	800ee6c <set_diodir+0x5c>

		if((param = get_http_param_value((char *)uri, "val")))  // Direction; NotUsed/Input/Output
 800ee54:	4a08      	ldr	r2, [pc, #32]	; (800ee78 <set_diodir+0x68>)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	0011      	movs	r1, r2
 800ee5a:	0018      	movs	r0, r3
 800ee5c:	f00f f8da 	bl	801e014 <get_http_param_value>
 800ee60:	0003      	movs	r3, r0
 800ee62:	60bb      	str	r3, [r7, #8]
	}

	//if(val == Input) 		Chip_GPIO_SetPinDIRInput(LPC_GPIO, dio_ports[pin], dio_pins[pin]);	// Input
	//else 					Chip_GPIO_SetPinDIROutput(LPC_GPIO, dio_ports[pin], dio_pins[pin]); // Output

	return pin;
 800ee64:	230f      	movs	r3, #15
 800ee66:	18fb      	adds	r3, r7, r3
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	b25b      	sxtb	r3, r3
}
 800ee6c:	0018      	movs	r0, r3
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	b005      	add	sp, #20
 800ee72:	bd90      	pop	{r4, r7, pc}
 800ee74:	080259b0 	.word	0x080259b0
 800ee78:	080259b4 	.word	0x080259b4

0800ee7c <set_diostate>:

int8_t set_diostate(uint8_t * uri)
{
 800ee7c:	b590      	push	{r4, r7, lr}
 800ee7e:	b085      	sub	sp, #20
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
	uint8_t * param;
	uint8_t pin = 0;//, val = 0;
 800ee84:	240f      	movs	r4, #15
 800ee86:	193b      	adds	r3, r7, r4
 800ee88:	2200      	movs	r2, #0
 800ee8a:	701a      	strb	r2, [r3, #0]

	if((param = get_http_param_value((char *)uri, "pin"))) // GPIO; D0 ~ D15
 800ee8c:	4a14      	ldr	r2, [pc, #80]	; (800eee0 <set_diostate+0x64>)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	0011      	movs	r1, r2
 800ee92:	0018      	movs	r0, r3
 800ee94:	f00f f8be 	bl	801e014 <get_http_param_value>
 800ee98:	0003      	movs	r3, r0
 800ee9a:	60bb      	str	r3, [r7, #8]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d016      	beq.n	800eed0 <set_diostate+0x54>
	{
		pin = (uint8_t)ATOI(param, 10);
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	210a      	movs	r1, #10
 800eea6:	0018      	movs	r0, r3
 800eea8:	f00f fee6 	bl	801ec78 <ATOI>
 800eeac:	0002      	movs	r2, r0
 800eeae:	193b      	adds	r3, r7, r4
 800eeb0:	701a      	strb	r2, [r3, #0]
		if(pin > 15) return -1;
 800eeb2:	193b      	adds	r3, r7, r4
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	2b0f      	cmp	r3, #15
 800eeb8:	d902      	bls.n	800eec0 <set_diostate+0x44>
 800eeba:	2301      	movs	r3, #1
 800eebc:	425b      	negs	r3, r3
 800eebe:	e00b      	b.n	800eed8 <set_diostate+0x5c>

		if((param = get_http_param_value((char *)uri, "val")))  // State; high(on)/low(off)
 800eec0:	4a08      	ldr	r2, [pc, #32]	; (800eee4 <set_diostate+0x68>)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	0011      	movs	r1, r2
 800eec6:	0018      	movs	r0, r3
 800eec8:	f00f f8a4 	bl	801e014 <get_http_param_value>
 800eecc:	0003      	movs	r3, r0
 800eece:	60bb      	str	r3, [r7, #8]

		//if(val == On) 		Chip_GPIO_SetPinState(LPC_GPIO, dio_ports[pin], dio_pins[pin], true); 	// High
		//else				Chip_GPIO_SetPinState(LPC_GPIO, dio_ports[pin], dio_pins[pin], false);	// Low
	}

	return pin;
 800eed0:	230f      	movs	r3, #15
 800eed2:	18fb      	adds	r3, r7, r3
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	b25b      	sxtb	r3, r3
}
 800eed8:	0018      	movs	r0, r3
 800eeda:	46bd      	mov	sp, r7
 800eedc:	b005      	add	sp, #20
 800eede:	bd90      	pop	{r4, r7, pc}
 800eee0:	080259b0 	.word	0x080259b0
 800eee4:	080259b4 	.word	0x080259b4

0800eee8 <crc32>:

uint32_t crc32(const uint8_t *data, size_t length) {
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
    static uint32_t crcTable[256];
    static int tableGenerated = 0;

    if (!tableGenerated) {
 800eef2:	4b26      	ldr	r3, [pc, #152]	; (800ef8c <crc32+0xa4>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d128      	bne.n	800ef4c <crc32+0x64>
        // Generate the CRC table
        uint32_t crc;
        for (int i = 0; i < 256; i++) {
 800eefa:	2300      	movs	r3, #0
 800eefc:	613b      	str	r3, [r7, #16]
 800eefe:	e01f      	b.n	800ef40 <crc32+0x58>
            crc = i;
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	617b      	str	r3, [r7, #20]
            for (int j = 8; j > 0; j--) {
 800ef04:	2308      	movs	r3, #8
 800ef06:	60fb      	str	r3, [r7, #12]
 800ef08:	e00f      	b.n	800ef2a <crc32+0x42>
                if (crc & 1) {
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	4013      	ands	r3, r2
 800ef10:	d005      	beq.n	800ef1e <crc32+0x36>
                    crc = (crc >> 1) ^ 0xEDB88320;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	085b      	lsrs	r3, r3, #1
 800ef16:	4a1e      	ldr	r2, [pc, #120]	; (800ef90 <crc32+0xa8>)
 800ef18:	4053      	eors	r3, r2
 800ef1a:	617b      	str	r3, [r7, #20]
 800ef1c:	e002      	b.n	800ef24 <crc32+0x3c>
                } else {
                    crc >>= 1;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	085b      	lsrs	r3, r3, #1
 800ef22:	617b      	str	r3, [r7, #20]
            for (int j = 8; j > 0; j--) {
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	60fb      	str	r3, [r7, #12]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dcec      	bgt.n	800ef0a <crc32+0x22>
                }
            }
            crcTable[i] = crc;
 800ef30:	4b18      	ldr	r3, [pc, #96]	; (800ef94 <crc32+0xac>)
 800ef32:	693a      	ldr	r2, [r7, #16]
 800ef34:	0092      	lsls	r2, r2, #2
 800ef36:	6979      	ldr	r1, [r7, #20]
 800ef38:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < 256; i++) {
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	613b      	str	r3, [r7, #16]
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	2bff      	cmp	r3, #255	; 0xff
 800ef44:	dddc      	ble.n	800ef00 <crc32+0x18>
        }
        tableGenerated = 1;
 800ef46:	4b11      	ldr	r3, [pc, #68]	; (800ef8c <crc32+0xa4>)
 800ef48:	2201      	movs	r2, #1
 800ef4a:	601a      	str	r2, [r3, #0]
    }

    // Calculate the CRC
    uint32_t crc = 0xFFFFFFFF;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	425b      	negs	r3, r3
 800ef50:	60bb      	str	r3, [r7, #8]
    while (length--) {
 800ef52:	e00f      	b.n	800ef74 <crc32+0x8c>
        crc = (crc >> 8) ^ crcTable[(crc ^ *data++) & 0xFF];
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	0a1a      	lsrs	r2, r3, #8
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	1c59      	adds	r1, r3, #1
 800ef5c:	6079      	str	r1, [r7, #4]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	0019      	movs	r1, r3
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	404b      	eors	r3, r1
 800ef66:	21ff      	movs	r1, #255	; 0xff
 800ef68:	4019      	ands	r1, r3
 800ef6a:	4b0a      	ldr	r3, [pc, #40]	; (800ef94 <crc32+0xac>)
 800ef6c:	0089      	lsls	r1, r1, #2
 800ef6e:	58cb      	ldr	r3, [r1, r3]
 800ef70:	4053      	eors	r3, r2
 800ef72:	60bb      	str	r3, [r7, #8]
    while (length--) {
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	1e5a      	subs	r2, r3, #1
 800ef78:	603a      	str	r2, [r7, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1ea      	bne.n	800ef54 <crc32+0x6c>
    }

    return crc ^ 0xFFFFFFFF;
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	43db      	mvns	r3, r3
}
 800ef82:	0018      	movs	r0, r3
 800ef84:	46bd      	mov	sp, r7
 800ef86:	b006      	add	sp, #24
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	46c0      	nop			; (mov r8, r8)
 800ef8c:	20006fd0 	.word	0x20006fd0
 800ef90:	edb88320 	.word	0xedb88320
 800ef94:	20006fd4 	.word	0x20006fd4

0800ef98 <wizchip_select>:

extern SPI_HandleTypeDef hspi1;

/* W5500 Call Back Functions */
void wizchip_select(void)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800ef9c:	2380      	movs	r3, #128	; 0x80
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	4803      	ldr	r0, [pc, #12]	; (800efb0 <wizchip_select+0x18>)
 800efa2:	2200      	movs	r2, #0
 800efa4:	0019      	movs	r1, r3
 800efa6:	f002 f8dc 	bl	8011162 <HAL_GPIO_WritePin>
}
 800efaa:	46c0      	nop			; (mov r8, r8)
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}
 800efb0:	50000400 	.word	0x50000400

0800efb4 <wizchip_deselect>:

void wizchip_deselect(void)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800efb8:	2380      	movs	r3, #128	; 0x80
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4803      	ldr	r0, [pc, #12]	; (800efcc <wizchip_deselect+0x18>)
 800efbe:	2201      	movs	r2, #1
 800efc0:	0019      	movs	r1, r3
 800efc2:	f002 f8ce 	bl	8011162 <HAL_GPIO_WritePin>
}
 800efc6:	46c0      	nop			; (mov r8, r8)
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	50000400 	.word	0x50000400

0800efd0 <wizchip_read>:

uint8_t wizchip_read()
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
	uint8_t rb;
	wizchip_readburst(&rb, sizeof(rb));
 800efd6:	1dfb      	adds	r3, r7, #7
 800efd8:	2101      	movs	r1, #1
 800efda:	0018      	movs	r0, r3
 800efdc:	f000 f816 	bl	800f00c <wizchip_readburst>
	return rb;
 800efe0:	1dfb      	adds	r3, r7, #7
 800efe2:	781b      	ldrb	r3, [r3, #0]
}
 800efe4:	0018      	movs	r0, r3
 800efe6:	46bd      	mov	sp, r7
 800efe8:	b002      	add	sp, #8
 800efea:	bd80      	pop	{r7, pc}

0800efec <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	0002      	movs	r2, r0
 800eff4:	1dfb      	adds	r3, r7, #7
 800eff6:	701a      	strb	r2, [r3, #0]
	wizchip_writeburst(&wb, sizeof(wb));
 800eff8:	1dfb      	adds	r3, r7, #7
 800effa:	2101      	movs	r1, #1
 800effc:	0018      	movs	r0, r3
 800effe:	f000 f81b 	bl	800f038 <wizchip_writeburst>
}
 800f002:	46c0      	nop			; (mov r8, r8)
 800f004:	46bd      	mov	sp, r7
 800f006:	b002      	add	sp, #8
 800f008:	bd80      	pop	{r7, pc}
	...

0800f00c <wizchip_readburst>:

void wizchip_readburst(uint8_t *pBuf, uint16_t len)
{
 800f00c:	b590      	push	{r4, r7, lr}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	000a      	movs	r2, r1
 800f016:	1cbb      	adds	r3, r7, #2
 800f018:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1, pBuf, len, HAL_MAX_DELAY);
 800f01a:	2301      	movs	r3, #1
 800f01c:	425c      	negs	r4, r3
 800f01e:	1cbb      	adds	r3, r7, #2
 800f020:	881a      	ldrh	r2, [r3, #0]
 800f022:	6879      	ldr	r1, [r7, #4]
 800f024:	4803      	ldr	r0, [pc, #12]	; (800f034 <wizchip_readburst+0x28>)
 800f026:	0023      	movs	r3, r4
 800f028:	f004 fba0 	bl	801376c <HAL_SPI_Receive>
}
 800f02c:	46c0      	nop			; (mov r8, r8)
 800f02e:	46bd      	mov	sp, r7
 800f030:	b003      	add	sp, #12
 800f032:	bd90      	pop	{r4, r7, pc}
 800f034:	20006994 	.word	0x20006994

0800f038 <wizchip_writeburst>:

void wizchip_writeburst(uint8_t *pBuf, uint16_t len)
{
 800f038:	b590      	push	{r4, r7, lr}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	000a      	movs	r2, r1
 800f042:	1cbb      	adds	r3, r7, #2
 800f044:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, pBuf, len, HAL_MAX_DELAY);
 800f046:	2301      	movs	r3, #1
 800f048:	425c      	negs	r4, r3
 800f04a:	1cbb      	adds	r3, r7, #2
 800f04c:	881a      	ldrh	r2, [r3, #0]
 800f04e:	6879      	ldr	r1, [r7, #4]
 800f050:	4803      	ldr	r0, [pc, #12]	; (800f060 <wizchip_writeburst+0x28>)
 800f052:	0023      	movs	r3, r4
 800f054:	f004 fa2a 	bl	80134ac <HAL_SPI_Transmit>
}
 800f058:	46c0      	nop			; (mov r8, r8)
 800f05a:	46bd      	mov	sp, r7
 800f05c:	b003      	add	sp, #12
 800f05e:	bd90      	pop	{r4, r7, pc}
 800f060:	20006994 	.word	0x20006994

0800f064 <Display_Net_Conf>:
	for (; nCount != 0; nCount--)
		;
}

void Display_Net_Conf()
{
 800f064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f066:	b08d      	sub	sp, #52	; 0x34
 800f068:	af04      	add	r7, sp, #16
	uint8_t tmpstr[6] = {
 800f06a:	2418      	movs	r4, #24
 800f06c:	193b      	adds	r3, r7, r4
 800f06e:	2200      	movs	r2, #0
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	2200      	movs	r2, #0
 800f074:	809a      	strh	r2, [r3, #4]
		0,
	};
	wiz_NetInfo gWIZNETINFO;

	ctlnetwork(CN_GET_NETINFO, (void *)&gWIZNETINFO);
 800f076:	003b      	movs	r3, r7
 800f078:	0019      	movs	r1, r3
 800f07a:	2001      	movs	r0, #1
 800f07c:	f00d fa40 	bl	801c500 <ctlnetwork>
	ctlwizchip(CW_GET_ID, (void *)tmpstr);
 800f080:	193b      	adds	r3, r7, r4
 800f082:	0019      	movs	r1, r3
 800f084:	2008      	movs	r0, #8
 800f086:	f00d f955 	bl	801c334 <ctlwizchip>

	// Display Network Information
	if (gWIZNETINFO.dhcp == NETINFO_DHCP)
 800f08a:	003b      	movs	r3, r7
 800f08c:	7d9b      	ldrb	r3, [r3, #22]
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d106      	bne.n	800f0a0 <Display_Net_Conf+0x3c>
		printf("\r\n===== %s NET CONF : DHCP =====\r\n", (char *)tmpstr);
 800f092:	193a      	adds	r2, r7, r4
 800f094:	4b35      	ldr	r3, [pc, #212]	; (800f16c <Display_Net_Conf+0x108>)
 800f096:	0011      	movs	r1, r2
 800f098:	0018      	movs	r0, r3
 800f09a:	f013 fbbb 	bl	8022814 <iprintf>
 800f09e:	e006      	b.n	800f0ae <Display_Net_Conf+0x4a>
	else
		printf("\r\n===== %s NET CONF : Static =====\r\n", (char *)tmpstr);
 800f0a0:	2318      	movs	r3, #24
 800f0a2:	18fa      	adds	r2, r7, r3
 800f0a4:	4b32      	ldr	r3, [pc, #200]	; (800f170 <Display_Net_Conf+0x10c>)
 800f0a6:	0011      	movs	r1, r2
 800f0a8:	0018      	movs	r0, r3
 800f0aa:	f013 fbb3 	bl	8022814 <iprintf>

	printf("\r\nMAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 800f0ae:	003b      	movs	r3, r7
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	001c      	movs	r4, r3
 800f0b4:	003b      	movs	r3, r7
 800f0b6:	785b      	ldrb	r3, [r3, #1]
 800f0b8:	001d      	movs	r5, r3
 800f0ba:	003b      	movs	r3, r7
 800f0bc:	789b      	ldrb	r3, [r3, #2]
 800f0be:	001e      	movs	r6, r3
 800f0c0:	003b      	movs	r3, r7
 800f0c2:	78db      	ldrb	r3, [r3, #3]
 800f0c4:	001a      	movs	r2, r3
 800f0c6:	003b      	movs	r3, r7
 800f0c8:	791b      	ldrb	r3, [r3, #4]
 800f0ca:	0019      	movs	r1, r3
 800f0cc:	003b      	movs	r3, r7
 800f0ce:	795b      	ldrb	r3, [r3, #5]
 800f0d0:	4828      	ldr	r0, [pc, #160]	; (800f174 <Display_Net_Conf+0x110>)
 800f0d2:	9302      	str	r3, [sp, #8]
 800f0d4:	9101      	str	r1, [sp, #4]
 800f0d6:	9200      	str	r2, [sp, #0]
 800f0d8:	0033      	movs	r3, r6
 800f0da:	002a      	movs	r2, r5
 800f0dc:	0021      	movs	r1, r4
 800f0de:	f013 fb99 	bl	8022814 <iprintf>
	printf("IP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 800f0e2:	003b      	movs	r3, r7
 800f0e4:	799b      	ldrb	r3, [r3, #6]
 800f0e6:	0019      	movs	r1, r3
 800f0e8:	003b      	movs	r3, r7
 800f0ea:	79db      	ldrb	r3, [r3, #7]
 800f0ec:	001a      	movs	r2, r3
 800f0ee:	003b      	movs	r3, r7
 800f0f0:	7a1b      	ldrb	r3, [r3, #8]
 800f0f2:	001c      	movs	r4, r3
 800f0f4:	003b      	movs	r3, r7
 800f0f6:	7a5b      	ldrb	r3, [r3, #9]
 800f0f8:	481f      	ldr	r0, [pc, #124]	; (800f178 <Display_Net_Conf+0x114>)
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	0023      	movs	r3, r4
 800f0fe:	f013 fb89 	bl	8022814 <iprintf>
	printf("GW: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 800f102:	003b      	movs	r3, r7
 800f104:	7b9b      	ldrb	r3, [r3, #14]
 800f106:	0019      	movs	r1, r3
 800f108:	003b      	movs	r3, r7
 800f10a:	7bdb      	ldrb	r3, [r3, #15]
 800f10c:	001a      	movs	r2, r3
 800f10e:	003b      	movs	r3, r7
 800f110:	7c1b      	ldrb	r3, [r3, #16]
 800f112:	001c      	movs	r4, r3
 800f114:	003b      	movs	r3, r7
 800f116:	7c5b      	ldrb	r3, [r3, #17]
 800f118:	4818      	ldr	r0, [pc, #96]	; (800f17c <Display_Net_Conf+0x118>)
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	0023      	movs	r3, r4
 800f11e:	f013 fb79 	bl	8022814 <iprintf>
	printf("SN: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 800f122:	003b      	movs	r3, r7
 800f124:	7a9b      	ldrb	r3, [r3, #10]
 800f126:	0019      	movs	r1, r3
 800f128:	003b      	movs	r3, r7
 800f12a:	7adb      	ldrb	r3, [r3, #11]
 800f12c:	001a      	movs	r2, r3
 800f12e:	003b      	movs	r3, r7
 800f130:	7b1b      	ldrb	r3, [r3, #12]
 800f132:	001c      	movs	r4, r3
 800f134:	003b      	movs	r3, r7
 800f136:	7b5b      	ldrb	r3, [r3, #13]
 800f138:	4811      	ldr	r0, [pc, #68]	; (800f180 <Display_Net_Conf+0x11c>)
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	0023      	movs	r3, r4
 800f13e:	f013 fb69 	bl	8022814 <iprintf>
	printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 800f142:	003b      	movs	r3, r7
 800f144:	7c9b      	ldrb	r3, [r3, #18]
 800f146:	0019      	movs	r1, r3
 800f148:	003b      	movs	r3, r7
 800f14a:	7cdb      	ldrb	r3, [r3, #19]
 800f14c:	001a      	movs	r2, r3
 800f14e:	003b      	movs	r3, r7
 800f150:	7d1b      	ldrb	r3, [r3, #20]
 800f152:	001c      	movs	r4, r3
 800f154:	003b      	movs	r3, r7
 800f156:	7d5b      	ldrb	r3, [r3, #21]
 800f158:	480a      	ldr	r0, [pc, #40]	; (800f184 <Display_Net_Conf+0x120>)
 800f15a:	9300      	str	r3, [sp, #0]
 800f15c:	0023      	movs	r3, r4
 800f15e:	f013 fb59 	bl	8022814 <iprintf>
}
 800f162:	46c0      	nop			; (mov r8, r8)
 800f164:	46bd      	mov	sp, r7
 800f166:	b009      	add	sp, #36	; 0x24
 800f168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f16a:	46c0      	nop			; (mov r8, r8)
 800f16c:	080259b8 	.word	0x080259b8
 800f170:	080259dc 	.word	0x080259dc
 800f174:	08025a04 	.word	0x08025a04
 800f178:	08025a2c 	.word	0x08025a2c
 800f17c:	08025a40 	.word	0x08025a40
 800f180:	08025a54 	.word	0x08025a54
 800f184:	08025a68 	.word	0x08025a68

0800f188 <W5500_Init>:
*/
	ctlnetwork(CN_SET_NETINFO, (void *)&netinfo);
}

void W5500_Init()
{
 800f188:	b590      	push	{r4, r7, lr}
 800f18a:	b087      	sub	sp, #28
 800f18c:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 800f18e:	1d3b      	adds	r3, r7, #4
 800f190:	4a23      	ldr	r2, [pc, #140]	; (800f220 <W5500_Init+0x98>)
 800f192:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f194:	c313      	stmia	r3!, {r0, r1, r4}
 800f196:	6812      	ldr	r2, [r2, #0]
 800f198:	601a      	str	r2, [r3, #0]

	// reset the module
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800f19a:	2380      	movs	r3, #128	; 0x80
 800f19c:	005b      	lsls	r3, r3, #1
 800f19e:	4821      	ldr	r0, [pc, #132]	; (800f224 <W5500_Init+0x9c>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	0019      	movs	r1, r3
 800f1a4:	f001 ffdd 	bl	8011162 <HAL_GPIO_WritePin>
	tmp = 0xff;
 800f1a8:	2317      	movs	r3, #23
 800f1aa:	18fb      	adds	r3, r7, r3
 800f1ac:	22ff      	movs	r2, #255	; 0xff
 800f1ae:	701a      	strb	r2, [r3, #0]
	while (tmp--)
 800f1b0:	46c0      	nop			; (mov r8, r8)
 800f1b2:	2217      	movs	r2, #23
 800f1b4:	18bb      	adds	r3, r7, r2
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	18ba      	adds	r2, r7, r2
 800f1ba:	1e59      	subs	r1, r3, #1
 800f1bc:	7011      	strb	r1, [r2, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d1f7      	bne.n	800f1b2 <W5500_Init+0x2a>
		;
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800f1c2:	2380      	movs	r3, #128	; 0x80
 800f1c4:	005b      	lsls	r3, r3, #1
 800f1c6:	4817      	ldr	r0, [pc, #92]	; (800f224 <W5500_Init+0x9c>)
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	0019      	movs	r1, r3
 800f1cc:	f001 ffc9 	bl	8011162 <HAL_GPIO_WritePin>

	/* Register Call back function */
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800f1d0:	4a15      	ldr	r2, [pc, #84]	; (800f228 <W5500_Init+0xa0>)
 800f1d2:	4b16      	ldr	r3, [pc, #88]	; (800f22c <W5500_Init+0xa4>)
 800f1d4:	0011      	movs	r1, r2
 800f1d6:	0018      	movs	r0, r3
 800f1d8:	f00d f830 	bl	801c23c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800f1dc:	4a14      	ldr	r2, [pc, #80]	; (800f230 <W5500_Init+0xa8>)
 800f1de:	4b15      	ldr	r3, [pc, #84]	; (800f234 <W5500_Init+0xac>)
 800f1e0:	0011      	movs	r1, r2
 800f1e2:	0018      	movs	r0, r3
 800f1e4:	f00d f84e 	bl	801c284 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 800f1e8:	4a13      	ldr	r2, [pc, #76]	; (800f238 <W5500_Init+0xb0>)
 800f1ea:	4b14      	ldr	r3, [pc, #80]	; (800f23c <W5500_Init+0xb4>)
 800f1ec:	0011      	movs	r1, r2
 800f1ee:	0018      	movs	r0, r3
 800f1f0:	f00d f874 	bl	801c2dc <reg_wizchip_spiburst_cbfunc>

	/* W5500 Chip Initialization */
	if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 800f1f4:	1d3b      	adds	r3, r7, #4
 800f1f6:	0019      	movs	r1, r3
 800f1f8:	2001      	movs	r0, #1
 800f1fa:	f00d f89b 	bl	801c334 <ctlwizchip>
 800f1fe:	0003      	movs	r3, r0
 800f200:	3301      	adds	r3, #1
 800f202:	d104      	bne.n	800f20e <W5500_Init+0x86>
	{
		printf("WIZCHIP Initialized fail.\r\n");
 800f204:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <W5500_Init+0xb8>)
 800f206:	0018      	movs	r0, r3
 800f208:	f013 fb74 	bl	80228f4 <puts>
		while (1)
 800f20c:	e7fe      	b.n	800f20c <W5500_Init+0x84>
			;
	}
	printf("W5500 initialized\n");
 800f20e:	4b0d      	ldr	r3, [pc, #52]	; (800f244 <W5500_Init+0xbc>)
 800f210:	0018      	movs	r0, r3
 800f212:	f013 fb6f 	bl	80228f4 <puts>
}
 800f216:	46c0      	nop			; (mov r8, r8)
 800f218:	46bd      	mov	sp, r7
 800f21a:	b007      	add	sp, #28
 800f21c:	bd90      	pop	{r4, r7, pc}
 800f21e:	46c0      	nop			; (mov r8, r8)
 800f220:	08025aac 	.word	0x08025aac
 800f224:	50000400 	.word	0x50000400
 800f228:	0800efb5 	.word	0x0800efb5
 800f22c:	0800ef99 	.word	0x0800ef99
 800f230:	0800efed 	.word	0x0800efed
 800f234:	0800efd1 	.word	0x0800efd1
 800f238:	0800f039 	.word	0x0800f039
 800f23c:	0800f00d 	.word	0x0800f00d
 800f240:	08025a7c 	.word	0x08025a7c
 800f244:	08025a98 	.word	0x08025a98

0800f248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800f248:	480d      	ldr	r0, [pc, #52]	; (800f280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800f24a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f24c:	f7fe f8f6 	bl	800d43c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f250:	480c      	ldr	r0, [pc, #48]	; (800f284 <LoopForever+0x6>)
  ldr r1, =_edata
 800f252:	490d      	ldr	r1, [pc, #52]	; (800f288 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f254:	4a0d      	ldr	r2, [pc, #52]	; (800f28c <LoopForever+0xe>)
  movs r3, #0
 800f256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f258:	e002      	b.n	800f260 <LoopCopyDataInit>

0800f25a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f25a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f25c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f25e:	3304      	adds	r3, #4

0800f260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f264:	d3f9      	bcc.n	800f25a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f266:	4a0a      	ldr	r2, [pc, #40]	; (800f290 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f268:	4c0a      	ldr	r4, [pc, #40]	; (800f294 <LoopForever+0x16>)
  movs r3, #0
 800f26a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f26c:	e001      	b.n	800f272 <LoopFillZerobss>

0800f26e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f26e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f270:	3204      	adds	r2, #4

0800f272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f274:	d3fb      	bcc.n	800f26e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800f276:	f014 fb47 	bl	8023908 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800f27a:	f7f8 fffd 	bl	8008278 <main>

0800f27e <LoopForever>:

LoopForever:
  b LoopForever
 800f27e:	e7fe      	b.n	800f27e <LoopForever>
  ldr   r0, =_estack
 800f280:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800f284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f288:	20005210 	.word	0x20005210
  ldr r2, =_sidata
 800f28c:	08032430 	.word	0x08032430
  ldr r2, =_sbss
 800f290:	20005210 	.word	0x20005210
  ldr r4, =_ebss
 800f294:	2001c380 	.word	0x2001c380

0800f298 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800f298:	e7fe      	b.n	800f298 <ADC1_IRQHandler>
	...

0800f29c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f2a2:	1dfb      	adds	r3, r7, #7
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f2a8:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <HAL_Init+0x3c>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <HAL_Init+0x3c>)
 800f2ae:	2180      	movs	r1, #128	; 0x80
 800f2b0:	0049      	lsls	r1, r1, #1
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f2b6:	2003      	movs	r0, #3
 800f2b8:	f000 f810 	bl	800f2dc <HAL_InitTick>
 800f2bc:	1e03      	subs	r3, r0, #0
 800f2be:	d003      	beq.n	800f2c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800f2c0:	1dfb      	adds	r3, r7, #7
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	701a      	strb	r2, [r3, #0]
 800f2c6:	e001      	b.n	800f2cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800f2c8:	f7fd fcfc 	bl	800ccc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f2cc:	1dfb      	adds	r3, r7, #7
 800f2ce:	781b      	ldrb	r3, [r3, #0]
}
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	b002      	add	sp, #8
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	40022000 	.word	0x40022000

0800f2dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f2dc:	b590      	push	{r4, r7, lr}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800f2e4:	230f      	movs	r3, #15
 800f2e6:	18fb      	adds	r3, r7, r3
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800f2ec:	4b1d      	ldr	r3, [pc, #116]	; (800f364 <HAL_InitTick+0x88>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d02b      	beq.n	800f34c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800f2f4:	4b1c      	ldr	r3, [pc, #112]	; (800f368 <HAL_InitTick+0x8c>)
 800f2f6:	681c      	ldr	r4, [r3, #0]
 800f2f8:	4b1a      	ldr	r3, [pc, #104]	; (800f364 <HAL_InitTick+0x88>)
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	0019      	movs	r1, r3
 800f2fe:	23fa      	movs	r3, #250	; 0xfa
 800f300:	0098      	lsls	r0, r3, #2
 800f302:	f7f2 ff19 	bl	8002138 <__udivsi3>
 800f306:	0003      	movs	r3, r0
 800f308:	0019      	movs	r1, r3
 800f30a:	0020      	movs	r0, r4
 800f30c:	f7f2 ff14 	bl	8002138 <__udivsi3>
 800f310:	0003      	movs	r3, r0
 800f312:	0018      	movs	r0, r3
 800f314:	f001 fa3d 	bl	8010792 <HAL_SYSTICK_Config>
 800f318:	1e03      	subs	r3, r0, #0
 800f31a:	d112      	bne.n	800f342 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d80a      	bhi.n	800f338 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f322:	6879      	ldr	r1, [r7, #4]
 800f324:	2301      	movs	r3, #1
 800f326:	425b      	negs	r3, r3
 800f328:	2200      	movs	r2, #0
 800f32a:	0018      	movs	r0, r3
 800f32c:	f001 f9fc 	bl	8010728 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f330:	4b0e      	ldr	r3, [pc, #56]	; (800f36c <HAL_InitTick+0x90>)
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	e00d      	b.n	800f354 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800f338:	230f      	movs	r3, #15
 800f33a:	18fb      	adds	r3, r7, r3
 800f33c:	2201      	movs	r2, #1
 800f33e:	701a      	strb	r2, [r3, #0]
 800f340:	e008      	b.n	800f354 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800f342:	230f      	movs	r3, #15
 800f344:	18fb      	adds	r3, r7, r3
 800f346:	2201      	movs	r2, #1
 800f348:	701a      	strb	r2, [r3, #0]
 800f34a:	e003      	b.n	800f354 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800f34c:	230f      	movs	r3, #15
 800f34e:	18fb      	adds	r3, r7, r3
 800f350:	2201      	movs	r2, #1
 800f352:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800f354:	230f      	movs	r3, #15
 800f356:	18fb      	adds	r3, r7, r3
 800f358:	781b      	ldrb	r3, [r3, #0]
}
 800f35a:	0018      	movs	r0, r3
 800f35c:	46bd      	mov	sp, r7
 800f35e:	b005      	add	sp, #20
 800f360:	bd90      	pop	{r4, r7, pc}
 800f362:	46c0      	nop			; (mov r8, r8)
 800f364:	20005060 	.word	0x20005060
 800f368:	20005028 	.word	0x20005028
 800f36c:	2000505c 	.word	0x2000505c

0800f370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800f374:	4b05      	ldr	r3, [pc, #20]	; (800f38c <HAL_IncTick+0x1c>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	001a      	movs	r2, r3
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <HAL_IncTick+0x20>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	18d2      	adds	r2, r2, r3
 800f380:	4b03      	ldr	r3, [pc, #12]	; (800f390 <HAL_IncTick+0x20>)
 800f382:	601a      	str	r2, [r3, #0]
}
 800f384:	46c0      	nop			; (mov r8, r8)
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	46c0      	nop			; (mov r8, r8)
 800f38c:	20005060 	.word	0x20005060
 800f390:	200073d4 	.word	0x200073d4

0800f394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	af00      	add	r7, sp, #0
  return uwTick;
 800f398:	4b02      	ldr	r3, [pc, #8]	; (800f3a4 <HAL_GetTick+0x10>)
 800f39a:	681b      	ldr	r3, [r3, #0]
}
 800f39c:	0018      	movs	r0, r3
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	46c0      	nop			; (mov r8, r8)
 800f3a4:	200073d4 	.word	0x200073d4

0800f3a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f3b0:	f7ff fff0 	bl	800f394 <HAL_GetTick>
 800f3b4:	0003      	movs	r3, r0
 800f3b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	d005      	beq.n	800f3ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f3c2:	4b0a      	ldr	r3, [pc, #40]	; (800f3ec <HAL_Delay+0x44>)
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	001a      	movs	r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	189b      	adds	r3, r3, r2
 800f3cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800f3ce:	46c0      	nop			; (mov r8, r8)
 800f3d0:	f7ff ffe0 	bl	800f394 <HAL_GetTick>
 800f3d4:	0002      	movs	r2, r0
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d8f7      	bhi.n	800f3d0 <HAL_Delay+0x28>
  {
  }
}
 800f3e0:	46c0      	nop			; (mov r8, r8)
 800f3e2:	46c0      	nop			; (mov r8, r8)
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	b004      	add	sp, #16
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	46c0      	nop			; (mov r8, r8)
 800f3ec:	20005060 	.word	0x20005060

0800f3f0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4a05      	ldr	r2, [pc, #20]	; (800f414 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800f400:	401a      	ands	r2, r3
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	431a      	orrs	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	601a      	str	r2, [r3, #0]
}
 800f40a:	46c0      	nop			; (mov r8, r8)
 800f40c:	46bd      	mov	sp, r7
 800f40e:	b002      	add	sp, #8
 800f410:	bd80      	pop	{r7, pc}
 800f412:	46c0      	nop			; (mov r8, r8)
 800f414:	fe3fffff 	.word	0xfe3fffff

0800f418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	23e0      	movs	r3, #224	; 0xe0
 800f426:	045b      	lsls	r3, r3, #17
 800f428:	4013      	ands	r3, r2
}
 800f42a:	0018      	movs	r0, r3
 800f42c:	46bd      	mov	sp, r7
 800f42e:	b002      	add	sp, #8
 800f430:	bd80      	pop	{r7, pc}

0800f432 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b084      	sub	sp, #16
 800f436:	af00      	add	r7, sp, #0
 800f438:	60f8      	str	r0, [r7, #12]
 800f43a:	60b9      	str	r1, [r7, #8]
 800f43c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	695b      	ldr	r3, [r3, #20]
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	2104      	movs	r1, #4
 800f446:	400a      	ands	r2, r1
 800f448:	2107      	movs	r1, #7
 800f44a:	4091      	lsls	r1, r2
 800f44c:	000a      	movs	r2, r1
 800f44e:	43d2      	mvns	r2, r2
 800f450:	401a      	ands	r2, r3
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	2104      	movs	r1, #4
 800f456:	400b      	ands	r3, r1
 800f458:	6879      	ldr	r1, [r7, #4]
 800f45a:	4099      	lsls	r1, r3
 800f45c:	000b      	movs	r3, r1
 800f45e:	431a      	orrs	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800f464:	46c0      	nop			; (mov r8, r8)
 800f466:	46bd      	mov	sp, r7
 800f468:	b004      	add	sp, #16
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	695b      	ldr	r3, [r3, #20]
 800f47a:	683a      	ldr	r2, [r7, #0]
 800f47c:	2104      	movs	r1, #4
 800f47e:	400a      	ands	r2, r1
 800f480:	2107      	movs	r1, #7
 800f482:	4091      	lsls	r1, r2
 800f484:	000a      	movs	r2, r1
 800f486:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	2104      	movs	r1, #4
 800f48c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800f48e:	40da      	lsrs	r2, r3
 800f490:	0013      	movs	r3, r2
}
 800f492:	0018      	movs	r0, r3
 800f494:	46bd      	mov	sp, r7
 800f496:	b002      	add	sp, #8
 800f498:	bd80      	pop	{r7, pc}

0800f49a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b082      	sub	sp, #8
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68da      	ldr	r2, [r3, #12]
 800f4a6:	23c0      	movs	r3, #192	; 0xc0
 800f4a8:	011b      	lsls	r3, r3, #4
 800f4aa:	4013      	ands	r3, r2
 800f4ac:	d101      	bne.n	800f4b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e000      	b.n	800f4b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	0018      	movs	r0, r3
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	b002      	add	sp, #8
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	211f      	movs	r1, #31
 800f4d0:	400a      	ands	r2, r1
 800f4d2:	210f      	movs	r1, #15
 800f4d4:	4091      	lsls	r1, r2
 800f4d6:	000a      	movs	r2, r1
 800f4d8:	43d2      	mvns	r2, r2
 800f4da:	401a      	ands	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	0e9b      	lsrs	r3, r3, #26
 800f4e0:	210f      	movs	r1, #15
 800f4e2:	4019      	ands	r1, r3
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	201f      	movs	r0, #31
 800f4e8:	4003      	ands	r3, r0
 800f4ea:	4099      	lsls	r1, r3
 800f4ec:	000b      	movs	r3, r1
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800f4f4:	46c0      	nop			; (mov r8, r8)
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	b004      	add	sp, #16
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	035b      	lsls	r3, r3, #13
 800f50e:	0b5b      	lsrs	r3, r3, #13
 800f510:	431a      	orrs	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f516:	46c0      	nop			; (mov r8, r8)
 800f518:	46bd      	mov	sp, r7
 800f51a:	b002      	add	sp, #8
 800f51c:	bd80      	pop	{r7, pc}

0800f51e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b082      	sub	sp, #8
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	0352      	lsls	r2, r2, #13
 800f530:	0b52      	lsrs	r2, r2, #13
 800f532:	43d2      	mvns	r2, r2
 800f534:	401a      	ands	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f53a:	46c0      	nop			; (mov r8, r8)
 800f53c:	46bd      	mov	sp, r7
 800f53e:	b002      	add	sp, #8
 800f540:	bd80      	pop	{r7, pc}
	...

0800f544 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	695b      	ldr	r3, [r3, #20]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	0212      	lsls	r2, r2, #8
 800f558:	43d2      	mvns	r2, r2
 800f55a:	401a      	ands	r2, r3
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	021b      	lsls	r3, r3, #8
 800f560:	6879      	ldr	r1, [r7, #4]
 800f562:	400b      	ands	r3, r1
 800f564:	4904      	ldr	r1, [pc, #16]	; (800f578 <LL_ADC_SetChannelSamplingTime+0x34>)
 800f566:	400b      	ands	r3, r1
 800f568:	431a      	orrs	r2, r3
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800f56e:	46c0      	nop			; (mov r8, r8)
 800f570:	46bd      	mov	sp, r7
 800f572:	b004      	add	sp, #16
 800f574:	bd80      	pop	{r7, pc}
 800f576:	46c0      	nop			; (mov r8, r8)
 800f578:	07ffff00 	.word	0x07ffff00

0800f57c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	4a05      	ldr	r2, [pc, #20]	; (800f5a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800f58a:	4013      	ands	r3, r2
 800f58c:	2280      	movs	r2, #128	; 0x80
 800f58e:	0552      	lsls	r2, r2, #21
 800f590:	431a      	orrs	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800f596:	46c0      	nop			; (mov r8, r8)
 800f598:	46bd      	mov	sp, r7
 800f59a:	b002      	add	sp, #8
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	46c0      	nop			; (mov r8, r8)
 800f5a0:	6fffffe8 	.word	0x6fffffe8

0800f5a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	689a      	ldr	r2, [r3, #8]
 800f5b0:	2380      	movs	r3, #128	; 0x80
 800f5b2:	055b      	lsls	r3, r3, #21
 800f5b4:	401a      	ands	r2, r3
 800f5b6:	2380      	movs	r3, #128	; 0x80
 800f5b8:	055b      	lsls	r3, r3, #21
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d101      	bne.n	800f5c2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e000      	b.n	800f5c4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	0018      	movs	r0, r3
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	b002      	add	sp, #8
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	4a04      	ldr	r2, [pc, #16]	; (800f5ec <LL_ADC_Enable+0x20>)
 800f5da:	4013      	ands	r3, r2
 800f5dc:	2201      	movs	r2, #1
 800f5de:	431a      	orrs	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800f5e4:	46c0      	nop			; (mov r8, r8)
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	b002      	add	sp, #8
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	7fffffe8 	.word	0x7fffffe8

0800f5f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	4a04      	ldr	r2, [pc, #16]	; (800f610 <LL_ADC_Disable+0x20>)
 800f5fe:	4013      	ands	r3, r2
 800f600:	2202      	movs	r2, #2
 800f602:	431a      	orrs	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800f608:	46c0      	nop			; (mov r8, r8)
 800f60a:	46bd      	mov	sp, r7
 800f60c:	b002      	add	sp, #8
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	7fffffe8 	.word	0x7fffffe8

0800f614 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	2201      	movs	r2, #1
 800f622:	4013      	ands	r3, r2
 800f624:	2b01      	cmp	r3, #1
 800f626:	d101      	bne.n	800f62c <LL_ADC_IsEnabled+0x18>
 800f628:	2301      	movs	r3, #1
 800f62a:	e000      	b.n	800f62e <LL_ADC_IsEnabled+0x1a>
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	0018      	movs	r0, r3
 800f630:	46bd      	mov	sp, r7
 800f632:	b002      	add	sp, #8
 800f634:	bd80      	pop	{r7, pc}

0800f636 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800f636:	b580      	push	{r7, lr}
 800f638:	b082      	sub	sp, #8
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	2202      	movs	r2, #2
 800f644:	4013      	ands	r3, r2
 800f646:	2b02      	cmp	r3, #2
 800f648:	d101      	bne.n	800f64e <LL_ADC_IsDisableOngoing+0x18>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e000      	b.n	800f650 <LL_ADC_IsDisableOngoing+0x1a>
 800f64e:	2300      	movs	r3, #0
}
 800f650:	0018      	movs	r0, r3
 800f652:	46bd      	mov	sp, r7
 800f654:	b002      	add	sp, #8
 800f656:	bd80      	pop	{r7, pc}

0800f658 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	4a04      	ldr	r2, [pc, #16]	; (800f678 <LL_ADC_REG_StartConversion+0x20>)
 800f666:	4013      	ands	r3, r2
 800f668:	2204      	movs	r2, #4
 800f66a:	431a      	orrs	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800f670:	46c0      	nop			; (mov r8, r8)
 800f672:	46bd      	mov	sp, r7
 800f674:	b002      	add	sp, #8
 800f676:	bd80      	pop	{r7, pc}
 800f678:	7fffffe8 	.word	0x7fffffe8

0800f67c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	4a04      	ldr	r2, [pc, #16]	; (800f69c <LL_ADC_REG_StopConversion+0x20>)
 800f68a:	4013      	ands	r3, r2
 800f68c:	2210      	movs	r2, #16
 800f68e:	431a      	orrs	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800f694:	46c0      	nop			; (mov r8, r8)
 800f696:	46bd      	mov	sp, r7
 800f698:	b002      	add	sp, #8
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	7fffffe8 	.word	0x7fffffe8

0800f6a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	689b      	ldr	r3, [r3, #8]
 800f6ac:	2204      	movs	r2, #4
 800f6ae:	4013      	ands	r3, r2
 800f6b0:	2b04      	cmp	r3, #4
 800f6b2:	d101      	bne.n	800f6b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e000      	b.n	800f6ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 800f6b8:	2300      	movs	r3, #0
}
 800f6ba:	0018      	movs	r0, r3
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	b002      	add	sp, #8
 800f6c0:	bd80      	pop	{r7, pc}
	...

0800f6c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b088      	sub	sp, #32
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f6cc:	231f      	movs	r3, #31
 800f6ce:	18fb      	adds	r3, r7, r3
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d101      	bne.n	800f6ea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e17f      	b.n	800f9ea <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d10a      	bne.n	800f708 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	0018      	movs	r0, r3
 800f6f6:	f7fd fb09 	bl	800cd0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2254      	movs	r2, #84	; 0x54
 800f704:	2100      	movs	r1, #0
 800f706:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	0018      	movs	r0, r3
 800f70e:	f7ff ff49 	bl	800f5a4 <LL_ADC_IsInternalRegulatorEnabled>
 800f712:	1e03      	subs	r3, r0, #0
 800f714:	d115      	bne.n	800f742 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	0018      	movs	r0, r3
 800f71c:	f7ff ff2e 	bl	800f57c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800f720:	4bb4      	ldr	r3, [pc, #720]	; (800f9f4 <HAL_ADC_Init+0x330>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	49b4      	ldr	r1, [pc, #720]	; (800f9f8 <HAL_ADC_Init+0x334>)
 800f726:	0018      	movs	r0, r3
 800f728:	f7f2 fd06 	bl	8002138 <__udivsi3>
 800f72c:	0003      	movs	r3, r0
 800f72e:	3301      	adds	r3, #1
 800f730:	005b      	lsls	r3, r3, #1
 800f732:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800f734:	e002      	b.n	800f73c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	3b01      	subs	r3, #1
 800f73a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1f9      	bne.n	800f736 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	0018      	movs	r0, r3
 800f748:	f7ff ff2c 	bl	800f5a4 <LL_ADC_IsInternalRegulatorEnabled>
 800f74c:	1e03      	subs	r3, r0, #0
 800f74e:	d10f      	bne.n	800f770 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f754:	2210      	movs	r2, #16
 800f756:	431a      	orrs	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f760:	2201      	movs	r2, #1
 800f762:	431a      	orrs	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800f768:	231f      	movs	r3, #31
 800f76a:	18fb      	adds	r3, r7, r3
 800f76c:	2201      	movs	r2, #1
 800f76e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	0018      	movs	r0, r3
 800f776:	f7ff ff93 	bl	800f6a0 <LL_ADC_REG_IsConversionOngoing>
 800f77a:	0003      	movs	r3, r0
 800f77c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f782:	2210      	movs	r2, #16
 800f784:	4013      	ands	r3, r2
 800f786:	d000      	beq.n	800f78a <HAL_ADC_Init+0xc6>
 800f788:	e122      	b.n	800f9d0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d000      	beq.n	800f792 <HAL_ADC_Init+0xce>
 800f790:	e11e      	b.n	800f9d0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f796:	4a99      	ldr	r2, [pc, #612]	; (800f9fc <HAL_ADC_Init+0x338>)
 800f798:	4013      	ands	r3, r2
 800f79a:	2202      	movs	r2, #2
 800f79c:	431a      	orrs	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	0018      	movs	r0, r3
 800f7a8:	f7ff ff34 	bl	800f614 <LL_ADC_IsEnabled>
 800f7ac:	1e03      	subs	r3, r0, #0
 800f7ae:	d000      	beq.n	800f7b2 <HAL_ADC_Init+0xee>
 800f7b0:	e0ad      	b.n	800f90e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	7e1b      	ldrb	r3, [r3, #24]
 800f7ba:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800f7bc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	7e5b      	ldrb	r3, [r3, #25]
 800f7c2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800f7c4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	7e9b      	ldrb	r3, [r3, #26]
 800f7ca:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800f7cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d002      	beq.n	800f7dc <HAL_ADC_Init+0x118>
 800f7d6:	2380      	movs	r3, #128	; 0x80
 800f7d8:	015b      	lsls	r3, r3, #5
 800f7da:	e000      	b.n	800f7de <HAL_ADC_Init+0x11a>
 800f7dc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800f7de:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800f7e4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	da04      	bge.n	800f7f8 <HAL_ADC_Init+0x134>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	691b      	ldr	r3, [r3, #16]
 800f7f2:	005b      	lsls	r3, r3, #1
 800f7f4:	085b      	lsrs	r3, r3, #1
 800f7f6:	e001      	b.n	800f7fc <HAL_ADC_Init+0x138>
 800f7f8:	2380      	movs	r3, #128	; 0x80
 800f7fa:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800f7fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	212c      	movs	r1, #44	; 0x2c
 800f802:	5c5b      	ldrb	r3, [r3, r1]
 800f804:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800f806:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800f808:	69ba      	ldr	r2, [r7, #24]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2220      	movs	r2, #32
 800f812:	5c9b      	ldrb	r3, [r3, r2]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d115      	bne.n	800f844 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	7e9b      	ldrb	r3, [r3, #26]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d105      	bne.n	800f82c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	2280      	movs	r2, #128	; 0x80
 800f824:	0252      	lsls	r2, r2, #9
 800f826:	4313      	orrs	r3, r2
 800f828:	61bb      	str	r3, [r7, #24]
 800f82a:	e00b      	b.n	800f844 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f830:	2220      	movs	r2, #32
 800f832:	431a      	orrs	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f83c:	2201      	movs	r2, #1
 800f83e:	431a      	orrs	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00a      	beq.n	800f862 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f850:	23e0      	movs	r3, #224	; 0xe0
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800f85a:	4313      	orrs	r3, r2
 800f85c:	69ba      	ldr	r2, [r7, #24]
 800f85e:	4313      	orrs	r3, r2
 800f860:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	4a65      	ldr	r2, [pc, #404]	; (800fa00 <HAL_ADC_Init+0x33c>)
 800f86a:	4013      	ands	r3, r2
 800f86c:	0019      	movs	r1, r3
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	69ba      	ldr	r2, [r7, #24]
 800f874:	430a      	orrs	r2, r1
 800f876:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	0f9b      	lsrs	r3, r3, #30
 800f87e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800f884:	4313      	orrs	r3, r2
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	4313      	orrs	r3, r2
 800f88a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	223c      	movs	r2, #60	; 0x3c
 800f890:	5c9b      	ldrb	r3, [r3, r2]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d111      	bne.n	800f8ba <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	0f9b      	lsrs	r3, r3, #30
 800f89c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800f8a2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 800f8a8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800f8ae:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	691b      	ldr	r3, [r3, #16]
 800f8c0:	4a50      	ldr	r2, [pc, #320]	; (800fa04 <HAL_ADC_Init+0x340>)
 800f8c2:	4013      	ands	r3, r2
 800f8c4:	0019      	movs	r1, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	430a      	orrs	r2, r1
 800f8ce:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	685a      	ldr	r2, [r3, #4]
 800f8d4:	23c0      	movs	r3, #192	; 0xc0
 800f8d6:	061b      	lsls	r3, r3, #24
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d018      	beq.n	800f90e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800f8e0:	2380      	movs	r3, #128	; 0x80
 800f8e2:	05db      	lsls	r3, r3, #23
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d012      	beq.n	800f90e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800f8ec:	2380      	movs	r3, #128	; 0x80
 800f8ee:	061b      	lsls	r3, r3, #24
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d00c      	beq.n	800f90e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800f8f4:	4b44      	ldr	r3, [pc, #272]	; (800fa08 <HAL_ADC_Init+0x344>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a44      	ldr	r2, [pc, #272]	; (800fa0c <HAL_ADC_Init+0x348>)
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	0019      	movs	r1, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	23f0      	movs	r3, #240	; 0xf0
 800f904:	039b      	lsls	r3, r3, #14
 800f906:	401a      	ands	r2, r3
 800f908:	4b3f      	ldr	r3, [pc, #252]	; (800fa08 <HAL_ADC_Init+0x344>)
 800f90a:	430a      	orrs	r2, r1
 800f90c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6818      	ldr	r0, [r3, #0]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f916:	001a      	movs	r2, r3
 800f918:	2100      	movs	r1, #0
 800f91a:	f7ff fd8a 	bl	800f432 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6818      	ldr	r0, [r3, #0]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f926:	493a      	ldr	r1, [pc, #232]	; (800fa10 <HAL_ADC_Init+0x34c>)
 800f928:	001a      	movs	r2, r3
 800f92a:	f7ff fd82 	bl	800f432 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	691b      	ldr	r3, [r3, #16]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d109      	bne.n	800f94a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2110      	movs	r1, #16
 800f942:	4249      	negs	r1, r1
 800f944:	430a      	orrs	r2, r1
 800f946:	629a      	str	r2, [r3, #40]	; 0x28
 800f948:	e018      	b.n	800f97c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	691a      	ldr	r2, [r3, #16]
 800f94e:	2380      	movs	r3, #128	; 0x80
 800f950:	039b      	lsls	r3, r3, #14
 800f952:	429a      	cmp	r2, r3
 800f954:	d112      	bne.n	800f97c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	69db      	ldr	r3, [r3, #28]
 800f960:	3b01      	subs	r3, #1
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	221c      	movs	r2, #28
 800f966:	4013      	ands	r3, r2
 800f968:	2210      	movs	r2, #16
 800f96a:	4252      	negs	r2, r2
 800f96c:	409a      	lsls	r2, r3
 800f96e:	0011      	movs	r1, r2
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	430a      	orrs	r2, r1
 800f97a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2100      	movs	r1, #0
 800f982:	0018      	movs	r0, r3
 800f984:	f7ff fd72 	bl	800f46c <LL_ADC_GetSamplingTimeCommonChannels>
 800f988:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800f98e:	429a      	cmp	r2, r3
 800f990:	d10b      	bne.n	800f9aa <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f99c:	2203      	movs	r2, #3
 800f99e:	4393      	bics	r3, r2
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	431a      	orrs	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800f9a8:	e01c      	b.n	800f9e4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ae:	2212      	movs	r2, #18
 800f9b0:	4393      	bics	r3, r2
 800f9b2:	2210      	movs	r2, #16
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9be:	2201      	movs	r2, #1
 800f9c0:	431a      	orrs	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800f9c6:	231f      	movs	r3, #31
 800f9c8:	18fb      	adds	r3, r7, r3
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800f9ce:	e009      	b.n	800f9e4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9d4:	2210      	movs	r2, #16
 800f9d6:	431a      	orrs	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800f9dc:	231f      	movs	r3, #31
 800f9de:	18fb      	adds	r3, r7, r3
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800f9e4:	231f      	movs	r3, #31
 800f9e6:	18fb      	adds	r3, r7, r3
 800f9e8:	781b      	ldrb	r3, [r3, #0]
}
 800f9ea:	0018      	movs	r0, r3
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	b008      	add	sp, #32
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	46c0      	nop			; (mov r8, r8)
 800f9f4:	20005028 	.word	0x20005028
 800f9f8:	00030d40 	.word	0x00030d40
 800f9fc:	fffffefd 	.word	0xfffffefd
 800fa00:	ffde0201 	.word	0xffde0201
 800fa04:	1ffffc02 	.word	0x1ffffc02
 800fa08:	40012708 	.word	0x40012708
 800fa0c:	ffc3ffff 	.word	0xffc3ffff
 800fa10:	07ffff04 	.word	0x07ffff04

0800fa14 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800fa14:	b5b0      	push	{r4, r5, r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	0018      	movs	r0, r3
 800fa22:	f7ff fe3d 	bl	800f6a0 <LL_ADC_REG_IsConversionOngoing>
 800fa26:	1e03      	subs	r3, r0, #0
 800fa28:	d135      	bne.n	800fa96 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2254      	movs	r2, #84	; 0x54
 800fa2e:	5c9b      	ldrb	r3, [r3, r2]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d101      	bne.n	800fa38 <HAL_ADC_Start+0x24>
 800fa34:	2302      	movs	r3, #2
 800fa36:	e035      	b.n	800faa4 <HAL_ADC_Start+0x90>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2254      	movs	r2, #84	; 0x54
 800fa3c:	2101      	movs	r1, #1
 800fa3e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800fa40:	250f      	movs	r5, #15
 800fa42:	197c      	adds	r4, r7, r5
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	0018      	movs	r0, r3
 800fa48:	f000 fb28 	bl	801009c <ADC_Enable>
 800fa4c:	0003      	movs	r3, r0
 800fa4e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800fa50:	197b      	adds	r3, r7, r5
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d119      	bne.n	800fa8c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa5c:	4a13      	ldr	r2, [pc, #76]	; (800faac <HAL_ADC_Start+0x98>)
 800fa5e:	4013      	ands	r3, r2
 800fa60:	2280      	movs	r2, #128	; 0x80
 800fa62:	0052      	lsls	r2, r2, #1
 800fa64:	431a      	orrs	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	221c      	movs	r2, #28
 800fa76:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2254      	movs	r2, #84	; 0x54
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	0018      	movs	r0, r3
 800fa86:	f7ff fde7 	bl	800f658 <LL_ADC_REG_StartConversion>
 800fa8a:	e008      	b.n	800fa9e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2254      	movs	r2, #84	; 0x54
 800fa90:	2100      	movs	r1, #0
 800fa92:	5499      	strb	r1, [r3, r2]
 800fa94:	e003      	b.n	800fa9e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800fa96:	230f      	movs	r3, #15
 800fa98:	18fb      	adds	r3, r7, r3
 800fa9a:	2202      	movs	r2, #2
 800fa9c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800fa9e:	230f      	movs	r3, #15
 800faa0:	18fb      	adds	r3, r7, r3
 800faa2:	781b      	ldrb	r3, [r3, #0]
}
 800faa4:	0018      	movs	r0, r3
 800faa6:	46bd      	mov	sp, r7
 800faa8:	b004      	add	sp, #16
 800faaa:	bdb0      	pop	{r4, r5, r7, pc}
 800faac:	fffff0fe 	.word	0xfffff0fe

0800fab0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800fab0:	b5b0      	push	{r4, r5, r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2254      	movs	r2, #84	; 0x54
 800fabc:	5c9b      	ldrb	r3, [r3, r2]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d101      	bne.n	800fac6 <HAL_ADC_Stop+0x16>
 800fac2:	2302      	movs	r3, #2
 800fac4:	e029      	b.n	800fb1a <HAL_ADC_Stop+0x6a>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2254      	movs	r2, #84	; 0x54
 800faca:	2101      	movs	r1, #1
 800facc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800face:	250f      	movs	r5, #15
 800fad0:	197c      	adds	r4, r7, r5
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	0018      	movs	r0, r3
 800fad6:	f000 fa9f 	bl	8010018 <ADC_ConversionStop>
 800fada:	0003      	movs	r3, r0
 800fadc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800fade:	197b      	adds	r3, r7, r5
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d112      	bne.n	800fb0c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800fae6:	197c      	adds	r4, r7, r5
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	0018      	movs	r0, r3
 800faec:	f000 fb5c 	bl	80101a8 <ADC_Disable>
 800faf0:	0003      	movs	r3, r0
 800faf2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800faf4:	197b      	adds	r3, r7, r5
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d107      	bne.n	800fb0c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb00:	4a08      	ldr	r2, [pc, #32]	; (800fb24 <HAL_ADC_Stop+0x74>)
 800fb02:	4013      	ands	r3, r2
 800fb04:	2201      	movs	r2, #1
 800fb06:	431a      	orrs	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2254      	movs	r2, #84	; 0x54
 800fb10:	2100      	movs	r1, #0
 800fb12:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800fb14:	230f      	movs	r3, #15
 800fb16:	18fb      	adds	r3, r7, r3
 800fb18:	781b      	ldrb	r3, [r3, #0]
}
 800fb1a:	0018      	movs	r0, r3
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	b004      	add	sp, #16
 800fb20:	bdb0      	pop	{r4, r5, r7, pc}
 800fb22:	46c0      	nop			; (mov r8, r8)
 800fb24:	fffffefe 	.word	0xfffffefe

0800fb28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	695b      	ldr	r3, [r3, #20]
 800fb36:	2b08      	cmp	r3, #8
 800fb38:	d102      	bne.n	800fb40 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800fb3a:	2308      	movs	r3, #8
 800fb3c:	60fb      	str	r3, [r7, #12]
 800fb3e:	e00f      	b.n	800fb60 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	2201      	movs	r2, #1
 800fb48:	4013      	ands	r3, r2
 800fb4a:	d007      	beq.n	800fb5c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb50:	2220      	movs	r2, #32
 800fb52:	431a      	orrs	r2, r3
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e072      	b.n	800fc42 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800fb5c:	2304      	movs	r3, #4
 800fb5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800fb60:	f7ff fc18 	bl	800f394 <HAL_GetTick>
 800fb64:	0003      	movs	r3, r0
 800fb66:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800fb68:	e01f      	b.n	800fbaa <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	d01c      	beq.n	800fbaa <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800fb70:	f7ff fc10 	bl	800f394 <HAL_GetTick>
 800fb74:	0002      	movs	r2, r0
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	683a      	ldr	r2, [r7, #0]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d302      	bcc.n	800fb86 <HAL_ADC_PollForConversion+0x5e>
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d111      	bne.n	800fbaa <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	68fa      	ldr	r2, [r7, #12]
 800fb8e:	4013      	ands	r3, r2
 800fb90:	d10b      	bne.n	800fbaa <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb96:	2204      	movs	r2, #4
 800fb98:	431a      	orrs	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2254      	movs	r2, #84	; 0x54
 800fba2:	2100      	movs	r1, #0
 800fba4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800fba6:	2303      	movs	r3, #3
 800fba8:	e04b      	b.n	800fc42 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	d0d9      	beq.n	800fb6a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbba:	2280      	movs	r2, #128	; 0x80
 800fbbc:	0092      	lsls	r2, r2, #2
 800fbbe:	431a      	orrs	r2, r3
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	0018      	movs	r0, r3
 800fbca:	f7ff fc66 	bl	800f49a <LL_ADC_REG_IsTriggerSourceSWStart>
 800fbce:	1e03      	subs	r3, r0, #0
 800fbd0:	d02e      	beq.n	800fc30 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7e9b      	ldrb	r3, [r3, #26]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d12a      	bne.n	800fc30 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2208      	movs	r2, #8
 800fbe2:	4013      	ands	r3, r2
 800fbe4:	2b08      	cmp	r3, #8
 800fbe6:	d123      	bne.n	800fc30 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	0018      	movs	r0, r3
 800fbee:	f7ff fd57 	bl	800f6a0 <LL_ADC_REG_IsConversionOngoing>
 800fbf2:	1e03      	subs	r3, r0, #0
 800fbf4:	d110      	bne.n	800fc18 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	210c      	movs	r1, #12
 800fc02:	438a      	bics	r2, r1
 800fc04:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc0a:	4a10      	ldr	r2, [pc, #64]	; (800fc4c <HAL_ADC_PollForConversion+0x124>)
 800fc0c:	4013      	ands	r3, r2
 800fc0e:	2201      	movs	r2, #1
 800fc10:	431a      	orrs	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	659a      	str	r2, [r3, #88]	; 0x58
 800fc16:	e00b      	b.n	800fc30 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc1c:	2220      	movs	r2, #32
 800fc1e:	431a      	orrs	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc28:	2201      	movs	r2, #1
 800fc2a:	431a      	orrs	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	7e1b      	ldrb	r3, [r3, #24]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d103      	bne.n	800fc40 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	220c      	movs	r2, #12
 800fc3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	0018      	movs	r0, r3
 800fc44:	46bd      	mov	sp, r7
 800fc46:	b004      	add	sp, #16
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	46c0      	nop			; (mov r8, r8)
 800fc4c:	fffffefe 	.word	0xfffffefe

0800fc50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800fc5e:	0018      	movs	r0, r3
 800fc60:	46bd      	mov	sp, r7
 800fc62:	b002      	add	sp, #8
 800fc64:	bd80      	pop	{r7, pc}
	...

0800fc68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc72:	2317      	movs	r3, #23
 800fc74:	18fb      	adds	r3, r7, r3
 800fc76:	2200      	movs	r2, #0
 800fc78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2254      	movs	r2, #84	; 0x54
 800fc82:	5c9b      	ldrb	r3, [r3, r2]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d101      	bne.n	800fc8c <HAL_ADC_ConfigChannel+0x24>
 800fc88:	2302      	movs	r3, #2
 800fc8a:	e1c0      	b.n	801000e <HAL_ADC_ConfigChannel+0x3a6>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2254      	movs	r2, #84	; 0x54
 800fc90:	2101      	movs	r1, #1
 800fc92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	0018      	movs	r0, r3
 800fc9a:	f7ff fd01 	bl	800f6a0 <LL_ADC_REG_IsConversionOngoing>
 800fc9e:	1e03      	subs	r3, r0, #0
 800fca0:	d000      	beq.n	800fca4 <HAL_ADC_ConfigChannel+0x3c>
 800fca2:	e1a3      	b.n	800ffec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	2b02      	cmp	r3, #2
 800fcaa:	d100      	bne.n	800fcae <HAL_ADC_ConfigChannel+0x46>
 800fcac:	e143      	b.n	800ff36 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	691a      	ldr	r2, [r3, #16]
 800fcb2:	2380      	movs	r3, #128	; 0x80
 800fcb4:	061b      	lsls	r3, r3, #24
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d004      	beq.n	800fcc4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800fcbe:	4ac1      	ldr	r2, [pc, #772]	; (800ffc4 <HAL_ADC_ConfigChannel+0x35c>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d108      	bne.n	800fcd6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	0019      	movs	r1, r3
 800fcce:	0010      	movs	r0, r2
 800fcd0:	f7ff fc14 	bl	800f4fc <LL_ADC_REG_SetSequencerChAdd>
 800fcd4:	e0c9      	b.n	800fe6a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	211f      	movs	r1, #31
 800fce0:	400b      	ands	r3, r1
 800fce2:	210f      	movs	r1, #15
 800fce4:	4099      	lsls	r1, r3
 800fce6:	000b      	movs	r3, r1
 800fce8:	43db      	mvns	r3, r3
 800fcea:	4013      	ands	r3, r2
 800fcec:	0019      	movs	r1, r3
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	035b      	lsls	r3, r3, #13
 800fcf4:	0b5b      	lsrs	r3, r3, #13
 800fcf6:	d105      	bne.n	800fd04 <HAL_ADC_ConfigChannel+0x9c>
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	0e9b      	lsrs	r3, r3, #26
 800fcfe:	221f      	movs	r2, #31
 800fd00:	4013      	ands	r3, r2
 800fd02:	e098      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2201      	movs	r2, #1
 800fd0a:	4013      	ands	r3, r2
 800fd0c:	d000      	beq.n	800fd10 <HAL_ADC_ConfigChannel+0xa8>
 800fd0e:	e091      	b.n	800fe34 <HAL_ADC_ConfigChannel+0x1cc>
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2202      	movs	r2, #2
 800fd16:	4013      	ands	r3, r2
 800fd18:	d000      	beq.n	800fd1c <HAL_ADC_ConfigChannel+0xb4>
 800fd1a:	e089      	b.n	800fe30 <HAL_ADC_ConfigChannel+0x1c8>
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2204      	movs	r2, #4
 800fd22:	4013      	ands	r3, r2
 800fd24:	d000      	beq.n	800fd28 <HAL_ADC_ConfigChannel+0xc0>
 800fd26:	e081      	b.n	800fe2c <HAL_ADC_ConfigChannel+0x1c4>
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2208      	movs	r2, #8
 800fd2e:	4013      	ands	r3, r2
 800fd30:	d000      	beq.n	800fd34 <HAL_ADC_ConfigChannel+0xcc>
 800fd32:	e079      	b.n	800fe28 <HAL_ADC_ConfigChannel+0x1c0>
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2210      	movs	r2, #16
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	d000      	beq.n	800fd40 <HAL_ADC_ConfigChannel+0xd8>
 800fd3e:	e071      	b.n	800fe24 <HAL_ADC_ConfigChannel+0x1bc>
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2220      	movs	r2, #32
 800fd46:	4013      	ands	r3, r2
 800fd48:	d000      	beq.n	800fd4c <HAL_ADC_ConfigChannel+0xe4>
 800fd4a:	e069      	b.n	800fe20 <HAL_ADC_ConfigChannel+0x1b8>
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2240      	movs	r2, #64	; 0x40
 800fd52:	4013      	ands	r3, r2
 800fd54:	d000      	beq.n	800fd58 <HAL_ADC_ConfigChannel+0xf0>
 800fd56:	e061      	b.n	800fe1c <HAL_ADC_ConfigChannel+0x1b4>
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2280      	movs	r2, #128	; 0x80
 800fd5e:	4013      	ands	r3, r2
 800fd60:	d000      	beq.n	800fd64 <HAL_ADC_ConfigChannel+0xfc>
 800fd62:	e059      	b.n	800fe18 <HAL_ADC_ConfigChannel+0x1b0>
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	2380      	movs	r3, #128	; 0x80
 800fd6a:	005b      	lsls	r3, r3, #1
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	d151      	bne.n	800fe14 <HAL_ADC_ConfigChannel+0x1ac>
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	2380      	movs	r3, #128	; 0x80
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	4013      	ands	r3, r2
 800fd7a:	d149      	bne.n	800fe10 <HAL_ADC_ConfigChannel+0x1a8>
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	2380      	movs	r3, #128	; 0x80
 800fd82:	00db      	lsls	r3, r3, #3
 800fd84:	4013      	ands	r3, r2
 800fd86:	d141      	bne.n	800fe0c <HAL_ADC_ConfigChannel+0x1a4>
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	2380      	movs	r3, #128	; 0x80
 800fd8e:	011b      	lsls	r3, r3, #4
 800fd90:	4013      	ands	r3, r2
 800fd92:	d139      	bne.n	800fe08 <HAL_ADC_ConfigChannel+0x1a0>
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	2380      	movs	r3, #128	; 0x80
 800fd9a:	015b      	lsls	r3, r3, #5
 800fd9c:	4013      	ands	r3, r2
 800fd9e:	d131      	bne.n	800fe04 <HAL_ADC_ConfigChannel+0x19c>
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	2380      	movs	r3, #128	; 0x80
 800fda6:	019b      	lsls	r3, r3, #6
 800fda8:	4013      	ands	r3, r2
 800fdaa:	d129      	bne.n	800fe00 <HAL_ADC_ConfigChannel+0x198>
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	2380      	movs	r3, #128	; 0x80
 800fdb2:	01db      	lsls	r3, r3, #7
 800fdb4:	4013      	ands	r3, r2
 800fdb6:	d121      	bne.n	800fdfc <HAL_ADC_ConfigChannel+0x194>
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	2380      	movs	r3, #128	; 0x80
 800fdbe:	021b      	lsls	r3, r3, #8
 800fdc0:	4013      	ands	r3, r2
 800fdc2:	d119      	bne.n	800fdf8 <HAL_ADC_ConfigChannel+0x190>
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	2380      	movs	r3, #128	; 0x80
 800fdca:	025b      	lsls	r3, r3, #9
 800fdcc:	4013      	ands	r3, r2
 800fdce:	d111      	bne.n	800fdf4 <HAL_ADC_ConfigChannel+0x18c>
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	2380      	movs	r3, #128	; 0x80
 800fdd6:	029b      	lsls	r3, r3, #10
 800fdd8:	4013      	ands	r3, r2
 800fdda:	d109      	bne.n	800fdf0 <HAL_ADC_ConfigChannel+0x188>
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	2380      	movs	r3, #128	; 0x80
 800fde2:	02db      	lsls	r3, r3, #11
 800fde4:	4013      	ands	r3, r2
 800fde6:	d001      	beq.n	800fdec <HAL_ADC_ConfigChannel+0x184>
 800fde8:	2312      	movs	r3, #18
 800fdea:	e024      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fdec:	2300      	movs	r3, #0
 800fdee:	e022      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fdf0:	2311      	movs	r3, #17
 800fdf2:	e020      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fdf4:	2310      	movs	r3, #16
 800fdf6:	e01e      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fdf8:	230f      	movs	r3, #15
 800fdfa:	e01c      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fdfc:	230e      	movs	r3, #14
 800fdfe:	e01a      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe00:	230d      	movs	r3, #13
 800fe02:	e018      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe04:	230c      	movs	r3, #12
 800fe06:	e016      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe08:	230b      	movs	r3, #11
 800fe0a:	e014      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe0c:	230a      	movs	r3, #10
 800fe0e:	e012      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe10:	2309      	movs	r3, #9
 800fe12:	e010      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe14:	2308      	movs	r3, #8
 800fe16:	e00e      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe18:	2307      	movs	r3, #7
 800fe1a:	e00c      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe1c:	2306      	movs	r3, #6
 800fe1e:	e00a      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe20:	2305      	movs	r3, #5
 800fe22:	e008      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe24:	2304      	movs	r3, #4
 800fe26:	e006      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe28:	2303      	movs	r3, #3
 800fe2a:	e004      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	e002      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe30:	2301      	movs	r3, #1
 800fe32:	e000      	b.n	800fe36 <HAL_ADC_ConfigChannel+0x1ce>
 800fe34:	2300      	movs	r3, #0
 800fe36:	683a      	ldr	r2, [r7, #0]
 800fe38:	6852      	ldr	r2, [r2, #4]
 800fe3a:	201f      	movs	r0, #31
 800fe3c:	4002      	ands	r2, r0
 800fe3e:	4093      	lsls	r3, r2
 800fe40:	000a      	movs	r2, r1
 800fe42:	431a      	orrs	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	089b      	lsrs	r3, r3, #2
 800fe4e:	1c5a      	adds	r2, r3, #1
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d808      	bhi.n	800fe6a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6818      	ldr	r0, [r3, #0]
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	6859      	ldr	r1, [r3, #4]
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	001a      	movs	r2, r3
 800fe66:	f7ff fb29 	bl	800f4bc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6818      	ldr	r0, [r3, #0]
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	6819      	ldr	r1, [r3, #0]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	001a      	movs	r2, r3
 800fe78:	f7ff fb64 	bl	800f544 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	db00      	blt.n	800fe86 <HAL_ADC_ConfigChannel+0x21e>
 800fe84:	e0bc      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800fe86:	4b50      	ldr	r3, [pc, #320]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800fe88:	0018      	movs	r0, r3
 800fe8a:	f7ff fac5 	bl	800f418 <LL_ADC_GetCommonPathInternalCh>
 800fe8e:	0003      	movs	r3, r0
 800fe90:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4a4d      	ldr	r2, [pc, #308]	; (800ffcc <HAL_ADC_ConfigChannel+0x364>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d122      	bne.n	800fee2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	2380      	movs	r3, #128	; 0x80
 800fea0:	041b      	lsls	r3, r3, #16
 800fea2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800fea4:	d11d      	bne.n	800fee2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	2280      	movs	r2, #128	; 0x80
 800feaa:	0412      	lsls	r2, r2, #16
 800feac:	4313      	orrs	r3, r2
 800feae:	4a46      	ldr	r2, [pc, #280]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800feb0:	0019      	movs	r1, r3
 800feb2:	0010      	movs	r0, r2
 800feb4:	f7ff fa9c 	bl	800f3f0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800feb8:	4b45      	ldr	r3, [pc, #276]	; (800ffd0 <HAL_ADC_ConfigChannel+0x368>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4945      	ldr	r1, [pc, #276]	; (800ffd4 <HAL_ADC_ConfigChannel+0x36c>)
 800febe:	0018      	movs	r0, r3
 800fec0:	f7f2 f93a 	bl	8002138 <__udivsi3>
 800fec4:	0003      	movs	r3, r0
 800fec6:	1c5a      	adds	r2, r3, #1
 800fec8:	0013      	movs	r3, r2
 800feca:	005b      	lsls	r3, r3, #1
 800fecc:	189b      	adds	r3, r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800fed2:	e002      	b.n	800feda <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3b01      	subs	r3, #1
 800fed8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1f9      	bne.n	800fed4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800fee0:	e08e      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a3c      	ldr	r2, [pc, #240]	; (800ffd8 <HAL_ADC_ConfigChannel+0x370>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d10e      	bne.n	800ff0a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800feec:	693a      	ldr	r2, [r7, #16]
 800feee:	2380      	movs	r3, #128	; 0x80
 800fef0:	045b      	lsls	r3, r3, #17
 800fef2:	4013      	ands	r3, r2
 800fef4:	d109      	bne.n	800ff0a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2280      	movs	r2, #128	; 0x80
 800fefa:	0452      	lsls	r2, r2, #17
 800fefc:	4313      	orrs	r3, r2
 800fefe:	4a32      	ldr	r2, [pc, #200]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800ff00:	0019      	movs	r1, r3
 800ff02:	0010      	movs	r0, r2
 800ff04:	f7ff fa74 	bl	800f3f0 <LL_ADC_SetCommonPathInternalCh>
 800ff08:	e07a      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	4a33      	ldr	r2, [pc, #204]	; (800ffdc <HAL_ADC_ConfigChannel+0x374>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d000      	beq.n	800ff16 <HAL_ADC_ConfigChannel+0x2ae>
 800ff14:	e074      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ff16:	693a      	ldr	r2, [r7, #16]
 800ff18:	2380      	movs	r3, #128	; 0x80
 800ff1a:	03db      	lsls	r3, r3, #15
 800ff1c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800ff1e:	d000      	beq.n	800ff22 <HAL_ADC_ConfigChannel+0x2ba>
 800ff20:	e06e      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	2280      	movs	r2, #128	; 0x80
 800ff26:	03d2      	lsls	r2, r2, #15
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	4a27      	ldr	r2, [pc, #156]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800ff2c:	0019      	movs	r1, r3
 800ff2e:	0010      	movs	r0, r2
 800ff30:	f7ff fa5e 	bl	800f3f0 <LL_ADC_SetCommonPathInternalCh>
 800ff34:	e064      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	691a      	ldr	r2, [r3, #16]
 800ff3a:	2380      	movs	r3, #128	; 0x80
 800ff3c:	061b      	lsls	r3, r3, #24
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d004      	beq.n	800ff4c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800ff46:	4a1f      	ldr	r2, [pc, #124]	; (800ffc4 <HAL_ADC_ConfigChannel+0x35c>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d107      	bne.n	800ff5c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	0019      	movs	r1, r3
 800ff56:	0010      	movs	r0, r2
 800ff58:	f7ff fae1 	bl	800f51e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	da4d      	bge.n	8010000 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ff64:	4b18      	ldr	r3, [pc, #96]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800ff66:	0018      	movs	r0, r3
 800ff68:	f7ff fa56 	bl	800f418 <LL_ADC_GetCommonPathInternalCh>
 800ff6c:	0003      	movs	r3, r0
 800ff6e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a15      	ldr	r2, [pc, #84]	; (800ffcc <HAL_ADC_ConfigChannel+0x364>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d108      	bne.n	800ff8c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	4a18      	ldr	r2, [pc, #96]	; (800ffe0 <HAL_ADC_ConfigChannel+0x378>)
 800ff7e:	4013      	ands	r3, r2
 800ff80:	4a11      	ldr	r2, [pc, #68]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800ff82:	0019      	movs	r1, r3
 800ff84:	0010      	movs	r0, r2
 800ff86:	f7ff fa33 	bl	800f3f0 <LL_ADC_SetCommonPathInternalCh>
 800ff8a:	e039      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4a11      	ldr	r2, [pc, #68]	; (800ffd8 <HAL_ADC_ConfigChannel+0x370>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d108      	bne.n	800ffa8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	4a12      	ldr	r2, [pc, #72]	; (800ffe4 <HAL_ADC_ConfigChannel+0x37c>)
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	4a0a      	ldr	r2, [pc, #40]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800ff9e:	0019      	movs	r1, r3
 800ffa0:	0010      	movs	r0, r2
 800ffa2:	f7ff fa25 	bl	800f3f0 <LL_ADC_SetCommonPathInternalCh>
 800ffa6:	e02b      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a0b      	ldr	r2, [pc, #44]	; (800ffdc <HAL_ADC_ConfigChannel+0x374>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d126      	bne.n	8010000 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	4a0c      	ldr	r2, [pc, #48]	; (800ffe8 <HAL_ADC_ConfigChannel+0x380>)
 800ffb6:	4013      	ands	r3, r2
 800ffb8:	4a03      	ldr	r2, [pc, #12]	; (800ffc8 <HAL_ADC_ConfigChannel+0x360>)
 800ffba:	0019      	movs	r1, r3
 800ffbc:	0010      	movs	r0, r2
 800ffbe:	f7ff fa17 	bl	800f3f0 <LL_ADC_SetCommonPathInternalCh>
 800ffc2:	e01d      	b.n	8010000 <HAL_ADC_ConfigChannel+0x398>
 800ffc4:	80000004 	.word	0x80000004
 800ffc8:	40012708 	.word	0x40012708
 800ffcc:	b0001000 	.word	0xb0001000
 800ffd0:	20005028 	.word	0x20005028
 800ffd4:	00030d40 	.word	0x00030d40
 800ffd8:	b8004000 	.word	0xb8004000
 800ffdc:	b4002000 	.word	0xb4002000
 800ffe0:	ff7fffff 	.word	0xff7fffff
 800ffe4:	feffffff 	.word	0xfeffffff
 800ffe8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff0:	2220      	movs	r2, #32
 800fff2:	431a      	orrs	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800fff8:	2317      	movs	r3, #23
 800fffa:	18fb      	adds	r3, r7, r3
 800fffc:	2201      	movs	r2, #1
 800fffe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2254      	movs	r2, #84	; 0x54
 8010004:	2100      	movs	r1, #0
 8010006:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8010008:	2317      	movs	r3, #23
 801000a:	18fb      	adds	r3, r7, r3
 801000c:	781b      	ldrb	r3, [r3, #0]
}
 801000e:	0018      	movs	r0, r3
 8010010:	46bd      	mov	sp, r7
 8010012:	b006      	add	sp, #24
 8010014:	bd80      	pop	{r7, pc}
 8010016:	46c0      	nop			; (mov r8, r8)

08010018 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	0018      	movs	r0, r3
 8010026:	f7ff fb3b 	bl	800f6a0 <LL_ADC_REG_IsConversionOngoing>
 801002a:	1e03      	subs	r3, r0, #0
 801002c:	d031      	beq.n	8010092 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	0018      	movs	r0, r3
 8010034:	f7ff faff 	bl	800f636 <LL_ADC_IsDisableOngoing>
 8010038:	1e03      	subs	r3, r0, #0
 801003a:	d104      	bne.n	8010046 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	0018      	movs	r0, r3
 8010042:	f7ff fb1b 	bl	800f67c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8010046:	f7ff f9a5 	bl	800f394 <HAL_GetTick>
 801004a:	0003      	movs	r3, r0
 801004c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 801004e:	e01a      	b.n	8010086 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8010050:	f7ff f9a0 	bl	800f394 <HAL_GetTick>
 8010054:	0002      	movs	r2, r0
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	2b02      	cmp	r3, #2
 801005c:	d913      	bls.n	8010086 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	2204      	movs	r2, #4
 8010066:	4013      	ands	r3, r2
 8010068:	d00d      	beq.n	8010086 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801006e:	2210      	movs	r2, #16
 8010070:	431a      	orrs	r2, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801007a:	2201      	movs	r2, #1
 801007c:	431a      	orrs	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	e006      	b.n	8010094 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	689b      	ldr	r3, [r3, #8]
 801008c:	2204      	movs	r2, #4
 801008e:	4013      	ands	r3, r2
 8010090:	d1de      	bne.n	8010050 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8010092:	2300      	movs	r3, #0
}
 8010094:	0018      	movs	r0, r3
 8010096:	46bd      	mov	sp, r7
 8010098:	b004      	add	sp, #16
 801009a:	bd80      	pop	{r7, pc}

0801009c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80100a4:	2300      	movs	r3, #0
 80100a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	0018      	movs	r0, r3
 80100ae:	f7ff fab1 	bl	800f614 <LL_ADC_IsEnabled>
 80100b2:	1e03      	subs	r3, r0, #0
 80100b4:	d000      	beq.n	80100b8 <ADC_Enable+0x1c>
 80100b6:	e069      	b.n	801018c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	4a36      	ldr	r2, [pc, #216]	; (8010198 <ADC_Enable+0xfc>)
 80100c0:	4013      	ands	r3, r2
 80100c2:	d00d      	beq.n	80100e0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100c8:	2210      	movs	r2, #16
 80100ca:	431a      	orrs	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100d4:	2201      	movs	r2, #1
 80100d6:	431a      	orrs	r2, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80100dc:	2301      	movs	r3, #1
 80100de:	e056      	b.n	801018e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	0018      	movs	r0, r3
 80100e6:	f7ff fa71 	bl	800f5cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80100ea:	4b2c      	ldr	r3, [pc, #176]	; (801019c <ADC_Enable+0x100>)
 80100ec:	0018      	movs	r0, r3
 80100ee:	f7ff f993 	bl	800f418 <LL_ADC_GetCommonPathInternalCh>
 80100f2:	0002      	movs	r2, r0
 80100f4:	2380      	movs	r3, #128	; 0x80
 80100f6:	041b      	lsls	r3, r3, #16
 80100f8:	4013      	ands	r3, r2
 80100fa:	d00f      	beq.n	801011c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80100fc:	4b28      	ldr	r3, [pc, #160]	; (80101a0 <ADC_Enable+0x104>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4928      	ldr	r1, [pc, #160]	; (80101a4 <ADC_Enable+0x108>)
 8010102:	0018      	movs	r0, r3
 8010104:	f7f2 f818 	bl	8002138 <__udivsi3>
 8010108:	0003      	movs	r3, r0
 801010a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 801010c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801010e:	e002      	b.n	8010116 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	3b01      	subs	r3, #1
 8010114:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1f9      	bne.n	8010110 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	7e5b      	ldrb	r3, [r3, #25]
 8010120:	2b01      	cmp	r3, #1
 8010122:	d033      	beq.n	801018c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8010124:	f7ff f936 	bl	800f394 <HAL_GetTick>
 8010128:	0003      	movs	r3, r0
 801012a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801012c:	e027      	b.n	801017e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	0018      	movs	r0, r3
 8010134:	f7ff fa6e 	bl	800f614 <LL_ADC_IsEnabled>
 8010138:	1e03      	subs	r3, r0, #0
 801013a:	d104      	bne.n	8010146 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	0018      	movs	r0, r3
 8010142:	f7ff fa43 	bl	800f5cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010146:	f7ff f925 	bl	800f394 <HAL_GetTick>
 801014a:	0002      	movs	r2, r0
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	1ad3      	subs	r3, r2, r3
 8010150:	2b02      	cmp	r3, #2
 8010152:	d914      	bls.n	801017e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2201      	movs	r2, #1
 801015c:	4013      	ands	r3, r2
 801015e:	2b01      	cmp	r3, #1
 8010160:	d00d      	beq.n	801017e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010166:	2210      	movs	r2, #16
 8010168:	431a      	orrs	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010172:	2201      	movs	r2, #1
 8010174:	431a      	orrs	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 801017a:	2301      	movs	r3, #1
 801017c:	e007      	b.n	801018e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2201      	movs	r2, #1
 8010186:	4013      	ands	r3, r2
 8010188:	2b01      	cmp	r3, #1
 801018a:	d1d0      	bne.n	801012e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801018c:	2300      	movs	r3, #0
}
 801018e:	0018      	movs	r0, r3
 8010190:	46bd      	mov	sp, r7
 8010192:	b004      	add	sp, #16
 8010194:	bd80      	pop	{r7, pc}
 8010196:	46c0      	nop			; (mov r8, r8)
 8010198:	80000017 	.word	0x80000017
 801019c:	40012708 	.word	0x40012708
 80101a0:	20005028 	.word	0x20005028
 80101a4:	00030d40 	.word	0x00030d40

080101a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	0018      	movs	r0, r3
 80101b6:	f7ff fa3e 	bl	800f636 <LL_ADC_IsDisableOngoing>
 80101ba:	0003      	movs	r3, r0
 80101bc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	0018      	movs	r0, r3
 80101c4:	f7ff fa26 	bl	800f614 <LL_ADC_IsEnabled>
 80101c8:	1e03      	subs	r3, r0, #0
 80101ca:	d046      	beq.n	801025a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d143      	bne.n	801025a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	2205      	movs	r2, #5
 80101da:	4013      	ands	r3, r2
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d10d      	bne.n	80101fc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	0018      	movs	r0, r3
 80101e6:	f7ff fa03 	bl	800f5f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2203      	movs	r2, #3
 80101f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80101f2:	f7ff f8cf 	bl	800f394 <HAL_GetTick>
 80101f6:	0003      	movs	r3, r0
 80101f8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80101fa:	e028      	b.n	801024e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010200:	2210      	movs	r2, #16
 8010202:	431a      	orrs	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801020c:	2201      	movs	r2, #1
 801020e:	431a      	orrs	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8010214:	2301      	movs	r3, #1
 8010216:	e021      	b.n	801025c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010218:	f7ff f8bc 	bl	800f394 <HAL_GetTick>
 801021c:	0002      	movs	r2, r0
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	2b02      	cmp	r3, #2
 8010224:	d913      	bls.n	801024e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	2201      	movs	r2, #1
 801022e:	4013      	ands	r3, r2
 8010230:	d00d      	beq.n	801024e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010236:	2210      	movs	r2, #16
 8010238:	431a      	orrs	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010242:	2201      	movs	r2, #1
 8010244:	431a      	orrs	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 801024a:	2301      	movs	r3, #1
 801024c:	e006      	b.n	801025c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	2201      	movs	r2, #1
 8010256:	4013      	ands	r3, r2
 8010258:	d1de      	bne.n	8010218 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801025a:	2300      	movs	r3, #0
}
 801025c:	0018      	movs	r0, r3
 801025e:	46bd      	mov	sp, r7
 8010260:	b004      	add	sp, #16
 8010262:	bd80      	pop	{r7, pc}

08010264 <LL_ADC_GetCommonClock>:
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	23f0      	movs	r3, #240	; 0xf0
 8010272:	039b      	lsls	r3, r3, #14
 8010274:	4013      	ands	r3, r2
}
 8010276:	0018      	movs	r0, r3
 8010278:	46bd      	mov	sp, r7
 801027a:	b002      	add	sp, #8
 801027c:	bd80      	pop	{r7, pc}

0801027e <LL_ADC_GetClock>:
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b082      	sub	sp, #8
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	691b      	ldr	r3, [r3, #16]
 801028a:	0f9b      	lsrs	r3, r3, #30
 801028c:	079b      	lsls	r3, r3, #30
}
 801028e:	0018      	movs	r0, r3
 8010290:	46bd      	mov	sp, r7
 8010292:	b002      	add	sp, #8
 8010294:	bd80      	pop	{r7, pc}

08010296 <LL_ADC_SetCalibrationFactor>:
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b082      	sub	sp, #8
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	22b4      	movs	r2, #180	; 0xb4
 80102a4:	589b      	ldr	r3, [r3, r2]
 80102a6:	227f      	movs	r2, #127	; 0x7f
 80102a8:	4393      	bics	r3, r2
 80102aa:	001a      	movs	r2, r3
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	431a      	orrs	r2, r3
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	21b4      	movs	r1, #180	; 0xb4
 80102b4:	505a      	str	r2, [r3, r1]
}
 80102b6:	46c0      	nop			; (mov r8, r8)
 80102b8:	46bd      	mov	sp, r7
 80102ba:	b002      	add	sp, #8
 80102bc:	bd80      	pop	{r7, pc}

080102be <LL_ADC_GetCalibrationFactor>:
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b082      	sub	sp, #8
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	22b4      	movs	r2, #180	; 0xb4
 80102ca:	589b      	ldr	r3, [r3, r2]
 80102cc:	227f      	movs	r2, #127	; 0x7f
 80102ce:	4013      	ands	r3, r2
}
 80102d0:	0018      	movs	r0, r3
 80102d2:	46bd      	mov	sp, r7
 80102d4:	b002      	add	sp, #8
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <LL_ADC_Enable>:
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	4a04      	ldr	r2, [pc, #16]	; (80102f8 <LL_ADC_Enable+0x20>)
 80102e6:	4013      	ands	r3, r2
 80102e8:	2201      	movs	r2, #1
 80102ea:	431a      	orrs	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	609a      	str	r2, [r3, #8]
}
 80102f0:	46c0      	nop			; (mov r8, r8)
 80102f2:	46bd      	mov	sp, r7
 80102f4:	b002      	add	sp, #8
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	7fffffe8 	.word	0x7fffffe8

080102fc <LL_ADC_Disable>:
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	4a04      	ldr	r2, [pc, #16]	; (801031c <LL_ADC_Disable+0x20>)
 801030a:	4013      	ands	r3, r2
 801030c:	2202      	movs	r2, #2
 801030e:	431a      	orrs	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	609a      	str	r2, [r3, #8]
}
 8010314:	46c0      	nop			; (mov r8, r8)
 8010316:	46bd      	mov	sp, r7
 8010318:	b002      	add	sp, #8
 801031a:	bd80      	pop	{r7, pc}
 801031c:	7fffffe8 	.word	0x7fffffe8

08010320 <LL_ADC_IsEnabled>:
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	2201      	movs	r2, #1
 801032e:	4013      	ands	r3, r2
 8010330:	2b01      	cmp	r3, #1
 8010332:	d101      	bne.n	8010338 <LL_ADC_IsEnabled+0x18>
 8010334:	2301      	movs	r3, #1
 8010336:	e000      	b.n	801033a <LL_ADC_IsEnabled+0x1a>
 8010338:	2300      	movs	r3, #0
}
 801033a:	0018      	movs	r0, r3
 801033c:	46bd      	mov	sp, r7
 801033e:	b002      	add	sp, #8
 8010340:	bd80      	pop	{r7, pc}
	...

08010344 <LL_ADC_StartCalibration>:
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	689b      	ldr	r3, [r3, #8]
 8010350:	4a05      	ldr	r2, [pc, #20]	; (8010368 <LL_ADC_StartCalibration+0x24>)
 8010352:	4013      	ands	r3, r2
 8010354:	2280      	movs	r2, #128	; 0x80
 8010356:	0612      	lsls	r2, r2, #24
 8010358:	431a      	orrs	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	609a      	str	r2, [r3, #8]
}
 801035e:	46c0      	nop			; (mov r8, r8)
 8010360:	46bd      	mov	sp, r7
 8010362:	b002      	add	sp, #8
 8010364:	bd80      	pop	{r7, pc}
 8010366:	46c0      	nop			; (mov r8, r8)
 8010368:	7fffffe8 	.word	0x7fffffe8

0801036c <LL_ADC_IsCalibrationOnGoing>:
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	0fdb      	lsrs	r3, r3, #31
 801037a:	07da      	lsls	r2, r3, #31
 801037c:	2380      	movs	r3, #128	; 0x80
 801037e:	061b      	lsls	r3, r3, #24
 8010380:	429a      	cmp	r2, r3
 8010382:	d101      	bne.n	8010388 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8010384:	2301      	movs	r3, #1
 8010386:	e000      	b.n	801038a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8010388:	2300      	movs	r3, #0
}
 801038a:	0018      	movs	r0, r3
 801038c:	46bd      	mov	sp, r7
 801038e:	b002      	add	sp, #8
 8010390:	bd80      	pop	{r7, pc}
	...

08010394 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8010394:	b590      	push	{r4, r7, lr}
 8010396:	b08b      	sub	sp, #44	; 0x2c
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801039c:	2300      	movs	r3, #0
 801039e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80103a0:	2300      	movs	r3, #0
 80103a2:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2254      	movs	r2, #84	; 0x54
 80103a8:	5c9b      	ldrb	r3, [r3, r2]
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d101      	bne.n	80103b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80103ae:	2302      	movs	r3, #2
 80103b0:	e0dd      	b.n	801056e <HAL_ADCEx_Calibration_Start+0x1da>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2254      	movs	r2, #84	; 0x54
 80103b6:	2101      	movs	r1, #1
 80103b8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80103ba:	231f      	movs	r3, #31
 80103bc:	18fc      	adds	r4, r7, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	0018      	movs	r0, r3
 80103c2:	f7ff fef1 	bl	80101a8 <ADC_Disable>
 80103c6:	0003      	movs	r3, r0
 80103c8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	0018      	movs	r0, r3
 80103d0:	f7ff ffa6 	bl	8010320 <LL_ADC_IsEnabled>
 80103d4:	1e03      	subs	r3, r0, #0
 80103d6:	d000      	beq.n	80103da <HAL_ADCEx_Calibration_Start+0x46>
 80103d8:	e0bc      	b.n	8010554 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103de:	4a66      	ldr	r2, [pc, #408]	; (8010578 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80103e0:	4013      	ands	r3, r2
 80103e2:	2202      	movs	r2, #2
 80103e4:	431a      	orrs	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	4a62      	ldr	r2, [pc, #392]	; (801057c <HAL_ADCEx_Calibration_Start+0x1e8>)
 80103f2:	4013      	ands	r3, r2
 80103f4:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	68da      	ldr	r2, [r3, #12]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	495f      	ldr	r1, [pc, #380]	; (8010580 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8010402:	400a      	ands	r2, r1
 8010404:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8010406:	2300      	movs	r3, #0
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
 801040a:	e02d      	b.n	8010468 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	0018      	movs	r0, r3
 8010412:	f7ff ff97 	bl	8010344 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8010416:	e014      	b.n	8010442 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	3301      	adds	r3, #1
 801041c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	4a58      	ldr	r2, [pc, #352]	; (8010584 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d90d      	bls.n	8010442 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801042a:	2212      	movs	r2, #18
 801042c:	4393      	bics	r3, r2
 801042e:	2210      	movs	r2, #16
 8010430:	431a      	orrs	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2254      	movs	r2, #84	; 0x54
 801043a:	2100      	movs	r1, #0
 801043c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801043e:	2301      	movs	r3, #1
 8010440:	e095      	b.n	801056e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	0018      	movs	r0, r3
 8010448:	f7ff ff90 	bl	801036c <LL_ADC_IsCalibrationOnGoing>
 801044c:	1e03      	subs	r3, r0, #0
 801044e:	d1e3      	bne.n	8010418 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	0018      	movs	r0, r3
 8010456:	f7ff ff32 	bl	80102be <LL_ADC_GetCalibrationFactor>
 801045a:	0002      	movs	r2, r0
 801045c:	6a3b      	ldr	r3, [r7, #32]
 801045e:	189b      	adds	r3, r3, r2
 8010460:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8010462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010464:	3301      	adds	r3, #1
 8010466:	627b      	str	r3, [r7, #36]	; 0x24
 8010468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046a:	2b07      	cmp	r3, #7
 801046c:	d9ce      	bls.n	801040c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 801046e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010470:	6a38      	ldr	r0, [r7, #32]
 8010472:	f7f1 fe61 	bl	8002138 <__udivsi3>
 8010476:	0003      	movs	r3, r0
 8010478:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	0018      	movs	r0, r3
 8010480:	f7ff ff2a 	bl	80102d8 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	0018      	movs	r0, r3
 801048a:	f7ff fef8 	bl	801027e <LL_ADC_GetClock>
 801048e:	1e03      	subs	r3, r0, #0
 8010490:	d11b      	bne.n	80104ca <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010492:	4b3d      	ldr	r3, [pc, #244]	; (8010588 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8010494:	0018      	movs	r0, r3
 8010496:	f7ff fee5 	bl	8010264 <LL_ADC_GetCommonClock>
 801049a:	0003      	movs	r3, r0
 801049c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 801049e:	697a      	ldr	r2, [r7, #20]
 80104a0:	23e0      	movs	r3, #224	; 0xe0
 80104a2:	035b      	lsls	r3, r3, #13
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d310      	bcc.n	80104ca <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	0c9b      	lsrs	r3, r3, #18
 80104ac:	3b03      	subs	r3, #3
 80104ae:	2201      	movs	r2, #1
 80104b0:	409a      	lsls	r2, r3
 80104b2:	0013      	movs	r3, r2
 80104b4:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	085b      	lsrs	r3, r3, #1
 80104ba:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80104bc:	e002      	b.n	80104c4 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	3b01      	subs	r3, #1
 80104c2:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1f9      	bne.n	80104be <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	6a3a      	ldr	r2, [r7, #32]
 80104d0:	0011      	movs	r1, r2
 80104d2:	0018      	movs	r0, r3
 80104d4:	f7ff fedf 	bl	8010296 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	0018      	movs	r0, r3
 80104de:	f7ff ff0d 	bl	80102fc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80104e2:	f7fe ff57 	bl	800f394 <HAL_GetTick>
 80104e6:	0003      	movs	r3, r0
 80104e8:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80104ea:	e01b      	b.n	8010524 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80104ec:	f7fe ff52 	bl	800f394 <HAL_GetTick>
 80104f0:	0002      	movs	r2, r0
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	1ad3      	subs	r3, r2, r3
 80104f6:	2b02      	cmp	r3, #2
 80104f8:	d914      	bls.n	8010524 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	0018      	movs	r0, r3
 8010500:	f7ff ff0e 	bl	8010320 <LL_ADC_IsEnabled>
 8010504:	1e03      	subs	r3, r0, #0
 8010506:	d00d      	beq.n	8010524 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801050c:	2210      	movs	r2, #16
 801050e:	431a      	orrs	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010518:	2201      	movs	r2, #1
 801051a:	431a      	orrs	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	e024      	b.n	801056e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	0018      	movs	r0, r3
 801052a:	f7ff fef9 	bl	8010320 <LL_ADC_IsEnabled>
 801052e:	1e03      	subs	r3, r0, #0
 8010530:	d1dc      	bne.n	80104ec <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	68d9      	ldr	r1, [r3, #12]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	69ba      	ldr	r2, [r7, #24]
 801053e:	430a      	orrs	r2, r1
 8010540:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010546:	2203      	movs	r2, #3
 8010548:	4393      	bics	r3, r2
 801054a:	2201      	movs	r2, #1
 801054c:	431a      	orrs	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	659a      	str	r2, [r3, #88]	; 0x58
 8010552:	e005      	b.n	8010560 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010558:	2210      	movs	r2, #16
 801055a:	431a      	orrs	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2254      	movs	r2, #84	; 0x54
 8010564:	2100      	movs	r1, #0
 8010566:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8010568:	231f      	movs	r3, #31
 801056a:	18fb      	adds	r3, r7, r3
 801056c:	781b      	ldrb	r3, [r3, #0]
}
 801056e:	0018      	movs	r0, r3
 8010570:	46bd      	mov	sp, r7
 8010572:	b00b      	add	sp, #44	; 0x2c
 8010574:	bd90      	pop	{r4, r7, pc}
 8010576:	46c0      	nop			; (mov r8, r8)
 8010578:	fffffefd 	.word	0xfffffefd
 801057c:	00008003 	.word	0x00008003
 8010580:	ffff7ffc 	.word	0xffff7ffc
 8010584:	0002f1ff 	.word	0x0002f1ff
 8010588:	40012708 	.word	0x40012708

0801058c <__NVIC_EnableIRQ>:
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	0002      	movs	r2, r0
 8010594:	1dfb      	adds	r3, r7, #7
 8010596:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010598:	1dfb      	adds	r3, r7, #7
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b7f      	cmp	r3, #127	; 0x7f
 801059e:	d809      	bhi.n	80105b4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80105a0:	1dfb      	adds	r3, r7, #7
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	001a      	movs	r2, r3
 80105a6:	231f      	movs	r3, #31
 80105a8:	401a      	ands	r2, r3
 80105aa:	4b04      	ldr	r3, [pc, #16]	; (80105bc <__NVIC_EnableIRQ+0x30>)
 80105ac:	2101      	movs	r1, #1
 80105ae:	4091      	lsls	r1, r2
 80105b0:	000a      	movs	r2, r1
 80105b2:	601a      	str	r2, [r3, #0]
}
 80105b4:	46c0      	nop			; (mov r8, r8)
 80105b6:	46bd      	mov	sp, r7
 80105b8:	b002      	add	sp, #8
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	e000e100 	.word	0xe000e100

080105c0 <__NVIC_DisableIRQ>:
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	0002      	movs	r2, r0
 80105c8:	1dfb      	adds	r3, r7, #7
 80105ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80105cc:	1dfb      	adds	r3, r7, #7
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b7f      	cmp	r3, #127	; 0x7f
 80105d2:	d810      	bhi.n	80105f6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80105d4:	1dfb      	adds	r3, r7, #7
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	001a      	movs	r2, r3
 80105da:	231f      	movs	r3, #31
 80105dc:	4013      	ands	r3, r2
 80105de:	4908      	ldr	r1, [pc, #32]	; (8010600 <__NVIC_DisableIRQ+0x40>)
 80105e0:	2201      	movs	r2, #1
 80105e2:	409a      	lsls	r2, r3
 80105e4:	0013      	movs	r3, r2
 80105e6:	2280      	movs	r2, #128	; 0x80
 80105e8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80105ea:	f3bf 8f4f 	dsb	sy
}
 80105ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80105f0:	f3bf 8f6f 	isb	sy
}
 80105f4:	46c0      	nop			; (mov r8, r8)
}
 80105f6:	46c0      	nop			; (mov r8, r8)
 80105f8:	46bd      	mov	sp, r7
 80105fa:	b002      	add	sp, #8
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	46c0      	nop			; (mov r8, r8)
 8010600:	e000e100 	.word	0xe000e100

08010604 <__NVIC_SetPriority>:
{
 8010604:	b590      	push	{r4, r7, lr}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	0002      	movs	r2, r0
 801060c:	6039      	str	r1, [r7, #0]
 801060e:	1dfb      	adds	r3, r7, #7
 8010610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010612:	1dfb      	adds	r3, r7, #7
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	2b7f      	cmp	r3, #127	; 0x7f
 8010618:	d828      	bhi.n	801066c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801061a:	4a2f      	ldr	r2, [pc, #188]	; (80106d8 <__NVIC_SetPriority+0xd4>)
 801061c:	1dfb      	adds	r3, r7, #7
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	b25b      	sxtb	r3, r3
 8010622:	089b      	lsrs	r3, r3, #2
 8010624:	33c0      	adds	r3, #192	; 0xc0
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	589b      	ldr	r3, [r3, r2]
 801062a:	1dfa      	adds	r2, r7, #7
 801062c:	7812      	ldrb	r2, [r2, #0]
 801062e:	0011      	movs	r1, r2
 8010630:	2203      	movs	r2, #3
 8010632:	400a      	ands	r2, r1
 8010634:	00d2      	lsls	r2, r2, #3
 8010636:	21ff      	movs	r1, #255	; 0xff
 8010638:	4091      	lsls	r1, r2
 801063a:	000a      	movs	r2, r1
 801063c:	43d2      	mvns	r2, r2
 801063e:	401a      	ands	r2, r3
 8010640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	019b      	lsls	r3, r3, #6
 8010646:	22ff      	movs	r2, #255	; 0xff
 8010648:	401a      	ands	r2, r3
 801064a:	1dfb      	adds	r3, r7, #7
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	0018      	movs	r0, r3
 8010650:	2303      	movs	r3, #3
 8010652:	4003      	ands	r3, r0
 8010654:	00db      	lsls	r3, r3, #3
 8010656:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010658:	481f      	ldr	r0, [pc, #124]	; (80106d8 <__NVIC_SetPriority+0xd4>)
 801065a:	1dfb      	adds	r3, r7, #7
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	b25b      	sxtb	r3, r3
 8010660:	089b      	lsrs	r3, r3, #2
 8010662:	430a      	orrs	r2, r1
 8010664:	33c0      	adds	r3, #192	; 0xc0
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	501a      	str	r2, [r3, r0]
}
 801066a:	e031      	b.n	80106d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801066c:	4a1b      	ldr	r2, [pc, #108]	; (80106dc <__NVIC_SetPriority+0xd8>)
 801066e:	1dfb      	adds	r3, r7, #7
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	0019      	movs	r1, r3
 8010674:	230f      	movs	r3, #15
 8010676:	400b      	ands	r3, r1
 8010678:	3b08      	subs	r3, #8
 801067a:	089b      	lsrs	r3, r3, #2
 801067c:	3306      	adds	r3, #6
 801067e:	009b      	lsls	r3, r3, #2
 8010680:	18d3      	adds	r3, r2, r3
 8010682:	3304      	adds	r3, #4
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	1dfa      	adds	r2, r7, #7
 8010688:	7812      	ldrb	r2, [r2, #0]
 801068a:	0011      	movs	r1, r2
 801068c:	2203      	movs	r2, #3
 801068e:	400a      	ands	r2, r1
 8010690:	00d2      	lsls	r2, r2, #3
 8010692:	21ff      	movs	r1, #255	; 0xff
 8010694:	4091      	lsls	r1, r2
 8010696:	000a      	movs	r2, r1
 8010698:	43d2      	mvns	r2, r2
 801069a:	401a      	ands	r2, r3
 801069c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	019b      	lsls	r3, r3, #6
 80106a2:	22ff      	movs	r2, #255	; 0xff
 80106a4:	401a      	ands	r2, r3
 80106a6:	1dfb      	adds	r3, r7, #7
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	0018      	movs	r0, r3
 80106ac:	2303      	movs	r3, #3
 80106ae:	4003      	ands	r3, r0
 80106b0:	00db      	lsls	r3, r3, #3
 80106b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80106b4:	4809      	ldr	r0, [pc, #36]	; (80106dc <__NVIC_SetPriority+0xd8>)
 80106b6:	1dfb      	adds	r3, r7, #7
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	001c      	movs	r4, r3
 80106bc:	230f      	movs	r3, #15
 80106be:	4023      	ands	r3, r4
 80106c0:	3b08      	subs	r3, #8
 80106c2:	089b      	lsrs	r3, r3, #2
 80106c4:	430a      	orrs	r2, r1
 80106c6:	3306      	adds	r3, #6
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	18c3      	adds	r3, r0, r3
 80106cc:	3304      	adds	r3, #4
 80106ce:	601a      	str	r2, [r3, #0]
}
 80106d0:	46c0      	nop			; (mov r8, r8)
 80106d2:	46bd      	mov	sp, r7
 80106d4:	b003      	add	sp, #12
 80106d6:	bd90      	pop	{r4, r7, pc}
 80106d8:	e000e100 	.word	0xe000e100
 80106dc:	e000ed00 	.word	0xe000ed00

080106e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	1e5a      	subs	r2, r3, #1
 80106ec:	2380      	movs	r3, #128	; 0x80
 80106ee:	045b      	lsls	r3, r3, #17
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d301      	bcc.n	80106f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80106f4:	2301      	movs	r3, #1
 80106f6:	e010      	b.n	801071a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80106f8:	4b0a      	ldr	r3, [pc, #40]	; (8010724 <SysTick_Config+0x44>)
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	3a01      	subs	r2, #1
 80106fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010700:	2301      	movs	r3, #1
 8010702:	425b      	negs	r3, r3
 8010704:	2103      	movs	r1, #3
 8010706:	0018      	movs	r0, r3
 8010708:	f7ff ff7c 	bl	8010604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801070c:	4b05      	ldr	r3, [pc, #20]	; (8010724 <SysTick_Config+0x44>)
 801070e:	2200      	movs	r2, #0
 8010710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010712:	4b04      	ldr	r3, [pc, #16]	; (8010724 <SysTick_Config+0x44>)
 8010714:	2207      	movs	r2, #7
 8010716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010718:	2300      	movs	r3, #0
}
 801071a:	0018      	movs	r0, r3
 801071c:	46bd      	mov	sp, r7
 801071e:	b002      	add	sp, #8
 8010720:	bd80      	pop	{r7, pc}
 8010722:	46c0      	nop			; (mov r8, r8)
 8010724:	e000e010 	.word	0xe000e010

08010728 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
 801072e:	60b9      	str	r1, [r7, #8]
 8010730:	607a      	str	r2, [r7, #4]
 8010732:	210f      	movs	r1, #15
 8010734:	187b      	adds	r3, r7, r1
 8010736:	1c02      	adds	r2, r0, #0
 8010738:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	187b      	adds	r3, r7, r1
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	b25b      	sxtb	r3, r3
 8010742:	0011      	movs	r1, r2
 8010744:	0018      	movs	r0, r3
 8010746:	f7ff ff5d 	bl	8010604 <__NVIC_SetPriority>
}
 801074a:	46c0      	nop			; (mov r8, r8)
 801074c:	46bd      	mov	sp, r7
 801074e:	b004      	add	sp, #16
 8010750:	bd80      	pop	{r7, pc}

08010752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	af00      	add	r7, sp, #0
 8010758:	0002      	movs	r2, r0
 801075a:	1dfb      	adds	r3, r7, #7
 801075c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801075e:	1dfb      	adds	r3, r7, #7
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	b25b      	sxtb	r3, r3
 8010764:	0018      	movs	r0, r3
 8010766:	f7ff ff11 	bl	801058c <__NVIC_EnableIRQ>
}
 801076a:	46c0      	nop			; (mov r8, r8)
 801076c:	46bd      	mov	sp, r7
 801076e:	b002      	add	sp, #8
 8010770:	bd80      	pop	{r7, pc}

08010772 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010772:	b580      	push	{r7, lr}
 8010774:	b082      	sub	sp, #8
 8010776:	af00      	add	r7, sp, #0
 8010778:	0002      	movs	r2, r0
 801077a:	1dfb      	adds	r3, r7, #7
 801077c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801077e:	1dfb      	adds	r3, r7, #7
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	b25b      	sxtb	r3, r3
 8010784:	0018      	movs	r0, r3
 8010786:	f7ff ff1b 	bl	80105c0 <__NVIC_DisableIRQ>
}
 801078a:	46c0      	nop			; (mov r8, r8)
 801078c:	46bd      	mov	sp, r7
 801078e:	b002      	add	sp, #8
 8010790:	bd80      	pop	{r7, pc}

08010792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b082      	sub	sp, #8
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	0018      	movs	r0, r3
 801079e:	f7ff ff9f 	bl	80106e0 <SysTick_Config>
 80107a2:	0003      	movs	r3, r0
}
 80107a4:	0018      	movs	r0, r3
 80107a6:	46bd      	mov	sp, r7
 80107a8:	b002      	add	sp, #8
 80107aa:	bd80      	pop	{r7, pc}

080107ac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d101      	bne.n	80107be <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e04f      	b.n	801085e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2225      	movs	r2, #37	; 0x25
 80107c2:	5c9b      	ldrb	r3, [r3, r2]
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	2b02      	cmp	r3, #2
 80107c8:	d008      	beq.n	80107dc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2204      	movs	r2, #4
 80107ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2224      	movs	r2, #36	; 0x24
 80107d4:	2100      	movs	r1, #0
 80107d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80107d8:	2301      	movs	r3, #1
 80107da:	e040      	b.n	801085e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	210e      	movs	r1, #14
 80107e8:	438a      	bics	r2, r1
 80107ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107f6:	491c      	ldr	r1, [pc, #112]	; (8010868 <HAL_DMA_Abort+0xbc>)
 80107f8:	400a      	ands	r2, r1
 80107fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2101      	movs	r1, #1
 8010808:	438a      	bics	r2, r1
 801080a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010810:	221c      	movs	r2, #28
 8010812:	401a      	ands	r2, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010818:	2101      	movs	r1, #1
 801081a:	4091      	lsls	r1, r2
 801081c:	000a      	movs	r2, r1
 801081e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010828:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00c      	beq.n	801084c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801083c:	490a      	ldr	r1, [pc, #40]	; (8010868 <HAL_DMA_Abort+0xbc>)
 801083e:	400a      	ands	r2, r1
 8010840:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801084a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2225      	movs	r2, #37	; 0x25
 8010850:	2101      	movs	r1, #1
 8010852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2224      	movs	r2, #36	; 0x24
 8010858:	2100      	movs	r1, #0
 801085a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	0018      	movs	r0, r3
 8010860:	46bd      	mov	sp, r7
 8010862:	b002      	add	sp, #8
 8010864:	bd80      	pop	{r7, pc}
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	fffffeff 	.word	0xfffffeff

0801086c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010874:	210f      	movs	r1, #15
 8010876:	187b      	adds	r3, r7, r1
 8010878:	2200      	movs	r2, #0
 801087a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2225      	movs	r2, #37	; 0x25
 8010880:	5c9b      	ldrb	r3, [r3, r2]
 8010882:	b2db      	uxtb	r3, r3
 8010884:	2b02      	cmp	r3, #2
 8010886:	d006      	beq.n	8010896 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2204      	movs	r2, #4
 801088c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801088e:	187b      	adds	r3, r7, r1
 8010890:	2201      	movs	r2, #1
 8010892:	701a      	strb	r2, [r3, #0]
 8010894:	e048      	b.n	8010928 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	210e      	movs	r1, #14
 80108a2:	438a      	bics	r2, r1
 80108a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2101      	movs	r1, #1
 80108b2:	438a      	bics	r2, r1
 80108b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108c0:	491d      	ldr	r1, [pc, #116]	; (8010938 <HAL_DMA_Abort_IT+0xcc>)
 80108c2:	400a      	ands	r2, r1
 80108c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ca:	221c      	movs	r2, #28
 80108cc:	401a      	ands	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d2:	2101      	movs	r1, #1
 80108d4:	4091      	lsls	r1, r2
 80108d6:	000a      	movs	r2, r1
 80108d8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80108e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00c      	beq.n	8010906 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108f6:	4910      	ldr	r1, [pc, #64]	; (8010938 <HAL_DMA_Abort_IT+0xcc>)
 80108f8:	400a      	ands	r2, r1
 80108fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010904:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2225      	movs	r2, #37	; 0x25
 801090a:	2101      	movs	r1, #1
 801090c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2224      	movs	r2, #36	; 0x24
 8010912:	2100      	movs	r1, #0
 8010914:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801091a:	2b00      	cmp	r3, #0
 801091c:	d004      	beq.n	8010928 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	0010      	movs	r0, r2
 8010926:	4798      	blx	r3
    }
  }
  return status;
 8010928:	230f      	movs	r3, #15
 801092a:	18fb      	adds	r3, r7, r3
 801092c:	781b      	ldrb	r3, [r3, #0]
}
 801092e:	0018      	movs	r0, r3
 8010930:	46bd      	mov	sp, r7
 8010932:	b004      	add	sp, #16
 8010934:	bd80      	pop	{r7, pc}
 8010936:	46c0      	nop			; (mov r8, r8)
 8010938:	fffffeff 	.word	0xfffffeff

0801093c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801093c:	b5b0      	push	{r4, r5, r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	603a      	str	r2, [r7, #0]
 8010948:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801094a:	4b21      	ldr	r3, [pc, #132]	; (80109d0 <HAL_FLASH_Program+0x94>)
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	2b01      	cmp	r3, #1
 8010950:	d101      	bne.n	8010956 <HAL_FLASH_Program+0x1a>
 8010952:	2302      	movs	r3, #2
 8010954:	e038      	b.n	80109c8 <HAL_FLASH_Program+0x8c>
 8010956:	4b1e      	ldr	r3, [pc, #120]	; (80109d0 <HAL_FLASH_Program+0x94>)
 8010958:	2201      	movs	r2, #1
 801095a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801095c:	4b1c      	ldr	r3, [pc, #112]	; (80109d0 <HAL_FLASH_Program+0x94>)
 801095e:	2200      	movs	r2, #0
 8010960:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010962:	2517      	movs	r5, #23
 8010964:	197c      	adds	r4, r7, r5
 8010966:	23fa      	movs	r3, #250	; 0xfa
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	0018      	movs	r0, r3
 801096c:	f000 f87a 	bl	8010a64 <FLASH_WaitForLastOperation>
 8010970:	0003      	movs	r3, r0
 8010972:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010974:	197b      	adds	r3, r7, r5
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d11f      	bne.n	80109bc <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b01      	cmp	r3, #1
 8010980:	d106      	bne.n	8010990 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8010982:	683a      	ldr	r2, [r7, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	68b9      	ldr	r1, [r7, #8]
 8010988:	0008      	movs	r0, r1
 801098a:	f000 f8b9 	bl	8010b00 <FLASH_Program_DoubleWord>
 801098e:	e005      	b.n	801099c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	0011      	movs	r1, r2
 8010996:	0018      	movs	r0, r3
 8010998:	f014 fb82 	bl	80250a0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801099c:	2317      	movs	r3, #23
 801099e:	18fc      	adds	r4, r7, r3
 80109a0:	23fa      	movs	r3, #250	; 0xfa
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	0018      	movs	r0, r3
 80109a6:	f000 f85d 	bl	8010a64 <FLASH_WaitForLastOperation>
 80109aa:	0003      	movs	r3, r0
 80109ac:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80109ae:	4b09      	ldr	r3, [pc, #36]	; (80109d4 <HAL_FLASH_Program+0x98>)
 80109b0:	695a      	ldr	r2, [r3, #20]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	43d9      	mvns	r1, r3
 80109b6:	4b07      	ldr	r3, [pc, #28]	; (80109d4 <HAL_FLASH_Program+0x98>)
 80109b8:	400a      	ands	r2, r1
 80109ba:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80109bc:	4b04      	ldr	r3, [pc, #16]	; (80109d0 <HAL_FLASH_Program+0x94>)
 80109be:	2200      	movs	r2, #0
 80109c0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80109c2:	2317      	movs	r3, #23
 80109c4:	18fb      	adds	r3, r7, r3
 80109c6:	781b      	ldrb	r3, [r3, #0]
}
 80109c8:	0018      	movs	r0, r3
 80109ca:	46bd      	mov	sp, r7
 80109cc:	b006      	add	sp, #24
 80109ce:	bdb0      	pop	{r4, r5, r7, pc}
 80109d0:	200073d8 	.word	0x200073d8
 80109d4:	40022000 	.word	0x40022000

080109d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80109de:	1dfb      	adds	r3, r7, #7
 80109e0:	2200      	movs	r2, #0
 80109e2:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80109e4:	4b0b      	ldr	r3, [pc, #44]	; (8010a14 <HAL_FLASH_Unlock+0x3c>)
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	da0c      	bge.n	8010a06 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80109ec:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <HAL_FLASH_Unlock+0x3c>)
 80109ee:	4a0a      	ldr	r2, [pc, #40]	; (8010a18 <HAL_FLASH_Unlock+0x40>)
 80109f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80109f2:	4b08      	ldr	r3, [pc, #32]	; (8010a14 <HAL_FLASH_Unlock+0x3c>)
 80109f4:	4a09      	ldr	r2, [pc, #36]	; (8010a1c <HAL_FLASH_Unlock+0x44>)
 80109f6:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80109f8:	4b06      	ldr	r3, [pc, #24]	; (8010a14 <HAL_FLASH_Unlock+0x3c>)
 80109fa:	695b      	ldr	r3, [r3, #20]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	da02      	bge.n	8010a06 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8010a00:	1dfb      	adds	r3, r7, #7
 8010a02:	2201      	movs	r2, #1
 8010a04:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010a06:	1dfb      	adds	r3, r7, #7
 8010a08:	781b      	ldrb	r3, [r3, #0]
}
 8010a0a:	0018      	movs	r0, r3
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	b002      	add	sp, #8
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	46c0      	nop			; (mov r8, r8)
 8010a14:	40022000 	.word	0x40022000
 8010a18:	45670123 	.word	0x45670123
 8010a1c:	cdef89ab 	.word	0xcdef89ab

08010a20 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8010a26:	1dfb      	adds	r3, r7, #7
 8010a28:	2201      	movs	r2, #1
 8010a2a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010a2c:	23fa      	movs	r3, #250	; 0xfa
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	0018      	movs	r0, r3
 8010a32:	f000 f817 	bl	8010a64 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010a36:	4b0a      	ldr	r3, [pc, #40]	; (8010a60 <HAL_FLASH_Lock+0x40>)
 8010a38:	695a      	ldr	r2, [r3, #20]
 8010a3a:	4b09      	ldr	r3, [pc, #36]	; (8010a60 <HAL_FLASH_Lock+0x40>)
 8010a3c:	2180      	movs	r1, #128	; 0x80
 8010a3e:	0609      	lsls	r1, r1, #24
 8010a40:	430a      	orrs	r2, r1
 8010a42:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8010a44:	4b06      	ldr	r3, [pc, #24]	; (8010a60 <HAL_FLASH_Lock+0x40>)
 8010a46:	695b      	ldr	r3, [r3, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	da02      	bge.n	8010a52 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8010a4c:	1dfb      	adds	r3, r7, #7
 8010a4e:	2200      	movs	r2, #0
 8010a50:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8010a52:	1dfb      	adds	r3, r7, #7
 8010a54:	781b      	ldrb	r3, [r3, #0]
}
 8010a56:	0018      	movs	r0, r3
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	b002      	add	sp, #8
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	46c0      	nop			; (mov r8, r8)
 8010a60:	40022000 	.word	0x40022000

08010a64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8010a6c:	f7fe fc92 	bl	800f394 <HAL_GetTick>
 8010a70:	0003      	movs	r3, r0
 8010a72:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8010a74:	23c0      	movs	r3, #192	; 0xc0
 8010a76:	029b      	lsls	r3, r3, #10
 8010a78:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8010a7a:	e00c      	b.n	8010a96 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	3301      	adds	r3, #1
 8010a80:	d009      	beq.n	8010a96 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8010a82:	f7fe fc87 	bl	800f394 <HAL_GetTick>
 8010a86:	0002      	movs	r2, r0
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	687a      	ldr	r2, [r7, #4]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d801      	bhi.n	8010a96 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8010a92:	2303      	movs	r3, #3
 8010a94:	e028      	b.n	8010ae8 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8010a96:	4b16      	ldr	r3, [pc, #88]	; (8010af0 <FLASH_WaitForLastOperation+0x8c>)
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	68ba      	ldr	r2, [r7, #8]
 8010a9c:	4013      	ands	r3, r2
 8010a9e:	d1ed      	bne.n	8010a7c <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8010aa0:	4b13      	ldr	r3, [pc, #76]	; (8010af0 <FLASH_WaitForLastOperation+0x8c>)
 8010aa2:	691b      	ldr	r3, [r3, #16]
 8010aa4:	4a13      	ldr	r2, [pc, #76]	; (8010af4 <FLASH_WaitForLastOperation+0x90>)
 8010aa6:	4013      	ands	r3, r2
 8010aa8:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8010aaa:	4b11      	ldr	r3, [pc, #68]	; (8010af0 <FLASH_WaitForLastOperation+0x8c>)
 8010aac:	4a12      	ldr	r2, [pc, #72]	; (8010af8 <FLASH_WaitForLastOperation+0x94>)
 8010aae:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d011      	beq.n	8010ada <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8010ab6:	4b11      	ldr	r3, [pc, #68]	; (8010afc <FLASH_WaitForLastOperation+0x98>)
 8010ab8:	68ba      	ldr	r2, [r7, #8]
 8010aba:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8010abc:	2301      	movs	r3, #1
 8010abe:	e013      	b.n	8010ae8 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	d009      	beq.n	8010ada <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8010ac6:	f7fe fc65 	bl	800f394 <HAL_GetTick>
 8010aca:	0002      	movs	r2, r0
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d801      	bhi.n	8010ada <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8010ad6:	2303      	movs	r3, #3
 8010ad8:	e006      	b.n	8010ae8 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8010ada:	4b05      	ldr	r3, [pc, #20]	; (8010af0 <FLASH_WaitForLastOperation+0x8c>)
 8010adc:	691a      	ldr	r2, [r3, #16]
 8010ade:	2380      	movs	r3, #128	; 0x80
 8010ae0:	02db      	lsls	r3, r3, #11
 8010ae2:	4013      	ands	r3, r2
 8010ae4:	d1ec      	bne.n	8010ac0 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	0018      	movs	r0, r3
 8010aea:	46bd      	mov	sp, r7
 8010aec:	b004      	add	sp, #16
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	40022000 	.word	0x40022000
 8010af4:	000083fa 	.word	0x000083fa
 8010af8:	000883fb 	.word	0x000883fb
 8010afc:	200073d8 	.word	0x200073d8

08010b00 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8010b00:	b5b0      	push	{r4, r5, r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	603a      	str	r2, [r7, #0]
 8010b0a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010b0c:	4b0b      	ldr	r3, [pc, #44]	; (8010b3c <FLASH_Program_DoubleWord+0x3c>)
 8010b0e:	695a      	ldr	r2, [r3, #20]
 8010b10:	4b0a      	ldr	r3, [pc, #40]	; (8010b3c <FLASH_Program_DoubleWord+0x3c>)
 8010b12:	2101      	movs	r1, #1
 8010b14:	430a      	orrs	r2, r1
 8010b16:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	683a      	ldr	r2, [r7, #0]
 8010b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8010b1e:	f3bf 8f6f 	isb	sy
}
 8010b22:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	001c      	movs	r4, r3
 8010b28:	2300      	movs	r3, #0
 8010b2a:	001d      	movs	r5, r3
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	3304      	adds	r3, #4
 8010b30:	0022      	movs	r2, r4
 8010b32:	601a      	str	r2, [r3, #0]
}
 8010b34:	46c0      	nop			; (mov r8, r8)
 8010b36:	46bd      	mov	sp, r7
 8010b38:	b004      	add	sp, #16
 8010b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8010b3c:	40022000 	.word	0x40022000

08010b40 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010b40:	b5b0      	push	{r4, r5, r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010b4a:	4b33      	ldr	r3, [pc, #204]	; (8010c18 <HAL_FLASHEx_Erase+0xd8>)
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d101      	bne.n	8010b56 <HAL_FLASHEx_Erase+0x16>
 8010b52:	2302      	movs	r3, #2
 8010b54:	e05c      	b.n	8010c10 <HAL_FLASHEx_Erase+0xd0>
 8010b56:	4b30      	ldr	r3, [pc, #192]	; (8010c18 <HAL_FLASHEx_Erase+0xd8>)
 8010b58:	2201      	movs	r2, #1
 8010b5a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b5c:	4b2e      	ldr	r3, [pc, #184]	; (8010c18 <HAL_FLASHEx_Erase+0xd8>)
 8010b5e:	2200      	movs	r2, #0
 8010b60:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010b62:	250f      	movs	r5, #15
 8010b64:	197c      	adds	r4, r7, r5
 8010b66:	23fa      	movs	r3, #250	; 0xfa
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	0018      	movs	r0, r3
 8010b6c:	f7ff ff7a 	bl	8010a64 <FLASH_WaitForLastOperation>
 8010b70:	0003      	movs	r3, r0
 8010b72:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010b74:	002c      	movs	r4, r5
 8010b76:	193b      	adds	r3, r7, r4
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d142      	bne.n	8010c04 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b04      	cmp	r3, #4
 8010b84:	d10d      	bne.n	8010ba2 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	0018      	movs	r0, r3
 8010b8c:	f000 f848 	bl	8010c20 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010b90:	193c      	adds	r4, r7, r4
 8010b92:	23fa      	movs	r3, #250	; 0xfa
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	0018      	movs	r0, r3
 8010b98:	f7ff ff64 	bl	8010a64 <FLASH_WaitForLastOperation>
 8010b9c:	0003      	movs	r3, r0
 8010b9e:	7023      	strb	r3, [r4, #0]
 8010ba0:	e030      	b.n	8010c04 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	4252      	negs	r2, r2
 8010ba8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	60bb      	str	r3, [r7, #8]
 8010bb0:	e01a      	b.n	8010be8 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	0011      	movs	r1, r2
 8010bba:	0018      	movs	r0, r3
 8010bbc:	f000 f844 	bl	8010c48 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010bc0:	250f      	movs	r5, #15
 8010bc2:	197c      	adds	r4, r7, r5
 8010bc4:	23fa      	movs	r3, #250	; 0xfa
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	0018      	movs	r0, r3
 8010bca:	f7ff ff4b 	bl	8010a64 <FLASH_WaitForLastOperation>
 8010bce:	0003      	movs	r3, r0
 8010bd0:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8010bd2:	197b      	adds	r3, r7, r5
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d003      	beq.n	8010be2 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	68ba      	ldr	r2, [r7, #8]
 8010bde:	601a      	str	r2, [r3, #0]
          break;
 8010be0:	e00a      	b.n	8010bf8 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	3301      	adds	r3, #1
 8010be6:	60bb      	str	r3, [r7, #8]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	689a      	ldr	r2, [r3, #8]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	18d3      	adds	r3, r2, r3
 8010bf2:	68ba      	ldr	r2, [r7, #8]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d3dc      	bcc.n	8010bb2 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010bf8:	4b08      	ldr	r3, [pc, #32]	; (8010c1c <HAL_FLASHEx_Erase+0xdc>)
 8010bfa:	695a      	ldr	r2, [r3, #20]
 8010bfc:	4b07      	ldr	r3, [pc, #28]	; (8010c1c <HAL_FLASHEx_Erase+0xdc>)
 8010bfe:	2102      	movs	r1, #2
 8010c00:	438a      	bics	r2, r1
 8010c02:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010c04:	4b04      	ldr	r3, [pc, #16]	; (8010c18 <HAL_FLASHEx_Erase+0xd8>)
 8010c06:	2200      	movs	r2, #0
 8010c08:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8010c0a:	230f      	movs	r3, #15
 8010c0c:	18fb      	adds	r3, r7, r3
 8010c0e:	781b      	ldrb	r3, [r3, #0]
}
 8010c10:	0018      	movs	r0, r3
 8010c12:	46bd      	mov	sp, r7
 8010c14:	b004      	add	sp, #16
 8010c16:	bdb0      	pop	{r4, r5, r7, pc}
 8010c18:	200073d8 	.word	0x200073d8
 8010c1c:	40022000 	.word	0x40022000

08010c20 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8010c28:	4b06      	ldr	r3, [pc, #24]	; (8010c44 <FLASH_MassErase+0x24>)
 8010c2a:	695a      	ldr	r2, [r3, #20]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	431a      	orrs	r2, r3
 8010c30:	4b04      	ldr	r3, [pc, #16]	; (8010c44 <FLASH_MassErase+0x24>)
 8010c32:	2180      	movs	r1, #128	; 0x80
 8010c34:	0249      	lsls	r1, r1, #9
 8010c36:	430a      	orrs	r2, r1
 8010c38:	615a      	str	r2, [r3, #20]
}
 8010c3a:	46c0      	nop			; (mov r8, r8)
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	b002      	add	sp, #8
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	46c0      	nop			; (mov r8, r8)
 8010c44:	40022000 	.word	0x40022000

08010c48 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8010c52:	4b0f      	ldr	r3, [pc, #60]	; (8010c90 <FLASH_PageErase+0x48>)
 8010c54:	695b      	ldr	r3, [r3, #20]
 8010c56:	4a0f      	ldr	r2, [pc, #60]	; (8010c94 <FLASH_PageErase+0x4c>)
 8010c58:	4013      	ands	r3, r2
 8010c5a:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2b04      	cmp	r3, #4
 8010c60:	d005      	beq.n	8010c6e <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2280      	movs	r2, #128	; 0x80
 8010c66:	0192      	lsls	r2, r2, #6
 8010c68:	4313      	orrs	r3, r2
 8010c6a:	60fb      	str	r3, [r7, #12]
 8010c6c:	e003      	b.n	8010c76 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	4a09      	ldr	r2, [pc, #36]	; (8010c98 <FLASH_PageErase+0x50>)
 8010c72:	4013      	ands	r3, r2
 8010c74:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	00da      	lsls	r2, r3, #3
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	431a      	orrs	r2, r3
 8010c7e:	4b04      	ldr	r3, [pc, #16]	; (8010c90 <FLASH_PageErase+0x48>)
 8010c80:	4906      	ldr	r1, [pc, #24]	; (8010c9c <FLASH_PageErase+0x54>)
 8010c82:	430a      	orrs	r2, r1
 8010c84:	615a      	str	r2, [r3, #20]
}
 8010c86:	46c0      	nop			; (mov r8, r8)
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	b004      	add	sp, #16
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	46c0      	nop			; (mov r8, r8)
 8010c90:	40022000 	.word	0x40022000
 8010c94:	ffffe007 	.word	0xffffe007
 8010c98:	ffffdfff 	.word	0xffffdfff
 8010c9c:	00010002 	.word	0x00010002

08010ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010caa:	2300      	movs	r3, #0
 8010cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010cae:	e14d      	b.n	8010f4c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2101      	movs	r1, #1
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	4091      	lsls	r1, r2
 8010cba:	000a      	movs	r2, r1
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d100      	bne.n	8010cc8 <HAL_GPIO_Init+0x28>
 8010cc6:	e13e      	b.n	8010f46 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	2203      	movs	r2, #3
 8010cce:	4013      	ands	r3, r2
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d005      	beq.n	8010ce0 <HAL_GPIO_Init+0x40>
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	2203      	movs	r2, #3
 8010cda:	4013      	ands	r3, r2
 8010cdc:	2b02      	cmp	r3, #2
 8010cde:	d130      	bne.n	8010d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	2203      	movs	r2, #3
 8010cec:	409a      	lsls	r2, r3
 8010cee:	0013      	movs	r3, r2
 8010cf0:	43da      	mvns	r2, r3
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	68da      	ldr	r2, [r3, #12]
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	409a      	lsls	r2, r3
 8010d02:	0013      	movs	r3, r2
 8010d04:	693a      	ldr	r2, [r7, #16]
 8010d06:	4313      	orrs	r3, r2
 8010d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	693a      	ldr	r2, [r7, #16]
 8010d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010d16:	2201      	movs	r2, #1
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	409a      	lsls	r2, r3
 8010d1c:	0013      	movs	r3, r2
 8010d1e:	43da      	mvns	r2, r3
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	4013      	ands	r3, r2
 8010d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	091b      	lsrs	r3, r3, #4
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	401a      	ands	r2, r3
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	409a      	lsls	r2, r3
 8010d34:	0013      	movs	r3, r2
 8010d36:	693a      	ldr	r2, [r7, #16]
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	693a      	ldr	r2, [r7, #16]
 8010d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	2203      	movs	r2, #3
 8010d48:	4013      	ands	r3, r2
 8010d4a:	2b03      	cmp	r3, #3
 8010d4c:	d017      	beq.n	8010d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	2203      	movs	r2, #3
 8010d5a:	409a      	lsls	r2, r3
 8010d5c:	0013      	movs	r3, r2
 8010d5e:	43da      	mvns	r2, r3
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	4013      	ands	r3, r2
 8010d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	689a      	ldr	r2, [r3, #8]
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	409a      	lsls	r2, r3
 8010d70:	0013      	movs	r3, r2
 8010d72:	693a      	ldr	r2, [r7, #16]
 8010d74:	4313      	orrs	r3, r2
 8010d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	693a      	ldr	r2, [r7, #16]
 8010d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	2203      	movs	r2, #3
 8010d84:	4013      	ands	r3, r2
 8010d86:	2b02      	cmp	r3, #2
 8010d88:	d123      	bne.n	8010dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	08da      	lsrs	r2, r3, #3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	3208      	adds	r2, #8
 8010d92:	0092      	lsls	r2, r2, #2
 8010d94:	58d3      	ldr	r3, [r2, r3]
 8010d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	2207      	movs	r2, #7
 8010d9c:	4013      	ands	r3, r2
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	220f      	movs	r2, #15
 8010da2:	409a      	lsls	r2, r3
 8010da4:	0013      	movs	r3, r2
 8010da6:	43da      	mvns	r2, r3
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	4013      	ands	r3, r2
 8010dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	691a      	ldr	r2, [r3, #16]
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	2107      	movs	r1, #7
 8010db6:	400b      	ands	r3, r1
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	409a      	lsls	r2, r3
 8010dbc:	0013      	movs	r3, r2
 8010dbe:	693a      	ldr	r2, [r7, #16]
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	08da      	lsrs	r2, r3, #3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	3208      	adds	r2, #8
 8010dcc:	0092      	lsls	r2, r2, #2
 8010dce:	6939      	ldr	r1, [r7, #16]
 8010dd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	005b      	lsls	r3, r3, #1
 8010ddc:	2203      	movs	r2, #3
 8010dde:	409a      	lsls	r2, r3
 8010de0:	0013      	movs	r3, r2
 8010de2:	43da      	mvns	r2, r3
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	4013      	ands	r3, r2
 8010de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	2203      	movs	r2, #3
 8010df0:	401a      	ands	r2, r3
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	409a      	lsls	r2, r3
 8010df8:	0013      	movs	r3, r2
 8010dfa:	693a      	ldr	r2, [r7, #16]
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	693a      	ldr	r2, [r7, #16]
 8010e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	685a      	ldr	r2, [r3, #4]
 8010e0a:	23c0      	movs	r3, #192	; 0xc0
 8010e0c:	029b      	lsls	r3, r3, #10
 8010e0e:	4013      	ands	r3, r2
 8010e10:	d100      	bne.n	8010e14 <HAL_GPIO_Init+0x174>
 8010e12:	e098      	b.n	8010f46 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8010e14:	4a53      	ldr	r2, [pc, #332]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	089b      	lsrs	r3, r3, #2
 8010e1a:	3318      	adds	r3, #24
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	589b      	ldr	r3, [r3, r2]
 8010e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	2203      	movs	r2, #3
 8010e26:	4013      	ands	r3, r2
 8010e28:	00db      	lsls	r3, r3, #3
 8010e2a:	220f      	movs	r2, #15
 8010e2c:	409a      	lsls	r2, r3
 8010e2e:	0013      	movs	r3, r2
 8010e30:	43da      	mvns	r2, r3
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	4013      	ands	r3, r2
 8010e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	23a0      	movs	r3, #160	; 0xa0
 8010e3c:	05db      	lsls	r3, r3, #23
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d019      	beq.n	8010e76 <HAL_GPIO_Init+0x1d6>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4a48      	ldr	r2, [pc, #288]	; (8010f68 <HAL_GPIO_Init+0x2c8>)
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d013      	beq.n	8010e72 <HAL_GPIO_Init+0x1d2>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	4a47      	ldr	r2, [pc, #284]	; (8010f6c <HAL_GPIO_Init+0x2cc>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d00d      	beq.n	8010e6e <HAL_GPIO_Init+0x1ce>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4a46      	ldr	r2, [pc, #280]	; (8010f70 <HAL_GPIO_Init+0x2d0>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d007      	beq.n	8010e6a <HAL_GPIO_Init+0x1ca>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4a45      	ldr	r2, [pc, #276]	; (8010f74 <HAL_GPIO_Init+0x2d4>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d101      	bne.n	8010e66 <HAL_GPIO_Init+0x1c6>
 8010e62:	2304      	movs	r3, #4
 8010e64:	e008      	b.n	8010e78 <HAL_GPIO_Init+0x1d8>
 8010e66:	2305      	movs	r3, #5
 8010e68:	e006      	b.n	8010e78 <HAL_GPIO_Init+0x1d8>
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	e004      	b.n	8010e78 <HAL_GPIO_Init+0x1d8>
 8010e6e:	2302      	movs	r3, #2
 8010e70:	e002      	b.n	8010e78 <HAL_GPIO_Init+0x1d8>
 8010e72:	2301      	movs	r3, #1
 8010e74:	e000      	b.n	8010e78 <HAL_GPIO_Init+0x1d8>
 8010e76:	2300      	movs	r3, #0
 8010e78:	697a      	ldr	r2, [r7, #20]
 8010e7a:	2103      	movs	r1, #3
 8010e7c:	400a      	ands	r2, r1
 8010e7e:	00d2      	lsls	r2, r2, #3
 8010e80:	4093      	lsls	r3, r2
 8010e82:	693a      	ldr	r2, [r7, #16]
 8010e84:	4313      	orrs	r3, r2
 8010e86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8010e88:	4936      	ldr	r1, [pc, #216]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	089b      	lsrs	r3, r3, #2
 8010e8e:	3318      	adds	r3, #24
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010e96:	4b33      	ldr	r3, [pc, #204]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	43da      	mvns	r2, r3
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	685a      	ldr	r2, [r3, #4]
 8010eaa:	2380      	movs	r3, #128	; 0x80
 8010eac:	035b      	lsls	r3, r3, #13
 8010eae:	4013      	ands	r3, r2
 8010eb0:	d003      	beq.n	8010eba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8010eb2:	693a      	ldr	r2, [r7, #16]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8010eba:	4b2a      	ldr	r3, [pc, #168]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8010ec0:	4b28      	ldr	r3, [pc, #160]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	43da      	mvns	r2, r3
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	4013      	ands	r3, r2
 8010ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	685a      	ldr	r2, [r3, #4]
 8010ed4:	2380      	movs	r3, #128	; 0x80
 8010ed6:	039b      	lsls	r3, r3, #14
 8010ed8:	4013      	ands	r3, r2
 8010eda:	d003      	beq.n	8010ee4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8010edc:	693a      	ldr	r2, [r7, #16]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	4313      	orrs	r3, r2
 8010ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010ee4:	4b1f      	ldr	r3, [pc, #124]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010ee6:	693a      	ldr	r2, [r7, #16]
 8010ee8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8010eea:	4a1e      	ldr	r2, [pc, #120]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010eec:	2384      	movs	r3, #132	; 0x84
 8010eee:	58d3      	ldr	r3, [r2, r3]
 8010ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	43da      	mvns	r2, r3
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	4013      	ands	r3, r2
 8010efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	685a      	ldr	r2, [r3, #4]
 8010f00:	2380      	movs	r3, #128	; 0x80
 8010f02:	029b      	lsls	r3, r3, #10
 8010f04:	4013      	ands	r3, r2
 8010f06:	d003      	beq.n	8010f10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8010f08:	693a      	ldr	r2, [r7, #16]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8010f10:	4914      	ldr	r1, [pc, #80]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010f12:	2284      	movs	r2, #132	; 0x84
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8010f18:	4a12      	ldr	r2, [pc, #72]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010f1a:	2380      	movs	r3, #128	; 0x80
 8010f1c:	58d3      	ldr	r3, [r2, r3]
 8010f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	43da      	mvns	r2, r3
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	4013      	ands	r3, r2
 8010f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	685a      	ldr	r2, [r3, #4]
 8010f2e:	2380      	movs	r3, #128	; 0x80
 8010f30:	025b      	lsls	r3, r3, #9
 8010f32:	4013      	ands	r3, r2
 8010f34:	d003      	beq.n	8010f3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8010f36:	693a      	ldr	r2, [r7, #16]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8010f3e:	4909      	ldr	r1, [pc, #36]	; (8010f64 <HAL_GPIO_Init+0x2c4>)
 8010f40:	2280      	movs	r2, #128	; 0x80
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	40da      	lsrs	r2, r3
 8010f54:	1e13      	subs	r3, r2, #0
 8010f56:	d000      	beq.n	8010f5a <HAL_GPIO_Init+0x2ba>
 8010f58:	e6aa      	b.n	8010cb0 <HAL_GPIO_Init+0x10>
  }
}
 8010f5a:	46c0      	nop			; (mov r8, r8)
 8010f5c:	46c0      	nop			; (mov r8, r8)
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	b006      	add	sp, #24
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	40021800 	.word	0x40021800
 8010f68:	50000400 	.word	0x50000400
 8010f6c:	50000800 	.word	0x50000800
 8010f70:	50000c00 	.word	0x50000c00
 8010f74:	50001000 	.word	0x50001000

08010f78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010f82:	2300      	movs	r3, #0
 8010f84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8010f86:	e0ba      	b.n	80110fe <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8010f88:	2201      	movs	r2, #1
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	409a      	lsls	r2, r3
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	4013      	ands	r3, r2
 8010f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d100      	bne.n	8010f9c <HAL_GPIO_DeInit+0x24>
 8010f9a:	e0ad      	b.n	80110f8 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8010f9c:	4a5d      	ldr	r2, [pc, #372]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	089b      	lsrs	r3, r3, #2
 8010fa2:	3318      	adds	r3, #24
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	589b      	ldr	r3, [r3, r2]
 8010fa8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	2203      	movs	r2, #3
 8010fae:	4013      	ands	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	220f      	movs	r2, #15
 8010fb4:	409a      	lsls	r2, r3
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	4013      	ands	r3, r2
 8010fba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	23a0      	movs	r3, #160	; 0xa0
 8010fc0:	05db      	lsls	r3, r3, #23
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d019      	beq.n	8010ffa <HAL_GPIO_DeInit+0x82>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	4a53      	ldr	r2, [pc, #332]	; (8011118 <HAL_GPIO_DeInit+0x1a0>)
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d013      	beq.n	8010ff6 <HAL_GPIO_DeInit+0x7e>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4a52      	ldr	r2, [pc, #328]	; (801111c <HAL_GPIO_DeInit+0x1a4>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d00d      	beq.n	8010ff2 <HAL_GPIO_DeInit+0x7a>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4a51      	ldr	r2, [pc, #324]	; (8011120 <HAL_GPIO_DeInit+0x1a8>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d007      	beq.n	8010fee <HAL_GPIO_DeInit+0x76>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4a50      	ldr	r2, [pc, #320]	; (8011124 <HAL_GPIO_DeInit+0x1ac>)
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d101      	bne.n	8010fea <HAL_GPIO_DeInit+0x72>
 8010fe6:	2304      	movs	r3, #4
 8010fe8:	e008      	b.n	8010ffc <HAL_GPIO_DeInit+0x84>
 8010fea:	2305      	movs	r3, #5
 8010fec:	e006      	b.n	8010ffc <HAL_GPIO_DeInit+0x84>
 8010fee:	2303      	movs	r3, #3
 8010ff0:	e004      	b.n	8010ffc <HAL_GPIO_DeInit+0x84>
 8010ff2:	2302      	movs	r3, #2
 8010ff4:	e002      	b.n	8010ffc <HAL_GPIO_DeInit+0x84>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e000      	b.n	8010ffc <HAL_GPIO_DeInit+0x84>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	697a      	ldr	r2, [r7, #20]
 8010ffe:	2103      	movs	r1, #3
 8011000:	400a      	ands	r2, r1
 8011002:	00d2      	lsls	r2, r2, #3
 8011004:	4093      	lsls	r3, r2
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	429a      	cmp	r2, r3
 801100a:	d136      	bne.n	801107a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801100c:	4a41      	ldr	r2, [pc, #260]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 801100e:	2380      	movs	r3, #128	; 0x80
 8011010:	58d3      	ldr	r3, [r2, r3]
 8011012:	693a      	ldr	r2, [r7, #16]
 8011014:	43d2      	mvns	r2, r2
 8011016:	493f      	ldr	r1, [pc, #252]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 8011018:	4013      	ands	r3, r2
 801101a:	2280      	movs	r2, #128	; 0x80
 801101c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 801101e:	4a3d      	ldr	r2, [pc, #244]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 8011020:	2384      	movs	r3, #132	; 0x84
 8011022:	58d3      	ldr	r3, [r2, r3]
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	43d2      	mvns	r2, r2
 8011028:	493a      	ldr	r1, [pc, #232]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 801102a:	4013      	ands	r3, r2
 801102c:	2284      	movs	r2, #132	; 0x84
 801102e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8011030:	4b38      	ldr	r3, [pc, #224]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 8011032:	685a      	ldr	r2, [r3, #4]
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	43d9      	mvns	r1, r3
 8011038:	4b36      	ldr	r3, [pc, #216]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 801103a:	400a      	ands	r2, r1
 801103c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801103e:	4b35      	ldr	r3, [pc, #212]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	43d9      	mvns	r1, r3
 8011046:	4b33      	ldr	r3, [pc, #204]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 8011048:	400a      	ands	r2, r1
 801104a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	2203      	movs	r2, #3
 8011050:	4013      	ands	r3, r2
 8011052:	00db      	lsls	r3, r3, #3
 8011054:	220f      	movs	r2, #15
 8011056:	409a      	lsls	r2, r3
 8011058:	0013      	movs	r3, r2
 801105a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 801105c:	4a2d      	ldr	r2, [pc, #180]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	089b      	lsrs	r3, r3, #2
 8011062:	3318      	adds	r3, #24
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	589a      	ldr	r2, [r3, r2]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	43d9      	mvns	r1, r3
 801106c:	4829      	ldr	r0, [pc, #164]	; (8011114 <HAL_GPIO_DeInit+0x19c>)
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	089b      	lsrs	r3, r3, #2
 8011072:	400a      	ands	r2, r1
 8011074:	3318      	adds	r3, #24
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	005b      	lsls	r3, r3, #1
 8011082:	2103      	movs	r1, #3
 8011084:	4099      	lsls	r1, r3
 8011086:	000b      	movs	r3, r1
 8011088:	431a      	orrs	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	08da      	lsrs	r2, r3, #3
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3208      	adds	r2, #8
 8011096:	0092      	lsls	r2, r2, #2
 8011098:	58d3      	ldr	r3, [r2, r3]
 801109a:	697a      	ldr	r2, [r7, #20]
 801109c:	2107      	movs	r1, #7
 801109e:	400a      	ands	r2, r1
 80110a0:	0092      	lsls	r2, r2, #2
 80110a2:	210f      	movs	r1, #15
 80110a4:	4091      	lsls	r1, r2
 80110a6:	000a      	movs	r2, r1
 80110a8:	43d1      	mvns	r1, r2
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	08d2      	lsrs	r2, r2, #3
 80110ae:	4019      	ands	r1, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	3208      	adds	r2, #8
 80110b4:	0092      	lsls	r2, r2, #2
 80110b6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	689b      	ldr	r3, [r3, #8]
 80110bc:	697a      	ldr	r2, [r7, #20]
 80110be:	0052      	lsls	r2, r2, #1
 80110c0:	2103      	movs	r1, #3
 80110c2:	4091      	lsls	r1, r2
 80110c4:	000a      	movs	r2, r1
 80110c6:	43d2      	mvns	r2, r2
 80110c8:	401a      	ands	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	2101      	movs	r1, #1
 80110d4:	697a      	ldr	r2, [r7, #20]
 80110d6:	4091      	lsls	r1, r2
 80110d8:	000a      	movs	r2, r1
 80110da:	43d2      	mvns	r2, r2
 80110dc:	401a      	ands	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	697a      	ldr	r2, [r7, #20]
 80110e8:	0052      	lsls	r2, r2, #1
 80110ea:	2103      	movs	r1, #3
 80110ec:	4091      	lsls	r1, r2
 80110ee:	000a      	movs	r2, r1
 80110f0:	43d2      	mvns	r2, r2
 80110f2:	401a      	ands	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	3301      	adds	r3, #1
 80110fc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80110fe:	683a      	ldr	r2, [r7, #0]
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	40da      	lsrs	r2, r3
 8011104:	1e13      	subs	r3, r2, #0
 8011106:	d000      	beq.n	801110a <HAL_GPIO_DeInit+0x192>
 8011108:	e73e      	b.n	8010f88 <HAL_GPIO_DeInit+0x10>
  }
}
 801110a:	46c0      	nop			; (mov r8, r8)
 801110c:	46c0      	nop			; (mov r8, r8)
 801110e:	46bd      	mov	sp, r7
 8011110:	b006      	add	sp, #24
 8011112:	bd80      	pop	{r7, pc}
 8011114:	40021800 	.word	0x40021800
 8011118:	50000400 	.word	0x50000400
 801111c:	50000800 	.word	0x50000800
 8011120:	50000c00 	.word	0x50000c00
 8011124:	50001000 	.word	0x50001000

08011128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	000a      	movs	r2, r1
 8011132:	1cbb      	adds	r3, r7, #2
 8011134:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	691b      	ldr	r3, [r3, #16]
 801113a:	1cba      	adds	r2, r7, #2
 801113c:	8812      	ldrh	r2, [r2, #0]
 801113e:	4013      	ands	r3, r2
 8011140:	d004      	beq.n	801114c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8011142:	230f      	movs	r3, #15
 8011144:	18fb      	adds	r3, r7, r3
 8011146:	2201      	movs	r2, #1
 8011148:	701a      	strb	r2, [r3, #0]
 801114a:	e003      	b.n	8011154 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801114c:	230f      	movs	r3, #15
 801114e:	18fb      	adds	r3, r7, r3
 8011150:	2200      	movs	r2, #0
 8011152:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8011154:	230f      	movs	r3, #15
 8011156:	18fb      	adds	r3, r7, r3
 8011158:	781b      	ldrb	r3, [r3, #0]
}
 801115a:	0018      	movs	r0, r3
 801115c:	46bd      	mov	sp, r7
 801115e:	b004      	add	sp, #16
 8011160:	bd80      	pop	{r7, pc}

08011162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b082      	sub	sp, #8
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	0008      	movs	r0, r1
 801116c:	0011      	movs	r1, r2
 801116e:	1cbb      	adds	r3, r7, #2
 8011170:	1c02      	adds	r2, r0, #0
 8011172:	801a      	strh	r2, [r3, #0]
 8011174:	1c7b      	adds	r3, r7, #1
 8011176:	1c0a      	adds	r2, r1, #0
 8011178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801117a:	1c7b      	adds	r3, r7, #1
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d004      	beq.n	801118c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011182:	1cbb      	adds	r3, r7, #2
 8011184:	881a      	ldrh	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801118a:	e003      	b.n	8011194 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801118c:	1cbb      	adds	r3, r7, #2
 801118e:	881a      	ldrh	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011194:	46c0      	nop			; (mov r8, r8)
 8011196:	46bd      	mov	sp, r7
 8011198:	b002      	add	sp, #8
 801119a:	bd80      	pop	{r7, pc}

0801119c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b084      	sub	sp, #16
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	000a      	movs	r2, r1
 80111a6:	1cbb      	adds	r3, r7, #2
 80111a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	695b      	ldr	r3, [r3, #20]
 80111ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80111b0:	1cbb      	adds	r3, r7, #2
 80111b2:	881b      	ldrh	r3, [r3, #0]
 80111b4:	68fa      	ldr	r2, [r7, #12]
 80111b6:	4013      	ands	r3, r2
 80111b8:	041a      	lsls	r2, r3, #16
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	43db      	mvns	r3, r3
 80111be:	1cb9      	adds	r1, r7, #2
 80111c0:	8809      	ldrh	r1, [r1, #0]
 80111c2:	400b      	ands	r3, r1
 80111c4:	431a      	orrs	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	619a      	str	r2, [r3, #24]
}
 80111ca:	46c0      	nop			; (mov r8, r8)
 80111cc:	46bd      	mov	sp, r7
 80111ce:	b004      	add	sp, #16
 80111d0:	bd80      	pop	{r7, pc}
	...

080111d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d101      	bne.n	80111e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80111e2:	2301      	movs	r3, #1
 80111e4:	e08f      	b.n	8011306 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2241      	movs	r2, #65	; 0x41
 80111ea:	5c9b      	ldrb	r3, [r3, r2]
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d107      	bne.n	8011202 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2240      	movs	r2, #64	; 0x40
 80111f6:	2100      	movs	r1, #0
 80111f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	0018      	movs	r0, r3
 80111fe:	f7fb fdc9 	bl	800cd94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2241      	movs	r2, #65	; 0x41
 8011206:	2124      	movs	r1, #36	; 0x24
 8011208:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2101      	movs	r1, #1
 8011216:	438a      	bics	r2, r1
 8011218:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	685a      	ldr	r2, [r3, #4]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	493b      	ldr	r1, [pc, #236]	; (8011310 <HAL_I2C_Init+0x13c>)
 8011224:	400a      	ands	r2, r1
 8011226:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	689a      	ldr	r2, [r3, #8]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4938      	ldr	r1, [pc, #224]	; (8011314 <HAL_I2C_Init+0x140>)
 8011234:	400a      	ands	r2, r1
 8011236:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d108      	bne.n	8011252 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	689a      	ldr	r2, [r3, #8]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2180      	movs	r1, #128	; 0x80
 801124a:	0209      	lsls	r1, r1, #8
 801124c:	430a      	orrs	r2, r1
 801124e:	609a      	str	r2, [r3, #8]
 8011250:	e007      	b.n	8011262 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	689a      	ldr	r2, [r3, #8]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2184      	movs	r1, #132	; 0x84
 801125c:	0209      	lsls	r1, r1, #8
 801125e:	430a      	orrs	r2, r1
 8011260:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	2b02      	cmp	r3, #2
 8011268:	d109      	bne.n	801127e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	685a      	ldr	r2, [r3, #4]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2180      	movs	r1, #128	; 0x80
 8011276:	0109      	lsls	r1, r1, #4
 8011278:	430a      	orrs	r2, r1
 801127a:	605a      	str	r2, [r3, #4]
 801127c:	e007      	b.n	801128e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4923      	ldr	r1, [pc, #140]	; (8011318 <HAL_I2C_Init+0x144>)
 801128a:	400a      	ands	r2, r1
 801128c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	685a      	ldr	r2, [r3, #4]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4920      	ldr	r1, [pc, #128]	; (801131c <HAL_I2C_Init+0x148>)
 801129a:	430a      	orrs	r2, r1
 801129c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	68da      	ldr	r2, [r3, #12]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	491a      	ldr	r1, [pc, #104]	; (8011314 <HAL_I2C_Init+0x140>)
 80112aa:	400a      	ands	r2, r1
 80112ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	691a      	ldr	r2, [r3, #16]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	695b      	ldr	r3, [r3, #20]
 80112b6:	431a      	orrs	r2, r3
 80112b8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	699b      	ldr	r3, [r3, #24]
 80112be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	430a      	orrs	r2, r1
 80112c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	69d9      	ldr	r1, [r3, #28]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6a1a      	ldr	r2, [r3, #32]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	430a      	orrs	r2, r1
 80112d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2101      	movs	r1, #1
 80112e4:	430a      	orrs	r2, r1
 80112e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2241      	movs	r2, #65	; 0x41
 80112f2:	2120      	movs	r1, #32
 80112f4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2242      	movs	r2, #66	; 0x42
 8011300:	2100      	movs	r1, #0
 8011302:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	0018      	movs	r0, r3
 8011308:	46bd      	mov	sp, r7
 801130a:	b002      	add	sp, #8
 801130c:	bd80      	pop	{r7, pc}
 801130e:	46c0      	nop			; (mov r8, r8)
 8011310:	f0ffffff 	.word	0xf0ffffff
 8011314:	ffff7fff 	.word	0xffff7fff
 8011318:	fffff7ff 	.word	0xfffff7ff
 801131c:	02008000 	.word	0x02008000

08011320 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011320:	b590      	push	{r4, r7, lr}
 8011322:	b089      	sub	sp, #36	; 0x24
 8011324:	af02      	add	r7, sp, #8
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	000c      	movs	r4, r1
 801132a:	0010      	movs	r0, r2
 801132c:	0019      	movs	r1, r3
 801132e:	230a      	movs	r3, #10
 8011330:	18fb      	adds	r3, r7, r3
 8011332:	1c22      	adds	r2, r4, #0
 8011334:	801a      	strh	r2, [r3, #0]
 8011336:	2308      	movs	r3, #8
 8011338:	18fb      	adds	r3, r7, r3
 801133a:	1c02      	adds	r2, r0, #0
 801133c:	801a      	strh	r2, [r3, #0]
 801133e:	1dbb      	adds	r3, r7, #6
 8011340:	1c0a      	adds	r2, r1, #0
 8011342:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2241      	movs	r2, #65	; 0x41
 8011348:	5c9b      	ldrb	r3, [r3, r2]
 801134a:	b2db      	uxtb	r3, r3
 801134c:	2b20      	cmp	r3, #32
 801134e:	d000      	beq.n	8011352 <HAL_I2C_Mem_Write+0x32>
 8011350:	e10c      	b.n	801156c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8011352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011354:	2b00      	cmp	r3, #0
 8011356:	d004      	beq.n	8011362 <HAL_I2C_Mem_Write+0x42>
 8011358:	232c      	movs	r3, #44	; 0x2c
 801135a:	18fb      	adds	r3, r7, r3
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d105      	bne.n	801136e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2280      	movs	r2, #128	; 0x80
 8011366:	0092      	lsls	r2, r2, #2
 8011368:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	e0ff      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2240      	movs	r2, #64	; 0x40
 8011372:	5c9b      	ldrb	r3, [r3, r2]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d101      	bne.n	801137c <HAL_I2C_Mem_Write+0x5c>
 8011378:	2302      	movs	r3, #2
 801137a:	e0f8      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2240      	movs	r2, #64	; 0x40
 8011380:	2101      	movs	r1, #1
 8011382:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011384:	f7fe f806 	bl	800f394 <HAL_GetTick>
 8011388:	0003      	movs	r3, r0
 801138a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801138c:	2380      	movs	r3, #128	; 0x80
 801138e:	0219      	lsls	r1, r3, #8
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	9300      	str	r3, [sp, #0]
 8011396:	2319      	movs	r3, #25
 8011398:	2201      	movs	r2, #1
 801139a:	f000 fb0b 	bl	80119b4 <I2C_WaitOnFlagUntilTimeout>
 801139e:	1e03      	subs	r3, r0, #0
 80113a0:	d001      	beq.n	80113a6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80113a2:	2301      	movs	r3, #1
 80113a4:	e0e3      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2241      	movs	r2, #65	; 0x41
 80113aa:	2121      	movs	r1, #33	; 0x21
 80113ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2242      	movs	r2, #66	; 0x42
 80113b2:	2140      	movs	r1, #64	; 0x40
 80113b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2200      	movs	r2, #0
 80113ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	222c      	movs	r2, #44	; 0x2c
 80113c6:	18ba      	adds	r2, r7, r2
 80113c8:	8812      	ldrh	r2, [r2, #0]
 80113ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2200      	movs	r2, #0
 80113d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80113d2:	1dbb      	adds	r3, r7, #6
 80113d4:	881c      	ldrh	r4, [r3, #0]
 80113d6:	2308      	movs	r3, #8
 80113d8:	18fb      	adds	r3, r7, r3
 80113da:	881a      	ldrh	r2, [r3, #0]
 80113dc:	230a      	movs	r3, #10
 80113de:	18fb      	adds	r3, r7, r3
 80113e0:	8819      	ldrh	r1, [r3, #0]
 80113e2:	68f8      	ldr	r0, [r7, #12]
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	9301      	str	r3, [sp, #4]
 80113e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	0023      	movs	r3, r4
 80113ee:	f000 f9f9 	bl	80117e4 <I2C_RequestMemoryWrite>
 80113f2:	1e03      	subs	r3, r0, #0
 80113f4:	d005      	beq.n	8011402 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2240      	movs	r2, #64	; 0x40
 80113fa:	2100      	movs	r1, #0
 80113fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80113fe:	2301      	movs	r3, #1
 8011400:	e0b5      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011406:	b29b      	uxth	r3, r3
 8011408:	2bff      	cmp	r3, #255	; 0xff
 801140a:	d911      	bls.n	8011430 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	22ff      	movs	r2, #255	; 0xff
 8011410:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011416:	b2da      	uxtb	r2, r3
 8011418:	2380      	movs	r3, #128	; 0x80
 801141a:	045c      	lsls	r4, r3, #17
 801141c:	230a      	movs	r3, #10
 801141e:	18fb      	adds	r3, r7, r3
 8011420:	8819      	ldrh	r1, [r3, #0]
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	2300      	movs	r3, #0
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	0023      	movs	r3, r4
 801142a:	f000 fca5 	bl	8011d78 <I2C_TransferConfig>
 801142e:	e012      	b.n	8011456 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011434:	b29a      	uxth	r2, r3
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801143e:	b2da      	uxtb	r2, r3
 8011440:	2380      	movs	r3, #128	; 0x80
 8011442:	049c      	lsls	r4, r3, #18
 8011444:	230a      	movs	r3, #10
 8011446:	18fb      	adds	r3, r7, r3
 8011448:	8819      	ldrh	r1, [r3, #0]
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	2300      	movs	r3, #0
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	0023      	movs	r3, r4
 8011452:	f000 fc91 	bl	8011d78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011456:	697a      	ldr	r2, [r7, #20]
 8011458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	0018      	movs	r0, r3
 801145e:	f000 fb01 	bl	8011a64 <I2C_WaitOnTXISFlagUntilTimeout>
 8011462:	1e03      	subs	r3, r0, #0
 8011464:	d001      	beq.n	801146a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8011466:	2301      	movs	r3, #1
 8011468:	e081      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801146e:	781a      	ldrb	r2, [r3, #0]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011484:	b29b      	uxth	r3, r3
 8011486:	3b01      	subs	r3, #1
 8011488:	b29a      	uxth	r2, r3
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011492:	3b01      	subs	r3, #1
 8011494:	b29a      	uxth	r2, r3
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801149e:	b29b      	uxth	r3, r3
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d03a      	beq.n	801151a <HAL_I2C_Mem_Write+0x1fa>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d136      	bne.n	801151a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80114ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114ae:	68f8      	ldr	r0, [r7, #12]
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	9300      	str	r3, [sp, #0]
 80114b4:	0013      	movs	r3, r2
 80114b6:	2200      	movs	r2, #0
 80114b8:	2180      	movs	r1, #128	; 0x80
 80114ba:	f000 fa7b 	bl	80119b4 <I2C_WaitOnFlagUntilTimeout>
 80114be:	1e03      	subs	r3, r0, #0
 80114c0:	d001      	beq.n	80114c6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80114c2:	2301      	movs	r3, #1
 80114c4:	e053      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	2bff      	cmp	r3, #255	; 0xff
 80114ce:	d911      	bls.n	80114f4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	22ff      	movs	r2, #255	; 0xff
 80114d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	2380      	movs	r3, #128	; 0x80
 80114de:	045c      	lsls	r4, r3, #17
 80114e0:	230a      	movs	r3, #10
 80114e2:	18fb      	adds	r3, r7, r3
 80114e4:	8819      	ldrh	r1, [r3, #0]
 80114e6:	68f8      	ldr	r0, [r7, #12]
 80114e8:	2300      	movs	r3, #0
 80114ea:	9300      	str	r3, [sp, #0]
 80114ec:	0023      	movs	r3, r4
 80114ee:	f000 fc43 	bl	8011d78 <I2C_TransferConfig>
 80114f2:	e012      	b.n	801151a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011502:	b2da      	uxtb	r2, r3
 8011504:	2380      	movs	r3, #128	; 0x80
 8011506:	049c      	lsls	r4, r3, #18
 8011508:	230a      	movs	r3, #10
 801150a:	18fb      	adds	r3, r7, r3
 801150c:	8819      	ldrh	r1, [r3, #0]
 801150e:	68f8      	ldr	r0, [r7, #12]
 8011510:	2300      	movs	r3, #0
 8011512:	9300      	str	r3, [sp, #0]
 8011514:	0023      	movs	r3, r4
 8011516:	f000 fc2f 	bl	8011d78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801151e:	b29b      	uxth	r3, r3
 8011520:	2b00      	cmp	r3, #0
 8011522:	d198      	bne.n	8011456 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011524:	697a      	ldr	r2, [r7, #20]
 8011526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	0018      	movs	r0, r3
 801152c:	f000 fae0 	bl	8011af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011530:	1e03      	subs	r3, r0, #0
 8011532:	d001      	beq.n	8011538 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8011534:	2301      	movs	r3, #1
 8011536:	e01a      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2220      	movs	r2, #32
 801153e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	490b      	ldr	r1, [pc, #44]	; (8011578 <HAL_I2C_Mem_Write+0x258>)
 801154c:	400a      	ands	r2, r1
 801154e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2241      	movs	r2, #65	; 0x41
 8011554:	2120      	movs	r1, #32
 8011556:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2242      	movs	r2, #66	; 0x42
 801155c:	2100      	movs	r1, #0
 801155e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2240      	movs	r2, #64	; 0x40
 8011564:	2100      	movs	r1, #0
 8011566:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011568:	2300      	movs	r3, #0
 801156a:	e000      	b.n	801156e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 801156c:	2302      	movs	r3, #2
  }
}
 801156e:	0018      	movs	r0, r3
 8011570:	46bd      	mov	sp, r7
 8011572:	b007      	add	sp, #28
 8011574:	bd90      	pop	{r4, r7, pc}
 8011576:	46c0      	nop			; (mov r8, r8)
 8011578:	fe00e800 	.word	0xfe00e800

0801157c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801157c:	b590      	push	{r4, r7, lr}
 801157e:	b089      	sub	sp, #36	; 0x24
 8011580:	af02      	add	r7, sp, #8
 8011582:	60f8      	str	r0, [r7, #12]
 8011584:	000c      	movs	r4, r1
 8011586:	0010      	movs	r0, r2
 8011588:	0019      	movs	r1, r3
 801158a:	230a      	movs	r3, #10
 801158c:	18fb      	adds	r3, r7, r3
 801158e:	1c22      	adds	r2, r4, #0
 8011590:	801a      	strh	r2, [r3, #0]
 8011592:	2308      	movs	r3, #8
 8011594:	18fb      	adds	r3, r7, r3
 8011596:	1c02      	adds	r2, r0, #0
 8011598:	801a      	strh	r2, [r3, #0]
 801159a:	1dbb      	adds	r3, r7, #6
 801159c:	1c0a      	adds	r2, r1, #0
 801159e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2241      	movs	r2, #65	; 0x41
 80115a4:	5c9b      	ldrb	r3, [r3, r2]
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	2b20      	cmp	r3, #32
 80115aa:	d000      	beq.n	80115ae <HAL_I2C_Mem_Read+0x32>
 80115ac:	e110      	b.n	80117d0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80115ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d004      	beq.n	80115be <HAL_I2C_Mem_Read+0x42>
 80115b4:	232c      	movs	r3, #44	; 0x2c
 80115b6:	18fb      	adds	r3, r7, r3
 80115b8:	881b      	ldrh	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d105      	bne.n	80115ca <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2280      	movs	r2, #128	; 0x80
 80115c2:	0092      	lsls	r2, r2, #2
 80115c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80115c6:	2301      	movs	r3, #1
 80115c8:	e103      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2240      	movs	r2, #64	; 0x40
 80115ce:	5c9b      	ldrb	r3, [r3, r2]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d101      	bne.n	80115d8 <HAL_I2C_Mem_Read+0x5c>
 80115d4:	2302      	movs	r3, #2
 80115d6:	e0fc      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	2240      	movs	r2, #64	; 0x40
 80115dc:	2101      	movs	r1, #1
 80115de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80115e0:	f7fd fed8 	bl	800f394 <HAL_GetTick>
 80115e4:	0003      	movs	r3, r0
 80115e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80115e8:	2380      	movs	r3, #128	; 0x80
 80115ea:	0219      	lsls	r1, r3, #8
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	2319      	movs	r3, #25
 80115f4:	2201      	movs	r2, #1
 80115f6:	f000 f9dd 	bl	80119b4 <I2C_WaitOnFlagUntilTimeout>
 80115fa:	1e03      	subs	r3, r0, #0
 80115fc:	d001      	beq.n	8011602 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80115fe:	2301      	movs	r3, #1
 8011600:	e0e7      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2241      	movs	r2, #65	; 0x41
 8011606:	2122      	movs	r1, #34	; 0x22
 8011608:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2242      	movs	r2, #66	; 0x42
 801160e:	2140      	movs	r1, #64	; 0x40
 8011610:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2200      	movs	r2, #0
 8011616:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801161c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	222c      	movs	r2, #44	; 0x2c
 8011622:	18ba      	adds	r2, r7, r2
 8011624:	8812      	ldrh	r2, [r2, #0]
 8011626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2200      	movs	r2, #0
 801162c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801162e:	1dbb      	adds	r3, r7, #6
 8011630:	881c      	ldrh	r4, [r3, #0]
 8011632:	2308      	movs	r3, #8
 8011634:	18fb      	adds	r3, r7, r3
 8011636:	881a      	ldrh	r2, [r3, #0]
 8011638:	230a      	movs	r3, #10
 801163a:	18fb      	adds	r3, r7, r3
 801163c:	8819      	ldrh	r1, [r3, #0]
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	9301      	str	r3, [sp, #4]
 8011644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	0023      	movs	r3, r4
 801164a:	f000 f92f 	bl	80118ac <I2C_RequestMemoryRead>
 801164e:	1e03      	subs	r3, r0, #0
 8011650:	d005      	beq.n	801165e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2240      	movs	r2, #64	; 0x40
 8011656:	2100      	movs	r1, #0
 8011658:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801165a:	2301      	movs	r3, #1
 801165c:	e0b9      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011662:	b29b      	uxth	r3, r3
 8011664:	2bff      	cmp	r3, #255	; 0xff
 8011666:	d911      	bls.n	801168c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	22ff      	movs	r2, #255	; 0xff
 801166c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011672:	b2da      	uxtb	r2, r3
 8011674:	2380      	movs	r3, #128	; 0x80
 8011676:	045c      	lsls	r4, r3, #17
 8011678:	230a      	movs	r3, #10
 801167a:	18fb      	adds	r3, r7, r3
 801167c:	8819      	ldrh	r1, [r3, #0]
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	4b56      	ldr	r3, [pc, #344]	; (80117dc <HAL_I2C_Mem_Read+0x260>)
 8011682:	9300      	str	r3, [sp, #0]
 8011684:	0023      	movs	r3, r4
 8011686:	f000 fb77 	bl	8011d78 <I2C_TransferConfig>
 801168a:	e012      	b.n	80116b2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011690:	b29a      	uxth	r2, r3
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801169a:	b2da      	uxtb	r2, r3
 801169c:	2380      	movs	r3, #128	; 0x80
 801169e:	049c      	lsls	r4, r3, #18
 80116a0:	230a      	movs	r3, #10
 80116a2:	18fb      	adds	r3, r7, r3
 80116a4:	8819      	ldrh	r1, [r3, #0]
 80116a6:	68f8      	ldr	r0, [r7, #12]
 80116a8:	4b4c      	ldr	r3, [pc, #304]	; (80117dc <HAL_I2C_Mem_Read+0x260>)
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	0023      	movs	r3, r4
 80116ae:	f000 fb63 	bl	8011d78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80116b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	0013      	movs	r3, r2
 80116bc:	2200      	movs	r2, #0
 80116be:	2104      	movs	r1, #4
 80116c0:	f000 f978 	bl	80119b4 <I2C_WaitOnFlagUntilTimeout>
 80116c4:	1e03      	subs	r3, r0, #0
 80116c6:	d001      	beq.n	80116cc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80116c8:	2301      	movs	r3, #1
 80116ca:	e082      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d6:	b2d2      	uxtb	r2, r2
 80116d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116de:	1c5a      	adds	r2, r3, #1
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116e8:	3b01      	subs	r3, #1
 80116ea:	b29a      	uxth	r2, r3
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	3b01      	subs	r3, #1
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011702:	b29b      	uxth	r3, r3
 8011704:	2b00      	cmp	r3, #0
 8011706:	d03a      	beq.n	801177e <HAL_I2C_Mem_Read+0x202>
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801170c:	2b00      	cmp	r3, #0
 801170e:	d136      	bne.n	801177e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	0013      	movs	r3, r2
 801171a:	2200      	movs	r2, #0
 801171c:	2180      	movs	r1, #128	; 0x80
 801171e:	f000 f949 	bl	80119b4 <I2C_WaitOnFlagUntilTimeout>
 8011722:	1e03      	subs	r3, r0, #0
 8011724:	d001      	beq.n	801172a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	e053      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801172e:	b29b      	uxth	r3, r3
 8011730:	2bff      	cmp	r3, #255	; 0xff
 8011732:	d911      	bls.n	8011758 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	22ff      	movs	r2, #255	; 0xff
 8011738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801173e:	b2da      	uxtb	r2, r3
 8011740:	2380      	movs	r3, #128	; 0x80
 8011742:	045c      	lsls	r4, r3, #17
 8011744:	230a      	movs	r3, #10
 8011746:	18fb      	adds	r3, r7, r3
 8011748:	8819      	ldrh	r1, [r3, #0]
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	2300      	movs	r3, #0
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	0023      	movs	r3, r4
 8011752:	f000 fb11 	bl	8011d78 <I2C_TransferConfig>
 8011756:	e012      	b.n	801177e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801175c:	b29a      	uxth	r2, r3
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011766:	b2da      	uxtb	r2, r3
 8011768:	2380      	movs	r3, #128	; 0x80
 801176a:	049c      	lsls	r4, r3, #18
 801176c:	230a      	movs	r3, #10
 801176e:	18fb      	adds	r3, r7, r3
 8011770:	8819      	ldrh	r1, [r3, #0]
 8011772:	68f8      	ldr	r0, [r7, #12]
 8011774:	2300      	movs	r3, #0
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	0023      	movs	r3, r4
 801177a:	f000 fafd 	bl	8011d78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011782:	b29b      	uxth	r3, r3
 8011784:	2b00      	cmp	r3, #0
 8011786:	d194      	bne.n	80116b2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011788:	697a      	ldr	r2, [r7, #20]
 801178a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	0018      	movs	r0, r3
 8011790:	f000 f9ae 	bl	8011af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011794:	1e03      	subs	r3, r0, #0
 8011796:	d001      	beq.n	801179c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8011798:	2301      	movs	r3, #1
 801179a:	e01a      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2220      	movs	r2, #32
 80117a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	685a      	ldr	r2, [r3, #4]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	490c      	ldr	r1, [pc, #48]	; (80117e0 <HAL_I2C_Mem_Read+0x264>)
 80117b0:	400a      	ands	r2, r1
 80117b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2241      	movs	r2, #65	; 0x41
 80117b8:	2120      	movs	r1, #32
 80117ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2242      	movs	r2, #66	; 0x42
 80117c0:	2100      	movs	r1, #0
 80117c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2240      	movs	r2, #64	; 0x40
 80117c8:	2100      	movs	r1, #0
 80117ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80117cc:	2300      	movs	r3, #0
 80117ce:	e000      	b.n	80117d2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80117d0:	2302      	movs	r3, #2
  }
}
 80117d2:	0018      	movs	r0, r3
 80117d4:	46bd      	mov	sp, r7
 80117d6:	b007      	add	sp, #28
 80117d8:	bd90      	pop	{r4, r7, pc}
 80117da:	46c0      	nop			; (mov r8, r8)
 80117dc:	80002400 	.word	0x80002400
 80117e0:	fe00e800 	.word	0xfe00e800

080117e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80117e4:	b5b0      	push	{r4, r5, r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af02      	add	r7, sp, #8
 80117ea:	60f8      	str	r0, [r7, #12]
 80117ec:	000c      	movs	r4, r1
 80117ee:	0010      	movs	r0, r2
 80117f0:	0019      	movs	r1, r3
 80117f2:	250a      	movs	r5, #10
 80117f4:	197b      	adds	r3, r7, r5
 80117f6:	1c22      	adds	r2, r4, #0
 80117f8:	801a      	strh	r2, [r3, #0]
 80117fa:	2308      	movs	r3, #8
 80117fc:	18fb      	adds	r3, r7, r3
 80117fe:	1c02      	adds	r2, r0, #0
 8011800:	801a      	strh	r2, [r3, #0]
 8011802:	1dbb      	adds	r3, r7, #6
 8011804:	1c0a      	adds	r2, r1, #0
 8011806:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011808:	1dbb      	adds	r3, r7, #6
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	b2da      	uxtb	r2, r3
 801180e:	2380      	movs	r3, #128	; 0x80
 8011810:	045c      	lsls	r4, r3, #17
 8011812:	197b      	adds	r3, r7, r5
 8011814:	8819      	ldrh	r1, [r3, #0]
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	4b23      	ldr	r3, [pc, #140]	; (80118a8 <I2C_RequestMemoryWrite+0xc4>)
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	0023      	movs	r3, r4
 801181e:	f000 faab 	bl	8011d78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011824:	6a39      	ldr	r1, [r7, #32]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	0018      	movs	r0, r3
 801182a:	f000 f91b 	bl	8011a64 <I2C_WaitOnTXISFlagUntilTimeout>
 801182e:	1e03      	subs	r3, r0, #0
 8011830:	d001      	beq.n	8011836 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8011832:	2301      	movs	r3, #1
 8011834:	e033      	b.n	801189e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011836:	1dbb      	adds	r3, r7, #6
 8011838:	881b      	ldrh	r3, [r3, #0]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d107      	bne.n	801184e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801183e:	2308      	movs	r3, #8
 8011840:	18fb      	adds	r3, r7, r3
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	b2da      	uxtb	r2, r3
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	629a      	str	r2, [r3, #40]	; 0x28
 801184c:	e019      	b.n	8011882 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801184e:	2308      	movs	r3, #8
 8011850:	18fb      	adds	r3, r7, r3
 8011852:	881b      	ldrh	r3, [r3, #0]
 8011854:	0a1b      	lsrs	r3, r3, #8
 8011856:	b29b      	uxth	r3, r3
 8011858:	b2da      	uxtb	r2, r3
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011862:	6a39      	ldr	r1, [r7, #32]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	0018      	movs	r0, r3
 8011868:	f000 f8fc 	bl	8011a64 <I2C_WaitOnTXISFlagUntilTimeout>
 801186c:	1e03      	subs	r3, r0, #0
 801186e:	d001      	beq.n	8011874 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8011870:	2301      	movs	r3, #1
 8011872:	e014      	b.n	801189e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011874:	2308      	movs	r3, #8
 8011876:	18fb      	adds	r3, r7, r3
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	b2da      	uxtb	r2, r3
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8011882:	6a3a      	ldr	r2, [r7, #32]
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011888:	9300      	str	r3, [sp, #0]
 801188a:	0013      	movs	r3, r2
 801188c:	2200      	movs	r2, #0
 801188e:	2180      	movs	r1, #128	; 0x80
 8011890:	f000 f890 	bl	80119b4 <I2C_WaitOnFlagUntilTimeout>
 8011894:	1e03      	subs	r3, r0, #0
 8011896:	d001      	beq.n	801189c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8011898:	2301      	movs	r3, #1
 801189a:	e000      	b.n	801189e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 801189c:	2300      	movs	r3, #0
}
 801189e:	0018      	movs	r0, r3
 80118a0:	46bd      	mov	sp, r7
 80118a2:	b004      	add	sp, #16
 80118a4:	bdb0      	pop	{r4, r5, r7, pc}
 80118a6:	46c0      	nop			; (mov r8, r8)
 80118a8:	80002000 	.word	0x80002000

080118ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80118ac:	b5b0      	push	{r4, r5, r7, lr}
 80118ae:	b086      	sub	sp, #24
 80118b0:	af02      	add	r7, sp, #8
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	000c      	movs	r4, r1
 80118b6:	0010      	movs	r0, r2
 80118b8:	0019      	movs	r1, r3
 80118ba:	250a      	movs	r5, #10
 80118bc:	197b      	adds	r3, r7, r5
 80118be:	1c22      	adds	r2, r4, #0
 80118c0:	801a      	strh	r2, [r3, #0]
 80118c2:	2308      	movs	r3, #8
 80118c4:	18fb      	adds	r3, r7, r3
 80118c6:	1c02      	adds	r2, r0, #0
 80118c8:	801a      	strh	r2, [r3, #0]
 80118ca:	1dbb      	adds	r3, r7, #6
 80118cc:	1c0a      	adds	r2, r1, #0
 80118ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80118d0:	1dbb      	adds	r3, r7, #6
 80118d2:	881b      	ldrh	r3, [r3, #0]
 80118d4:	b2da      	uxtb	r2, r3
 80118d6:	197b      	adds	r3, r7, r5
 80118d8:	8819      	ldrh	r1, [r3, #0]
 80118da:	68f8      	ldr	r0, [r7, #12]
 80118dc:	4b23      	ldr	r3, [pc, #140]	; (801196c <I2C_RequestMemoryRead+0xc0>)
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	2300      	movs	r3, #0
 80118e2:	f000 fa49 	bl	8011d78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80118e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118e8:	6a39      	ldr	r1, [r7, #32]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	0018      	movs	r0, r3
 80118ee:	f000 f8b9 	bl	8011a64 <I2C_WaitOnTXISFlagUntilTimeout>
 80118f2:	1e03      	subs	r3, r0, #0
 80118f4:	d001      	beq.n	80118fa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80118f6:	2301      	movs	r3, #1
 80118f8:	e033      	b.n	8011962 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80118fa:	1dbb      	adds	r3, r7, #6
 80118fc:	881b      	ldrh	r3, [r3, #0]
 80118fe:	2b01      	cmp	r3, #1
 8011900:	d107      	bne.n	8011912 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011902:	2308      	movs	r3, #8
 8011904:	18fb      	adds	r3, r7, r3
 8011906:	881b      	ldrh	r3, [r3, #0]
 8011908:	b2da      	uxtb	r2, r3
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	629a      	str	r2, [r3, #40]	; 0x28
 8011910:	e019      	b.n	8011946 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011912:	2308      	movs	r3, #8
 8011914:	18fb      	adds	r3, r7, r3
 8011916:	881b      	ldrh	r3, [r3, #0]
 8011918:	0a1b      	lsrs	r3, r3, #8
 801191a:	b29b      	uxth	r3, r3
 801191c:	b2da      	uxtb	r2, r3
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011926:	6a39      	ldr	r1, [r7, #32]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	0018      	movs	r0, r3
 801192c:	f000 f89a 	bl	8011a64 <I2C_WaitOnTXISFlagUntilTimeout>
 8011930:	1e03      	subs	r3, r0, #0
 8011932:	d001      	beq.n	8011938 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8011934:	2301      	movs	r3, #1
 8011936:	e014      	b.n	8011962 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011938:	2308      	movs	r3, #8
 801193a:	18fb      	adds	r3, r7, r3
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	b2da      	uxtb	r2, r3
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8011946:	6a3a      	ldr	r2, [r7, #32]
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	0013      	movs	r3, r2
 8011950:	2200      	movs	r2, #0
 8011952:	2140      	movs	r1, #64	; 0x40
 8011954:	f000 f82e 	bl	80119b4 <I2C_WaitOnFlagUntilTimeout>
 8011958:	1e03      	subs	r3, r0, #0
 801195a:	d001      	beq.n	8011960 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 801195c:	2301      	movs	r3, #1
 801195e:	e000      	b.n	8011962 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8011960:	2300      	movs	r3, #0
}
 8011962:	0018      	movs	r0, r3
 8011964:	46bd      	mov	sp, r7
 8011966:	b004      	add	sp, #16
 8011968:	bdb0      	pop	{r4, r5, r7, pc}
 801196a:	46c0      	nop			; (mov r8, r8)
 801196c:	80002000 	.word	0x80002000

08011970 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	699b      	ldr	r3, [r3, #24]
 801197e:	2202      	movs	r2, #2
 8011980:	4013      	ands	r3, r2
 8011982:	2b02      	cmp	r3, #2
 8011984:	d103      	bne.n	801198e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2200      	movs	r2, #0
 801198c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	699b      	ldr	r3, [r3, #24]
 8011994:	2201      	movs	r2, #1
 8011996:	4013      	ands	r3, r2
 8011998:	2b01      	cmp	r3, #1
 801199a:	d007      	beq.n	80119ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	699a      	ldr	r2, [r3, #24]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2101      	movs	r1, #1
 80119a8:	430a      	orrs	r2, r1
 80119aa:	619a      	str	r2, [r3, #24]
  }
}
 80119ac:	46c0      	nop			; (mov r8, r8)
 80119ae:	46bd      	mov	sp, r7
 80119b0:	b002      	add	sp, #8
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	60f8      	str	r0, [r7, #12]
 80119bc:	60b9      	str	r1, [r7, #8]
 80119be:	603b      	str	r3, [r7, #0]
 80119c0:	1dfb      	adds	r3, r7, #7
 80119c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80119c4:	e03a      	b.n	8011a3c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80119c6:	69ba      	ldr	r2, [r7, #24]
 80119c8:	6839      	ldr	r1, [r7, #0]
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	0018      	movs	r0, r3
 80119ce:	f000 f8d3 	bl	8011b78 <I2C_IsErrorOccurred>
 80119d2:	1e03      	subs	r3, r0, #0
 80119d4:	d001      	beq.n	80119da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80119d6:	2301      	movs	r3, #1
 80119d8:	e040      	b.n	8011a5c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	3301      	adds	r3, #1
 80119de:	d02d      	beq.n	8011a3c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119e0:	f7fd fcd8 	bl	800f394 <HAL_GetTick>
 80119e4:	0002      	movs	r2, r0
 80119e6:	69bb      	ldr	r3, [r7, #24]
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d302      	bcc.n	80119f6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d122      	bne.n	8011a3c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	699b      	ldr	r3, [r3, #24]
 80119fc:	68ba      	ldr	r2, [r7, #8]
 80119fe:	4013      	ands	r3, r2
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	1ad3      	subs	r3, r2, r3
 8011a04:	425a      	negs	r2, r3
 8011a06:	4153      	adcs	r3, r2
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	001a      	movs	r2, r3
 8011a0c:	1dfb      	adds	r3, r7, #7
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d113      	bne.n	8011a3c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a18:	2220      	movs	r2, #32
 8011a1a:	431a      	orrs	r2, r3
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	2241      	movs	r2, #65	; 0x41
 8011a24:	2120      	movs	r1, #32
 8011a26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2242      	movs	r2, #66	; 0x42
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2240      	movs	r2, #64	; 0x40
 8011a34:	2100      	movs	r1, #0
 8011a36:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011a38:	2301      	movs	r3, #1
 8011a3a:	e00f      	b.n	8011a5c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	4013      	ands	r3, r2
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	425a      	negs	r2, r3
 8011a4c:	4153      	adcs	r3, r2
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	001a      	movs	r2, r3
 8011a52:	1dfb      	adds	r3, r7, #7
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d0b5      	beq.n	80119c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	0018      	movs	r0, r3
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	b004      	add	sp, #16
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011a70:	e032      	b.n	8011ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	68b9      	ldr	r1, [r7, #8]
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	0018      	movs	r0, r3
 8011a7a:	f000 f87d 	bl	8011b78 <I2C_IsErrorOccurred>
 8011a7e:	1e03      	subs	r3, r0, #0
 8011a80:	d001      	beq.n	8011a86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011a82:	2301      	movs	r3, #1
 8011a84:	e030      	b.n	8011ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	d025      	beq.n	8011ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a8c:	f7fd fc82 	bl	800f394 <HAL_GetTick>
 8011a90:	0002      	movs	r2, r0
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	68ba      	ldr	r2, [r7, #8]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d302      	bcc.n	8011aa2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d11a      	bne.n	8011ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	4013      	ands	r3, r2
 8011aac:	2b02      	cmp	r3, #2
 8011aae:	d013      	beq.n	8011ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ab4:	2220      	movs	r2, #32
 8011ab6:	431a      	orrs	r2, r3
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2241      	movs	r2, #65	; 0x41
 8011ac0:	2120      	movs	r1, #32
 8011ac2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2242      	movs	r2, #66	; 0x42
 8011ac8:	2100      	movs	r1, #0
 8011aca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2240      	movs	r2, #64	; 0x40
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	e007      	b.n	8011ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	699b      	ldr	r3, [r3, #24]
 8011ade:	2202      	movs	r2, #2
 8011ae0:	4013      	ands	r3, r2
 8011ae2:	2b02      	cmp	r3, #2
 8011ae4:	d1c5      	bne.n	8011a72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011ae6:	2300      	movs	r3, #0
}
 8011ae8:	0018      	movs	r0, r3
 8011aea:	46bd      	mov	sp, r7
 8011aec:	b004      	add	sp, #16
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011afc:	e02f      	b.n	8011b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	68b9      	ldr	r1, [r7, #8]
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	0018      	movs	r0, r3
 8011b06:	f000 f837 	bl	8011b78 <I2C_IsErrorOccurred>
 8011b0a:	1e03      	subs	r3, r0, #0
 8011b0c:	d001      	beq.n	8011b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011b0e:	2301      	movs	r3, #1
 8011b10:	e02d      	b.n	8011b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b12:	f7fd fc3f 	bl	800f394 <HAL_GetTick>
 8011b16:	0002      	movs	r2, r0
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	1ad3      	subs	r3, r2, r3
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d302      	bcc.n	8011b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d11a      	bne.n	8011b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	699b      	ldr	r3, [r3, #24]
 8011b2e:	2220      	movs	r2, #32
 8011b30:	4013      	ands	r3, r2
 8011b32:	2b20      	cmp	r3, #32
 8011b34:	d013      	beq.n	8011b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b3a:	2220      	movs	r2, #32
 8011b3c:	431a      	orrs	r2, r3
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2241      	movs	r2, #65	; 0x41
 8011b46:	2120      	movs	r1, #32
 8011b48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2242      	movs	r2, #66	; 0x42
 8011b4e:	2100      	movs	r1, #0
 8011b50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2240      	movs	r2, #64	; 0x40
 8011b56:	2100      	movs	r1, #0
 8011b58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e007      	b.n	8011b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	699b      	ldr	r3, [r3, #24]
 8011b64:	2220      	movs	r2, #32
 8011b66:	4013      	ands	r3, r2
 8011b68:	2b20      	cmp	r3, #32
 8011b6a:	d1c8      	bne.n	8011afe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	0018      	movs	r0, r3
 8011b70:	46bd      	mov	sp, r7
 8011b72:	b004      	add	sp, #16
 8011b74:	bd80      	pop	{r7, pc}
	...

08011b78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011b78:	b590      	push	{r4, r7, lr}
 8011b7a:	b08b      	sub	sp, #44	; 0x2c
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b84:	2327      	movs	r3, #39	; 0x27
 8011b86:	18fb      	adds	r3, r7, r3
 8011b88:	2200      	movs	r2, #0
 8011b8a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	699b      	ldr	r3, [r3, #24]
 8011b92:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011b94:	2300      	movs	r3, #0
 8011b96:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	2210      	movs	r2, #16
 8011ba0:	4013      	ands	r3, r2
 8011ba2:	d100      	bne.n	8011ba6 <I2C_IsErrorOccurred+0x2e>
 8011ba4:	e082      	b.n	8011cac <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	2210      	movs	r2, #16
 8011bac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011bae:	e060      	b.n	8011c72 <I2C_IsErrorOccurred+0xfa>
 8011bb0:	2427      	movs	r4, #39	; 0x27
 8011bb2:	193b      	adds	r3, r7, r4
 8011bb4:	193a      	adds	r2, r7, r4
 8011bb6:	7812      	ldrb	r2, [r2, #0]
 8011bb8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	d058      	beq.n	8011c72 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011bc0:	f7fd fbe8 	bl	800f394 <HAL_GetTick>
 8011bc4:	0002      	movs	r2, r0
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	1ad3      	subs	r3, r2, r3
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d306      	bcc.n	8011bde <I2C_IsErrorOccurred+0x66>
 8011bd0:	193b      	adds	r3, r7, r4
 8011bd2:	193a      	adds	r2, r7, r4
 8011bd4:	7812      	ldrb	r2, [r2, #0]
 8011bd6:	701a      	strb	r2, [r3, #0]
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d149      	bne.n	8011c72 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	685a      	ldr	r2, [r3, #4]
 8011be4:	2380      	movs	r3, #128	; 0x80
 8011be6:	01db      	lsls	r3, r3, #7
 8011be8:	4013      	ands	r3, r2
 8011bea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011bec:	2013      	movs	r0, #19
 8011bee:	183b      	adds	r3, r7, r0
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	2142      	movs	r1, #66	; 0x42
 8011bf4:	5c52      	ldrb	r2, [r2, r1]
 8011bf6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	699a      	ldr	r2, [r3, #24]
 8011bfe:	2380      	movs	r3, #128	; 0x80
 8011c00:	021b      	lsls	r3, r3, #8
 8011c02:	401a      	ands	r2, r3
 8011c04:	2380      	movs	r3, #128	; 0x80
 8011c06:	021b      	lsls	r3, r3, #8
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d126      	bne.n	8011c5a <I2C_IsErrorOccurred+0xe2>
 8011c0c:	697a      	ldr	r2, [r7, #20]
 8011c0e:	2380      	movs	r3, #128	; 0x80
 8011c10:	01db      	lsls	r3, r3, #7
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d021      	beq.n	8011c5a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8011c16:	183b      	adds	r3, r7, r0
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	2b20      	cmp	r3, #32
 8011c1c:	d01d      	beq.n	8011c5a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	685a      	ldr	r2, [r3, #4]
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	2180      	movs	r1, #128	; 0x80
 8011c2a:	01c9      	lsls	r1, r1, #7
 8011c2c:	430a      	orrs	r2, r1
 8011c2e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011c30:	f7fd fbb0 	bl	800f394 <HAL_GetTick>
 8011c34:	0003      	movs	r3, r0
 8011c36:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011c38:	e00f      	b.n	8011c5a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011c3a:	f7fd fbab 	bl	800f394 <HAL_GetTick>
 8011c3e:	0002      	movs	r2, r0
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	2b19      	cmp	r3, #25
 8011c46:	d908      	bls.n	8011c5a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	2220      	movs	r2, #32
 8011c4c:	4313      	orrs	r3, r2
 8011c4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011c50:	2327      	movs	r3, #39	; 0x27
 8011c52:	18fb      	adds	r3, r7, r3
 8011c54:	2201      	movs	r2, #1
 8011c56:	701a      	strb	r2, [r3, #0]

              break;
 8011c58:	e00b      	b.n	8011c72 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	699b      	ldr	r3, [r3, #24]
 8011c60:	2220      	movs	r2, #32
 8011c62:	4013      	ands	r3, r2
 8011c64:	2127      	movs	r1, #39	; 0x27
 8011c66:	187a      	adds	r2, r7, r1
 8011c68:	1879      	adds	r1, r7, r1
 8011c6a:	7809      	ldrb	r1, [r1, #0]
 8011c6c:	7011      	strb	r1, [r2, #0]
 8011c6e:	2b20      	cmp	r3, #32
 8011c70:	d1e3      	bne.n	8011c3a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	699b      	ldr	r3, [r3, #24]
 8011c78:	2220      	movs	r2, #32
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	2b20      	cmp	r3, #32
 8011c7e:	d004      	beq.n	8011c8a <I2C_IsErrorOccurred+0x112>
 8011c80:	2327      	movs	r3, #39	; 0x27
 8011c82:	18fb      	adds	r3, r7, r3
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d092      	beq.n	8011bb0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011c8a:	2327      	movs	r3, #39	; 0x27
 8011c8c:	18fb      	adds	r3, r7, r3
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d103      	bne.n	8011c9c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2220      	movs	r2, #32
 8011c9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	2204      	movs	r2, #4
 8011ca0:	4313      	orrs	r3, r2
 8011ca2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011ca4:	2327      	movs	r3, #39	; 0x27
 8011ca6:	18fb      	adds	r3, r7, r3
 8011ca8:	2201      	movs	r2, #1
 8011caa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011cb4:	69ba      	ldr	r2, [r7, #24]
 8011cb6:	2380      	movs	r3, #128	; 0x80
 8011cb8:	005b      	lsls	r3, r3, #1
 8011cba:	4013      	ands	r3, r2
 8011cbc:	d00c      	beq.n	8011cd8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011cbe:	6a3b      	ldr	r3, [r7, #32]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	2280      	movs	r2, #128	; 0x80
 8011ccc:	0052      	lsls	r2, r2, #1
 8011cce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011cd0:	2327      	movs	r3, #39	; 0x27
 8011cd2:	18fb      	adds	r3, r7, r3
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011cd8:	69ba      	ldr	r2, [r7, #24]
 8011cda:	2380      	movs	r3, #128	; 0x80
 8011cdc:	00db      	lsls	r3, r3, #3
 8011cde:	4013      	ands	r3, r2
 8011ce0:	d00c      	beq.n	8011cfc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011ce2:	6a3b      	ldr	r3, [r7, #32]
 8011ce4:	2208      	movs	r2, #8
 8011ce6:	4313      	orrs	r3, r2
 8011ce8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2280      	movs	r2, #128	; 0x80
 8011cf0:	00d2      	lsls	r2, r2, #3
 8011cf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011cf4:	2327      	movs	r3, #39	; 0x27
 8011cf6:	18fb      	adds	r3, r7, r3
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011cfc:	69ba      	ldr	r2, [r7, #24]
 8011cfe:	2380      	movs	r3, #128	; 0x80
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	4013      	ands	r3, r2
 8011d04:	d00c      	beq.n	8011d20 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	2202      	movs	r2, #2
 8011d0a:	4313      	orrs	r3, r2
 8011d0c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2280      	movs	r2, #128	; 0x80
 8011d14:	0092      	lsls	r2, r2, #2
 8011d16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011d18:	2327      	movs	r3, #39	; 0x27
 8011d1a:	18fb      	adds	r3, r7, r3
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011d20:	2327      	movs	r3, #39	; 0x27
 8011d22:	18fb      	adds	r3, r7, r3
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d01d      	beq.n	8011d66 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	0018      	movs	r0, r3
 8011d2e:	f7ff fe1f 	bl	8011970 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	685a      	ldr	r2, [r3, #4]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	490d      	ldr	r1, [pc, #52]	; (8011d74 <I2C_IsErrorOccurred+0x1fc>)
 8011d3e:	400a      	ands	r2, r1
 8011d40:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d46:	6a3b      	ldr	r3, [r7, #32]
 8011d48:	431a      	orrs	r2, r3
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2241      	movs	r2, #65	; 0x41
 8011d52:	2120      	movs	r1, #32
 8011d54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2242      	movs	r2, #66	; 0x42
 8011d5a:	2100      	movs	r1, #0
 8011d5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2240      	movs	r2, #64	; 0x40
 8011d62:	2100      	movs	r1, #0
 8011d64:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011d66:	2327      	movs	r3, #39	; 0x27
 8011d68:	18fb      	adds	r3, r7, r3
 8011d6a:	781b      	ldrb	r3, [r3, #0]
}
 8011d6c:	0018      	movs	r0, r3
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	b00b      	add	sp, #44	; 0x2c
 8011d72:	bd90      	pop	{r4, r7, pc}
 8011d74:	fe00e800 	.word	0xfe00e800

08011d78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011d78:	b590      	push	{r4, r7, lr}
 8011d7a:	b087      	sub	sp, #28
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	0008      	movs	r0, r1
 8011d82:	0011      	movs	r1, r2
 8011d84:	607b      	str	r3, [r7, #4]
 8011d86:	240a      	movs	r4, #10
 8011d88:	193b      	adds	r3, r7, r4
 8011d8a:	1c02      	adds	r2, r0, #0
 8011d8c:	801a      	strh	r2, [r3, #0]
 8011d8e:	2009      	movs	r0, #9
 8011d90:	183b      	adds	r3, r7, r0
 8011d92:	1c0a      	adds	r2, r1, #0
 8011d94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011d96:	193b      	adds	r3, r7, r4
 8011d98:	881b      	ldrh	r3, [r3, #0]
 8011d9a:	059b      	lsls	r3, r3, #22
 8011d9c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011d9e:	183b      	adds	r3, r7, r0
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	0419      	lsls	r1, r3, #16
 8011da4:	23ff      	movs	r3, #255	; 0xff
 8011da6:	041b      	lsls	r3, r3, #16
 8011da8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011daa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db2:	4313      	orrs	r3, r2
 8011db4:	005b      	lsls	r3, r3, #1
 8011db6:	085b      	lsrs	r3, r3, #1
 8011db8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dc2:	0d51      	lsrs	r1, r2, #21
 8011dc4:	2280      	movs	r2, #128	; 0x80
 8011dc6:	00d2      	lsls	r2, r2, #3
 8011dc8:	400a      	ands	r2, r1
 8011dca:	4907      	ldr	r1, [pc, #28]	; (8011de8 <I2C_TransferConfig+0x70>)
 8011dcc:	430a      	orrs	r2, r1
 8011dce:	43d2      	mvns	r2, r2
 8011dd0:	401a      	ands	r2, r3
 8011dd2:	0011      	movs	r1, r2
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	697a      	ldr	r2, [r7, #20]
 8011dda:	430a      	orrs	r2, r1
 8011ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011dde:	46c0      	nop			; (mov r8, r8)
 8011de0:	46bd      	mov	sp, r7
 8011de2:	b007      	add	sp, #28
 8011de4:	bd90      	pop	{r4, r7, pc}
 8011de6:	46c0      	nop			; (mov r8, r8)
 8011de8:	03ff63ff 	.word	0x03ff63ff

08011dec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2241      	movs	r2, #65	; 0x41
 8011dfa:	5c9b      	ldrb	r3, [r3, r2]
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	2b20      	cmp	r3, #32
 8011e00:	d138      	bne.n	8011e74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2240      	movs	r2, #64	; 0x40
 8011e06:	5c9b      	ldrb	r3, [r3, r2]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d101      	bne.n	8011e10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011e0c:	2302      	movs	r3, #2
 8011e0e:	e032      	b.n	8011e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2240      	movs	r2, #64	; 0x40
 8011e14:	2101      	movs	r1, #1
 8011e16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2241      	movs	r2, #65	; 0x41
 8011e1c:	2124      	movs	r1, #36	; 0x24
 8011e1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2101      	movs	r1, #1
 8011e2c:	438a      	bics	r2, r1
 8011e2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4911      	ldr	r1, [pc, #68]	; (8011e80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8011e3c:	400a      	ands	r2, r1
 8011e3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	6819      	ldr	r1, [r3, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	683a      	ldr	r2, [r7, #0]
 8011e4c:	430a      	orrs	r2, r1
 8011e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2101      	movs	r1, #1
 8011e5c:	430a      	orrs	r2, r1
 8011e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2241      	movs	r2, #65	; 0x41
 8011e64:	2120      	movs	r1, #32
 8011e66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2240      	movs	r2, #64	; 0x40
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011e70:	2300      	movs	r3, #0
 8011e72:	e000      	b.n	8011e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011e74:	2302      	movs	r3, #2
  }
}
 8011e76:	0018      	movs	r0, r3
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	b002      	add	sp, #8
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	46c0      	nop			; (mov r8, r8)
 8011e80:	ffffefff 	.word	0xffffefff

08011e84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2241      	movs	r2, #65	; 0x41
 8011e92:	5c9b      	ldrb	r3, [r3, r2]
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	2b20      	cmp	r3, #32
 8011e98:	d139      	bne.n	8011f0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2240      	movs	r2, #64	; 0x40
 8011e9e:	5c9b      	ldrb	r3, [r3, r2]
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d101      	bne.n	8011ea8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011ea4:	2302      	movs	r3, #2
 8011ea6:	e033      	b.n	8011f10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2240      	movs	r2, #64	; 0x40
 8011eac:	2101      	movs	r1, #1
 8011eae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2241      	movs	r2, #65	; 0x41
 8011eb4:	2124      	movs	r1, #36	; 0x24
 8011eb6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	438a      	bics	r2, r1
 8011ec6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	4a11      	ldr	r2, [pc, #68]	; (8011f18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	021b      	lsls	r3, r3, #8
 8011edc:	68fa      	ldr	r2, [r7, #12]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	68fa      	ldr	r2, [r7, #12]
 8011ee8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2101      	movs	r1, #1
 8011ef6:	430a      	orrs	r2, r1
 8011ef8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2241      	movs	r2, #65	; 0x41
 8011efe:	2120      	movs	r1, #32
 8011f00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2240      	movs	r2, #64	; 0x40
 8011f06:	2100      	movs	r1, #0
 8011f08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	e000      	b.n	8011f10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011f0e:	2302      	movs	r3, #2
  }
}
 8011f10:	0018      	movs	r0, r3
 8011f12:	46bd      	mov	sp, r7
 8011f14:	b004      	add	sp, #16
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	fffff0ff 	.word	0xfffff0ff

08011f1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8011f24:	4b19      	ldr	r3, [pc, #100]	; (8011f8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4a19      	ldr	r2, [pc, #100]	; (8011f90 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8011f2a:	4013      	ands	r3, r2
 8011f2c:	0019      	movs	r1, r3
 8011f2e:	4b17      	ldr	r3, [pc, #92]	; (8011f8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	430a      	orrs	r2, r1
 8011f34:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	2380      	movs	r3, #128	; 0x80
 8011f3a:	009b      	lsls	r3, r3, #2
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d11f      	bne.n	8011f80 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8011f40:	4b14      	ldr	r3, [pc, #80]	; (8011f94 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	0013      	movs	r3, r2
 8011f46:	005b      	lsls	r3, r3, #1
 8011f48:	189b      	adds	r3, r3, r2
 8011f4a:	005b      	lsls	r3, r3, #1
 8011f4c:	4912      	ldr	r1, [pc, #72]	; (8011f98 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011f4e:	0018      	movs	r0, r3
 8011f50:	f7f0 f8f2 	bl	8002138 <__udivsi3>
 8011f54:	0003      	movs	r3, r0
 8011f56:	3301      	adds	r3, #1
 8011f58:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8011f5a:	e008      	b.n	8011f6e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d003      	beq.n	8011f6a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	3b01      	subs	r3, #1
 8011f66:	60fb      	str	r3, [r7, #12]
 8011f68:	e001      	b.n	8011f6e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8011f6a:	2303      	movs	r3, #3
 8011f6c:	e009      	b.n	8011f82 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8011f6e:	4b07      	ldr	r3, [pc, #28]	; (8011f8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8011f70:	695a      	ldr	r2, [r3, #20]
 8011f72:	2380      	movs	r3, #128	; 0x80
 8011f74:	00db      	lsls	r3, r3, #3
 8011f76:	401a      	ands	r2, r3
 8011f78:	2380      	movs	r3, #128	; 0x80
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d0ed      	beq.n	8011f5c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8011f80:	2300      	movs	r3, #0
}
 8011f82:	0018      	movs	r0, r3
 8011f84:	46bd      	mov	sp, r7
 8011f86:	b004      	add	sp, #16
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	46c0      	nop			; (mov r8, r8)
 8011f8c:	40007000 	.word	0x40007000
 8011f90:	fffff9ff 	.word	0xfffff9ff
 8011f94:	20005028 	.word	0x20005028
 8011f98:	000f4240 	.word	0x000f4240

08011f9c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8011fa0:	4b03      	ldr	r3, [pc, #12]	; (8011fb0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8011fa2:	689a      	ldr	r2, [r3, #8]
 8011fa4:	23e0      	movs	r3, #224	; 0xe0
 8011fa6:	01db      	lsls	r3, r3, #7
 8011fa8:	4013      	ands	r3, r2
}
 8011faa:	0018      	movs	r0, r3
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	40021000 	.word	0x40021000

08011fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b088      	sub	sp, #32
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d101      	bne.n	8011fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	e2fe      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	2201      	movs	r2, #1
 8011fcc:	4013      	ands	r3, r2
 8011fce:	d100      	bne.n	8011fd2 <HAL_RCC_OscConfig+0x1e>
 8011fd0:	e07c      	b.n	80120cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011fd2:	4bc3      	ldr	r3, [pc, #780]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	2238      	movs	r2, #56	; 0x38
 8011fd8:	4013      	ands	r3, r2
 8011fda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011fdc:	4bc0      	ldr	r3, [pc, #768]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	2203      	movs	r2, #3
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	2b10      	cmp	r3, #16
 8011fea:	d102      	bne.n	8011ff2 <HAL_RCC_OscConfig+0x3e>
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	2b03      	cmp	r3, #3
 8011ff0:	d002      	beq.n	8011ff8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	2b08      	cmp	r3, #8
 8011ff6:	d10b      	bne.n	8012010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011ff8:	4bb9      	ldr	r3, [pc, #740]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	2380      	movs	r3, #128	; 0x80
 8011ffe:	029b      	lsls	r3, r3, #10
 8012000:	4013      	ands	r3, r2
 8012002:	d062      	beq.n	80120ca <HAL_RCC_OscConfig+0x116>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d15e      	bne.n	80120ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 801200c:	2301      	movs	r3, #1
 801200e:	e2d9      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	685a      	ldr	r2, [r3, #4]
 8012014:	2380      	movs	r3, #128	; 0x80
 8012016:	025b      	lsls	r3, r3, #9
 8012018:	429a      	cmp	r2, r3
 801201a:	d107      	bne.n	801202c <HAL_RCC_OscConfig+0x78>
 801201c:	4bb0      	ldr	r3, [pc, #704]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	4baf      	ldr	r3, [pc, #700]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012022:	2180      	movs	r1, #128	; 0x80
 8012024:	0249      	lsls	r1, r1, #9
 8012026:	430a      	orrs	r2, r1
 8012028:	601a      	str	r2, [r3, #0]
 801202a:	e020      	b.n	801206e <HAL_RCC_OscConfig+0xba>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	685a      	ldr	r2, [r3, #4]
 8012030:	23a0      	movs	r3, #160	; 0xa0
 8012032:	02db      	lsls	r3, r3, #11
 8012034:	429a      	cmp	r2, r3
 8012036:	d10e      	bne.n	8012056 <HAL_RCC_OscConfig+0xa2>
 8012038:	4ba9      	ldr	r3, [pc, #676]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	4ba8      	ldr	r3, [pc, #672]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801203e:	2180      	movs	r1, #128	; 0x80
 8012040:	02c9      	lsls	r1, r1, #11
 8012042:	430a      	orrs	r2, r1
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	4ba6      	ldr	r3, [pc, #664]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	4ba5      	ldr	r3, [pc, #660]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801204c:	2180      	movs	r1, #128	; 0x80
 801204e:	0249      	lsls	r1, r1, #9
 8012050:	430a      	orrs	r2, r1
 8012052:	601a      	str	r2, [r3, #0]
 8012054:	e00b      	b.n	801206e <HAL_RCC_OscConfig+0xba>
 8012056:	4ba2      	ldr	r3, [pc, #648]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	4ba1      	ldr	r3, [pc, #644]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801205c:	49a1      	ldr	r1, [pc, #644]	; (80122e4 <HAL_RCC_OscConfig+0x330>)
 801205e:	400a      	ands	r2, r1
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	4b9f      	ldr	r3, [pc, #636]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	4b9e      	ldr	r3, [pc, #632]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012068:	499f      	ldr	r1, [pc, #636]	; (80122e8 <HAL_RCC_OscConfig+0x334>)
 801206a:	400a      	ands	r2, r1
 801206c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d014      	beq.n	80120a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012076:	f7fd f98d 	bl	800f394 <HAL_GetTick>
 801207a:	0003      	movs	r3, r0
 801207c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801207e:	e008      	b.n	8012092 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012080:	f7fd f988 	bl	800f394 <HAL_GetTick>
 8012084:	0002      	movs	r2, r0
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	2b64      	cmp	r3, #100	; 0x64
 801208c:	d901      	bls.n	8012092 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 801208e:	2303      	movs	r3, #3
 8012090:	e298      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012092:	4b93      	ldr	r3, [pc, #588]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	2380      	movs	r3, #128	; 0x80
 8012098:	029b      	lsls	r3, r3, #10
 801209a:	4013      	ands	r3, r2
 801209c:	d0f0      	beq.n	8012080 <HAL_RCC_OscConfig+0xcc>
 801209e:	e015      	b.n	80120cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80120a0:	f7fd f978 	bl	800f394 <HAL_GetTick>
 80120a4:	0003      	movs	r3, r0
 80120a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80120a8:	e008      	b.n	80120bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80120aa:	f7fd f973 	bl	800f394 <HAL_GetTick>
 80120ae:	0002      	movs	r2, r0
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	1ad3      	subs	r3, r2, r3
 80120b4:	2b64      	cmp	r3, #100	; 0x64
 80120b6:	d901      	bls.n	80120bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80120b8:	2303      	movs	r3, #3
 80120ba:	e283      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80120bc:	4b88      	ldr	r3, [pc, #544]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	2380      	movs	r3, #128	; 0x80
 80120c2:	029b      	lsls	r3, r3, #10
 80120c4:	4013      	ands	r3, r2
 80120c6:	d1f0      	bne.n	80120aa <HAL_RCC_OscConfig+0xf6>
 80120c8:	e000      	b.n	80120cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80120ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2202      	movs	r2, #2
 80120d2:	4013      	ands	r3, r2
 80120d4:	d100      	bne.n	80120d8 <HAL_RCC_OscConfig+0x124>
 80120d6:	e099      	b.n	801220c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80120d8:	4b81      	ldr	r3, [pc, #516]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80120da:	689b      	ldr	r3, [r3, #8]
 80120dc:	2238      	movs	r2, #56	; 0x38
 80120de:	4013      	ands	r3, r2
 80120e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80120e2:	4b7f      	ldr	r3, [pc, #508]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	2203      	movs	r2, #3
 80120e8:	4013      	ands	r3, r2
 80120ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	2b10      	cmp	r3, #16
 80120f0:	d102      	bne.n	80120f8 <HAL_RCC_OscConfig+0x144>
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d002      	beq.n	80120fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d135      	bne.n	801216a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80120fe:	4b78      	ldr	r3, [pc, #480]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	2380      	movs	r3, #128	; 0x80
 8012104:	00db      	lsls	r3, r3, #3
 8012106:	4013      	ands	r3, r2
 8012108:	d005      	beq.n	8012116 <HAL_RCC_OscConfig+0x162>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d101      	bne.n	8012116 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8012112:	2301      	movs	r3, #1
 8012114:	e256      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012116:	4b72      	ldr	r3, [pc, #456]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	4a74      	ldr	r2, [pc, #464]	; (80122ec <HAL_RCC_OscConfig+0x338>)
 801211c:	4013      	ands	r3, r2
 801211e:	0019      	movs	r1, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	695b      	ldr	r3, [r3, #20]
 8012124:	021a      	lsls	r2, r3, #8
 8012126:	4b6e      	ldr	r3, [pc, #440]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012128:	430a      	orrs	r2, r1
 801212a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d112      	bne.n	8012158 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8012132:	4b6b      	ldr	r3, [pc, #428]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	4a6e      	ldr	r2, [pc, #440]	; (80122f0 <HAL_RCC_OscConfig+0x33c>)
 8012138:	4013      	ands	r3, r2
 801213a:	0019      	movs	r1, r3
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	691a      	ldr	r2, [r3, #16]
 8012140:	4b67      	ldr	r3, [pc, #412]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012142:	430a      	orrs	r2, r1
 8012144:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8012146:	4b66      	ldr	r3, [pc, #408]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	0adb      	lsrs	r3, r3, #11
 801214c:	2207      	movs	r2, #7
 801214e:	4013      	ands	r3, r2
 8012150:	4a68      	ldr	r2, [pc, #416]	; (80122f4 <HAL_RCC_OscConfig+0x340>)
 8012152:	40da      	lsrs	r2, r3
 8012154:	4b68      	ldr	r3, [pc, #416]	; (80122f8 <HAL_RCC_OscConfig+0x344>)
 8012156:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8012158:	4b68      	ldr	r3, [pc, #416]	; (80122fc <HAL_RCC_OscConfig+0x348>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	0018      	movs	r0, r3
 801215e:	f7fd f8bd 	bl	800f2dc <HAL_InitTick>
 8012162:	1e03      	subs	r3, r0, #0
 8012164:	d051      	beq.n	801220a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8012166:	2301      	movs	r3, #1
 8012168:	e22c      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d030      	beq.n	80121d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8012172:	4b5b      	ldr	r3, [pc, #364]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	4a5e      	ldr	r2, [pc, #376]	; (80122f0 <HAL_RCC_OscConfig+0x33c>)
 8012178:	4013      	ands	r3, r2
 801217a:	0019      	movs	r1, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	691a      	ldr	r2, [r3, #16]
 8012180:	4b57      	ldr	r3, [pc, #348]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012182:	430a      	orrs	r2, r1
 8012184:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8012186:	4b56      	ldr	r3, [pc, #344]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	4b55      	ldr	r3, [pc, #340]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801218c:	2180      	movs	r1, #128	; 0x80
 801218e:	0049      	lsls	r1, r1, #1
 8012190:	430a      	orrs	r2, r1
 8012192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012194:	f7fd f8fe 	bl	800f394 <HAL_GetTick>
 8012198:	0003      	movs	r3, r0
 801219a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801219c:	e008      	b.n	80121b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801219e:	f7fd f8f9 	bl	800f394 <HAL_GetTick>
 80121a2:	0002      	movs	r2, r0
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	2b02      	cmp	r3, #2
 80121aa:	d901      	bls.n	80121b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80121ac:	2303      	movs	r3, #3
 80121ae:	e209      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80121b0:	4b4b      	ldr	r3, [pc, #300]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	2380      	movs	r3, #128	; 0x80
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	4013      	ands	r3, r2
 80121ba:	d0f0      	beq.n	801219e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80121bc:	4b48      	ldr	r3, [pc, #288]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	4a4a      	ldr	r2, [pc, #296]	; (80122ec <HAL_RCC_OscConfig+0x338>)
 80121c2:	4013      	ands	r3, r2
 80121c4:	0019      	movs	r1, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	695b      	ldr	r3, [r3, #20]
 80121ca:	021a      	lsls	r2, r3, #8
 80121cc:	4b44      	ldr	r3, [pc, #272]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80121ce:	430a      	orrs	r2, r1
 80121d0:	605a      	str	r2, [r3, #4]
 80121d2:	e01b      	b.n	801220c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80121d4:	4b42      	ldr	r3, [pc, #264]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80121d6:	681a      	ldr	r2, [r3, #0]
 80121d8:	4b41      	ldr	r3, [pc, #260]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80121da:	4949      	ldr	r1, [pc, #292]	; (8012300 <HAL_RCC_OscConfig+0x34c>)
 80121dc:	400a      	ands	r2, r1
 80121de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121e0:	f7fd f8d8 	bl	800f394 <HAL_GetTick>
 80121e4:	0003      	movs	r3, r0
 80121e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80121e8:	e008      	b.n	80121fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80121ea:	f7fd f8d3 	bl	800f394 <HAL_GetTick>
 80121ee:	0002      	movs	r2, r0
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d901      	bls.n	80121fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80121f8:	2303      	movs	r3, #3
 80121fa:	e1e3      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80121fc:	4b38      	ldr	r3, [pc, #224]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	2380      	movs	r3, #128	; 0x80
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	4013      	ands	r3, r2
 8012206:	d1f0      	bne.n	80121ea <HAL_RCC_OscConfig+0x236>
 8012208:	e000      	b.n	801220c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801220a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2208      	movs	r2, #8
 8012212:	4013      	ands	r3, r2
 8012214:	d047      	beq.n	80122a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8012216:	4b32      	ldr	r3, [pc, #200]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012218:	689b      	ldr	r3, [r3, #8]
 801221a:	2238      	movs	r2, #56	; 0x38
 801221c:	4013      	ands	r3, r2
 801221e:	2b18      	cmp	r3, #24
 8012220:	d10a      	bne.n	8012238 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8012222:	4b2f      	ldr	r3, [pc, #188]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012226:	2202      	movs	r2, #2
 8012228:	4013      	ands	r3, r2
 801222a:	d03c      	beq.n	80122a6 <HAL_RCC_OscConfig+0x2f2>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	699b      	ldr	r3, [r3, #24]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d138      	bne.n	80122a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8012234:	2301      	movs	r3, #1
 8012236:	e1c5      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	699b      	ldr	r3, [r3, #24]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d019      	beq.n	8012274 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8012240:	4b27      	ldr	r3, [pc, #156]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012242:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012244:	4b26      	ldr	r3, [pc, #152]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012246:	2101      	movs	r1, #1
 8012248:	430a      	orrs	r2, r1
 801224a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801224c:	f7fd f8a2 	bl	800f394 <HAL_GetTick>
 8012250:	0003      	movs	r3, r0
 8012252:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8012254:	e008      	b.n	8012268 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012256:	f7fd f89d 	bl	800f394 <HAL_GetTick>
 801225a:	0002      	movs	r2, r0
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	2b02      	cmp	r3, #2
 8012262:	d901      	bls.n	8012268 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8012264:	2303      	movs	r3, #3
 8012266:	e1ad      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8012268:	4b1d      	ldr	r3, [pc, #116]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801226a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801226c:	2202      	movs	r2, #2
 801226e:	4013      	ands	r3, r2
 8012270:	d0f1      	beq.n	8012256 <HAL_RCC_OscConfig+0x2a2>
 8012272:	e018      	b.n	80122a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8012274:	4b1a      	ldr	r3, [pc, #104]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 8012276:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012278:	4b19      	ldr	r3, [pc, #100]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801227a:	2101      	movs	r1, #1
 801227c:	438a      	bics	r2, r1
 801227e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012280:	f7fd f888 	bl	800f394 <HAL_GetTick>
 8012284:	0003      	movs	r3, r0
 8012286:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8012288:	e008      	b.n	801229c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801228a:	f7fd f883 	bl	800f394 <HAL_GetTick>
 801228e:	0002      	movs	r2, r0
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	1ad3      	subs	r3, r2, r3
 8012294:	2b02      	cmp	r3, #2
 8012296:	d901      	bls.n	801229c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8012298:	2303      	movs	r3, #3
 801229a:	e193      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801229c:	4b10      	ldr	r3, [pc, #64]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 801229e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80122a0:	2202      	movs	r2, #2
 80122a2:	4013      	ands	r3, r2
 80122a4:	d1f1      	bne.n	801228a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2204      	movs	r2, #4
 80122ac:	4013      	ands	r3, r2
 80122ae:	d100      	bne.n	80122b2 <HAL_RCC_OscConfig+0x2fe>
 80122b0:	e0c6      	b.n	8012440 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80122b2:	231f      	movs	r3, #31
 80122b4:	18fb      	adds	r3, r7, r3
 80122b6:	2200      	movs	r2, #0
 80122b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80122ba:	4b09      	ldr	r3, [pc, #36]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80122bc:	689b      	ldr	r3, [r3, #8]
 80122be:	2238      	movs	r2, #56	; 0x38
 80122c0:	4013      	ands	r3, r2
 80122c2:	2b20      	cmp	r3, #32
 80122c4:	d11e      	bne.n	8012304 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80122c6:	4b06      	ldr	r3, [pc, #24]	; (80122e0 <HAL_RCC_OscConfig+0x32c>)
 80122c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122ca:	2202      	movs	r2, #2
 80122cc:	4013      	ands	r3, r2
 80122ce:	d100      	bne.n	80122d2 <HAL_RCC_OscConfig+0x31e>
 80122d0:	e0b6      	b.n	8012440 <HAL_RCC_OscConfig+0x48c>
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d000      	beq.n	80122dc <HAL_RCC_OscConfig+0x328>
 80122da:	e0b1      	b.n	8012440 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80122dc:	2301      	movs	r3, #1
 80122de:	e171      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
 80122e0:	40021000 	.word	0x40021000
 80122e4:	fffeffff 	.word	0xfffeffff
 80122e8:	fffbffff 	.word	0xfffbffff
 80122ec:	ffff80ff 	.word	0xffff80ff
 80122f0:	ffffc7ff 	.word	0xffffc7ff
 80122f4:	00f42400 	.word	0x00f42400
 80122f8:	20005028 	.word	0x20005028
 80122fc:	2000505c 	.word	0x2000505c
 8012300:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8012304:	4bb1      	ldr	r3, [pc, #708]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012308:	2380      	movs	r3, #128	; 0x80
 801230a:	055b      	lsls	r3, r3, #21
 801230c:	4013      	ands	r3, r2
 801230e:	d101      	bne.n	8012314 <HAL_RCC_OscConfig+0x360>
 8012310:	2301      	movs	r3, #1
 8012312:	e000      	b.n	8012316 <HAL_RCC_OscConfig+0x362>
 8012314:	2300      	movs	r3, #0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d011      	beq.n	801233e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 801231a:	4bac      	ldr	r3, [pc, #688]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801231c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801231e:	4bab      	ldr	r3, [pc, #684]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012320:	2180      	movs	r1, #128	; 0x80
 8012322:	0549      	lsls	r1, r1, #21
 8012324:	430a      	orrs	r2, r1
 8012326:	63da      	str	r2, [r3, #60]	; 0x3c
 8012328:	4ba8      	ldr	r3, [pc, #672]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801232a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801232c:	2380      	movs	r3, #128	; 0x80
 801232e:	055b      	lsls	r3, r3, #21
 8012330:	4013      	ands	r3, r2
 8012332:	60fb      	str	r3, [r7, #12]
 8012334:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8012336:	231f      	movs	r3, #31
 8012338:	18fb      	adds	r3, r7, r3
 801233a:	2201      	movs	r2, #1
 801233c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801233e:	4ba4      	ldr	r3, [pc, #656]	; (80125d0 <HAL_RCC_OscConfig+0x61c>)
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	2380      	movs	r3, #128	; 0x80
 8012344:	005b      	lsls	r3, r3, #1
 8012346:	4013      	ands	r3, r2
 8012348:	d11a      	bne.n	8012380 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801234a:	4ba1      	ldr	r3, [pc, #644]	; (80125d0 <HAL_RCC_OscConfig+0x61c>)
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	4ba0      	ldr	r3, [pc, #640]	; (80125d0 <HAL_RCC_OscConfig+0x61c>)
 8012350:	2180      	movs	r1, #128	; 0x80
 8012352:	0049      	lsls	r1, r1, #1
 8012354:	430a      	orrs	r2, r1
 8012356:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8012358:	f7fd f81c 	bl	800f394 <HAL_GetTick>
 801235c:	0003      	movs	r3, r0
 801235e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012360:	e008      	b.n	8012374 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012362:	f7fd f817 	bl	800f394 <HAL_GetTick>
 8012366:	0002      	movs	r2, r0
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	1ad3      	subs	r3, r2, r3
 801236c:	2b02      	cmp	r3, #2
 801236e:	d901      	bls.n	8012374 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8012370:	2303      	movs	r3, #3
 8012372:	e127      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012374:	4b96      	ldr	r3, [pc, #600]	; (80125d0 <HAL_RCC_OscConfig+0x61c>)
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	2380      	movs	r3, #128	; 0x80
 801237a:	005b      	lsls	r3, r3, #1
 801237c:	4013      	ands	r3, r2
 801237e:	d0f0      	beq.n	8012362 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	689b      	ldr	r3, [r3, #8]
 8012384:	2b01      	cmp	r3, #1
 8012386:	d106      	bne.n	8012396 <HAL_RCC_OscConfig+0x3e2>
 8012388:	4b90      	ldr	r3, [pc, #576]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801238a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801238c:	4b8f      	ldr	r3, [pc, #572]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801238e:	2101      	movs	r1, #1
 8012390:	430a      	orrs	r2, r1
 8012392:	65da      	str	r2, [r3, #92]	; 0x5c
 8012394:	e01c      	b.n	80123d0 <HAL_RCC_OscConfig+0x41c>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	689b      	ldr	r3, [r3, #8]
 801239a:	2b05      	cmp	r3, #5
 801239c:	d10c      	bne.n	80123b8 <HAL_RCC_OscConfig+0x404>
 801239e:	4b8b      	ldr	r3, [pc, #556]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123a2:	4b8a      	ldr	r3, [pc, #552]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123a4:	2104      	movs	r1, #4
 80123a6:	430a      	orrs	r2, r1
 80123a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80123aa:	4b88      	ldr	r3, [pc, #544]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123ae:	4b87      	ldr	r3, [pc, #540]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123b0:	2101      	movs	r1, #1
 80123b2:	430a      	orrs	r2, r1
 80123b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80123b6:	e00b      	b.n	80123d0 <HAL_RCC_OscConfig+0x41c>
 80123b8:	4b84      	ldr	r3, [pc, #528]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123bc:	4b83      	ldr	r3, [pc, #524]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123be:	2101      	movs	r1, #1
 80123c0:	438a      	bics	r2, r1
 80123c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80123c4:	4b81      	ldr	r3, [pc, #516]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123c8:	4b80      	ldr	r3, [pc, #512]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123ca:	2104      	movs	r1, #4
 80123cc:	438a      	bics	r2, r1
 80123ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	689b      	ldr	r3, [r3, #8]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d014      	beq.n	8012402 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80123d8:	f7fc ffdc 	bl	800f394 <HAL_GetTick>
 80123dc:	0003      	movs	r3, r0
 80123de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80123e0:	e009      	b.n	80123f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80123e2:	f7fc ffd7 	bl	800f394 <HAL_GetTick>
 80123e6:	0002      	movs	r2, r0
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	4a79      	ldr	r2, [pc, #484]	; (80125d4 <HAL_RCC_OscConfig+0x620>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d901      	bls.n	80123f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80123f2:	2303      	movs	r3, #3
 80123f4:	e0e6      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80123f6:	4b75      	ldr	r3, [pc, #468]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80123f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123fa:	2202      	movs	r2, #2
 80123fc:	4013      	ands	r3, r2
 80123fe:	d0f0      	beq.n	80123e2 <HAL_RCC_OscConfig+0x42e>
 8012400:	e013      	b.n	801242a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012402:	f7fc ffc7 	bl	800f394 <HAL_GetTick>
 8012406:	0003      	movs	r3, r0
 8012408:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801240a:	e009      	b.n	8012420 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801240c:	f7fc ffc2 	bl	800f394 <HAL_GetTick>
 8012410:	0002      	movs	r2, r0
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	4a6f      	ldr	r2, [pc, #444]	; (80125d4 <HAL_RCC_OscConfig+0x620>)
 8012418:	4293      	cmp	r3, r2
 801241a:	d901      	bls.n	8012420 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 801241c:	2303      	movs	r3, #3
 801241e:	e0d1      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012420:	4b6a      	ldr	r3, [pc, #424]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012424:	2202      	movs	r2, #2
 8012426:	4013      	ands	r3, r2
 8012428:	d1f0      	bne.n	801240c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 801242a:	231f      	movs	r3, #31
 801242c:	18fb      	adds	r3, r7, r3
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	2b01      	cmp	r3, #1
 8012432:	d105      	bne.n	8012440 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8012434:	4b65      	ldr	r3, [pc, #404]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012438:	4b64      	ldr	r3, [pc, #400]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801243a:	4967      	ldr	r1, [pc, #412]	; (80125d8 <HAL_RCC_OscConfig+0x624>)
 801243c:	400a      	ands	r2, r1
 801243e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	69db      	ldr	r3, [r3, #28]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d100      	bne.n	801244a <HAL_RCC_OscConfig+0x496>
 8012448:	e0bb      	b.n	80125c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801244a:	4b60      	ldr	r3, [pc, #384]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801244c:	689b      	ldr	r3, [r3, #8]
 801244e:	2238      	movs	r2, #56	; 0x38
 8012450:	4013      	ands	r3, r2
 8012452:	2b10      	cmp	r3, #16
 8012454:	d100      	bne.n	8012458 <HAL_RCC_OscConfig+0x4a4>
 8012456:	e07b      	b.n	8012550 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	69db      	ldr	r3, [r3, #28]
 801245c:	2b02      	cmp	r3, #2
 801245e:	d156      	bne.n	801250e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012460:	4b5a      	ldr	r3, [pc, #360]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	4b59      	ldr	r3, [pc, #356]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012466:	495d      	ldr	r1, [pc, #372]	; (80125dc <HAL_RCC_OscConfig+0x628>)
 8012468:	400a      	ands	r2, r1
 801246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801246c:	f7fc ff92 	bl	800f394 <HAL_GetTick>
 8012470:	0003      	movs	r3, r0
 8012472:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012474:	e008      	b.n	8012488 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012476:	f7fc ff8d 	bl	800f394 <HAL_GetTick>
 801247a:	0002      	movs	r2, r0
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	2b02      	cmp	r3, #2
 8012482:	d901      	bls.n	8012488 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8012484:	2303      	movs	r3, #3
 8012486:	e09d      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012488:	4b50      	ldr	r3, [pc, #320]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	2380      	movs	r3, #128	; 0x80
 801248e:	049b      	lsls	r3, r3, #18
 8012490:	4013      	ands	r3, r2
 8012492:	d1f0      	bne.n	8012476 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012494:	4b4d      	ldr	r3, [pc, #308]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	4a51      	ldr	r2, [pc, #324]	; (80125e0 <HAL_RCC_OscConfig+0x62c>)
 801249a:	4013      	ands	r3, r2
 801249c:	0019      	movs	r1, r3
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6a1a      	ldr	r2, [r3, #32]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a6:	431a      	orrs	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124ac:	021b      	lsls	r3, r3, #8
 80124ae:	431a      	orrs	r2, r3
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b4:	431a      	orrs	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ba:	431a      	orrs	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124c0:	431a      	orrs	r2, r3
 80124c2:	4b42      	ldr	r3, [pc, #264]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80124c4:	430a      	orrs	r2, r1
 80124c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80124c8:	4b40      	ldr	r3, [pc, #256]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	4b3f      	ldr	r3, [pc, #252]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80124ce:	2180      	movs	r1, #128	; 0x80
 80124d0:	0449      	lsls	r1, r1, #17
 80124d2:	430a      	orrs	r2, r1
 80124d4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80124d6:	4b3d      	ldr	r3, [pc, #244]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80124d8:	68da      	ldr	r2, [r3, #12]
 80124da:	4b3c      	ldr	r3, [pc, #240]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 80124dc:	2180      	movs	r1, #128	; 0x80
 80124de:	0549      	lsls	r1, r1, #21
 80124e0:	430a      	orrs	r2, r1
 80124e2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80124e4:	f7fc ff56 	bl	800f394 <HAL_GetTick>
 80124e8:	0003      	movs	r3, r0
 80124ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80124ec:	e008      	b.n	8012500 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80124ee:	f7fc ff51 	bl	800f394 <HAL_GetTick>
 80124f2:	0002      	movs	r2, r0
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	1ad3      	subs	r3, r2, r3
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d901      	bls.n	8012500 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80124fc:	2303      	movs	r3, #3
 80124fe:	e061      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012500:	4b32      	ldr	r3, [pc, #200]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	2380      	movs	r3, #128	; 0x80
 8012506:	049b      	lsls	r3, r3, #18
 8012508:	4013      	ands	r3, r2
 801250a:	d0f0      	beq.n	80124ee <HAL_RCC_OscConfig+0x53a>
 801250c:	e059      	b.n	80125c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801250e:	4b2f      	ldr	r3, [pc, #188]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012510:	681a      	ldr	r2, [r3, #0]
 8012512:	4b2e      	ldr	r3, [pc, #184]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012514:	4931      	ldr	r1, [pc, #196]	; (80125dc <HAL_RCC_OscConfig+0x628>)
 8012516:	400a      	ands	r2, r1
 8012518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801251a:	f7fc ff3b 	bl	800f394 <HAL_GetTick>
 801251e:	0003      	movs	r3, r0
 8012520:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012522:	e008      	b.n	8012536 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012524:	f7fc ff36 	bl	800f394 <HAL_GetTick>
 8012528:	0002      	movs	r2, r0
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	1ad3      	subs	r3, r2, r3
 801252e:	2b02      	cmp	r3, #2
 8012530:	d901      	bls.n	8012536 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8012532:	2303      	movs	r3, #3
 8012534:	e046      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012536:	4b25      	ldr	r3, [pc, #148]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012538:	681a      	ldr	r2, [r3, #0]
 801253a:	2380      	movs	r3, #128	; 0x80
 801253c:	049b      	lsls	r3, r3, #18
 801253e:	4013      	ands	r3, r2
 8012540:	d1f0      	bne.n	8012524 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8012542:	4b22      	ldr	r3, [pc, #136]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012544:	68da      	ldr	r2, [r3, #12]
 8012546:	4b21      	ldr	r3, [pc, #132]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 8012548:	4926      	ldr	r1, [pc, #152]	; (80125e4 <HAL_RCC_OscConfig+0x630>)
 801254a:	400a      	ands	r2, r1
 801254c:	60da      	str	r2, [r3, #12]
 801254e:	e038      	b.n	80125c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	69db      	ldr	r3, [r3, #28]
 8012554:	2b01      	cmp	r3, #1
 8012556:	d101      	bne.n	801255c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8012558:	2301      	movs	r3, #1
 801255a:	e033      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 801255c:	4b1b      	ldr	r3, [pc, #108]	; (80125cc <HAL_RCC_OscConfig+0x618>)
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2203      	movs	r2, #3
 8012566:	401a      	ands	r2, r3
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6a1b      	ldr	r3, [r3, #32]
 801256c:	429a      	cmp	r2, r3
 801256e:	d126      	bne.n	80125be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	2270      	movs	r2, #112	; 0x70
 8012574:	401a      	ands	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801257a:	429a      	cmp	r2, r3
 801257c:	d11f      	bne.n	80125be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801257e:	697a      	ldr	r2, [r7, #20]
 8012580:	23fe      	movs	r3, #254	; 0xfe
 8012582:	01db      	lsls	r3, r3, #7
 8012584:	401a      	ands	r2, r3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801258a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801258c:	429a      	cmp	r2, r3
 801258e:	d116      	bne.n	80125be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012590:	697a      	ldr	r2, [r7, #20]
 8012592:	23f8      	movs	r3, #248	; 0xf8
 8012594:	039b      	lsls	r3, r3, #14
 8012596:	401a      	ands	r2, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801259c:	429a      	cmp	r2, r3
 801259e:	d10e      	bne.n	80125be <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80125a0:	697a      	ldr	r2, [r7, #20]
 80125a2:	23e0      	movs	r3, #224	; 0xe0
 80125a4:	051b      	lsls	r3, r3, #20
 80125a6:	401a      	ands	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d106      	bne.n	80125be <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	0f5b      	lsrs	r3, r3, #29
 80125b4:	075a      	lsls	r2, r3, #29
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d001      	beq.n	80125c2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	e000      	b.n	80125c4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80125c2:	2300      	movs	r3, #0
}
 80125c4:	0018      	movs	r0, r3
 80125c6:	46bd      	mov	sp, r7
 80125c8:	b008      	add	sp, #32
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	40021000 	.word	0x40021000
 80125d0:	40007000 	.word	0x40007000
 80125d4:	00001388 	.word	0x00001388
 80125d8:	efffffff 	.word	0xefffffff
 80125dc:	feffffff 	.word	0xfeffffff
 80125e0:	11c1808c 	.word	0x11c1808c
 80125e4:	eefefffc 	.word	0xeefefffc

080125e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d101      	bne.n	80125fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80125f8:	2301      	movs	r3, #1
 80125fa:	e0e9      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80125fc:	4b76      	ldr	r3, [pc, #472]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2207      	movs	r2, #7
 8012602:	4013      	ands	r3, r2
 8012604:	683a      	ldr	r2, [r7, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	d91e      	bls.n	8012648 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801260a:	4b73      	ldr	r3, [pc, #460]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2207      	movs	r2, #7
 8012610:	4393      	bics	r3, r2
 8012612:	0019      	movs	r1, r3
 8012614:	4b70      	ldr	r3, [pc, #448]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 8012616:	683a      	ldr	r2, [r7, #0]
 8012618:	430a      	orrs	r2, r1
 801261a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801261c:	f7fc feba 	bl	800f394 <HAL_GetTick>
 8012620:	0003      	movs	r3, r0
 8012622:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012624:	e009      	b.n	801263a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012626:	f7fc feb5 	bl	800f394 <HAL_GetTick>
 801262a:	0002      	movs	r2, r0
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	1ad3      	subs	r3, r2, r3
 8012630:	4a6a      	ldr	r2, [pc, #424]	; (80127dc <HAL_RCC_ClockConfig+0x1f4>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d901      	bls.n	801263a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8012636:	2303      	movs	r3, #3
 8012638:	e0ca      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801263a:	4b67      	ldr	r3, [pc, #412]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	2207      	movs	r2, #7
 8012640:	4013      	ands	r3, r2
 8012642:	683a      	ldr	r2, [r7, #0]
 8012644:	429a      	cmp	r2, r3
 8012646:	d1ee      	bne.n	8012626 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2202      	movs	r2, #2
 801264e:	4013      	ands	r3, r2
 8012650:	d015      	beq.n	801267e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2204      	movs	r2, #4
 8012658:	4013      	ands	r3, r2
 801265a:	d006      	beq.n	801266a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 801265c:	4b60      	ldr	r3, [pc, #384]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 801265e:	689a      	ldr	r2, [r3, #8]
 8012660:	4b5f      	ldr	r3, [pc, #380]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 8012662:	21e0      	movs	r1, #224	; 0xe0
 8012664:	01c9      	lsls	r1, r1, #7
 8012666:	430a      	orrs	r2, r1
 8012668:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801266a:	4b5d      	ldr	r3, [pc, #372]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 801266c:	689b      	ldr	r3, [r3, #8]
 801266e:	4a5d      	ldr	r2, [pc, #372]	; (80127e4 <HAL_RCC_ClockConfig+0x1fc>)
 8012670:	4013      	ands	r3, r2
 8012672:	0019      	movs	r1, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	689a      	ldr	r2, [r3, #8]
 8012678:	4b59      	ldr	r3, [pc, #356]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 801267a:	430a      	orrs	r2, r1
 801267c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2201      	movs	r2, #1
 8012684:	4013      	ands	r3, r2
 8012686:	d057      	beq.n	8012738 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	2b01      	cmp	r3, #1
 801268e:	d107      	bne.n	80126a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012690:	4b53      	ldr	r3, [pc, #332]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	2380      	movs	r3, #128	; 0x80
 8012696:	029b      	lsls	r3, r3, #10
 8012698:	4013      	ands	r3, r2
 801269a:	d12b      	bne.n	80126f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 801269c:	2301      	movs	r3, #1
 801269e:	e097      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	2b02      	cmp	r3, #2
 80126a6:	d107      	bne.n	80126b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80126a8:	4b4d      	ldr	r3, [pc, #308]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	2380      	movs	r3, #128	; 0x80
 80126ae:	049b      	lsls	r3, r3, #18
 80126b0:	4013      	ands	r3, r2
 80126b2:	d11f      	bne.n	80126f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80126b4:	2301      	movs	r3, #1
 80126b6:	e08b      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	685b      	ldr	r3, [r3, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d107      	bne.n	80126d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80126c0:	4b47      	ldr	r3, [pc, #284]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	2380      	movs	r3, #128	; 0x80
 80126c6:	00db      	lsls	r3, r3, #3
 80126c8:	4013      	ands	r3, r2
 80126ca:	d113      	bne.n	80126f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80126cc:	2301      	movs	r3, #1
 80126ce:	e07f      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	2b03      	cmp	r3, #3
 80126d6:	d106      	bne.n	80126e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80126d8:	4b41      	ldr	r3, [pc, #260]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 80126da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80126dc:	2202      	movs	r2, #2
 80126de:	4013      	ands	r3, r2
 80126e0:	d108      	bne.n	80126f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80126e2:	2301      	movs	r3, #1
 80126e4:	e074      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80126e6:	4b3e      	ldr	r3, [pc, #248]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 80126e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126ea:	2202      	movs	r2, #2
 80126ec:	4013      	ands	r3, r2
 80126ee:	d101      	bne.n	80126f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80126f0:	2301      	movs	r3, #1
 80126f2:	e06d      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80126f4:	4b3a      	ldr	r3, [pc, #232]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 80126f6:	689b      	ldr	r3, [r3, #8]
 80126f8:	2207      	movs	r2, #7
 80126fa:	4393      	bics	r3, r2
 80126fc:	0019      	movs	r1, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	685a      	ldr	r2, [r3, #4]
 8012702:	4b37      	ldr	r3, [pc, #220]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 8012704:	430a      	orrs	r2, r1
 8012706:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012708:	f7fc fe44 	bl	800f394 <HAL_GetTick>
 801270c:	0003      	movs	r3, r0
 801270e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012710:	e009      	b.n	8012726 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012712:	f7fc fe3f 	bl	800f394 <HAL_GetTick>
 8012716:	0002      	movs	r2, r0
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	1ad3      	subs	r3, r2, r3
 801271c:	4a2f      	ldr	r2, [pc, #188]	; (80127dc <HAL_RCC_ClockConfig+0x1f4>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d901      	bls.n	8012726 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8012722:	2303      	movs	r3, #3
 8012724:	e054      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012726:	4b2e      	ldr	r3, [pc, #184]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 8012728:	689b      	ldr	r3, [r3, #8]
 801272a:	2238      	movs	r2, #56	; 0x38
 801272c:	401a      	ands	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	00db      	lsls	r3, r3, #3
 8012734:	429a      	cmp	r2, r3
 8012736:	d1ec      	bne.n	8012712 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8012738:	4b27      	ldr	r3, [pc, #156]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2207      	movs	r2, #7
 801273e:	4013      	ands	r3, r2
 8012740:	683a      	ldr	r2, [r7, #0]
 8012742:	429a      	cmp	r2, r3
 8012744:	d21e      	bcs.n	8012784 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012746:	4b24      	ldr	r3, [pc, #144]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2207      	movs	r2, #7
 801274c:	4393      	bics	r3, r2
 801274e:	0019      	movs	r1, r3
 8012750:	4b21      	ldr	r3, [pc, #132]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	430a      	orrs	r2, r1
 8012756:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8012758:	f7fc fe1c 	bl	800f394 <HAL_GetTick>
 801275c:	0003      	movs	r3, r0
 801275e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012760:	e009      	b.n	8012776 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012762:	f7fc fe17 	bl	800f394 <HAL_GetTick>
 8012766:	0002      	movs	r2, r0
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	1ad3      	subs	r3, r2, r3
 801276c:	4a1b      	ldr	r2, [pc, #108]	; (80127dc <HAL_RCC_ClockConfig+0x1f4>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d901      	bls.n	8012776 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8012772:	2303      	movs	r3, #3
 8012774:	e02c      	b.n	80127d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012776:	4b18      	ldr	r3, [pc, #96]	; (80127d8 <HAL_RCC_ClockConfig+0x1f0>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	2207      	movs	r2, #7
 801277c:	4013      	ands	r3, r2
 801277e:	683a      	ldr	r2, [r7, #0]
 8012780:	429a      	cmp	r2, r3
 8012782:	d1ee      	bne.n	8012762 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	2204      	movs	r2, #4
 801278a:	4013      	ands	r3, r2
 801278c:	d009      	beq.n	80127a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801278e:	4b14      	ldr	r3, [pc, #80]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 8012790:	689b      	ldr	r3, [r3, #8]
 8012792:	4a15      	ldr	r2, [pc, #84]	; (80127e8 <HAL_RCC_ClockConfig+0x200>)
 8012794:	4013      	ands	r3, r2
 8012796:	0019      	movs	r1, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	68da      	ldr	r2, [r3, #12]
 801279c:	4b10      	ldr	r3, [pc, #64]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 801279e:	430a      	orrs	r2, r1
 80127a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80127a2:	f000 f829 	bl	80127f8 <HAL_RCC_GetSysClockFreq>
 80127a6:	0001      	movs	r1, r0
 80127a8:	4b0d      	ldr	r3, [pc, #52]	; (80127e0 <HAL_RCC_ClockConfig+0x1f8>)
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	0a1b      	lsrs	r3, r3, #8
 80127ae:	220f      	movs	r2, #15
 80127b0:	401a      	ands	r2, r3
 80127b2:	4b0e      	ldr	r3, [pc, #56]	; (80127ec <HAL_RCC_ClockConfig+0x204>)
 80127b4:	0092      	lsls	r2, r2, #2
 80127b6:	58d3      	ldr	r3, [r2, r3]
 80127b8:	221f      	movs	r2, #31
 80127ba:	4013      	ands	r3, r2
 80127bc:	000a      	movs	r2, r1
 80127be:	40da      	lsrs	r2, r3
 80127c0:	4b0b      	ldr	r3, [pc, #44]	; (80127f0 <HAL_RCC_ClockConfig+0x208>)
 80127c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80127c4:	4b0b      	ldr	r3, [pc, #44]	; (80127f4 <HAL_RCC_ClockConfig+0x20c>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	0018      	movs	r0, r3
 80127ca:	f7fc fd87 	bl	800f2dc <HAL_InitTick>
 80127ce:	0003      	movs	r3, r0
}
 80127d0:	0018      	movs	r0, r3
 80127d2:	46bd      	mov	sp, r7
 80127d4:	b004      	add	sp, #16
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	40022000 	.word	0x40022000
 80127dc:	00001388 	.word	0x00001388
 80127e0:	40021000 	.word	0x40021000
 80127e4:	fffff0ff 	.word	0xfffff0ff
 80127e8:	ffff8fff 	.word	0xffff8fff
 80127ec:	08031b84 	.word	0x08031b84
 80127f0:	20005028 	.word	0x20005028
 80127f4:	2000505c 	.word	0x2000505c

080127f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b086      	sub	sp, #24
 80127fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80127fe:	4b3c      	ldr	r3, [pc, #240]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8012800:	689b      	ldr	r3, [r3, #8]
 8012802:	2238      	movs	r2, #56	; 0x38
 8012804:	4013      	ands	r3, r2
 8012806:	d10f      	bne.n	8012828 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8012808:	4b39      	ldr	r3, [pc, #228]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	0adb      	lsrs	r3, r3, #11
 801280e:	2207      	movs	r2, #7
 8012810:	4013      	ands	r3, r2
 8012812:	2201      	movs	r2, #1
 8012814:	409a      	lsls	r2, r3
 8012816:	0013      	movs	r3, r2
 8012818:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 801281a:	6839      	ldr	r1, [r7, #0]
 801281c:	4835      	ldr	r0, [pc, #212]	; (80128f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 801281e:	f7ef fc8b 	bl	8002138 <__udivsi3>
 8012822:	0003      	movs	r3, r0
 8012824:	613b      	str	r3, [r7, #16]
 8012826:	e05d      	b.n	80128e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012828:	4b31      	ldr	r3, [pc, #196]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 801282a:	689b      	ldr	r3, [r3, #8]
 801282c:	2238      	movs	r2, #56	; 0x38
 801282e:	4013      	ands	r3, r2
 8012830:	2b08      	cmp	r3, #8
 8012832:	d102      	bne.n	801283a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8012834:	4b30      	ldr	r3, [pc, #192]	; (80128f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8012836:	613b      	str	r3, [r7, #16]
 8012838:	e054      	b.n	80128e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801283a:	4b2d      	ldr	r3, [pc, #180]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	2238      	movs	r2, #56	; 0x38
 8012840:	4013      	ands	r3, r2
 8012842:	2b10      	cmp	r3, #16
 8012844:	d138      	bne.n	80128b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012846:	4b2a      	ldr	r3, [pc, #168]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8012848:	68db      	ldr	r3, [r3, #12]
 801284a:	2203      	movs	r2, #3
 801284c:	4013      	ands	r3, r2
 801284e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8012850:	4b27      	ldr	r3, [pc, #156]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	091b      	lsrs	r3, r3, #4
 8012856:	2207      	movs	r2, #7
 8012858:	4013      	ands	r3, r2
 801285a:	3301      	adds	r3, #1
 801285c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2b03      	cmp	r3, #3
 8012862:	d10d      	bne.n	8012880 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012864:	68b9      	ldr	r1, [r7, #8]
 8012866:	4824      	ldr	r0, [pc, #144]	; (80128f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8012868:	f7ef fc66 	bl	8002138 <__udivsi3>
 801286c:	0003      	movs	r3, r0
 801286e:	0019      	movs	r1, r3
 8012870:	4b1f      	ldr	r3, [pc, #124]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	0a1b      	lsrs	r3, r3, #8
 8012876:	227f      	movs	r2, #127	; 0x7f
 8012878:	4013      	ands	r3, r2
 801287a:	434b      	muls	r3, r1
 801287c:	617b      	str	r3, [r7, #20]
        break;
 801287e:	e00d      	b.n	801289c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8012880:	68b9      	ldr	r1, [r7, #8]
 8012882:	481c      	ldr	r0, [pc, #112]	; (80128f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8012884:	f7ef fc58 	bl	8002138 <__udivsi3>
 8012888:	0003      	movs	r3, r0
 801288a:	0019      	movs	r1, r3
 801288c:	4b18      	ldr	r3, [pc, #96]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	0a1b      	lsrs	r3, r3, #8
 8012892:	227f      	movs	r2, #127	; 0x7f
 8012894:	4013      	ands	r3, r2
 8012896:	434b      	muls	r3, r1
 8012898:	617b      	str	r3, [r7, #20]
        break;
 801289a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 801289c:	4b14      	ldr	r3, [pc, #80]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	0f5b      	lsrs	r3, r3, #29
 80128a2:	2207      	movs	r2, #7
 80128a4:	4013      	ands	r3, r2
 80128a6:	3301      	adds	r3, #1
 80128a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80128aa:	6879      	ldr	r1, [r7, #4]
 80128ac:	6978      	ldr	r0, [r7, #20]
 80128ae:	f7ef fc43 	bl	8002138 <__udivsi3>
 80128b2:	0003      	movs	r3, r0
 80128b4:	613b      	str	r3, [r7, #16]
 80128b6:	e015      	b.n	80128e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80128b8:	4b0d      	ldr	r3, [pc, #52]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80128ba:	689b      	ldr	r3, [r3, #8]
 80128bc:	2238      	movs	r2, #56	; 0x38
 80128be:	4013      	ands	r3, r2
 80128c0:	2b20      	cmp	r3, #32
 80128c2:	d103      	bne.n	80128cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80128c4:	2380      	movs	r3, #128	; 0x80
 80128c6:	021b      	lsls	r3, r3, #8
 80128c8:	613b      	str	r3, [r7, #16]
 80128ca:	e00b      	b.n	80128e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80128cc:	4b08      	ldr	r3, [pc, #32]	; (80128f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80128ce:	689b      	ldr	r3, [r3, #8]
 80128d0:	2238      	movs	r2, #56	; 0x38
 80128d2:	4013      	ands	r3, r2
 80128d4:	2b18      	cmp	r3, #24
 80128d6:	d103      	bne.n	80128e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80128d8:	23fa      	movs	r3, #250	; 0xfa
 80128da:	01db      	lsls	r3, r3, #7
 80128dc:	613b      	str	r3, [r7, #16]
 80128de:	e001      	b.n	80128e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80128e0:	2300      	movs	r3, #0
 80128e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80128e4:	693b      	ldr	r3, [r7, #16]
}
 80128e6:	0018      	movs	r0, r3
 80128e8:	46bd      	mov	sp, r7
 80128ea:	b006      	add	sp, #24
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	46c0      	nop			; (mov r8, r8)
 80128f0:	40021000 	.word	0x40021000
 80128f4:	00f42400 	.word	0x00f42400
 80128f8:	007a1200 	.word	0x007a1200

080128fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012900:	4b02      	ldr	r3, [pc, #8]	; (801290c <HAL_RCC_GetHCLKFreq+0x10>)
 8012902:	681b      	ldr	r3, [r3, #0]
}
 8012904:	0018      	movs	r0, r3
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	46c0      	nop			; (mov r8, r8)
 801290c:	20005028 	.word	0x20005028

08012910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012910:	b5b0      	push	{r4, r5, r7, lr}
 8012912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8012914:	f7ff fff2 	bl	80128fc <HAL_RCC_GetHCLKFreq>
 8012918:	0004      	movs	r4, r0
 801291a:	f7ff fb3f 	bl	8011f9c <LL_RCC_GetAPB1Prescaler>
 801291e:	0003      	movs	r3, r0
 8012920:	0b1a      	lsrs	r2, r3, #12
 8012922:	4b05      	ldr	r3, [pc, #20]	; (8012938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012924:	0092      	lsls	r2, r2, #2
 8012926:	58d3      	ldr	r3, [r2, r3]
 8012928:	221f      	movs	r2, #31
 801292a:	4013      	ands	r3, r2
 801292c:	40dc      	lsrs	r4, r3
 801292e:	0023      	movs	r3, r4
}
 8012930:	0018      	movs	r0, r3
 8012932:	46bd      	mov	sp, r7
 8012934:	bdb0      	pop	{r4, r5, r7, pc}
 8012936:	46c0      	nop			; (mov r8, r8)
 8012938:	08031bc4 	.word	0x08031bc4

0801293c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b086      	sub	sp, #24
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8012944:	2313      	movs	r3, #19
 8012946:	18fb      	adds	r3, r7, r3
 8012948:	2200      	movs	r2, #0
 801294a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801294c:	2312      	movs	r3, #18
 801294e:	18fb      	adds	r3, r7, r3
 8012950:	2200      	movs	r2, #0
 8012952:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	2380      	movs	r3, #128	; 0x80
 801295a:	029b      	lsls	r3, r3, #10
 801295c:	4013      	ands	r3, r2
 801295e:	d100      	bne.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8012960:	e0a3      	b.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012962:	2011      	movs	r0, #17
 8012964:	183b      	adds	r3, r7, r0
 8012966:	2200      	movs	r2, #0
 8012968:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801296a:	4bb0      	ldr	r3, [pc, #704]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801296c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801296e:	2380      	movs	r3, #128	; 0x80
 8012970:	055b      	lsls	r3, r3, #21
 8012972:	4013      	ands	r3, r2
 8012974:	d110      	bne.n	8012998 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012976:	4bad      	ldr	r3, [pc, #692]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801297a:	4bac      	ldr	r3, [pc, #688]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 801297c:	2180      	movs	r1, #128	; 0x80
 801297e:	0549      	lsls	r1, r1, #21
 8012980:	430a      	orrs	r2, r1
 8012982:	63da      	str	r2, [r3, #60]	; 0x3c
 8012984:	4ba9      	ldr	r3, [pc, #676]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012988:	2380      	movs	r3, #128	; 0x80
 801298a:	055b      	lsls	r3, r3, #21
 801298c:	4013      	ands	r3, r2
 801298e:	60bb      	str	r3, [r7, #8]
 8012990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012992:	183b      	adds	r3, r7, r0
 8012994:	2201      	movs	r2, #1
 8012996:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012998:	4ba5      	ldr	r3, [pc, #660]	; (8012c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	4ba4      	ldr	r3, [pc, #656]	; (8012c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801299e:	2180      	movs	r1, #128	; 0x80
 80129a0:	0049      	lsls	r1, r1, #1
 80129a2:	430a      	orrs	r2, r1
 80129a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80129a6:	f7fc fcf5 	bl	800f394 <HAL_GetTick>
 80129aa:	0003      	movs	r3, r0
 80129ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80129ae:	e00b      	b.n	80129c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80129b0:	f7fc fcf0 	bl	800f394 <HAL_GetTick>
 80129b4:	0002      	movs	r2, r0
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	1ad3      	subs	r3, r2, r3
 80129ba:	2b02      	cmp	r3, #2
 80129bc:	d904      	bls.n	80129c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80129be:	2313      	movs	r3, #19
 80129c0:	18fb      	adds	r3, r7, r3
 80129c2:	2203      	movs	r2, #3
 80129c4:	701a      	strb	r2, [r3, #0]
        break;
 80129c6:	e005      	b.n	80129d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80129c8:	4b99      	ldr	r3, [pc, #612]	; (8012c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80129ca:	681a      	ldr	r2, [r3, #0]
 80129cc:	2380      	movs	r3, #128	; 0x80
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	4013      	ands	r3, r2
 80129d2:	d0ed      	beq.n	80129b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80129d4:	2313      	movs	r3, #19
 80129d6:	18fb      	adds	r3, r7, r3
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d154      	bne.n	8012a88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80129de:	4b93      	ldr	r3, [pc, #588]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80129e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80129e2:	23c0      	movs	r3, #192	; 0xc0
 80129e4:	009b      	lsls	r3, r3, #2
 80129e6:	4013      	ands	r3, r2
 80129e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d019      	beq.n	8012a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129f4:	697a      	ldr	r2, [r7, #20]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d014      	beq.n	8012a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80129fa:	4b8c      	ldr	r3, [pc, #560]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80129fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129fe:	4a8d      	ldr	r2, [pc, #564]	; (8012c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8012a00:	4013      	ands	r3, r2
 8012a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012a04:	4b89      	ldr	r3, [pc, #548]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a08:	4b88      	ldr	r3, [pc, #544]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a0a:	2180      	movs	r1, #128	; 0x80
 8012a0c:	0249      	lsls	r1, r1, #9
 8012a0e:	430a      	orrs	r2, r1
 8012a10:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012a12:	4b86      	ldr	r3, [pc, #536]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a16:	4b85      	ldr	r3, [pc, #532]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a18:	4987      	ldr	r1, [pc, #540]	; (8012c38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8012a1a:	400a      	ands	r2, r1
 8012a1c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8012a1e:	4b83      	ldr	r3, [pc, #524]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a20:	697a      	ldr	r2, [r7, #20]
 8012a22:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	2201      	movs	r2, #1
 8012a28:	4013      	ands	r3, r2
 8012a2a:	d016      	beq.n	8012a5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012a2c:	f7fc fcb2 	bl	800f394 <HAL_GetTick>
 8012a30:	0003      	movs	r3, r0
 8012a32:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012a34:	e00c      	b.n	8012a50 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012a36:	f7fc fcad 	bl	800f394 <HAL_GetTick>
 8012a3a:	0002      	movs	r2, r0
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	4a7e      	ldr	r2, [pc, #504]	; (8012c3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012a42:	4293      	cmp	r3, r2
 8012a44:	d904      	bls.n	8012a50 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8012a46:	2313      	movs	r3, #19
 8012a48:	18fb      	adds	r3, r7, r3
 8012a4a:	2203      	movs	r2, #3
 8012a4c:	701a      	strb	r2, [r3, #0]
            break;
 8012a4e:	e004      	b.n	8012a5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012a50:	4b76      	ldr	r3, [pc, #472]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a54:	2202      	movs	r2, #2
 8012a56:	4013      	ands	r3, r2
 8012a58:	d0ed      	beq.n	8012a36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8012a5a:	2313      	movs	r3, #19
 8012a5c:	18fb      	adds	r3, r7, r3
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d10a      	bne.n	8012a7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012a64:	4b71      	ldr	r3, [pc, #452]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a68:	4a72      	ldr	r2, [pc, #456]	; (8012c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8012a6a:	4013      	ands	r3, r2
 8012a6c:	0019      	movs	r1, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a72:	4b6e      	ldr	r3, [pc, #440]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012a74:	430a      	orrs	r2, r1
 8012a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8012a78:	e00c      	b.n	8012a94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012a7a:	2312      	movs	r3, #18
 8012a7c:	18fb      	adds	r3, r7, r3
 8012a7e:	2213      	movs	r2, #19
 8012a80:	18ba      	adds	r2, r7, r2
 8012a82:	7812      	ldrb	r2, [r2, #0]
 8012a84:	701a      	strb	r2, [r3, #0]
 8012a86:	e005      	b.n	8012a94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a88:	2312      	movs	r3, #18
 8012a8a:	18fb      	adds	r3, r7, r3
 8012a8c:	2213      	movs	r2, #19
 8012a8e:	18ba      	adds	r2, r7, r2
 8012a90:	7812      	ldrb	r2, [r2, #0]
 8012a92:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8012a94:	2311      	movs	r3, #17
 8012a96:	18fb      	adds	r3, r7, r3
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d105      	bne.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012a9e:	4b63      	ldr	r3, [pc, #396]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012aa2:	4b62      	ldr	r3, [pc, #392]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012aa4:	4966      	ldr	r1, [pc, #408]	; (8012c40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012aa6:	400a      	ands	r2, r1
 8012aa8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	4013      	ands	r3, r2
 8012ab2:	d009      	beq.n	8012ac8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012ab4:	4b5d      	ldr	r3, [pc, #372]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ab8:	2203      	movs	r2, #3
 8012aba:	4393      	bics	r3, r2
 8012abc:	0019      	movs	r1, r3
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685a      	ldr	r2, [r3, #4]
 8012ac2:	4b5a      	ldr	r3, [pc, #360]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012ac4:	430a      	orrs	r2, r1
 8012ac6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2202      	movs	r2, #2
 8012ace:	4013      	ands	r3, r2
 8012ad0:	d009      	beq.n	8012ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012ad2:	4b56      	ldr	r3, [pc, #344]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ad6:	220c      	movs	r2, #12
 8012ad8:	4393      	bics	r3, r2
 8012ada:	0019      	movs	r1, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	689a      	ldr	r2, [r3, #8]
 8012ae0:	4b52      	ldr	r3, [pc, #328]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012ae2:	430a      	orrs	r2, r1
 8012ae4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	2204      	movs	r2, #4
 8012aec:	4013      	ands	r3, r2
 8012aee:	d009      	beq.n	8012b04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012af0:	4b4e      	ldr	r3, [pc, #312]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012af4:	2230      	movs	r2, #48	; 0x30
 8012af6:	4393      	bics	r3, r2
 8012af8:	0019      	movs	r1, r3
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	68da      	ldr	r2, [r3, #12]
 8012afe:	4b4b      	ldr	r3, [pc, #300]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b00:	430a      	orrs	r2, r1
 8012b02:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2220      	movs	r2, #32
 8012b0a:	4013      	ands	r3, r2
 8012b0c:	d009      	beq.n	8012b22 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012b0e:	4b47      	ldr	r3, [pc, #284]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b12:	4a4c      	ldr	r2, [pc, #304]	; (8012c44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8012b14:	4013      	ands	r3, r2
 8012b16:	0019      	movs	r1, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	691a      	ldr	r2, [r3, #16]
 8012b1c:	4b43      	ldr	r3, [pc, #268]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b1e:	430a      	orrs	r2, r1
 8012b20:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2240      	movs	r2, #64	; 0x40
 8012b28:	4013      	ands	r3, r2
 8012b2a:	d009      	beq.n	8012b40 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8012b2c:	4b3f      	ldr	r3, [pc, #252]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b30:	4a45      	ldr	r2, [pc, #276]	; (8012c48 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8012b32:	4013      	ands	r3, r2
 8012b34:	0019      	movs	r1, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	695a      	ldr	r2, [r3, #20]
 8012b3a:	4b3c      	ldr	r3, [pc, #240]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b3c:	430a      	orrs	r2, r1
 8012b3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	2380      	movs	r3, #128	; 0x80
 8012b46:	01db      	lsls	r3, r3, #7
 8012b48:	4013      	ands	r3, r2
 8012b4a:	d015      	beq.n	8012b78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012b4c:	4b37      	ldr	r3, [pc, #220]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	0899      	lsrs	r1, r3, #2
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6a1a      	ldr	r2, [r3, #32]
 8012b58:	4b34      	ldr	r3, [pc, #208]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b5a:	430a      	orrs	r2, r1
 8012b5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6a1a      	ldr	r2, [r3, #32]
 8012b62:	2380      	movs	r3, #128	; 0x80
 8012b64:	05db      	lsls	r3, r3, #23
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d106      	bne.n	8012b78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8012b6a:	4b30      	ldr	r3, [pc, #192]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b6c:	68da      	ldr	r2, [r3, #12]
 8012b6e:	4b2f      	ldr	r3, [pc, #188]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b70:	2180      	movs	r1, #128	; 0x80
 8012b72:	0249      	lsls	r1, r1, #9
 8012b74:	430a      	orrs	r2, r1
 8012b76:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	2380      	movs	r3, #128	; 0x80
 8012b7e:	011b      	lsls	r3, r3, #4
 8012b80:	4013      	ands	r3, r2
 8012b82:	d014      	beq.n	8012bae <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8012b84:	4b29      	ldr	r3, [pc, #164]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b88:	2203      	movs	r2, #3
 8012b8a:	4393      	bics	r3, r2
 8012b8c:	0019      	movs	r1, r3
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	699a      	ldr	r2, [r3, #24]
 8012b92:	4b26      	ldr	r3, [pc, #152]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012b94:	430a      	orrs	r2, r1
 8012b96:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	699b      	ldr	r3, [r3, #24]
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d106      	bne.n	8012bae <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8012ba0:	4b22      	ldr	r3, [pc, #136]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012ba2:	68da      	ldr	r2, [r3, #12]
 8012ba4:	4b21      	ldr	r3, [pc, #132]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012ba6:	2180      	movs	r1, #128	; 0x80
 8012ba8:	0249      	lsls	r1, r1, #9
 8012baa:	430a      	orrs	r2, r1
 8012bac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681a      	ldr	r2, [r3, #0]
 8012bb2:	2380      	movs	r3, #128	; 0x80
 8012bb4:	019b      	lsls	r3, r3, #6
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	d014      	beq.n	8012be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8012bba:	4b1c      	ldr	r3, [pc, #112]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bbe:	220c      	movs	r2, #12
 8012bc0:	4393      	bics	r3, r2
 8012bc2:	0019      	movs	r1, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	69da      	ldr	r2, [r3, #28]
 8012bc8:	4b18      	ldr	r3, [pc, #96]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012bca:	430a      	orrs	r2, r1
 8012bcc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	69db      	ldr	r3, [r3, #28]
 8012bd2:	2b04      	cmp	r3, #4
 8012bd4:	d106      	bne.n	8012be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8012bd6:	4b15      	ldr	r3, [pc, #84]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012bd8:	68da      	ldr	r2, [r3, #12]
 8012bda:	4b14      	ldr	r3, [pc, #80]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012bdc:	2180      	movs	r1, #128	; 0x80
 8012bde:	0249      	lsls	r1, r1, #9
 8012be0:	430a      	orrs	r2, r1
 8012be2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	2380      	movs	r3, #128	; 0x80
 8012bea:	045b      	lsls	r3, r3, #17
 8012bec:	4013      	ands	r3, r2
 8012bee:	d016      	beq.n	8012c1e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012bf0:	4b0e      	ldr	r3, [pc, #56]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bf4:	4a13      	ldr	r2, [pc, #76]	; (8012c44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8012bf6:	4013      	ands	r3, r2
 8012bf8:	0019      	movs	r1, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012bfe:	4b0b      	ldr	r3, [pc, #44]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012c00:	430a      	orrs	r2, r1
 8012c02:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c08:	2380      	movs	r3, #128	; 0x80
 8012c0a:	019b      	lsls	r3, r3, #6
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d106      	bne.n	8012c1e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8012c10:	4b06      	ldr	r3, [pc, #24]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012c12:	68da      	ldr	r2, [r3, #12]
 8012c14:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8012c16:	2180      	movs	r1, #128	; 0x80
 8012c18:	0449      	lsls	r1, r1, #17
 8012c1a:	430a      	orrs	r2, r1
 8012c1c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8012c1e:	2312      	movs	r3, #18
 8012c20:	18fb      	adds	r3, r7, r3
 8012c22:	781b      	ldrb	r3, [r3, #0]
}
 8012c24:	0018      	movs	r0, r3
 8012c26:	46bd      	mov	sp, r7
 8012c28:	b006      	add	sp, #24
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	40021000 	.word	0x40021000
 8012c30:	40007000 	.word	0x40007000
 8012c34:	fffffcff 	.word	0xfffffcff
 8012c38:	fffeffff 	.word	0xfffeffff
 8012c3c:	00001388 	.word	0x00001388
 8012c40:	efffffff 	.word	0xefffffff
 8012c44:	ffffcfff 	.word	0xffffcfff
 8012c48:	ffff3fff 	.word	0xffff3fff

08012c4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012c4c:	b5b0      	push	{r4, r5, r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012c54:	230f      	movs	r3, #15
 8012c56:	18fb      	adds	r3, r7, r3
 8012c58:	2201      	movs	r2, #1
 8012c5a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d100      	bne.n	8012c64 <HAL_RTC_Init+0x18>
 8012c62:	e08c      	b.n	8012d7e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2229      	movs	r2, #41	; 0x29
 8012c68:	5c9b      	ldrb	r3, [r3, r2]
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d10b      	bne.n	8012c88 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2228      	movs	r2, #40	; 0x28
 8012c74:	2100      	movs	r1, #0
 8012c76:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2288      	movs	r2, #136	; 0x88
 8012c7c:	0212      	lsls	r2, r2, #8
 8012c7e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	0018      	movs	r0, r3
 8012c84:	f7fa f8e8 	bl	800ce58 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2229      	movs	r2, #41	; 0x29
 8012c8c:	2102      	movs	r1, #2
 8012c8e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	2210      	movs	r2, #16
 8012c98:	4013      	ands	r3, r2
 8012c9a:	2b10      	cmp	r3, #16
 8012c9c:	d062      	beq.n	8012d64 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	22ca      	movs	r2, #202	; 0xca
 8012ca4:	625a      	str	r2, [r3, #36]	; 0x24
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2253      	movs	r2, #83	; 0x53
 8012cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8012cae:	250f      	movs	r5, #15
 8012cb0:	197c      	adds	r4, r7, r5
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	0018      	movs	r0, r3
 8012cb6:	f000 fa75 	bl	80131a4 <RTC_EnterInitMode>
 8012cba:	0003      	movs	r3, r0
 8012cbc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8012cbe:	0028      	movs	r0, r5
 8012cc0:	183b      	adds	r3, r7, r0
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d12c      	bne.n	8012d22 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	699a      	ldr	r2, [r3, #24]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	492e      	ldr	r1, [pc, #184]	; (8012d8c <HAL_RTC_Init+0x140>)
 8012cd4:	400a      	ands	r2, r1
 8012cd6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	6999      	ldr	r1, [r3, #24]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	689a      	ldr	r2, [r3, #8]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	695b      	ldr	r3, [r3, #20]
 8012ce6:	431a      	orrs	r2, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	69db      	ldr	r3, [r3, #28]
 8012cec:	431a      	orrs	r2, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	430a      	orrs	r2, r1
 8012cf4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	6912      	ldr	r2, [r2, #16]
 8012cfe:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	6919      	ldr	r1, [r3, #16]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	041a      	lsls	r2, r3, #16
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	430a      	orrs	r2, r1
 8012d12:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8012d14:	183c      	adds	r4, r7, r0
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	0018      	movs	r0, r3
 8012d1a:	f000 fa85 	bl	8013228 <RTC_ExitInitMode>
 8012d1e:	0003      	movs	r3, r0
 8012d20:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8012d22:	230f      	movs	r3, #15
 8012d24:	18fb      	adds	r3, r7, r3
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d116      	bne.n	8012d5a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	699a      	ldr	r2, [r3, #24]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	00d2      	lsls	r2, r2, #3
 8012d38:	08d2      	lsrs	r2, r2, #3
 8012d3a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	6999      	ldr	r1, [r3, #24]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6a1b      	ldr	r3, [r3, #32]
 8012d4a:	431a      	orrs	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	699b      	ldr	r3, [r3, #24]
 8012d50:	431a      	orrs	r2, r3
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	430a      	orrs	r2, r1
 8012d58:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	22ff      	movs	r2, #255	; 0xff
 8012d60:	625a      	str	r2, [r3, #36]	; 0x24
 8012d62:	e003      	b.n	8012d6c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8012d64:	230f      	movs	r3, #15
 8012d66:	18fb      	adds	r3, r7, r3
 8012d68:	2200      	movs	r2, #0
 8012d6a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8012d6c:	230f      	movs	r3, #15
 8012d6e:	18fb      	adds	r3, r7, r3
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d103      	bne.n	8012d7e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2229      	movs	r2, #41	; 0x29
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8012d7e:	230f      	movs	r3, #15
 8012d80:	18fb      	adds	r3, r7, r3
 8012d82:	781b      	ldrb	r3, [r3, #0]
}
 8012d84:	0018      	movs	r0, r3
 8012d86:	46bd      	mov	sp, r7
 8012d88:	b004      	add	sp, #16
 8012d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8012d8c:	fb8fffbf 	.word	0xfb8fffbf

08012d90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012d90:	b5b0      	push	{r4, r5, r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2228      	movs	r2, #40	; 0x28
 8012da0:	5c9b      	ldrb	r3, [r3, r2]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d101      	bne.n	8012daa <HAL_RTC_SetTime+0x1a>
 8012da6:	2302      	movs	r3, #2
 8012da8:	e092      	b.n	8012ed0 <HAL_RTC_SetTime+0x140>
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	2228      	movs	r2, #40	; 0x28
 8012dae:	2101      	movs	r1, #1
 8012db0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	2229      	movs	r2, #41	; 0x29
 8012db6:	2102      	movs	r1, #2
 8012db8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	22ca      	movs	r2, #202	; 0xca
 8012dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	2253      	movs	r2, #83	; 0x53
 8012dc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012dca:	2513      	movs	r5, #19
 8012dcc:	197c      	adds	r4, r7, r5
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	0018      	movs	r0, r3
 8012dd2:	f000 f9e7 	bl	80131a4 <RTC_EnterInitMode>
 8012dd6:	0003      	movs	r3, r0
 8012dd8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8012dda:	197b      	adds	r3, r7, r5
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d162      	bne.n	8012ea8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d125      	bne.n	8012e34 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	699b      	ldr	r3, [r3, #24]
 8012dee:	2240      	movs	r2, #64	; 0x40
 8012df0:	4013      	ands	r3, r2
 8012df2:	d102      	bne.n	8012dfa <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	2200      	movs	r2, #0
 8012df8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	0018      	movs	r0, r3
 8012e00:	f000 fa56 	bl	80132b0 <RTC_ByteToBcd2>
 8012e04:	0003      	movs	r3, r0
 8012e06:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	785b      	ldrb	r3, [r3, #1]
 8012e0c:	0018      	movs	r0, r3
 8012e0e:	f000 fa4f 	bl	80132b0 <RTC_ByteToBcd2>
 8012e12:	0003      	movs	r3, r0
 8012e14:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012e16:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	789b      	ldrb	r3, [r3, #2]
 8012e1c:	0018      	movs	r0, r3
 8012e1e:	f000 fa47 	bl	80132b0 <RTC_ByteToBcd2>
 8012e22:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e24:	0022      	movs	r2, r4
 8012e26:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	78db      	ldrb	r3, [r3, #3]
 8012e2c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	617b      	str	r3, [r7, #20]
 8012e32:	e017      	b.n	8012e64 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	699b      	ldr	r3, [r3, #24]
 8012e3a:	2240      	movs	r2, #64	; 0x40
 8012e3c:	4013      	ands	r3, r2
 8012e3e:	d102      	bne.n	8012e46 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2200      	movs	r2, #0
 8012e44:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	785b      	ldrb	r3, [r3, #1]
 8012e50:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012e52:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012e54:	68ba      	ldr	r2, [r7, #8]
 8012e56:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e58:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	78db      	ldrb	r3, [r3, #3]
 8012e5e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012e60:	4313      	orrs	r3, r2
 8012e62:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	697a      	ldr	r2, [r7, #20]
 8012e6a:	491b      	ldr	r1, [pc, #108]	; (8012ed8 <HAL_RTC_SetTime+0x148>)
 8012e6c:	400a      	ands	r2, r1
 8012e6e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	699a      	ldr	r2, [r3, #24]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4918      	ldr	r1, [pc, #96]	; (8012edc <HAL_RTC_SetTime+0x14c>)
 8012e7c:	400a      	ands	r2, r1
 8012e7e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	6999      	ldr	r1, [r3, #24]
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	68da      	ldr	r2, [r3, #12]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	691b      	ldr	r3, [r3, #16]
 8012e8e:	431a      	orrs	r2, r3
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	430a      	orrs	r2, r1
 8012e96:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012e98:	2313      	movs	r3, #19
 8012e9a:	18fc      	adds	r4, r7, r3
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	0018      	movs	r0, r3
 8012ea0:	f000 f9c2 	bl	8013228 <RTC_ExitInitMode>
 8012ea4:	0003      	movs	r3, r0
 8012ea6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	22ff      	movs	r2, #255	; 0xff
 8012eae:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8012eb0:	2313      	movs	r3, #19
 8012eb2:	18fb      	adds	r3, r7, r3
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d103      	bne.n	8012ec2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2229      	movs	r2, #41	; 0x29
 8012ebe:	2101      	movs	r1, #1
 8012ec0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	2228      	movs	r2, #40	; 0x28
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	5499      	strb	r1, [r3, r2]

  return status;
 8012eca:	2313      	movs	r3, #19
 8012ecc:	18fb      	adds	r3, r7, r3
 8012ece:	781b      	ldrb	r3, [r3, #0]
}
 8012ed0:	0018      	movs	r0, r3
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	b006      	add	sp, #24
 8012ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ed8:	007f7f7f 	.word	0x007f7f7f
 8012edc:	fffbffff 	.word	0xfffbffff

08012ee0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b086      	sub	sp, #24
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	689a      	ldr	r2, [r3, #8]
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	691b      	ldr	r3, [r3, #16]
 8012efc:	045b      	lsls	r3, r3, #17
 8012efe:	0c5a      	lsrs	r2, r3, #17
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	4a22      	ldr	r2, [pc, #136]	; (8012f94 <HAL_RTC_GetTime+0xb4>)
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	0c1b      	lsrs	r3, r3, #16
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	223f      	movs	r2, #63	; 0x3f
 8012f18:	4013      	ands	r3, r2
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	0a1b      	lsrs	r3, r3, #8
 8012f24:	b2db      	uxtb	r3, r3
 8012f26:	227f      	movs	r2, #127	; 0x7f
 8012f28:	4013      	ands	r3, r2
 8012f2a:	b2da      	uxtb	r2, r3
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	b2db      	uxtb	r3, r3
 8012f34:	227f      	movs	r2, #127	; 0x7f
 8012f36:	4013      	ands	r3, r2
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	0d9b      	lsrs	r3, r3, #22
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	2201      	movs	r2, #1
 8012f46:	4013      	ands	r3, r2
 8012f48:	b2da      	uxtb	r2, r3
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d11a      	bne.n	8012f8a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	0018      	movs	r0, r3
 8012f5a:	f000 f9d1 	bl	8013300 <RTC_Bcd2ToByte>
 8012f5e:	0003      	movs	r3, r0
 8012f60:	001a      	movs	r2, r3
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	785b      	ldrb	r3, [r3, #1]
 8012f6a:	0018      	movs	r0, r3
 8012f6c:	f000 f9c8 	bl	8013300 <RTC_Bcd2ToByte>
 8012f70:	0003      	movs	r3, r0
 8012f72:	001a      	movs	r2, r3
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	789b      	ldrb	r3, [r3, #2]
 8012f7c:	0018      	movs	r0, r3
 8012f7e:	f000 f9bf 	bl	8013300 <RTC_Bcd2ToByte>
 8012f82:	0003      	movs	r3, r0
 8012f84:	001a      	movs	r2, r3
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012f8a:	2300      	movs	r3, #0
}
 8012f8c:	0018      	movs	r0, r3
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	b006      	add	sp, #24
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	007f7f7f 	.word	0x007f7f7f

08012f98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012f98:	b5b0      	push	{r4, r5, r7, lr}
 8012f9a:	b086      	sub	sp, #24
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2228      	movs	r2, #40	; 0x28
 8012fa8:	5c9b      	ldrb	r3, [r3, r2]
 8012faa:	2b01      	cmp	r3, #1
 8012fac:	d101      	bne.n	8012fb2 <HAL_RTC_SetDate+0x1a>
 8012fae:	2302      	movs	r3, #2
 8012fb0:	e07e      	b.n	80130b0 <HAL_RTC_SetDate+0x118>
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2228      	movs	r2, #40	; 0x28
 8012fb6:	2101      	movs	r1, #1
 8012fb8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2229      	movs	r2, #41	; 0x29
 8012fbe:	2102      	movs	r1, #2
 8012fc0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d10e      	bne.n	8012fe6 <HAL_RTC_SetDate+0x4e>
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	785b      	ldrb	r3, [r3, #1]
 8012fcc:	001a      	movs	r2, r3
 8012fce:	2310      	movs	r3, #16
 8012fd0:	4013      	ands	r3, r2
 8012fd2:	d008      	beq.n	8012fe6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	785b      	ldrb	r3, [r3, #1]
 8012fd8:	2210      	movs	r2, #16
 8012fda:	4393      	bics	r3, r2
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	330a      	adds	r3, #10
 8012fe0:	b2da      	uxtb	r2, r3
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d11c      	bne.n	8013026 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	78db      	ldrb	r3, [r3, #3]
 8012ff0:	0018      	movs	r0, r3
 8012ff2:	f000 f95d 	bl	80132b0 <RTC_ByteToBcd2>
 8012ff6:	0003      	movs	r3, r0
 8012ff8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	785b      	ldrb	r3, [r3, #1]
 8012ffe:	0018      	movs	r0, r3
 8013000:	f000 f956 	bl	80132b0 <RTC_ByteToBcd2>
 8013004:	0003      	movs	r3, r0
 8013006:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013008:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	789b      	ldrb	r3, [r3, #2]
 801300e:	0018      	movs	r0, r3
 8013010:	f000 f94e 	bl	80132b0 <RTC_ByteToBcd2>
 8013014:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013016:	0022      	movs	r2, r4
 8013018:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013020:	4313      	orrs	r3, r2
 8013022:	617b      	str	r3, [r7, #20]
 8013024:	e00e      	b.n	8013044 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	78db      	ldrb	r3, [r3, #3]
 801302a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	785b      	ldrb	r3, [r3, #1]
 8013030:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8013032:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8013034:	68ba      	ldr	r2, [r7, #8]
 8013036:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8013038:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8013040:	4313      	orrs	r3, r2
 8013042:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	22ca      	movs	r2, #202	; 0xca
 801304a:	625a      	str	r2, [r3, #36]	; 0x24
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	2253      	movs	r2, #83	; 0x53
 8013052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013054:	2513      	movs	r5, #19
 8013056:	197c      	adds	r4, r7, r5
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	0018      	movs	r0, r3
 801305c:	f000 f8a2 	bl	80131a4 <RTC_EnterInitMode>
 8013060:	0003      	movs	r3, r0
 8013062:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8013064:	0028      	movs	r0, r5
 8013066:	183b      	adds	r3, r7, r0
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d10c      	bne.n	8013088 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	697a      	ldr	r2, [r7, #20]
 8013074:	4910      	ldr	r1, [pc, #64]	; (80130b8 <HAL_RTC_SetDate+0x120>)
 8013076:	400a      	ands	r2, r1
 8013078:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801307a:	183c      	adds	r4, r7, r0
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	0018      	movs	r0, r3
 8013080:	f000 f8d2 	bl	8013228 <RTC_ExitInitMode>
 8013084:	0003      	movs	r3, r0
 8013086:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	22ff      	movs	r2, #255	; 0xff
 801308e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8013090:	2313      	movs	r3, #19
 8013092:	18fb      	adds	r3, r7, r3
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d103      	bne.n	80130a2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2229      	movs	r2, #41	; 0x29
 801309e:	2101      	movs	r1, #1
 80130a0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2228      	movs	r2, #40	; 0x28
 80130a6:	2100      	movs	r1, #0
 80130a8:	5499      	strb	r1, [r3, r2]

  return status;
 80130aa:	2313      	movs	r3, #19
 80130ac:	18fb      	adds	r3, r7, r3
 80130ae:	781b      	ldrb	r3, [r3, #0]
}
 80130b0:	0018      	movs	r0, r3
 80130b2:	46bd      	mov	sp, r7
 80130b4:	b006      	add	sp, #24
 80130b6:	bdb0      	pop	{r4, r5, r7, pc}
 80130b8:	00ffff3f 	.word	0x00ffff3f

080130bc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b086      	sub	sp, #24
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	4a21      	ldr	r2, [pc, #132]	; (8013154 <HAL_RTC_GetDate+0x98>)
 80130d0:	4013      	ands	r3, r2
 80130d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	0c1b      	lsrs	r3, r3, #16
 80130d8:	b2da      	uxtb	r2, r3
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	0a1b      	lsrs	r3, r3, #8
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	221f      	movs	r2, #31
 80130e6:	4013      	ands	r3, r2
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	223f      	movs	r2, #63	; 0x3f
 80130f4:	4013      	ands	r3, r2
 80130f6:	b2da      	uxtb	r2, r3
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	0b5b      	lsrs	r3, r3, #13
 8013100:	b2db      	uxtb	r3, r3
 8013102:	2207      	movs	r2, #7
 8013104:	4013      	ands	r3, r2
 8013106:	b2da      	uxtb	r2, r3
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d11a      	bne.n	8013148 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	78db      	ldrb	r3, [r3, #3]
 8013116:	0018      	movs	r0, r3
 8013118:	f000 f8f2 	bl	8013300 <RTC_Bcd2ToByte>
 801311c:	0003      	movs	r3, r0
 801311e:	001a      	movs	r2, r3
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	785b      	ldrb	r3, [r3, #1]
 8013128:	0018      	movs	r0, r3
 801312a:	f000 f8e9 	bl	8013300 <RTC_Bcd2ToByte>
 801312e:	0003      	movs	r3, r0
 8013130:	001a      	movs	r2, r3
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	789b      	ldrb	r3, [r3, #2]
 801313a:	0018      	movs	r0, r3
 801313c:	f000 f8e0 	bl	8013300 <RTC_Bcd2ToByte>
 8013140:	0003      	movs	r3, r0
 8013142:	001a      	movs	r2, r3
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	0018      	movs	r0, r3
 801314c:	46bd      	mov	sp, r7
 801314e:	b006      	add	sp, #24
 8013150:	bd80      	pop	{r7, pc}
 8013152:	46c0      	nop			; (mov r8, r8)
 8013154:	00ffff3f 	.word	0x00ffff3f

08013158 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b084      	sub	sp, #16
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	4a0e      	ldr	r2, [pc, #56]	; (80131a0 <HAL_RTC_WaitForSynchro+0x48>)
 8013166:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8013168:	f7fc f914 	bl	800f394 <HAL_GetTick>
 801316c:	0003      	movs	r3, r0
 801316e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8013170:	e00a      	b.n	8013188 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8013172:	f7fc f90f 	bl	800f394 <HAL_GetTick>
 8013176:	0002      	movs	r2, r0
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	1ad2      	subs	r2, r2, r3
 801317c:	23fa      	movs	r3, #250	; 0xfa
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	429a      	cmp	r2, r3
 8013182:	d901      	bls.n	8013188 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8013184:	2303      	movs	r3, #3
 8013186:	e006      	b.n	8013196 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	2220      	movs	r2, #32
 8013190:	4013      	ands	r3, r2
 8013192:	d0ee      	beq.n	8013172 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	0018      	movs	r0, r3
 8013198:	46bd      	mov	sp, r7
 801319a:	b004      	add	sp, #16
 801319c:	bd80      	pop	{r7, pc}
 801319e:	46c0      	nop			; (mov r8, r8)
 80131a0:	0001005f 	.word	0x0001005f

080131a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80131ac:	230f      	movs	r3, #15
 80131ae:	18fb      	adds	r3, r7, r3
 80131b0:	2200      	movs	r2, #0
 80131b2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	68db      	ldr	r3, [r3, #12]
 80131ba:	2240      	movs	r2, #64	; 0x40
 80131bc:	4013      	ands	r3, r2
 80131be:	d12c      	bne.n	801321a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	68da      	ldr	r2, [r3, #12]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	2180      	movs	r1, #128	; 0x80
 80131cc:	430a      	orrs	r2, r1
 80131ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80131d0:	f7fc f8e0 	bl	800f394 <HAL_GetTick>
 80131d4:	0003      	movs	r3, r0
 80131d6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80131d8:	e014      	b.n	8013204 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80131da:	f7fc f8db 	bl	800f394 <HAL_GetTick>
 80131de:	0002      	movs	r2, r0
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	1ad2      	subs	r2, r2, r3
 80131e4:	200f      	movs	r0, #15
 80131e6:	183b      	adds	r3, r7, r0
 80131e8:	1839      	adds	r1, r7, r0
 80131ea:	7809      	ldrb	r1, [r1, #0]
 80131ec:	7019      	strb	r1, [r3, #0]
 80131ee:	23fa      	movs	r3, #250	; 0xfa
 80131f0:	009b      	lsls	r3, r3, #2
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d906      	bls.n	8013204 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80131f6:	183b      	adds	r3, r7, r0
 80131f8:	2203      	movs	r2, #3
 80131fa:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2229      	movs	r2, #41	; 0x29
 8013200:	2103      	movs	r1, #3
 8013202:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	2240      	movs	r2, #64	; 0x40
 801320c:	4013      	ands	r3, r2
 801320e:	d104      	bne.n	801321a <RTC_EnterInitMode+0x76>
 8013210:	230f      	movs	r3, #15
 8013212:	18fb      	adds	r3, r7, r3
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	2b03      	cmp	r3, #3
 8013218:	d1df      	bne.n	80131da <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 801321a:	230f      	movs	r3, #15
 801321c:	18fb      	adds	r3, r7, r3
 801321e:	781b      	ldrb	r3, [r3, #0]
}
 8013220:	0018      	movs	r0, r3
 8013222:	46bd      	mov	sp, r7
 8013224:	b004      	add	sp, #16
 8013226:	bd80      	pop	{r7, pc}

08013228 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013228:	b590      	push	{r4, r7, lr}
 801322a:	b085      	sub	sp, #20
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013230:	240f      	movs	r4, #15
 8013232:	193b      	adds	r3, r7, r4
 8013234:	2200      	movs	r2, #0
 8013236:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8013238:	4b1c      	ldr	r3, [pc, #112]	; (80132ac <RTC_ExitInitMode+0x84>)
 801323a:	68da      	ldr	r2, [r3, #12]
 801323c:	4b1b      	ldr	r3, [pc, #108]	; (80132ac <RTC_ExitInitMode+0x84>)
 801323e:	2180      	movs	r1, #128	; 0x80
 8013240:	438a      	bics	r2, r1
 8013242:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8013244:	4b19      	ldr	r3, [pc, #100]	; (80132ac <RTC_ExitInitMode+0x84>)
 8013246:	699b      	ldr	r3, [r3, #24]
 8013248:	2220      	movs	r2, #32
 801324a:	4013      	ands	r3, r2
 801324c:	d10d      	bne.n	801326a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	0018      	movs	r0, r3
 8013252:	f7ff ff81 	bl	8013158 <HAL_RTC_WaitForSynchro>
 8013256:	1e03      	subs	r3, r0, #0
 8013258:	d021      	beq.n	801329e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2229      	movs	r2, #41	; 0x29
 801325e:	2103      	movs	r1, #3
 8013260:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8013262:	193b      	adds	r3, r7, r4
 8013264:	2203      	movs	r2, #3
 8013266:	701a      	strb	r2, [r3, #0]
 8013268:	e019      	b.n	801329e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801326a:	4b10      	ldr	r3, [pc, #64]	; (80132ac <RTC_ExitInitMode+0x84>)
 801326c:	699a      	ldr	r2, [r3, #24]
 801326e:	4b0f      	ldr	r3, [pc, #60]	; (80132ac <RTC_ExitInitMode+0x84>)
 8013270:	2120      	movs	r1, #32
 8013272:	438a      	bics	r2, r1
 8013274:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	0018      	movs	r0, r3
 801327a:	f7ff ff6d 	bl	8013158 <HAL_RTC_WaitForSynchro>
 801327e:	1e03      	subs	r3, r0, #0
 8013280:	d007      	beq.n	8013292 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2229      	movs	r2, #41	; 0x29
 8013286:	2103      	movs	r1, #3
 8013288:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 801328a:	230f      	movs	r3, #15
 801328c:	18fb      	adds	r3, r7, r3
 801328e:	2203      	movs	r2, #3
 8013290:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013292:	4b06      	ldr	r3, [pc, #24]	; (80132ac <RTC_ExitInitMode+0x84>)
 8013294:	699a      	ldr	r2, [r3, #24]
 8013296:	4b05      	ldr	r3, [pc, #20]	; (80132ac <RTC_ExitInitMode+0x84>)
 8013298:	2120      	movs	r1, #32
 801329a:	430a      	orrs	r2, r1
 801329c:	619a      	str	r2, [r3, #24]
  }

  return status;
 801329e:	230f      	movs	r3, #15
 80132a0:	18fb      	adds	r3, r7, r3
 80132a2:	781b      	ldrb	r3, [r3, #0]
}
 80132a4:	0018      	movs	r0, r3
 80132a6:	46bd      	mov	sp, r7
 80132a8:	b005      	add	sp, #20
 80132aa:	bd90      	pop	{r4, r7, pc}
 80132ac:	40002800 	.word	0x40002800

080132b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	0002      	movs	r2, r0
 80132b8:	1dfb      	adds	r3, r7, #7
 80132ba:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80132bc:	2300      	movs	r3, #0
 80132be:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80132c0:	230b      	movs	r3, #11
 80132c2:	18fb      	adds	r3, r7, r3
 80132c4:	1dfa      	adds	r2, r7, #7
 80132c6:	7812      	ldrb	r2, [r2, #0]
 80132c8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80132ca:	e008      	b.n	80132de <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	3301      	adds	r3, #1
 80132d0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80132d2:	220b      	movs	r2, #11
 80132d4:	18bb      	adds	r3, r7, r2
 80132d6:	18ba      	adds	r2, r7, r2
 80132d8:	7812      	ldrb	r2, [r2, #0]
 80132da:	3a0a      	subs	r2, #10
 80132dc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80132de:	210b      	movs	r1, #11
 80132e0:	187b      	adds	r3, r7, r1
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	2b09      	cmp	r3, #9
 80132e6:	d8f1      	bhi.n	80132cc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	b2db      	uxtb	r3, r3
 80132ec:	011b      	lsls	r3, r3, #4
 80132ee:	b2da      	uxtb	r2, r3
 80132f0:	187b      	adds	r3, r7, r1
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	4313      	orrs	r3, r2
 80132f6:	b2db      	uxtb	r3, r3
}
 80132f8:	0018      	movs	r0, r3
 80132fa:	46bd      	mov	sp, r7
 80132fc:	b004      	add	sp, #16
 80132fe:	bd80      	pop	{r7, pc}

08013300 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	0002      	movs	r2, r0
 8013308:	1dfb      	adds	r3, r7, #7
 801330a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 801330c:	1dfb      	adds	r3, r7, #7
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	091b      	lsrs	r3, r3, #4
 8013312:	b2db      	uxtb	r3, r3
 8013314:	001a      	movs	r2, r3
 8013316:	0013      	movs	r3, r2
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	189b      	adds	r3, r3, r2
 801331c:	005b      	lsls	r3, r3, #1
 801331e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	b2da      	uxtb	r2, r3
 8013324:	1dfb      	adds	r3, r7, #7
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	210f      	movs	r1, #15
 801332a:	400b      	ands	r3, r1
 801332c:	b2db      	uxtb	r3, r3
 801332e:	18d3      	adds	r3, r2, r3
 8013330:	b2db      	uxtb	r3, r3
}
 8013332:	0018      	movs	r0, r3
 8013334:	46bd      	mov	sp, r7
 8013336:	b004      	add	sp, #16
 8013338:	bd80      	pop	{r7, pc}
	...

0801333c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801334a:	2301      	movs	r3, #1
 801334c:	e0a8      	b.n	80134a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013352:	2b00      	cmp	r3, #0
 8013354:	d109      	bne.n	801336a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685a      	ldr	r2, [r3, #4]
 801335a:	2382      	movs	r3, #130	; 0x82
 801335c:	005b      	lsls	r3, r3, #1
 801335e:	429a      	cmp	r2, r3
 8013360:	d009      	beq.n	8013376 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	61da      	str	r2, [r3, #28]
 8013368:	e005      	b.n	8013376 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2200      	movs	r2, #0
 801336e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	225d      	movs	r2, #93	; 0x5d
 8013380:	5c9b      	ldrb	r3, [r3, r2]
 8013382:	b2db      	uxtb	r3, r3
 8013384:	2b00      	cmp	r3, #0
 8013386:	d107      	bne.n	8013398 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	225c      	movs	r2, #92	; 0x5c
 801338c:	2100      	movs	r1, #0
 801338e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	0018      	movs	r0, r3
 8013394:	f7f9 fd9e 	bl	800ced4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	225d      	movs	r2, #93	; 0x5d
 801339c:	2102      	movs	r1, #2
 801339e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2140      	movs	r1, #64	; 0x40
 80133ac:	438a      	bics	r2, r1
 80133ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	68da      	ldr	r2, [r3, #12]
 80133b4:	23e0      	movs	r3, #224	; 0xe0
 80133b6:	00db      	lsls	r3, r3, #3
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d902      	bls.n	80133c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80133bc:	2300      	movs	r3, #0
 80133be:	60fb      	str	r3, [r7, #12]
 80133c0:	e002      	b.n	80133c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80133c2:	2380      	movs	r3, #128	; 0x80
 80133c4:	015b      	lsls	r3, r3, #5
 80133c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	68da      	ldr	r2, [r3, #12]
 80133cc:	23f0      	movs	r3, #240	; 0xf0
 80133ce:	011b      	lsls	r3, r3, #4
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d008      	beq.n	80133e6 <HAL_SPI_Init+0xaa>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	68da      	ldr	r2, [r3, #12]
 80133d8:	23e0      	movs	r3, #224	; 0xe0
 80133da:	00db      	lsls	r3, r3, #3
 80133dc:	429a      	cmp	r2, r3
 80133de:	d002      	beq.n	80133e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685a      	ldr	r2, [r3, #4]
 80133ea:	2382      	movs	r3, #130	; 0x82
 80133ec:	005b      	lsls	r3, r3, #1
 80133ee:	401a      	ands	r2, r3
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6899      	ldr	r1, [r3, #8]
 80133f4:	2384      	movs	r3, #132	; 0x84
 80133f6:	021b      	lsls	r3, r3, #8
 80133f8:	400b      	ands	r3, r1
 80133fa:	431a      	orrs	r2, r3
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	691b      	ldr	r3, [r3, #16]
 8013400:	2102      	movs	r1, #2
 8013402:	400b      	ands	r3, r1
 8013404:	431a      	orrs	r2, r3
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	695b      	ldr	r3, [r3, #20]
 801340a:	2101      	movs	r1, #1
 801340c:	400b      	ands	r3, r1
 801340e:	431a      	orrs	r2, r3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6999      	ldr	r1, [r3, #24]
 8013414:	2380      	movs	r3, #128	; 0x80
 8013416:	009b      	lsls	r3, r3, #2
 8013418:	400b      	ands	r3, r1
 801341a:	431a      	orrs	r2, r3
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	69db      	ldr	r3, [r3, #28]
 8013420:	2138      	movs	r1, #56	; 0x38
 8013422:	400b      	ands	r3, r1
 8013424:	431a      	orrs	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6a1b      	ldr	r3, [r3, #32]
 801342a:	2180      	movs	r1, #128	; 0x80
 801342c:	400b      	ands	r3, r1
 801342e:	431a      	orrs	r2, r3
 8013430:	0011      	movs	r1, r2
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013436:	2380      	movs	r3, #128	; 0x80
 8013438:	019b      	lsls	r3, r3, #6
 801343a:	401a      	ands	r2, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	430a      	orrs	r2, r1
 8013442:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	699b      	ldr	r3, [r3, #24]
 8013448:	0c1b      	lsrs	r3, r3, #16
 801344a:	2204      	movs	r2, #4
 801344c:	401a      	ands	r2, r3
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013452:	2110      	movs	r1, #16
 8013454:	400b      	ands	r3, r1
 8013456:	431a      	orrs	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801345c:	2108      	movs	r1, #8
 801345e:	400b      	ands	r3, r1
 8013460:	431a      	orrs	r2, r3
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	68d9      	ldr	r1, [r3, #12]
 8013466:	23f0      	movs	r3, #240	; 0xf0
 8013468:	011b      	lsls	r3, r3, #4
 801346a:	400b      	ands	r3, r1
 801346c:	431a      	orrs	r2, r3
 801346e:	0011      	movs	r1, r2
 8013470:	68fa      	ldr	r2, [r7, #12]
 8013472:	2380      	movs	r3, #128	; 0x80
 8013474:	015b      	lsls	r3, r3, #5
 8013476:	401a      	ands	r2, r3
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	430a      	orrs	r2, r1
 801347e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	69da      	ldr	r2, [r3, #28]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	4907      	ldr	r1, [pc, #28]	; (80134a8 <HAL_SPI_Init+0x16c>)
 801348c:	400a      	ands	r2, r1
 801348e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2200      	movs	r2, #0
 8013494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	225d      	movs	r2, #93	; 0x5d
 801349a:	2101      	movs	r1, #1
 801349c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801349e:	2300      	movs	r3, #0
}
 80134a0:	0018      	movs	r0, r3
 80134a2:	46bd      	mov	sp, r7
 80134a4:	b004      	add	sp, #16
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	fffff7ff 	.word	0xfffff7ff

080134ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b088      	sub	sp, #32
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	603b      	str	r3, [r7, #0]
 80134b8:	1dbb      	adds	r3, r7, #6
 80134ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80134bc:	231f      	movs	r3, #31
 80134be:	18fb      	adds	r3, r7, r3
 80134c0:	2200      	movs	r2, #0
 80134c2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	225c      	movs	r2, #92	; 0x5c
 80134c8:	5c9b      	ldrb	r3, [r3, r2]
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d101      	bne.n	80134d2 <HAL_SPI_Transmit+0x26>
 80134ce:	2302      	movs	r3, #2
 80134d0:	e147      	b.n	8013762 <HAL_SPI_Transmit+0x2b6>
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	225c      	movs	r2, #92	; 0x5c
 80134d6:	2101      	movs	r1, #1
 80134d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80134da:	f7fb ff5b 	bl	800f394 <HAL_GetTick>
 80134de:	0003      	movs	r3, r0
 80134e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80134e2:	2316      	movs	r3, #22
 80134e4:	18fb      	adds	r3, r7, r3
 80134e6:	1dba      	adds	r2, r7, #6
 80134e8:	8812      	ldrh	r2, [r2, #0]
 80134ea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	225d      	movs	r2, #93	; 0x5d
 80134f0:	5c9b      	ldrb	r3, [r3, r2]
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	2b01      	cmp	r3, #1
 80134f6:	d004      	beq.n	8013502 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80134f8:	231f      	movs	r3, #31
 80134fa:	18fb      	adds	r3, r7, r3
 80134fc:	2202      	movs	r2, #2
 80134fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8013500:	e128      	b.n	8013754 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d003      	beq.n	8013510 <HAL_SPI_Transmit+0x64>
 8013508:	1dbb      	adds	r3, r7, #6
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d104      	bne.n	801351a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8013510:	231f      	movs	r3, #31
 8013512:	18fb      	adds	r3, r7, r3
 8013514:	2201      	movs	r2, #1
 8013516:	701a      	strb	r2, [r3, #0]
    goto error;
 8013518:	e11c      	b.n	8013754 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	225d      	movs	r2, #93	; 0x5d
 801351e:	2103      	movs	r1, #3
 8013520:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2200      	movs	r2, #0
 8013526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	68ba      	ldr	r2, [r7, #8]
 801352c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	1dba      	adds	r2, r7, #6
 8013532:	8812      	ldrh	r2, [r2, #0]
 8013534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	1dba      	adds	r2, r7, #6
 801353a:	8812      	ldrh	r2, [r2, #0]
 801353c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2200      	movs	r2, #0
 8013542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2244      	movs	r2, #68	; 0x44
 8013548:	2100      	movs	r1, #0
 801354a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	2246      	movs	r2, #70	; 0x46
 8013550:	2100      	movs	r1, #0
 8013552:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	2200      	movs	r2, #0
 8013558:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	2200      	movs	r2, #0
 801355e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	689a      	ldr	r2, [r3, #8]
 8013564:	2380      	movs	r3, #128	; 0x80
 8013566:	021b      	lsls	r3, r3, #8
 8013568:	429a      	cmp	r2, r3
 801356a:	d110      	bne.n	801358e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2140      	movs	r1, #64	; 0x40
 8013578:	438a      	bics	r2, r1
 801357a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2180      	movs	r1, #128	; 0x80
 8013588:	01c9      	lsls	r1, r1, #7
 801358a:	430a      	orrs	r2, r1
 801358c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2240      	movs	r2, #64	; 0x40
 8013596:	4013      	ands	r3, r2
 8013598:	2b40      	cmp	r3, #64	; 0x40
 801359a:	d007      	beq.n	80135ac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	681a      	ldr	r2, [r3, #0]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2140      	movs	r1, #64	; 0x40
 80135a8:	430a      	orrs	r2, r1
 80135aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	68da      	ldr	r2, [r3, #12]
 80135b0:	23e0      	movs	r3, #224	; 0xe0
 80135b2:	00db      	lsls	r3, r3, #3
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d952      	bls.n	801365e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d004      	beq.n	80135ca <HAL_SPI_Transmit+0x11e>
 80135c0:	2316      	movs	r3, #22
 80135c2:	18fb      	adds	r3, r7, r3
 80135c4:	881b      	ldrh	r3, [r3, #0]
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d143      	bne.n	8013652 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135ce:	881a      	ldrh	r2, [r3, #0]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135da:	1c9a      	adds	r2, r3, #2
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	3b01      	subs	r3, #1
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80135ee:	e030      	b.n	8013652 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	689b      	ldr	r3, [r3, #8]
 80135f6:	2202      	movs	r2, #2
 80135f8:	4013      	ands	r3, r2
 80135fa:	2b02      	cmp	r3, #2
 80135fc:	d112      	bne.n	8013624 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013602:	881a      	ldrh	r2, [r3, #0]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801360e:	1c9a      	adds	r2, r3, #2
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013618:	b29b      	uxth	r3, r3
 801361a:	3b01      	subs	r3, #1
 801361c:	b29a      	uxth	r2, r3
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013622:	e016      	b.n	8013652 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013624:	f7fb feb6 	bl	800f394 <HAL_GetTick>
 8013628:	0002      	movs	r2, r0
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	1ad3      	subs	r3, r2, r3
 801362e:	683a      	ldr	r2, [r7, #0]
 8013630:	429a      	cmp	r2, r3
 8013632:	d802      	bhi.n	801363a <HAL_SPI_Transmit+0x18e>
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	3301      	adds	r3, #1
 8013638:	d102      	bne.n	8013640 <HAL_SPI_Transmit+0x194>
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d108      	bne.n	8013652 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8013640:	231f      	movs	r3, #31
 8013642:	18fb      	adds	r3, r7, r3
 8013644:	2203      	movs	r2, #3
 8013646:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	225d      	movs	r2, #93	; 0x5d
 801364c:	2101      	movs	r1, #1
 801364e:	5499      	strb	r1, [r3, r2]
          goto error;
 8013650:	e080      	b.n	8013754 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013656:	b29b      	uxth	r3, r3
 8013658:	2b00      	cmp	r3, #0
 801365a:	d1c9      	bne.n	80135f0 <HAL_SPI_Transmit+0x144>
 801365c:	e053      	b.n	8013706 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d004      	beq.n	8013670 <HAL_SPI_Transmit+0x1c4>
 8013666:	2316      	movs	r3, #22
 8013668:	18fb      	adds	r3, r7, r3
 801366a:	881b      	ldrh	r3, [r3, #0]
 801366c:	2b01      	cmp	r3, #1
 801366e:	d145      	bne.n	80136fc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	330c      	adds	r3, #12
 801367a:	7812      	ldrb	r2, [r2, #0]
 801367c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013682:	1c5a      	adds	r2, r3, #1
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801368c:	b29b      	uxth	r3, r3
 801368e:	3b01      	subs	r3, #1
 8013690:	b29a      	uxth	r2, r3
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8013696:	e031      	b.n	80136fc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	689b      	ldr	r3, [r3, #8]
 801369e:	2202      	movs	r2, #2
 80136a0:	4013      	ands	r3, r2
 80136a2:	2b02      	cmp	r3, #2
 80136a4:	d113      	bne.n	80136ce <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	330c      	adds	r3, #12
 80136b0:	7812      	ldrb	r2, [r2, #0]
 80136b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136b8:	1c5a      	adds	r2, r3, #1
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	3b01      	subs	r3, #1
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80136cc:	e016      	b.n	80136fc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80136ce:	f7fb fe61 	bl	800f394 <HAL_GetTick>
 80136d2:	0002      	movs	r2, r0
 80136d4:	69bb      	ldr	r3, [r7, #24]
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	683a      	ldr	r2, [r7, #0]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d802      	bhi.n	80136e4 <HAL_SPI_Transmit+0x238>
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	3301      	adds	r3, #1
 80136e2:	d102      	bne.n	80136ea <HAL_SPI_Transmit+0x23e>
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d108      	bne.n	80136fc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80136ea:	231f      	movs	r3, #31
 80136ec:	18fb      	adds	r3, r7, r3
 80136ee:	2203      	movs	r2, #3
 80136f0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	225d      	movs	r2, #93	; 0x5d
 80136f6:	2101      	movs	r1, #1
 80136f8:	5499      	strb	r1, [r3, r2]
          goto error;
 80136fa:	e02b      	b.n	8013754 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013700:	b29b      	uxth	r3, r3
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1c8      	bne.n	8013698 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013706:	69ba      	ldr	r2, [r7, #24]
 8013708:	6839      	ldr	r1, [r7, #0]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	0018      	movs	r0, r3
 801370e:	f000 fcef 	bl	80140f0 <SPI_EndRxTxTransaction>
 8013712:	1e03      	subs	r3, r0, #0
 8013714:	d002      	beq.n	801371c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2220      	movs	r2, #32
 801371a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	689b      	ldr	r3, [r3, #8]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d10a      	bne.n	801373a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013724:	2300      	movs	r3, #0
 8013726:	613b      	str	r3, [r7, #16]
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	613b      	str	r3, [r7, #16]
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	689b      	ldr	r3, [r3, #8]
 8013736:	613b      	str	r3, [r7, #16]
 8013738:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801373e:	2b00      	cmp	r3, #0
 8013740:	d004      	beq.n	801374c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8013742:	231f      	movs	r3, #31
 8013744:	18fb      	adds	r3, r7, r3
 8013746:	2201      	movs	r2, #1
 8013748:	701a      	strb	r2, [r3, #0]
 801374a:	e003      	b.n	8013754 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	225d      	movs	r2, #93	; 0x5d
 8013750:	2101      	movs	r1, #1
 8013752:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	225c      	movs	r2, #92	; 0x5c
 8013758:	2100      	movs	r1, #0
 801375a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 801375c:	231f      	movs	r3, #31
 801375e:	18fb      	adds	r3, r7, r3
 8013760:	781b      	ldrb	r3, [r3, #0]
}
 8013762:	0018      	movs	r0, r3
 8013764:	46bd      	mov	sp, r7
 8013766:	b008      	add	sp, #32
 8013768:	bd80      	pop	{r7, pc}
	...

0801376c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801376c:	b590      	push	{r4, r7, lr}
 801376e:	b089      	sub	sp, #36	; 0x24
 8013770:	af02      	add	r7, sp, #8
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	603b      	str	r3, [r7, #0]
 8013778:	1dbb      	adds	r3, r7, #6
 801377a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801377c:	2117      	movs	r1, #23
 801377e:	187b      	adds	r3, r7, r1
 8013780:	2200      	movs	r2, #0
 8013782:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	225d      	movs	r2, #93	; 0x5d
 8013788:	5c9b      	ldrb	r3, [r3, r2]
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b01      	cmp	r3, #1
 801378e:	d003      	beq.n	8013798 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8013790:	187b      	adds	r3, r7, r1
 8013792:	2202      	movs	r2, #2
 8013794:	701a      	strb	r2, [r3, #0]
    goto error;
 8013796:	e12b      	b.n	80139f0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	685a      	ldr	r2, [r3, #4]
 801379c:	2382      	movs	r3, #130	; 0x82
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d113      	bne.n	80137cc <HAL_SPI_Receive+0x60>
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d10f      	bne.n	80137cc <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	225d      	movs	r2, #93	; 0x5d
 80137b0:	2104      	movs	r1, #4
 80137b2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80137b4:	1dbb      	adds	r3, r7, #6
 80137b6:	881c      	ldrh	r4, [r3, #0]
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	68b9      	ldr	r1, [r7, #8]
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	9300      	str	r3, [sp, #0]
 80137c2:	0023      	movs	r3, r4
 80137c4:	f000 f924 	bl	8013a10 <HAL_SPI_TransmitReceive>
 80137c8:	0003      	movs	r3, r0
 80137ca:	e118      	b.n	80139fe <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	225c      	movs	r2, #92	; 0x5c
 80137d0:	5c9b      	ldrb	r3, [r3, r2]
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d101      	bne.n	80137da <HAL_SPI_Receive+0x6e>
 80137d6:	2302      	movs	r3, #2
 80137d8:	e111      	b.n	80139fe <HAL_SPI_Receive+0x292>
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	225c      	movs	r2, #92	; 0x5c
 80137de:	2101      	movs	r1, #1
 80137e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80137e2:	f7fb fdd7 	bl	800f394 <HAL_GetTick>
 80137e6:	0003      	movs	r3, r0
 80137e8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d003      	beq.n	80137f8 <HAL_SPI_Receive+0x8c>
 80137f0:	1dbb      	adds	r3, r7, #6
 80137f2:	881b      	ldrh	r3, [r3, #0]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d104      	bne.n	8013802 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80137f8:	2317      	movs	r3, #23
 80137fa:	18fb      	adds	r3, r7, r3
 80137fc:	2201      	movs	r2, #1
 80137fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8013800:	e0f6      	b.n	80139f0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	225d      	movs	r2, #93	; 0x5d
 8013806:	2104      	movs	r1, #4
 8013808:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2200      	movs	r2, #0
 801380e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	68ba      	ldr	r2, [r7, #8]
 8013814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	1dba      	adds	r2, r7, #6
 801381a:	2144      	movs	r1, #68	; 0x44
 801381c:	8812      	ldrh	r2, [r2, #0]
 801381e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	1dba      	adds	r2, r7, #6
 8013824:	2146      	movs	r1, #70	; 0x46
 8013826:	8812      	ldrh	r2, [r2, #0]
 8013828:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2200      	movs	r2, #0
 801382e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2200      	movs	r2, #0
 8013834:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2200      	movs	r2, #0
 801383a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2200      	movs	r2, #0
 8013840:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2200      	movs	r2, #0
 8013846:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	68da      	ldr	r2, [r3, #12]
 801384c:	23e0      	movs	r3, #224	; 0xe0
 801384e:	00db      	lsls	r3, r3, #3
 8013850:	429a      	cmp	r2, r3
 8013852:	d908      	bls.n	8013866 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	685a      	ldr	r2, [r3, #4]
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	496a      	ldr	r1, [pc, #424]	; (8013a08 <HAL_SPI_Receive+0x29c>)
 8013860:	400a      	ands	r2, r1
 8013862:	605a      	str	r2, [r3, #4]
 8013864:	e008      	b.n	8013878 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	685a      	ldr	r2, [r3, #4]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2180      	movs	r1, #128	; 0x80
 8013872:	0149      	lsls	r1, r1, #5
 8013874:	430a      	orrs	r2, r1
 8013876:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	689a      	ldr	r2, [r3, #8]
 801387c:	2380      	movs	r3, #128	; 0x80
 801387e:	021b      	lsls	r3, r3, #8
 8013880:	429a      	cmp	r2, r3
 8013882:	d10f      	bne.n	80138a4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2140      	movs	r1, #64	; 0x40
 8013890:	438a      	bics	r2, r1
 8013892:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	495b      	ldr	r1, [pc, #364]	; (8013a0c <HAL_SPI_Receive+0x2a0>)
 80138a0:	400a      	ands	r2, r1
 80138a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	2240      	movs	r2, #64	; 0x40
 80138ac:	4013      	ands	r3, r2
 80138ae:	2b40      	cmp	r3, #64	; 0x40
 80138b0:	d007      	beq.n	80138c2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2140      	movs	r1, #64	; 0x40
 80138be:	430a      	orrs	r2, r1
 80138c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	68da      	ldr	r2, [r3, #12]
 80138c6:	23e0      	movs	r3, #224	; 0xe0
 80138c8:	00db      	lsls	r3, r3, #3
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d900      	bls.n	80138d0 <HAL_SPI_Receive+0x164>
 80138ce:	e071      	b.n	80139b4 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80138d0:	e035      	b.n	801393e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	689b      	ldr	r3, [r3, #8]
 80138d8:	2201      	movs	r2, #1
 80138da:	4013      	ands	r3, r2
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d117      	bne.n	8013910 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	330c      	adds	r3, #12
 80138e6:	001a      	movs	r2, r3
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138ec:	7812      	ldrb	r2, [r2, #0]
 80138ee:	b2d2      	uxtb	r2, r2
 80138f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f6:	1c5a      	adds	r2, r3, #1
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2246      	movs	r2, #70	; 0x46
 8013900:	5a9b      	ldrh	r3, [r3, r2]
 8013902:	b29b      	uxth	r3, r3
 8013904:	3b01      	subs	r3, #1
 8013906:	b299      	uxth	r1, r3
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2246      	movs	r2, #70	; 0x46
 801390c:	5299      	strh	r1, [r3, r2]
 801390e:	e016      	b.n	801393e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013910:	f7fb fd40 	bl	800f394 <HAL_GetTick>
 8013914:	0002      	movs	r2, r0
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	1ad3      	subs	r3, r2, r3
 801391a:	683a      	ldr	r2, [r7, #0]
 801391c:	429a      	cmp	r2, r3
 801391e:	d802      	bhi.n	8013926 <HAL_SPI_Receive+0x1ba>
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	3301      	adds	r3, #1
 8013924:	d102      	bne.n	801392c <HAL_SPI_Receive+0x1c0>
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d108      	bne.n	801393e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 801392c:	2317      	movs	r3, #23
 801392e:	18fb      	adds	r3, r7, r3
 8013930:	2203      	movs	r2, #3
 8013932:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	225d      	movs	r2, #93	; 0x5d
 8013938:	2101      	movs	r1, #1
 801393a:	5499      	strb	r1, [r3, r2]
          goto error;
 801393c:	e058      	b.n	80139f0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2246      	movs	r2, #70	; 0x46
 8013942:	5a9b      	ldrh	r3, [r3, r2]
 8013944:	b29b      	uxth	r3, r3
 8013946:	2b00      	cmp	r3, #0
 8013948:	d1c3      	bne.n	80138d2 <HAL_SPI_Receive+0x166>
 801394a:	e039      	b.n	80139c0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	689b      	ldr	r3, [r3, #8]
 8013952:	2201      	movs	r2, #1
 8013954:	4013      	ands	r3, r2
 8013956:	2b01      	cmp	r3, #1
 8013958:	d115      	bne.n	8013986 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	68da      	ldr	r2, [r3, #12]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013964:	b292      	uxth	r2, r2
 8013966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801396c:	1c9a      	adds	r2, r3, #2
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	2246      	movs	r2, #70	; 0x46
 8013976:	5a9b      	ldrh	r3, [r3, r2]
 8013978:	b29b      	uxth	r3, r3
 801397a:	3b01      	subs	r3, #1
 801397c:	b299      	uxth	r1, r3
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2246      	movs	r2, #70	; 0x46
 8013982:	5299      	strh	r1, [r3, r2]
 8013984:	e016      	b.n	80139b4 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013986:	f7fb fd05 	bl	800f394 <HAL_GetTick>
 801398a:	0002      	movs	r2, r0
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	683a      	ldr	r2, [r7, #0]
 8013992:	429a      	cmp	r2, r3
 8013994:	d802      	bhi.n	801399c <HAL_SPI_Receive+0x230>
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	3301      	adds	r3, #1
 801399a:	d102      	bne.n	80139a2 <HAL_SPI_Receive+0x236>
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d108      	bne.n	80139b4 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80139a2:	2317      	movs	r3, #23
 80139a4:	18fb      	adds	r3, r7, r3
 80139a6:	2203      	movs	r2, #3
 80139a8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	225d      	movs	r2, #93	; 0x5d
 80139ae:	2101      	movs	r1, #1
 80139b0:	5499      	strb	r1, [r3, r2]
          goto error;
 80139b2:	e01d      	b.n	80139f0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2246      	movs	r2, #70	; 0x46
 80139b8:	5a9b      	ldrh	r3, [r3, r2]
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d1c5      	bne.n	801394c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80139c0:	693a      	ldr	r2, [r7, #16]
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	0018      	movs	r0, r3
 80139c8:	f000 fb34 	bl	8014034 <SPI_EndRxTransaction>
 80139cc:	1e03      	subs	r3, r0, #0
 80139ce:	d002      	beq.n	80139d6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2220      	movs	r2, #32
 80139d4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d004      	beq.n	80139e8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80139de:	2317      	movs	r3, #23
 80139e0:	18fb      	adds	r3, r7, r3
 80139e2:	2201      	movs	r2, #1
 80139e4:	701a      	strb	r2, [r3, #0]
 80139e6:	e003      	b.n	80139f0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	225d      	movs	r2, #93	; 0x5d
 80139ec:	2101      	movs	r1, #1
 80139ee:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	225c      	movs	r2, #92	; 0x5c
 80139f4:	2100      	movs	r1, #0
 80139f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80139f8:	2317      	movs	r3, #23
 80139fa:	18fb      	adds	r3, r7, r3
 80139fc:	781b      	ldrb	r3, [r3, #0]
}
 80139fe:	0018      	movs	r0, r3
 8013a00:	46bd      	mov	sp, r7
 8013a02:	b007      	add	sp, #28
 8013a04:	bd90      	pop	{r4, r7, pc}
 8013a06:	46c0      	nop			; (mov r8, r8)
 8013a08:	ffffefff 	.word	0xffffefff
 8013a0c:	ffffbfff 	.word	0xffffbfff

08013a10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b08a      	sub	sp, #40	; 0x28
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	60f8      	str	r0, [r7, #12]
 8013a18:	60b9      	str	r1, [r7, #8]
 8013a1a:	607a      	str	r2, [r7, #4]
 8013a1c:	001a      	movs	r2, r3
 8013a1e:	1cbb      	adds	r3, r7, #2
 8013a20:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013a22:	2301      	movs	r3, #1
 8013a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013a26:	2323      	movs	r3, #35	; 0x23
 8013a28:	18fb      	adds	r3, r7, r3
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	225c      	movs	r2, #92	; 0x5c
 8013a32:	5c9b      	ldrb	r3, [r3, r2]
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d101      	bne.n	8013a3c <HAL_SPI_TransmitReceive+0x2c>
 8013a38:	2302      	movs	r3, #2
 8013a3a:	e1c4      	b.n	8013dc6 <HAL_SPI_TransmitReceive+0x3b6>
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	225c      	movs	r2, #92	; 0x5c
 8013a40:	2101      	movs	r1, #1
 8013a42:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013a44:	f7fb fca6 	bl	800f394 <HAL_GetTick>
 8013a48:	0003      	movs	r3, r0
 8013a4a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013a4c:	201b      	movs	r0, #27
 8013a4e:	183b      	adds	r3, r7, r0
 8013a50:	68fa      	ldr	r2, [r7, #12]
 8013a52:	215d      	movs	r1, #93	; 0x5d
 8013a54:	5c52      	ldrb	r2, [r2, r1]
 8013a56:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	685b      	ldr	r3, [r3, #4]
 8013a5c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8013a5e:	2312      	movs	r3, #18
 8013a60:	18fb      	adds	r3, r7, r3
 8013a62:	1cba      	adds	r2, r7, #2
 8013a64:	8812      	ldrh	r2, [r2, #0]
 8013a66:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013a68:	183b      	adds	r3, r7, r0
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	d011      	beq.n	8013a94 <HAL_SPI_TransmitReceive+0x84>
 8013a70:	697a      	ldr	r2, [r7, #20]
 8013a72:	2382      	movs	r3, #130	; 0x82
 8013a74:	005b      	lsls	r3, r3, #1
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d107      	bne.n	8013a8a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	689b      	ldr	r3, [r3, #8]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d103      	bne.n	8013a8a <HAL_SPI_TransmitReceive+0x7a>
 8013a82:	183b      	adds	r3, r7, r0
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	2b04      	cmp	r3, #4
 8013a88:	d004      	beq.n	8013a94 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8013a8a:	2323      	movs	r3, #35	; 0x23
 8013a8c:	18fb      	adds	r3, r7, r3
 8013a8e:	2202      	movs	r2, #2
 8013a90:	701a      	strb	r2, [r3, #0]
    goto error;
 8013a92:	e191      	b.n	8013db8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d006      	beq.n	8013aa8 <HAL_SPI_TransmitReceive+0x98>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d003      	beq.n	8013aa8 <HAL_SPI_TransmitReceive+0x98>
 8013aa0:	1cbb      	adds	r3, r7, #2
 8013aa2:	881b      	ldrh	r3, [r3, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d104      	bne.n	8013ab2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8013aa8:	2323      	movs	r3, #35	; 0x23
 8013aaa:	18fb      	adds	r3, r7, r3
 8013aac:	2201      	movs	r2, #1
 8013aae:	701a      	strb	r2, [r3, #0]
    goto error;
 8013ab0:	e182      	b.n	8013db8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	225d      	movs	r2, #93	; 0x5d
 8013ab6:	5c9b      	ldrb	r3, [r3, r2]
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	2b04      	cmp	r3, #4
 8013abc:	d003      	beq.n	8013ac6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	225d      	movs	r2, #93	; 0x5d
 8013ac2:	2105      	movs	r1, #5
 8013ac4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	1cba      	adds	r2, r7, #2
 8013ad6:	2146      	movs	r1, #70	; 0x46
 8013ad8:	8812      	ldrh	r2, [r2, #0]
 8013ada:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	1cba      	adds	r2, r7, #2
 8013ae0:	2144      	movs	r1, #68	; 0x44
 8013ae2:	8812      	ldrh	r2, [r2, #0]
 8013ae4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	68ba      	ldr	r2, [r7, #8]
 8013aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	1cba      	adds	r2, r7, #2
 8013af0:	8812      	ldrh	r2, [r2, #0]
 8013af2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	1cba      	adds	r2, r7, #2
 8013af8:	8812      	ldrh	r2, [r2, #0]
 8013afa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2200      	movs	r2, #0
 8013b00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2200      	movs	r2, #0
 8013b06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	68da      	ldr	r2, [r3, #12]
 8013b0c:	23e0      	movs	r3, #224	; 0xe0
 8013b0e:	00db      	lsls	r3, r3, #3
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d908      	bls.n	8013b26 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	685a      	ldr	r2, [r3, #4]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	49ac      	ldr	r1, [pc, #688]	; (8013dd0 <HAL_SPI_TransmitReceive+0x3c0>)
 8013b20:	400a      	ands	r2, r1
 8013b22:	605a      	str	r2, [r3, #4]
 8013b24:	e008      	b.n	8013b38 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	685a      	ldr	r2, [r3, #4]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2180      	movs	r1, #128	; 0x80
 8013b32:	0149      	lsls	r1, r1, #5
 8013b34:	430a      	orrs	r2, r1
 8013b36:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2240      	movs	r2, #64	; 0x40
 8013b40:	4013      	ands	r3, r2
 8013b42:	2b40      	cmp	r3, #64	; 0x40
 8013b44:	d007      	beq.n	8013b56 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2140      	movs	r1, #64	; 0x40
 8013b52:	430a      	orrs	r2, r1
 8013b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	68da      	ldr	r2, [r3, #12]
 8013b5a:	23e0      	movs	r3, #224	; 0xe0
 8013b5c:	00db      	lsls	r3, r3, #3
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d800      	bhi.n	8013b64 <HAL_SPI_TransmitReceive+0x154>
 8013b62:	e083      	b.n	8013c6c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d005      	beq.n	8013b78 <HAL_SPI_TransmitReceive+0x168>
 8013b6c:	2312      	movs	r3, #18
 8013b6e:	18fb      	adds	r3, r7, r3
 8013b70:	881b      	ldrh	r3, [r3, #0]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d000      	beq.n	8013b78 <HAL_SPI_TransmitReceive+0x168>
 8013b76:	e06d      	b.n	8013c54 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b7c:	881a      	ldrh	r2, [r3, #0]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b88:	1c9a      	adds	r2, r3, #2
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	3b01      	subs	r3, #1
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013b9c:	e05a      	b.n	8013c54 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	689b      	ldr	r3, [r3, #8]
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	4013      	ands	r3, r2
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d11b      	bne.n	8013be4 <HAL_SPI_TransmitReceive+0x1d4>
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d016      	beq.n	8013be4 <HAL_SPI_TransmitReceive+0x1d4>
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d113      	bne.n	8013be4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bc0:	881a      	ldrh	r2, [r3, #0]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bcc:	1c9a      	adds	r2, r3, #2
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	3b01      	subs	r3, #1
 8013bda:	b29a      	uxth	r2, r3
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013be0:	2300      	movs	r3, #0
 8013be2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	689b      	ldr	r3, [r3, #8]
 8013bea:	2201      	movs	r2, #1
 8013bec:	4013      	ands	r3, r2
 8013bee:	2b01      	cmp	r3, #1
 8013bf0:	d11c      	bne.n	8013c2c <HAL_SPI_TransmitReceive+0x21c>
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2246      	movs	r2, #70	; 0x46
 8013bf6:	5a9b      	ldrh	r3, [r3, r2]
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d016      	beq.n	8013c2c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	68da      	ldr	r2, [r3, #12]
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c08:	b292      	uxth	r2, r2
 8013c0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c10:	1c9a      	adds	r2, r3, #2
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2246      	movs	r2, #70	; 0x46
 8013c1a:	5a9b      	ldrh	r3, [r3, r2]
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	3b01      	subs	r3, #1
 8013c20:	b299      	uxth	r1, r3
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2246      	movs	r2, #70	; 0x46
 8013c26:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013c28:	2301      	movs	r3, #1
 8013c2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013c2c:	f7fb fbb2 	bl	800f394 <HAL_GetTick>
 8013c30:	0002      	movs	r2, r0
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	1ad3      	subs	r3, r2, r3
 8013c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d80b      	bhi.n	8013c54 <HAL_SPI_TransmitReceive+0x244>
 8013c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c3e:	3301      	adds	r3, #1
 8013c40:	d008      	beq.n	8013c54 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8013c42:	2323      	movs	r3, #35	; 0x23
 8013c44:	18fb      	adds	r3, r7, r3
 8013c46:	2203      	movs	r2, #3
 8013c48:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	225d      	movs	r2, #93	; 0x5d
 8013c4e:	2101      	movs	r1, #1
 8013c50:	5499      	strb	r1, [r3, r2]
        goto error;
 8013c52:	e0b1      	b.n	8013db8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d19f      	bne.n	8013b9e <HAL_SPI_TransmitReceive+0x18e>
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	2246      	movs	r2, #70	; 0x46
 8013c62:	5a9b      	ldrh	r3, [r3, r2]
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d199      	bne.n	8013b9e <HAL_SPI_TransmitReceive+0x18e>
 8013c6a:	e089      	b.n	8013d80 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d005      	beq.n	8013c80 <HAL_SPI_TransmitReceive+0x270>
 8013c74:	2312      	movs	r3, #18
 8013c76:	18fb      	adds	r3, r7, r3
 8013c78:	881b      	ldrh	r3, [r3, #0]
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d000      	beq.n	8013c80 <HAL_SPI_TransmitReceive+0x270>
 8013c7e:	e074      	b.n	8013d6a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	330c      	adds	r3, #12
 8013c8a:	7812      	ldrb	r2, [r2, #0]
 8013c8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c92:	1c5a      	adds	r2, r3, #1
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	3b01      	subs	r3, #1
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013ca6:	e060      	b.n	8013d6a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	689b      	ldr	r3, [r3, #8]
 8013cae:	2202      	movs	r2, #2
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	2b02      	cmp	r3, #2
 8013cb4:	d11c      	bne.n	8013cf0 <HAL_SPI_TransmitReceive+0x2e0>
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d017      	beq.n	8013cf0 <HAL_SPI_TransmitReceive+0x2e0>
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc2:	2b01      	cmp	r3, #1
 8013cc4:	d114      	bne.n	8013cf0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	330c      	adds	r3, #12
 8013cd0:	7812      	ldrb	r2, [r2, #0]
 8013cd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd8:	1c5a      	adds	r2, r3, #1
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	3b01      	subs	r3, #1
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013cec:	2300      	movs	r3, #0
 8013cee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	689b      	ldr	r3, [r3, #8]
 8013cf6:	2201      	movs	r2, #1
 8013cf8:	4013      	ands	r3, r2
 8013cfa:	2b01      	cmp	r3, #1
 8013cfc:	d11e      	bne.n	8013d3c <HAL_SPI_TransmitReceive+0x32c>
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2246      	movs	r2, #70	; 0x46
 8013d02:	5a9b      	ldrh	r3, [r3, r2]
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d018      	beq.n	8013d3c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	330c      	adds	r3, #12
 8013d10:	001a      	movs	r2, r3
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d16:	7812      	ldrb	r2, [r2, #0]
 8013d18:	b2d2      	uxtb	r2, r2
 8013d1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d20:	1c5a      	adds	r2, r3, #1
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2246      	movs	r2, #70	; 0x46
 8013d2a:	5a9b      	ldrh	r3, [r3, r2]
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	3b01      	subs	r3, #1
 8013d30:	b299      	uxth	r1, r3
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	2246      	movs	r2, #70	; 0x46
 8013d36:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013d38:	2301      	movs	r3, #1
 8013d3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013d3c:	f7fb fb2a 	bl	800f394 <HAL_GetTick>
 8013d40:	0002      	movs	r2, r0
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	1ad3      	subs	r3, r2, r3
 8013d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d802      	bhi.n	8013d52 <HAL_SPI_TransmitReceive+0x342>
 8013d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4e:	3301      	adds	r3, #1
 8013d50:	d102      	bne.n	8013d58 <HAL_SPI_TransmitReceive+0x348>
 8013d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d108      	bne.n	8013d6a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8013d58:	2323      	movs	r3, #35	; 0x23
 8013d5a:	18fb      	adds	r3, r7, r3
 8013d5c:	2203      	movs	r2, #3
 8013d5e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	225d      	movs	r2, #93	; 0x5d
 8013d64:	2101      	movs	r1, #1
 8013d66:	5499      	strb	r1, [r3, r2]
        goto error;
 8013d68:	e026      	b.n	8013db8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d199      	bne.n	8013ca8 <HAL_SPI_TransmitReceive+0x298>
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2246      	movs	r2, #70	; 0x46
 8013d78:	5a9b      	ldrh	r3, [r3, r2]
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d193      	bne.n	8013ca8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013d80:	69fa      	ldr	r2, [r7, #28]
 8013d82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	0018      	movs	r0, r3
 8013d88:	f000 f9b2 	bl	80140f0 <SPI_EndRxTxTransaction>
 8013d8c:	1e03      	subs	r3, r0, #0
 8013d8e:	d006      	beq.n	8013d9e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8013d90:	2323      	movs	r3, #35	; 0x23
 8013d92:	18fb      	adds	r3, r7, r3
 8013d94:	2201      	movs	r2, #1
 8013d96:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2220      	movs	r2, #32
 8013d9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d004      	beq.n	8013db0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8013da6:	2323      	movs	r3, #35	; 0x23
 8013da8:	18fb      	adds	r3, r7, r3
 8013daa:	2201      	movs	r2, #1
 8013dac:	701a      	strb	r2, [r3, #0]
 8013dae:	e003      	b.n	8013db8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	225d      	movs	r2, #93	; 0x5d
 8013db4:	2101      	movs	r1, #1
 8013db6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	225c      	movs	r2, #92	; 0x5c
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8013dc0:	2323      	movs	r3, #35	; 0x23
 8013dc2:	18fb      	adds	r3, r7, r3
 8013dc4:	781b      	ldrb	r3, [r3, #0]
}
 8013dc6:	0018      	movs	r0, r3
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	b00a      	add	sp, #40	; 0x28
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	46c0      	nop			; (mov r8, r8)
 8013dd0:	ffffefff 	.word	0xffffefff

08013dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b088      	sub	sp, #32
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	603b      	str	r3, [r7, #0]
 8013de0:	1dfb      	adds	r3, r7, #7
 8013de2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013de4:	f7fb fad6 	bl	800f394 <HAL_GetTick>
 8013de8:	0002      	movs	r2, r0
 8013dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dec:	1a9b      	subs	r3, r3, r2
 8013dee:	683a      	ldr	r2, [r7, #0]
 8013df0:	18d3      	adds	r3, r2, r3
 8013df2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013df4:	f7fb face 	bl	800f394 <HAL_GetTick>
 8013df8:	0003      	movs	r3, r0
 8013dfa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013dfc:	4b3a      	ldr	r3, [pc, #232]	; (8013ee8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	015b      	lsls	r3, r3, #5
 8013e02:	0d1b      	lsrs	r3, r3, #20
 8013e04:	69fa      	ldr	r2, [r7, #28]
 8013e06:	4353      	muls	r3, r2
 8013e08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013e0a:	e058      	b.n	8013ebe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	d055      	beq.n	8013ebe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013e12:	f7fb fabf 	bl	800f394 <HAL_GetTick>
 8013e16:	0002      	movs	r2, r0
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	1ad3      	subs	r3, r2, r3
 8013e1c:	69fa      	ldr	r2, [r7, #28]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d902      	bls.n	8013e28 <SPI_WaitFlagStateUntilTimeout+0x54>
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d142      	bne.n	8013eae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	685a      	ldr	r2, [r3, #4]
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	21e0      	movs	r1, #224	; 0xe0
 8013e34:	438a      	bics	r2, r1
 8013e36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	685a      	ldr	r2, [r3, #4]
 8013e3c:	2382      	movs	r3, #130	; 0x82
 8013e3e:	005b      	lsls	r3, r3, #1
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d113      	bne.n	8013e6c <SPI_WaitFlagStateUntilTimeout+0x98>
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	689a      	ldr	r2, [r3, #8]
 8013e48:	2380      	movs	r3, #128	; 0x80
 8013e4a:	021b      	lsls	r3, r3, #8
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d005      	beq.n	8013e5c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	689a      	ldr	r2, [r3, #8]
 8013e54:	2380      	movs	r3, #128	; 0x80
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d107      	bne.n	8013e6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2140      	movs	r1, #64	; 0x40
 8013e68:	438a      	bics	r2, r1
 8013e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013e70:	2380      	movs	r3, #128	; 0x80
 8013e72:	019b      	lsls	r3, r3, #6
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d110      	bne.n	8013e9a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	491a      	ldr	r1, [pc, #104]	; (8013eec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8013e84:	400a      	ands	r2, r1
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2180      	movs	r1, #128	; 0x80
 8013e94:	0189      	lsls	r1, r1, #6
 8013e96:	430a      	orrs	r2, r1
 8013e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	225d      	movs	r2, #93	; 0x5d
 8013e9e:	2101      	movs	r1, #1
 8013ea0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	225c      	movs	r2, #92	; 0x5c
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8013eaa:	2303      	movs	r3, #3
 8013eac:	e017      	b.n	8013ede <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d101      	bne.n	8013eb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	3b01      	subs	r3, #1
 8013ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	689b      	ldr	r3, [r3, #8]
 8013ec4:	68ba      	ldr	r2, [r7, #8]
 8013ec6:	4013      	ands	r3, r2
 8013ec8:	68ba      	ldr	r2, [r7, #8]
 8013eca:	1ad3      	subs	r3, r2, r3
 8013ecc:	425a      	negs	r2, r3
 8013ece:	4153      	adcs	r3, r2
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	001a      	movs	r2, r3
 8013ed4:	1dfb      	adds	r3, r7, #7
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d197      	bne.n	8013e0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013edc:	2300      	movs	r3, #0
}
 8013ede:	0018      	movs	r0, r3
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	b008      	add	sp, #32
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	46c0      	nop			; (mov r8, r8)
 8013ee8:	20005028 	.word	0x20005028
 8013eec:	ffffdfff 	.word	0xffffdfff

08013ef0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b08a      	sub	sp, #40	; 0x28
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	60b9      	str	r1, [r7, #8]
 8013efa:	607a      	str	r2, [r7, #4]
 8013efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8013efe:	2317      	movs	r3, #23
 8013f00:	18fb      	adds	r3, r7, r3
 8013f02:	2200      	movs	r2, #0
 8013f04:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8013f06:	f7fb fa45 	bl	800f394 <HAL_GetTick>
 8013f0a:	0002      	movs	r2, r0
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	1a9b      	subs	r3, r3, r2
 8013f10:	683a      	ldr	r2, [r7, #0]
 8013f12:	18d3      	adds	r3, r2, r3
 8013f14:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8013f16:	f7fb fa3d 	bl	800f394 <HAL_GetTick>
 8013f1a:	0003      	movs	r3, r0
 8013f1c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	330c      	adds	r3, #12
 8013f24:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8013f26:	4b41      	ldr	r3, [pc, #260]	; (801402c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	0013      	movs	r3, r2
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	189b      	adds	r3, r3, r2
 8013f30:	00da      	lsls	r2, r3, #3
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	0d1b      	lsrs	r3, r3, #20
 8013f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f38:	4353      	muls	r3, r2
 8013f3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8013f3c:	e068      	b.n	8014010 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8013f3e:	68ba      	ldr	r2, [r7, #8]
 8013f40:	23c0      	movs	r3, #192	; 0xc0
 8013f42:	00db      	lsls	r3, r3, #3
 8013f44:	429a      	cmp	r2, r3
 8013f46:	d10a      	bne.n	8013f5e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d107      	bne.n	8013f5e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8013f4e:	69fb      	ldr	r3, [r7, #28]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	b2da      	uxtb	r2, r3
 8013f54:	2117      	movs	r1, #23
 8013f56:	187b      	adds	r3, r7, r1
 8013f58:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8013f5a:	187b      	adds	r3, r7, r1
 8013f5c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	3301      	adds	r3, #1
 8013f62:	d055      	beq.n	8014010 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013f64:	f7fb fa16 	bl	800f394 <HAL_GetTick>
 8013f68:	0002      	movs	r2, r0
 8013f6a:	6a3b      	ldr	r3, [r7, #32]
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f70:	429a      	cmp	r2, r3
 8013f72:	d902      	bls.n	8013f7a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8013f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d142      	bne.n	8014000 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	685a      	ldr	r2, [r3, #4]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	21e0      	movs	r1, #224	; 0xe0
 8013f86:	438a      	bics	r2, r1
 8013f88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	685a      	ldr	r2, [r3, #4]
 8013f8e:	2382      	movs	r3, #130	; 0x82
 8013f90:	005b      	lsls	r3, r3, #1
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d113      	bne.n	8013fbe <SPI_WaitFifoStateUntilTimeout+0xce>
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	689a      	ldr	r2, [r3, #8]
 8013f9a:	2380      	movs	r3, #128	; 0x80
 8013f9c:	021b      	lsls	r3, r3, #8
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d005      	beq.n	8013fae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	689a      	ldr	r2, [r3, #8]
 8013fa6:	2380      	movs	r3, #128	; 0x80
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d107      	bne.n	8013fbe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	681a      	ldr	r2, [r3, #0]
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2140      	movs	r1, #64	; 0x40
 8013fba:	438a      	bics	r2, r1
 8013fbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fc2:	2380      	movs	r3, #128	; 0x80
 8013fc4:	019b      	lsls	r3, r3, #6
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d110      	bne.n	8013fec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4916      	ldr	r1, [pc, #88]	; (8014030 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8013fd6:	400a      	ands	r2, r1
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2180      	movs	r1, #128	; 0x80
 8013fe6:	0189      	lsls	r1, r1, #6
 8013fe8:	430a      	orrs	r2, r1
 8013fea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	225d      	movs	r2, #93	; 0x5d
 8013ff0:	2101      	movs	r1, #1
 8013ff2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	225c      	movs	r2, #92	; 0x5c
 8013ff8:	2100      	movs	r1, #0
 8013ffa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8013ffc:	2303      	movs	r3, #3
 8013ffe:	e010      	b.n	8014022 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014000:	69bb      	ldr	r3, [r7, #24]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d101      	bne.n	801400a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8014006:	2300      	movs	r3, #0
 8014008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801400a:	69bb      	ldr	r3, [r7, #24]
 801400c:	3b01      	subs	r3, #1
 801400e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	689b      	ldr	r3, [r3, #8]
 8014016:	68ba      	ldr	r2, [r7, #8]
 8014018:	4013      	ands	r3, r2
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	429a      	cmp	r2, r3
 801401e:	d18e      	bne.n	8013f3e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8014020:	2300      	movs	r3, #0
}
 8014022:	0018      	movs	r0, r3
 8014024:	46bd      	mov	sp, r7
 8014026:	b00a      	add	sp, #40	; 0x28
 8014028:	bd80      	pop	{r7, pc}
 801402a:	46c0      	nop			; (mov r8, r8)
 801402c:	20005028 	.word	0x20005028
 8014030:	ffffdfff 	.word	0xffffdfff

08014034 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af02      	add	r7, sp, #8
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	685a      	ldr	r2, [r3, #4]
 8014044:	2382      	movs	r3, #130	; 0x82
 8014046:	005b      	lsls	r3, r3, #1
 8014048:	429a      	cmp	r2, r3
 801404a:	d113      	bne.n	8014074 <SPI_EndRxTransaction+0x40>
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	689a      	ldr	r2, [r3, #8]
 8014050:	2380      	movs	r3, #128	; 0x80
 8014052:	021b      	lsls	r3, r3, #8
 8014054:	429a      	cmp	r2, r3
 8014056:	d005      	beq.n	8014064 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	689a      	ldr	r2, [r3, #8]
 801405c:	2380      	movs	r3, #128	; 0x80
 801405e:	00db      	lsls	r3, r3, #3
 8014060:	429a      	cmp	r2, r3
 8014062:	d107      	bne.n	8014074 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2140      	movs	r1, #64	; 0x40
 8014070:	438a      	bics	r2, r1
 8014072:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014074:	68ba      	ldr	r2, [r7, #8]
 8014076:	68f8      	ldr	r0, [r7, #12]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	9300      	str	r3, [sp, #0]
 801407c:	0013      	movs	r3, r2
 801407e:	2200      	movs	r2, #0
 8014080:	2180      	movs	r1, #128	; 0x80
 8014082:	f7ff fea7 	bl	8013dd4 <SPI_WaitFlagStateUntilTimeout>
 8014086:	1e03      	subs	r3, r0, #0
 8014088:	d007      	beq.n	801409a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801408e:	2220      	movs	r2, #32
 8014090:	431a      	orrs	r2, r3
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014096:	2303      	movs	r3, #3
 8014098:	e026      	b.n	80140e8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	685a      	ldr	r2, [r3, #4]
 801409e:	2382      	movs	r3, #130	; 0x82
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d11f      	bne.n	80140e6 <SPI_EndRxTransaction+0xb2>
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	689a      	ldr	r2, [r3, #8]
 80140aa:	2380      	movs	r3, #128	; 0x80
 80140ac:	021b      	lsls	r3, r3, #8
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d005      	beq.n	80140be <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	689a      	ldr	r2, [r3, #8]
 80140b6:	2380      	movs	r3, #128	; 0x80
 80140b8:	00db      	lsls	r3, r3, #3
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d113      	bne.n	80140e6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80140be:	68ba      	ldr	r2, [r7, #8]
 80140c0:	23c0      	movs	r3, #192	; 0xc0
 80140c2:	00d9      	lsls	r1, r3, #3
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	9300      	str	r3, [sp, #0]
 80140ca:	0013      	movs	r3, r2
 80140cc:	2200      	movs	r2, #0
 80140ce:	f7ff ff0f 	bl	8013ef0 <SPI_WaitFifoStateUntilTimeout>
 80140d2:	1e03      	subs	r3, r0, #0
 80140d4:	d007      	beq.n	80140e6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80140da:	2220      	movs	r2, #32
 80140dc:	431a      	orrs	r2, r3
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80140e2:	2303      	movs	r3, #3
 80140e4:	e000      	b.n	80140e8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80140e6:	2300      	movs	r3, #0
}
 80140e8:	0018      	movs	r0, r3
 80140ea:	46bd      	mov	sp, r7
 80140ec:	b004      	add	sp, #16
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b086      	sub	sp, #24
 80140f4:	af02      	add	r7, sp, #8
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80140fc:	68ba      	ldr	r2, [r7, #8]
 80140fe:	23c0      	movs	r3, #192	; 0xc0
 8014100:	0159      	lsls	r1, r3, #5
 8014102:	68f8      	ldr	r0, [r7, #12]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	0013      	movs	r3, r2
 801410a:	2200      	movs	r2, #0
 801410c:	f7ff fef0 	bl	8013ef0 <SPI_WaitFifoStateUntilTimeout>
 8014110:	1e03      	subs	r3, r0, #0
 8014112:	d007      	beq.n	8014124 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014118:	2220      	movs	r2, #32
 801411a:	431a      	orrs	r2, r3
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014120:	2303      	movs	r3, #3
 8014122:	e027      	b.n	8014174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014124:	68ba      	ldr	r2, [r7, #8]
 8014126:	68f8      	ldr	r0, [r7, #12]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	9300      	str	r3, [sp, #0]
 801412c:	0013      	movs	r3, r2
 801412e:	2200      	movs	r2, #0
 8014130:	2180      	movs	r1, #128	; 0x80
 8014132:	f7ff fe4f 	bl	8013dd4 <SPI_WaitFlagStateUntilTimeout>
 8014136:	1e03      	subs	r3, r0, #0
 8014138:	d007      	beq.n	801414a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801413e:	2220      	movs	r2, #32
 8014140:	431a      	orrs	r2, r3
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014146:	2303      	movs	r3, #3
 8014148:	e014      	b.n	8014174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801414a:	68ba      	ldr	r2, [r7, #8]
 801414c:	23c0      	movs	r3, #192	; 0xc0
 801414e:	00d9      	lsls	r1, r3, #3
 8014150:	68f8      	ldr	r0, [r7, #12]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	9300      	str	r3, [sp, #0]
 8014156:	0013      	movs	r3, r2
 8014158:	2200      	movs	r2, #0
 801415a:	f7ff fec9 	bl	8013ef0 <SPI_WaitFifoStateUntilTimeout>
 801415e:	1e03      	subs	r3, r0, #0
 8014160:	d007      	beq.n	8014172 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014166:	2220      	movs	r2, #32
 8014168:	431a      	orrs	r2, r3
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801416e:	2303      	movs	r3, #3
 8014170:	e000      	b.n	8014174 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8014172:	2300      	movs	r3, #0
}
 8014174:	0018      	movs	r0, r3
 8014176:	46bd      	mov	sp, r7
 8014178:	b004      	add	sp, #16
 801417a:	bd80      	pop	{r7, pc}

0801417c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b082      	sub	sp, #8
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d101      	bne.n	801418e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801418a:	2301      	movs	r3, #1
 801418c:	e04a      	b.n	8014224 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	223d      	movs	r2, #61	; 0x3d
 8014192:	5c9b      	ldrb	r3, [r3, r2]
 8014194:	b2db      	uxtb	r3, r3
 8014196:	2b00      	cmp	r3, #0
 8014198:	d107      	bne.n	80141aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	223c      	movs	r2, #60	; 0x3c
 801419e:	2100      	movs	r1, #0
 80141a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	0018      	movs	r0, r3
 80141a6:	f7f8 fee1 	bl	800cf6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	223d      	movs	r2, #61	; 0x3d
 80141ae:	2102      	movs	r1, #2
 80141b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	3304      	adds	r3, #4
 80141ba:	0019      	movs	r1, r3
 80141bc:	0010      	movs	r0, r2
 80141be:	f000 fba9 	bl	8014914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2248      	movs	r2, #72	; 0x48
 80141c6:	2101      	movs	r1, #1
 80141c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	223e      	movs	r2, #62	; 0x3e
 80141ce:	2101      	movs	r1, #1
 80141d0:	5499      	strb	r1, [r3, r2]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	223f      	movs	r2, #63	; 0x3f
 80141d6:	2101      	movs	r1, #1
 80141d8:	5499      	strb	r1, [r3, r2]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2240      	movs	r2, #64	; 0x40
 80141de:	2101      	movs	r1, #1
 80141e0:	5499      	strb	r1, [r3, r2]
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2241      	movs	r2, #65	; 0x41
 80141e6:	2101      	movs	r1, #1
 80141e8:	5499      	strb	r1, [r3, r2]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2242      	movs	r2, #66	; 0x42
 80141ee:	2101      	movs	r1, #1
 80141f0:	5499      	strb	r1, [r3, r2]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2243      	movs	r2, #67	; 0x43
 80141f6:	2101      	movs	r1, #1
 80141f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2244      	movs	r2, #68	; 0x44
 80141fe:	2101      	movs	r1, #1
 8014200:	5499      	strb	r1, [r3, r2]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2245      	movs	r2, #69	; 0x45
 8014206:	2101      	movs	r1, #1
 8014208:	5499      	strb	r1, [r3, r2]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2246      	movs	r2, #70	; 0x46
 801420e:	2101      	movs	r1, #1
 8014210:	5499      	strb	r1, [r3, r2]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2247      	movs	r2, #71	; 0x47
 8014216:	2101      	movs	r1, #1
 8014218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	223d      	movs	r2, #61	; 0x3d
 801421e:	2101      	movs	r1, #1
 8014220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014222:	2300      	movs	r3, #0
}
 8014224:	0018      	movs	r0, r3
 8014226:	46bd      	mov	sp, r7
 8014228:	b002      	add	sp, #8
 801422a:	bd80      	pop	{r7, pc}

0801422c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	223d      	movs	r2, #61	; 0x3d
 8014238:	5c9b      	ldrb	r3, [r3, r2]
 801423a:	b2db      	uxtb	r3, r3
 801423c:	2b01      	cmp	r3, #1
 801423e:	d001      	beq.n	8014244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8014240:	2301      	movs	r3, #1
 8014242:	e039      	b.n	80142b8 <HAL_TIM_Base_Start+0x8c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	223d      	movs	r2, #61	; 0x3d
 8014248:	2102      	movs	r1, #2
 801424a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4a1b      	ldr	r2, [pc, #108]	; (80142c0 <HAL_TIM_Base_Start+0x94>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d00e      	beq.n	8014274 <HAL_TIM_Base_Start+0x48>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	4a1a      	ldr	r2, [pc, #104]	; (80142c4 <HAL_TIM_Base_Start+0x98>)
 801425c:	4293      	cmp	r3, r2
 801425e:	d009      	beq.n	8014274 <HAL_TIM_Base_Start+0x48>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a18      	ldr	r2, [pc, #96]	; (80142c8 <HAL_TIM_Base_Start+0x9c>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d004      	beq.n	8014274 <HAL_TIM_Base_Start+0x48>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4a17      	ldr	r2, [pc, #92]	; (80142cc <HAL_TIM_Base_Start+0xa0>)
 8014270:	4293      	cmp	r3, r2
 8014272:	d116      	bne.n	80142a2 <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	689b      	ldr	r3, [r3, #8]
 801427a:	4a15      	ldr	r2, [pc, #84]	; (80142d0 <HAL_TIM_Base_Start+0xa4>)
 801427c:	4013      	ands	r3, r2
 801427e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	2b06      	cmp	r3, #6
 8014284:	d016      	beq.n	80142b4 <HAL_TIM_Base_Start+0x88>
 8014286:	68fa      	ldr	r2, [r7, #12]
 8014288:	2380      	movs	r3, #128	; 0x80
 801428a:	025b      	lsls	r3, r3, #9
 801428c:	429a      	cmp	r2, r3
 801428e:	d011      	beq.n	80142b4 <HAL_TIM_Base_Start+0x88>
    {
      __HAL_TIM_ENABLE(htim);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	2101      	movs	r1, #1
 801429c:	430a      	orrs	r2, r1
 801429e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142a0:	e008      	b.n	80142b4 <HAL_TIM_Base_Start+0x88>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2101      	movs	r1, #1
 80142ae:	430a      	orrs	r2, r1
 80142b0:	601a      	str	r2, [r3, #0]
 80142b2:	e000      	b.n	80142b6 <HAL_TIM_Base_Start+0x8a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80142b6:	2300      	movs	r3, #0
}
 80142b8:	0018      	movs	r0, r3
 80142ba:	46bd      	mov	sp, r7
 80142bc:	b004      	add	sp, #16
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	40012c00 	.word	0x40012c00
 80142c4:	40000400 	.word	0x40000400
 80142c8:	40000800 	.word	0x40000800
 80142cc:	40014000 	.word	0x40014000
 80142d0:	00010007 	.word	0x00010007

080142d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d101      	bne.n	80142e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80142e2:	2301      	movs	r3, #1
 80142e4:	e04a      	b.n	801437c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	223d      	movs	r2, #61	; 0x3d
 80142ea:	5c9b      	ldrb	r3, [r3, r2]
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d107      	bne.n	8014302 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	223c      	movs	r2, #60	; 0x3c
 80142f6:	2100      	movs	r1, #0
 80142f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	0018      	movs	r0, r3
 80142fe:	f000 f841 	bl	8014384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	223d      	movs	r2, #61	; 0x3d
 8014306:	2102      	movs	r1, #2
 8014308:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681a      	ldr	r2, [r3, #0]
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	3304      	adds	r3, #4
 8014312:	0019      	movs	r1, r3
 8014314:	0010      	movs	r0, r2
 8014316:	f000 fafd 	bl	8014914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2248      	movs	r2, #72	; 0x48
 801431e:	2101      	movs	r1, #1
 8014320:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	223e      	movs	r2, #62	; 0x3e
 8014326:	2101      	movs	r1, #1
 8014328:	5499      	strb	r1, [r3, r2]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	223f      	movs	r2, #63	; 0x3f
 801432e:	2101      	movs	r1, #1
 8014330:	5499      	strb	r1, [r3, r2]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2240      	movs	r2, #64	; 0x40
 8014336:	2101      	movs	r1, #1
 8014338:	5499      	strb	r1, [r3, r2]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2241      	movs	r2, #65	; 0x41
 801433e:	2101      	movs	r1, #1
 8014340:	5499      	strb	r1, [r3, r2]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2242      	movs	r2, #66	; 0x42
 8014346:	2101      	movs	r1, #1
 8014348:	5499      	strb	r1, [r3, r2]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2243      	movs	r2, #67	; 0x43
 801434e:	2101      	movs	r1, #1
 8014350:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2244      	movs	r2, #68	; 0x44
 8014356:	2101      	movs	r1, #1
 8014358:	5499      	strb	r1, [r3, r2]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2245      	movs	r2, #69	; 0x45
 801435e:	2101      	movs	r1, #1
 8014360:	5499      	strb	r1, [r3, r2]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	2246      	movs	r2, #70	; 0x46
 8014366:	2101      	movs	r1, #1
 8014368:	5499      	strb	r1, [r3, r2]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2247      	movs	r2, #71	; 0x47
 801436e:	2101      	movs	r1, #1
 8014370:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	223d      	movs	r2, #61	; 0x3d
 8014376:	2101      	movs	r1, #1
 8014378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801437a:	2300      	movs	r3, #0
}
 801437c:	0018      	movs	r0, r3
 801437e:	46bd      	mov	sp, r7
 8014380:	b002      	add	sp, #8
 8014382:	bd80      	pop	{r7, pc}

08014384 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801438c:	46c0      	nop			; (mov r8, r8)
 801438e:	46bd      	mov	sp, r7
 8014390:	b002      	add	sp, #8
 8014392:	bd80      	pop	{r7, pc}

08014394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b084      	sub	sp, #16
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d108      	bne.n	80143b6 <HAL_TIM_PWM_Start+0x22>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	223e      	movs	r2, #62	; 0x3e
 80143a8:	5c9b      	ldrb	r3, [r3, r2]
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	3b01      	subs	r3, #1
 80143ae:	1e5a      	subs	r2, r3, #1
 80143b0:	4193      	sbcs	r3, r2
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	e037      	b.n	8014426 <HAL_TIM_PWM_Start+0x92>
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	2b04      	cmp	r3, #4
 80143ba:	d108      	bne.n	80143ce <HAL_TIM_PWM_Start+0x3a>
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	223f      	movs	r2, #63	; 0x3f
 80143c0:	5c9b      	ldrb	r3, [r3, r2]
 80143c2:	b2db      	uxtb	r3, r3
 80143c4:	3b01      	subs	r3, #1
 80143c6:	1e5a      	subs	r2, r3, #1
 80143c8:	4193      	sbcs	r3, r2
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	e02b      	b.n	8014426 <HAL_TIM_PWM_Start+0x92>
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	2b08      	cmp	r3, #8
 80143d2:	d108      	bne.n	80143e6 <HAL_TIM_PWM_Start+0x52>
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2240      	movs	r2, #64	; 0x40
 80143d8:	5c9b      	ldrb	r3, [r3, r2]
 80143da:	b2db      	uxtb	r3, r3
 80143dc:	3b01      	subs	r3, #1
 80143de:	1e5a      	subs	r2, r3, #1
 80143e0:	4193      	sbcs	r3, r2
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	e01f      	b.n	8014426 <HAL_TIM_PWM_Start+0x92>
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	2b0c      	cmp	r3, #12
 80143ea:	d108      	bne.n	80143fe <HAL_TIM_PWM_Start+0x6a>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2241      	movs	r2, #65	; 0x41
 80143f0:	5c9b      	ldrb	r3, [r3, r2]
 80143f2:	b2db      	uxtb	r3, r3
 80143f4:	3b01      	subs	r3, #1
 80143f6:	1e5a      	subs	r2, r3, #1
 80143f8:	4193      	sbcs	r3, r2
 80143fa:	b2db      	uxtb	r3, r3
 80143fc:	e013      	b.n	8014426 <HAL_TIM_PWM_Start+0x92>
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	2b10      	cmp	r3, #16
 8014402:	d108      	bne.n	8014416 <HAL_TIM_PWM_Start+0x82>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2242      	movs	r2, #66	; 0x42
 8014408:	5c9b      	ldrb	r3, [r3, r2]
 801440a:	b2db      	uxtb	r3, r3
 801440c:	3b01      	subs	r3, #1
 801440e:	1e5a      	subs	r2, r3, #1
 8014410:	4193      	sbcs	r3, r2
 8014412:	b2db      	uxtb	r3, r3
 8014414:	e007      	b.n	8014426 <HAL_TIM_PWM_Start+0x92>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2243      	movs	r2, #67	; 0x43
 801441a:	5c9b      	ldrb	r3, [r3, r2]
 801441c:	b2db      	uxtb	r3, r3
 801441e:	3b01      	subs	r3, #1
 8014420:	1e5a      	subs	r2, r3, #1
 8014422:	4193      	sbcs	r3, r2
 8014424:	b2db      	uxtb	r3, r3
 8014426:	2b00      	cmp	r3, #0
 8014428:	d001      	beq.n	801442e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 801442a:	2301      	movs	r3, #1
 801442c:	e08a      	b.n	8014544 <HAL_TIM_PWM_Start+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d104      	bne.n	801443e <HAL_TIM_PWM_Start+0xaa>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	223e      	movs	r2, #62	; 0x3e
 8014438:	2102      	movs	r1, #2
 801443a:	5499      	strb	r1, [r3, r2]
 801443c:	e023      	b.n	8014486 <HAL_TIM_PWM_Start+0xf2>
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	2b04      	cmp	r3, #4
 8014442:	d104      	bne.n	801444e <HAL_TIM_PWM_Start+0xba>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	223f      	movs	r2, #63	; 0x3f
 8014448:	2102      	movs	r1, #2
 801444a:	5499      	strb	r1, [r3, r2]
 801444c:	e01b      	b.n	8014486 <HAL_TIM_PWM_Start+0xf2>
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	2b08      	cmp	r3, #8
 8014452:	d104      	bne.n	801445e <HAL_TIM_PWM_Start+0xca>
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2240      	movs	r2, #64	; 0x40
 8014458:	2102      	movs	r1, #2
 801445a:	5499      	strb	r1, [r3, r2]
 801445c:	e013      	b.n	8014486 <HAL_TIM_PWM_Start+0xf2>
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	2b0c      	cmp	r3, #12
 8014462:	d104      	bne.n	801446e <HAL_TIM_PWM_Start+0xda>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2241      	movs	r2, #65	; 0x41
 8014468:	2102      	movs	r1, #2
 801446a:	5499      	strb	r1, [r3, r2]
 801446c:	e00b      	b.n	8014486 <HAL_TIM_PWM_Start+0xf2>
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	2b10      	cmp	r3, #16
 8014472:	d104      	bne.n	801447e <HAL_TIM_PWM_Start+0xea>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2242      	movs	r2, #66	; 0x42
 8014478:	2102      	movs	r1, #2
 801447a:	5499      	strb	r1, [r3, r2]
 801447c:	e003      	b.n	8014486 <HAL_TIM_PWM_Start+0xf2>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2243      	movs	r2, #67	; 0x43
 8014482:	2102      	movs	r1, #2
 8014484:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	6839      	ldr	r1, [r7, #0]
 801448c:	2201      	movs	r2, #1
 801448e:	0018      	movs	r0, r3
 8014490:	f000 fe2e 	bl	80150f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	4a2c      	ldr	r2, [pc, #176]	; (801454c <HAL_TIM_PWM_Start+0x1b8>)
 801449a:	4293      	cmp	r3, r2
 801449c:	d00e      	beq.n	80144bc <HAL_TIM_PWM_Start+0x128>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	4a2b      	ldr	r2, [pc, #172]	; (8014550 <HAL_TIM_PWM_Start+0x1bc>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d009      	beq.n	80144bc <HAL_TIM_PWM_Start+0x128>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	4a29      	ldr	r2, [pc, #164]	; (8014554 <HAL_TIM_PWM_Start+0x1c0>)
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d004      	beq.n	80144bc <HAL_TIM_PWM_Start+0x128>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	4a28      	ldr	r2, [pc, #160]	; (8014558 <HAL_TIM_PWM_Start+0x1c4>)
 80144b8:	4293      	cmp	r3, r2
 80144ba:	d101      	bne.n	80144c0 <HAL_TIM_PWM_Start+0x12c>
 80144bc:	2301      	movs	r3, #1
 80144be:	e000      	b.n	80144c2 <HAL_TIM_PWM_Start+0x12e>
 80144c0:	2300      	movs	r3, #0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d008      	beq.n	80144d8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2180      	movs	r1, #128	; 0x80
 80144d2:	0209      	lsls	r1, r1, #8
 80144d4:	430a      	orrs	r2, r1
 80144d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	4a1b      	ldr	r2, [pc, #108]	; (801454c <HAL_TIM_PWM_Start+0x1b8>)
 80144de:	4293      	cmp	r3, r2
 80144e0:	d00e      	beq.n	8014500 <HAL_TIM_PWM_Start+0x16c>
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	4a1d      	ldr	r2, [pc, #116]	; (801455c <HAL_TIM_PWM_Start+0x1c8>)
 80144e8:	4293      	cmp	r3, r2
 80144ea:	d009      	beq.n	8014500 <HAL_TIM_PWM_Start+0x16c>
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	4a1b      	ldr	r2, [pc, #108]	; (8014560 <HAL_TIM_PWM_Start+0x1cc>)
 80144f2:	4293      	cmp	r3, r2
 80144f4:	d004      	beq.n	8014500 <HAL_TIM_PWM_Start+0x16c>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	4a15      	ldr	r2, [pc, #84]	; (8014550 <HAL_TIM_PWM_Start+0x1bc>)
 80144fc:	4293      	cmp	r3, r2
 80144fe:	d116      	bne.n	801452e <HAL_TIM_PWM_Start+0x19a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	689b      	ldr	r3, [r3, #8]
 8014506:	4a17      	ldr	r2, [pc, #92]	; (8014564 <HAL_TIM_PWM_Start+0x1d0>)
 8014508:	4013      	ands	r3, r2
 801450a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2b06      	cmp	r3, #6
 8014510:	d016      	beq.n	8014540 <HAL_TIM_PWM_Start+0x1ac>
 8014512:	68fa      	ldr	r2, [r7, #12]
 8014514:	2380      	movs	r3, #128	; 0x80
 8014516:	025b      	lsls	r3, r3, #9
 8014518:	429a      	cmp	r2, r3
 801451a:	d011      	beq.n	8014540 <HAL_TIM_PWM_Start+0x1ac>
    {
      __HAL_TIM_ENABLE(htim);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	681a      	ldr	r2, [r3, #0]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	2101      	movs	r1, #1
 8014528:	430a      	orrs	r2, r1
 801452a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801452c:	e008      	b.n	8014540 <HAL_TIM_PWM_Start+0x1ac>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	681a      	ldr	r2, [r3, #0]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	2101      	movs	r1, #1
 801453a:	430a      	orrs	r2, r1
 801453c:	601a      	str	r2, [r3, #0]
 801453e:	e000      	b.n	8014542 <HAL_TIM_PWM_Start+0x1ae>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014540:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8014542:	2300      	movs	r3, #0
}
 8014544:	0018      	movs	r0, r3
 8014546:	46bd      	mov	sp, r7
 8014548:	b004      	add	sp, #16
 801454a:	bd80      	pop	{r7, pc}
 801454c:	40012c00 	.word	0x40012c00
 8014550:	40014000 	.word	0x40014000
 8014554:	40014400 	.word	0x40014400
 8014558:	40014800 	.word	0x40014800
 801455c:	40000400 	.word	0x40000400
 8014560:	40000800 	.word	0x40000800
 8014564:	00010007 	.word	0x00010007

08014568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b086      	sub	sp, #24
 801456c:	af00      	add	r7, sp, #0
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014574:	2317      	movs	r3, #23
 8014576:	18fb      	adds	r3, r7, r3
 8014578:	2200      	movs	r2, #0
 801457a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	223c      	movs	r2, #60	; 0x3c
 8014580:	5c9b      	ldrb	r3, [r3, r2]
 8014582:	2b01      	cmp	r3, #1
 8014584:	d101      	bne.n	801458a <HAL_TIM_PWM_ConfigChannel+0x22>
 8014586:	2302      	movs	r3, #2
 8014588:	e0e5      	b.n	8014756 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	223c      	movs	r2, #60	; 0x3c
 801458e:	2101      	movs	r1, #1
 8014590:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2b14      	cmp	r3, #20
 8014596:	d900      	bls.n	801459a <HAL_TIM_PWM_ConfigChannel+0x32>
 8014598:	e0d1      	b.n	801473e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	009a      	lsls	r2, r3, #2
 801459e:	4b70      	ldr	r3, [pc, #448]	; (8014760 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80145a0:	18d3      	adds	r3, r2, r3
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	68ba      	ldr	r2, [r7, #8]
 80145ac:	0011      	movs	r1, r2
 80145ae:	0018      	movs	r0, r3
 80145b0:	f000 fa3e 	bl	8014a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	699a      	ldr	r2, [r3, #24]
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2108      	movs	r1, #8
 80145c0:	430a      	orrs	r2, r1
 80145c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	699a      	ldr	r2, [r3, #24]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	2104      	movs	r1, #4
 80145d0:	438a      	bics	r2, r1
 80145d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	6999      	ldr	r1, [r3, #24]
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	691a      	ldr	r2, [r3, #16]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	430a      	orrs	r2, r1
 80145e4:	619a      	str	r2, [r3, #24]
      break;
 80145e6:	e0af      	b.n	8014748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	0011      	movs	r1, r2
 80145f0:	0018      	movs	r0, r3
 80145f2:	f000 faa7 	bl	8014b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	699a      	ldr	r2, [r3, #24]
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2180      	movs	r1, #128	; 0x80
 8014602:	0109      	lsls	r1, r1, #4
 8014604:	430a      	orrs	r2, r1
 8014606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	699a      	ldr	r2, [r3, #24]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	4954      	ldr	r1, [pc, #336]	; (8014764 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8014614:	400a      	ands	r2, r1
 8014616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	6999      	ldr	r1, [r3, #24]
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	691b      	ldr	r3, [r3, #16]
 8014622:	021a      	lsls	r2, r3, #8
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	430a      	orrs	r2, r1
 801462a:	619a      	str	r2, [r3, #24]
      break;
 801462c:	e08c      	b.n	8014748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	68ba      	ldr	r2, [r7, #8]
 8014634:	0011      	movs	r1, r2
 8014636:	0018      	movs	r0, r3
 8014638:	f000 fb08 	bl	8014c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	69da      	ldr	r2, [r3, #28]
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2108      	movs	r1, #8
 8014648:	430a      	orrs	r2, r1
 801464a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	69da      	ldr	r2, [r3, #28]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2104      	movs	r1, #4
 8014658:	438a      	bics	r2, r1
 801465a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	69d9      	ldr	r1, [r3, #28]
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	691a      	ldr	r2, [r3, #16]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	430a      	orrs	r2, r1
 801466c:	61da      	str	r2, [r3, #28]
      break;
 801466e:	e06b      	b.n	8014748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	68ba      	ldr	r2, [r7, #8]
 8014676:	0011      	movs	r1, r2
 8014678:	0018      	movs	r0, r3
 801467a:	f000 fb6f 	bl	8014d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	69da      	ldr	r2, [r3, #28]
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	2180      	movs	r1, #128	; 0x80
 801468a:	0109      	lsls	r1, r1, #4
 801468c:	430a      	orrs	r2, r1
 801468e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	69da      	ldr	r2, [r3, #28]
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	4932      	ldr	r1, [pc, #200]	; (8014764 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 801469c:	400a      	ands	r2, r1
 801469e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	69d9      	ldr	r1, [r3, #28]
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	021a      	lsls	r2, r3, #8
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	430a      	orrs	r2, r1
 80146b2:	61da      	str	r2, [r3, #28]
      break;
 80146b4:	e048      	b.n	8014748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	68ba      	ldr	r2, [r7, #8]
 80146bc:	0011      	movs	r1, r2
 80146be:	0018      	movs	r0, r3
 80146c0:	f000 fbb6 	bl	8014e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	2108      	movs	r1, #8
 80146d0:	430a      	orrs	r2, r1
 80146d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2104      	movs	r1, #4
 80146e0:	438a      	bics	r2, r1
 80146e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	691a      	ldr	r2, [r3, #16]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	430a      	orrs	r2, r1
 80146f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80146f6:	e027      	b.n	8014748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	0011      	movs	r1, r2
 8014700:	0018      	movs	r0, r3
 8014702:	f000 fbf5 	bl	8014ef0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	2180      	movs	r1, #128	; 0x80
 8014712:	0109      	lsls	r1, r1, #4
 8014714:	430a      	orrs	r2, r1
 8014716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	4910      	ldr	r1, [pc, #64]	; (8014764 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8014724:	400a      	ands	r2, r1
 8014726:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	691b      	ldr	r3, [r3, #16]
 8014732:	021a      	lsls	r2, r3, #8
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	430a      	orrs	r2, r1
 801473a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801473c:	e004      	b.n	8014748 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 801473e:	2317      	movs	r3, #23
 8014740:	18fb      	adds	r3, r7, r3
 8014742:	2201      	movs	r2, #1
 8014744:	701a      	strb	r2, [r3, #0]
      break;
 8014746:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	223c      	movs	r2, #60	; 0x3c
 801474c:	2100      	movs	r1, #0
 801474e:	5499      	strb	r1, [r3, r2]

  return status;
 8014750:	2317      	movs	r3, #23
 8014752:	18fb      	adds	r3, r7, r3
 8014754:	781b      	ldrb	r3, [r3, #0]
}
 8014756:	0018      	movs	r0, r3
 8014758:	46bd      	mov	sp, r7
 801475a:	b006      	add	sp, #24
 801475c:	bd80      	pop	{r7, pc}
 801475e:	46c0      	nop			; (mov r8, r8)
 8014760:	08031ce4 	.word	0x08031ce4
 8014764:	fffffbff 	.word	0xfffffbff

08014768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b084      	sub	sp, #16
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
 8014770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014772:	230f      	movs	r3, #15
 8014774:	18fb      	adds	r3, r7, r3
 8014776:	2200      	movs	r2, #0
 8014778:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	223c      	movs	r2, #60	; 0x3c
 801477e:	5c9b      	ldrb	r3, [r3, r2]
 8014780:	2b01      	cmp	r3, #1
 8014782:	d101      	bne.n	8014788 <HAL_TIM_ConfigClockSource+0x20>
 8014784:	2302      	movs	r3, #2
 8014786:	e0bc      	b.n	8014902 <HAL_TIM_ConfigClockSource+0x19a>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	223c      	movs	r2, #60	; 0x3c
 801478c:	2101      	movs	r1, #1
 801478e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	223d      	movs	r2, #61	; 0x3d
 8014794:	2102      	movs	r1, #2
 8014796:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	4a5a      	ldr	r2, [pc, #360]	; (801490c <HAL_TIM_ConfigClockSource+0x1a4>)
 80147a4:	4013      	ands	r3, r2
 80147a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	4a59      	ldr	r2, [pc, #356]	; (8014910 <HAL_TIM_ConfigClockSource+0x1a8>)
 80147ac:	4013      	ands	r3, r2
 80147ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	68ba      	ldr	r2, [r7, #8]
 80147b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2280      	movs	r2, #128	; 0x80
 80147be:	0192      	lsls	r2, r2, #6
 80147c0:	4293      	cmp	r3, r2
 80147c2:	d040      	beq.n	8014846 <HAL_TIM_ConfigClockSource+0xde>
 80147c4:	2280      	movs	r2, #128	; 0x80
 80147c6:	0192      	lsls	r2, r2, #6
 80147c8:	4293      	cmp	r3, r2
 80147ca:	d900      	bls.n	80147ce <HAL_TIM_ConfigClockSource+0x66>
 80147cc:	e088      	b.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 80147ce:	2280      	movs	r2, #128	; 0x80
 80147d0:	0152      	lsls	r2, r2, #5
 80147d2:	4293      	cmp	r3, r2
 80147d4:	d100      	bne.n	80147d8 <HAL_TIM_ConfigClockSource+0x70>
 80147d6:	e088      	b.n	80148ea <HAL_TIM_ConfigClockSource+0x182>
 80147d8:	2280      	movs	r2, #128	; 0x80
 80147da:	0152      	lsls	r2, r2, #5
 80147dc:	4293      	cmp	r3, r2
 80147de:	d900      	bls.n	80147e2 <HAL_TIM_ConfigClockSource+0x7a>
 80147e0:	e07e      	b.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 80147e2:	2b70      	cmp	r3, #112	; 0x70
 80147e4:	d018      	beq.n	8014818 <HAL_TIM_ConfigClockSource+0xb0>
 80147e6:	d900      	bls.n	80147ea <HAL_TIM_ConfigClockSource+0x82>
 80147e8:	e07a      	b.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 80147ea:	2b60      	cmp	r3, #96	; 0x60
 80147ec:	d04f      	beq.n	801488e <HAL_TIM_ConfigClockSource+0x126>
 80147ee:	d900      	bls.n	80147f2 <HAL_TIM_ConfigClockSource+0x8a>
 80147f0:	e076      	b.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 80147f2:	2b50      	cmp	r3, #80	; 0x50
 80147f4:	d03b      	beq.n	801486e <HAL_TIM_ConfigClockSource+0x106>
 80147f6:	d900      	bls.n	80147fa <HAL_TIM_ConfigClockSource+0x92>
 80147f8:	e072      	b.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 80147fa:	2b40      	cmp	r3, #64	; 0x40
 80147fc:	d057      	beq.n	80148ae <HAL_TIM_ConfigClockSource+0x146>
 80147fe:	d900      	bls.n	8014802 <HAL_TIM_ConfigClockSource+0x9a>
 8014800:	e06e      	b.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 8014802:	2b30      	cmp	r3, #48	; 0x30
 8014804:	d063      	beq.n	80148ce <HAL_TIM_ConfigClockSource+0x166>
 8014806:	d86b      	bhi.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 8014808:	2b20      	cmp	r3, #32
 801480a:	d060      	beq.n	80148ce <HAL_TIM_ConfigClockSource+0x166>
 801480c:	d868      	bhi.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
 801480e:	2b00      	cmp	r3, #0
 8014810:	d05d      	beq.n	80148ce <HAL_TIM_ConfigClockSource+0x166>
 8014812:	2b10      	cmp	r3, #16
 8014814:	d05b      	beq.n	80148ce <HAL_TIM_ConfigClockSource+0x166>
 8014816:	e063      	b.n	80148e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014828:	f000 fc42 	bl	80150b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	689b      	ldr	r3, [r3, #8]
 8014832:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	2277      	movs	r2, #119	; 0x77
 8014838:	4313      	orrs	r3, r2
 801483a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	68ba      	ldr	r2, [r7, #8]
 8014842:	609a      	str	r2, [r3, #8]
      break;
 8014844:	e052      	b.n	80148ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014856:	f000 fc2b 	bl	80150b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	689a      	ldr	r2, [r3, #8]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	2180      	movs	r1, #128	; 0x80
 8014866:	01c9      	lsls	r1, r1, #7
 8014868:	430a      	orrs	r2, r1
 801486a:	609a      	str	r2, [r3, #8]
      break;
 801486c:	e03e      	b.n	80148ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801487a:	001a      	movs	r2, r3
 801487c:	f000 fb9c 	bl	8014fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2150      	movs	r1, #80	; 0x50
 8014886:	0018      	movs	r0, r3
 8014888:	f000 fbf6 	bl	8015078 <TIM_ITRx_SetConfig>
      break;
 801488c:	e02e      	b.n	80148ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801489a:	001a      	movs	r2, r3
 801489c:	f000 fbba 	bl	8015014 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	2160      	movs	r1, #96	; 0x60
 80148a6:	0018      	movs	r0, r3
 80148a8:	f000 fbe6 	bl	8015078 <TIM_ITRx_SetConfig>
      break;
 80148ac:	e01e      	b.n	80148ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80148ba:	001a      	movs	r2, r3
 80148bc:	f000 fb7c 	bl	8014fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	2140      	movs	r1, #64	; 0x40
 80148c6:	0018      	movs	r0, r3
 80148c8:	f000 fbd6 	bl	8015078 <TIM_ITRx_SetConfig>
      break;
 80148cc:	e00e      	b.n	80148ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	0019      	movs	r1, r3
 80148d8:	0010      	movs	r0, r2
 80148da:	f000 fbcd 	bl	8015078 <TIM_ITRx_SetConfig>
      break;
 80148de:	e005      	b.n	80148ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80148e0:	230f      	movs	r3, #15
 80148e2:	18fb      	adds	r3, r7, r3
 80148e4:	2201      	movs	r2, #1
 80148e6:	701a      	strb	r2, [r3, #0]
      break;
 80148e8:	e000      	b.n	80148ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80148ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	223d      	movs	r2, #61	; 0x3d
 80148f0:	2101      	movs	r1, #1
 80148f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	223c      	movs	r2, #60	; 0x3c
 80148f8:	2100      	movs	r1, #0
 80148fa:	5499      	strb	r1, [r3, r2]

  return status;
 80148fc:	230f      	movs	r3, #15
 80148fe:	18fb      	adds	r3, r7, r3
 8014900:	781b      	ldrb	r3, [r3, #0]
}
 8014902:	0018      	movs	r0, r3
 8014904:	46bd      	mov	sp, r7
 8014906:	b004      	add	sp, #16
 8014908:	bd80      	pop	{r7, pc}
 801490a:	46c0      	nop			; (mov r8, r8)
 801490c:	ffceff88 	.word	0xffceff88
 8014910:	ffff00ff 	.word	0xffff00ff

08014914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b084      	sub	sp, #16
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
 801491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	4a3a      	ldr	r2, [pc, #232]	; (8014a10 <TIM_Base_SetConfig+0xfc>)
 8014928:	4293      	cmp	r3, r2
 801492a:	d007      	beq.n	801493c <TIM_Base_SetConfig+0x28>
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	4a39      	ldr	r2, [pc, #228]	; (8014a14 <TIM_Base_SetConfig+0x100>)
 8014930:	4293      	cmp	r3, r2
 8014932:	d003      	beq.n	801493c <TIM_Base_SetConfig+0x28>
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	4a38      	ldr	r2, [pc, #224]	; (8014a18 <TIM_Base_SetConfig+0x104>)
 8014938:	4293      	cmp	r3, r2
 801493a:	d108      	bne.n	801494e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2270      	movs	r2, #112	; 0x70
 8014940:	4393      	bics	r3, r2
 8014942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	68fa      	ldr	r2, [r7, #12]
 801494a:	4313      	orrs	r3, r2
 801494c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	4a2f      	ldr	r2, [pc, #188]	; (8014a10 <TIM_Base_SetConfig+0xfc>)
 8014952:	4293      	cmp	r3, r2
 8014954:	d017      	beq.n	8014986 <TIM_Base_SetConfig+0x72>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4a2e      	ldr	r2, [pc, #184]	; (8014a14 <TIM_Base_SetConfig+0x100>)
 801495a:	4293      	cmp	r3, r2
 801495c:	d013      	beq.n	8014986 <TIM_Base_SetConfig+0x72>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	4a2d      	ldr	r2, [pc, #180]	; (8014a18 <TIM_Base_SetConfig+0x104>)
 8014962:	4293      	cmp	r3, r2
 8014964:	d00f      	beq.n	8014986 <TIM_Base_SetConfig+0x72>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4a2c      	ldr	r2, [pc, #176]	; (8014a1c <TIM_Base_SetConfig+0x108>)
 801496a:	4293      	cmp	r3, r2
 801496c:	d00b      	beq.n	8014986 <TIM_Base_SetConfig+0x72>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	4a2b      	ldr	r2, [pc, #172]	; (8014a20 <TIM_Base_SetConfig+0x10c>)
 8014972:	4293      	cmp	r3, r2
 8014974:	d007      	beq.n	8014986 <TIM_Base_SetConfig+0x72>
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	4a2a      	ldr	r2, [pc, #168]	; (8014a24 <TIM_Base_SetConfig+0x110>)
 801497a:	4293      	cmp	r3, r2
 801497c:	d003      	beq.n	8014986 <TIM_Base_SetConfig+0x72>
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	4a29      	ldr	r2, [pc, #164]	; (8014a28 <TIM_Base_SetConfig+0x114>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d108      	bne.n	8014998 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	4a28      	ldr	r2, [pc, #160]	; (8014a2c <TIM_Base_SetConfig+0x118>)
 801498a:	4013      	ands	r3, r2
 801498c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	68db      	ldr	r3, [r3, #12]
 8014992:	68fa      	ldr	r2, [r7, #12]
 8014994:	4313      	orrs	r3, r2
 8014996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	2280      	movs	r2, #128	; 0x80
 801499c:	4393      	bics	r3, r2
 801499e:	001a      	movs	r2, r3
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	695b      	ldr	r3, [r3, #20]
 80149a4:	4313      	orrs	r3, r2
 80149a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	68fa      	ldr	r2, [r7, #12]
 80149ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	689a      	ldr	r2, [r3, #8]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	681a      	ldr	r2, [r3, #0]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	4a13      	ldr	r2, [pc, #76]	; (8014a10 <TIM_Base_SetConfig+0xfc>)
 80149c2:	4293      	cmp	r3, r2
 80149c4:	d00b      	beq.n	80149de <TIM_Base_SetConfig+0xca>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	4a15      	ldr	r2, [pc, #84]	; (8014a20 <TIM_Base_SetConfig+0x10c>)
 80149ca:	4293      	cmp	r3, r2
 80149cc:	d007      	beq.n	80149de <TIM_Base_SetConfig+0xca>
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	4a14      	ldr	r2, [pc, #80]	; (8014a24 <TIM_Base_SetConfig+0x110>)
 80149d2:	4293      	cmp	r3, r2
 80149d4:	d003      	beq.n	80149de <TIM_Base_SetConfig+0xca>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	4a13      	ldr	r2, [pc, #76]	; (8014a28 <TIM_Base_SetConfig+0x114>)
 80149da:	4293      	cmp	r3, r2
 80149dc:	d103      	bne.n	80149e6 <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	691a      	ldr	r2, [r3, #16]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2201      	movs	r2, #1
 80149ea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	691b      	ldr	r3, [r3, #16]
 80149f0:	2201      	movs	r2, #1
 80149f2:	4013      	ands	r3, r2
 80149f4:	2b01      	cmp	r3, #1
 80149f6:	d106      	bne.n	8014a06 <TIM_Base_SetConfig+0xf2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	691b      	ldr	r3, [r3, #16]
 80149fc:	2201      	movs	r2, #1
 80149fe:	4393      	bics	r3, r2
 8014a00:	001a      	movs	r2, r3
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	611a      	str	r2, [r3, #16]
  }
}
 8014a06:	46c0      	nop			; (mov r8, r8)
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	b004      	add	sp, #16
 8014a0c:	bd80      	pop	{r7, pc}
 8014a0e:	46c0      	nop			; (mov r8, r8)
 8014a10:	40012c00 	.word	0x40012c00
 8014a14:	40000400 	.word	0x40000400
 8014a18:	40000800 	.word	0x40000800
 8014a1c:	40002000 	.word	0x40002000
 8014a20:	40014000 	.word	0x40014000
 8014a24:	40014400 	.word	0x40014400
 8014a28:	40014800 	.word	0x40014800
 8014a2c:	fffffcff 	.word	0xfffffcff

08014a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b086      	sub	sp, #24
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6a1b      	ldr	r3, [r3, #32]
 8014a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6a1b      	ldr	r3, [r3, #32]
 8014a44:	2201      	movs	r2, #1
 8014a46:	4393      	bics	r3, r2
 8014a48:	001a      	movs	r2, r3
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	699b      	ldr	r3, [r3, #24]
 8014a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	4a32      	ldr	r2, [pc, #200]	; (8014b28 <TIM_OC1_SetConfig+0xf8>)
 8014a5e:	4013      	ands	r3, r2
 8014a60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	2203      	movs	r2, #3
 8014a66:	4393      	bics	r3, r2
 8014a68:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	68fa      	ldr	r2, [r7, #12]
 8014a70:	4313      	orrs	r3, r2
 8014a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	2202      	movs	r2, #2
 8014a78:	4393      	bics	r3, r2
 8014a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	689b      	ldr	r3, [r3, #8]
 8014a80:	697a      	ldr	r2, [r7, #20]
 8014a82:	4313      	orrs	r3, r2
 8014a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4a28      	ldr	r2, [pc, #160]	; (8014b2c <TIM_OC1_SetConfig+0xfc>)
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d00b      	beq.n	8014aa6 <TIM_OC1_SetConfig+0x76>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	4a27      	ldr	r2, [pc, #156]	; (8014b30 <TIM_OC1_SetConfig+0x100>)
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d007      	beq.n	8014aa6 <TIM_OC1_SetConfig+0x76>
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	4a26      	ldr	r2, [pc, #152]	; (8014b34 <TIM_OC1_SetConfig+0x104>)
 8014a9a:	4293      	cmp	r3, r2
 8014a9c:	d003      	beq.n	8014aa6 <TIM_OC1_SetConfig+0x76>
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	4a25      	ldr	r2, [pc, #148]	; (8014b38 <TIM_OC1_SetConfig+0x108>)
 8014aa2:	4293      	cmp	r3, r2
 8014aa4:	d10c      	bne.n	8014ac0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	2208      	movs	r2, #8
 8014aaa:	4393      	bics	r3, r2
 8014aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	697a      	ldr	r2, [r7, #20]
 8014ab4:	4313      	orrs	r3, r2
 8014ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	2204      	movs	r2, #4
 8014abc:	4393      	bics	r3, r2
 8014abe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4a1a      	ldr	r2, [pc, #104]	; (8014b2c <TIM_OC1_SetConfig+0xfc>)
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d00b      	beq.n	8014ae0 <TIM_OC1_SetConfig+0xb0>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	4a19      	ldr	r2, [pc, #100]	; (8014b30 <TIM_OC1_SetConfig+0x100>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d007      	beq.n	8014ae0 <TIM_OC1_SetConfig+0xb0>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	4a18      	ldr	r2, [pc, #96]	; (8014b34 <TIM_OC1_SetConfig+0x104>)
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	d003      	beq.n	8014ae0 <TIM_OC1_SetConfig+0xb0>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	4a17      	ldr	r2, [pc, #92]	; (8014b38 <TIM_OC1_SetConfig+0x108>)
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d111      	bne.n	8014b04 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	4a16      	ldr	r2, [pc, #88]	; (8014b3c <TIM_OC1_SetConfig+0x10c>)
 8014ae4:	4013      	ands	r3, r2
 8014ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014ae8:	693b      	ldr	r3, [r7, #16]
 8014aea:	4a15      	ldr	r2, [pc, #84]	; (8014b40 <TIM_OC1_SetConfig+0x110>)
 8014aec:	4013      	ands	r3, r2
 8014aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	695b      	ldr	r3, [r3, #20]
 8014af4:	693a      	ldr	r2, [r7, #16]
 8014af6:	4313      	orrs	r3, r2
 8014af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	699b      	ldr	r3, [r3, #24]
 8014afe:	693a      	ldr	r2, [r7, #16]
 8014b00:	4313      	orrs	r3, r2
 8014b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	693a      	ldr	r2, [r7, #16]
 8014b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	68fa      	ldr	r2, [r7, #12]
 8014b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	685a      	ldr	r2, [r3, #4]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	697a      	ldr	r2, [r7, #20]
 8014b1c:	621a      	str	r2, [r3, #32]
}
 8014b1e:	46c0      	nop			; (mov r8, r8)
 8014b20:	46bd      	mov	sp, r7
 8014b22:	b006      	add	sp, #24
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	46c0      	nop			; (mov r8, r8)
 8014b28:	fffeff8f 	.word	0xfffeff8f
 8014b2c:	40012c00 	.word	0x40012c00
 8014b30:	40014000 	.word	0x40014000
 8014b34:	40014400 	.word	0x40014400
 8014b38:	40014800 	.word	0x40014800
 8014b3c:	fffffeff 	.word	0xfffffeff
 8014b40:	fffffdff 	.word	0xfffffdff

08014b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b086      	sub	sp, #24
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6a1b      	ldr	r3, [r3, #32]
 8014b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6a1b      	ldr	r3, [r3, #32]
 8014b58:	2210      	movs	r2, #16
 8014b5a:	4393      	bics	r3, r2
 8014b5c:	001a      	movs	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	685b      	ldr	r3, [r3, #4]
 8014b66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	699b      	ldr	r3, [r3, #24]
 8014b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	4a2e      	ldr	r2, [pc, #184]	; (8014c2c <TIM_OC2_SetConfig+0xe8>)
 8014b72:	4013      	ands	r3, r2
 8014b74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	4a2d      	ldr	r2, [pc, #180]	; (8014c30 <TIM_OC2_SetConfig+0xec>)
 8014b7a:	4013      	ands	r3, r2
 8014b7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	021b      	lsls	r3, r3, #8
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	4313      	orrs	r3, r2
 8014b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014b8a:	697b      	ldr	r3, [r7, #20]
 8014b8c:	2220      	movs	r2, #32
 8014b8e:	4393      	bics	r3, r2
 8014b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	689b      	ldr	r3, [r3, #8]
 8014b96:	011b      	lsls	r3, r3, #4
 8014b98:	697a      	ldr	r2, [r7, #20]
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4a24      	ldr	r2, [pc, #144]	; (8014c34 <TIM_OC2_SetConfig+0xf0>)
 8014ba2:	4293      	cmp	r3, r2
 8014ba4:	d10d      	bne.n	8014bc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	2280      	movs	r2, #128	; 0x80
 8014baa:	4393      	bics	r3, r2
 8014bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	68db      	ldr	r3, [r3, #12]
 8014bb2:	011b      	lsls	r3, r3, #4
 8014bb4:	697a      	ldr	r2, [r7, #20]
 8014bb6:	4313      	orrs	r3, r2
 8014bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	2240      	movs	r2, #64	; 0x40
 8014bbe:	4393      	bics	r3, r2
 8014bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	4a1b      	ldr	r2, [pc, #108]	; (8014c34 <TIM_OC2_SetConfig+0xf0>)
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	d00b      	beq.n	8014be2 <TIM_OC2_SetConfig+0x9e>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	4a1a      	ldr	r2, [pc, #104]	; (8014c38 <TIM_OC2_SetConfig+0xf4>)
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d007      	beq.n	8014be2 <TIM_OC2_SetConfig+0x9e>
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	4a19      	ldr	r2, [pc, #100]	; (8014c3c <TIM_OC2_SetConfig+0xf8>)
 8014bd6:	4293      	cmp	r3, r2
 8014bd8:	d003      	beq.n	8014be2 <TIM_OC2_SetConfig+0x9e>
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	4a18      	ldr	r2, [pc, #96]	; (8014c40 <TIM_OC2_SetConfig+0xfc>)
 8014bde:	4293      	cmp	r3, r2
 8014be0:	d113      	bne.n	8014c0a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	4a17      	ldr	r2, [pc, #92]	; (8014c44 <TIM_OC2_SetConfig+0x100>)
 8014be6:	4013      	ands	r3, r2
 8014be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014bea:	693b      	ldr	r3, [r7, #16]
 8014bec:	4a16      	ldr	r2, [pc, #88]	; (8014c48 <TIM_OC2_SetConfig+0x104>)
 8014bee:	4013      	ands	r3, r2
 8014bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	695b      	ldr	r3, [r3, #20]
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	693a      	ldr	r2, [r7, #16]
 8014bfa:	4313      	orrs	r3, r2
 8014bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	699b      	ldr	r3, [r3, #24]
 8014c02:	009b      	lsls	r3, r3, #2
 8014c04:	693a      	ldr	r2, [r7, #16]
 8014c06:	4313      	orrs	r3, r2
 8014c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	693a      	ldr	r2, [r7, #16]
 8014c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	68fa      	ldr	r2, [r7, #12]
 8014c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	685a      	ldr	r2, [r3, #4]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	697a      	ldr	r2, [r7, #20]
 8014c22:	621a      	str	r2, [r3, #32]
}
 8014c24:	46c0      	nop			; (mov r8, r8)
 8014c26:	46bd      	mov	sp, r7
 8014c28:	b006      	add	sp, #24
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	feff8fff 	.word	0xfeff8fff
 8014c30:	fffffcff 	.word	0xfffffcff
 8014c34:	40012c00 	.word	0x40012c00
 8014c38:	40014000 	.word	0x40014000
 8014c3c:	40014400 	.word	0x40014400
 8014c40:	40014800 	.word	0x40014800
 8014c44:	fffffbff 	.word	0xfffffbff
 8014c48:	fffff7ff 	.word	0xfffff7ff

08014c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b086      	sub	sp, #24
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6a1b      	ldr	r3, [r3, #32]
 8014c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6a1b      	ldr	r3, [r3, #32]
 8014c60:	4a33      	ldr	r2, [pc, #204]	; (8014d30 <TIM_OC3_SetConfig+0xe4>)
 8014c62:	401a      	ands	r2, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	69db      	ldr	r3, [r3, #28]
 8014c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	4a2f      	ldr	r2, [pc, #188]	; (8014d34 <TIM_OC3_SetConfig+0xe8>)
 8014c78:	4013      	ands	r3, r2
 8014c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2203      	movs	r2, #3
 8014c80:	4393      	bics	r3, r2
 8014c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	68fa      	ldr	r2, [r7, #12]
 8014c8a:	4313      	orrs	r3, r2
 8014c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	4a29      	ldr	r2, [pc, #164]	; (8014d38 <TIM_OC3_SetConfig+0xec>)
 8014c92:	4013      	ands	r3, r2
 8014c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	689b      	ldr	r3, [r3, #8]
 8014c9a:	021b      	lsls	r3, r3, #8
 8014c9c:	697a      	ldr	r2, [r7, #20]
 8014c9e:	4313      	orrs	r3, r2
 8014ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	4a25      	ldr	r2, [pc, #148]	; (8014d3c <TIM_OC3_SetConfig+0xf0>)
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d10d      	bne.n	8014cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	4a24      	ldr	r2, [pc, #144]	; (8014d40 <TIM_OC3_SetConfig+0xf4>)
 8014cae:	4013      	ands	r3, r2
 8014cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	68db      	ldr	r3, [r3, #12]
 8014cb6:	021b      	lsls	r3, r3, #8
 8014cb8:	697a      	ldr	r2, [r7, #20]
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	4a20      	ldr	r2, [pc, #128]	; (8014d44 <TIM_OC3_SetConfig+0xf8>)
 8014cc2:	4013      	ands	r3, r2
 8014cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	4a1c      	ldr	r2, [pc, #112]	; (8014d3c <TIM_OC3_SetConfig+0xf0>)
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d00b      	beq.n	8014ce6 <TIM_OC3_SetConfig+0x9a>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	4a1d      	ldr	r2, [pc, #116]	; (8014d48 <TIM_OC3_SetConfig+0xfc>)
 8014cd2:	4293      	cmp	r3, r2
 8014cd4:	d007      	beq.n	8014ce6 <TIM_OC3_SetConfig+0x9a>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	4a1c      	ldr	r2, [pc, #112]	; (8014d4c <TIM_OC3_SetConfig+0x100>)
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	d003      	beq.n	8014ce6 <TIM_OC3_SetConfig+0x9a>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	4a1b      	ldr	r2, [pc, #108]	; (8014d50 <TIM_OC3_SetConfig+0x104>)
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	d113      	bne.n	8014d0e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	4a1a      	ldr	r2, [pc, #104]	; (8014d54 <TIM_OC3_SetConfig+0x108>)
 8014cea:	4013      	ands	r3, r2
 8014cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	4a19      	ldr	r2, [pc, #100]	; (8014d58 <TIM_OC3_SetConfig+0x10c>)
 8014cf2:	4013      	ands	r3, r2
 8014cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	695b      	ldr	r3, [r3, #20]
 8014cfa:	011b      	lsls	r3, r3, #4
 8014cfc:	693a      	ldr	r2, [r7, #16]
 8014cfe:	4313      	orrs	r3, r2
 8014d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	699b      	ldr	r3, [r3, #24]
 8014d06:	011b      	lsls	r3, r3, #4
 8014d08:	693a      	ldr	r2, [r7, #16]
 8014d0a:	4313      	orrs	r3, r2
 8014d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	693a      	ldr	r2, [r7, #16]
 8014d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	685a      	ldr	r2, [r3, #4]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	697a      	ldr	r2, [r7, #20]
 8014d26:	621a      	str	r2, [r3, #32]
}
 8014d28:	46c0      	nop			; (mov r8, r8)
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	b006      	add	sp, #24
 8014d2e:	bd80      	pop	{r7, pc}
 8014d30:	fffffeff 	.word	0xfffffeff
 8014d34:	fffeff8f 	.word	0xfffeff8f
 8014d38:	fffffdff 	.word	0xfffffdff
 8014d3c:	40012c00 	.word	0x40012c00
 8014d40:	fffff7ff 	.word	0xfffff7ff
 8014d44:	fffffbff 	.word	0xfffffbff
 8014d48:	40014000 	.word	0x40014000
 8014d4c:	40014400 	.word	0x40014400
 8014d50:	40014800 	.word	0x40014800
 8014d54:	ffffefff 	.word	0xffffefff
 8014d58:	ffffdfff 	.word	0xffffdfff

08014d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b086      	sub	sp, #24
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6a1b      	ldr	r3, [r3, #32]
 8014d6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6a1b      	ldr	r3, [r3, #32]
 8014d70:	4a26      	ldr	r2, [pc, #152]	; (8014e0c <TIM_OC4_SetConfig+0xb0>)
 8014d72:	401a      	ands	r2, r3
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	69db      	ldr	r3, [r3, #28]
 8014d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	4a22      	ldr	r2, [pc, #136]	; (8014e10 <TIM_OC4_SetConfig+0xb4>)
 8014d88:	4013      	ands	r3, r2
 8014d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	4a21      	ldr	r2, [pc, #132]	; (8014e14 <TIM_OC4_SetConfig+0xb8>)
 8014d90:	4013      	ands	r3, r2
 8014d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	021b      	lsls	r3, r3, #8
 8014d9a:	68fa      	ldr	r2, [r7, #12]
 8014d9c:	4313      	orrs	r3, r2
 8014d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	4a1d      	ldr	r2, [pc, #116]	; (8014e18 <TIM_OC4_SetConfig+0xbc>)
 8014da4:	4013      	ands	r3, r2
 8014da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	689b      	ldr	r3, [r3, #8]
 8014dac:	031b      	lsls	r3, r3, #12
 8014dae:	693a      	ldr	r2, [r7, #16]
 8014db0:	4313      	orrs	r3, r2
 8014db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	4a19      	ldr	r2, [pc, #100]	; (8014e1c <TIM_OC4_SetConfig+0xc0>)
 8014db8:	4293      	cmp	r3, r2
 8014dba:	d00b      	beq.n	8014dd4 <TIM_OC4_SetConfig+0x78>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	4a18      	ldr	r2, [pc, #96]	; (8014e20 <TIM_OC4_SetConfig+0xc4>)
 8014dc0:	4293      	cmp	r3, r2
 8014dc2:	d007      	beq.n	8014dd4 <TIM_OC4_SetConfig+0x78>
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	4a17      	ldr	r2, [pc, #92]	; (8014e24 <TIM_OC4_SetConfig+0xc8>)
 8014dc8:	4293      	cmp	r3, r2
 8014dca:	d003      	beq.n	8014dd4 <TIM_OC4_SetConfig+0x78>
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	4a16      	ldr	r2, [pc, #88]	; (8014e28 <TIM_OC4_SetConfig+0xcc>)
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d109      	bne.n	8014de8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	4a15      	ldr	r2, [pc, #84]	; (8014e2c <TIM_OC4_SetConfig+0xd0>)
 8014dd8:	4013      	ands	r3, r2
 8014dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	695b      	ldr	r3, [r3, #20]
 8014de0:	019b      	lsls	r3, r3, #6
 8014de2:	697a      	ldr	r2, [r7, #20]
 8014de4:	4313      	orrs	r3, r2
 8014de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	697a      	ldr	r2, [r7, #20]
 8014dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	68fa      	ldr	r2, [r7, #12]
 8014df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	685a      	ldr	r2, [r3, #4]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	693a      	ldr	r2, [r7, #16]
 8014e00:	621a      	str	r2, [r3, #32]
}
 8014e02:	46c0      	nop			; (mov r8, r8)
 8014e04:	46bd      	mov	sp, r7
 8014e06:	b006      	add	sp, #24
 8014e08:	bd80      	pop	{r7, pc}
 8014e0a:	46c0      	nop			; (mov r8, r8)
 8014e0c:	ffffefff 	.word	0xffffefff
 8014e10:	feff8fff 	.word	0xfeff8fff
 8014e14:	fffffcff 	.word	0xfffffcff
 8014e18:	ffffdfff 	.word	0xffffdfff
 8014e1c:	40012c00 	.word	0x40012c00
 8014e20:	40014000 	.word	0x40014000
 8014e24:	40014400 	.word	0x40014400
 8014e28:	40014800 	.word	0x40014800
 8014e2c:	ffffbfff 	.word	0xffffbfff

08014e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b086      	sub	sp, #24
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6a1b      	ldr	r3, [r3, #32]
 8014e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6a1b      	ldr	r3, [r3, #32]
 8014e44:	4a23      	ldr	r2, [pc, #140]	; (8014ed4 <TIM_OC5_SetConfig+0xa4>)
 8014e46:	401a      	ands	r2, r3
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	4a1f      	ldr	r2, [pc, #124]	; (8014ed8 <TIM_OC5_SetConfig+0xa8>)
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	68fa      	ldr	r2, [r7, #12]
 8014e66:	4313      	orrs	r3, r2
 8014e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	4a1b      	ldr	r2, [pc, #108]	; (8014edc <TIM_OC5_SetConfig+0xac>)
 8014e6e:	4013      	ands	r3, r2
 8014e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	689b      	ldr	r3, [r3, #8]
 8014e76:	041b      	lsls	r3, r3, #16
 8014e78:	693a      	ldr	r2, [r7, #16]
 8014e7a:	4313      	orrs	r3, r2
 8014e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4a17      	ldr	r2, [pc, #92]	; (8014ee0 <TIM_OC5_SetConfig+0xb0>)
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d00b      	beq.n	8014e9e <TIM_OC5_SetConfig+0x6e>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	4a16      	ldr	r2, [pc, #88]	; (8014ee4 <TIM_OC5_SetConfig+0xb4>)
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d007      	beq.n	8014e9e <TIM_OC5_SetConfig+0x6e>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	4a15      	ldr	r2, [pc, #84]	; (8014ee8 <TIM_OC5_SetConfig+0xb8>)
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d003      	beq.n	8014e9e <TIM_OC5_SetConfig+0x6e>
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	4a14      	ldr	r2, [pc, #80]	; (8014eec <TIM_OC5_SetConfig+0xbc>)
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d109      	bne.n	8014eb2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	4a0c      	ldr	r2, [pc, #48]	; (8014ed4 <TIM_OC5_SetConfig+0xa4>)
 8014ea2:	4013      	ands	r3, r2
 8014ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	695b      	ldr	r3, [r3, #20]
 8014eaa:	021b      	lsls	r3, r3, #8
 8014eac:	697a      	ldr	r2, [r7, #20]
 8014eae:	4313      	orrs	r3, r2
 8014eb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	697a      	ldr	r2, [r7, #20]
 8014eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	68fa      	ldr	r2, [r7, #12]
 8014ebc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	685a      	ldr	r2, [r3, #4]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	693a      	ldr	r2, [r7, #16]
 8014eca:	621a      	str	r2, [r3, #32]
}
 8014ecc:	46c0      	nop			; (mov r8, r8)
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	b006      	add	sp, #24
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	fffeffff 	.word	0xfffeffff
 8014ed8:	fffeff8f 	.word	0xfffeff8f
 8014edc:	fffdffff 	.word	0xfffdffff
 8014ee0:	40012c00 	.word	0x40012c00
 8014ee4:	40014000 	.word	0x40014000
 8014ee8:	40014400 	.word	0x40014400
 8014eec:	40014800 	.word	0x40014800

08014ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b086      	sub	sp, #24
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6a1b      	ldr	r3, [r3, #32]
 8014efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6a1b      	ldr	r3, [r3, #32]
 8014f04:	4a24      	ldr	r2, [pc, #144]	; (8014f98 <TIM_OC6_SetConfig+0xa8>)
 8014f06:	401a      	ands	r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	4a20      	ldr	r2, [pc, #128]	; (8014f9c <TIM_OC6_SetConfig+0xac>)
 8014f1c:	4013      	ands	r3, r2
 8014f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	021b      	lsls	r3, r3, #8
 8014f26:	68fa      	ldr	r2, [r7, #12]
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	4a1c      	ldr	r2, [pc, #112]	; (8014fa0 <TIM_OC6_SetConfig+0xb0>)
 8014f30:	4013      	ands	r3, r2
 8014f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	689b      	ldr	r3, [r3, #8]
 8014f38:	051b      	lsls	r3, r3, #20
 8014f3a:	693a      	ldr	r2, [r7, #16]
 8014f3c:	4313      	orrs	r3, r2
 8014f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	4a18      	ldr	r2, [pc, #96]	; (8014fa4 <TIM_OC6_SetConfig+0xb4>)
 8014f44:	4293      	cmp	r3, r2
 8014f46:	d00b      	beq.n	8014f60 <TIM_OC6_SetConfig+0x70>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	4a17      	ldr	r2, [pc, #92]	; (8014fa8 <TIM_OC6_SetConfig+0xb8>)
 8014f4c:	4293      	cmp	r3, r2
 8014f4e:	d007      	beq.n	8014f60 <TIM_OC6_SetConfig+0x70>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	4a16      	ldr	r2, [pc, #88]	; (8014fac <TIM_OC6_SetConfig+0xbc>)
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d003      	beq.n	8014f60 <TIM_OC6_SetConfig+0x70>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	4a15      	ldr	r2, [pc, #84]	; (8014fb0 <TIM_OC6_SetConfig+0xc0>)
 8014f5c:	4293      	cmp	r3, r2
 8014f5e:	d109      	bne.n	8014f74 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	4a14      	ldr	r2, [pc, #80]	; (8014fb4 <TIM_OC6_SetConfig+0xc4>)
 8014f64:	4013      	ands	r3, r2
 8014f66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	695b      	ldr	r3, [r3, #20]
 8014f6c:	029b      	lsls	r3, r3, #10
 8014f6e:	697a      	ldr	r2, [r7, #20]
 8014f70:	4313      	orrs	r3, r2
 8014f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	697a      	ldr	r2, [r7, #20]
 8014f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	68fa      	ldr	r2, [r7, #12]
 8014f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	685a      	ldr	r2, [r3, #4]
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	693a      	ldr	r2, [r7, #16]
 8014f8c:	621a      	str	r2, [r3, #32]
}
 8014f8e:	46c0      	nop			; (mov r8, r8)
 8014f90:	46bd      	mov	sp, r7
 8014f92:	b006      	add	sp, #24
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	46c0      	nop			; (mov r8, r8)
 8014f98:	ffefffff 	.word	0xffefffff
 8014f9c:	feff8fff 	.word	0xfeff8fff
 8014fa0:	ffdfffff 	.word	0xffdfffff
 8014fa4:	40012c00 	.word	0x40012c00
 8014fa8:	40014000 	.word	0x40014000
 8014fac:	40014400 	.word	0x40014400
 8014fb0:	40014800 	.word	0x40014800
 8014fb4:	fffbffff 	.word	0xfffbffff

08014fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	6a1b      	ldr	r3, [r3, #32]
 8014fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	6a1b      	ldr	r3, [r3, #32]
 8014fce:	2201      	movs	r2, #1
 8014fd0:	4393      	bics	r3, r2
 8014fd2:	001a      	movs	r2, r3
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	699b      	ldr	r3, [r3, #24]
 8014fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	22f0      	movs	r2, #240	; 0xf0
 8014fe2:	4393      	bics	r3, r2
 8014fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	011b      	lsls	r3, r3, #4
 8014fea:	693a      	ldr	r2, [r7, #16]
 8014fec:	4313      	orrs	r3, r2
 8014fee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	220a      	movs	r2, #10
 8014ff4:	4393      	bics	r3, r2
 8014ff6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014ff8:	697a      	ldr	r2, [r7, #20]
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	4313      	orrs	r3, r2
 8014ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	693a      	ldr	r2, [r7, #16]
 8015004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	697a      	ldr	r2, [r7, #20]
 801500a:	621a      	str	r2, [r3, #32]
}
 801500c:	46c0      	nop			; (mov r8, r8)
 801500e:	46bd      	mov	sp, r7
 8015010:	b006      	add	sp, #24
 8015012:	bd80      	pop	{r7, pc}

08015014 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b086      	sub	sp, #24
 8015018:	af00      	add	r7, sp, #0
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	6a1b      	ldr	r3, [r3, #32]
 8015024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	6a1b      	ldr	r3, [r3, #32]
 801502a:	2210      	movs	r2, #16
 801502c:	4393      	bics	r3, r2
 801502e:	001a      	movs	r2, r3
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	699b      	ldr	r3, [r3, #24]
 8015038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	4a0d      	ldr	r2, [pc, #52]	; (8015074 <TIM_TI2_ConfigInputStage+0x60>)
 801503e:	4013      	ands	r3, r2
 8015040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	031b      	lsls	r3, r3, #12
 8015046:	693a      	ldr	r2, [r7, #16]
 8015048:	4313      	orrs	r3, r2
 801504a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	22a0      	movs	r2, #160	; 0xa0
 8015050:	4393      	bics	r3, r2
 8015052:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	011b      	lsls	r3, r3, #4
 8015058:	697a      	ldr	r2, [r7, #20]
 801505a:	4313      	orrs	r3, r2
 801505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	693a      	ldr	r2, [r7, #16]
 8015062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	697a      	ldr	r2, [r7, #20]
 8015068:	621a      	str	r2, [r3, #32]
}
 801506a:	46c0      	nop			; (mov r8, r8)
 801506c:	46bd      	mov	sp, r7
 801506e:	b006      	add	sp, #24
 8015070:	bd80      	pop	{r7, pc}
 8015072:	46c0      	nop			; (mov r8, r8)
 8015074:	ffff0fff 	.word	0xffff0fff

08015078 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b084      	sub	sp, #16
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
 8015080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	689b      	ldr	r3, [r3, #8]
 8015086:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	4a08      	ldr	r2, [pc, #32]	; (80150ac <TIM_ITRx_SetConfig+0x34>)
 801508c:	4013      	ands	r3, r2
 801508e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015090:	683a      	ldr	r2, [r7, #0]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	4313      	orrs	r3, r2
 8015096:	2207      	movs	r2, #7
 8015098:	4313      	orrs	r3, r2
 801509a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	68fa      	ldr	r2, [r7, #12]
 80150a0:	609a      	str	r2, [r3, #8]
}
 80150a2:	46c0      	nop			; (mov r8, r8)
 80150a4:	46bd      	mov	sp, r7
 80150a6:	b004      	add	sp, #16
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	46c0      	nop			; (mov r8, r8)
 80150ac:	ffcfff8f 	.word	0xffcfff8f

080150b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b086      	sub	sp, #24
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	607a      	str	r2, [r7, #4]
 80150bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	689b      	ldr	r3, [r3, #8]
 80150c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	4a09      	ldr	r2, [pc, #36]	; (80150ec <TIM_ETR_SetConfig+0x3c>)
 80150c8:	4013      	ands	r3, r2
 80150ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	021a      	lsls	r2, r3, #8
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	431a      	orrs	r2, r3
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	4313      	orrs	r3, r2
 80150d8:	697a      	ldr	r2, [r7, #20]
 80150da:	4313      	orrs	r3, r2
 80150dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	697a      	ldr	r2, [r7, #20]
 80150e2:	609a      	str	r2, [r3, #8]
}
 80150e4:	46c0      	nop			; (mov r8, r8)
 80150e6:	46bd      	mov	sp, r7
 80150e8:	b006      	add	sp, #24
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	ffff00ff 	.word	0xffff00ff

080150f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b086      	sub	sp, #24
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	60b9      	str	r1, [r7, #8]
 80150fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	221f      	movs	r2, #31
 8015100:	4013      	ands	r3, r2
 8015102:	2201      	movs	r2, #1
 8015104:	409a      	lsls	r2, r3
 8015106:	0013      	movs	r3, r2
 8015108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	6a1b      	ldr	r3, [r3, #32]
 801510e:	697a      	ldr	r2, [r7, #20]
 8015110:	43d2      	mvns	r2, r2
 8015112:	401a      	ands	r2, r3
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	6a1a      	ldr	r2, [r3, #32]
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	211f      	movs	r1, #31
 8015120:	400b      	ands	r3, r1
 8015122:	6879      	ldr	r1, [r7, #4]
 8015124:	4099      	lsls	r1, r3
 8015126:	000b      	movs	r3, r1
 8015128:	431a      	orrs	r2, r3
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	621a      	str	r2, [r3, #32]
}
 801512e:	46c0      	nop			; (mov r8, r8)
 8015130:	46bd      	mov	sp, r7
 8015132:	b006      	add	sp, #24
 8015134:	bd80      	pop	{r7, pc}
	...

08015138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	223c      	movs	r2, #60	; 0x3c
 8015146:	5c9b      	ldrb	r3, [r3, r2]
 8015148:	2b01      	cmp	r3, #1
 801514a:	d101      	bne.n	8015150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801514c:	2302      	movs	r3, #2
 801514e:	e054      	b.n	80151fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	223c      	movs	r2, #60	; 0x3c
 8015154:	2101      	movs	r1, #1
 8015156:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	223d      	movs	r2, #61	; 0x3d
 801515c:	2102      	movs	r1, #2
 801515e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	685b      	ldr	r3, [r3, #4]
 8015166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	689b      	ldr	r3, [r3, #8]
 801516e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4a23      	ldr	r2, [pc, #140]	; (8015204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8015176:	4293      	cmp	r3, r2
 8015178:	d108      	bne.n	801518c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	4a22      	ldr	r2, [pc, #136]	; (8015208 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801517e:	4013      	ands	r3, r2
 8015180:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015182:	683b      	ldr	r3, [r7, #0]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	4313      	orrs	r3, r2
 801518a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2270      	movs	r2, #112	; 0x70
 8015190:	4393      	bics	r3, r2
 8015192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	68fa      	ldr	r2, [r7, #12]
 801519a:	4313      	orrs	r3, r2
 801519c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	68fa      	ldr	r2, [r7, #12]
 80151a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	4a16      	ldr	r2, [pc, #88]	; (8015204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d00e      	beq.n	80151ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	4a15      	ldr	r2, [pc, #84]	; (801520c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d009      	beq.n	80151ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	4a14      	ldr	r2, [pc, #80]	; (8015210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d004      	beq.n	80151ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	4a12      	ldr	r2, [pc, #72]	; (8015214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80151ca:	4293      	cmp	r3, r2
 80151cc:	d10c      	bne.n	80151e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	2280      	movs	r2, #128	; 0x80
 80151d2:	4393      	bics	r3, r2
 80151d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	689b      	ldr	r3, [r3, #8]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	4313      	orrs	r3, r2
 80151de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	68ba      	ldr	r2, [r7, #8]
 80151e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	223d      	movs	r2, #61	; 0x3d
 80151ec:	2101      	movs	r1, #1
 80151ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	223c      	movs	r2, #60	; 0x3c
 80151f4:	2100      	movs	r1, #0
 80151f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	0018      	movs	r0, r3
 80151fc:	46bd      	mov	sp, r7
 80151fe:	b004      	add	sp, #16
 8015200:	bd80      	pop	{r7, pc}
 8015202:	46c0      	nop			; (mov r8, r8)
 8015204:	40012c00 	.word	0x40012c00
 8015208:	ff0fffff 	.word	0xff0fffff
 801520c:	40000400 	.word	0x40000400
 8015210:	40000800 	.word	0x40000800
 8015214:	40014000 	.word	0x40014000

08015218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d101      	bne.n	801522a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015226:	2301      	movs	r3, #1
 8015228:	e046      	b.n	80152b8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2288      	movs	r2, #136	; 0x88
 801522e:	589b      	ldr	r3, [r3, r2]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d107      	bne.n	8015244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2284      	movs	r2, #132	; 0x84
 8015238:	2100      	movs	r1, #0
 801523a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	0018      	movs	r0, r3
 8015240:	f7f7 ff06 	bl	800d050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2288      	movs	r2, #136	; 0x88
 8015248:	2124      	movs	r1, #36	; 0x24
 801524a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	681a      	ldr	r2, [r3, #0]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	2101      	movs	r1, #1
 8015258:	438a      	bics	r2, r1
 801525a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015260:	2b00      	cmp	r3, #0
 8015262:	d003      	beq.n	801526c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	0018      	movs	r0, r3
 8015268:	f001 f84e 	bl	8016308 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	0018      	movs	r0, r3
 8015270:	f000 fe68 	bl	8015f44 <UART_SetConfig>
 8015274:	0003      	movs	r3, r0
 8015276:	2b01      	cmp	r3, #1
 8015278:	d101      	bne.n	801527e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 801527a:	2301      	movs	r3, #1
 801527c:	e01c      	b.n	80152b8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	685a      	ldr	r2, [r3, #4]
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	490d      	ldr	r1, [pc, #52]	; (80152c0 <HAL_UART_Init+0xa8>)
 801528a:	400a      	ands	r2, r1
 801528c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	689a      	ldr	r2, [r3, #8]
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	212a      	movs	r1, #42	; 0x2a
 801529a:	438a      	bics	r2, r1
 801529c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	2101      	movs	r1, #1
 80152aa:	430a      	orrs	r2, r1
 80152ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	0018      	movs	r0, r3
 80152b2:	f001 f8dd 	bl	8016470 <UART_CheckIdleState>
 80152b6:	0003      	movs	r3, r0
}
 80152b8:	0018      	movs	r0, r3
 80152ba:	46bd      	mov	sp, r7
 80152bc:	b002      	add	sp, #8
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	ffffb7ff 	.word	0xffffb7ff

080152c4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d101      	bne.n	80152d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80152d2:	2301      	movs	r3, #1
 80152d4:	e032      	b.n	801533c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2288      	movs	r2, #136	; 0x88
 80152da:	2124      	movs	r1, #36	; 0x24
 80152dc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	681a      	ldr	r2, [r3, #0]
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	2101      	movs	r1, #1
 80152ea:	438a      	bics	r2, r1
 80152ec:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	2200      	movs	r2, #0
 80152f4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2200      	movs	r2, #0
 80152fc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	2200      	movs	r2, #0
 8015304:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	0018      	movs	r0, r3
 801530a:	f7f7 ff5b 	bl	800d1c4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2290      	movs	r2, #144	; 0x90
 8015312:	2100      	movs	r1, #0
 8015314:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2288      	movs	r2, #136	; 0x88
 801531a:	2100      	movs	r1, #0
 801531c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	228c      	movs	r2, #140	; 0x8c
 8015322:	2100      	movs	r1, #0
 8015324:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	2200      	movs	r2, #0
 801532a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2200      	movs	r2, #0
 8015330:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2284      	movs	r2, #132	; 0x84
 8015336:	2100      	movs	r1, #0
 8015338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801533a:	2300      	movs	r3, #0
}
 801533c:	0018      	movs	r0, r3
 801533e:	46bd      	mov	sp, r7
 8015340:	b002      	add	sp, #8
 8015342:	bd80      	pop	{r7, pc}

08015344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b08a      	sub	sp, #40	; 0x28
 8015348:	af02      	add	r7, sp, #8
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	603b      	str	r3, [r7, #0]
 8015350:	1dbb      	adds	r3, r7, #6
 8015352:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2288      	movs	r2, #136	; 0x88
 8015358:	589b      	ldr	r3, [r3, r2]
 801535a:	2b20      	cmp	r3, #32
 801535c:	d000      	beq.n	8015360 <HAL_UART_Transmit+0x1c>
 801535e:	e090      	b.n	8015482 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d003      	beq.n	801536e <HAL_UART_Transmit+0x2a>
 8015366:	1dbb      	adds	r3, r7, #6
 8015368:	881b      	ldrh	r3, [r3, #0]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d101      	bne.n	8015372 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 801536e:	2301      	movs	r3, #1
 8015370:	e088      	b.n	8015484 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	689a      	ldr	r2, [r3, #8]
 8015376:	2380      	movs	r3, #128	; 0x80
 8015378:	015b      	lsls	r3, r3, #5
 801537a:	429a      	cmp	r2, r3
 801537c:	d109      	bne.n	8015392 <HAL_UART_Transmit+0x4e>
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	691b      	ldr	r3, [r3, #16]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d105      	bne.n	8015392 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	2201      	movs	r2, #1
 801538a:	4013      	ands	r3, r2
 801538c:	d001      	beq.n	8015392 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 801538e:	2301      	movs	r3, #1
 8015390:	e078      	b.n	8015484 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	2290      	movs	r2, #144	; 0x90
 8015396:	2100      	movs	r1, #0
 8015398:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	2288      	movs	r2, #136	; 0x88
 801539e:	2121      	movs	r1, #33	; 0x21
 80153a0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80153a2:	f7f9 fff7 	bl	800f394 <HAL_GetTick>
 80153a6:	0003      	movs	r3, r0
 80153a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	1dba      	adds	r2, r7, #6
 80153ae:	2154      	movs	r1, #84	; 0x54
 80153b0:	8812      	ldrh	r2, [r2, #0]
 80153b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	1dba      	adds	r2, r7, #6
 80153b8:	2156      	movs	r1, #86	; 0x56
 80153ba:	8812      	ldrh	r2, [r2, #0]
 80153bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	689a      	ldr	r2, [r3, #8]
 80153c2:	2380      	movs	r3, #128	; 0x80
 80153c4:	015b      	lsls	r3, r3, #5
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d108      	bne.n	80153dc <HAL_UART_Transmit+0x98>
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	691b      	ldr	r3, [r3, #16]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d104      	bne.n	80153dc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80153d2:	2300      	movs	r3, #0
 80153d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	61bb      	str	r3, [r7, #24]
 80153da:	e003      	b.n	80153e4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80153e0:	2300      	movs	r3, #0
 80153e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80153e4:	e030      	b.n	8015448 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80153e6:	697a      	ldr	r2, [r7, #20]
 80153e8:	68f8      	ldr	r0, [r7, #12]
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	9300      	str	r3, [sp, #0]
 80153ee:	0013      	movs	r3, r2
 80153f0:	2200      	movs	r2, #0
 80153f2:	2180      	movs	r1, #128	; 0x80
 80153f4:	f001 f8e6 	bl	80165c4 <UART_WaitOnFlagUntilTimeout>
 80153f8:	1e03      	subs	r3, r0, #0
 80153fa:	d005      	beq.n	8015408 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2288      	movs	r2, #136	; 0x88
 8015400:	2120      	movs	r1, #32
 8015402:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015404:	2303      	movs	r3, #3
 8015406:	e03d      	b.n	8015484 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d10b      	bne.n	8015426 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801540e:	69bb      	ldr	r3, [r7, #24]
 8015410:	881b      	ldrh	r3, [r3, #0]
 8015412:	001a      	movs	r2, r3
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	05d2      	lsls	r2, r2, #23
 801541a:	0dd2      	lsrs	r2, r2, #23
 801541c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801541e:	69bb      	ldr	r3, [r7, #24]
 8015420:	3302      	adds	r3, #2
 8015422:	61bb      	str	r3, [r7, #24]
 8015424:	e007      	b.n	8015436 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	781a      	ldrb	r2, [r3, #0]
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	3301      	adds	r3, #1
 8015434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	2256      	movs	r2, #86	; 0x56
 801543a:	5a9b      	ldrh	r3, [r3, r2]
 801543c:	b29b      	uxth	r3, r3
 801543e:	3b01      	subs	r3, #1
 8015440:	b299      	uxth	r1, r3
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	2256      	movs	r2, #86	; 0x56
 8015446:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	2256      	movs	r2, #86	; 0x56
 801544c:	5a9b      	ldrh	r3, [r3, r2]
 801544e:	b29b      	uxth	r3, r3
 8015450:	2b00      	cmp	r3, #0
 8015452:	d1c8      	bne.n	80153e6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015454:	697a      	ldr	r2, [r7, #20]
 8015456:	68f8      	ldr	r0, [r7, #12]
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	9300      	str	r3, [sp, #0]
 801545c:	0013      	movs	r3, r2
 801545e:	2200      	movs	r2, #0
 8015460:	2140      	movs	r1, #64	; 0x40
 8015462:	f001 f8af 	bl	80165c4 <UART_WaitOnFlagUntilTimeout>
 8015466:	1e03      	subs	r3, r0, #0
 8015468:	d005      	beq.n	8015476 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	2288      	movs	r2, #136	; 0x88
 801546e:	2120      	movs	r1, #32
 8015470:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015472:	2303      	movs	r3, #3
 8015474:	e006      	b.n	8015484 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	2288      	movs	r2, #136	; 0x88
 801547a:	2120      	movs	r1, #32
 801547c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 801547e:	2300      	movs	r3, #0
 8015480:	e000      	b.n	8015484 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8015482:	2302      	movs	r3, #2
  }
}
 8015484:	0018      	movs	r0, r3
 8015486:	46bd      	mov	sp, r7
 8015488:	b008      	add	sp, #32
 801548a:	bd80      	pop	{r7, pc}

0801548c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b08a      	sub	sp, #40	; 0x28
 8015490:	af02      	add	r7, sp, #8
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	603b      	str	r3, [r7, #0]
 8015498:	1dbb      	adds	r3, r7, #6
 801549a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	228c      	movs	r2, #140	; 0x8c
 80154a0:	589b      	ldr	r3, [r3, r2]
 80154a2:	2b20      	cmp	r3, #32
 80154a4:	d000      	beq.n	80154a8 <HAL_UART_Receive+0x1c>
 80154a6:	e0d0      	b.n	801564a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d003      	beq.n	80154b6 <HAL_UART_Receive+0x2a>
 80154ae:	1dbb      	adds	r3, r7, #6
 80154b0:	881b      	ldrh	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d101      	bne.n	80154ba <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80154b6:	2301      	movs	r3, #1
 80154b8:	e0c8      	b.n	801564c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	689a      	ldr	r2, [r3, #8]
 80154be:	2380      	movs	r3, #128	; 0x80
 80154c0:	015b      	lsls	r3, r3, #5
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d109      	bne.n	80154da <HAL_UART_Receive+0x4e>
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	691b      	ldr	r3, [r3, #16]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d105      	bne.n	80154da <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	2201      	movs	r2, #1
 80154d2:	4013      	ands	r3, r2
 80154d4:	d001      	beq.n	80154da <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80154d6:	2301      	movs	r3, #1
 80154d8:	e0b8      	b.n	801564c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2290      	movs	r2, #144	; 0x90
 80154de:	2100      	movs	r1, #0
 80154e0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	228c      	movs	r2, #140	; 0x8c
 80154e6:	2122      	movs	r1, #34	; 0x22
 80154e8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	2200      	movs	r2, #0
 80154ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80154f0:	f7f9 ff50 	bl	800f394 <HAL_GetTick>
 80154f4:	0003      	movs	r3, r0
 80154f6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	1dba      	adds	r2, r7, #6
 80154fc:	215c      	movs	r1, #92	; 0x5c
 80154fe:	8812      	ldrh	r2, [r2, #0]
 8015500:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	1dba      	adds	r2, r7, #6
 8015506:	215e      	movs	r1, #94	; 0x5e
 8015508:	8812      	ldrh	r2, [r2, #0]
 801550a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	689a      	ldr	r2, [r3, #8]
 8015510:	2380      	movs	r3, #128	; 0x80
 8015512:	015b      	lsls	r3, r3, #5
 8015514:	429a      	cmp	r2, r3
 8015516:	d10d      	bne.n	8015534 <HAL_UART_Receive+0xa8>
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	691b      	ldr	r3, [r3, #16]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d104      	bne.n	801552a <HAL_UART_Receive+0x9e>
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	2260      	movs	r2, #96	; 0x60
 8015524:	494b      	ldr	r1, [pc, #300]	; (8015654 <HAL_UART_Receive+0x1c8>)
 8015526:	5299      	strh	r1, [r3, r2]
 8015528:	e02e      	b.n	8015588 <HAL_UART_Receive+0xfc>
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2260      	movs	r2, #96	; 0x60
 801552e:	21ff      	movs	r1, #255	; 0xff
 8015530:	5299      	strh	r1, [r3, r2]
 8015532:	e029      	b.n	8015588 <HAL_UART_Receive+0xfc>
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	689b      	ldr	r3, [r3, #8]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d10d      	bne.n	8015558 <HAL_UART_Receive+0xcc>
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	691b      	ldr	r3, [r3, #16]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d104      	bne.n	801554e <HAL_UART_Receive+0xc2>
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	2260      	movs	r2, #96	; 0x60
 8015548:	21ff      	movs	r1, #255	; 0xff
 801554a:	5299      	strh	r1, [r3, r2]
 801554c:	e01c      	b.n	8015588 <HAL_UART_Receive+0xfc>
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	2260      	movs	r2, #96	; 0x60
 8015552:	217f      	movs	r1, #127	; 0x7f
 8015554:	5299      	strh	r1, [r3, r2]
 8015556:	e017      	b.n	8015588 <HAL_UART_Receive+0xfc>
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	689a      	ldr	r2, [r3, #8]
 801555c:	2380      	movs	r3, #128	; 0x80
 801555e:	055b      	lsls	r3, r3, #21
 8015560:	429a      	cmp	r2, r3
 8015562:	d10d      	bne.n	8015580 <HAL_UART_Receive+0xf4>
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	691b      	ldr	r3, [r3, #16]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d104      	bne.n	8015576 <HAL_UART_Receive+0xea>
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2260      	movs	r2, #96	; 0x60
 8015570:	217f      	movs	r1, #127	; 0x7f
 8015572:	5299      	strh	r1, [r3, r2]
 8015574:	e008      	b.n	8015588 <HAL_UART_Receive+0xfc>
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2260      	movs	r2, #96	; 0x60
 801557a:	213f      	movs	r1, #63	; 0x3f
 801557c:	5299      	strh	r1, [r3, r2]
 801557e:	e003      	b.n	8015588 <HAL_UART_Receive+0xfc>
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2260      	movs	r2, #96	; 0x60
 8015584:	2100      	movs	r1, #0
 8015586:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8015588:	2312      	movs	r3, #18
 801558a:	18fb      	adds	r3, r7, r3
 801558c:	68fa      	ldr	r2, [r7, #12]
 801558e:	2160      	movs	r1, #96	; 0x60
 8015590:	5a52      	ldrh	r2, [r2, r1]
 8015592:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	689a      	ldr	r2, [r3, #8]
 8015598:	2380      	movs	r3, #128	; 0x80
 801559a:	015b      	lsls	r3, r3, #5
 801559c:	429a      	cmp	r2, r3
 801559e:	d108      	bne.n	80155b2 <HAL_UART_Receive+0x126>
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	691b      	ldr	r3, [r3, #16]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d104      	bne.n	80155b2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80155a8:	2300      	movs	r3, #0
 80155aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	61bb      	str	r3, [r7, #24]
 80155b0:	e003      	b.n	80155ba <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80155b6:	2300      	movs	r3, #0
 80155b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80155ba:	e03a      	b.n	8015632 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80155bc:	697a      	ldr	r2, [r7, #20]
 80155be:	68f8      	ldr	r0, [r7, #12]
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	9300      	str	r3, [sp, #0]
 80155c4:	0013      	movs	r3, r2
 80155c6:	2200      	movs	r2, #0
 80155c8:	2120      	movs	r1, #32
 80155ca:	f000 fffb 	bl	80165c4 <UART_WaitOnFlagUntilTimeout>
 80155ce:	1e03      	subs	r3, r0, #0
 80155d0:	d005      	beq.n	80155de <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	228c      	movs	r2, #140	; 0x8c
 80155d6:	2120      	movs	r1, #32
 80155d8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80155da:	2303      	movs	r3, #3
 80155dc:	e036      	b.n	801564c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80155de:	69fb      	ldr	r3, [r7, #28]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d10e      	bne.n	8015602 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	2212      	movs	r2, #18
 80155ee:	18ba      	adds	r2, r7, r2
 80155f0:	8812      	ldrh	r2, [r2, #0]
 80155f2:	4013      	ands	r3, r2
 80155f4:	b29a      	uxth	r2, r3
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	3302      	adds	r3, #2
 80155fe:	61bb      	str	r3, [r7, #24]
 8015600:	e00e      	b.n	8015620 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015608:	b2db      	uxtb	r3, r3
 801560a:	2212      	movs	r2, #18
 801560c:	18ba      	adds	r2, r7, r2
 801560e:	8812      	ldrh	r2, [r2, #0]
 8015610:	b2d2      	uxtb	r2, r2
 8015612:	4013      	ands	r3, r2
 8015614:	b2da      	uxtb	r2, r3
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801561a:	69fb      	ldr	r3, [r7, #28]
 801561c:	3301      	adds	r3, #1
 801561e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	225e      	movs	r2, #94	; 0x5e
 8015624:	5a9b      	ldrh	r3, [r3, r2]
 8015626:	b29b      	uxth	r3, r3
 8015628:	3b01      	subs	r3, #1
 801562a:	b299      	uxth	r1, r3
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	225e      	movs	r2, #94	; 0x5e
 8015630:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	225e      	movs	r2, #94	; 0x5e
 8015636:	5a9b      	ldrh	r3, [r3, r2]
 8015638:	b29b      	uxth	r3, r3
 801563a:	2b00      	cmp	r3, #0
 801563c:	d1be      	bne.n	80155bc <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	228c      	movs	r2, #140	; 0x8c
 8015642:	2120      	movs	r1, #32
 8015644:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8015646:	2300      	movs	r3, #0
 8015648:	e000      	b.n	801564c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 801564a:	2302      	movs	r3, #2
  }
}
 801564c:	0018      	movs	r0, r3
 801564e:	46bd      	mov	sp, r7
 8015650:	b008      	add	sp, #32
 8015652:	bd80      	pop	{r7, pc}
 8015654:	000001ff 	.word	0x000001ff

08015658 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b098      	sub	sp, #96	; 0x60
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8015660:	2301      	movs	r3, #1
 8015662:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015664:	f3ef 8310 	mrs	r3, PRIMASK
 8015668:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 801566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 801566c:	65bb      	str	r3, [r7, #88]	; 0x58
 801566e:	2301      	movs	r3, #1
 8015670:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015674:	f383 8810 	msr	PRIMASK, r3
}
 8015678:	46c0      	nop			; (mov r8, r8)
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	498a      	ldr	r1, [pc, #552]	; (80158b0 <HAL_UART_Abort_IT+0x258>)
 8015686:	400a      	ands	r2, r1
 8015688:	601a      	str	r2, [r3, #0]
 801568a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801568c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015690:	f383 8810 	msr	PRIMASK, r3
}
 8015694:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015696:	f3ef 8310 	mrs	r3, PRIMASK
 801569a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 801569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 801569e:	657b      	str	r3, [r7, #84]	; 0x54
 80156a0:	2301      	movs	r3, #1
 80156a2:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156a6:	f383 8810 	msr	PRIMASK, r3
}
 80156aa:	46c0      	nop			; (mov r8, r8)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	689a      	ldr	r2, [r3, #8]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	497f      	ldr	r1, [pc, #508]	; (80158b4 <HAL_UART_Abort_IT+0x25c>)
 80156b8:	400a      	ands	r2, r1
 80156ba:	609a      	str	r2, [r3, #8]
 80156bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156be:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156c2:	f383 8810 	msr	PRIMASK, r3
}
 80156c6:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d118      	bne.n	8015702 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156d0:	f3ef 8310 	mrs	r3, PRIMASK
 80156d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80156d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80156d8:	653b      	str	r3, [r7, #80]	; 0x50
 80156da:	2301      	movs	r3, #1
 80156dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e0:	f383 8810 	msr	PRIMASK, r3
}
 80156e4:	46c0      	nop			; (mov r8, r8)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	2110      	movs	r1, #16
 80156f2:	438a      	bics	r2, r1
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	f383 8810 	msr	PRIMASK, r3
}
 8015700:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015706:	2b00      	cmp	r3, #0
 8015708:	d00f      	beq.n	801572a <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	689b      	ldr	r3, [r3, #8]
 8015710:	2280      	movs	r2, #128	; 0x80
 8015712:	4013      	ands	r3, r2
 8015714:	2b80      	cmp	r3, #128	; 0x80
 8015716:	d104      	bne.n	8015722 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801571c:	4a66      	ldr	r2, [pc, #408]	; (80158b8 <HAL_UART_Abort_IT+0x260>)
 801571e:	639a      	str	r2, [r3, #56]	; 0x38
 8015720:	e003      	b.n	801572a <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015726:	2200      	movs	r2, #0
 8015728:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2280      	movs	r2, #128	; 0x80
 801572e:	589b      	ldr	r3, [r3, r2]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d011      	beq.n	8015758 <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	689b      	ldr	r3, [r3, #8]
 801573a:	2240      	movs	r2, #64	; 0x40
 801573c:	4013      	ands	r3, r2
 801573e:	2b40      	cmp	r3, #64	; 0x40
 8015740:	d105      	bne.n	801574e <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2280      	movs	r2, #128	; 0x80
 8015746:	589b      	ldr	r3, [r3, r2]
 8015748:	4a5c      	ldr	r2, [pc, #368]	; (80158bc <HAL_UART_Abort_IT+0x264>)
 801574a:	639a      	str	r2, [r3, #56]	; 0x38
 801574c:	e004      	b.n	8015758 <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2280      	movs	r2, #128	; 0x80
 8015752:	589b      	ldr	r3, [r3, r2]
 8015754:	2200      	movs	r2, #0
 8015756:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	689b      	ldr	r3, [r3, #8]
 801575e:	2280      	movs	r2, #128	; 0x80
 8015760:	4013      	ands	r3, r2
 8015762:	2b80      	cmp	r3, #128	; 0x80
 8015764:	d12a      	bne.n	80157bc <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015766:	f3ef 8310 	mrs	r3, PRIMASK
 801576a:	61bb      	str	r3, [r7, #24]
  return(result);
 801576c:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801576e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015770:	2301      	movs	r3, #1
 8015772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	f383 8810 	msr	PRIMASK, r3
}
 801577a:	46c0      	nop			; (mov r8, r8)
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	689a      	ldr	r2, [r3, #8]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2180      	movs	r1, #128	; 0x80
 8015788:	438a      	bics	r2, r1
 801578a:	609a      	str	r2, [r3, #8]
 801578c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801578e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015790:	6a3b      	ldr	r3, [r7, #32]
 8015792:	f383 8810 	msr	PRIMASK, r3
}
 8015796:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801579c:	2b00      	cmp	r3, #0
 801579e:	d00d      	beq.n	80157bc <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80157a4:	0018      	movs	r0, r3
 80157a6:	f7fb f861 	bl	801086c <HAL_DMA_Abort_IT>
 80157aa:	1e03      	subs	r3, r0, #0
 80157ac:	d004      	beq.n	80157b8 <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80157b2:	2200      	movs	r2, #0
 80157b4:	639a      	str	r2, [r3, #56]	; 0x38
 80157b6:	e001      	b.n	80157bc <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 80157b8:	2300      	movs	r3, #0
 80157ba:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	689b      	ldr	r3, [r3, #8]
 80157c2:	2240      	movs	r2, #64	; 0x40
 80157c4:	4013      	ands	r3, r2
 80157c6:	2b40      	cmp	r3, #64	; 0x40
 80157c8:	d12f      	bne.n	801582a <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80157ca:	f3ef 8310 	mrs	r3, PRIMASK
 80157ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80157d0:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80157d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80157d4:	2301      	movs	r3, #1
 80157d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	f383 8810 	msr	PRIMASK, r3
}
 80157de:	46c0      	nop			; (mov r8, r8)
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	689a      	ldr	r2, [r3, #8]
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2140      	movs	r1, #64	; 0x40
 80157ec:	438a      	bics	r2, r1
 80157ee:	609a      	str	r2, [r3, #8]
 80157f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	f383 8810 	msr	PRIMASK, r3
}
 80157fa:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2280      	movs	r2, #128	; 0x80
 8015800:	589b      	ldr	r3, [r3, r2]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d011      	beq.n	801582a <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2280      	movs	r2, #128	; 0x80
 801580a:	589b      	ldr	r3, [r3, r2]
 801580c:	0018      	movs	r0, r3
 801580e:	f7fb f82d 	bl	801086c <HAL_DMA_Abort_IT>
 8015812:	1e03      	subs	r3, r0, #0
 8015814:	d007      	beq.n	8015826 <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2280      	movs	r2, #128	; 0x80
 801581a:	589b      	ldr	r3, [r3, r2]
 801581c:	2200      	movs	r2, #0
 801581e:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8015820:	2301      	movs	r3, #1
 8015822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015824:	e001      	b.n	801582a <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8015826:	2300      	movs	r3, #0
 8015828:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 801582a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801582c:	2b01      	cmp	r3, #1
 801582e:	d13a      	bne.n	80158a6 <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2256      	movs	r2, #86	; 0x56
 8015834:	2100      	movs	r1, #0
 8015836:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	225e      	movs	r2, #94	; 0x5e
 801583c:	2100      	movs	r1, #0
 801583e:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2200      	movs	r2, #0
 8015844:	675a      	str	r2, [r3, #116]	; 0x74
    huart->TxISR = NULL;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2200      	movs	r2, #0
 801584a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2290      	movs	r2, #144	; 0x90
 8015850:	2100      	movs	r1, #0
 8015852:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	220f      	movs	r2, #15
 801585a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015860:	2380      	movs	r3, #128	; 0x80
 8015862:	059b      	lsls	r3, r3, #22
 8015864:	429a      	cmp	r2, r3
 8015866:	d107      	bne.n	8015878 <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	699a      	ldr	r2, [r3, #24]
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2110      	movs	r1, #16
 8015874:	430a      	orrs	r2, r1
 8015876:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	699a      	ldr	r2, [r3, #24]
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	2108      	movs	r1, #8
 8015884:	430a      	orrs	r2, r1
 8015886:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2288      	movs	r2, #136	; 0x88
 801588c:	2120      	movs	r1, #32
 801588e:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	228c      	movs	r2, #140	; 0x8c
 8015894:	2120      	movs	r1, #32
 8015896:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2200      	movs	r2, #0
 801589c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	0018      	movs	r0, r3
 80158a2:	f000 fb3b 	bl	8015f1c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80158a6:	2300      	movs	r3, #0
}
 80158a8:	0018      	movs	r0, r3
 80158aa:	46bd      	mov	sp, r7
 80158ac:	b018      	add	sp, #96	; 0x60
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	fffffe1f 	.word	0xfffffe1f
 80158b4:	ef7ffffe 	.word	0xef7ffffe
 80158b8:	0801679f 	.word	0x0801679f
 80158bc:	0801682f 	.word	0x0801682f

080158c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80158c0:	b5b0      	push	{r4, r5, r7, lr}
 80158c2:	b0aa      	sub	sp, #168	; 0xa8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	69db      	ldr	r3, [r3, #28]
 80158ce:	22a4      	movs	r2, #164	; 0xa4
 80158d0:	18b9      	adds	r1, r7, r2
 80158d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	20a0      	movs	r0, #160	; 0xa0
 80158dc:	1839      	adds	r1, r7, r0
 80158de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	689b      	ldr	r3, [r3, #8]
 80158e6:	249c      	movs	r4, #156	; 0x9c
 80158e8:	1939      	adds	r1, r7, r4
 80158ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80158ec:	0011      	movs	r1, r2
 80158ee:	18bb      	adds	r3, r7, r2
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	4aa2      	ldr	r2, [pc, #648]	; (8015b7c <HAL_UART_IRQHandler+0x2bc>)
 80158f4:	4013      	ands	r3, r2
 80158f6:	2298      	movs	r2, #152	; 0x98
 80158f8:	18bd      	adds	r5, r7, r2
 80158fa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80158fc:	18bb      	adds	r3, r7, r2
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d11a      	bne.n	801593a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015904:	187b      	adds	r3, r7, r1
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2220      	movs	r2, #32
 801590a:	4013      	ands	r3, r2
 801590c:	d015      	beq.n	801593a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801590e:	183b      	adds	r3, r7, r0
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	2220      	movs	r2, #32
 8015914:	4013      	ands	r3, r2
 8015916:	d105      	bne.n	8015924 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015918:	193b      	adds	r3, r7, r4
 801591a:	681a      	ldr	r2, [r3, #0]
 801591c:	2380      	movs	r3, #128	; 0x80
 801591e:	055b      	lsls	r3, r3, #21
 8015920:	4013      	ands	r3, r2
 8015922:	d00a      	beq.n	801593a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015928:	2b00      	cmp	r3, #0
 801592a:	d100      	bne.n	801592e <HAL_UART_IRQHandler+0x6e>
 801592c:	e2dc      	b.n	8015ee8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015932:	687a      	ldr	r2, [r7, #4]
 8015934:	0010      	movs	r0, r2
 8015936:	4798      	blx	r3
      }
      return;
 8015938:	e2d6      	b.n	8015ee8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801593a:	2398      	movs	r3, #152	; 0x98
 801593c:	18fb      	adds	r3, r7, r3
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d100      	bne.n	8015946 <HAL_UART_IRQHandler+0x86>
 8015944:	e122      	b.n	8015b8c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015946:	239c      	movs	r3, #156	; 0x9c
 8015948:	18fb      	adds	r3, r7, r3
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	4a8c      	ldr	r2, [pc, #560]	; (8015b80 <HAL_UART_IRQHandler+0x2c0>)
 801594e:	4013      	ands	r3, r2
 8015950:	d106      	bne.n	8015960 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015952:	23a0      	movs	r3, #160	; 0xa0
 8015954:	18fb      	adds	r3, r7, r3
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	4a8a      	ldr	r2, [pc, #552]	; (8015b84 <HAL_UART_IRQHandler+0x2c4>)
 801595a:	4013      	ands	r3, r2
 801595c:	d100      	bne.n	8015960 <HAL_UART_IRQHandler+0xa0>
 801595e:	e115      	b.n	8015b8c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015960:	23a4      	movs	r3, #164	; 0xa4
 8015962:	18fb      	adds	r3, r7, r3
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	2201      	movs	r2, #1
 8015968:	4013      	ands	r3, r2
 801596a:	d012      	beq.n	8015992 <HAL_UART_IRQHandler+0xd2>
 801596c:	23a0      	movs	r3, #160	; 0xa0
 801596e:	18fb      	adds	r3, r7, r3
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	2380      	movs	r3, #128	; 0x80
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	4013      	ands	r3, r2
 8015978:	d00b      	beq.n	8015992 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2201      	movs	r2, #1
 8015980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	2290      	movs	r2, #144	; 0x90
 8015986:	589b      	ldr	r3, [r3, r2]
 8015988:	2201      	movs	r2, #1
 801598a:	431a      	orrs	r2, r3
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2190      	movs	r1, #144	; 0x90
 8015990:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015992:	23a4      	movs	r3, #164	; 0xa4
 8015994:	18fb      	adds	r3, r7, r3
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2202      	movs	r2, #2
 801599a:	4013      	ands	r3, r2
 801599c:	d011      	beq.n	80159c2 <HAL_UART_IRQHandler+0x102>
 801599e:	239c      	movs	r3, #156	; 0x9c
 80159a0:	18fb      	adds	r3, r7, r3
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	2201      	movs	r2, #1
 80159a6:	4013      	ands	r3, r2
 80159a8:	d00b      	beq.n	80159c2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2202      	movs	r2, #2
 80159b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	2290      	movs	r2, #144	; 0x90
 80159b6:	589b      	ldr	r3, [r3, r2]
 80159b8:	2204      	movs	r2, #4
 80159ba:	431a      	orrs	r2, r3
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2190      	movs	r1, #144	; 0x90
 80159c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80159c2:	23a4      	movs	r3, #164	; 0xa4
 80159c4:	18fb      	adds	r3, r7, r3
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	2204      	movs	r2, #4
 80159ca:	4013      	ands	r3, r2
 80159cc:	d011      	beq.n	80159f2 <HAL_UART_IRQHandler+0x132>
 80159ce:	239c      	movs	r3, #156	; 0x9c
 80159d0:	18fb      	adds	r3, r7, r3
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2201      	movs	r2, #1
 80159d6:	4013      	ands	r3, r2
 80159d8:	d00b      	beq.n	80159f2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	2204      	movs	r2, #4
 80159e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2290      	movs	r2, #144	; 0x90
 80159e6:	589b      	ldr	r3, [r3, r2]
 80159e8:	2202      	movs	r2, #2
 80159ea:	431a      	orrs	r2, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2190      	movs	r1, #144	; 0x90
 80159f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80159f2:	23a4      	movs	r3, #164	; 0xa4
 80159f4:	18fb      	adds	r3, r7, r3
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	2208      	movs	r2, #8
 80159fa:	4013      	ands	r3, r2
 80159fc:	d017      	beq.n	8015a2e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80159fe:	23a0      	movs	r3, #160	; 0xa0
 8015a00:	18fb      	adds	r3, r7, r3
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2220      	movs	r2, #32
 8015a06:	4013      	ands	r3, r2
 8015a08:	d105      	bne.n	8015a16 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8015a0a:	239c      	movs	r3, #156	; 0x9c
 8015a0c:	18fb      	adds	r3, r7, r3
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	4a5b      	ldr	r2, [pc, #364]	; (8015b80 <HAL_UART_IRQHandler+0x2c0>)
 8015a12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015a14:	d00b      	beq.n	8015a2e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	2208      	movs	r2, #8
 8015a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2290      	movs	r2, #144	; 0x90
 8015a22:	589b      	ldr	r3, [r3, r2]
 8015a24:	2208      	movs	r2, #8
 8015a26:	431a      	orrs	r2, r3
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2190      	movs	r1, #144	; 0x90
 8015a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015a2e:	23a4      	movs	r3, #164	; 0xa4
 8015a30:	18fb      	adds	r3, r7, r3
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	2380      	movs	r3, #128	; 0x80
 8015a36:	011b      	lsls	r3, r3, #4
 8015a38:	4013      	ands	r3, r2
 8015a3a:	d013      	beq.n	8015a64 <HAL_UART_IRQHandler+0x1a4>
 8015a3c:	23a0      	movs	r3, #160	; 0xa0
 8015a3e:	18fb      	adds	r3, r7, r3
 8015a40:	681a      	ldr	r2, [r3, #0]
 8015a42:	2380      	movs	r3, #128	; 0x80
 8015a44:	04db      	lsls	r3, r3, #19
 8015a46:	4013      	ands	r3, r2
 8015a48:	d00c      	beq.n	8015a64 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	2280      	movs	r2, #128	; 0x80
 8015a50:	0112      	lsls	r2, r2, #4
 8015a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2290      	movs	r2, #144	; 0x90
 8015a58:	589b      	ldr	r3, [r3, r2]
 8015a5a:	2220      	movs	r2, #32
 8015a5c:	431a      	orrs	r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2190      	movs	r1, #144	; 0x90
 8015a62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2290      	movs	r2, #144	; 0x90
 8015a68:	589b      	ldr	r3, [r3, r2]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d100      	bne.n	8015a70 <HAL_UART_IRQHandler+0x1b0>
 8015a6e:	e23d      	b.n	8015eec <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015a70:	23a4      	movs	r3, #164	; 0xa4
 8015a72:	18fb      	adds	r3, r7, r3
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	2220      	movs	r2, #32
 8015a78:	4013      	ands	r3, r2
 8015a7a:	d015      	beq.n	8015aa8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015a7c:	23a0      	movs	r3, #160	; 0xa0
 8015a7e:	18fb      	adds	r3, r7, r3
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	2220      	movs	r2, #32
 8015a84:	4013      	ands	r3, r2
 8015a86:	d106      	bne.n	8015a96 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015a88:	239c      	movs	r3, #156	; 0x9c
 8015a8a:	18fb      	adds	r3, r7, r3
 8015a8c:	681a      	ldr	r2, [r3, #0]
 8015a8e:	2380      	movs	r3, #128	; 0x80
 8015a90:	055b      	lsls	r3, r3, #21
 8015a92:	4013      	ands	r3, r2
 8015a94:	d008      	beq.n	8015aa8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d004      	beq.n	8015aa8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	0010      	movs	r0, r2
 8015aa6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2290      	movs	r2, #144	; 0x90
 8015aac:	589b      	ldr	r3, [r3, r2]
 8015aae:	2194      	movs	r1, #148	; 0x94
 8015ab0:	187a      	adds	r2, r7, r1
 8015ab2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	689b      	ldr	r3, [r3, #8]
 8015aba:	2240      	movs	r2, #64	; 0x40
 8015abc:	4013      	ands	r3, r2
 8015abe:	2b40      	cmp	r3, #64	; 0x40
 8015ac0:	d004      	beq.n	8015acc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015ac2:	187b      	adds	r3, r7, r1
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	2228      	movs	r2, #40	; 0x28
 8015ac8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015aca:	d04c      	beq.n	8015b66 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	0018      	movs	r0, r3
 8015ad0:	f000 fde8 	bl	80166a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	689b      	ldr	r3, [r3, #8]
 8015ada:	2240      	movs	r2, #64	; 0x40
 8015adc:	4013      	ands	r3, r2
 8015ade:	2b40      	cmp	r3, #64	; 0x40
 8015ae0:	d13c      	bne.n	8015b5c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8015ae6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8015ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015aea:	2090      	movs	r0, #144	; 0x90
 8015aec:	183a      	adds	r2, r7, r0
 8015aee:	6013      	str	r3, [r2, #0]
 8015af0:	2301      	movs	r3, #1
 8015af2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015af6:	f383 8810 	msr	PRIMASK, r3
}
 8015afa:	46c0      	nop			; (mov r8, r8)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	689a      	ldr	r2, [r3, #8]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	2140      	movs	r1, #64	; 0x40
 8015b08:	438a      	bics	r2, r1
 8015b0a:	609a      	str	r2, [r3, #8]
 8015b0c:	183b      	adds	r3, r7, r0
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b14:	f383 8810 	msr	PRIMASK, r3
}
 8015b18:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	2280      	movs	r2, #128	; 0x80
 8015b1e:	589b      	ldr	r3, [r3, r2]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d016      	beq.n	8015b52 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2280      	movs	r2, #128	; 0x80
 8015b28:	589b      	ldr	r3, [r3, r2]
 8015b2a:	4a17      	ldr	r2, [pc, #92]	; (8015b88 <HAL_UART_IRQHandler+0x2c8>)
 8015b2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2280      	movs	r2, #128	; 0x80
 8015b32:	589b      	ldr	r3, [r3, r2]
 8015b34:	0018      	movs	r0, r3
 8015b36:	f7fa fe99 	bl	801086c <HAL_DMA_Abort_IT>
 8015b3a:	1e03      	subs	r3, r0, #0
 8015b3c:	d01c      	beq.n	8015b78 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2280      	movs	r2, #128	; 0x80
 8015b42:	589b      	ldr	r3, [r3, r2]
 8015b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b46:	687a      	ldr	r2, [r7, #4]
 8015b48:	2180      	movs	r1, #128	; 0x80
 8015b4a:	5852      	ldr	r2, [r2, r1]
 8015b4c:	0010      	movs	r0, r2
 8015b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015b50:	e012      	b.n	8015b78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	0018      	movs	r0, r3
 8015b56:	f7f8 fb67 	bl	800e228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015b5a:	e00d      	b.n	8015b78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	0018      	movs	r0, r3
 8015b60:	f7f8 fb62 	bl	800e228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015b64:	e008      	b.n	8015b78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	0018      	movs	r0, r3
 8015b6a:	f7f8 fb5d 	bl	800e228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2290      	movs	r2, #144	; 0x90
 8015b72:	2100      	movs	r1, #0
 8015b74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8015b76:	e1b9      	b.n	8015eec <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015b78:	46c0      	nop			; (mov r8, r8)
    return;
 8015b7a:	e1b7      	b.n	8015eec <HAL_UART_IRQHandler+0x62c>
 8015b7c:	0000080f 	.word	0x0000080f
 8015b80:	10000001 	.word	0x10000001
 8015b84:	04000120 	.word	0x04000120
 8015b88:	08016771 	.word	0x08016771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d000      	beq.n	8015b96 <HAL_UART_IRQHandler+0x2d6>
 8015b94:	e13e      	b.n	8015e14 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015b96:	23a4      	movs	r3, #164	; 0xa4
 8015b98:	18fb      	adds	r3, r7, r3
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2210      	movs	r2, #16
 8015b9e:	4013      	ands	r3, r2
 8015ba0:	d100      	bne.n	8015ba4 <HAL_UART_IRQHandler+0x2e4>
 8015ba2:	e137      	b.n	8015e14 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015ba4:	23a0      	movs	r3, #160	; 0xa0
 8015ba6:	18fb      	adds	r3, r7, r3
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2210      	movs	r2, #16
 8015bac:	4013      	ands	r3, r2
 8015bae:	d100      	bne.n	8015bb2 <HAL_UART_IRQHandler+0x2f2>
 8015bb0:	e130      	b.n	8015e14 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	2210      	movs	r2, #16
 8015bb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	689b      	ldr	r3, [r3, #8]
 8015bc0:	2240      	movs	r2, #64	; 0x40
 8015bc2:	4013      	ands	r3, r2
 8015bc4:	2b40      	cmp	r3, #64	; 0x40
 8015bc6:	d000      	beq.n	8015bca <HAL_UART_IRQHandler+0x30a>
 8015bc8:	e0a4      	b.n	8015d14 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2280      	movs	r2, #128	; 0x80
 8015bce:	589b      	ldr	r3, [r3, r2]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	685a      	ldr	r2, [r3, #4]
 8015bd4:	217e      	movs	r1, #126	; 0x7e
 8015bd6:	187b      	adds	r3, r7, r1
 8015bd8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8015bda:	187b      	adds	r3, r7, r1
 8015bdc:	881b      	ldrh	r3, [r3, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d100      	bne.n	8015be4 <HAL_UART_IRQHandler+0x324>
 8015be2:	e185      	b.n	8015ef0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	225c      	movs	r2, #92	; 0x5c
 8015be8:	5a9b      	ldrh	r3, [r3, r2]
 8015bea:	187a      	adds	r2, r7, r1
 8015bec:	8812      	ldrh	r2, [r2, #0]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d300      	bcc.n	8015bf4 <HAL_UART_IRQHandler+0x334>
 8015bf2:	e17d      	b.n	8015ef0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	187a      	adds	r2, r7, r1
 8015bf8:	215e      	movs	r1, #94	; 0x5e
 8015bfa:	8812      	ldrh	r2, [r2, #0]
 8015bfc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	2280      	movs	r2, #128	; 0x80
 8015c02:	589b      	ldr	r3, [r3, r2]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	2220      	movs	r2, #32
 8015c0a:	4013      	ands	r3, r2
 8015c0c:	d170      	bne.n	8015cf0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8015c12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8015c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015c16:	67bb      	str	r3, [r7, #120]	; 0x78
 8015c18:	2301      	movs	r3, #1
 8015c1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c1e:	f383 8810 	msr	PRIMASK, r3
}
 8015c22:	46c0      	nop			; (mov r8, r8)
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	49b4      	ldr	r1, [pc, #720]	; (8015f00 <HAL_UART_IRQHandler+0x640>)
 8015c30:	400a      	ands	r2, r1
 8015c32:	601a      	str	r2, [r3, #0]
 8015c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c3a:	f383 8810 	msr	PRIMASK, r3
}
 8015c3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c40:	f3ef 8310 	mrs	r3, PRIMASK
 8015c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8015c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c48:	677b      	str	r3, [r7, #116]	; 0x74
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c50:	f383 8810 	msr	PRIMASK, r3
}
 8015c54:	46c0      	nop			; (mov r8, r8)
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	689a      	ldr	r2, [r3, #8]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	2101      	movs	r1, #1
 8015c62:	438a      	bics	r2, r1
 8015c64:	609a      	str	r2, [r3, #8]
 8015c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c68:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c6c:	f383 8810 	msr	PRIMASK, r3
}
 8015c70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c72:	f3ef 8310 	mrs	r3, PRIMASK
 8015c76:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8015c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c82:	f383 8810 	msr	PRIMASK, r3
}
 8015c86:	46c0      	nop			; (mov r8, r8)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	689a      	ldr	r2, [r3, #8]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2140      	movs	r1, #64	; 0x40
 8015c94:	438a      	bics	r2, r1
 8015c96:	609a      	str	r2, [r3, #8]
 8015c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c9a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c9e:	f383 8810 	msr	PRIMASK, r3
}
 8015ca2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	228c      	movs	r2, #140	; 0x8c
 8015ca8:	2120      	movs	r1, #32
 8015caa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2200      	movs	r2, #0
 8015cb0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8015cb6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8015cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015cc2:	f383 8810 	msr	PRIMASK, r3
}
 8015cc6:	46c0      	nop			; (mov r8, r8)
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	2110      	movs	r1, #16
 8015cd4:	438a      	bics	r2, r1
 8015cd6:	601a      	str	r2, [r3, #0]
 8015cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015cda:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015cde:	f383 8810 	msr	PRIMASK, r3
}
 8015ce2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2280      	movs	r2, #128	; 0x80
 8015ce8:	589b      	ldr	r3, [r3, r2]
 8015cea:	0018      	movs	r0, r3
 8015cec:	f7fa fd5e 	bl	80107ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2202      	movs	r2, #2
 8015cf4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	225c      	movs	r2, #92	; 0x5c
 8015cfa:	5a9a      	ldrh	r2, [r3, r2]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	215e      	movs	r1, #94	; 0x5e
 8015d00:	5a5b      	ldrh	r3, [r3, r1]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	1ad3      	subs	r3, r2, r3
 8015d06:	b29a      	uxth	r2, r3
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	0011      	movs	r1, r2
 8015d0c:	0018      	movs	r0, r3
 8015d0e:	f000 f90d 	bl	8015f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015d12:	e0ed      	b.n	8015ef0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	225c      	movs	r2, #92	; 0x5c
 8015d18:	5a99      	ldrh	r1, [r3, r2]
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	225e      	movs	r2, #94	; 0x5e
 8015d1e:	5a9b      	ldrh	r3, [r3, r2]
 8015d20:	b29a      	uxth	r2, r3
 8015d22:	208e      	movs	r0, #142	; 0x8e
 8015d24:	183b      	adds	r3, r7, r0
 8015d26:	1a8a      	subs	r2, r1, r2
 8015d28:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	225e      	movs	r2, #94	; 0x5e
 8015d2e:	5a9b      	ldrh	r3, [r3, r2]
 8015d30:	b29b      	uxth	r3, r3
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d100      	bne.n	8015d38 <HAL_UART_IRQHandler+0x478>
 8015d36:	e0dd      	b.n	8015ef4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8015d38:	183b      	adds	r3, r7, r0
 8015d3a:	881b      	ldrh	r3, [r3, #0]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d100      	bne.n	8015d42 <HAL_UART_IRQHandler+0x482>
 8015d40:	e0d8      	b.n	8015ef4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d42:	f3ef 8310 	mrs	r3, PRIMASK
 8015d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d48:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d4a:	2488      	movs	r4, #136	; 0x88
 8015d4c:	193a      	adds	r2, r7, r4
 8015d4e:	6013      	str	r3, [r2, #0]
 8015d50:	2301      	movs	r3, #1
 8015d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	f383 8810 	msr	PRIMASK, r3
}
 8015d5a:	46c0      	nop			; (mov r8, r8)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	681a      	ldr	r2, [r3, #0]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	4967      	ldr	r1, [pc, #412]	; (8015f04 <HAL_UART_IRQHandler+0x644>)
 8015d68:	400a      	ands	r2, r1
 8015d6a:	601a      	str	r2, [r3, #0]
 8015d6c:	193b      	adds	r3, r7, r4
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	f383 8810 	msr	PRIMASK, r3
}
 8015d78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8015d7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8015d80:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015d82:	2484      	movs	r4, #132	; 0x84
 8015d84:	193a      	adds	r2, r7, r4
 8015d86:	6013      	str	r3, [r2, #0]
 8015d88:	2301      	movs	r3, #1
 8015d8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	f383 8810 	msr	PRIMASK, r3
}
 8015d92:	46c0      	nop			; (mov r8, r8)
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	689a      	ldr	r2, [r3, #8]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	495a      	ldr	r1, [pc, #360]	; (8015f08 <HAL_UART_IRQHandler+0x648>)
 8015da0:	400a      	ands	r2, r1
 8015da2:	609a      	str	r2, [r3, #8]
 8015da4:	193b      	adds	r3, r7, r4
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015daa:	6a3b      	ldr	r3, [r7, #32]
 8015dac:	f383 8810 	msr	PRIMASK, r3
}
 8015db0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	228c      	movs	r2, #140	; 0x8c
 8015db6:	2120      	movs	r1, #32
 8015db8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8015dca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8015dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015dce:	2480      	movs	r4, #128	; 0x80
 8015dd0:	193a      	adds	r2, r7, r4
 8015dd2:	6013      	str	r3, [r2, #0]
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dda:	f383 8810 	msr	PRIMASK, r3
}
 8015dde:	46c0      	nop			; (mov r8, r8)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	681a      	ldr	r2, [r3, #0]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	2110      	movs	r1, #16
 8015dec:	438a      	bics	r2, r1
 8015dee:	601a      	str	r2, [r3, #0]
 8015df0:	193b      	adds	r3, r7, r4
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df8:	f383 8810 	msr	PRIMASK, r3
}
 8015dfc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2202      	movs	r2, #2
 8015e02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8015e04:	183b      	adds	r3, r7, r0
 8015e06:	881a      	ldrh	r2, [r3, #0]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	0011      	movs	r1, r2
 8015e0c:	0018      	movs	r0, r3
 8015e0e:	f000 f88d 	bl	8015f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015e12:	e06f      	b.n	8015ef4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8015e14:	23a4      	movs	r3, #164	; 0xa4
 8015e16:	18fb      	adds	r3, r7, r3
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	2380      	movs	r3, #128	; 0x80
 8015e1c:	035b      	lsls	r3, r3, #13
 8015e1e:	4013      	ands	r3, r2
 8015e20:	d010      	beq.n	8015e44 <HAL_UART_IRQHandler+0x584>
 8015e22:	239c      	movs	r3, #156	; 0x9c
 8015e24:	18fb      	adds	r3, r7, r3
 8015e26:	681a      	ldr	r2, [r3, #0]
 8015e28:	2380      	movs	r3, #128	; 0x80
 8015e2a:	03db      	lsls	r3, r3, #15
 8015e2c:	4013      	ands	r3, r2
 8015e2e:	d009      	beq.n	8015e44 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2280      	movs	r2, #128	; 0x80
 8015e36:	0352      	lsls	r2, r2, #13
 8015e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	0018      	movs	r0, r3
 8015e3e:	f000 fd63 	bl	8016908 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015e42:	e05a      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8015e44:	23a4      	movs	r3, #164	; 0xa4
 8015e46:	18fb      	adds	r3, r7, r3
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2280      	movs	r2, #128	; 0x80
 8015e4c:	4013      	ands	r3, r2
 8015e4e:	d016      	beq.n	8015e7e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8015e50:	23a0      	movs	r3, #160	; 0xa0
 8015e52:	18fb      	adds	r3, r7, r3
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	2280      	movs	r2, #128	; 0x80
 8015e58:	4013      	ands	r3, r2
 8015e5a:	d106      	bne.n	8015e6a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8015e5c:	239c      	movs	r3, #156	; 0x9c
 8015e5e:	18fb      	adds	r3, r7, r3
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	2380      	movs	r3, #128	; 0x80
 8015e64:	041b      	lsls	r3, r3, #16
 8015e66:	4013      	ands	r3, r2
 8015e68:	d009      	beq.n	8015e7e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d042      	beq.n	8015ef8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	0010      	movs	r0, r2
 8015e7a:	4798      	blx	r3
    }
    return;
 8015e7c:	e03c      	b.n	8015ef8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8015e7e:	23a4      	movs	r3, #164	; 0xa4
 8015e80:	18fb      	adds	r3, r7, r3
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	2240      	movs	r2, #64	; 0x40
 8015e86:	4013      	ands	r3, r2
 8015e88:	d00a      	beq.n	8015ea0 <HAL_UART_IRQHandler+0x5e0>
 8015e8a:	23a0      	movs	r3, #160	; 0xa0
 8015e8c:	18fb      	adds	r3, r7, r3
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2240      	movs	r2, #64	; 0x40
 8015e92:	4013      	ands	r3, r2
 8015e94:	d004      	beq.n	8015ea0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	0018      	movs	r0, r3
 8015e9a:	f000 fd09 	bl	80168b0 <UART_EndTransmit_IT>
    return;
 8015e9e:	e02c      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8015ea0:	23a4      	movs	r3, #164	; 0xa4
 8015ea2:	18fb      	adds	r3, r7, r3
 8015ea4:	681a      	ldr	r2, [r3, #0]
 8015ea6:	2380      	movs	r3, #128	; 0x80
 8015ea8:	041b      	lsls	r3, r3, #16
 8015eaa:	4013      	ands	r3, r2
 8015eac:	d00b      	beq.n	8015ec6 <HAL_UART_IRQHandler+0x606>
 8015eae:	23a0      	movs	r3, #160	; 0xa0
 8015eb0:	18fb      	adds	r3, r7, r3
 8015eb2:	681a      	ldr	r2, [r3, #0]
 8015eb4:	2380      	movs	r3, #128	; 0x80
 8015eb6:	05db      	lsls	r3, r3, #23
 8015eb8:	4013      	ands	r3, r2
 8015eba:	d004      	beq.n	8015ec6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	0018      	movs	r0, r3
 8015ec0:	f000 fd32 	bl	8016928 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015ec4:	e019      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8015ec6:	23a4      	movs	r3, #164	; 0xa4
 8015ec8:	18fb      	adds	r3, r7, r3
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	2380      	movs	r3, #128	; 0x80
 8015ece:	045b      	lsls	r3, r3, #17
 8015ed0:	4013      	ands	r3, r2
 8015ed2:	d012      	beq.n	8015efa <HAL_UART_IRQHandler+0x63a>
 8015ed4:	23a0      	movs	r3, #160	; 0xa0
 8015ed6:	18fb      	adds	r3, r7, r3
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	da0d      	bge.n	8015efa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	0018      	movs	r0, r3
 8015ee2:	f000 fd19 	bl	8016918 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015ee6:	e008      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
      return;
 8015ee8:	46c0      	nop			; (mov r8, r8)
 8015eea:	e006      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
    return;
 8015eec:	46c0      	nop			; (mov r8, r8)
 8015eee:	e004      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
      return;
 8015ef0:	46c0      	nop			; (mov r8, r8)
 8015ef2:	e002      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
      return;
 8015ef4:	46c0      	nop			; (mov r8, r8)
 8015ef6:	e000      	b.n	8015efa <HAL_UART_IRQHandler+0x63a>
    return;
 8015ef8:	46c0      	nop			; (mov r8, r8)
  }
}
 8015efa:	46bd      	mov	sp, r7
 8015efc:	b02a      	add	sp, #168	; 0xa8
 8015efe:	bdb0      	pop	{r4, r5, r7, pc}
 8015f00:	fffffeff 	.word	0xfffffeff
 8015f04:	fffffedf 	.word	0xfffffedf
 8015f08:	effffffe 	.word	0xeffffffe

08015f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8015f14:	46c0      	nop			; (mov r8, r8)
 8015f16:	46bd      	mov	sp, r7
 8015f18:	b002      	add	sp, #8
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8015f24:	46c0      	nop			; (mov r8, r8)
 8015f26:	46bd      	mov	sp, r7
 8015f28:	b002      	add	sp, #8
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	000a      	movs	r2, r1
 8015f36:	1cbb      	adds	r3, r7, #2
 8015f38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015f3a:	46c0      	nop			; (mov r8, r8)
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	b002      	add	sp, #8
 8015f40:	bd80      	pop	{r7, pc}
	...

08015f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b088      	sub	sp, #32
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015f4c:	231b      	movs	r3, #27
 8015f4e:	18fb      	adds	r3, r7, r3
 8015f50:	2200      	movs	r2, #0
 8015f52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	689a      	ldr	r2, [r3, #8]
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	691b      	ldr	r3, [r3, #16]
 8015f5c:	431a      	orrs	r2, r3
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	695b      	ldr	r3, [r3, #20]
 8015f62:	431a      	orrs	r2, r3
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	69db      	ldr	r3, [r3, #28]
 8015f68:	4313      	orrs	r3, r2
 8015f6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	4ab4      	ldr	r2, [pc, #720]	; (8016244 <UART_SetConfig+0x300>)
 8015f74:	4013      	ands	r3, r2
 8015f76:	0019      	movs	r1, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	69fa      	ldr	r2, [r7, #28]
 8015f7e:	430a      	orrs	r2, r1
 8015f80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	4aaf      	ldr	r2, [pc, #700]	; (8016248 <UART_SetConfig+0x304>)
 8015f8a:	4013      	ands	r3, r2
 8015f8c:	0019      	movs	r1, r3
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	68da      	ldr	r2, [r3, #12]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	430a      	orrs	r2, r1
 8015f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	699b      	ldr	r3, [r3, #24]
 8015f9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	6a1b      	ldr	r3, [r3, #32]
 8015fa4:	69fa      	ldr	r2, [r7, #28]
 8015fa6:	4313      	orrs	r3, r2
 8015fa8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	689b      	ldr	r3, [r3, #8]
 8015fb0:	4aa6      	ldr	r2, [pc, #664]	; (801624c <UART_SetConfig+0x308>)
 8015fb2:	4013      	ands	r3, r2
 8015fb4:	0019      	movs	r1, r3
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	69fa      	ldr	r2, [r7, #28]
 8015fbc:	430a      	orrs	r2, r1
 8015fbe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fc6:	220f      	movs	r2, #15
 8015fc8:	4393      	bics	r3, r2
 8015fca:	0019      	movs	r1, r3
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	430a      	orrs	r2, r1
 8015fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	4a9c      	ldr	r2, [pc, #624]	; (8016250 <UART_SetConfig+0x30c>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d127      	bne.n	8016032 <UART_SetConfig+0xee>
 8015fe2:	4b9c      	ldr	r3, [pc, #624]	; (8016254 <UART_SetConfig+0x310>)
 8015fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015fe6:	2203      	movs	r2, #3
 8015fe8:	4013      	ands	r3, r2
 8015fea:	2b03      	cmp	r3, #3
 8015fec:	d017      	beq.n	801601e <UART_SetConfig+0xda>
 8015fee:	d81b      	bhi.n	8016028 <UART_SetConfig+0xe4>
 8015ff0:	2b02      	cmp	r3, #2
 8015ff2:	d00a      	beq.n	801600a <UART_SetConfig+0xc6>
 8015ff4:	d818      	bhi.n	8016028 <UART_SetConfig+0xe4>
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d002      	beq.n	8016000 <UART_SetConfig+0xbc>
 8015ffa:	2b01      	cmp	r3, #1
 8015ffc:	d00a      	beq.n	8016014 <UART_SetConfig+0xd0>
 8015ffe:	e013      	b.n	8016028 <UART_SetConfig+0xe4>
 8016000:	231a      	movs	r3, #26
 8016002:	18fb      	adds	r3, r7, r3
 8016004:	2200      	movs	r2, #0
 8016006:	701a      	strb	r2, [r3, #0]
 8016008:	e08f      	b.n	801612a <UART_SetConfig+0x1e6>
 801600a:	231a      	movs	r3, #26
 801600c:	18fb      	adds	r3, r7, r3
 801600e:	2202      	movs	r2, #2
 8016010:	701a      	strb	r2, [r3, #0]
 8016012:	e08a      	b.n	801612a <UART_SetConfig+0x1e6>
 8016014:	231a      	movs	r3, #26
 8016016:	18fb      	adds	r3, r7, r3
 8016018:	2204      	movs	r2, #4
 801601a:	701a      	strb	r2, [r3, #0]
 801601c:	e085      	b.n	801612a <UART_SetConfig+0x1e6>
 801601e:	231a      	movs	r3, #26
 8016020:	18fb      	adds	r3, r7, r3
 8016022:	2208      	movs	r2, #8
 8016024:	701a      	strb	r2, [r3, #0]
 8016026:	e080      	b.n	801612a <UART_SetConfig+0x1e6>
 8016028:	231a      	movs	r3, #26
 801602a:	18fb      	adds	r3, r7, r3
 801602c:	2210      	movs	r2, #16
 801602e:	701a      	strb	r2, [r3, #0]
 8016030:	e07b      	b.n	801612a <UART_SetConfig+0x1e6>
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	4a88      	ldr	r2, [pc, #544]	; (8016258 <UART_SetConfig+0x314>)
 8016038:	4293      	cmp	r3, r2
 801603a:	d127      	bne.n	801608c <UART_SetConfig+0x148>
 801603c:	4b85      	ldr	r3, [pc, #532]	; (8016254 <UART_SetConfig+0x310>)
 801603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016040:	220c      	movs	r2, #12
 8016042:	4013      	ands	r3, r2
 8016044:	2b0c      	cmp	r3, #12
 8016046:	d017      	beq.n	8016078 <UART_SetConfig+0x134>
 8016048:	d81b      	bhi.n	8016082 <UART_SetConfig+0x13e>
 801604a:	2b08      	cmp	r3, #8
 801604c:	d00a      	beq.n	8016064 <UART_SetConfig+0x120>
 801604e:	d818      	bhi.n	8016082 <UART_SetConfig+0x13e>
 8016050:	2b00      	cmp	r3, #0
 8016052:	d002      	beq.n	801605a <UART_SetConfig+0x116>
 8016054:	2b04      	cmp	r3, #4
 8016056:	d00a      	beq.n	801606e <UART_SetConfig+0x12a>
 8016058:	e013      	b.n	8016082 <UART_SetConfig+0x13e>
 801605a:	231a      	movs	r3, #26
 801605c:	18fb      	adds	r3, r7, r3
 801605e:	2200      	movs	r2, #0
 8016060:	701a      	strb	r2, [r3, #0]
 8016062:	e062      	b.n	801612a <UART_SetConfig+0x1e6>
 8016064:	231a      	movs	r3, #26
 8016066:	18fb      	adds	r3, r7, r3
 8016068:	2202      	movs	r2, #2
 801606a:	701a      	strb	r2, [r3, #0]
 801606c:	e05d      	b.n	801612a <UART_SetConfig+0x1e6>
 801606e:	231a      	movs	r3, #26
 8016070:	18fb      	adds	r3, r7, r3
 8016072:	2204      	movs	r2, #4
 8016074:	701a      	strb	r2, [r3, #0]
 8016076:	e058      	b.n	801612a <UART_SetConfig+0x1e6>
 8016078:	231a      	movs	r3, #26
 801607a:	18fb      	adds	r3, r7, r3
 801607c:	2208      	movs	r2, #8
 801607e:	701a      	strb	r2, [r3, #0]
 8016080:	e053      	b.n	801612a <UART_SetConfig+0x1e6>
 8016082:	231a      	movs	r3, #26
 8016084:	18fb      	adds	r3, r7, r3
 8016086:	2210      	movs	r2, #16
 8016088:	701a      	strb	r2, [r3, #0]
 801608a:	e04e      	b.n	801612a <UART_SetConfig+0x1e6>
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	4a72      	ldr	r2, [pc, #456]	; (801625c <UART_SetConfig+0x318>)
 8016092:	4293      	cmp	r3, r2
 8016094:	d127      	bne.n	80160e6 <UART_SetConfig+0x1a2>
 8016096:	4b6f      	ldr	r3, [pc, #444]	; (8016254 <UART_SetConfig+0x310>)
 8016098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801609a:	2230      	movs	r2, #48	; 0x30
 801609c:	4013      	ands	r3, r2
 801609e:	2b30      	cmp	r3, #48	; 0x30
 80160a0:	d017      	beq.n	80160d2 <UART_SetConfig+0x18e>
 80160a2:	d81b      	bhi.n	80160dc <UART_SetConfig+0x198>
 80160a4:	2b20      	cmp	r3, #32
 80160a6:	d00a      	beq.n	80160be <UART_SetConfig+0x17a>
 80160a8:	d818      	bhi.n	80160dc <UART_SetConfig+0x198>
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d002      	beq.n	80160b4 <UART_SetConfig+0x170>
 80160ae:	2b10      	cmp	r3, #16
 80160b0:	d00a      	beq.n	80160c8 <UART_SetConfig+0x184>
 80160b2:	e013      	b.n	80160dc <UART_SetConfig+0x198>
 80160b4:	231a      	movs	r3, #26
 80160b6:	18fb      	adds	r3, r7, r3
 80160b8:	2200      	movs	r2, #0
 80160ba:	701a      	strb	r2, [r3, #0]
 80160bc:	e035      	b.n	801612a <UART_SetConfig+0x1e6>
 80160be:	231a      	movs	r3, #26
 80160c0:	18fb      	adds	r3, r7, r3
 80160c2:	2202      	movs	r2, #2
 80160c4:	701a      	strb	r2, [r3, #0]
 80160c6:	e030      	b.n	801612a <UART_SetConfig+0x1e6>
 80160c8:	231a      	movs	r3, #26
 80160ca:	18fb      	adds	r3, r7, r3
 80160cc:	2204      	movs	r2, #4
 80160ce:	701a      	strb	r2, [r3, #0]
 80160d0:	e02b      	b.n	801612a <UART_SetConfig+0x1e6>
 80160d2:	231a      	movs	r3, #26
 80160d4:	18fb      	adds	r3, r7, r3
 80160d6:	2208      	movs	r2, #8
 80160d8:	701a      	strb	r2, [r3, #0]
 80160da:	e026      	b.n	801612a <UART_SetConfig+0x1e6>
 80160dc:	231a      	movs	r3, #26
 80160de:	18fb      	adds	r3, r7, r3
 80160e0:	2210      	movs	r2, #16
 80160e2:	701a      	strb	r2, [r3, #0]
 80160e4:	e021      	b.n	801612a <UART_SetConfig+0x1e6>
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	4a5d      	ldr	r2, [pc, #372]	; (8016260 <UART_SetConfig+0x31c>)
 80160ec:	4293      	cmp	r3, r2
 80160ee:	d104      	bne.n	80160fa <UART_SetConfig+0x1b6>
 80160f0:	231a      	movs	r3, #26
 80160f2:	18fb      	adds	r3, r7, r3
 80160f4:	2200      	movs	r2, #0
 80160f6:	701a      	strb	r2, [r3, #0]
 80160f8:	e017      	b.n	801612a <UART_SetConfig+0x1e6>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	4a59      	ldr	r2, [pc, #356]	; (8016264 <UART_SetConfig+0x320>)
 8016100:	4293      	cmp	r3, r2
 8016102:	d104      	bne.n	801610e <UART_SetConfig+0x1ca>
 8016104:	231a      	movs	r3, #26
 8016106:	18fb      	adds	r3, r7, r3
 8016108:	2200      	movs	r2, #0
 801610a:	701a      	strb	r2, [r3, #0]
 801610c:	e00d      	b.n	801612a <UART_SetConfig+0x1e6>
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	4a55      	ldr	r2, [pc, #340]	; (8016268 <UART_SetConfig+0x324>)
 8016114:	4293      	cmp	r3, r2
 8016116:	d104      	bne.n	8016122 <UART_SetConfig+0x1de>
 8016118:	231a      	movs	r3, #26
 801611a:	18fb      	adds	r3, r7, r3
 801611c:	2200      	movs	r2, #0
 801611e:	701a      	strb	r2, [r3, #0]
 8016120:	e003      	b.n	801612a <UART_SetConfig+0x1e6>
 8016122:	231a      	movs	r3, #26
 8016124:	18fb      	adds	r3, r7, r3
 8016126:	2210      	movs	r2, #16
 8016128:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	69da      	ldr	r2, [r3, #28]
 801612e:	2380      	movs	r3, #128	; 0x80
 8016130:	021b      	lsls	r3, r3, #8
 8016132:	429a      	cmp	r2, r3
 8016134:	d000      	beq.n	8016138 <UART_SetConfig+0x1f4>
 8016136:	e065      	b.n	8016204 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8016138:	231a      	movs	r3, #26
 801613a:	18fb      	adds	r3, r7, r3
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	2b08      	cmp	r3, #8
 8016140:	d015      	beq.n	801616e <UART_SetConfig+0x22a>
 8016142:	dc18      	bgt.n	8016176 <UART_SetConfig+0x232>
 8016144:	2b04      	cmp	r3, #4
 8016146:	d00d      	beq.n	8016164 <UART_SetConfig+0x220>
 8016148:	dc15      	bgt.n	8016176 <UART_SetConfig+0x232>
 801614a:	2b00      	cmp	r3, #0
 801614c:	d002      	beq.n	8016154 <UART_SetConfig+0x210>
 801614e:	2b02      	cmp	r3, #2
 8016150:	d005      	beq.n	801615e <UART_SetConfig+0x21a>
 8016152:	e010      	b.n	8016176 <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016154:	f7fc fbdc 	bl	8012910 <HAL_RCC_GetPCLK1Freq>
 8016158:	0003      	movs	r3, r0
 801615a:	617b      	str	r3, [r7, #20]
        break;
 801615c:	e012      	b.n	8016184 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801615e:	4b43      	ldr	r3, [pc, #268]	; (801626c <UART_SetConfig+0x328>)
 8016160:	617b      	str	r3, [r7, #20]
        break;
 8016162:	e00f      	b.n	8016184 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016164:	f7fc fb48 	bl	80127f8 <HAL_RCC_GetSysClockFreq>
 8016168:	0003      	movs	r3, r0
 801616a:	617b      	str	r3, [r7, #20]
        break;
 801616c:	e00a      	b.n	8016184 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801616e:	2380      	movs	r3, #128	; 0x80
 8016170:	021b      	lsls	r3, r3, #8
 8016172:	617b      	str	r3, [r7, #20]
        break;
 8016174:	e006      	b.n	8016184 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 8016176:	2300      	movs	r3, #0
 8016178:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801617a:	231b      	movs	r3, #27
 801617c:	18fb      	adds	r3, r7, r3
 801617e:	2201      	movs	r2, #1
 8016180:	701a      	strb	r2, [r3, #0]
        break;
 8016182:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016184:	697b      	ldr	r3, [r7, #20]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d100      	bne.n	801618c <UART_SetConfig+0x248>
 801618a:	e0a6      	b.n	80162da <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016190:	4b37      	ldr	r3, [pc, #220]	; (8016270 <UART_SetConfig+0x32c>)
 8016192:	0052      	lsls	r2, r2, #1
 8016194:	5ad3      	ldrh	r3, [r2, r3]
 8016196:	0019      	movs	r1, r3
 8016198:	6978      	ldr	r0, [r7, #20]
 801619a:	f7eb ffcd 	bl	8002138 <__udivsi3>
 801619e:	0003      	movs	r3, r0
 80161a0:	005a      	lsls	r2, r3, #1
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	085b      	lsrs	r3, r3, #1
 80161a8:	18d2      	adds	r2, r2, r3
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	685b      	ldr	r3, [r3, #4]
 80161ae:	0019      	movs	r1, r3
 80161b0:	0010      	movs	r0, r2
 80161b2:	f7eb ffc1 	bl	8002138 <__udivsi3>
 80161b6:	0003      	movs	r3, r0
 80161b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	2b0f      	cmp	r3, #15
 80161be:	d91c      	bls.n	80161fa <UART_SetConfig+0x2b6>
 80161c0:	693a      	ldr	r2, [r7, #16]
 80161c2:	2380      	movs	r3, #128	; 0x80
 80161c4:	025b      	lsls	r3, r3, #9
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d217      	bcs.n	80161fa <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	b29a      	uxth	r2, r3
 80161ce:	200e      	movs	r0, #14
 80161d0:	183b      	adds	r3, r7, r0
 80161d2:	210f      	movs	r1, #15
 80161d4:	438a      	bics	r2, r1
 80161d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	085b      	lsrs	r3, r3, #1
 80161dc:	b29b      	uxth	r3, r3
 80161de:	2207      	movs	r2, #7
 80161e0:	4013      	ands	r3, r2
 80161e2:	b299      	uxth	r1, r3
 80161e4:	183b      	adds	r3, r7, r0
 80161e6:	183a      	adds	r2, r7, r0
 80161e8:	8812      	ldrh	r2, [r2, #0]
 80161ea:	430a      	orrs	r2, r1
 80161ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	183a      	adds	r2, r7, r0
 80161f4:	8812      	ldrh	r2, [r2, #0]
 80161f6:	60da      	str	r2, [r3, #12]
 80161f8:	e06f      	b.n	80162da <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80161fa:	231b      	movs	r3, #27
 80161fc:	18fb      	adds	r3, r7, r3
 80161fe:	2201      	movs	r2, #1
 8016200:	701a      	strb	r2, [r3, #0]
 8016202:	e06a      	b.n	80162da <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016204:	231a      	movs	r3, #26
 8016206:	18fb      	adds	r3, r7, r3
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	2b08      	cmp	r3, #8
 801620c:	d015      	beq.n	801623a <UART_SetConfig+0x2f6>
 801620e:	dc31      	bgt.n	8016274 <UART_SetConfig+0x330>
 8016210:	2b04      	cmp	r3, #4
 8016212:	d00d      	beq.n	8016230 <UART_SetConfig+0x2ec>
 8016214:	dc2e      	bgt.n	8016274 <UART_SetConfig+0x330>
 8016216:	2b00      	cmp	r3, #0
 8016218:	d002      	beq.n	8016220 <UART_SetConfig+0x2dc>
 801621a:	2b02      	cmp	r3, #2
 801621c:	d005      	beq.n	801622a <UART_SetConfig+0x2e6>
 801621e:	e029      	b.n	8016274 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016220:	f7fc fb76 	bl	8012910 <HAL_RCC_GetPCLK1Freq>
 8016224:	0003      	movs	r3, r0
 8016226:	617b      	str	r3, [r7, #20]
        break;
 8016228:	e02b      	b.n	8016282 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801622a:	4b10      	ldr	r3, [pc, #64]	; (801626c <UART_SetConfig+0x328>)
 801622c:	617b      	str	r3, [r7, #20]
        break;
 801622e:	e028      	b.n	8016282 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016230:	f7fc fae2 	bl	80127f8 <HAL_RCC_GetSysClockFreq>
 8016234:	0003      	movs	r3, r0
 8016236:	617b      	str	r3, [r7, #20]
        break;
 8016238:	e023      	b.n	8016282 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801623a:	2380      	movs	r3, #128	; 0x80
 801623c:	021b      	lsls	r3, r3, #8
 801623e:	617b      	str	r3, [r7, #20]
        break;
 8016240:	e01f      	b.n	8016282 <UART_SetConfig+0x33e>
 8016242:	46c0      	nop			; (mov r8, r8)
 8016244:	cfff69f3 	.word	0xcfff69f3
 8016248:	ffffcfff 	.word	0xffffcfff
 801624c:	11fff4ff 	.word	0x11fff4ff
 8016250:	40013800 	.word	0x40013800
 8016254:	40021000 	.word	0x40021000
 8016258:	40004400 	.word	0x40004400
 801625c:	40004800 	.word	0x40004800
 8016260:	40004c00 	.word	0x40004c00
 8016264:	40005000 	.word	0x40005000
 8016268:	40013c00 	.word	0x40013c00
 801626c:	00f42400 	.word	0x00f42400
 8016270:	08031d38 	.word	0x08031d38
      default:
        pclk = 0U;
 8016274:	2300      	movs	r3, #0
 8016276:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8016278:	231b      	movs	r3, #27
 801627a:	18fb      	adds	r3, r7, r3
 801627c:	2201      	movs	r2, #1
 801627e:	701a      	strb	r2, [r3, #0]
        break;
 8016280:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d028      	beq.n	80162da <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801628c:	4b1d      	ldr	r3, [pc, #116]	; (8016304 <UART_SetConfig+0x3c0>)
 801628e:	0052      	lsls	r2, r2, #1
 8016290:	5ad3      	ldrh	r3, [r2, r3]
 8016292:	0019      	movs	r1, r3
 8016294:	6978      	ldr	r0, [r7, #20]
 8016296:	f7eb ff4f 	bl	8002138 <__udivsi3>
 801629a:	0003      	movs	r3, r0
 801629c:	001a      	movs	r2, r3
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	085b      	lsrs	r3, r3, #1
 80162a4:	18d2      	adds	r2, r2, r3
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	685b      	ldr	r3, [r3, #4]
 80162aa:	0019      	movs	r1, r3
 80162ac:	0010      	movs	r0, r2
 80162ae:	f7eb ff43 	bl	8002138 <__udivsi3>
 80162b2:	0003      	movs	r3, r0
 80162b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	2b0f      	cmp	r3, #15
 80162ba:	d90a      	bls.n	80162d2 <UART_SetConfig+0x38e>
 80162bc:	693a      	ldr	r2, [r7, #16]
 80162be:	2380      	movs	r3, #128	; 0x80
 80162c0:	025b      	lsls	r3, r3, #9
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d205      	bcs.n	80162d2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80162c6:	693b      	ldr	r3, [r7, #16]
 80162c8:	b29a      	uxth	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	60da      	str	r2, [r3, #12]
 80162d0:	e003      	b.n	80162da <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80162d2:	231b      	movs	r3, #27
 80162d4:	18fb      	adds	r3, r7, r3
 80162d6:	2201      	movs	r2, #1
 80162d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	226a      	movs	r2, #106	; 0x6a
 80162de:	2101      	movs	r1, #1
 80162e0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	2268      	movs	r2, #104	; 0x68
 80162e6:	2101      	movs	r1, #1
 80162e8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2200      	movs	r2, #0
 80162ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2200      	movs	r2, #0
 80162f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80162f6:	231b      	movs	r3, #27
 80162f8:	18fb      	adds	r3, r7, r3
 80162fa:	781b      	ldrb	r3, [r3, #0]
}
 80162fc:	0018      	movs	r0, r3
 80162fe:	46bd      	mov	sp, r7
 8016300:	b008      	add	sp, #32
 8016302:	bd80      	pop	{r7, pc}
 8016304:	08031d38 	.word	0x08031d38

08016308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016314:	2208      	movs	r2, #8
 8016316:	4013      	ands	r3, r2
 8016318:	d00b      	beq.n	8016332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	685b      	ldr	r3, [r3, #4]
 8016320:	4a4a      	ldr	r2, [pc, #296]	; (801644c <UART_AdvFeatureConfig+0x144>)
 8016322:	4013      	ands	r3, r2
 8016324:	0019      	movs	r1, r3
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	430a      	orrs	r2, r1
 8016330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016336:	2201      	movs	r2, #1
 8016338:	4013      	ands	r3, r2
 801633a:	d00b      	beq.n	8016354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	4a43      	ldr	r2, [pc, #268]	; (8016450 <UART_AdvFeatureConfig+0x148>)
 8016344:	4013      	ands	r3, r2
 8016346:	0019      	movs	r1, r3
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	430a      	orrs	r2, r1
 8016352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016358:	2202      	movs	r2, #2
 801635a:	4013      	ands	r3, r2
 801635c:	d00b      	beq.n	8016376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	4a3b      	ldr	r2, [pc, #236]	; (8016454 <UART_AdvFeatureConfig+0x14c>)
 8016366:	4013      	ands	r3, r2
 8016368:	0019      	movs	r1, r3
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	430a      	orrs	r2, r1
 8016374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801637a:	2204      	movs	r2, #4
 801637c:	4013      	ands	r3, r2
 801637e:	d00b      	beq.n	8016398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	685b      	ldr	r3, [r3, #4]
 8016386:	4a34      	ldr	r2, [pc, #208]	; (8016458 <UART_AdvFeatureConfig+0x150>)
 8016388:	4013      	ands	r3, r2
 801638a:	0019      	movs	r1, r3
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	430a      	orrs	r2, r1
 8016396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801639c:	2210      	movs	r2, #16
 801639e:	4013      	ands	r3, r2
 80163a0:	d00b      	beq.n	80163ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	689b      	ldr	r3, [r3, #8]
 80163a8:	4a2c      	ldr	r2, [pc, #176]	; (801645c <UART_AdvFeatureConfig+0x154>)
 80163aa:	4013      	ands	r3, r2
 80163ac:	0019      	movs	r1, r3
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	430a      	orrs	r2, r1
 80163b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163be:	2220      	movs	r2, #32
 80163c0:	4013      	ands	r3, r2
 80163c2:	d00b      	beq.n	80163dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	689b      	ldr	r3, [r3, #8]
 80163ca:	4a25      	ldr	r2, [pc, #148]	; (8016460 <UART_AdvFeatureConfig+0x158>)
 80163cc:	4013      	ands	r3, r2
 80163ce:	0019      	movs	r1, r3
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	430a      	orrs	r2, r1
 80163da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163e0:	2240      	movs	r2, #64	; 0x40
 80163e2:	4013      	ands	r3, r2
 80163e4:	d01d      	beq.n	8016422 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	685b      	ldr	r3, [r3, #4]
 80163ec:	4a1d      	ldr	r2, [pc, #116]	; (8016464 <UART_AdvFeatureConfig+0x15c>)
 80163ee:	4013      	ands	r3, r2
 80163f0:	0019      	movs	r1, r3
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	430a      	orrs	r2, r1
 80163fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016402:	2380      	movs	r3, #128	; 0x80
 8016404:	035b      	lsls	r3, r3, #13
 8016406:	429a      	cmp	r2, r3
 8016408:	d10b      	bne.n	8016422 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	4a15      	ldr	r2, [pc, #84]	; (8016468 <UART_AdvFeatureConfig+0x160>)
 8016412:	4013      	ands	r3, r2
 8016414:	0019      	movs	r1, r3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	430a      	orrs	r2, r1
 8016420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016426:	2280      	movs	r2, #128	; 0x80
 8016428:	4013      	ands	r3, r2
 801642a:	d00b      	beq.n	8016444 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	4a0e      	ldr	r2, [pc, #56]	; (801646c <UART_AdvFeatureConfig+0x164>)
 8016434:	4013      	ands	r3, r2
 8016436:	0019      	movs	r1, r3
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	430a      	orrs	r2, r1
 8016442:	605a      	str	r2, [r3, #4]
  }
}
 8016444:	46c0      	nop			; (mov r8, r8)
 8016446:	46bd      	mov	sp, r7
 8016448:	b002      	add	sp, #8
 801644a:	bd80      	pop	{r7, pc}
 801644c:	ffff7fff 	.word	0xffff7fff
 8016450:	fffdffff 	.word	0xfffdffff
 8016454:	fffeffff 	.word	0xfffeffff
 8016458:	fffbffff 	.word	0xfffbffff
 801645c:	ffffefff 	.word	0xffffefff
 8016460:	ffffdfff 	.word	0xffffdfff
 8016464:	ffefffff 	.word	0xffefffff
 8016468:	ff9fffff 	.word	0xff9fffff
 801646c:	fff7ffff 	.word	0xfff7ffff

08016470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b092      	sub	sp, #72	; 0x48
 8016474:	af02      	add	r7, sp, #8
 8016476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2290      	movs	r2, #144	; 0x90
 801647c:	2100      	movs	r1, #0
 801647e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016480:	f7f8 ff88 	bl	800f394 <HAL_GetTick>
 8016484:	0003      	movs	r3, r0
 8016486:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	2208      	movs	r2, #8
 8016490:	4013      	ands	r3, r2
 8016492:	2b08      	cmp	r3, #8
 8016494:	d12d      	bne.n	80164f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016498:	2280      	movs	r2, #128	; 0x80
 801649a:	0391      	lsls	r1, r2, #14
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	4a47      	ldr	r2, [pc, #284]	; (80165bc <UART_CheckIdleState+0x14c>)
 80164a0:	9200      	str	r2, [sp, #0]
 80164a2:	2200      	movs	r2, #0
 80164a4:	f000 f88e 	bl	80165c4 <UART_WaitOnFlagUntilTimeout>
 80164a8:	1e03      	subs	r3, r0, #0
 80164aa:	d022      	beq.n	80164f2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164ac:	f3ef 8310 	mrs	r3, PRIMASK
 80164b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80164b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80164b6:	2301      	movs	r3, #1
 80164b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164bc:	f383 8810 	msr	PRIMASK, r3
}
 80164c0:	46c0      	nop			; (mov r8, r8)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	681a      	ldr	r2, [r3, #0]
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	2180      	movs	r1, #128	; 0x80
 80164ce:	438a      	bics	r2, r1
 80164d0:	601a      	str	r2, [r3, #0]
 80164d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d8:	f383 8810 	msr	PRIMASK, r3
}
 80164dc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	2288      	movs	r2, #136	; 0x88
 80164e2:	2120      	movs	r1, #32
 80164e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2284      	movs	r2, #132	; 0x84
 80164ea:	2100      	movs	r1, #0
 80164ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80164ee:	2303      	movs	r3, #3
 80164f0:	e060      	b.n	80165b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2204      	movs	r2, #4
 80164fa:	4013      	ands	r3, r2
 80164fc:	2b04      	cmp	r3, #4
 80164fe:	d146      	bne.n	801658e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016502:	2280      	movs	r2, #128	; 0x80
 8016504:	03d1      	lsls	r1, r2, #15
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	4a2c      	ldr	r2, [pc, #176]	; (80165bc <UART_CheckIdleState+0x14c>)
 801650a:	9200      	str	r2, [sp, #0]
 801650c:	2200      	movs	r2, #0
 801650e:	f000 f859 	bl	80165c4 <UART_WaitOnFlagUntilTimeout>
 8016512:	1e03      	subs	r3, r0, #0
 8016514:	d03b      	beq.n	801658e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016516:	f3ef 8310 	mrs	r3, PRIMASK
 801651a:	60fb      	str	r3, [r7, #12]
  return(result);
 801651c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801651e:	637b      	str	r3, [r7, #52]	; 0x34
 8016520:	2301      	movs	r3, #1
 8016522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016524:	693b      	ldr	r3, [r7, #16]
 8016526:	f383 8810 	msr	PRIMASK, r3
}
 801652a:	46c0      	nop			; (mov r8, r8)
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	681a      	ldr	r2, [r3, #0]
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4922      	ldr	r1, [pc, #136]	; (80165c0 <UART_CheckIdleState+0x150>)
 8016538:	400a      	ands	r2, r1
 801653a:	601a      	str	r2, [r3, #0]
 801653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801653e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	f383 8810 	msr	PRIMASK, r3
}
 8016546:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016548:	f3ef 8310 	mrs	r3, PRIMASK
 801654c:	61bb      	str	r3, [r7, #24]
  return(result);
 801654e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016550:	633b      	str	r3, [r7, #48]	; 0x30
 8016552:	2301      	movs	r3, #1
 8016554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016556:	69fb      	ldr	r3, [r7, #28]
 8016558:	f383 8810 	msr	PRIMASK, r3
}
 801655c:	46c0      	nop			; (mov r8, r8)
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	689a      	ldr	r2, [r3, #8]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2101      	movs	r1, #1
 801656a:	438a      	bics	r2, r1
 801656c:	609a      	str	r2, [r3, #8]
 801656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016572:	6a3b      	ldr	r3, [r7, #32]
 8016574:	f383 8810 	msr	PRIMASK, r3
}
 8016578:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	228c      	movs	r2, #140	; 0x8c
 801657e:	2120      	movs	r1, #32
 8016580:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2284      	movs	r2, #132	; 0x84
 8016586:	2100      	movs	r1, #0
 8016588:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801658a:	2303      	movs	r3, #3
 801658c:	e012      	b.n	80165b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2288      	movs	r2, #136	; 0x88
 8016592:	2120      	movs	r1, #32
 8016594:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	228c      	movs	r2, #140	; 0x8c
 801659a:	2120      	movs	r1, #32
 801659c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2200      	movs	r2, #0
 80165a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2200      	movs	r2, #0
 80165a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2284      	movs	r2, #132	; 0x84
 80165ae:	2100      	movs	r1, #0
 80165b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80165b2:	2300      	movs	r3, #0
}
 80165b4:	0018      	movs	r0, r3
 80165b6:	46bd      	mov	sp, r7
 80165b8:	b010      	add	sp, #64	; 0x40
 80165ba:	bd80      	pop	{r7, pc}
 80165bc:	01ffffff 	.word	0x01ffffff
 80165c0:	fffffedf 	.word	0xfffffedf

080165c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b084      	sub	sp, #16
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	60f8      	str	r0, [r7, #12]
 80165cc:	60b9      	str	r1, [r7, #8]
 80165ce:	603b      	str	r3, [r7, #0]
 80165d0:	1dfb      	adds	r3, r7, #7
 80165d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80165d4:	e051      	b.n	801667a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80165d6:	69bb      	ldr	r3, [r7, #24]
 80165d8:	3301      	adds	r3, #1
 80165da:	d04e      	beq.n	801667a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80165dc:	f7f8 feda 	bl	800f394 <HAL_GetTick>
 80165e0:	0002      	movs	r2, r0
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	1ad3      	subs	r3, r2, r3
 80165e6:	69ba      	ldr	r2, [r7, #24]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d302      	bcc.n	80165f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80165ec:	69bb      	ldr	r3, [r7, #24]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d101      	bne.n	80165f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80165f2:	2303      	movs	r3, #3
 80165f4:	e051      	b.n	801669a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	2204      	movs	r2, #4
 80165fe:	4013      	ands	r3, r2
 8016600:	d03b      	beq.n	801667a <UART_WaitOnFlagUntilTimeout+0xb6>
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	2b80      	cmp	r3, #128	; 0x80
 8016606:	d038      	beq.n	801667a <UART_WaitOnFlagUntilTimeout+0xb6>
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	2b40      	cmp	r3, #64	; 0x40
 801660c:	d035      	beq.n	801667a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	69db      	ldr	r3, [r3, #28]
 8016614:	2208      	movs	r2, #8
 8016616:	4013      	ands	r3, r2
 8016618:	2b08      	cmp	r3, #8
 801661a:	d111      	bne.n	8016640 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	2208      	movs	r2, #8
 8016622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	0018      	movs	r0, r3
 8016628:	f000 f83c 	bl	80166a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	2290      	movs	r2, #144	; 0x90
 8016630:	2108      	movs	r1, #8
 8016632:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2284      	movs	r2, #132	; 0x84
 8016638:	2100      	movs	r1, #0
 801663a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801663c:	2301      	movs	r3, #1
 801663e:	e02c      	b.n	801669a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	69da      	ldr	r2, [r3, #28]
 8016646:	2380      	movs	r3, #128	; 0x80
 8016648:	011b      	lsls	r3, r3, #4
 801664a:	401a      	ands	r2, r3
 801664c:	2380      	movs	r3, #128	; 0x80
 801664e:	011b      	lsls	r3, r3, #4
 8016650:	429a      	cmp	r2, r3
 8016652:	d112      	bne.n	801667a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2280      	movs	r2, #128	; 0x80
 801665a:	0112      	lsls	r2, r2, #4
 801665c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	0018      	movs	r0, r3
 8016662:	f000 f81f 	bl	80166a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2290      	movs	r2, #144	; 0x90
 801666a:	2120      	movs	r1, #32
 801666c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	2284      	movs	r2, #132	; 0x84
 8016672:	2100      	movs	r1, #0
 8016674:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8016676:	2303      	movs	r3, #3
 8016678:	e00f      	b.n	801669a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	69db      	ldr	r3, [r3, #28]
 8016680:	68ba      	ldr	r2, [r7, #8]
 8016682:	4013      	ands	r3, r2
 8016684:	68ba      	ldr	r2, [r7, #8]
 8016686:	1ad3      	subs	r3, r2, r3
 8016688:	425a      	negs	r2, r3
 801668a:	4153      	adcs	r3, r2
 801668c:	b2db      	uxtb	r3, r3
 801668e:	001a      	movs	r2, r3
 8016690:	1dfb      	adds	r3, r7, #7
 8016692:	781b      	ldrb	r3, [r3, #0]
 8016694:	429a      	cmp	r2, r3
 8016696:	d09e      	beq.n	80165d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016698:	2300      	movs	r3, #0
}
 801669a:	0018      	movs	r0, r3
 801669c:	46bd      	mov	sp, r7
 801669e:	b004      	add	sp, #16
 80166a0:	bd80      	pop	{r7, pc}
	...

080166a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b08e      	sub	sp, #56	; 0x38
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166ac:	f3ef 8310 	mrs	r3, PRIMASK
 80166b0:	617b      	str	r3, [r7, #20]
  return(result);
 80166b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80166b4:	637b      	str	r3, [r7, #52]	; 0x34
 80166b6:	2301      	movs	r3, #1
 80166b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166ba:	69bb      	ldr	r3, [r7, #24]
 80166bc:	f383 8810 	msr	PRIMASK, r3
}
 80166c0:	46c0      	nop			; (mov r8, r8)
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	4926      	ldr	r1, [pc, #152]	; (8016768 <UART_EndRxTransfer+0xc4>)
 80166ce:	400a      	ands	r2, r1
 80166d0:	601a      	str	r2, [r3, #0]
 80166d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166d6:	69fb      	ldr	r3, [r7, #28]
 80166d8:	f383 8810 	msr	PRIMASK, r3
}
 80166dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166de:	f3ef 8310 	mrs	r3, PRIMASK
 80166e2:	623b      	str	r3, [r7, #32]
  return(result);
 80166e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80166e6:	633b      	str	r3, [r7, #48]	; 0x30
 80166e8:	2301      	movs	r3, #1
 80166ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ee:	f383 8810 	msr	PRIMASK, r3
}
 80166f2:	46c0      	nop			; (mov r8, r8)
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	689a      	ldr	r2, [r3, #8]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	491b      	ldr	r1, [pc, #108]	; (801676c <UART_EndRxTransfer+0xc8>)
 8016700:	400a      	ands	r2, r1
 8016702:	609a      	str	r2, [r3, #8]
 8016704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016706:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670a:	f383 8810 	msr	PRIMASK, r3
}
 801670e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016714:	2b01      	cmp	r3, #1
 8016716:	d118      	bne.n	801674a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016718:	f3ef 8310 	mrs	r3, PRIMASK
 801671c:	60bb      	str	r3, [r7, #8]
  return(result);
 801671e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016722:	2301      	movs	r3, #1
 8016724:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	f383 8810 	msr	PRIMASK, r3
}
 801672c:	46c0      	nop			; (mov r8, r8)
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	2110      	movs	r1, #16
 801673a:	438a      	bics	r2, r1
 801673c:	601a      	str	r2, [r3, #0]
 801673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	f383 8810 	msr	PRIMASK, r3
}
 8016748:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	228c      	movs	r2, #140	; 0x8c
 801674e:	2120      	movs	r1, #32
 8016750:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	2200      	movs	r2, #0
 8016756:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2200      	movs	r2, #0
 801675c:	675a      	str	r2, [r3, #116]	; 0x74
}
 801675e:	46c0      	nop			; (mov r8, r8)
 8016760:	46bd      	mov	sp, r7
 8016762:	b00e      	add	sp, #56	; 0x38
 8016764:	bd80      	pop	{r7, pc}
 8016766:	46c0      	nop			; (mov r8, r8)
 8016768:	fffffedf 	.word	0xfffffedf
 801676c:	effffffe 	.word	0xeffffffe

08016770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801677c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	225e      	movs	r2, #94	; 0x5e
 8016782:	2100      	movs	r1, #0
 8016784:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	2256      	movs	r2, #86	; 0x56
 801678a:	2100      	movs	r1, #0
 801678c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	0018      	movs	r0, r3
 8016792:	f7f7 fd49 	bl	800e228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016796:	46c0      	nop			; (mov r8, r8)
 8016798:	46bd      	mov	sp, r7
 801679a:	b004      	add	sp, #16
 801679c:	bd80      	pop	{r7, pc}

0801679e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801679e:	b580      	push	{r7, lr}
 80167a0:	b084      	sub	sp, #16
 80167a2:	af00      	add	r7, sp, #0
 80167a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167aa:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80167b0:	2200      	movs	r2, #0
 80167b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2280      	movs	r2, #128	; 0x80
 80167b8:	589b      	ldr	r3, [r3, r2]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d005      	beq.n	80167ca <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2280      	movs	r2, #128	; 0x80
 80167c2:	589b      	ldr	r3, [r3, r2]
 80167c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d12d      	bne.n	8016826 <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	2256      	movs	r2, #86	; 0x56
 80167ce:	2100      	movs	r1, #0
 80167d0:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	225e      	movs	r2, #94	; 0x5e
 80167d6:	2100      	movs	r1, #0
 80167d8:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	2290      	movs	r2, #144	; 0x90
 80167de:	2100      	movs	r1, #0
 80167e0:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	220f      	movs	r2, #15
 80167e8:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80167ee:	2380      	movs	r3, #128	; 0x80
 80167f0:	059b      	lsls	r3, r3, #22
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d107      	bne.n	8016806 <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	699a      	ldr	r2, [r3, #24]
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2110      	movs	r1, #16
 8016802:	430a      	orrs	r2, r1
 8016804:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2288      	movs	r2, #136	; 0x88
 801680a:	2120      	movs	r1, #32
 801680c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	228c      	movs	r2, #140	; 0x8c
 8016812:	2120      	movs	r1, #32
 8016814:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2200      	movs	r2, #0
 801681a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	0018      	movs	r0, r3
 8016820:	f7ff fb7c 	bl	8015f1c <HAL_UART_AbortCpltCallback>
 8016824:	e000      	b.n	8016828 <UART_DMATxAbortCallback+0x8a>
      return;
 8016826:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016828:	46bd      	mov	sp, r7
 801682a:	b004      	add	sp, #16
 801682c:	bd80      	pop	{r7, pc}

0801682e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801682e:	b580      	push	{r7, lr}
 8016830:	b084      	sub	sp, #16
 8016832:	af00      	add	r7, sp, #0
 8016834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801683a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	2280      	movs	r2, #128	; 0x80
 8016840:	589b      	ldr	r3, [r3, r2]
 8016842:	2200      	movs	r2, #0
 8016844:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801684a:	2b00      	cmp	r3, #0
 801684c:	d004      	beq.n	8016858 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016854:	2b00      	cmp	r3, #0
 8016856:	d127      	bne.n	80168a8 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2256      	movs	r2, #86	; 0x56
 801685c:	2100      	movs	r1, #0
 801685e:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	225e      	movs	r2, #94	; 0x5e
 8016864:	2100      	movs	r1, #0
 8016866:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	2290      	movs	r2, #144	; 0x90
 801686c:	2100      	movs	r1, #0
 801686e:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	220f      	movs	r2, #15
 8016876:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	699a      	ldr	r2, [r3, #24]
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	2108      	movs	r1, #8
 8016884:	430a      	orrs	r2, r1
 8016886:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	2288      	movs	r2, #136	; 0x88
 801688c:	2120      	movs	r1, #32
 801688e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	228c      	movs	r2, #140	; 0x8c
 8016894:	2120      	movs	r1, #32
 8016896:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	2200      	movs	r2, #0
 801689c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	0018      	movs	r0, r3
 80168a2:	f7ff fb3b 	bl	8015f1c <HAL_UART_AbortCpltCallback>
 80168a6:	e000      	b.n	80168aa <UART_DMARxAbortCallback+0x7c>
      return;
 80168a8:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80168aa:	46bd      	mov	sp, r7
 80168ac:	b004      	add	sp, #16
 80168ae:	bd80      	pop	{r7, pc}

080168b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b086      	sub	sp, #24
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168b8:	f3ef 8310 	mrs	r3, PRIMASK
 80168bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80168be:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80168c0:	617b      	str	r3, [r7, #20]
 80168c2:	2301      	movs	r3, #1
 80168c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	f383 8810 	msr	PRIMASK, r3
}
 80168cc:	46c0      	nop			; (mov r8, r8)
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	681a      	ldr	r2, [r3, #0]
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	2140      	movs	r1, #64	; 0x40
 80168da:	438a      	bics	r2, r1
 80168dc:	601a      	str	r2, [r3, #0]
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	f383 8810 	msr	PRIMASK, r3
}
 80168e8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2288      	movs	r2, #136	; 0x88
 80168ee:	2120      	movs	r1, #32
 80168f0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2200      	movs	r2, #0
 80168f6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	0018      	movs	r0, r3
 80168fc:	f7ff fb06 	bl	8015f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016900:	46c0      	nop			; (mov r8, r8)
 8016902:	46bd      	mov	sp, r7
 8016904:	b006      	add	sp, #24
 8016906:	bd80      	pop	{r7, pc}

08016908 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016910:	46c0      	nop			; (mov r8, r8)
 8016912:	46bd      	mov	sp, r7
 8016914:	b002      	add	sp, #8
 8016916:	bd80      	pop	{r7, pc}

08016918 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016920:	46c0      	nop			; (mov r8, r8)
 8016922:	46bd      	mov	sp, r7
 8016924:	b002      	add	sp, #8
 8016926:	bd80      	pop	{r7, pc}

08016928 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016930:	46c0      	nop			; (mov r8, r8)
 8016932:	46bd      	mov	sp, r7
 8016934:	b002      	add	sp, #8
 8016936:	bd80      	pop	{r7, pc}

08016938 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b084      	sub	sp, #16
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2284      	movs	r2, #132	; 0x84
 8016944:	5c9b      	ldrb	r3, [r3, r2]
 8016946:	2b01      	cmp	r3, #1
 8016948:	d101      	bne.n	801694e <HAL_UARTEx_DisableFifoMode+0x16>
 801694a:	2302      	movs	r3, #2
 801694c:	e027      	b.n	801699e <HAL_UARTEx_DisableFifoMode+0x66>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2284      	movs	r2, #132	; 0x84
 8016952:	2101      	movs	r1, #1
 8016954:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2288      	movs	r2, #136	; 0x88
 801695a:	2124      	movs	r1, #36	; 0x24
 801695c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	2101      	movs	r1, #1
 8016972:	438a      	bics	r2, r1
 8016974:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	4a0b      	ldr	r2, [pc, #44]	; (80169a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 801697a:	4013      	ands	r3, r2
 801697c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2200      	movs	r2, #0
 8016982:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	68fa      	ldr	r2, [r7, #12]
 801698a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2288      	movs	r2, #136	; 0x88
 8016990:	2120      	movs	r1, #32
 8016992:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2284      	movs	r2, #132	; 0x84
 8016998:	2100      	movs	r1, #0
 801699a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801699c:	2300      	movs	r3, #0
}
 801699e:	0018      	movs	r0, r3
 80169a0:	46bd      	mov	sp, r7
 80169a2:	b004      	add	sp, #16
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	46c0      	nop			; (mov r8, r8)
 80169a8:	dfffffff 	.word	0xdfffffff

080169ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b084      	sub	sp, #16
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2284      	movs	r2, #132	; 0x84
 80169ba:	5c9b      	ldrb	r3, [r3, r2]
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d101      	bne.n	80169c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80169c0:	2302      	movs	r3, #2
 80169c2:	e02e      	b.n	8016a22 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2284      	movs	r2, #132	; 0x84
 80169c8:	2101      	movs	r1, #1
 80169ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2288      	movs	r2, #136	; 0x88
 80169d0:	2124      	movs	r1, #36	; 0x24
 80169d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	2101      	movs	r1, #1
 80169e8:	438a      	bics	r2, r1
 80169ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	689b      	ldr	r3, [r3, #8]
 80169f2:	00db      	lsls	r3, r3, #3
 80169f4:	08d9      	lsrs	r1, r3, #3
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	683a      	ldr	r2, [r7, #0]
 80169fc:	430a      	orrs	r2, r1
 80169fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	0018      	movs	r0, r3
 8016a04:	f000 f854 	bl	8016ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2288      	movs	r2, #136	; 0x88
 8016a14:	2120      	movs	r1, #32
 8016a16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2284      	movs	r2, #132	; 0x84
 8016a1c:	2100      	movs	r1, #0
 8016a1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a20:	2300      	movs	r3, #0
}
 8016a22:	0018      	movs	r0, r3
 8016a24:	46bd      	mov	sp, r7
 8016a26:	b004      	add	sp, #16
 8016a28:	bd80      	pop	{r7, pc}
	...

08016a2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2284      	movs	r2, #132	; 0x84
 8016a3a:	5c9b      	ldrb	r3, [r3, r2]
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d101      	bne.n	8016a44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016a40:	2302      	movs	r3, #2
 8016a42:	e02f      	b.n	8016aa4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2284      	movs	r2, #132	; 0x84
 8016a48:	2101      	movs	r1, #1
 8016a4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2288      	movs	r2, #136	; 0x88
 8016a50:	2124      	movs	r1, #36	; 0x24
 8016a52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	681a      	ldr	r2, [r3, #0]
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	2101      	movs	r1, #1
 8016a68:	438a      	bics	r2, r1
 8016a6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	689b      	ldr	r3, [r3, #8]
 8016a72:	4a0e      	ldr	r2, [pc, #56]	; (8016aac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8016a74:	4013      	ands	r3, r2
 8016a76:	0019      	movs	r1, r3
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	683a      	ldr	r2, [r7, #0]
 8016a7e:	430a      	orrs	r2, r1
 8016a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	0018      	movs	r0, r3
 8016a86:	f000 f813 	bl	8016ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	68fa      	ldr	r2, [r7, #12]
 8016a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2288      	movs	r2, #136	; 0x88
 8016a96:	2120      	movs	r1, #32
 8016a98:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2284      	movs	r2, #132	; 0x84
 8016a9e:	2100      	movs	r1, #0
 8016aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016aa2:	2300      	movs	r3, #0
}
 8016aa4:	0018      	movs	r0, r3
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	b004      	add	sp, #16
 8016aaa:	bd80      	pop	{r7, pc}
 8016aac:	f1ffffff 	.word	0xf1ffffff

08016ab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ab2:	b085      	sub	sp, #20
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d108      	bne.n	8016ad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	226a      	movs	r2, #106	; 0x6a
 8016ac4:	2101      	movs	r1, #1
 8016ac6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2268      	movs	r2, #104	; 0x68
 8016acc:	2101      	movs	r1, #1
 8016ace:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016ad0:	e043      	b.n	8016b5a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016ad2:	260f      	movs	r6, #15
 8016ad4:	19bb      	adds	r3, r7, r6
 8016ad6:	2208      	movs	r2, #8
 8016ad8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016ada:	200e      	movs	r0, #14
 8016adc:	183b      	adds	r3, r7, r0
 8016ade:	2208      	movs	r2, #8
 8016ae0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	689b      	ldr	r3, [r3, #8]
 8016ae8:	0e5b      	lsrs	r3, r3, #25
 8016aea:	b2da      	uxtb	r2, r3
 8016aec:	240d      	movs	r4, #13
 8016aee:	193b      	adds	r3, r7, r4
 8016af0:	2107      	movs	r1, #7
 8016af2:	400a      	ands	r2, r1
 8016af4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	689b      	ldr	r3, [r3, #8]
 8016afc:	0f5b      	lsrs	r3, r3, #29
 8016afe:	b2da      	uxtb	r2, r3
 8016b00:	250c      	movs	r5, #12
 8016b02:	197b      	adds	r3, r7, r5
 8016b04:	2107      	movs	r1, #7
 8016b06:	400a      	ands	r2, r1
 8016b08:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b0a:	183b      	adds	r3, r7, r0
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	197a      	adds	r2, r7, r5
 8016b10:	7812      	ldrb	r2, [r2, #0]
 8016b12:	4914      	ldr	r1, [pc, #80]	; (8016b64 <UARTEx_SetNbDataToProcess+0xb4>)
 8016b14:	5c8a      	ldrb	r2, [r1, r2]
 8016b16:	435a      	muls	r2, r3
 8016b18:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8016b1a:	197b      	adds	r3, r7, r5
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	4a12      	ldr	r2, [pc, #72]	; (8016b68 <UARTEx_SetNbDataToProcess+0xb8>)
 8016b20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b22:	0019      	movs	r1, r3
 8016b24:	f7eb fb92 	bl	800224c <__divsi3>
 8016b28:	0003      	movs	r3, r0
 8016b2a:	b299      	uxth	r1, r3
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	226a      	movs	r2, #106	; 0x6a
 8016b30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b32:	19bb      	adds	r3, r7, r6
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	193a      	adds	r2, r7, r4
 8016b38:	7812      	ldrb	r2, [r2, #0]
 8016b3a:	490a      	ldr	r1, [pc, #40]	; (8016b64 <UARTEx_SetNbDataToProcess+0xb4>)
 8016b3c:	5c8a      	ldrb	r2, [r1, r2]
 8016b3e:	435a      	muls	r2, r3
 8016b40:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8016b42:	193b      	adds	r3, r7, r4
 8016b44:	781b      	ldrb	r3, [r3, #0]
 8016b46:	4a08      	ldr	r2, [pc, #32]	; (8016b68 <UARTEx_SetNbDataToProcess+0xb8>)
 8016b48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b4a:	0019      	movs	r1, r3
 8016b4c:	f7eb fb7e 	bl	800224c <__divsi3>
 8016b50:	0003      	movs	r3, r0
 8016b52:	b299      	uxth	r1, r3
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2268      	movs	r2, #104	; 0x68
 8016b58:	5299      	strh	r1, [r3, r2]
}
 8016b5a:	46c0      	nop			; (mov r8, r8)
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	b005      	add	sp, #20
 8016b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b62:	46c0      	nop			; (mov r8, r8)
 8016b64:	08031d50 	.word	0x08031d50
 8016b68:	08031d58 	.word	0x08031d58

08016b6c <_ZN8Ch376mscC1Em>:
#include "Ch376msc.h"
#include "main.h"
#include <string.h>

extern void delayMicroseconds(int us);
Ch376msc::Ch376msc(uint32_t speed) { // @suppress("Class members should be properly initialized")
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	6039      	str	r1, [r7, #0]
 8016b76:	4a14      	ldr	r2, [pc, #80]	; (8016bc8 <_ZN8Ch376mscC1Em+0x5c>)
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	601a      	str	r2, [r3, #0]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2200      	movs	r2, #0
 8016b80:	711a      	strb	r2, [r3, #4]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2200      	movs	r2, #0
 8016b86:	715a      	strb	r2, [r3, #5]
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	719a      	strb	r2, [r3, #6]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	2200      	movs	r2, #0
 8016b92:	721a      	strb	r2, [r3, #8]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2200      	movs	r2, #0
 8016b98:	725a      	strb	r2, [r3, #9]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	81da      	strh	r2, [r3, #14]
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2229      	movs	r2, #41	; 0x29
 8016ba4:	2100      	movs	r1, #0
 8016ba6:	5499      	strb	r1, [r3, r2]
	_interface = UART;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2228      	movs	r2, #40	; 0x28
 8016bac:	2100      	movs	r1, #0
 8016bae:	5499      	strb	r1, [r3, r2]
//	_comPortHW = &usb;
//	_comPort = &usb;
	_speed = speed;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	683a      	ldr	r2, [r7, #0]
 8016bb4:	611a      	str	r2, [r3, #16]
	_hwSerial = true;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2201      	movs	r2, #1
 8016bba:	71da      	strb	r2, [r3, #7]
}
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	0018      	movs	r0, r3
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	b002      	add	sp, #8
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	46c0      	nop			; (mov r8, r8)
 8016bc8:	08031d68 	.word	0x08031d68

08016bcc <_ZN8Ch376mscD1Ev>:
//	_spiChipSelect = spiSelect;
//	_spiBusy = busy;
//	_speed = 0;
//}

Ch376msc::~Ch376msc() {
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	4a03      	ldr	r2, [pc, #12]	; (8016be4 <_ZN8Ch376mscD1Ev+0x18>)
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	601a      	str	r2, [r3, #0]
	//  Auto-generated destructor stub
}
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	0018      	movs	r0, r3
 8016bde:	46bd      	mov	sp, r7
 8016be0:	b002      	add	sp, #8
 8016be2:	bd80      	pop	{r7, pc}
 8016be4:	08031d68 	.word	0x08031d68

08016be8 <_ZN8Ch376mscD0Ev>:
Ch376msc::~Ch376msc() {
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
}
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	0018      	movs	r0, r3
 8016bf4:	f7ff ffea 	bl	8016bcc <_ZN8Ch376mscD1Ev>
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2158      	movs	r1, #88	; 0x58
 8016bfc:	0018      	movs	r0, r3
 8016bfe:	f00b fb6f 	bl	80222e0 <_ZdlPvj>
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	0018      	movs	r0, r3
 8016c06:	46bd      	mov	sp, r7
 8016c08:	b002      	add	sp, #8
 8016c0a:	bd80      	pop	{r7, pc}

08016c0c <_ZN8Ch376msc4initEv>:

/////////////////////////////////////////////////////////////////
void Ch376msc::init(){
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);//wait for VCC to normalize
 8016c14:	2064      	movs	r0, #100	; 0x64
 8016c16:	f7f8 fbc7 	bl	800f3a8 <HAL_Delay>
	printf("init");
 8016c1a:	4b18      	ldr	r3, [pc, #96]	; (8016c7c <_ZN8Ch376msc4initEv+0x70>)
 8016c1c:	0018      	movs	r0, r3
 8016c1e:	f00b fdf9 	bl	8022814 <iprintf>
	if(_interface == SPII){
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2228      	movs	r2, #40	; 0x28
 8016c26:	5c9b      	ldrb	r3, [r3, r2]
 8016c28:	2b01      	cmp	r3, #1
 8016c2a:	d00f      	beq.n	8016c4c <_ZN8Ch376msc4initEv+0x40>
//			write(0x90);
//			spiEndTransfer();
//		}//end if
	} else {//UART
		//if(_hwSerial) _comPortHW->begin(115200);// start with default speed
		sendCommand(CMD_RESET_ALL);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2105      	movs	r1, #5
 8016c30:	0018      	movs	r0, r3
 8016c32:	f000 f916 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		HAL_Delay(60);// wait after reset command, according to the datasheet 35ms is required, but that was too short
 8016c36:	203c      	movs	r0, #60	; 0x3c
 8016c38:	f7f8 fbb6 	bl	800f3a8 <HAL_Delay>
		if(_hwSerial){ // if Hardware serial is initialized
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	79db      	ldrb	r3, [r3, #7]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d003      	beq.n	8016c4c <_ZN8Ch376msc4initEv+0x40>
			setSpeed(); // Dynamically setup the com speed
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	0018      	movs	r0, r3
 8016c48:	f000 f81a 	bl	8016c80 <_ZN8Ch376msc8setSpeedEv>
		}
	}//end if UART

	_controllerReady = pingDevice();// check the communication
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	0018      	movs	r0, r3
 8016c50:	f000 f83e 	bl	8016cd0 <_ZN8Ch376msc10pingDeviceEv>
 8016c54:	0003      	movs	r3, r0
 8016c56:	1e5a      	subs	r2, r3, #1
 8016c58:	4193      	sbcs	r3, r2
 8016c5a:	b2da      	uxtb	r2, r3
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	719a      	strb	r2, [r3, #6]
//	}else{
//		printf("False");
//
//	}

	setMode(MODE_HOST_1);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2106      	movs	r1, #6
 8016c64:	0018      	movs	r0, r3
 8016c66:	f000 f87d 	bl	8016d64 <_ZN8Ch376msc7setModeEh>

	checkDrive();
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	0018      	movs	r0, r3
 8016c6e:	f000 f8c3 	bl	8016df8 <_ZN8Ch376msc10checkDriveEv>
}
 8016c72:	46c0      	nop			; (mov r8, r8)
 8016c74:	46bd      	mov	sp, r7
 8016c76:	b002      	add	sp, #8
 8016c78:	bd80      	pop	{r7, pc}
 8016c7a:	46c0      	nop			; (mov r8, r8)
 8016c7c:	08030b00 	.word	0x08030b00

08016c80 <_ZN8Ch376msc8setSpeedEv>:
/////////////////////////////////////////////////////////////////
void Ch376msc::setSpeed(){ //set communication speed for HardwareSerial and device
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
	if(_speed == 9600){ // default speed for CH
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	691a      	ldr	r2, [r3, #16]
 8016c8c:	2396      	movs	r3, #150	; 0x96
 8016c8e:	019b      	lsls	r3, r3, #6
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d019      	beq.n	8016cc8 <_ZN8Ch376msc8setSpeedEv+0x48>
 // do nothing
	} else {
		sendCommand(CMD_SET_BAUDRATE);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2102      	movs	r1, #2
 8016c98:	0018      	movs	r0, r3
 8016c9a:	f000 f8e2 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		switch (_speed) {
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	691a      	ldr	r2, [r3, #16]
 8016ca2:	23e1      	movs	r3, #225	; 0xe1
 8016ca4:	025b      	lsls	r3, r3, #9
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d106      	bne.n	8016cb8 <_ZN8Ch376msc8setSpeedEv+0x38>
//			case 57600:
//				_comPortHW->write(uint8_t(0x03));
//				_comPortHW->write(uint8_t(0x98));
//				break;
			case 115200:
				Send(uint8_t(0x03));
 8016caa:	2003      	movs	r0, #3
 8016cac:	f7f5 fc98 	bl	800c5e0 <Send>
				Send(uint8_t(0xCC));
 8016cb0:	20cc      	movs	r0, #204	; 0xcc
 8016cb2:	f7f5 fc95 	bl	800c5e0 <Send>
				break;
 8016cb6:	e004      	b.n	8016cc2 <_ZN8Ch376msc8setSpeedEv+0x42>
			default:
				_speed = 9600;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2296      	movs	r2, #150	; 0x96
 8016cbc:	0192      	lsls	r2, r2, #6
 8016cbe:	611a      	str	r2, [r3, #16]
				break;
 8016cc0:	46c0      	nop			; (mov r8, r8)
		}//end switch

//		_comPortHW->end();
//		_comPortHW->begin(_speed);
		HAL_Delay(2);// according to datasheet 2ms
 8016cc2:	2002      	movs	r0, #2
 8016cc4:	f7f8 fb70 	bl	800f3a8 <HAL_Delay>

	}// end if

}
 8016cc8:	46c0      	nop			; (mov r8, r8)
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	b002      	add	sp, #8
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <_ZN8Ch376msc10pingDeviceEv>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::pingDevice(){
 8016cd0:	b590      	push	{r4, r7, lr}
 8016cd2:	b085      	sub	sp, #20
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn = 0;
 8016cd8:	240f      	movs	r4, #15
 8016cda:	193b      	adds	r3, r7, r4
 8016cdc:	2200      	movs	r2, #0
 8016cde:	701a      	strb	r2, [r3, #0]
	if(_interface == UART){
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2228      	movs	r2, #40	; 0x28
 8016ce4:	5c9b      	ldrb	r3, [r3, r2]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d116      	bne.n	8016d18 <_ZN8Ch376msc10pingDeviceEv+0x48>
		sendCommand(CMD_CHECK_EXIST);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2106      	movs	r1, #6
 8016cee:	0018      	movs	r0, r3
 8016cf0:	f000 f8b7 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(0x01); //
 8016cf4:	2001      	movs	r0, #1
 8016cf6:	f7f5 fc73 	bl	800c5e0 <Send>
		if(readSerDataUSB() == 0xFE){
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	0018      	movs	r0, r3
 8016cfe:	f002 f80d 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8016d02:	0003      	movs	r3, r0
 8016d04:	3bfe      	subs	r3, #254	; 0xfe
 8016d06:	425a      	negs	r2, r3
 8016d08:	4153      	adcs	r3, r2
 8016d0a:	b2db      	uxtb	r3, r3
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d022      	beq.n	8016d56 <_ZN8Ch376msc10pingDeviceEv+0x86>
			_tmpReturn = 1;//true
 8016d10:	193b      	adds	r3, r7, r4
 8016d12:	2201      	movs	r2, #1
 8016d14:	701a      	strb	r2, [r3, #0]
 8016d16:	e01e      	b.n	8016d56 <_ZN8Ch376msc10pingDeviceEv+0x86>
		}
	} else {
		spiBeginTransfer();
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	0018      	movs	r0, r3
 8016d1c:	f002 f8b9 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_CHECK_EXIST);
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2106      	movs	r1, #6
 8016d24:	0018      	movs	r0, r3
 8016d26:	f000 f89c 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(0x01);
 8016d2a:	2001      	movs	r0, #1
 8016d2c:	f7f5 fc58 	bl	800c5e0 <Send>
		if(spiReadData() == 0xFE){
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	0018      	movs	r0, r3
 8016d34:	f002 f810 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 8016d38:	0003      	movs	r3, r0
 8016d3a:	3bfe      	subs	r3, #254	; 0xfe
 8016d3c:	425a      	negs	r2, r3
 8016d3e:	4153      	adcs	r3, r2
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d003      	beq.n	8016d4e <_ZN8Ch376msc10pingDeviceEv+0x7e>
			_tmpReturn = 1;//true
 8016d46:	230f      	movs	r3, #15
 8016d48:	18fb      	adds	r3, r7, r3
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	701a      	strb	r2, [r3, #0]
		}
		spiEndTransfer();
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	0018      	movs	r0, r3
 8016d52:	f002 f8aa 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
	}
	return _tmpReturn;
 8016d56:	230f      	movs	r3, #15
 8016d58:	18fb      	adds	r3, r7, r3
 8016d5a:	781b      	ldrb	r3, [r3, #0]
}
 8016d5c:	0018      	movs	r0, r3
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	b005      	add	sp, #20
 8016d62:	bd90      	pop	{r4, r7, pc}

08016d64 <_ZN8Ch376msc7setModeEh>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::setMode(uint8_t mode){
 8016d64:	b590      	push	{r4, r7, lr}
 8016d66:	b085      	sub	sp, #20
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
 8016d6c:	000a      	movs	r2, r1
 8016d6e:	1cfb      	adds	r3, r7, #3
 8016d70:	701a      	strb	r2, [r3, #0]
	uint8_t _tmpReturn = 0;
 8016d72:	240f      	movs	r4, #15
 8016d74:	193b      	adds	r3, r7, r4
 8016d76:	2200      	movs	r2, #0
 8016d78:	701a      	strb	r2, [r3, #0]
//	uint32_t oldMillis;
//	uint8_t data[12] = {0};
	if(_interface == UART)
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2228      	movs	r2, #40	; 0x28
 8016d7e:	5c9b      	ldrb	r3, [r3, r2]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d111      	bne.n	8016da8 <_ZN8Ch376msc7setModeEh+0x44>
		{
		sendCommand(CMD_SET_USB_MODE);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2115      	movs	r1, #21
 8016d88:	0018      	movs	r0, r3
 8016d8a:	f000 f86a 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(mode);
 8016d8e:	1cfb      	adds	r3, r7, #3
 8016d90:	781b      	ldrb	r3, [r3, #0]
 8016d92:	0018      	movs	r0, r3
 8016d94:	f7f5 fc24 	bl	800c5e0 <Send>
		//HAL_UART_Receive(&huart1, data,1, 5000);
		//_tmpReturn = data[0];
		_tmpReturn = readSerDataUSB();
 8016d98:	193c      	adds	r4, r7, r4
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	0018      	movs	r0, r3
 8016d9e:	f001 ffbd 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8016da2:	0003      	movs	r3, r0
 8016da4:	7023      	strb	r3, [r4, #0]
 8016da6:	e01c      	b.n	8016de2 <_ZN8Ch376msc7setModeEh+0x7e>
			if((millis()- oldMillis) > TIMEOUT){
				break;
			}
		}*/
	} else {//spi
		spiBeginTransfer();
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	0018      	movs	r0, r3
 8016dac:	f002 f871 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_SET_USB_MODE);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	2115      	movs	r1, #21
 8016db4:	0018      	movs	r0, r3
 8016db6:	f000 f854 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(mode);
 8016dba:	1cfb      	adds	r3, r7, #3
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	0018      	movs	r0, r3
 8016dc0:	f7f5 fc0e 	bl	800c5e0 <Send>
		_tmpReturn = spiReadData();
 8016dc4:	230f      	movs	r3, #15
 8016dc6:	18fc      	adds	r4, r7, r3
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	0018      	movs	r0, r3
 8016dcc:	f001 ffc4 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 8016dd0:	0003      	movs	r3, r0
 8016dd2:	7023      	strb	r3, [r4, #0]
		spiEndTransfer();
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	0018      	movs	r0, r3
 8016dd8:	f002 f867 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		delayMicroseconds(40);
 8016ddc:	2028      	movs	r0, #40	; 0x28
 8016dde:	f001 ff91 	bl	8018d04 <_Z17delayMicrosecondsi>
	}
	checkDrive();
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	0018      	movs	r0, r3
 8016de6:	f000 f807 	bl	8016df8 <_ZN8Ch376msc10checkDriveEv>
	return _tmpReturn; // success or fail
 8016dea:	230f      	movs	r3, #15
 8016dec:	18fb      	adds	r3, r7, r3
 8016dee:	781b      	ldrb	r3, [r3, #0]
}
 8016df0:	0018      	movs	r0, r3
 8016df2:	46bd      	mov	sp, r7
 8016df4:	b005      	add	sp, #20
 8016df6:	bd90      	pop	{r4, r7, pc}

08016df8 <_ZN8Ch376msc10checkDriveEv>:
	}
	return _tmpReturn;
}

/////////////////////////////////////////////////////////////////
bool Ch376msc::checkDrive(){ //always call this function to you know is it any media attached to the usb
 8016df8:	b590      	push	{r4, r7, lr}
 8016dfa:	b085      	sub	sp, #20
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn = 0;
 8016e00:	210f      	movs	r1, #15
 8016e02:	187b      	adds	r3, r7, r1
 8016e04:	2200      	movs	r2, #0
 8016e06:	701a      	strb	r2, [r3, #0]
//	uint8_t data[12] = {0};
		if(_interface == UART){
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2228      	movs	r2, #40	; 0x28
 8016e0c:	5c9b      	ldrb	r3, [r3, r2]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d106      	bne.n	8016e20 <_ZN8Ch376msc10checkDriveEv+0x28>
		//	while((USART1->ISR & 0x0020)){
	//while(_comPort->available()){ // while is needed, after connecting media, the ch376 send 3 message(connect, disconnect, connect)
				//HAL_UART_Receive(&huart1, data,1, 1000);
				_tmpReturn = readSerDataUSB();
 8016e12:	187c      	adds	r4, r7, r1
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	0018      	movs	r0, r3
 8016e18:	f001 ff80 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8016e1c:	0003      	movs	r3, r0
 8016e1e:	7023      	strb	r3, [r4, #0]
//			if(HAL_GPIO_ReadPin(CH376S_INT_GPIO_Port,CH376S_INT_Pin)==GPIO_PIN_RESET)
//			{
//				_tmpReturn = getInterrupt(); // get int message
//			}//end if int message pending
		}
		switch(_tmpReturn){ // 0x15 device attached, 0x16 device disconnect
 8016e20:	230f      	movs	r3, #15
 8016e22:	18fb      	adds	r3, r7, r3
 8016e24:	781b      	ldrb	r3, [r3, #0]
 8016e26:	2b15      	cmp	r3, #21
 8016e28:	d002      	beq.n	8016e30 <_ZN8Ch376msc10checkDriveEv+0x38>
 8016e2a:	2b16      	cmp	r3, #22
 8016e2c:	d008      	beq.n	8016e40 <_ZN8Ch376msc10checkDriveEv+0x48>
 8016e2e:	e012      	b.n	8016e56 <_ZN8Ch376msc10checkDriveEv+0x5e>
		case ANSW_USB_INT_CONNECT:
			_deviceAttached = true;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	2201      	movs	r2, #1
 8016e34:	715a      	strb	r2, [r3, #5]
			rdDiskInfo();
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	0018      	movs	r0, r3
 8016e3a:	f000 fd8f 	bl	801795c <_ZN8Ch376msc10rdDiskInfoEv>
			break;
 8016e3e:	e00a      	b.n	8016e56 <_ZN8Ch376msc10checkDriveEv+0x5e>
		case ANSW_USB_INT_DISCONNECT:
			_deviceAttached = false;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2200      	movs	r2, #0
 8016e44:	715a      	strb	r2, [r3, #5]
			memset(&_diskData, 0, sizeof(_diskData));// fill up with NULL disk data container
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	334c      	adds	r3, #76	; 0x4c
 8016e4a:	220c      	movs	r2, #12
 8016e4c:	2100      	movs	r1, #0
 8016e4e:	0018      	movs	r0, r3
 8016e50:	f00b fea2 	bl	8022b98 <memset>
			break;
 8016e54:	46c0      	nop			; (mov r8, r8)

		}//end switch
	return _deviceAttached;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	795b      	ldrb	r3, [r3, #5]
}
 8016e5a:	0018      	movs	r0, r3
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	b005      	add	sp, #20
 8016e60:	bd90      	pop	{r4, r7, pc}

08016e62 <_ZN8Ch376msc11sendCommandEh>:

/////////////////Alap parancs kuldes az USB fele/////////////////
void Ch376msc::sendCommand(uint8_t b_parancs){
 8016e62:	b580      	push	{r7, lr}
 8016e64:	b082      	sub	sp, #8
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	6078      	str	r0, [r7, #4]
 8016e6a:	000a      	movs	r2, r1
 8016e6c:	1cfb      	adds	r3, r7, #3
 8016e6e:	701a      	strb	r2, [r3, #0]
	//char str[50];
	if(_interface == UART){
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2228      	movs	r2, #40	; 0x28
 8016e74:	5c9b      	ldrb	r3, [r3, r2]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d105      	bne.n	8016e86 <_ZN8Ch376msc11sendCommandEh+0x24>
//		HAL_UART_Transmit(&huart1,(uint8_t*)0x57,2,100);
//		HAL_UART_Transmit(&huart1,(uint8_t*)0xAB,2,100);
		//sprintf(str, "%d", 0x57);
		//Send(str);
	Send(0x57);// UART first sync command
 8016e7a:	2057      	movs	r0, #87	; 0x57
 8016e7c:	f7f5 fbb0 	bl	800c5e0 <Send>
	//HAL_Delay(500);
	//sprintf(str, "%d", 0xAB);
	//Send(str);
	Send(0xAB);// UART second sync command
 8016e80:	20ab      	movs	r0, #171	; 0xab
 8016e82:	f7f5 fbad 	bl	800c5e0 <Send>
//	char *data;
//	sprintf(data, "%d", b_parancs);
//	HAL_UART_Transmit(&huart1,(uint8_t *)data ,strlen(data),100);
	//sprintf(str, "%d", b_parancs);
	//Send(str);
	Send(b_parancs);
 8016e86:	1cfb      	adds	r3, r7, #3
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	0018      	movs	r0, r3
 8016e8c:	f7f5 fba8 	bl	800c5e0 <Send>
}
 8016e90:	46c0      	nop			; (mov r8, r8)
 8016e92:	46bd      	mov	sp, r7
 8016e94:	b002      	add	sp, #8
 8016e96:	bd80      	pop	{r7, pc}

08016e98 <_ZN8Ch376msc8openFileEv>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::openFile(){
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
	if(_interface == UART){
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2228      	movs	r2, #40	; 0x28
 8016ea4:	5c9b      	ldrb	r3, [r3, r2]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d10d      	bne.n	8016ec6 <_ZN8Ch376msc8openFileEv+0x2e>
		sendCommand(CMD_FILE_OPEN);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	2132      	movs	r1, #50	; 0x32
 8016eae:	0018      	movs	r0, r3
 8016eb0:	f7ff ffd7 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		_answer = readSerDataUSB();
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	0018      	movs	r0, r3
 8016eb8:	f001 ff30 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8016ebc:	0003      	movs	r3, r0
 8016ebe:	001a      	movs	r2, r3
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	725a      	strb	r2, [r3, #9]
 8016ec4:	e014      	b.n	8016ef0 <_ZN8Ch376msc8openFileEv+0x58>
	} else {//spi
		spiBeginTransfer();
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	0018      	movs	r0, r3
 8016eca:	f001 ffe2 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_FILE_OPEN);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2132      	movs	r1, #50	; 0x32
 8016ed2:	0018      	movs	r0, r3
 8016ed4:	f7ff ffc5 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		spiEndTransfer();
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	0018      	movs	r0, r3
 8016edc:	f001 ffe5 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		_answer = spiWaitInterrupt();
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	0018      	movs	r0, r3
 8016ee4:	f001 ff98 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 8016ee8:	0003      	movs	r3, r0
 8016eea:	001a      	movs	r2, r3
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	725a      	strb	r2, [r3, #9]
	}
	if(_answer == ANSW_USB_INT_SUCCESS){ // get the file size
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	7a5b      	ldrb	r3, [r3, #9]
 8016ef4:	2b14      	cmp	r3, #20
 8016ef6:	d103      	bne.n	8016f00 <_ZN8Ch376msc8openFileEv+0x68>
		dirInfoRead();
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	0018      	movs	r0, r3
 8016efc:	f000 f806 	bl	8016f0c <_ZN8Ch376msc11dirInfoReadEv>
	}
	return _answer;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	7a5b      	ldrb	r3, [r3, #9]
}
 8016f04:	0018      	movs	r0, r3
 8016f06:	46bd      	mov	sp, r7
 8016f08:	b002      	add	sp, #8
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <_ZN8Ch376msc11dirInfoReadEv>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::dirInfoRead(){
 8016f0c:	b590      	push	{r4, r7, lr}
 8016f0e:	b085      	sub	sp, #20
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn;
	if(_interface == UART){
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2228      	movs	r2, #40	; 0x28
 8016f18:	5c9b      	ldrb	r3, [r3, r2]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d110      	bne.n	8016f40 <_ZN8Ch376msc11dirInfoReadEv+0x34>
		sendCommand(CMD_DIR_INFO_READ);// max 16 files 0x00 - 0x0f
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2137      	movs	r1, #55	; 0x37
 8016f22:	0018      	movs	r0, r3
 8016f24:	f7ff ff9d 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(0xff);// current file is 0xff
 8016f28:	20ff      	movs	r0, #255	; 0xff
 8016f2a:	f7f5 fb59 	bl	800c5e0 <Send>
		_tmpReturn = readSerDataUSB();
 8016f2e:	230f      	movs	r3, #15
 8016f30:	18fc      	adds	r4, r7, r3
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	0018      	movs	r0, r3
 8016f36:	f001 fef1 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8016f3a:	0003      	movs	r3, r0
 8016f3c:	7023      	strb	r3, [r4, #0]
 8016f3e:	e017      	b.n	8016f70 <_ZN8Ch376msc11dirInfoReadEv+0x64>
	} else {//spi
		spiBeginTransfer();
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	0018      	movs	r0, r3
 8016f44:	f001 ffa5 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_DIR_INFO_READ);// max 16 files 0x00 - 0x0f
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2137      	movs	r1, #55	; 0x37
 8016f4c:	0018      	movs	r0, r3
 8016f4e:	f7ff ff88 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(0xff);// current file is 0xff
 8016f52:	20ff      	movs	r0, #255	; 0xff
 8016f54:	f7f5 fb44 	bl	800c5e0 <Send>
		spiEndTransfer();
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	0018      	movs	r0, r3
 8016f5c:	f001 ffa5 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		_tmpReturn = spiWaitInterrupt();
 8016f60:	230f      	movs	r3, #15
 8016f62:	18fc      	adds	r4, r7, r3
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	0018      	movs	r0, r3
 8016f68:	f001 ff56 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 8016f6c:	0003      	movs	r3, r0
 8016f6e:	7023      	strb	r3, [r4, #0]
	}
	rdFatInfo();
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	0018      	movs	r0, r3
 8016f74:	f000 fab4 	bl	80174e0 <_ZN8Ch376msc9rdFatInfoEv>
	return _tmpReturn;
 8016f78:	230f      	movs	r3, #15
 8016f7a:	18fb      	adds	r3, r7, r3
 8016f7c:	781b      	ldrb	r3, [r3, #0]
}
 8016f7e:	0018      	movs	r0, r3
 8016f80:	46bd      	mov	sp, r7
 8016f82:	b005      	add	sp, #20
 8016f84:	bd90      	pop	{r4, r7, pc}

08016f86 <_ZN8Ch376msc9closeFileEv>:
	}
	if(_interface == SPII) spiEndTransfer();
}

////////////////////////////////////////////////////////////////
uint8_t Ch376msc::closeFile(){ // 0x00 - frissites nelkul, 0x01 adatmeret frissites
 8016f86:	b590      	push	{r4, r7, lr}
 8016f88:	b085      	sub	sp, #20
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn = 0;
 8016f8e:	230f      	movs	r3, #15
 8016f90:	18fb      	adds	r3, r7, r3
 8016f92:	2200      	movs	r2, #0
 8016f94:	701a      	strb	r2, [r3, #0]
	uint8_t d = 0x00;
 8016f96:	210e      	movs	r1, #14
 8016f98:	187b      	adds	r3, r7, r1
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	701a      	strb	r2, [r3, #0]
	if(_fileWrite){ // if closing file after write procedure
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	791b      	ldrb	r3, [r3, #4]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d002      	beq.n	8016fac <_ZN8Ch376msc9closeFileEv+0x26>
		d = 0x01; // close with 0x01 (to update file length)
 8016fa6:	187b      	adds	r3, r7, r1
 8016fa8:	2201      	movs	r2, #1
 8016faa:	701a      	strb	r2, [r3, #0]
	}
	if(_interface == UART){
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2228      	movs	r2, #40	; 0x28
 8016fb0:	5c9b      	ldrb	r3, [r3, r2]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d113      	bne.n	8016fde <_ZN8Ch376msc9closeFileEv+0x58>
		sendCommand(CMD_FILE_CLOSE);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	2136      	movs	r1, #54	; 0x36
 8016fba:	0018      	movs	r0, r3
 8016fbc:	f7ff ff51 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(d);
 8016fc0:	230e      	movs	r3, #14
 8016fc2:	18fb      	adds	r3, r7, r3
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	0018      	movs	r0, r3
 8016fc8:	f7f5 fb0a 	bl	800c5e0 <Send>
		_tmpReturn = readSerDataUSB();
 8016fcc:	230f      	movs	r3, #15
 8016fce:	18fc      	adds	r4, r7, r3
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	0018      	movs	r0, r3
 8016fd4:	f001 fea2 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8016fd8:	0003      	movs	r3, r0
 8016fda:	7023      	strb	r3, [r4, #0]
 8016fdc:	e01a      	b.n	8017014 <_ZN8Ch376msc9closeFileEv+0x8e>
	} else {
		spiBeginTransfer();
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	0018      	movs	r0, r3
 8016fe2:	f001 ff56 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_FILE_CLOSE);
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	2136      	movs	r1, #54	; 0x36
 8016fea:	0018      	movs	r0, r3
 8016fec:	f7ff ff39 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(d);
 8016ff0:	230e      	movs	r3, #14
 8016ff2:	18fb      	adds	r3, r7, r3
 8016ff4:	781b      	ldrb	r3, [r3, #0]
 8016ff6:	0018      	movs	r0, r3
 8016ff8:	f7f5 faf2 	bl	800c5e0 <Send>
		//read();
		spiEndTransfer();
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	0018      	movs	r0, r3
 8017000:	f001 ff53 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		_tmpReturn = spiWaitInterrupt();
 8017004:	230f      	movs	r3, #15
 8017006:	18fc      	adds	r4, r7, r3
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	0018      	movs	r0, r3
 801700c:	f001 ff04 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 8017010:	0003      	movs	r3, r0
 8017012:	7023      	strb	r3, [r4, #0]
	}
	memset(&_fileData, 0, sizeof(_fileData));// fill up with NULL file data container
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	332c      	adds	r3, #44	; 0x2c
 8017018:	2220      	movs	r2, #32
 801701a:	2100      	movs	r1, #0
 801701c:	0018      	movs	r0, r3
 801701e:	f00b fdbb 	bl	8022b98 <memset>
	_filename[0] = '\0'; // put  NULL char at the first place in a name string
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	2200      	movs	r2, #0
 8017026:	751a      	strb	r2, [r3, #20]
	_fileWrite = false;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	2200      	movs	r2, #0
 801702c:	711a      	strb	r2, [r3, #4]
	_sectorCounter = 0;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	2200      	movs	r2, #0
 8017032:	81da      	strh	r2, [r3, #14]
	return _tmpReturn;
 8017034:	230f      	movs	r3, #15
 8017036:	18fb      	adds	r3, r7, r3
 8017038:	781b      	ldrb	r3, [r3, #0]
}
 801703a:	0018      	movs	r0, r3
 801703c:	46bd      	mov	sp, r7
 801703e:	b005      	add	sp, #20
 8017040:	bd90      	pop	{r4, r7, pc}

08017042 <_ZN8Ch376msc8byteRdGoEv>:
	}
	return _tmpReturn;
}

//////////////////////////////////////////////////////////////
uint8_t Ch376msc::byteRdGo(){
 8017042:	b590      	push	{r4, r7, lr}
 8017044:	b085      	sub	sp, #20
 8017046:	af00      	add	r7, sp, #0
 8017048:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn = 0;
 801704a:	240f      	movs	r4, #15
 801704c:	193b      	adds	r3, r7, r4
 801704e:	2200      	movs	r2, #0
 8017050:	701a      	strb	r2, [r3, #0]
	if(_interface == UART) {
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2228      	movs	r2, #40	; 0x28
 8017056:	5c9b      	ldrb	r3, [r3, r2]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d10c      	bne.n	8017076 <_ZN8Ch376msc8byteRdGoEv+0x34>
		sendCommand(CMD_BYTE_RD_GO);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	213b      	movs	r1, #59	; 0x3b
 8017060:	0018      	movs	r0, r3
 8017062:	f7ff fefe 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		_tmpReturn = readSerDataUSB();
 8017066:	193c      	adds	r4, r7, r4
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	0018      	movs	r0, r3
 801706c:	f001 fe56 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8017070:	0003      	movs	r3, r0
 8017072:	7023      	strb	r3, [r4, #0]
 8017074:	e014      	b.n	80170a0 <_ZN8Ch376msc8byteRdGoEv+0x5e>
	} else {
		spiBeginTransfer();
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	0018      	movs	r0, r3
 801707a:	f001 ff0a 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_BYTE_RD_GO);
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	213b      	movs	r1, #59	; 0x3b
 8017082:	0018      	movs	r0, r3
 8017084:	f7ff feed 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		spiEndTransfer();
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	0018      	movs	r0, r3
 801708c:	f001 ff0d 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		_tmpReturn = spiWaitInterrupt();
 8017090:	230f      	movs	r3, #15
 8017092:	18fc      	adds	r4, r7, r3
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	0018      	movs	r0, r3
 8017098:	f001 febe 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 801709c:	0003      	movs	r3, r0
 801709e:	7023      	strb	r3, [r4, #0]
	}
	return _tmpReturn;
 80170a0:	230f      	movs	r3, #15
 80170a2:	18fb      	adds	r3, r7, r3
 80170a4:	781b      	ldrb	r3, [r3, #0]
}
 80170a6:	0018      	movs	r0, r3
 80170a8:	46bd      	mov	sp, r7
 80170aa:	b005      	add	sp, #20
 80170ac:	bd90      	pop	{r4, r7, pc}

080170ae <_ZN8Ch376msc10fileCreateEv>:

//////////////////////////////////////////////////////////////
uint8_t Ch376msc::fileCreate(){
 80170ae:	b590      	push	{r4, r7, lr}
 80170b0:	b085      	sub	sp, #20
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn = 0;
 80170b6:	240f      	movs	r4, #15
 80170b8:	193b      	adds	r3, r7, r4
 80170ba:	2200      	movs	r2, #0
 80170bc:	701a      	strb	r2, [r3, #0]
	if(_interface == UART) {
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	2228      	movs	r2, #40	; 0x28
 80170c2:	5c9b      	ldrb	r3, [r3, r2]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d10c      	bne.n	80170e2 <_ZN8Ch376msc10fileCreateEv+0x34>
		sendCommand(CMD_FILE_CREATE);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2134      	movs	r1, #52	; 0x34
 80170cc:	0018      	movs	r0, r3
 80170ce:	f7ff fec8 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		_tmpReturn = readSerDataUSB();
 80170d2:	193c      	adds	r4, r7, r4
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	0018      	movs	r0, r3
 80170d8:	f001 fe20 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 80170dc:	0003      	movs	r3, r0
 80170de:	7023      	strb	r3, [r4, #0]
 80170e0:	e014      	b.n	801710c <_ZN8Ch376msc10fileCreateEv+0x5e>
	} else {
		spiBeginTransfer();
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	0018      	movs	r0, r3
 80170e6:	f001 fed4 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_FILE_CREATE);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	2134      	movs	r1, #52	; 0x34
 80170ee:	0018      	movs	r0, r3
 80170f0:	f7ff feb7 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		spiEndTransfer();
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	0018      	movs	r0, r3
 80170f8:	f001 fed7 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		_tmpReturn = spiWaitInterrupt();
 80170fc:	230f      	movs	r3, #15
 80170fe:	18fc      	adds	r4, r7, r3
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	0018      	movs	r0, r3
 8017104:	f001 fe88 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 8017108:	0003      	movs	r3, r0
 801710a:	7023      	strb	r3, [r4, #0]
	}
	return _tmpReturn;
 801710c:	230f      	movs	r3, #15
 801710e:	18fb      	adds	r3, r7, r3
 8017110:	781b      	ldrb	r3, [r3, #0]
}
 8017112:	0018      	movs	r0, r3
 8017114:	46bd      	mov	sp, r7
 8017116:	b005      	add	sp, #20
 8017118:	bd90      	pop	{r4, r7, pc}

0801711a <_ZN8Ch376msc8readFileEPch>:
	}//end while
	return moreFiles;
}

////////////////////////////  Read  cycle//////////////////////////
uint8_t Ch376msc::readFile(char* buffer, uint8_t b_num){ //buffer for reading, buffer size
 801711a:	b590      	push	{r4, r7, lr}
 801711c:	b087      	sub	sp, #28
 801711e:	af00      	add	r7, sp, #0
 8017120:	60f8      	str	r0, [r7, #12]
 8017122:	60b9      	str	r1, [r7, #8]
 8017124:	1dfb      	adds	r3, r7, #7
 8017126:	701a      	strb	r2, [r3, #0]
	uint8_t _tmpReturn = 0;// more data
 8017128:	2317      	movs	r3, #23
 801712a:	18fb      	adds	r3, r7, r3
 801712c:	2200      	movs	r2, #0
 801712e:	701a      	strb	r2, [r3, #0]
	uint8_t byteForRequest ;
	bool bufferFull = false;
 8017130:	2315      	movs	r3, #21
 8017132:	18fb      	adds	r3, r7, r3
 8017134:	2200      	movs	r2, #0
 8017136:	701a      	strb	r2, [r3, #0]
	_fileWrite = false; // read mode, required for close procedure
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	2200      	movs	r2, #0
 801713c:	711a      	strb	r2, [r3, #4]
	b_num--;// last byte is reserved for NULL terminating character
 801713e:	1dfb      	adds	r3, r7, #7
 8017140:	781a      	ldrb	r2, [r3, #0]
 8017142:	1dfb      	adds	r3, r7, #7
 8017144:	3a01      	subs	r2, #1
 8017146:	701a      	strb	r2, [r3, #0]
	if(_answer == ANSW_ERR_FILE_CLOSE || _answer == ANSW_ERR_MISS_FILE){
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	7a5b      	ldrb	r3, [r3, #9]
 801714c:	2bb4      	cmp	r3, #180	; 0xb4
 801714e:	d004      	beq.n	801715a <_ZN8Ch376msc8readFileEPch+0x40>
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	7a5b      	ldrb	r3, [r3, #9]
 8017154:	2b42      	cmp	r3, #66	; 0x42
 8017156:	d000      	beq.n	801715a <_ZN8Ch376msc8readFileEPch+0x40>
 8017158:	e0c2      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
		bufferFull = true;
 801715a:	2315      	movs	r3, #21
 801715c:	18fb      	adds	r3, r7, r3
 801715e:	2201      	movs	r2, #1
 8017160:	701a      	strb	r2, [r3, #0]
		_tmpReturn = 0;// we have reached the EOF
 8017162:	2317      	movs	r3, #23
 8017164:	18fb      	adds	r3, r7, r3
 8017166:	2200      	movs	r2, #0
 8017168:	701a      	strb	r2, [r3, #0]
	}
	while(!bufferFull){
 801716a:	e0b9      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>

		switch (fileProcesSTM) {
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	2229      	movs	r2, #41	; 0x29
 8017170:	5c9b      	ldrb	r3, [r3, r2]
 8017172:	2b03      	cmp	r3, #3
 8017174:	d100      	bne.n	8017178 <_ZN8Ch376msc8readFileEPch+0x5e>
 8017176:	e0a0      	b.n	80172ba <_ZN8Ch376msc8readFileEPch+0x1a0>
 8017178:	2017      	movs	r0, #23
 801717a:	183a      	adds	r2, r7, r0
 801717c:	1839      	adds	r1, r7, r0
 801717e:	7809      	ldrb	r1, [r1, #0]
 8017180:	7011      	strb	r1, [r2, #0]
 8017182:	2415      	movs	r4, #21
 8017184:	193a      	adds	r2, r7, r4
 8017186:	1939      	adds	r1, r7, r4
 8017188:	7809      	ldrb	r1, [r1, #0]
 801718a:	7011      	strb	r1, [r2, #0]
 801718c:	2b03      	cmp	r3, #3
 801718e:	dd00      	ble.n	8017192 <_ZN8Ch376msc8readFileEPch+0x78>
 8017190:	e0a6      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
 8017192:	2b02      	cmp	r3, #2
 8017194:	d065      	beq.n	8017262 <_ZN8Ch376msc8readFileEPch+0x148>
 8017196:	183a      	adds	r2, r7, r0
 8017198:	1839      	adds	r1, r7, r0
 801719a:	7809      	ldrb	r1, [r1, #0]
 801719c:	7011      	strb	r1, [r2, #0]
 801719e:	193a      	adds	r2, r7, r4
 80171a0:	1939      	adds	r1, r7, r4
 80171a2:	7809      	ldrb	r1, [r1, #0]
 80171a4:	7011      	strb	r1, [r2, #0]
 80171a6:	2b02      	cmp	r3, #2
 80171a8:	dd00      	ble.n	80171ac <_ZN8Ch376msc8readFileEPch+0x92>
 80171aa:	e099      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d00b      	beq.n	80171c8 <_ZN8Ch376msc8readFileEPch+0xae>
 80171b0:	183a      	adds	r2, r7, r0
 80171b2:	1839      	adds	r1, r7, r0
 80171b4:	7809      	ldrb	r1, [r1, #0]
 80171b6:	7011      	strb	r1, [r2, #0]
 80171b8:	193a      	adds	r2, r7, r4
 80171ba:	1939      	adds	r1, r7, r4
 80171bc:	7809      	ldrb	r1, [r1, #0]
 80171be:	7011      	strb	r1, [r2, #0]
 80171c0:	2b01      	cmp	r3, #1
 80171c2:	d100      	bne.n	80171c6 <_ZN8Ch376msc8readFileEPch+0xac>
 80171c4:	e06c      	b.n	80172a0 <_ZN8Ch376msc8readFileEPch+0x186>
 80171c6:	e08b      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
			case REQUEST:
				byteForRequest = b_num - _byteCounter;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	7a1a      	ldrb	r2, [r3, #8]
 80171cc:	2316      	movs	r3, #22
 80171ce:	18fb      	adds	r3, r7, r3
 80171d0:	1df9      	adds	r1, r7, #7
 80171d2:	7809      	ldrb	r1, [r1, #0]
 80171d4:	1a8a      	subs	r2, r1, r2
 80171d6:	701a      	strb	r2, [r3, #0]
				if(_sectorCounter == SECTORSIZE){ //if one sector has read out
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	89da      	ldrh	r2, [r3, #14]
 80171dc:	2380      	movs	r3, #128	; 0x80
 80171de:	009b      	lsls	r3, r3, #2
 80171e0:	429a      	cmp	r2, r3
 80171e2:	d107      	bne.n	80171f4 <_ZN8Ch376msc8readFileEPch+0xda>
					_sectorCounter = 0;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	2200      	movs	r2, #0
 80171e8:	81da      	strh	r2, [r3, #14]
					fileProcesSTM = NEXT;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	2229      	movs	r2, #41	; 0x29
 80171ee:	2101      	movs	r1, #1
 80171f0:	5499      	strb	r1, [r3, r2]
					break;
 80171f2:	e075      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
				} else if((_sectorCounter + byteForRequest) > SECTORSIZE){
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	89db      	ldrh	r3, [r3, #14]
 80171f8:	001a      	movs	r2, r3
 80171fa:	2116      	movs	r1, #22
 80171fc:	187b      	adds	r3, r7, r1
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	18d2      	adds	r2, r2, r3
 8017202:	2380      	movs	r3, #128	; 0x80
 8017204:	009b      	lsls	r3, r3, #2
 8017206:	429a      	cmp	r2, r3
 8017208:	dd05      	ble.n	8017216 <_ZN8Ch376msc8readFileEPch+0xfc>
					byteForRequest = SECTORSIZE - _sectorCounter;
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	89db      	ldrh	r3, [r3, #14]
 801720e:	b2da      	uxtb	r2, r3
 8017210:	187b      	adds	r3, r7, r1
 8017212:	4252      	negs	r2, r2
 8017214:	701a      	strb	r2, [r3, #0]
				}
				////////////////
				_answer = reqByteRead(byteForRequest);
 8017216:	2316      	movs	r3, #22
 8017218:	18fb      	adds	r3, r7, r3
 801721a:	781a      	ldrb	r2, [r3, #0]
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	0011      	movs	r1, r2
 8017220:	0018      	movs	r0, r3
 8017222:	f000 fad9 	bl	80177d8 <_ZN8Ch376msc11reqByteReadEh>
 8017226:	0003      	movs	r3, r0
 8017228:	001a      	movs	r2, r3
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	725a      	strb	r2, [r3, #9]
				if(_answer == ANSW_USB_INT_DISK_READ){
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	7a5b      	ldrb	r3, [r3, #9]
 8017232:	2b1d      	cmp	r3, #29
 8017234:	d108      	bne.n	8017248 <_ZN8Ch376msc8readFileEPch+0x12e>
					fileProcesSTM = READWRITE;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	2229      	movs	r2, #41	; 0x29
 801723a:	2102      	movs	r1, #2
 801723c:	5499      	strb	r1, [r3, r2]
					_tmpReturn = 1; //we have not reached the EOF
 801723e:	2317      	movs	r3, #23
 8017240:	18fb      	adds	r3, r7, r3
 8017242:	2201      	movs	r2, #1
 8017244:	701a      	strb	r2, [r3, #0]
 8017246:	e04b      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
				} else if(_answer == ANSW_USB_INT_SUCCESS){ // no more data, EOF
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	7a5b      	ldrb	r3, [r3, #9]
 801724c:	2b14      	cmp	r3, #20
 801724e:	d147      	bne.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
					fileProcesSTM = DONE;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	2229      	movs	r2, #41	; 0x29
 8017254:	2103      	movs	r1, #3
 8017256:	5499      	strb	r1, [r3, r2]
					_tmpReturn = 0;
 8017258:	2317      	movs	r3, #23
 801725a:	18fb      	adds	r3, r7, r3
 801725c:	2200      	movs	r2, #0
 801725e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8017260:	e03e      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
			case READWRITE:
				_sectorCounter += readDataToBuff(buffer);	//fillup the buffer
 8017262:	68ba      	ldr	r2, [r7, #8]
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	0011      	movs	r1, r2
 8017268:	0018      	movs	r0, r3
 801726a:	f000 f9e6 	bl	801763a <_ZN8Ch376msc14readDataToBuffEPc>
 801726e:	0003      	movs	r3, r0
 8017270:	0019      	movs	r1, r3
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	89da      	ldrh	r2, [r3, #14]
 8017276:	b28b      	uxth	r3, r1
 8017278:	18d3      	adds	r3, r2, r3
 801727a:	b29a      	uxth	r2, r3
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	81da      	strh	r2, [r3, #14]
				if(_byteCounter != b_num) {
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	7a1b      	ldrb	r3, [r3, #8]
 8017284:	1dfa      	adds	r2, r7, #7
 8017286:	7812      	ldrb	r2, [r2, #0]
 8017288:	429a      	cmp	r2, r3
 801728a:	d004      	beq.n	8017296 <_ZN8Ch376msc8readFileEPch+0x17c>
					fileProcesSTM = REQUEST;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	2229      	movs	r2, #41	; 0x29
 8017290:	2100      	movs	r1, #0
 8017292:	5499      	strb	r1, [r3, r2]
 8017294:	e024      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
				} else {
					fileProcesSTM = DONE;
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2229      	movs	r2, #41	; 0x29
 801729a:	2103      	movs	r1, #3
 801729c:	5499      	strb	r1, [r3, r2]
				}
				break;
 801729e:	e01f      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
			case NEXT:
				_answer = byteRdGo();
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	0018      	movs	r0, r3
 80172a4:	f7ff fecd 	bl	8017042 <_ZN8Ch376msc8byteRdGoEv>
 80172a8:	0003      	movs	r3, r0
 80172aa:	001a      	movs	r2, r3
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	725a      	strb	r2, [r3, #9]
				fileProcesSTM = REQUEST;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	2229      	movs	r2, #41	; 0x29
 80172b4:	2100      	movs	r1, #0
 80172b6:	5499      	strb	r1, [r3, r2]
				break;
 80172b8:	e012      	b.n	80172e0 <_ZN8Ch376msc8readFileEPch+0x1c6>
			case DONE:
				fileProcesSTM = REQUEST;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	2229      	movs	r2, #41	; 0x29
 80172be:	2100      	movs	r1, #0
 80172c0:	5499      	strb	r1, [r3, r2]
				buffer[_byteCounter] = '\0';// NULL terminating char
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	7a1b      	ldrb	r3, [r3, #8]
 80172c6:	001a      	movs	r2, r3
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	189b      	adds	r3, r3, r2
 80172cc:	2200      	movs	r2, #0
 80172ce:	701a      	strb	r2, [r3, #0]
				_byteCounter = 0;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	2200      	movs	r2, #0
 80172d4:	721a      	strb	r2, [r3, #8]
				bufferFull = true;
 80172d6:	2315      	movs	r3, #21
 80172d8:	18fb      	adds	r3, r7, r3
 80172da:	2201      	movs	r2, #1
 80172dc:	701a      	strb	r2, [r3, #0]
				break;
 80172de:	46c0      	nop			; (mov r8, r8)
	while(!bufferFull){
 80172e0:	2315      	movs	r3, #21
 80172e2:	18fb      	adds	r3, r7, r3
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	2201      	movs	r2, #1
 80172e8:	4053      	eors	r3, r2
 80172ea:	b2db      	uxtb	r3, r3
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d000      	beq.n	80172f2 <_ZN8Ch376msc8readFileEPch+0x1d8>
 80172f0:	e73c      	b.n	801716c <_ZN8Ch376msc8readFileEPch+0x52>
		}//end switch
	}//end while
		return _tmpReturn;
 80172f2:	2317      	movs	r3, #23
 80172f4:	18fb      	adds	r3, r7, r3
 80172f6:	781b      	ldrb	r3, [r3, #0]
}
 80172f8:	0018      	movs	r0, r3
 80172fa:	46bd      	mov	sp, r7
 80172fc:	b007      	add	sp, #28
 80172fe:	bd90      	pop	{r4, r7, pc}

08017300 <_ZN8Ch376msc9writeFileEPch>:

///////////////////////////Write cycle/////////////////////////////

uint8_t Ch376msc::writeFile(char* buffer, uint8_t b_num){
 8017300:	b590      	push	{r4, r7, lr}
 8017302:	b087      	sub	sp, #28
 8017304:	af00      	add	r7, sp, #0
 8017306:	60f8      	str	r0, [r7, #12]
 8017308:	60b9      	str	r1, [r7, #8]
 801730a:	1dfb      	adds	r3, r7, #7
 801730c:	701a      	strb	r2, [r3, #0]
	_fileWrite = true; // read mode, required for close procedure
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	2201      	movs	r2, #1
 8017312:	711a      	strb	r2, [r3, #4]
	_byteCounter = 0;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2200      	movs	r2, #0
 8017318:	721a      	strb	r2, [r3, #8]
	bool diskFree = true; //free space on a disk
 801731a:	2117      	movs	r1, #23
 801731c:	187b      	adds	r3, r7, r1
 801731e:	2201      	movs	r2, #1
 8017320:	701a      	strb	r2, [r3, #0]
	bool bufferFull = true; //continue to write while there is data in the temporary buffer
 8017322:	2316      	movs	r3, #22
 8017324:	18fb      	adds	r3, r7, r3
 8017326:	2201      	movs	r2, #1
 8017328:	701a      	strb	r2, [r3, #0]
	if(_diskData.freeSector == 0){
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801732e:	2b00      	cmp	r3, #0
 8017330:	d105      	bne.n	801733e <_ZN8Ch376msc9writeFileEPch+0x3e>
		diskFree = false;
 8017332:	187b      	adds	r3, r7, r1
 8017334:	2200      	movs	r2, #0
 8017336:	701a      	strb	r2, [r3, #0]
		return diskFree;
 8017338:	187b      	adds	r3, r7, r1
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	e0cc      	b.n	80174d8 <_ZN8Ch376msc9writeFileEPch+0x1d8>
	}
	if(_answer == ANSW_ERR_MISS_FILE){ // no file with given name
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	7a5b      	ldrb	r3, [r3, #9]
 8017342:	2b42      	cmp	r3, #66	; 0x42
 8017344:	d107      	bne.n	8017356 <_ZN8Ch376msc9writeFileEPch+0x56>
		_answer = fileCreate();
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	0018      	movs	r0, r3
 801734a:	f7ff feb0 	bl	80170ae <_ZN8Ch376msc10fileCreateEv>
 801734e:	0003      	movs	r3, r0
 8017350:	001a      	movs	r2, r3
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	725a      	strb	r2, [r3, #9]
	}//end if CREATED

	if(_answer == ANSW_ERR_FILE_CLOSE){
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	7a5b      	ldrb	r3, [r3, #9]
 801735a:	2bb4      	cmp	r3, #180	; 0xb4
 801735c:	d107      	bne.n	801736e <_ZN8Ch376msc9writeFileEPch+0x6e>
		_answer = openFile();
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	0018      	movs	r0, r3
 8017362:	f7ff fd99 	bl	8016e98 <_ZN8Ch376msc8openFileEv>
 8017366:	0003      	movs	r3, r0
 8017368:	001a      	movs	r2, r3
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	725a      	strb	r2, [r3, #9]
	}

	if(_answer == ANSW_USB_INT_SUCCESS){ // file created succesfully
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	7a5b      	ldrb	r3, [r3, #9]
 8017372:	2b14      	cmp	r3, #20
 8017374:	d000      	beq.n	8017378 <_ZN8Ch376msc9writeFileEPch+0x78>
 8017376:	e0ac      	b.n	80174d2 <_ZN8Ch376msc9writeFileEPch+0x1d2>

		while(bufferFull){
 8017378:	e0a5      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
			switch (fileProcesSTM) {
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	2229      	movs	r2, #41	; 0x29
 801737e:	5c9b      	ldrb	r3, [r3, r2]
 8017380:	2b03      	cmp	r3, #3
 8017382:	d100      	bne.n	8017386 <_ZN8Ch376msc9writeFileEPch+0x86>
 8017384:	e08b      	b.n	801749e <_ZN8Ch376msc9writeFileEPch+0x19e>
 8017386:	2017      	movs	r0, #23
 8017388:	183a      	adds	r2, r7, r0
 801738a:	1839      	adds	r1, r7, r0
 801738c:	7809      	ldrb	r1, [r1, #0]
 801738e:	7011      	strb	r1, [r2, #0]
 8017390:	2416      	movs	r4, #22
 8017392:	193a      	adds	r2, r7, r4
 8017394:	1939      	adds	r1, r7, r4
 8017396:	7809      	ldrb	r1, [r1, #0]
 8017398:	7011      	strb	r1, [r2, #0]
 801739a:	2b03      	cmp	r3, #3
 801739c:	dd00      	ble.n	80173a0 <_ZN8Ch376msc9writeFileEPch+0xa0>
 801739e:	e092      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
 80173a0:	2b02      	cmp	r3, #2
 80173a2:	d038      	beq.n	8017416 <_ZN8Ch376msc9writeFileEPch+0x116>
 80173a4:	183a      	adds	r2, r7, r0
 80173a6:	1839      	adds	r1, r7, r0
 80173a8:	7809      	ldrb	r1, [r1, #0]
 80173aa:	7011      	strb	r1, [r2, #0]
 80173ac:	193a      	adds	r2, r7, r4
 80173ae:	1939      	adds	r1, r7, r4
 80173b0:	7809      	ldrb	r1, [r1, #0]
 80173b2:	7011      	strb	r1, [r2, #0]
 80173b4:	2b02      	cmp	r3, #2
 80173b6:	dd00      	ble.n	80173ba <_ZN8Ch376msc9writeFileEPch+0xba>
 80173b8:	e085      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d00a      	beq.n	80173d4 <_ZN8Ch376msc9writeFileEPch+0xd4>
 80173be:	183a      	adds	r2, r7, r0
 80173c0:	1839      	adds	r1, r7, r0
 80173c2:	7809      	ldrb	r1, [r1, #0]
 80173c4:	7011      	strb	r1, [r2, #0]
 80173c6:	193a      	adds	r2, r7, r4
 80173c8:	1939      	adds	r1, r7, r4
 80173ca:	7809      	ldrb	r1, [r1, #0]
 80173cc:	7011      	strb	r1, [r2, #0]
 80173ce:	2b01      	cmp	r3, #1
 80173d0:	d037      	beq.n	8017442 <_ZN8Ch376msc9writeFileEPch+0x142>
 80173d2:	e078      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
				case REQUEST:
					_answer = reqByteWrite(b_num - _byteCounter);
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	7a1b      	ldrb	r3, [r3, #8]
 80173d8:	1dfa      	adds	r2, r7, #7
 80173da:	7812      	ldrb	r2, [r2, #0]
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	b2da      	uxtb	r2, r3
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	0011      	movs	r1, r2
 80173e4:	0018      	movs	r0, r3
 80173e6:	f000 fa40 	bl	801786a <_ZN8Ch376msc12reqByteWriteEh>
 80173ea:	0003      	movs	r3, r0
 80173ec:	001a      	movs	r2, r3
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	725a      	strb	r2, [r3, #9]

					if(_answer == ANSW_USB_INT_SUCCESS){
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	7a5b      	ldrb	r3, [r3, #9]
 80173f6:	2b14      	cmp	r3, #20
 80173f8:	d104      	bne.n	8017404 <_ZN8Ch376msc9writeFileEPch+0x104>
						fileProcesSTM = NEXT;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	2229      	movs	r2, #41	; 0x29
 80173fe:	2101      	movs	r1, #1
 8017400:	5499      	strb	r1, [r3, r2]
 8017402:	e060      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>

					} else if(_answer == ANSW_USB_INT_DISK_WRITE){
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	7a5b      	ldrb	r3, [r3, #9]
 8017408:	2b1e      	cmp	r3, #30
 801740a:	d15c      	bne.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
						fileProcesSTM = READWRITE;
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	2229      	movs	r2, #41	; 0x29
 8017410:	2102      	movs	r1, #2
 8017412:	5499      	strb	r1, [r3, r2]
						}
					break;
 8017414:	e057      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
				case READWRITE:
					writeDataFromBuff(buffer);
 8017416:	68ba      	ldr	r2, [r7, #8]
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	0011      	movs	r1, r2
 801741c:	0018      	movs	r0, r3
 801741e:	f000 f981 	bl	8017724 <_ZN8Ch376msc17writeDataFromBuffEPc>
					if(_byteCounter != b_num) {
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	7a1b      	ldrb	r3, [r3, #8]
 8017426:	1dfa      	adds	r2, r7, #7
 8017428:	7812      	ldrb	r2, [r2, #0]
 801742a:	429a      	cmp	r2, r3
 801742c:	d004      	beq.n	8017438 <_ZN8Ch376msc9writeFileEPch+0x138>
						fileProcesSTM = NEXT;
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	2229      	movs	r2, #41	; 0x29
 8017432:	2101      	movs	r1, #1
 8017434:	5499      	strb	r1, [r3, r2]
 8017436:	e046      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
					} else {
						fileProcesSTM = DONE;
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2229      	movs	r2, #41	; 0x29
 801743c:	2103      	movs	r1, #3
 801743e:	5499      	strb	r1, [r3, r2]
					}
					break;
 8017440:	e041      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
				case NEXT:
					if(_diskData.freeSector > 0){
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017446:	2b00      	cmp	r3, #0
 8017448:	d020      	beq.n	801748c <_ZN8Ch376msc9writeFileEPch+0x18c>
						_diskData.freeSector --;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801744e:	1e5a      	subs	r2, r3, #1
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	651a      	str	r2, [r3, #80]	; 0x50
						_answer = byteWrGo();
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	0018      	movs	r0, r3
 8017458:	f000 f8b9 	bl	80175ce <_ZN8Ch376msc8byteWrGoEv>
 801745c:	0003      	movs	r3, r0
 801745e:	001a      	movs	r2, r3
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	725a      	strb	r2, [r3, #9]
						if(_answer == ANSW_USB_INT_SUCCESS){
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	7a5b      	ldrb	r3, [r3, #9]
 8017468:	2b14      	cmp	r3, #20
 801746a:	d104      	bne.n	8017476 <_ZN8Ch376msc9writeFileEPch+0x176>
							fileProcesSTM = REQUEST;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	2229      	movs	r2, #41	; 0x29
 8017470:	2100      	movs	r1, #0
 8017472:	5499      	strb	r1, [r3, r2]
 8017474:	e027      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
						} else if(_byteCounter != b_num ){
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	7a1b      	ldrb	r3, [r3, #8]
 801747a:	1dfa      	adds	r2, r7, #7
 801747c:	7812      	ldrb	r2, [r2, #0]
 801747e:	429a      	cmp	r2, r3
 8017480:	d021      	beq.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
							fileProcesSTM = READWRITE;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2229      	movs	r2, #41	; 0x29
 8017486:	2102      	movs	r1, #2
 8017488:	5499      	strb	r1, [r3, r2]
 801748a:	e01c      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
						}
					} else { // if disk is full
						fileProcesSTM = DONE;
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	2229      	movs	r2, #41	; 0x29
 8017490:	2103      	movs	r1, #3
 8017492:	5499      	strb	r1, [r3, r2]
						diskFree = false;
 8017494:	2317      	movs	r3, #23
 8017496:	18fb      	adds	r3, r7, r3
 8017498:	2200      	movs	r2, #0
 801749a:	701a      	strb	r2, [r3, #0]
					}
					break;
 801749c:	e013      	b.n	80174c6 <_ZN8Ch376msc9writeFileEPch+0x1c6>
				case DONE:
					fileProcesSTM = REQUEST;
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	2229      	movs	r2, #41	; 0x29
 80174a2:	2100      	movs	r1, #0
 80174a4:	5499      	strb	r1, [r3, r2]
					_byteCounter = 0;
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	2200      	movs	r2, #0
 80174aa:	721a      	strb	r2, [r3, #8]
					_answer = byteWrGo();
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	0018      	movs	r0, r3
 80174b0:	f000 f88d 	bl	80175ce <_ZN8Ch376msc8byteWrGoEv>
 80174b4:	0003      	movs	r3, r0
 80174b6:	001a      	movs	r2, r3
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	725a      	strb	r2, [r3, #9]
					bufferFull = false;
 80174bc:	2316      	movs	r3, #22
 80174be:	18fb      	adds	r3, r7, r3
 80174c0:	2200      	movs	r2, #0
 80174c2:	701a      	strb	r2, [r3, #0]
					break;
 80174c4:	46c0      	nop			; (mov r8, r8)
		while(bufferFull){
 80174c6:	2316      	movs	r3, #22
 80174c8:	18fb      	adds	r3, r7, r3
 80174ca:	781b      	ldrb	r3, [r3, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d000      	beq.n	80174d2 <_ZN8Ch376msc9writeFileEPch+0x1d2>
 80174d0:	e753      	b.n	801737a <_ZN8Ch376msc9writeFileEPch+0x7a>
			}//end switch
		}//end while
	}// end file created

	return diskFree;
 80174d2:	2317      	movs	r3, #23
 80174d4:	18fb      	adds	r3, r7, r3
 80174d6:	781b      	ldrb	r3, [r3, #0]
}
 80174d8:	0018      	movs	r0, r3
 80174da:	46bd      	mov	sp, r7
 80174dc:	b007      	add	sp, #28
 80174de:	bd90      	pop	{r4, r7, pc}

080174e0 <_ZN8Ch376msc9rdFatInfoEv>:

/////////////////////////////////////////////////////////////////
void Ch376msc::rdFatInfo(){
 80174e0:	b5b0      	push	{r4, r5, r7, lr}
 80174e2:	b08c      	sub	sp, #48	; 0x30
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
	uint8_t fatInfBuffer[32]; //temporary buffer for raw file FAT info
	uint8_t dataLength;
	if(_interface == UART){
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2228      	movs	r2, #40	; 0x28
 80174ec:	5c9b      	ldrb	r3, [r3, r2]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d12b      	bne.n	801754a <_ZN8Ch376msc9rdFatInfoEv+0x6a>
		sendCommand(CMD_RD_USB_DATA0);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2127      	movs	r1, #39	; 0x27
 80174f6:	0018      	movs	r0, r3
 80174f8:	f7ff fcb3 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		dataLength = readSerDataUSB();
 80174fc:	232d      	movs	r3, #45	; 0x2d
 80174fe:	18fc      	adds	r4, r7, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	0018      	movs	r0, r3
 8017504:	f001 fc0a 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8017508:	0003      	movs	r3, r0
 801750a:	7023      	strb	r3, [r4, #0]
		for(uint8_t s =0;s < dataLength;s++){
 801750c:	232f      	movs	r3, #47	; 0x2f
 801750e:	18fb      	adds	r3, r7, r3
 8017510:	2200      	movs	r2, #0
 8017512:	701a      	strb	r2, [r3, #0]
 8017514:	e010      	b.n	8017538 <_ZN8Ch376msc9rdFatInfoEv+0x58>
			fatInfBuffer[s] = readSerDataUSB();// fill up temporary buffer
 8017516:	252f      	movs	r5, #47	; 0x2f
 8017518:	197b      	adds	r3, r7, r5
 801751a:	781c      	ldrb	r4, [r3, #0]
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	0018      	movs	r0, r3
 8017520:	f001 fbfc 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8017524:	0003      	movs	r3, r0
 8017526:	001a      	movs	r2, r3
 8017528:	230c      	movs	r3, #12
 801752a:	18fb      	adds	r3, r7, r3
 801752c:	551a      	strb	r2, [r3, r4]
		for(uint8_t s =0;s < dataLength;s++){
 801752e:	197b      	adds	r3, r7, r5
 8017530:	781a      	ldrb	r2, [r3, #0]
 8017532:	197b      	adds	r3, r7, r5
 8017534:	3201      	adds	r2, #1
 8017536:	701a      	strb	r2, [r3, #0]
 8017538:	232f      	movs	r3, #47	; 0x2f
 801753a:	18fa      	adds	r2, r7, r3
 801753c:	232d      	movs	r3, #45	; 0x2d
 801753e:	18fb      	adds	r3, r7, r3
 8017540:	7812      	ldrb	r2, [r2, #0]
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	429a      	cmp	r2, r3
 8017546:	d3e6      	bcc.n	8017516 <_ZN8Ch376msc9rdFatInfoEv+0x36>
 8017548:	e032      	b.n	80175b0 <_ZN8Ch376msc9rdFatInfoEv+0xd0>
		}//end for
	} else {
		spiBeginTransfer();
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	0018      	movs	r0, r3
 801754e:	f001 fca0 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_RD_USB_DATA0);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	2127      	movs	r1, #39	; 0x27
 8017556:	0018      	movs	r0, r3
 8017558:	f7ff fc83 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		dataLength = spiReadData();
 801755c:	232d      	movs	r3, #45	; 0x2d
 801755e:	18fc      	adds	r4, r7, r3
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	0018      	movs	r0, r3
 8017564:	f001 fbf8 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 8017568:	0003      	movs	r3, r0
 801756a:	7023      	strb	r3, [r4, #0]
		for(uint8_t s =0;s < dataLength;s++){
 801756c:	232e      	movs	r3, #46	; 0x2e
 801756e:	18fb      	adds	r3, r7, r3
 8017570:	2200      	movs	r2, #0
 8017572:	701a      	strb	r2, [r3, #0]
 8017574:	e010      	b.n	8017598 <_ZN8Ch376msc9rdFatInfoEv+0xb8>
			fatInfBuffer[s] = spiReadData();// fill up temporary buffer
 8017576:	252e      	movs	r5, #46	; 0x2e
 8017578:	197b      	adds	r3, r7, r5
 801757a:	781c      	ldrb	r4, [r3, #0]
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	0018      	movs	r0, r3
 8017580:	f001 fbea 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 8017584:	0003      	movs	r3, r0
 8017586:	001a      	movs	r2, r3
 8017588:	230c      	movs	r3, #12
 801758a:	18fb      	adds	r3, r7, r3
 801758c:	551a      	strb	r2, [r3, r4]
		for(uint8_t s =0;s < dataLength;s++){
 801758e:	197b      	adds	r3, r7, r5
 8017590:	781a      	ldrb	r2, [r3, #0]
 8017592:	197b      	adds	r3, r7, r5
 8017594:	3201      	adds	r2, #1
 8017596:	701a      	strb	r2, [r3, #0]
 8017598:	232e      	movs	r3, #46	; 0x2e
 801759a:	18fa      	adds	r2, r7, r3
 801759c:	232d      	movs	r3, #45	; 0x2d
 801759e:	18fb      	adds	r3, r7, r3
 80175a0:	7812      	ldrb	r2, [r2, #0]
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d3e6      	bcc.n	8017576 <_ZN8Ch376msc9rdFatInfoEv+0x96>
		}//end for
		spiEndTransfer();
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	0018      	movs	r0, r3
 80175ac:	f001 fc7d 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
	}
	memcpy ( &_fileData, &fatInfBuffer, sizeof(fatInfBuffer) ); //copy raw data to structured variable
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	332c      	adds	r3, #44	; 0x2c
 80175b4:	001a      	movs	r2, r3
 80175b6:	230c      	movs	r3, #12
 80175b8:	18fb      	adds	r3, r7, r3
 80175ba:	0010      	movs	r0, r2
 80175bc:	0019      	movs	r1, r3
 80175be:	2320      	movs	r3, #32
 80175c0:	001a      	movs	r2, r3
 80175c2:	f00c f9d1 	bl	8023968 <memcpy>
}
 80175c6:	46c0      	nop			; (mov r8, r8)
 80175c8:	46bd      	mov	sp, r7
 80175ca:	b00c      	add	sp, #48	; 0x30
 80175cc:	bdb0      	pop	{r4, r5, r7, pc}

080175ce <_ZN8Ch376msc8byteWrGoEv>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::byteWrGo(){
 80175ce:	b590      	push	{r4, r7, lr}
 80175d0:	b085      	sub	sp, #20
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn = 0;
 80175d6:	240f      	movs	r4, #15
 80175d8:	193b      	adds	r3, r7, r4
 80175da:	2200      	movs	r2, #0
 80175dc:	701a      	strb	r2, [r3, #0]
	if(_interface == UART) {
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2228      	movs	r2, #40	; 0x28
 80175e2:	5c9b      	ldrb	r3, [r3, r2]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d10c      	bne.n	8017602 <_ZN8Ch376msc8byteWrGoEv+0x34>
		sendCommand(CMD_BYTE_WR_GO);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	213d      	movs	r1, #61	; 0x3d
 80175ec:	0018      	movs	r0, r3
 80175ee:	f7ff fc38 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		_tmpReturn = readSerDataUSB();
 80175f2:	193c      	adds	r4, r7, r4
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	0018      	movs	r0, r3
 80175f8:	f001 fb90 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 80175fc:	0003      	movs	r3, r0
 80175fe:	7023      	strb	r3, [r4, #0]
 8017600:	e014      	b.n	801762c <_ZN8Ch376msc8byteWrGoEv+0x5e>
	} else {
		spiBeginTransfer();
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	0018      	movs	r0, r3
 8017606:	f001 fc44 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_BYTE_WR_GO);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	213d      	movs	r1, #61	; 0x3d
 801760e:	0018      	movs	r0, r3
 8017610:	f7ff fc27 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		spiEndTransfer();
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	0018      	movs	r0, r3
 8017618:	f001 fc47 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		_tmpReturn = spiWaitInterrupt();
 801761c:	230f      	movs	r3, #15
 801761e:	18fc      	adds	r4, r7, r3
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	0018      	movs	r0, r3
 8017624:	f001 fbf8 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 8017628:	0003      	movs	r3, r0
 801762a:	7023      	strb	r3, [r4, #0]
	}
	return _tmpReturn;
 801762c:	230f      	movs	r3, #15
 801762e:	18fb      	adds	r3, r7, r3
 8017630:	781b      	ldrb	r3, [r3, #0]
}
 8017632:	0018      	movs	r0, r3
 8017634:	46bd      	mov	sp, r7
 8017636:	b005      	add	sp, #20
 8017638:	bd90      	pop	{r4, r7, pc}

0801763a <_ZN8Ch376msc14readDataToBuffEPc>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::readDataToBuff(char* buffer){
 801763a:	b590      	push	{r4, r7, lr}
 801763c:	b085      	sub	sp, #20
 801763e:	af00      	add	r7, sp, #0
 8017640:	6078      	str	r0, [r7, #4]
 8017642:	6039      	str	r1, [r7, #0]
	uint8_t oldCounter = _byteCounter; //old buffer counter
 8017644:	230e      	movs	r3, #14
 8017646:	18fb      	adds	r3, r7, r3
 8017648:	687a      	ldr	r2, [r7, #4]
 801764a:	7a12      	ldrb	r2, [r2, #8]
 801764c:	701a      	strb	r2, [r3, #0]
	uint8_t dataLength; // data stream size
	if(_interface == UART) {
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	2228      	movs	r2, #40	; 0x28
 8017652:	5c9b      	ldrb	r3, [r3, r2]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d12b      	bne.n	80176b0 <_ZN8Ch376msc14readDataToBuffEPc+0x76>
		sendCommand(CMD_RD_USB_DATA0);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	2127      	movs	r1, #39	; 0x27
 801765c:	0018      	movs	r0, r3
 801765e:	f7ff fc00 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		dataLength = readSerDataUSB(); // data stream size
 8017662:	230f      	movs	r3, #15
 8017664:	18fc      	adds	r4, r7, r3
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	0018      	movs	r0, r3
 801766a:	f001 fb57 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 801766e:	0003      	movs	r3, r0
 8017670:	7023      	strb	r3, [r4, #0]
		while(_byteCounter < (dataLength + oldCounter)){
 8017672:	e010      	b.n	8017696 <_ZN8Ch376msc14readDataToBuffEPc+0x5c>
			buffer[_byteCounter]=readSerDataUSB(); // incoming data add to buffer
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	7a1b      	ldrb	r3, [r3, #8]
 8017678:	001a      	movs	r2, r3
 801767a:	683b      	ldr	r3, [r7, #0]
 801767c:	189c      	adds	r4, r3, r2
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	0018      	movs	r0, r3
 8017682:	f001 fb4b 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8017686:	0003      	movs	r3, r0
 8017688:	7023      	strb	r3, [r4, #0]
			_byteCounter ++;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	7a1b      	ldrb	r3, [r3, #8]
 801768e:	3301      	adds	r3, #1
 8017690:	b2da      	uxtb	r2, r3
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	721a      	strb	r2, [r3, #8]
		while(_byteCounter < (dataLength + oldCounter)){
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	7a1b      	ldrb	r3, [r3, #8]
 801769a:	0019      	movs	r1, r3
 801769c:	230f      	movs	r3, #15
 801769e:	18fb      	adds	r3, r7, r3
 80176a0:	781a      	ldrb	r2, [r3, #0]
 80176a2:	230e      	movs	r3, #14
 80176a4:	18fb      	adds	r3, r7, r3
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	18d3      	adds	r3, r2, r3
 80176aa:	4299      	cmp	r1, r3
 80176ac:	dbe2      	blt.n	8017674 <_ZN8Ch376msc14readDataToBuffEPc+0x3a>
 80176ae:	e032      	b.n	8017716 <_ZN8Ch376msc14readDataToBuffEPc+0xdc>
		}//end while
	} else {
	spiBeginTransfer();
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	0018      	movs	r0, r3
 80176b4:	f001 fbed 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
	sendCommand(CMD_RD_USB_DATA0);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2127      	movs	r1, #39	; 0x27
 80176bc:	0018      	movs	r0, r3
 80176be:	f7ff fbd0 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
	dataLength = spiReadData(); // data stream size
 80176c2:	230f      	movs	r3, #15
 80176c4:	18fc      	adds	r4, r7, r3
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	0018      	movs	r0, r3
 80176ca:	f001 fb45 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 80176ce:	0003      	movs	r3, r0
 80176d0:	7023      	strb	r3, [r4, #0]
	while(_byteCounter < (dataLength + oldCounter)){
 80176d2:	e010      	b.n	80176f6 <_ZN8Ch376msc14readDataToBuffEPc+0xbc>
		buffer[_byteCounter]=spiReadData(); // incoming data add to buffer
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	7a1b      	ldrb	r3, [r3, #8]
 80176d8:	001a      	movs	r2, r3
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	189c      	adds	r4, r3, r2
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	0018      	movs	r0, r3
 80176e2:	f001 fb39 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 80176e6:	0003      	movs	r3, r0
 80176e8:	7023      	strb	r3, [r4, #0]
		_byteCounter ++;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	7a1b      	ldrb	r3, [r3, #8]
 80176ee:	3301      	adds	r3, #1
 80176f0:	b2da      	uxtb	r2, r3
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	721a      	strb	r2, [r3, #8]
	while(_byteCounter < (dataLength + oldCounter)){
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	7a1b      	ldrb	r3, [r3, #8]
 80176fa:	0019      	movs	r1, r3
 80176fc:	230f      	movs	r3, #15
 80176fe:	18fb      	adds	r3, r7, r3
 8017700:	781a      	ldrb	r2, [r3, #0]
 8017702:	230e      	movs	r3, #14
 8017704:	18fb      	adds	r3, r7, r3
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	18d3      	adds	r3, r2, r3
 801770a:	4299      	cmp	r1, r3
 801770c:	dbe2      	blt.n	80176d4 <_ZN8Ch376msc14readDataToBuffEPc+0x9a>
	}//end while
	spiEndTransfer();
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	0018      	movs	r0, r3
 8017712:	f001 fbca 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
	}
	return dataLength;
 8017716:	230f      	movs	r3, #15
 8017718:	18fb      	adds	r3, r7, r3
 801771a:	781b      	ldrb	r3, [r3, #0]
}
 801771c:	0018      	movs	r0, r3
 801771e:	46bd      	mov	sp, r7
 8017720:	b005      	add	sp, #20
 8017722:	bd90      	pop	{r4, r7, pc}

08017724 <_ZN8Ch376msc17writeDataFromBuffEPc>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::writeDataFromBuff(char* buffer){//====================
 8017724:	b590      	push	{r4, r7, lr}
 8017726:	b085      	sub	sp, #20
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	6039      	str	r1, [r7, #0]
	uint8_t oldCounter = _byteCounter; //old buffer counter
 801772e:	230e      	movs	r3, #14
 8017730:	18fb      	adds	r3, r7, r3
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	7a12      	ldrb	r2, [r2, #8]
 8017736:	701a      	strb	r2, [r3, #0]
	uint8_t dataLength; // data stream size
	if(_interface == UART) {
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2228      	movs	r2, #40	; 0x28
 801773c:	5c9b      	ldrb	r3, [r3, r2]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d10d      	bne.n	801775e <_ZN8Ch376msc17writeDataFromBuffEPc+0x3a>
		sendCommand(CMD_WR_REQ_DATA);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	212d      	movs	r1, #45	; 0x2d
 8017746:	0018      	movs	r0, r3
 8017748:	f7ff fb8b 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		dataLength = readSerDataUSB(); // data stream size
 801774c:	230f      	movs	r3, #15
 801774e:	18fc      	adds	r4, r7, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	0018      	movs	r0, r3
 8017754:	f001 fae2 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8017758:	0003      	movs	r3, r0
 801775a:	7023      	strb	r3, [r4, #0]
 801775c:	e020      	b.n	80177a0 <_ZN8Ch376msc17writeDataFromBuffEPc+0x7c>
	} else {
		spiBeginTransfer();
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	0018      	movs	r0, r3
 8017762:	f001 fb96 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_WR_REQ_DATA);
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	212d      	movs	r1, #45	; 0x2d
 801776a:	0018      	movs	r0, r3
 801776c:	f7ff fb79 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		dataLength = spiReadData(); // data stream size
 8017770:	230f      	movs	r3, #15
 8017772:	18fc      	adds	r4, r7, r3
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	0018      	movs	r0, r3
 8017778:	f001 faee 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 801777c:	0003      	movs	r3, r0
 801777e:	7023      	strb	r3, [r4, #0]
	}
	while(_byteCounter < (dataLength + oldCounter)){
 8017780:	e00e      	b.n	80177a0 <_ZN8Ch376msc17writeDataFromBuffEPc+0x7c>
		Send(buffer[_byteCounter]); // read data from buffer and write to serial port
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	7a1b      	ldrb	r3, [r3, #8]
 8017786:	001a      	movs	r2, r3
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	189b      	adds	r3, r3, r2
 801778c:	781b      	ldrb	r3, [r3, #0]
 801778e:	0018      	movs	r0, r3
 8017790:	f7f4 ff26 	bl	800c5e0 <Send>
		_byteCounter ++;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	7a1b      	ldrb	r3, [r3, #8]
 8017798:	3301      	adds	r3, #1
 801779a:	b2da      	uxtb	r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	721a      	strb	r2, [r3, #8]
	while(_byteCounter < (dataLength + oldCounter)){
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	7a1b      	ldrb	r3, [r3, #8]
 80177a4:	0019      	movs	r1, r3
 80177a6:	230f      	movs	r3, #15
 80177a8:	18fb      	adds	r3, r7, r3
 80177aa:	781a      	ldrb	r2, [r3, #0]
 80177ac:	230e      	movs	r3, #14
 80177ae:	18fb      	adds	r3, r7, r3
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	18d3      	adds	r3, r2, r3
 80177b4:	4299      	cmp	r1, r3
 80177b6:	dbe4      	blt.n	8017782 <_ZN8Ch376msc17writeDataFromBuffEPc+0x5e>
	}//end while
	if(_interface == SPII) spiEndTransfer();
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2228      	movs	r2, #40	; 0x28
 80177bc:	5c9b      	ldrb	r3, [r3, r2]
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d103      	bne.n	80177ca <_ZN8Ch376msc17writeDataFromBuffEPc+0xa6>
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	0018      	movs	r0, r3
 80177c6:	f001 fb70 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
	return dataLength;
 80177ca:	230f      	movs	r3, #15
 80177cc:	18fb      	adds	r3, r7, r3
 80177ce:	781b      	ldrb	r3, [r3, #0]
}
 80177d0:	0018      	movs	r0, r3
 80177d2:	46bd      	mov	sp, r7
 80177d4:	b005      	add	sp, #20
 80177d6:	bd90      	pop	{r4, r7, pc}

080177d8 <_ZN8Ch376msc11reqByteReadEh>:

/////////////////////////////////////////////////////////////////
uint8_t Ch376msc::reqByteRead(uint8_t a){
 80177d8:	b590      	push	{r4, r7, lr}
 80177da:	b085      	sub	sp, #20
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	000a      	movs	r2, r1
 80177e2:	1cfb      	adds	r3, r7, #3
 80177e4:	701a      	strb	r2, [r3, #0]
	uint8_t tmpReturn = 0;
 80177e6:	240f      	movs	r4, #15
 80177e8:	193b      	adds	r3, r7, r4
 80177ea:	2200      	movs	r2, #0
 80177ec:	701a      	strb	r2, [r3, #0]
	if(_interface == UART){
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	2228      	movs	r2, #40	; 0x28
 80177f2:	5c9b      	ldrb	r3, [r3, r2]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d114      	bne.n	8017822 <_ZN8Ch376msc11reqByteReadEh+0x4a>
		sendCommand(CMD_BYTE_READ);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	213a      	movs	r1, #58	; 0x3a
 80177fc:	0018      	movs	r0, r3
 80177fe:	f7ff fb30 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(a); // request data stream length for reading, 00 - FF
 8017802:	1cfb      	adds	r3, r7, #3
 8017804:	781b      	ldrb	r3, [r3, #0]
 8017806:	0018      	movs	r0, r3
 8017808:	f7f4 feea 	bl	800c5e0 <Send>
		Send((uint8_t)0x00);
 801780c:	2000      	movs	r0, #0
 801780e:	f7f4 fee7 	bl	800c5e0 <Send>
		tmpReturn= readSerDataUSB();
 8017812:	193c      	adds	r4, r7, r4
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	0018      	movs	r0, r3
 8017818:	f001 fa80 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 801781c:	0003      	movs	r3, r0
 801781e:	7023      	strb	r3, [r4, #0]
 8017820:	e01c      	b.n	801785c <_ZN8Ch376msc11reqByteReadEh+0x84>
	} else {
		spiBeginTransfer();
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	0018      	movs	r0, r3
 8017826:	f001 fb34 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_BYTE_READ);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	213a      	movs	r1, #58	; 0x3a
 801782e:	0018      	movs	r0, r3
 8017830:	f7ff fb17 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(a); // request data stream length for reading, 00 - FF
 8017834:	1cfb      	adds	r3, r7, #3
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	0018      	movs	r0, r3
 801783a:	f7f4 fed1 	bl	800c5e0 <Send>
		Send((uint8_t)0x00);
 801783e:	2000      	movs	r0, #0
 8017840:	f7f4 fece 	bl	800c5e0 <Send>
		spiEndTransfer();
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	0018      	movs	r0, r3
 8017848:	f001 fb2f 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		tmpReturn= spiWaitInterrupt();
 801784c:	230f      	movs	r3, #15
 801784e:	18fc      	adds	r4, r7, r3
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	0018      	movs	r0, r3
 8017854:	f001 fae0 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 8017858:	0003      	movs	r3, r0
 801785a:	7023      	strb	r3, [r4, #0]
	}
	return tmpReturn;
 801785c:	230f      	movs	r3, #15
 801785e:	18fb      	adds	r3, r7, r3
 8017860:	781b      	ldrb	r3, [r3, #0]
}
 8017862:	0018      	movs	r0, r3
 8017864:	46bd      	mov	sp, r7
 8017866:	b005      	add	sp, #20
 8017868:	bd90      	pop	{r4, r7, pc}

0801786a <_ZN8Ch376msc12reqByteWriteEh>:

////////////////////////////////////////////////////////////////
uint8_t Ch376msc::reqByteWrite(uint8_t a){
 801786a:	b590      	push	{r4, r7, lr}
 801786c:	b085      	sub	sp, #20
 801786e:	af00      	add	r7, sp, #0
 8017870:	6078      	str	r0, [r7, #4]
 8017872:	000a      	movs	r2, r1
 8017874:	1cfb      	adds	r3, r7, #3
 8017876:	701a      	strb	r2, [r3, #0]
	uint8_t tmpReturn = 0;
 8017878:	240f      	movs	r4, #15
 801787a:	193b      	adds	r3, r7, r4
 801787c:	2200      	movs	r2, #0
 801787e:	701a      	strb	r2, [r3, #0]
	if(_interface == UART) {
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2228      	movs	r2, #40	; 0x28
 8017884:	5c9b      	ldrb	r3, [r3, r2]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d114      	bne.n	80178b4 <_ZN8Ch376msc12reqByteWriteEh+0x4a>
		sendCommand(CMD_BYTE_WRITE);
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	213c      	movs	r1, #60	; 0x3c
 801788e:	0018      	movs	r0, r3
 8017890:	f7ff fae7 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(a); // request data stream length for writing, 00 - FF
 8017894:	1cfb      	adds	r3, r7, #3
 8017896:	781b      	ldrb	r3, [r3, #0]
 8017898:	0018      	movs	r0, r3
 801789a:	f7f4 fea1 	bl	800c5e0 <Send>
		Send((uint8_t)0x00);
 801789e:	2000      	movs	r0, #0
 80178a0:	f7f4 fe9e 	bl	800c5e0 <Send>
		tmpReturn = readSerDataUSB();
 80178a4:	193c      	adds	r4, r7, r4
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	0018      	movs	r0, r3
 80178aa:	f001 fa37 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 80178ae:	0003      	movs	r3, r0
 80178b0:	7023      	strb	r3, [r4, #0]
 80178b2:	e01c      	b.n	80178ee <_ZN8Ch376msc12reqByteWriteEh+0x84>
	} else {
		spiBeginTransfer();
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	0018      	movs	r0, r3
 80178b8:	f001 faeb 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_BYTE_WRITE);
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	213c      	movs	r1, #60	; 0x3c
 80178c0:	0018      	movs	r0, r3
 80178c2:	f7ff face 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		Send(a); // request data stream length for writing, 00 - FF
 80178c6:	1cfb      	adds	r3, r7, #3
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	0018      	movs	r0, r3
 80178cc:	f7f4 fe88 	bl	800c5e0 <Send>
		Send((uint8_t)0x00);
 80178d0:	2000      	movs	r0, #0
 80178d2:	f7f4 fe85 	bl	800c5e0 <Send>
		spiEndTransfer();
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	0018      	movs	r0, r3
 80178da:	f001 fae6 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		tmpReturn = spiWaitInterrupt();
 80178de:	230f      	movs	r3, #15
 80178e0:	18fc      	adds	r4, r7, r3
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	0018      	movs	r0, r3
 80178e6:	f001 fa97 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 80178ea:	0003      	movs	r3, r0
 80178ec:	7023      	strb	r3, [r4, #0]
	}
	return tmpReturn;
 80178ee:	230f      	movs	r3, #15
 80178f0:	18fb      	adds	r3, r7, r3
 80178f2:	781b      	ldrb	r3, [r3, #0]
}
 80178f4:	0018      	movs	r0, r3
 80178f6:	46bd      	mov	sp, r7
 80178f8:	b005      	add	sp, #20
 80178fa:	bd90      	pop	{r4, r7, pc}

080178fc <_ZN8Ch376msc12sendFilenameEv>:
	}
	return tmpReturn;
}

/////////////////////////////////////////////////////////////////
void Ch376msc::sendFilename(){
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
	if(_interface == SPII) spiBeginTransfer();
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	2228      	movs	r2, #40	; 0x28
 8017908:	5c9b      	ldrb	r3, [r3, r2]
 801790a:	2b01      	cmp	r3, #1
 801790c:	d103      	bne.n	8017916 <_ZN8Ch376msc12sendFilenameEv+0x1a>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	0018      	movs	r0, r3
 8017912:	f001 fabe 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
	sendCommand(CMD_SET_FILE_NAME);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	212f      	movs	r1, #47	; 0x2f
 801791a:	0018      	movs	r0, r3
 801791c:	f7ff faa1 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
	Send(0x2f); // "/" root directory
 8017920:	202f      	movs	r0, #47	; 0x2f
 8017922:	f7f4 fe5d 	bl	800c5e0 <Send>
	print(_filename); // filename
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	3314      	adds	r3, #20
 801792a:	001a      	movs	r2, r3
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	0011      	movs	r1, r2
 8017930:	0018      	movs	r0, r3
 8017932:	f001 fa26 	bl	8018d82 <_ZN8Ch376msc5printEPc>
	Send(0x5C);	// ez a "\" jel
 8017936:	205c      	movs	r0, #92	; 0x5c
 8017938:	f7f4 fe52 	bl	800c5e0 <Send>
	Send((uint8_t)0x00);	// ez a lezaro 0 jel
 801793c:	2000      	movs	r0, #0
 801793e:	f7f4 fe4f 	bl	800c5e0 <Send>
	if(_interface == SPII) spiEndTransfer();
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	2228      	movs	r2, #40	; 0x28
 8017946:	5c9b      	ldrb	r3, [r3, r2]
 8017948:	2b01      	cmp	r3, #1
 801794a:	d103      	bne.n	8017954 <_ZN8Ch376msc12sendFilenameEv+0x58>
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	0018      	movs	r0, r3
 8017950:	f001 faab 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
}
 8017954:	46c0      	nop			; (mov r8, r8)
 8017956:	46bd      	mov	sp, r7
 8017958:	b002      	add	sp, #8
 801795a:	bd80      	pop	{r7, pc}

0801795c <_ZN8Ch376msc10rdDiskInfoEv>:
/////////////////////////////////////////////////////////////////
void Ch376msc::rdDiskInfo(){
 801795c:	b5b0      	push	{r4, r5, r7, lr}
 801795e:	b086      	sub	sp, #24
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
	uint8_t dataLength;
	uint8_t tmpReturn;
	uint8_t tmpdata[9];
	if(_interface == UART){
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2228      	movs	r2, #40	; 0x28
 8017968:	5c9b      	ldrb	r3, [r3, r2]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d13d      	bne.n	80179ea <_ZN8Ch376msc10rdDiskInfoEv+0x8e>
		sendCommand(CMD_DISK_QUERY);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	213f      	movs	r1, #63	; 0x3f
 8017972:	0018      	movs	r0, r3
 8017974:	f7ff fa75 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		tmpReturn= readSerDataUSB();
 8017978:	2515      	movs	r5, #21
 801797a:	197c      	adds	r4, r7, r5
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	0018      	movs	r0, r3
 8017980:	f001 f9cc 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 8017984:	0003      	movs	r3, r0
 8017986:	7023      	strb	r3, [r4, #0]
		if(tmpReturn == ANSW_USB_INT_SUCCESS){
 8017988:	197b      	adds	r3, r7, r5
 801798a:	781b      	ldrb	r3, [r3, #0]
 801798c:	2b14      	cmp	r3, #20
 801798e:	d000      	beq.n	8017992 <_ZN8Ch376msc10rdDiskInfoEv+0x36>
 8017990:	e077      	b.n	8017a82 <_ZN8Ch376msc10rdDiskInfoEv+0x126>
			sendCommand(CMD_RD_USB_DATA0);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	2127      	movs	r1, #39	; 0x27
 8017996:	0018      	movs	r0, r3
 8017998:	f7ff fa63 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
			dataLength = readSerDataUSB();
 801799c:	2314      	movs	r3, #20
 801799e:	18fc      	adds	r4, r7, r3
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	0018      	movs	r0, r3
 80179a4:	f001 f9ba 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 80179a8:	0003      	movs	r3, r0
 80179aa:	7023      	strb	r3, [r4, #0]
			for(uint8_t s =0;s < dataLength;s++){
 80179ac:	2317      	movs	r3, #23
 80179ae:	18fb      	adds	r3, r7, r3
 80179b0:	2200      	movs	r2, #0
 80179b2:	701a      	strb	r2, [r3, #0]
 80179b4:	e010      	b.n	80179d8 <_ZN8Ch376msc10rdDiskInfoEv+0x7c>
				tmpdata[s] = readSerDataUSB();// fill up temporary buffer
 80179b6:	2517      	movs	r5, #23
 80179b8:	197b      	adds	r3, r7, r5
 80179ba:	781c      	ldrb	r4, [r3, #0]
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	0018      	movs	r0, r3
 80179c0:	f001 f9ac 	bl	8018d1c <_ZN8Ch376msc14readSerDataUSBEv>
 80179c4:	0003      	movs	r3, r0
 80179c6:	001a      	movs	r2, r3
 80179c8:	2308      	movs	r3, #8
 80179ca:	18fb      	adds	r3, r7, r3
 80179cc:	551a      	strb	r2, [r3, r4]
			for(uint8_t s =0;s < dataLength;s++){
 80179ce:	197b      	adds	r3, r7, r5
 80179d0:	781a      	ldrb	r2, [r3, #0]
 80179d2:	197b      	adds	r3, r7, r5
 80179d4:	3201      	adds	r2, #1
 80179d6:	701a      	strb	r2, [r3, #0]
 80179d8:	2317      	movs	r3, #23
 80179da:	18fa      	adds	r2, r7, r3
 80179dc:	2314      	movs	r3, #20
 80179de:	18fb      	adds	r3, r7, r3
 80179e0:	7812      	ldrb	r2, [r2, #0]
 80179e2:	781b      	ldrb	r3, [r3, #0]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d3e6      	bcc.n	80179b6 <_ZN8Ch376msc10rdDiskInfoEv+0x5a>
 80179e8:	e04b      	b.n	8017a82 <_ZN8Ch376msc10rdDiskInfoEv+0x126>
			}//end for
		}//end if success
	} else {
		spiBeginTransfer();
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	0018      	movs	r0, r3
 80179ee:	f001 fa50 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_DISK_QUERY);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	213f      	movs	r1, #63	; 0x3f
 80179f6:	0018      	movs	r0, r3
 80179f8:	f7ff fa33 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		spiEndTransfer();
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	0018      	movs	r0, r3
 8017a00:	f001 fa53 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		tmpReturn= spiWaitInterrupt();
 8017a04:	2515      	movs	r5, #21
 8017a06:	197c      	adds	r4, r7, r5
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	0018      	movs	r0, r3
 8017a0c:	f001 fa04 	bl	8018e18 <_ZN8Ch376msc16spiWaitInterruptEv>
 8017a10:	0003      	movs	r3, r0
 8017a12:	7023      	strb	r3, [r4, #0]
		if(tmpReturn == ANSW_USB_INT_SUCCESS){
 8017a14:	197b      	adds	r3, r7, r5
 8017a16:	781b      	ldrb	r3, [r3, #0]
 8017a18:	2b14      	cmp	r3, #20
 8017a1a:	d132      	bne.n	8017a82 <_ZN8Ch376msc10rdDiskInfoEv+0x126>
			spiBeginTransfer();
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	0018      	movs	r0, r3
 8017a20:	f001 fa37 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
			sendCommand(CMD_RD_USB_DATA0);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	2127      	movs	r1, #39	; 0x27
 8017a28:	0018      	movs	r0, r3
 8017a2a:	f7ff fa1a 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
			dataLength = spiReadData();
 8017a2e:	2314      	movs	r3, #20
 8017a30:	18fc      	adds	r4, r7, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	0018      	movs	r0, r3
 8017a36:	f001 f98f 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 8017a3a:	0003      	movs	r3, r0
 8017a3c:	7023      	strb	r3, [r4, #0]
			for(uint8_t s =0;s < dataLength;s++){
 8017a3e:	2316      	movs	r3, #22
 8017a40:	18fb      	adds	r3, r7, r3
 8017a42:	2200      	movs	r2, #0
 8017a44:	701a      	strb	r2, [r3, #0]
 8017a46:	e010      	b.n	8017a6a <_ZN8Ch376msc10rdDiskInfoEv+0x10e>
				tmpdata[s] = spiReadData();// fill up temporary buffer
 8017a48:	2516      	movs	r5, #22
 8017a4a:	197b      	adds	r3, r7, r5
 8017a4c:	781c      	ldrb	r4, [r3, #0]
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	0018      	movs	r0, r3
 8017a52:	f001 f981 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 8017a56:	0003      	movs	r3, r0
 8017a58:	001a      	movs	r2, r3
 8017a5a:	2308      	movs	r3, #8
 8017a5c:	18fb      	adds	r3, r7, r3
 8017a5e:	551a      	strb	r2, [r3, r4]
			for(uint8_t s =0;s < dataLength;s++){
 8017a60:	197b      	adds	r3, r7, r5
 8017a62:	781a      	ldrb	r2, [r3, #0]
 8017a64:	197b      	adds	r3, r7, r5
 8017a66:	3201      	adds	r2, #1
 8017a68:	701a      	strb	r2, [r3, #0]
 8017a6a:	2316      	movs	r3, #22
 8017a6c:	18fa      	adds	r2, r7, r3
 8017a6e:	2314      	movs	r3, #20
 8017a70:	18fb      	adds	r3, r7, r3
 8017a72:	7812      	ldrb	r2, [r2, #0]
 8017a74:	781b      	ldrb	r3, [r3, #0]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d3e6      	bcc.n	8017a48 <_ZN8Ch376msc10rdDiskInfoEv+0xec>
			}//end for
			spiEndTransfer();
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	0018      	movs	r0, r3
 8017a7e:	f001 fa14 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
		}//end if success
	}//end if UART
	memcpy ( &_diskData, &tmpdata, sizeof(tmpdata) ); //copy raw data to structured variable
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	334c      	adds	r3, #76	; 0x4c
 8017a86:	001a      	movs	r2, r3
 8017a88:	2308      	movs	r3, #8
 8017a8a:	18fb      	adds	r3, r7, r3
 8017a8c:	0010      	movs	r0, r2
 8017a8e:	0019      	movs	r1, r3
 8017a90:	2309      	movs	r3, #9
 8017a92:	001a      	movs	r2, r3
 8017a94:	f00b ff68 	bl	8023968 <memcpy>
}
 8017a98:	46c0      	nop			; (mov r8, r8)
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	b006      	add	sp, #24
 8017a9e:	bdb0      	pop	{r4, r5, r7, pc}

08017aa0 <loop>:
//
//};


bool loop()
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	af00      	add	r7, sp, #0

	if(flashDrive.checkDrive()){ //if any flash drive attach
 8017aa4:	4b16      	ldr	r3, [pc, #88]	; (8017b00 <loop+0x60>)
 8017aa6:	0018      	movs	r0, r3
 8017aa8:	f7ff f9a6 	bl	8016df8 <_ZN8Ch376msc10checkDriveEv>
 8017aac:	1e03      	subs	r3, r0, #0
 8017aae:	d023      	beq.n	8017af8 <loop+0x58>
		//printInfo("Read File: programFile.txt");          // Read the contents of this file on the USB disk, and display contents in the Serial Monitor
		flashDrive.setFileName("FILE.TXT");        //set the file name
 8017ab0:	4a14      	ldr	r2, [pc, #80]	; (8017b04 <loop+0x64>)
 8017ab2:	4b13      	ldr	r3, [pc, #76]	; (8017b00 <loop+0x60>)
 8017ab4:	0011      	movs	r1, r2
 8017ab6:	0018      	movs	r0, r3
 8017ab8:	f001 f90a 	bl	8018cd0 <_ZN8Ch376msc11setFileNameEPKc>
		flashDrive.openFile();  //open the file
 8017abc:	4b10      	ldr	r3, [pc, #64]	; (8017b00 <loop+0x60>)
 8017abe:	0018      	movs	r0, r3
 8017ac0:	f7ff f9ea 	bl	8016e98 <_ZN8Ch376msc8openFileEv>
		//while(flashDrive.openFile() != ANSW_USB_INT_SUCCESS);
		readMore = true;
 8017ac4:	4b10      	ldr	r3, [pc, #64]	; (8017b08 <loop+0x68>)
 8017ac6:	2201      	movs	r2, #1
 8017ac8:	701a      	strb	r2, [r3, #0]
		                //read data from flash drive until we reach EOF
		while(readMore){ // our temporary buffer where we read data from flash drive and the size of that buffer
 8017aca:	e00b      	b.n	8017ae4 <loop+0x44>
			readMore = flashDrive.readFile(adatBuffer, sizeof(adatBuffer));
 8017acc:	490f      	ldr	r1, [pc, #60]	; (8017b0c <loop+0x6c>)
 8017ace:	4b0c      	ldr	r3, [pc, #48]	; (8017b00 <loop+0x60>)
 8017ad0:	22ff      	movs	r2, #255	; 0xff
 8017ad2:	0018      	movs	r0, r3
 8017ad4:	f7ff fb21 	bl	801711a <_ZN8Ch376msc8readFileEPch>
 8017ad8:	0003      	movs	r3, r0
 8017ada:	1e5a      	subs	r2, r3, #1
 8017adc:	4193      	sbcs	r3, r2
 8017ade:	b2da      	uxtb	r2, r3
 8017ae0:	4b09      	ldr	r3, [pc, #36]	; (8017b08 <loop+0x68>)
 8017ae2:	701a      	strb	r2, [r3, #0]
		while(readMore){ // our temporary buffer where we read data from flash drive and the size of that buffer
 8017ae4:	4b08      	ldr	r3, [pc, #32]	; (8017b08 <loop+0x68>)
 8017ae6:	781b      	ldrb	r3, [r3, #0]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d1ef      	bne.n	8017acc <loop+0x2c>
		    //printf("%s\r\n",adatBuffer);          //print the contents of the temporary buffer
		}
		flashDrive.closeFile();               //at the end, close the file
 8017aec:	4b04      	ldr	r3, [pc, #16]	; (8017b00 <loop+0x60>)
 8017aee:	0018      	movs	r0, r3
 8017af0:	f7ff fa49 	bl	8016f86 <_ZN8Ch376msc9closeFileEv>
		//printInfo("Done!");

		//printf("Flash drive content:%s\r\n",adatBuffer);          //print the contents of the temporary buffer
		return 1;
 8017af4:	2301      	movs	r3, #1
 8017af6:	e000      	b.n	8017afa <loop+0x5a>
	}else{
		return 0;
 8017af8:	2300      	movs	r3, #0
	}




}//end loop
 8017afa:	0018      	movs	r0, r3
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	200077f8 	.word	0x200077f8
 8017b04:	08030b0c 	.word	0x08030b0c
 8017b08:	2000794f 	.word	0x2000794f
 8017b0c:	20007850 	.word	0x20007850

08017b10 <loop2>:
bool loop2()
{
 8017b10:	b5b0      	push	{r4, r5, r7, lr}
 8017b12:	b08c      	sub	sp, #48	; 0x30
 8017b14:	af00      	add	r7, sp, #0
	char bufferchar1[sizeof("IR Command ON : ")] = "IR Command ON : ";
 8017b16:	2514      	movs	r5, #20
 8017b18:	197b      	adds	r3, r7, r5
 8017b1a:	4a29      	ldr	r2, [pc, #164]	; (8017bc0 <loop2+0xb0>)
 8017b1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017b1e:	c313      	stmia	r3!, {r0, r1, r4}
 8017b20:	6811      	ldr	r1, [r2, #0]
 8017b22:	6019      	str	r1, [r3, #0]
 8017b24:	7912      	ldrb	r2, [r2, #4]
 8017b26:	711a      	strb	r2, [r3, #4]
	char bufferchar2[sizeof("\n\rIR Command OFF : ")] = "\n\rIR Command OFF : ";
 8017b28:	003b      	movs	r3, r7
 8017b2a:	4a26      	ldr	r2, [pc, #152]	; (8017bc4 <loop2+0xb4>)
 8017b2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017b2e:	c313      	stmia	r3!, {r0, r1, r4}
 8017b30:	ca03      	ldmia	r2!, {r0, r1}
 8017b32:	c303      	stmia	r3!, {r0, r1}

	flashDrive.setFileName("LOG.TXT");        //set the file name
 8017b34:	4a24      	ldr	r2, [pc, #144]	; (8017bc8 <loop2+0xb8>)
 8017b36:	4b25      	ldr	r3, [pc, #148]	; (8017bcc <loop2+0xbc>)
 8017b38:	0011      	movs	r1, r2
 8017b3a:	0018      	movs	r0, r3
 8017b3c:	f001 f8c8 	bl	8018cd0 <_ZN8Ch376msc11setFileNameEPKc>
	//flashDrive.deleteFile();
	flashDrive.openFile();  //open the file
 8017b40:	4b22      	ldr	r3, [pc, #136]	; (8017bcc <loop2+0xbc>)
 8017b42:	0018      	movs	r0, r3
 8017b44:	f7ff f9a8 	bl	8016e98 <_ZN8Ch376msc8openFileEv>

	flashDrive.writeFile(bufferchar1, sizeof(bufferchar1));  //open the file
 8017b48:	1979      	adds	r1, r7, r5
 8017b4a:	4b20      	ldr	r3, [pc, #128]	; (8017bcc <loop2+0xbc>)
 8017b4c:	2211      	movs	r2, #17
 8017b4e:	0018      	movs	r0, r3
 8017b50:	f7ff fbd6 	bl	8017300 <_ZN8Ch376msc9writeFileEPch>

	for (int i = 0; i< 8; i++)
 8017b54:	2300      	movs	r3, #0
 8017b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b58:	e00b      	b.n	8017b72 <loop2+0x62>
		flashDrive.writeFile(&pcb_config.sSetIR[i],1);
 8017b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b5c:	4b1c      	ldr	r3, [pc, #112]	; (8017bd0 <loop2+0xc0>)
 8017b5e:	18d3      	adds	r3, r2, r3
 8017b60:	1d19      	adds	r1, r3, #4
 8017b62:	4b1a      	ldr	r3, [pc, #104]	; (8017bcc <loop2+0xbc>)
 8017b64:	2201      	movs	r2, #1
 8017b66:	0018      	movs	r0, r3
 8017b68:	f7ff fbca 	bl	8017300 <_ZN8Ch376msc9writeFileEPch>
	for (int i = 0; i< 8; i++)
 8017b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6e:	3301      	adds	r3, #1
 8017b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b74:	2b07      	cmp	r3, #7
 8017b76:	ddf0      	ble.n	8017b5a <loop2+0x4a>

	flashDrive.writeFile(bufferchar2, sizeof(bufferchar2));  //open the file
 8017b78:	0039      	movs	r1, r7
 8017b7a:	4b14      	ldr	r3, [pc, #80]	; (8017bcc <loop2+0xbc>)
 8017b7c:	2214      	movs	r2, #20
 8017b7e:	0018      	movs	r0, r3
 8017b80:	f7ff fbbe 	bl	8017300 <_ZN8Ch376msc9writeFileEPch>

	for (int j = 0; j< 8; j++)
 8017b84:	2300      	movs	r3, #0
 8017b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b88:	e00d      	b.n	8017ba6 <loop2+0x96>
			flashDrive.writeFile(&pcb_config.sSetIROFF[j],1);
 8017b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b8c:	3310      	adds	r3, #16
 8017b8e:	001a      	movs	r2, r3
 8017b90:	4b0f      	ldr	r3, [pc, #60]	; (8017bd0 <loop2+0xc0>)
 8017b92:	18d3      	adds	r3, r2, r3
 8017b94:	1cd9      	adds	r1, r3, #3
 8017b96:	4b0d      	ldr	r3, [pc, #52]	; (8017bcc <loop2+0xbc>)
 8017b98:	2201      	movs	r2, #1
 8017b9a:	0018      	movs	r0, r3
 8017b9c:	f7ff fbb0 	bl	8017300 <_ZN8Ch376msc9writeFileEPch>
	for (int j = 0; j< 8; j++)
 8017ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba2:	3301      	adds	r3, #1
 8017ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba8:	2b07      	cmp	r3, #7
 8017baa:	ddee      	ble.n	8017b8a <loop2+0x7a>


	flashDrive.closeFile();               //at the end, close the file
 8017bac:	4b07      	ldr	r3, [pc, #28]	; (8017bcc <loop2+0xbc>)
 8017bae:	0018      	movs	r0, r3
 8017bb0:	f7ff f9e9 	bl	8016f86 <_ZN8Ch376msc9closeFileEv>
	return 1;
 8017bb4:	2301      	movs	r3, #1
}
 8017bb6:	0018      	movs	r0, r3
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	b00c      	add	sp, #48	; 0x30
 8017bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8017bbe:	46c0      	nop			; (mov r8, r8)
 8017bc0:	08030b20 	.word	0x08030b20
 8017bc4:	08030b34 	.word	0x08030b34
 8017bc8:	08030b18 	.word	0x08030b18
 8017bcc:	200077f8 	.word	0x200077f8
 8017bd0:	20006db4 	.word	0x20006db4

08017bd4 <loop3>:
bool loop3()
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	af00      	add	r7, sp, #0


	flashDrive.setFileName("LOGRS232.TXT");        //set the file name
 8017bd8:	4a0b      	ldr	r2, [pc, #44]	; (8017c08 <loop3+0x34>)
 8017bda:	4b0c      	ldr	r3, [pc, #48]	; (8017c0c <loop3+0x38>)
 8017bdc:	0011      	movs	r1, r2
 8017bde:	0018      	movs	r0, r3
 8017be0:	f001 f876 	bl	8018cd0 <_ZN8Ch376msc11setFileNameEPKc>
	//flashDrive.deleteFile();
	flashDrive.openFile();  //open the file
 8017be4:	4b09      	ldr	r3, [pc, #36]	; (8017c0c <loop3+0x38>)
 8017be6:	0018      	movs	r0, r3
 8017be8:	f7ff f956 	bl	8016e98 <_ZN8Ch376msc8openFileEv>

	flashDrive.writeFile(bufferLog, (uint8_t)sizeof(bufferLog));  //open the file
 8017bec:	4908      	ldr	r1, [pc, #32]	; (8017c10 <loop3+0x3c>)
 8017bee:	4b07      	ldr	r3, [pc, #28]	; (8017c0c <loop3+0x38>)
 8017bf0:	22fc      	movs	r2, #252	; 0xfc
 8017bf2:	0018      	movs	r0, r3
 8017bf4:	f7ff fb84 	bl	8017300 <_ZN8Ch376msc9writeFileEPch>

	flashDrive.closeFile();               //at the end, close the file
 8017bf8:	4b04      	ldr	r3, [pc, #16]	; (8017c0c <loop3+0x38>)
 8017bfa:	0018      	movs	r0, r3
 8017bfc:	f7ff f9c3 	bl	8016f86 <_ZN8Ch376msc9closeFileEv>
	return 1;
 8017c00:	2301      	movs	r3, #1
}
 8017c02:	0018      	movs	r0, r3
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}
 8017c08:	08030b48 	.word	0x08030b48
 8017c0c:	200077f8 	.word	0x200077f8
 8017c10:	200073f4 	.word	0x200073f4

08017c14 <LogToBufferLog>:

void LogToBufferLog(char * stringToLog, int size)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	6039      	str	r1, [r7, #0]
	if (indexBufferLog + size > 1020)
 8017c1e:	4b14      	ldr	r3, [pc, #80]	; (8017c70 <LogToBufferLog+0x5c>)
 8017c20:	681a      	ldr	r2, [r3, #0]
 8017c22:	683b      	ldr	r3, [r7, #0]
 8017c24:	18d2      	adds	r2, r2, r3
 8017c26:	23ff      	movs	r3, #255	; 0xff
 8017c28:	009b      	lsls	r3, r3, #2
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	dd02      	ble.n	8017c34 <LogToBufferLog+0x20>
		indexBufferLog = 0;
 8017c2e:	4b10      	ldr	r3, [pc, #64]	; (8017c70 <LogToBufferLog+0x5c>)
 8017c30:	2200      	movs	r2, #0
 8017c32:	601a      	str	r2, [r3, #0]

	for (int i = 0 ; i < size ; i++)
 8017c34:	2300      	movs	r3, #0
 8017c36:	60fb      	str	r3, [r7, #12]
 8017c38:	e00c      	b.n	8017c54 <LogToBufferLog+0x40>
	{
		bufferLog[i+indexBufferLog] = stringToLog[i];
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	687a      	ldr	r2, [r7, #4]
 8017c3e:	18d2      	adds	r2, r2, r3
 8017c40:	4b0b      	ldr	r3, [pc, #44]	; (8017c70 <LogToBufferLog+0x5c>)
 8017c42:	6819      	ldr	r1, [r3, #0]
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	18cb      	adds	r3, r1, r3
 8017c48:	7811      	ldrb	r1, [r2, #0]
 8017c4a:	4a0a      	ldr	r2, [pc, #40]	; (8017c74 <LogToBufferLog+0x60>)
 8017c4c:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < size ; i++)
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	3301      	adds	r3, #1
 8017c52:	60fb      	str	r3, [r7, #12]
 8017c54:	68fa      	ldr	r2, [r7, #12]
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	dbee      	blt.n	8017c3a <LogToBufferLog+0x26>

	}
	indexBufferLog+=size;
 8017c5c:	4b04      	ldr	r3, [pc, #16]	; (8017c70 <LogToBufferLog+0x5c>)
 8017c5e:	681a      	ldr	r2, [r3, #0]
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	18d2      	adds	r2, r2, r3
 8017c64:	4b02      	ldr	r3, [pc, #8]	; (8017c70 <LogToBufferLog+0x5c>)
 8017c66:	601a      	str	r2, [r3, #0]
}
 8017c68:	46c0      	nop			; (mov r8, r8)
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	b004      	add	sp, #16
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	200077f0 	.word	0x200077f0
 8017c74:	200073f4 	.word	0x200073f4

08017c78 <MyApp>:
struct PCB_Config file;
char a, b;
int i, m, j;

void MyApp(void)
{	
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	af00      	add	r7, sp, #0
//	flashDrive.init();
//
//	while(1)
//	 {
		
		if(loop()){
 8017c7c:	f7ff ff10 	bl	8017aa0 <loop>
 8017c80:	1e03      	subs	r3, r0, #0
 8017c82:	d101      	bne.n	8017c88 <MyApp+0x10>
 8017c84:	f000 fee3 	bl	8018a4e <MyApp+0xdd6>

			file.MagicNumber[0] = 0xDD;
 8017c88:	4be5      	ldr	r3, [pc, #916]	; (8018020 <MyApp+0x3a8>)
 8017c8a:	22dd      	movs	r2, #221	; 0xdd
 8017c8c:	701a      	strb	r2, [r3, #0]
			file.MagicNumber[1] = 0x55;
 8017c8e:	4be4      	ldr	r3, [pc, #912]	; (8018020 <MyApp+0x3a8>)
 8017c90:	2255      	movs	r2, #85	; 0x55
 8017c92:	705a      	strb	r2, [r3, #1]
			file.MagicNumber[2] = MAGIC;
 8017c94:	4be2      	ldr	r3, [pc, #904]	; (8018020 <MyApp+0x3a8>)
 8017c96:	22dc      	movs	r2, #220	; 0xdc
 8017c98:	709a      	strb	r2, [r3, #2]
			file.MagicNumber[3] = 0x11;
 8017c9a:	4be1      	ldr	r3, [pc, #900]	; (8018020 <MyApp+0x3a8>)
 8017c9c:	2211      	movs	r2, #17
 8017c9e:	70da      	strb	r2, [r3, #3]

			///1///
			a = search(adatBuffer,(char*)"SetIR:");
 8017ca0:	4ae0      	ldr	r2, [pc, #896]	; (8018024 <MyApp+0x3ac>)
 8017ca2:	4be1      	ldr	r3, [pc, #900]	; (8018028 <MyApp+0x3b0>)
 8017ca4:	0011      	movs	r1, r2
 8017ca6:	0018      	movs	r0, r3
 8017ca8:	f000 ffa2 	bl	8018bf0 <_Z6searchPcS_>
 8017cac:	0003      	movs	r3, r0
 8017cae:	001a      	movs	r2, r3
 8017cb0:	4bde      	ldr	r3, [pc, #888]	; (801802c <MyApp+0x3b4>)
 8017cb2:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8017cb4:	4ade      	ldr	r2, [pc, #888]	; (8018030 <MyApp+0x3b8>)
 8017cb6:	4bdc      	ldr	r3, [pc, #880]	; (8018028 <MyApp+0x3b0>)
 8017cb8:	0011      	movs	r1, r2
 8017cba:	0018      	movs	r0, r3
 8017cbc:	f000 ff98 	bl	8018bf0 <_Z6searchPcS_>
 8017cc0:	0003      	movs	r3, r0
 8017cc2:	001a      	movs	r2, r3
 8017cc4:	4bdb      	ldr	r3, [pc, #876]	; (8018034 <MyApp+0x3bc>)
 8017cc6:	701a      	strb	r2, [r3, #0]
			if(a)
 8017cc8:	4bd8      	ldr	r3, [pc, #864]	; (801802c <MyApp+0x3b4>)
 8017cca:	781b      	ldrb	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d043      	beq.n	8017d58 <MyApp+0xe0>
			{
				for(i = 0,j = a;j < b - 1;j++,i++){
 8017cd0:	4bd9      	ldr	r3, [pc, #868]	; (8018038 <MyApp+0x3c0>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	601a      	str	r2, [r3, #0]
 8017cd6:	4bd5      	ldr	r3, [pc, #852]	; (801802c <MyApp+0x3b4>)
 8017cd8:	781b      	ldrb	r3, [r3, #0]
 8017cda:	001a      	movs	r2, r3
 8017cdc:	4bd7      	ldr	r3, [pc, #860]	; (801803c <MyApp+0x3c4>)
 8017cde:	601a      	str	r2, [r3, #0]
 8017ce0:	e013      	b.n	8017d0a <MyApp+0x92>
					file.sSetIR[i] = adatBuffer[j];
 8017ce2:	4bd6      	ldr	r3, [pc, #856]	; (801803c <MyApp+0x3c4>)
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	4bd4      	ldr	r3, [pc, #848]	; (8018038 <MyApp+0x3c0>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	49cf      	ldr	r1, [pc, #828]	; (8018028 <MyApp+0x3b0>)
 8017cec:	5c89      	ldrb	r1, [r1, r2]
 8017cee:	4acc      	ldr	r2, [pc, #816]	; (8018020 <MyApp+0x3a8>)
 8017cf0:	18d3      	adds	r3, r2, r3
 8017cf2:	1c0a      	adds	r2, r1, #0
 8017cf4:	711a      	strb	r2, [r3, #4]
				for(i = 0,j = a;j < b - 1;j++,i++){
 8017cf6:	4bd1      	ldr	r3, [pc, #836]	; (801803c <MyApp+0x3c4>)
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	1c5a      	adds	r2, r3, #1
 8017cfc:	4bcf      	ldr	r3, [pc, #828]	; (801803c <MyApp+0x3c4>)
 8017cfe:	601a      	str	r2, [r3, #0]
 8017d00:	4bcd      	ldr	r3, [pc, #820]	; (8018038 <MyApp+0x3c0>)
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	1c5a      	adds	r2, r3, #1
 8017d06:	4bcc      	ldr	r3, [pc, #816]	; (8018038 <MyApp+0x3c0>)
 8017d08:	601a      	str	r2, [r3, #0]
 8017d0a:	4bca      	ldr	r3, [pc, #808]	; (8018034 <MyApp+0x3bc>)
 8017d0c:	781b      	ldrb	r3, [r3, #0]
 8017d0e:	1e5a      	subs	r2, r3, #1
 8017d10:	4bca      	ldr	r3, [pc, #808]	; (801803c <MyApp+0x3c4>)
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	429a      	cmp	r2, r3
 8017d16:	dce4      	bgt.n	8017ce2 <MyApp+0x6a>
				}
				m = 0;
 8017d18:	4bc9      	ldr	r3, [pc, #804]	; (8018040 <MyApp+0x3c8>)
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017d1e:	e010      	b.n	8017d42 <MyApp+0xca>
					adatBuffer[m] = adatBuffer[m + b];
 8017d20:	4bc4      	ldr	r3, [pc, #784]	; (8018034 <MyApp+0x3bc>)
 8017d22:	781b      	ldrb	r3, [r3, #0]
 8017d24:	001a      	movs	r2, r3
 8017d26:	4bc6      	ldr	r3, [pc, #792]	; (8018040 <MyApp+0x3c8>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	18d2      	adds	r2, r2, r3
 8017d2c:	4bc4      	ldr	r3, [pc, #784]	; (8018040 <MyApp+0x3c8>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	49bd      	ldr	r1, [pc, #756]	; (8018028 <MyApp+0x3b0>)
 8017d32:	5c89      	ldrb	r1, [r1, r2]
 8017d34:	4abc      	ldr	r2, [pc, #752]	; (8018028 <MyApp+0x3b0>)
 8017d36:	54d1      	strb	r1, [r2, r3]
					m++;
 8017d38:	4bc1      	ldr	r3, [pc, #772]	; (8018040 <MyApp+0x3c8>)
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	1c5a      	adds	r2, r3, #1
 8017d3e:	4bc0      	ldr	r3, [pc, #768]	; (8018040 <MyApp+0x3c8>)
 8017d40:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017d42:	4bbc      	ldr	r3, [pc, #752]	; (8018034 <MyApp+0x3bc>)
 8017d44:	781b      	ldrb	r3, [r3, #0]
 8017d46:	001a      	movs	r2, r3
 8017d48:	2380      	movs	r3, #128	; 0x80
 8017d4a:	005b      	lsls	r3, r3, #1
 8017d4c:	1a9a      	subs	r2, r3, r2
 8017d4e:	4bbc      	ldr	r3, [pc, #752]	; (8018040 <MyApp+0x3c8>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	429a      	cmp	r2, r3
 8017d54:	dce4      	bgt.n	8017d20 <MyApp+0xa8>
 8017d56:	e002      	b.n	8017d5e <MyApp+0xe6>
				}
			}
			else
				problem = true;
 8017d58:	4bba      	ldr	r3, [pc, #744]	; (8018044 <MyApp+0x3cc>)
 8017d5a:	2201      	movs	r2, #1
 8017d5c:	701a      	strb	r2, [r3, #0]

			///1///
			a = search(adatBuffer,(char*)"SetIROFF:");
 8017d5e:	4aba      	ldr	r2, [pc, #744]	; (8018048 <MyApp+0x3d0>)
 8017d60:	4bb1      	ldr	r3, [pc, #708]	; (8018028 <MyApp+0x3b0>)
 8017d62:	0011      	movs	r1, r2
 8017d64:	0018      	movs	r0, r3
 8017d66:	f000 ff43 	bl	8018bf0 <_Z6searchPcS_>
 8017d6a:	0003      	movs	r3, r0
 8017d6c:	001a      	movs	r2, r3
 8017d6e:	4baf      	ldr	r3, [pc, #700]	; (801802c <MyApp+0x3b4>)
 8017d70:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8017d72:	4aaf      	ldr	r2, [pc, #700]	; (8018030 <MyApp+0x3b8>)
 8017d74:	4bac      	ldr	r3, [pc, #688]	; (8018028 <MyApp+0x3b0>)
 8017d76:	0011      	movs	r1, r2
 8017d78:	0018      	movs	r0, r3
 8017d7a:	f000 ff39 	bl	8018bf0 <_Z6searchPcS_>
 8017d7e:	0003      	movs	r3, r0
 8017d80:	001a      	movs	r2, r3
 8017d82:	4bac      	ldr	r3, [pc, #688]	; (8018034 <MyApp+0x3bc>)
 8017d84:	701a      	strb	r2, [r3, #0]
			if(a){
 8017d86:	4ba9      	ldr	r3, [pc, #676]	; (801802c <MyApp+0x3b4>)
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d043      	beq.n	8017e16 <MyApp+0x19e>
				for(i = 0,j = a;j < b - 1;j++,i++){
 8017d8e:	4baa      	ldr	r3, [pc, #680]	; (8018038 <MyApp+0x3c0>)
 8017d90:	2200      	movs	r2, #0
 8017d92:	601a      	str	r2, [r3, #0]
 8017d94:	4ba5      	ldr	r3, [pc, #660]	; (801802c <MyApp+0x3b4>)
 8017d96:	781b      	ldrb	r3, [r3, #0]
 8017d98:	001a      	movs	r2, r3
 8017d9a:	4ba8      	ldr	r3, [pc, #672]	; (801803c <MyApp+0x3c4>)
 8017d9c:	601a      	str	r2, [r3, #0]
 8017d9e:	e013      	b.n	8017dc8 <MyApp+0x150>
					file.sSetIROFF[i] = adatBuffer[j];
 8017da0:	4ba6      	ldr	r3, [pc, #664]	; (801803c <MyApp+0x3c4>)
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	4ba4      	ldr	r3, [pc, #656]	; (8018038 <MyApp+0x3c0>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	499f      	ldr	r1, [pc, #636]	; (8018028 <MyApp+0x3b0>)
 8017daa:	5c89      	ldrb	r1, [r1, r2]
 8017dac:	4a9c      	ldr	r2, [pc, #624]	; (8018020 <MyApp+0x3a8>)
 8017dae:	18d3      	adds	r3, r2, r3
 8017db0:	1c0a      	adds	r2, r1, #0
 8017db2:	74da      	strb	r2, [r3, #19]
				for(i = 0,j = a;j < b - 1;j++,i++){
 8017db4:	4ba1      	ldr	r3, [pc, #644]	; (801803c <MyApp+0x3c4>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	1c5a      	adds	r2, r3, #1
 8017dba:	4ba0      	ldr	r3, [pc, #640]	; (801803c <MyApp+0x3c4>)
 8017dbc:	601a      	str	r2, [r3, #0]
 8017dbe:	4b9e      	ldr	r3, [pc, #632]	; (8018038 <MyApp+0x3c0>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	1c5a      	adds	r2, r3, #1
 8017dc4:	4b9c      	ldr	r3, [pc, #624]	; (8018038 <MyApp+0x3c0>)
 8017dc6:	601a      	str	r2, [r3, #0]
 8017dc8:	4b9a      	ldr	r3, [pc, #616]	; (8018034 <MyApp+0x3bc>)
 8017dca:	781b      	ldrb	r3, [r3, #0]
 8017dcc:	1e5a      	subs	r2, r3, #1
 8017dce:	4b9b      	ldr	r3, [pc, #620]	; (801803c <MyApp+0x3c4>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	dce4      	bgt.n	8017da0 <MyApp+0x128>
				}
				m = 0;
 8017dd6:	4b9a      	ldr	r3, [pc, #616]	; (8018040 <MyApp+0x3c8>)
 8017dd8:	2200      	movs	r2, #0
 8017dda:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017ddc:	e010      	b.n	8017e00 <MyApp+0x188>
					adatBuffer[m] = adatBuffer[m + b];
 8017dde:	4b95      	ldr	r3, [pc, #596]	; (8018034 <MyApp+0x3bc>)
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	001a      	movs	r2, r3
 8017de4:	4b96      	ldr	r3, [pc, #600]	; (8018040 <MyApp+0x3c8>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	18d2      	adds	r2, r2, r3
 8017dea:	4b95      	ldr	r3, [pc, #596]	; (8018040 <MyApp+0x3c8>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	498e      	ldr	r1, [pc, #568]	; (8018028 <MyApp+0x3b0>)
 8017df0:	5c89      	ldrb	r1, [r1, r2]
 8017df2:	4a8d      	ldr	r2, [pc, #564]	; (8018028 <MyApp+0x3b0>)
 8017df4:	54d1      	strb	r1, [r2, r3]
					m++;
 8017df6:	4b92      	ldr	r3, [pc, #584]	; (8018040 <MyApp+0x3c8>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	1c5a      	adds	r2, r3, #1
 8017dfc:	4b90      	ldr	r3, [pc, #576]	; (8018040 <MyApp+0x3c8>)
 8017dfe:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017e00:	4b8c      	ldr	r3, [pc, #560]	; (8018034 <MyApp+0x3bc>)
 8017e02:	781b      	ldrb	r3, [r3, #0]
 8017e04:	001a      	movs	r2, r3
 8017e06:	2380      	movs	r3, #128	; 0x80
 8017e08:	005b      	lsls	r3, r3, #1
 8017e0a:	1a9a      	subs	r2, r3, r2
 8017e0c:	4b8c      	ldr	r3, [pc, #560]	; (8018040 <MyApp+0x3c8>)
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	429a      	cmp	r2, r3
 8017e12:	dce4      	bgt.n	8017dde <MyApp+0x166>
 8017e14:	e002      	b.n	8017e1c <MyApp+0x1a4>
				}
			}
			else
				problem = true;
 8017e16:	4b8b      	ldr	r3, [pc, #556]	; (8018044 <MyApp+0x3cc>)
 8017e18:	2201      	movs	r2, #1
 8017e1a:	701a      	strb	r2, [r3, #0]
			///2///
			a = search(adatBuffer,(char*)"R2S9C:");
 8017e1c:	4a8b      	ldr	r2, [pc, #556]	; (801804c <MyApp+0x3d4>)
 8017e1e:	4b82      	ldr	r3, [pc, #520]	; (8018028 <MyApp+0x3b0>)
 8017e20:	0011      	movs	r1, r2
 8017e22:	0018      	movs	r0, r3
 8017e24:	f000 fee4 	bl	8018bf0 <_Z6searchPcS_>
 8017e28:	0003      	movs	r3, r0
 8017e2a:	001a      	movs	r2, r3
 8017e2c:	4b7f      	ldr	r3, [pc, #508]	; (801802c <MyApp+0x3b4>)
 8017e2e:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8017e30:	4a7f      	ldr	r2, [pc, #508]	; (8018030 <MyApp+0x3b8>)
 8017e32:	4b7d      	ldr	r3, [pc, #500]	; (8018028 <MyApp+0x3b0>)
 8017e34:	0011      	movs	r1, r2
 8017e36:	0018      	movs	r0, r3
 8017e38:	f000 feda 	bl	8018bf0 <_Z6searchPcS_>
 8017e3c:	0003      	movs	r3, r0
 8017e3e:	001a      	movs	r2, r3
 8017e40:	4b7c      	ldr	r3, [pc, #496]	; (8018034 <MyApp+0x3bc>)
 8017e42:	701a      	strb	r2, [r3, #0]

			file.rs232nbcharsON[0] = (b-a-1)/2;
 8017e44:	4b7b      	ldr	r3, [pc, #492]	; (8018034 <MyApp+0x3bc>)
 8017e46:	781b      	ldrb	r3, [r3, #0]
 8017e48:	001a      	movs	r2, r3
 8017e4a:	4b78      	ldr	r3, [pc, #480]	; (801802c <MyApp+0x3b4>)
 8017e4c:	781b      	ldrb	r3, [r3, #0]
 8017e4e:	1ad3      	subs	r3, r2, r3
 8017e50:	3b01      	subs	r3, #1
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	da00      	bge.n	8017e58 <MyApp+0x1e0>
 8017e56:	3301      	adds	r3, #1
 8017e58:	105b      	asrs	r3, r3, #1
 8017e5a:	b2d9      	uxtb	r1, r3
 8017e5c:	4b70      	ldr	r3, [pc, #448]	; (8018020 <MyApp+0x3a8>)
 8017e5e:	22f4      	movs	r2, #244	; 0xf4
 8017e60:	5499      	strb	r1, [r3, r2]
			if(a){
 8017e62:	4b72      	ldr	r3, [pc, #456]	; (801802c <MyApp+0x3b4>)
 8017e64:	781b      	ldrb	r3, [r3, #0]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d045      	beq.n	8017ef6 <MyApp+0x27e>
				for(i = 0,j = a;j < b - 1;j++,i++){
 8017e6a:	4b73      	ldr	r3, [pc, #460]	; (8018038 <MyApp+0x3c0>)
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	601a      	str	r2, [r3, #0]
 8017e70:	4b6e      	ldr	r3, [pc, #440]	; (801802c <MyApp+0x3b4>)
 8017e72:	781b      	ldrb	r3, [r3, #0]
 8017e74:	001a      	movs	r2, r3
 8017e76:	4b71      	ldr	r3, [pc, #452]	; (801803c <MyApp+0x3c4>)
 8017e78:	601a      	str	r2, [r3, #0]
 8017e7a:	e015      	b.n	8017ea8 <MyApp+0x230>
					file.sSetR2S9C[i] = adatBuffer[j];
 8017e7c:	4b6f      	ldr	r3, [pc, #444]	; (801803c <MyApp+0x3c4>)
 8017e7e:	681a      	ldr	r2, [r3, #0]
 8017e80:	4b6d      	ldr	r3, [pc, #436]	; (8018038 <MyApp+0x3c0>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4968      	ldr	r1, [pc, #416]	; (8018028 <MyApp+0x3b0>)
 8017e86:	5c88      	ldrb	r0, [r1, r2]
 8017e88:	4a65      	ldr	r2, [pc, #404]	; (8018020 <MyApp+0x3a8>)
 8017e8a:	2122      	movs	r1, #34	; 0x22
 8017e8c:	18d3      	adds	r3, r2, r3
 8017e8e:	185b      	adds	r3, r3, r1
 8017e90:	1c02      	adds	r2, r0, #0
 8017e92:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j < b - 1;j++,i++){
 8017e94:	4b69      	ldr	r3, [pc, #420]	; (801803c <MyApp+0x3c4>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	1c5a      	adds	r2, r3, #1
 8017e9a:	4b68      	ldr	r3, [pc, #416]	; (801803c <MyApp+0x3c4>)
 8017e9c:	601a      	str	r2, [r3, #0]
 8017e9e:	4b66      	ldr	r3, [pc, #408]	; (8018038 <MyApp+0x3c0>)
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	1c5a      	adds	r2, r3, #1
 8017ea4:	4b64      	ldr	r3, [pc, #400]	; (8018038 <MyApp+0x3c0>)
 8017ea6:	601a      	str	r2, [r3, #0]
 8017ea8:	4b62      	ldr	r3, [pc, #392]	; (8018034 <MyApp+0x3bc>)
 8017eaa:	781b      	ldrb	r3, [r3, #0]
 8017eac:	1e5a      	subs	r2, r3, #1
 8017eae:	4b63      	ldr	r3, [pc, #396]	; (801803c <MyApp+0x3c4>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	dce2      	bgt.n	8017e7c <MyApp+0x204>
				}
				m = 0;
 8017eb6:	4b62      	ldr	r3, [pc, #392]	; (8018040 <MyApp+0x3c8>)
 8017eb8:	2200      	movs	r2, #0
 8017eba:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017ebc:	e010      	b.n	8017ee0 <MyApp+0x268>
					adatBuffer[m] = adatBuffer[m + b];
 8017ebe:	4b5d      	ldr	r3, [pc, #372]	; (8018034 <MyApp+0x3bc>)
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	001a      	movs	r2, r3
 8017ec4:	4b5e      	ldr	r3, [pc, #376]	; (8018040 <MyApp+0x3c8>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	18d2      	adds	r2, r2, r3
 8017eca:	4b5d      	ldr	r3, [pc, #372]	; (8018040 <MyApp+0x3c8>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	4956      	ldr	r1, [pc, #344]	; (8018028 <MyApp+0x3b0>)
 8017ed0:	5c89      	ldrb	r1, [r1, r2]
 8017ed2:	4a55      	ldr	r2, [pc, #340]	; (8018028 <MyApp+0x3b0>)
 8017ed4:	54d1      	strb	r1, [r2, r3]
					m++;
 8017ed6:	4b5a      	ldr	r3, [pc, #360]	; (8018040 <MyApp+0x3c8>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	1c5a      	adds	r2, r3, #1
 8017edc:	4b58      	ldr	r3, [pc, #352]	; (8018040 <MyApp+0x3c8>)
 8017ede:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017ee0:	4b54      	ldr	r3, [pc, #336]	; (8018034 <MyApp+0x3bc>)
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	001a      	movs	r2, r3
 8017ee6:	2380      	movs	r3, #128	; 0x80
 8017ee8:	005b      	lsls	r3, r3, #1
 8017eea:	1a9a      	subs	r2, r3, r2
 8017eec:	4b54      	ldr	r3, [pc, #336]	; (8018040 <MyApp+0x3c8>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	429a      	cmp	r2, r3
 8017ef2:	dce4      	bgt.n	8017ebe <MyApp+0x246>
 8017ef4:	e002      	b.n	8017efc <MyApp+0x284>
				}
			}
			else
				problem = true;
 8017ef6:	4b53      	ldr	r3, [pc, #332]	; (8018044 <MyApp+0x3cc>)
 8017ef8:	2201      	movs	r2, #1
 8017efa:	701a      	strb	r2, [r3, #0]
			///11///
			a = search(adatBuffer,(char*)"R2S9COFF:");
 8017efc:	4a54      	ldr	r2, [pc, #336]	; (8018050 <MyApp+0x3d8>)
 8017efe:	4b4a      	ldr	r3, [pc, #296]	; (8018028 <MyApp+0x3b0>)
 8017f00:	0011      	movs	r1, r2
 8017f02:	0018      	movs	r0, r3
 8017f04:	f000 fe74 	bl	8018bf0 <_Z6searchPcS_>
 8017f08:	0003      	movs	r3, r0
 8017f0a:	001a      	movs	r2, r3
 8017f0c:	4b47      	ldr	r3, [pc, #284]	; (801802c <MyApp+0x3b4>)
 8017f0e:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8017f10:	4a47      	ldr	r2, [pc, #284]	; (8018030 <MyApp+0x3b8>)
 8017f12:	4b45      	ldr	r3, [pc, #276]	; (8018028 <MyApp+0x3b0>)
 8017f14:	0011      	movs	r1, r2
 8017f16:	0018      	movs	r0, r3
 8017f18:	f000 fe6a 	bl	8018bf0 <_Z6searchPcS_>
 8017f1c:	0003      	movs	r3, r0
 8017f1e:	001a      	movs	r2, r3
 8017f20:	4b44      	ldr	r3, [pc, #272]	; (8018034 <MyApp+0x3bc>)
 8017f22:	701a      	strb	r2, [r3, #0]

			file.rs232nbcharsOFF[0] = (b-a-1)/2;
 8017f24:	4b43      	ldr	r3, [pc, #268]	; (8018034 <MyApp+0x3bc>)
 8017f26:	781b      	ldrb	r3, [r3, #0]
 8017f28:	001a      	movs	r2, r3
 8017f2a:	4b40      	ldr	r3, [pc, #256]	; (801802c <MyApp+0x3b4>)
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	1ad3      	subs	r3, r2, r3
 8017f30:	3b01      	subs	r3, #1
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	da00      	bge.n	8017f38 <MyApp+0x2c0>
 8017f36:	3301      	adds	r3, #1
 8017f38:	105b      	asrs	r3, r3, #1
 8017f3a:	b2d9      	uxtb	r1, r3
 8017f3c:	4b38      	ldr	r3, [pc, #224]	; (8018020 <MyApp+0x3a8>)
 8017f3e:	22f6      	movs	r2, #246	; 0xf6
 8017f40:	5499      	strb	r1, [r3, r2]
			if(a){
 8017f42:	4b3a      	ldr	r3, [pc, #232]	; (801802c <MyApp+0x3b4>)
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d045      	beq.n	8017fd6 <MyApp+0x35e>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8017f4a:	4b3b      	ldr	r3, [pc, #236]	; (8018038 <MyApp+0x3c0>)
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	601a      	str	r2, [r3, #0]
 8017f50:	4b36      	ldr	r3, [pc, #216]	; (801802c <MyApp+0x3b4>)
 8017f52:	781b      	ldrb	r3, [r3, #0]
 8017f54:	001a      	movs	r2, r3
 8017f56:	4b39      	ldr	r3, [pc, #228]	; (801803c <MyApp+0x3c4>)
 8017f58:	601a      	str	r2, [r3, #0]
 8017f5a:	e015      	b.n	8017f88 <MyApp+0x310>
					file.sSetR2S9COFF[i] = adatBuffer[j];
 8017f5c:	4b37      	ldr	r3, [pc, #220]	; (801803c <MyApp+0x3c4>)
 8017f5e:	681a      	ldr	r2, [r3, #0]
 8017f60:	4b35      	ldr	r3, [pc, #212]	; (8018038 <MyApp+0x3c0>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4930      	ldr	r1, [pc, #192]	; (8018028 <MyApp+0x3b0>)
 8017f66:	5c88      	ldrb	r0, [r1, r2]
 8017f68:	4a2d      	ldr	r2, [pc, #180]	; (8018020 <MyApp+0x3a8>)
 8017f6a:	2162      	movs	r1, #98	; 0x62
 8017f6c:	18d3      	adds	r3, r2, r3
 8017f6e:	185b      	adds	r3, r3, r1
 8017f70:	1c02      	adds	r2, r0, #0
 8017f72:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8017f74:	4b31      	ldr	r3, [pc, #196]	; (801803c <MyApp+0x3c4>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	1c5a      	adds	r2, r3, #1
 8017f7a:	4b30      	ldr	r3, [pc, #192]	; (801803c <MyApp+0x3c4>)
 8017f7c:	601a      	str	r2, [r3, #0]
 8017f7e:	4b2e      	ldr	r3, [pc, #184]	; (8018038 <MyApp+0x3c0>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	1c5a      	adds	r2, r3, #1
 8017f84:	4b2c      	ldr	r3, [pc, #176]	; (8018038 <MyApp+0x3c0>)
 8017f86:	601a      	str	r2, [r3, #0]
 8017f88:	4b2a      	ldr	r3, [pc, #168]	; (8018034 <MyApp+0x3bc>)
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	1e5a      	subs	r2, r3, #1
 8017f8e:	4b2b      	ldr	r3, [pc, #172]	; (801803c <MyApp+0x3c4>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	429a      	cmp	r2, r3
 8017f94:	dce2      	bgt.n	8017f5c <MyApp+0x2e4>
				}
				m = 0;
 8017f96:	4b2a      	ldr	r3, [pc, #168]	; (8018040 <MyApp+0x3c8>)
 8017f98:	2200      	movs	r2, #0
 8017f9a:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017f9c:	e010      	b.n	8017fc0 <MyApp+0x348>
					adatBuffer[m] = adatBuffer[m + b];
 8017f9e:	4b25      	ldr	r3, [pc, #148]	; (8018034 <MyApp+0x3bc>)
 8017fa0:	781b      	ldrb	r3, [r3, #0]
 8017fa2:	001a      	movs	r2, r3
 8017fa4:	4b26      	ldr	r3, [pc, #152]	; (8018040 <MyApp+0x3c8>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	18d2      	adds	r2, r2, r3
 8017faa:	4b25      	ldr	r3, [pc, #148]	; (8018040 <MyApp+0x3c8>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	491e      	ldr	r1, [pc, #120]	; (8018028 <MyApp+0x3b0>)
 8017fb0:	5c89      	ldrb	r1, [r1, r2]
 8017fb2:	4a1d      	ldr	r2, [pc, #116]	; (8018028 <MyApp+0x3b0>)
 8017fb4:	54d1      	strb	r1, [r2, r3]
					m++;
 8017fb6:	4b22      	ldr	r3, [pc, #136]	; (8018040 <MyApp+0x3c8>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	1c5a      	adds	r2, r3, #1
 8017fbc:	4b20      	ldr	r3, [pc, #128]	; (8018040 <MyApp+0x3c8>)
 8017fbe:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8017fc0:	4b1c      	ldr	r3, [pc, #112]	; (8018034 <MyApp+0x3bc>)
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	001a      	movs	r2, r3
 8017fc6:	2380      	movs	r3, #128	; 0x80
 8017fc8:	005b      	lsls	r3, r3, #1
 8017fca:	1a9a      	subs	r2, r3, r2
 8017fcc:	4b1c      	ldr	r3, [pc, #112]	; (8018040 <MyApp+0x3c8>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	dce4      	bgt.n	8017f9e <MyApp+0x326>
 8017fd4:	e002      	b.n	8017fdc <MyApp+0x364>
				}
			}
			else
							problem = true;
 8017fd6:	4b1b      	ldr	r3, [pc, #108]	; (8018044 <MyApp+0x3cc>)
 8017fd8:	2201      	movs	r2, #1
 8017fda:	701a      	strb	r2, [r3, #0]
			///3///
			a = search(adatBuffer,(char*)"TempMin:");
 8017fdc:	4a1d      	ldr	r2, [pc, #116]	; (8018054 <MyApp+0x3dc>)
 8017fde:	4b12      	ldr	r3, [pc, #72]	; (8018028 <MyApp+0x3b0>)
 8017fe0:	0011      	movs	r1, r2
 8017fe2:	0018      	movs	r0, r3
 8017fe4:	f000 fe04 	bl	8018bf0 <_Z6searchPcS_>
 8017fe8:	0003      	movs	r3, r0
 8017fea:	001a      	movs	r2, r3
 8017fec:	4b0f      	ldr	r3, [pc, #60]	; (801802c <MyApp+0x3b4>)
 8017fee:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8017ff0:	4a0f      	ldr	r2, [pc, #60]	; (8018030 <MyApp+0x3b8>)
 8017ff2:	4b0d      	ldr	r3, [pc, #52]	; (8018028 <MyApp+0x3b0>)
 8017ff4:	0011      	movs	r1, r2
 8017ff6:	0018      	movs	r0, r3
 8017ff8:	f000 fdfa 	bl	8018bf0 <_Z6searchPcS_>
 8017ffc:	0003      	movs	r3, r0
 8017ffe:	001a      	movs	r2, r3
 8018000:	4b0c      	ldr	r3, [pc, #48]	; (8018034 <MyApp+0x3bc>)
 8018002:	701a      	strb	r2, [r3, #0]
			if(a){
 8018004:	4b09      	ldr	r3, [pc, #36]	; (801802c <MyApp+0x3b4>)
 8018006:	781b      	ldrb	r3, [r3, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d062      	beq.n	80180d2 <MyApp+0x45a>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 801800c:	4b0a      	ldr	r3, [pc, #40]	; (8018038 <MyApp+0x3c0>)
 801800e:	2200      	movs	r2, #0
 8018010:	601a      	str	r2, [r3, #0]
 8018012:	4b06      	ldr	r3, [pc, #24]	; (801802c <MyApp+0x3b4>)
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	001a      	movs	r2, r3
 8018018:	4b08      	ldr	r3, [pc, #32]	; (801803c <MyApp+0x3c4>)
 801801a:	601a      	str	r2, [r3, #0]
 801801c:	e032      	b.n	8018084 <MyApp+0x40c>
 801801e:	46c0      	nop			; (mov r8, r8)
 8018020:	20007950 	.word	0x20007950
 8018024:	08030b58 	.word	0x08030b58
 8018028:	20007850 	.word	0x20007850
 801802c:	20007abc 	.word	0x20007abc
 8018030:	08030b60 	.word	0x08030b60
 8018034:	20007abd 	.word	0x20007abd
 8018038:	20007ac0 	.word	0x20007ac0
 801803c:	20007ac8 	.word	0x20007ac8
 8018040:	20007ac4 	.word	0x20007ac4
 8018044:	200077f4 	.word	0x200077f4
 8018048:	08030b64 	.word	0x08030b64
 801804c:	08030b70 	.word	0x08030b70
 8018050:	08030b78 	.word	0x08030b78
 8018054:	08030b84 	.word	0x08030b84
					file.sSetTempTreshMin[i] = adatBuffer[j];
 8018058:	4be0      	ldr	r3, [pc, #896]	; (80183dc <MyApp+0x764>)
 801805a:	681a      	ldr	r2, [r3, #0]
 801805c:	4be0      	ldr	r3, [pc, #896]	; (80183e0 <MyApp+0x768>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	49e0      	ldr	r1, [pc, #896]	; (80183e4 <MyApp+0x76c>)
 8018062:	5c88      	ldrb	r0, [r1, r2]
 8018064:	4ae0      	ldr	r2, [pc, #896]	; (80183e8 <MyApp+0x770>)
 8018066:	21a2      	movs	r1, #162	; 0xa2
 8018068:	18d3      	adds	r3, r2, r3
 801806a:	185b      	adds	r3, r3, r1
 801806c:	1c02      	adds	r2, r0, #0
 801806e:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018070:	4bda      	ldr	r3, [pc, #872]	; (80183dc <MyApp+0x764>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	1c5a      	adds	r2, r3, #1
 8018076:	4bd9      	ldr	r3, [pc, #868]	; (80183dc <MyApp+0x764>)
 8018078:	601a      	str	r2, [r3, #0]
 801807a:	4bd9      	ldr	r3, [pc, #868]	; (80183e0 <MyApp+0x768>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	1c5a      	adds	r2, r3, #1
 8018080:	4bd7      	ldr	r3, [pc, #860]	; (80183e0 <MyApp+0x768>)
 8018082:	601a      	str	r2, [r3, #0]
 8018084:	4bd9      	ldr	r3, [pc, #868]	; (80183ec <MyApp+0x774>)
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	1e5a      	subs	r2, r3, #1
 801808a:	4bd4      	ldr	r3, [pc, #848]	; (80183dc <MyApp+0x764>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	429a      	cmp	r2, r3
 8018090:	dce2      	bgt.n	8018058 <MyApp+0x3e0>
				}
				m = 0;
 8018092:	4bd7      	ldr	r3, [pc, #860]	; (80183f0 <MyApp+0x778>)
 8018094:	2200      	movs	r2, #0
 8018096:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018098:	e010      	b.n	80180bc <MyApp+0x444>
					adatBuffer[m] = adatBuffer[m + b];
 801809a:	4bd4      	ldr	r3, [pc, #848]	; (80183ec <MyApp+0x774>)
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	001a      	movs	r2, r3
 80180a0:	4bd3      	ldr	r3, [pc, #844]	; (80183f0 <MyApp+0x778>)
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	18d2      	adds	r2, r2, r3
 80180a6:	4bd2      	ldr	r3, [pc, #840]	; (80183f0 <MyApp+0x778>)
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	49ce      	ldr	r1, [pc, #824]	; (80183e4 <MyApp+0x76c>)
 80180ac:	5c89      	ldrb	r1, [r1, r2]
 80180ae:	4acd      	ldr	r2, [pc, #820]	; (80183e4 <MyApp+0x76c>)
 80180b0:	54d1      	strb	r1, [r2, r3]
					m++;
 80180b2:	4bcf      	ldr	r3, [pc, #828]	; (80183f0 <MyApp+0x778>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	1c5a      	adds	r2, r3, #1
 80180b8:	4bcd      	ldr	r3, [pc, #820]	; (80183f0 <MyApp+0x778>)
 80180ba:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80180bc:	4bcb      	ldr	r3, [pc, #812]	; (80183ec <MyApp+0x774>)
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	001a      	movs	r2, r3
 80180c2:	2380      	movs	r3, #128	; 0x80
 80180c4:	005b      	lsls	r3, r3, #1
 80180c6:	1a9a      	subs	r2, r3, r2
 80180c8:	4bc9      	ldr	r3, [pc, #804]	; (80183f0 <MyApp+0x778>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	dce4      	bgt.n	801809a <MyApp+0x422>
 80180d0:	e002      	b.n	80180d8 <MyApp+0x460>
				}
			}
			else
							problem = true;
 80180d2:	4bc8      	ldr	r3, [pc, #800]	; (80183f4 <MyApp+0x77c>)
 80180d4:	2201      	movs	r2, #1
 80180d6:	701a      	strb	r2, [r3, #0]
			///4///
			a = search(adatBuffer,(char*)"TempMax:");
 80180d8:	4ac7      	ldr	r2, [pc, #796]	; (80183f8 <MyApp+0x780>)
 80180da:	4bc2      	ldr	r3, [pc, #776]	; (80183e4 <MyApp+0x76c>)
 80180dc:	0011      	movs	r1, r2
 80180de:	0018      	movs	r0, r3
 80180e0:	f000 fd86 	bl	8018bf0 <_Z6searchPcS_>
 80180e4:	0003      	movs	r3, r0
 80180e6:	001a      	movs	r2, r3
 80180e8:	4bc4      	ldr	r3, [pc, #784]	; (80183fc <MyApp+0x784>)
 80180ea:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 80180ec:	4ac4      	ldr	r2, [pc, #784]	; (8018400 <MyApp+0x788>)
 80180ee:	4bbd      	ldr	r3, [pc, #756]	; (80183e4 <MyApp+0x76c>)
 80180f0:	0011      	movs	r1, r2
 80180f2:	0018      	movs	r0, r3
 80180f4:	f000 fd7c 	bl	8018bf0 <_Z6searchPcS_>
 80180f8:	0003      	movs	r3, r0
 80180fa:	001a      	movs	r2, r3
 80180fc:	4bbb      	ldr	r3, [pc, #748]	; (80183ec <MyApp+0x774>)
 80180fe:	701a      	strb	r2, [r3, #0]
			if(a){
 8018100:	4bbe      	ldr	r3, [pc, #760]	; (80183fc <MyApp+0x784>)
 8018102:	781b      	ldrb	r3, [r3, #0]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d045      	beq.n	8018194 <MyApp+0x51c>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018108:	4bb5      	ldr	r3, [pc, #724]	; (80183e0 <MyApp+0x768>)
 801810a:	2200      	movs	r2, #0
 801810c:	601a      	str	r2, [r3, #0]
 801810e:	4bbb      	ldr	r3, [pc, #748]	; (80183fc <MyApp+0x784>)
 8018110:	781b      	ldrb	r3, [r3, #0]
 8018112:	001a      	movs	r2, r3
 8018114:	4bb1      	ldr	r3, [pc, #708]	; (80183dc <MyApp+0x764>)
 8018116:	601a      	str	r2, [r3, #0]
 8018118:	e015      	b.n	8018146 <MyApp+0x4ce>
					file.sSetTempTreshMax[i] = adatBuffer[j];
 801811a:	4bb0      	ldr	r3, [pc, #704]	; (80183dc <MyApp+0x764>)
 801811c:	681a      	ldr	r2, [r3, #0]
 801811e:	4bb0      	ldr	r3, [pc, #704]	; (80183e0 <MyApp+0x768>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	49b0      	ldr	r1, [pc, #704]	; (80183e4 <MyApp+0x76c>)
 8018124:	5c88      	ldrb	r0, [r1, r2]
 8018126:	4ab0      	ldr	r2, [pc, #704]	; (80183e8 <MyApp+0x770>)
 8018128:	21ac      	movs	r1, #172	; 0xac
 801812a:	18d3      	adds	r3, r2, r3
 801812c:	185b      	adds	r3, r3, r1
 801812e:	1c02      	adds	r2, r0, #0
 8018130:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018132:	4baa      	ldr	r3, [pc, #680]	; (80183dc <MyApp+0x764>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	1c5a      	adds	r2, r3, #1
 8018138:	4ba8      	ldr	r3, [pc, #672]	; (80183dc <MyApp+0x764>)
 801813a:	601a      	str	r2, [r3, #0]
 801813c:	4ba8      	ldr	r3, [pc, #672]	; (80183e0 <MyApp+0x768>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	1c5a      	adds	r2, r3, #1
 8018142:	4ba7      	ldr	r3, [pc, #668]	; (80183e0 <MyApp+0x768>)
 8018144:	601a      	str	r2, [r3, #0]
 8018146:	4ba9      	ldr	r3, [pc, #676]	; (80183ec <MyApp+0x774>)
 8018148:	781b      	ldrb	r3, [r3, #0]
 801814a:	1e5a      	subs	r2, r3, #1
 801814c:	4ba3      	ldr	r3, [pc, #652]	; (80183dc <MyApp+0x764>)
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	429a      	cmp	r2, r3
 8018152:	dce2      	bgt.n	801811a <MyApp+0x4a2>
				}
				m = 0;
 8018154:	4ba6      	ldr	r3, [pc, #664]	; (80183f0 <MyApp+0x778>)
 8018156:	2200      	movs	r2, #0
 8018158:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 801815a:	e010      	b.n	801817e <MyApp+0x506>
					adatBuffer[m] = adatBuffer[m + b];
 801815c:	4ba3      	ldr	r3, [pc, #652]	; (80183ec <MyApp+0x774>)
 801815e:	781b      	ldrb	r3, [r3, #0]
 8018160:	001a      	movs	r2, r3
 8018162:	4ba3      	ldr	r3, [pc, #652]	; (80183f0 <MyApp+0x778>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	18d2      	adds	r2, r2, r3
 8018168:	4ba1      	ldr	r3, [pc, #644]	; (80183f0 <MyApp+0x778>)
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	499d      	ldr	r1, [pc, #628]	; (80183e4 <MyApp+0x76c>)
 801816e:	5c89      	ldrb	r1, [r1, r2]
 8018170:	4a9c      	ldr	r2, [pc, #624]	; (80183e4 <MyApp+0x76c>)
 8018172:	54d1      	strb	r1, [r2, r3]
					m++;
 8018174:	4b9e      	ldr	r3, [pc, #632]	; (80183f0 <MyApp+0x778>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	1c5a      	adds	r2, r3, #1
 801817a:	4b9d      	ldr	r3, [pc, #628]	; (80183f0 <MyApp+0x778>)
 801817c:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 801817e:	4b9b      	ldr	r3, [pc, #620]	; (80183ec <MyApp+0x774>)
 8018180:	781b      	ldrb	r3, [r3, #0]
 8018182:	001a      	movs	r2, r3
 8018184:	2380      	movs	r3, #128	; 0x80
 8018186:	005b      	lsls	r3, r3, #1
 8018188:	1a9a      	subs	r2, r3, r2
 801818a:	4b99      	ldr	r3, [pc, #612]	; (80183f0 <MyApp+0x778>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	429a      	cmp	r2, r3
 8018190:	dce4      	bgt.n	801815c <MyApp+0x4e4>
 8018192:	e002      	b.n	801819a <MyApp+0x522>
				}
			}
			else
							problem = true;
 8018194:	4b97      	ldr	r3, [pc, #604]	; (80183f4 <MyApp+0x77c>)
 8018196:	2201      	movs	r2, #1
 8018198:	701a      	strb	r2, [r3, #0]
			///5///
			a = search(adatBuffer,(char*)"TempON:");
 801819a:	4a9a      	ldr	r2, [pc, #616]	; (8018404 <MyApp+0x78c>)
 801819c:	4b91      	ldr	r3, [pc, #580]	; (80183e4 <MyApp+0x76c>)
 801819e:	0011      	movs	r1, r2
 80181a0:	0018      	movs	r0, r3
 80181a2:	f000 fd25 	bl	8018bf0 <_Z6searchPcS_>
 80181a6:	0003      	movs	r3, r0
 80181a8:	001a      	movs	r2, r3
 80181aa:	4b94      	ldr	r3, [pc, #592]	; (80183fc <MyApp+0x784>)
 80181ac:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 80181ae:	4a94      	ldr	r2, [pc, #592]	; (8018400 <MyApp+0x788>)
 80181b0:	4b8c      	ldr	r3, [pc, #560]	; (80183e4 <MyApp+0x76c>)
 80181b2:	0011      	movs	r1, r2
 80181b4:	0018      	movs	r0, r3
 80181b6:	f000 fd1b 	bl	8018bf0 <_Z6searchPcS_>
 80181ba:	0003      	movs	r3, r0
 80181bc:	001a      	movs	r2, r3
 80181be:	4b8b      	ldr	r3, [pc, #556]	; (80183ec <MyApp+0x774>)
 80181c0:	701a      	strb	r2, [r3, #0]
			if(a){
 80181c2:	4b8e      	ldr	r3, [pc, #568]	; (80183fc <MyApp+0x784>)
 80181c4:	781b      	ldrb	r3, [r3, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d045      	beq.n	8018256 <MyApp+0x5de>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 80181ca:	4b85      	ldr	r3, [pc, #532]	; (80183e0 <MyApp+0x768>)
 80181cc:	2200      	movs	r2, #0
 80181ce:	601a      	str	r2, [r3, #0]
 80181d0:	4b8a      	ldr	r3, [pc, #552]	; (80183fc <MyApp+0x784>)
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	001a      	movs	r2, r3
 80181d6:	4b81      	ldr	r3, [pc, #516]	; (80183dc <MyApp+0x764>)
 80181d8:	601a      	str	r2, [r3, #0]
 80181da:	e015      	b.n	8018208 <MyApp+0x590>
					file.sSetTempON[i] = adatBuffer[j];
 80181dc:	4b7f      	ldr	r3, [pc, #508]	; (80183dc <MyApp+0x764>)
 80181de:	681a      	ldr	r2, [r3, #0]
 80181e0:	4b7f      	ldr	r3, [pc, #508]	; (80183e0 <MyApp+0x768>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	497f      	ldr	r1, [pc, #508]	; (80183e4 <MyApp+0x76c>)
 80181e6:	5c88      	ldrb	r0, [r1, r2]
 80181e8:	4a7f      	ldr	r2, [pc, #508]	; (80183e8 <MyApp+0x770>)
 80181ea:	21b6      	movs	r1, #182	; 0xb6
 80181ec:	18d3      	adds	r3, r2, r3
 80181ee:	185b      	adds	r3, r3, r1
 80181f0:	1c02      	adds	r2, r0, #0
 80181f2:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 80181f4:	4b79      	ldr	r3, [pc, #484]	; (80183dc <MyApp+0x764>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	1c5a      	adds	r2, r3, #1
 80181fa:	4b78      	ldr	r3, [pc, #480]	; (80183dc <MyApp+0x764>)
 80181fc:	601a      	str	r2, [r3, #0]
 80181fe:	4b78      	ldr	r3, [pc, #480]	; (80183e0 <MyApp+0x768>)
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	1c5a      	adds	r2, r3, #1
 8018204:	4b76      	ldr	r3, [pc, #472]	; (80183e0 <MyApp+0x768>)
 8018206:	601a      	str	r2, [r3, #0]
 8018208:	4b78      	ldr	r3, [pc, #480]	; (80183ec <MyApp+0x774>)
 801820a:	781b      	ldrb	r3, [r3, #0]
 801820c:	1e5a      	subs	r2, r3, #1
 801820e:	4b73      	ldr	r3, [pc, #460]	; (80183dc <MyApp+0x764>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	429a      	cmp	r2, r3
 8018214:	dce2      	bgt.n	80181dc <MyApp+0x564>
				}
				m = 0;
 8018216:	4b76      	ldr	r3, [pc, #472]	; (80183f0 <MyApp+0x778>)
 8018218:	2200      	movs	r2, #0
 801821a:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 801821c:	e010      	b.n	8018240 <MyApp+0x5c8>
					adatBuffer[m] = adatBuffer[m + b];
 801821e:	4b73      	ldr	r3, [pc, #460]	; (80183ec <MyApp+0x774>)
 8018220:	781b      	ldrb	r3, [r3, #0]
 8018222:	001a      	movs	r2, r3
 8018224:	4b72      	ldr	r3, [pc, #456]	; (80183f0 <MyApp+0x778>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	18d2      	adds	r2, r2, r3
 801822a:	4b71      	ldr	r3, [pc, #452]	; (80183f0 <MyApp+0x778>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	496d      	ldr	r1, [pc, #436]	; (80183e4 <MyApp+0x76c>)
 8018230:	5c89      	ldrb	r1, [r1, r2]
 8018232:	4a6c      	ldr	r2, [pc, #432]	; (80183e4 <MyApp+0x76c>)
 8018234:	54d1      	strb	r1, [r2, r3]
					m++;
 8018236:	4b6e      	ldr	r3, [pc, #440]	; (80183f0 <MyApp+0x778>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	1c5a      	adds	r2, r3, #1
 801823c:	4b6c      	ldr	r3, [pc, #432]	; (80183f0 <MyApp+0x778>)
 801823e:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018240:	4b6a      	ldr	r3, [pc, #424]	; (80183ec <MyApp+0x774>)
 8018242:	781b      	ldrb	r3, [r3, #0]
 8018244:	001a      	movs	r2, r3
 8018246:	2380      	movs	r3, #128	; 0x80
 8018248:	005b      	lsls	r3, r3, #1
 801824a:	1a9a      	subs	r2, r3, r2
 801824c:	4b68      	ldr	r3, [pc, #416]	; (80183f0 <MyApp+0x778>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	429a      	cmp	r2, r3
 8018252:	dce4      	bgt.n	801821e <MyApp+0x5a6>
 8018254:	e002      	b.n	801825c <MyApp+0x5e4>
				}
			}
			else
							problem = true;
 8018256:	4b67      	ldr	r3, [pc, #412]	; (80183f4 <MyApp+0x77c>)
 8018258:	2201      	movs	r2, #1
 801825a:	701a      	strb	r2, [r3, #0]
			///6///
			a = search(adatBuffer,(char*)"PIRON:");
 801825c:	4a6a      	ldr	r2, [pc, #424]	; (8018408 <MyApp+0x790>)
 801825e:	4b61      	ldr	r3, [pc, #388]	; (80183e4 <MyApp+0x76c>)
 8018260:	0011      	movs	r1, r2
 8018262:	0018      	movs	r0, r3
 8018264:	f000 fcc4 	bl	8018bf0 <_Z6searchPcS_>
 8018268:	0003      	movs	r3, r0
 801826a:	001a      	movs	r2, r3
 801826c:	4b63      	ldr	r3, [pc, #396]	; (80183fc <MyApp+0x784>)
 801826e:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8018270:	4a63      	ldr	r2, [pc, #396]	; (8018400 <MyApp+0x788>)
 8018272:	4b5c      	ldr	r3, [pc, #368]	; (80183e4 <MyApp+0x76c>)
 8018274:	0011      	movs	r1, r2
 8018276:	0018      	movs	r0, r3
 8018278:	f000 fcba 	bl	8018bf0 <_Z6searchPcS_>
 801827c:	0003      	movs	r3, r0
 801827e:	001a      	movs	r2, r3
 8018280:	4b5a      	ldr	r3, [pc, #360]	; (80183ec <MyApp+0x774>)
 8018282:	701a      	strb	r2, [r3, #0]
			if(a){
 8018284:	4b5d      	ldr	r3, [pc, #372]	; (80183fc <MyApp+0x784>)
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d045      	beq.n	8018318 <MyApp+0x6a0>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 801828c:	4b54      	ldr	r3, [pc, #336]	; (80183e0 <MyApp+0x768>)
 801828e:	2200      	movs	r2, #0
 8018290:	601a      	str	r2, [r3, #0]
 8018292:	4b5a      	ldr	r3, [pc, #360]	; (80183fc <MyApp+0x784>)
 8018294:	781b      	ldrb	r3, [r3, #0]
 8018296:	001a      	movs	r2, r3
 8018298:	4b50      	ldr	r3, [pc, #320]	; (80183dc <MyApp+0x764>)
 801829a:	601a      	str	r2, [r3, #0]
 801829c:	e015      	b.n	80182ca <MyApp+0x652>
					file.sSetPIRON[i] = adatBuffer[j];
 801829e:	4b4f      	ldr	r3, [pc, #316]	; (80183dc <MyApp+0x764>)
 80182a0:	681a      	ldr	r2, [r3, #0]
 80182a2:	4b4f      	ldr	r3, [pc, #316]	; (80183e0 <MyApp+0x768>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	494f      	ldr	r1, [pc, #316]	; (80183e4 <MyApp+0x76c>)
 80182a8:	5c88      	ldrb	r0, [r1, r2]
 80182aa:	4a4f      	ldr	r2, [pc, #316]	; (80183e8 <MyApp+0x770>)
 80182ac:	21c0      	movs	r1, #192	; 0xc0
 80182ae:	18d3      	adds	r3, r2, r3
 80182b0:	185b      	adds	r3, r3, r1
 80182b2:	1c02      	adds	r2, r0, #0
 80182b4:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 80182b6:	4b49      	ldr	r3, [pc, #292]	; (80183dc <MyApp+0x764>)
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	1c5a      	adds	r2, r3, #1
 80182bc:	4b47      	ldr	r3, [pc, #284]	; (80183dc <MyApp+0x764>)
 80182be:	601a      	str	r2, [r3, #0]
 80182c0:	4b47      	ldr	r3, [pc, #284]	; (80183e0 <MyApp+0x768>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	1c5a      	adds	r2, r3, #1
 80182c6:	4b46      	ldr	r3, [pc, #280]	; (80183e0 <MyApp+0x768>)
 80182c8:	601a      	str	r2, [r3, #0]
 80182ca:	4b48      	ldr	r3, [pc, #288]	; (80183ec <MyApp+0x774>)
 80182cc:	781b      	ldrb	r3, [r3, #0]
 80182ce:	1e5a      	subs	r2, r3, #1
 80182d0:	4b42      	ldr	r3, [pc, #264]	; (80183dc <MyApp+0x764>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	429a      	cmp	r2, r3
 80182d6:	dce2      	bgt.n	801829e <MyApp+0x626>
				}
				m = 0;
 80182d8:	4b45      	ldr	r3, [pc, #276]	; (80183f0 <MyApp+0x778>)
 80182da:	2200      	movs	r2, #0
 80182dc:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80182de:	e010      	b.n	8018302 <MyApp+0x68a>
					adatBuffer[m] = adatBuffer[m + b];
 80182e0:	4b42      	ldr	r3, [pc, #264]	; (80183ec <MyApp+0x774>)
 80182e2:	781b      	ldrb	r3, [r3, #0]
 80182e4:	001a      	movs	r2, r3
 80182e6:	4b42      	ldr	r3, [pc, #264]	; (80183f0 <MyApp+0x778>)
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	18d2      	adds	r2, r2, r3
 80182ec:	4b40      	ldr	r3, [pc, #256]	; (80183f0 <MyApp+0x778>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	493c      	ldr	r1, [pc, #240]	; (80183e4 <MyApp+0x76c>)
 80182f2:	5c89      	ldrb	r1, [r1, r2]
 80182f4:	4a3b      	ldr	r2, [pc, #236]	; (80183e4 <MyApp+0x76c>)
 80182f6:	54d1      	strb	r1, [r2, r3]
					m++;
 80182f8:	4b3d      	ldr	r3, [pc, #244]	; (80183f0 <MyApp+0x778>)
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	1c5a      	adds	r2, r3, #1
 80182fe:	4b3c      	ldr	r3, [pc, #240]	; (80183f0 <MyApp+0x778>)
 8018300:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018302:	4b3a      	ldr	r3, [pc, #232]	; (80183ec <MyApp+0x774>)
 8018304:	781b      	ldrb	r3, [r3, #0]
 8018306:	001a      	movs	r2, r3
 8018308:	2380      	movs	r3, #128	; 0x80
 801830a:	005b      	lsls	r3, r3, #1
 801830c:	1a9a      	subs	r2, r3, r2
 801830e:	4b38      	ldr	r3, [pc, #224]	; (80183f0 <MyApp+0x778>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	429a      	cmp	r2, r3
 8018314:	dce4      	bgt.n	80182e0 <MyApp+0x668>
 8018316:	e002      	b.n	801831e <MyApp+0x6a6>
				}
			}
			else
							problem = true;
 8018318:	4b36      	ldr	r3, [pc, #216]	; (80183f4 <MyApp+0x77c>)
 801831a:	2201      	movs	r2, #1
 801831c:	701a      	strb	r2, [r3, #0]
			///7///
			a = search(adatBuffer,(char*)"PIRDelayON:");
 801831e:	4a3b      	ldr	r2, [pc, #236]	; (801840c <MyApp+0x794>)
 8018320:	4b30      	ldr	r3, [pc, #192]	; (80183e4 <MyApp+0x76c>)
 8018322:	0011      	movs	r1, r2
 8018324:	0018      	movs	r0, r3
 8018326:	f000 fc63 	bl	8018bf0 <_Z6searchPcS_>
 801832a:	0003      	movs	r3, r0
 801832c:	001a      	movs	r2, r3
 801832e:	4b33      	ldr	r3, [pc, #204]	; (80183fc <MyApp+0x784>)
 8018330:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8018332:	4a33      	ldr	r2, [pc, #204]	; (8018400 <MyApp+0x788>)
 8018334:	4b2b      	ldr	r3, [pc, #172]	; (80183e4 <MyApp+0x76c>)
 8018336:	0011      	movs	r1, r2
 8018338:	0018      	movs	r0, r3
 801833a:	f000 fc59 	bl	8018bf0 <_Z6searchPcS_>
 801833e:	0003      	movs	r3, r0
 8018340:	001a      	movs	r2, r3
 8018342:	4b2a      	ldr	r3, [pc, #168]	; (80183ec <MyApp+0x774>)
 8018344:	701a      	strb	r2, [r3, #0]
			if(a){
 8018346:	4b2d      	ldr	r3, [pc, #180]	; (80183fc <MyApp+0x784>)
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d060      	beq.n	8018410 <MyApp+0x798>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 801834e:	4b24      	ldr	r3, [pc, #144]	; (80183e0 <MyApp+0x768>)
 8018350:	2200      	movs	r2, #0
 8018352:	601a      	str	r2, [r3, #0]
 8018354:	4b29      	ldr	r3, [pc, #164]	; (80183fc <MyApp+0x784>)
 8018356:	781b      	ldrb	r3, [r3, #0]
 8018358:	001a      	movs	r2, r3
 801835a:	4b20      	ldr	r3, [pc, #128]	; (80183dc <MyApp+0x764>)
 801835c:	601a      	str	r2, [r3, #0]
 801835e:	e015      	b.n	801838c <MyApp+0x714>
					file.sPIRDelayON[i] = adatBuffer[j];
 8018360:	4b1e      	ldr	r3, [pc, #120]	; (80183dc <MyApp+0x764>)
 8018362:	681a      	ldr	r2, [r3, #0]
 8018364:	4b1e      	ldr	r3, [pc, #120]	; (80183e0 <MyApp+0x768>)
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	491e      	ldr	r1, [pc, #120]	; (80183e4 <MyApp+0x76c>)
 801836a:	5c88      	ldrb	r0, [r1, r2]
 801836c:	4a1e      	ldr	r2, [pc, #120]	; (80183e8 <MyApp+0x770>)
 801836e:	21ca      	movs	r1, #202	; 0xca
 8018370:	18d3      	adds	r3, r2, r3
 8018372:	185b      	adds	r3, r3, r1
 8018374:	1c02      	adds	r2, r0, #0
 8018376:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018378:	4b18      	ldr	r3, [pc, #96]	; (80183dc <MyApp+0x764>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	1c5a      	adds	r2, r3, #1
 801837e:	4b17      	ldr	r3, [pc, #92]	; (80183dc <MyApp+0x764>)
 8018380:	601a      	str	r2, [r3, #0]
 8018382:	4b17      	ldr	r3, [pc, #92]	; (80183e0 <MyApp+0x768>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	1c5a      	adds	r2, r3, #1
 8018388:	4b15      	ldr	r3, [pc, #84]	; (80183e0 <MyApp+0x768>)
 801838a:	601a      	str	r2, [r3, #0]
 801838c:	4b17      	ldr	r3, [pc, #92]	; (80183ec <MyApp+0x774>)
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	1e5a      	subs	r2, r3, #1
 8018392:	4b12      	ldr	r3, [pc, #72]	; (80183dc <MyApp+0x764>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	429a      	cmp	r2, r3
 8018398:	dce2      	bgt.n	8018360 <MyApp+0x6e8>
				}
				m = 0;
 801839a:	4b15      	ldr	r3, [pc, #84]	; (80183f0 <MyApp+0x778>)
 801839c:	2200      	movs	r2, #0
 801839e:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80183a0:	e010      	b.n	80183c4 <MyApp+0x74c>
					adatBuffer[m] = adatBuffer[m + b];
 80183a2:	4b12      	ldr	r3, [pc, #72]	; (80183ec <MyApp+0x774>)
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	001a      	movs	r2, r3
 80183a8:	4b11      	ldr	r3, [pc, #68]	; (80183f0 <MyApp+0x778>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	18d2      	adds	r2, r2, r3
 80183ae:	4b10      	ldr	r3, [pc, #64]	; (80183f0 <MyApp+0x778>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	490c      	ldr	r1, [pc, #48]	; (80183e4 <MyApp+0x76c>)
 80183b4:	5c89      	ldrb	r1, [r1, r2]
 80183b6:	4a0b      	ldr	r2, [pc, #44]	; (80183e4 <MyApp+0x76c>)
 80183b8:	54d1      	strb	r1, [r2, r3]
					m++;
 80183ba:	4b0d      	ldr	r3, [pc, #52]	; (80183f0 <MyApp+0x778>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	1c5a      	adds	r2, r3, #1
 80183c0:	4b0b      	ldr	r3, [pc, #44]	; (80183f0 <MyApp+0x778>)
 80183c2:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80183c4:	4b09      	ldr	r3, [pc, #36]	; (80183ec <MyApp+0x774>)
 80183c6:	781b      	ldrb	r3, [r3, #0]
 80183c8:	001a      	movs	r2, r3
 80183ca:	2380      	movs	r3, #128	; 0x80
 80183cc:	005b      	lsls	r3, r3, #1
 80183ce:	1a9a      	subs	r2, r3, r2
 80183d0:	4b07      	ldr	r3, [pc, #28]	; (80183f0 <MyApp+0x778>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	429a      	cmp	r2, r3
 80183d6:	dce4      	bgt.n	80183a2 <MyApp+0x72a>
 80183d8:	e01d      	b.n	8018416 <MyApp+0x79e>
 80183da:	46c0      	nop			; (mov r8, r8)
 80183dc:	20007ac8 	.word	0x20007ac8
 80183e0:	20007ac0 	.word	0x20007ac0
 80183e4:	20007850 	.word	0x20007850
 80183e8:	20007950 	.word	0x20007950
 80183ec:	20007abd 	.word	0x20007abd
 80183f0:	20007ac4 	.word	0x20007ac4
 80183f4:	200077f4 	.word	0x200077f4
 80183f8:	08030b90 	.word	0x08030b90
 80183fc:	20007abc 	.word	0x20007abc
 8018400:	08030b60 	.word	0x08030b60
 8018404:	08030b9c 	.word	0x08030b9c
 8018408:	08030ba4 	.word	0x08030ba4
 801840c:	08030bac 	.word	0x08030bac
				}
			}
			else
							problem = true;
 8018410:	4be4      	ldr	r3, [pc, #912]	; (80187a4 <MyApp+0xb2c>)
 8018412:	2201      	movs	r2, #1
 8018414:	701a      	strb	r2, [r3, #0]
			///8///
			a = search(adatBuffer,(char*)"PIRDelayOFF:");
 8018416:	4ae4      	ldr	r2, [pc, #912]	; (80187a8 <MyApp+0xb30>)
 8018418:	4be4      	ldr	r3, [pc, #912]	; (80187ac <MyApp+0xb34>)
 801841a:	0011      	movs	r1, r2
 801841c:	0018      	movs	r0, r3
 801841e:	f000 fbe7 	bl	8018bf0 <_Z6searchPcS_>
 8018422:	0003      	movs	r3, r0
 8018424:	001a      	movs	r2, r3
 8018426:	4be2      	ldr	r3, [pc, #904]	; (80187b0 <MyApp+0xb38>)
 8018428:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 801842a:	4ae2      	ldr	r2, [pc, #904]	; (80187b4 <MyApp+0xb3c>)
 801842c:	4bdf      	ldr	r3, [pc, #892]	; (80187ac <MyApp+0xb34>)
 801842e:	0011      	movs	r1, r2
 8018430:	0018      	movs	r0, r3
 8018432:	f000 fbdd 	bl	8018bf0 <_Z6searchPcS_>
 8018436:	0003      	movs	r3, r0
 8018438:	001a      	movs	r2, r3
 801843a:	4bdf      	ldr	r3, [pc, #892]	; (80187b8 <MyApp+0xb40>)
 801843c:	701a      	strb	r2, [r3, #0]
			if(a){
 801843e:	4bdc      	ldr	r3, [pc, #880]	; (80187b0 <MyApp+0xb38>)
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d045      	beq.n	80184d2 <MyApp+0x85a>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018446:	4bdd      	ldr	r3, [pc, #884]	; (80187bc <MyApp+0xb44>)
 8018448:	2200      	movs	r2, #0
 801844a:	601a      	str	r2, [r3, #0]
 801844c:	4bd8      	ldr	r3, [pc, #864]	; (80187b0 <MyApp+0xb38>)
 801844e:	781b      	ldrb	r3, [r3, #0]
 8018450:	001a      	movs	r2, r3
 8018452:	4bdb      	ldr	r3, [pc, #876]	; (80187c0 <MyApp+0xb48>)
 8018454:	601a      	str	r2, [r3, #0]
 8018456:	e015      	b.n	8018484 <MyApp+0x80c>
					file.sPIRDelayOFF[i] = adatBuffer[j];
 8018458:	4bd9      	ldr	r3, [pc, #868]	; (80187c0 <MyApp+0xb48>)
 801845a:	681a      	ldr	r2, [r3, #0]
 801845c:	4bd7      	ldr	r3, [pc, #860]	; (80187bc <MyApp+0xb44>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	49d2      	ldr	r1, [pc, #840]	; (80187ac <MyApp+0xb34>)
 8018462:	5c88      	ldrb	r0, [r1, r2]
 8018464:	4ad7      	ldr	r2, [pc, #860]	; (80187c4 <MyApp+0xb4c>)
 8018466:	21d4      	movs	r1, #212	; 0xd4
 8018468:	18d3      	adds	r3, r2, r3
 801846a:	185b      	adds	r3, r3, r1
 801846c:	1c02      	adds	r2, r0, #0
 801846e:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018470:	4bd3      	ldr	r3, [pc, #844]	; (80187c0 <MyApp+0xb48>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	1c5a      	adds	r2, r3, #1
 8018476:	4bd2      	ldr	r3, [pc, #840]	; (80187c0 <MyApp+0xb48>)
 8018478:	601a      	str	r2, [r3, #0]
 801847a:	4bd0      	ldr	r3, [pc, #832]	; (80187bc <MyApp+0xb44>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	1c5a      	adds	r2, r3, #1
 8018480:	4bce      	ldr	r3, [pc, #824]	; (80187bc <MyApp+0xb44>)
 8018482:	601a      	str	r2, [r3, #0]
 8018484:	4bcc      	ldr	r3, [pc, #816]	; (80187b8 <MyApp+0xb40>)
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	1e5a      	subs	r2, r3, #1
 801848a:	4bcd      	ldr	r3, [pc, #820]	; (80187c0 <MyApp+0xb48>)
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	429a      	cmp	r2, r3
 8018490:	dce2      	bgt.n	8018458 <MyApp+0x7e0>
				}
				m = 0;
 8018492:	4bcd      	ldr	r3, [pc, #820]	; (80187c8 <MyApp+0xb50>)
 8018494:	2200      	movs	r2, #0
 8018496:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018498:	e010      	b.n	80184bc <MyApp+0x844>
					adatBuffer[m] = adatBuffer[m + b];
 801849a:	4bc7      	ldr	r3, [pc, #796]	; (80187b8 <MyApp+0xb40>)
 801849c:	781b      	ldrb	r3, [r3, #0]
 801849e:	001a      	movs	r2, r3
 80184a0:	4bc9      	ldr	r3, [pc, #804]	; (80187c8 <MyApp+0xb50>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	18d2      	adds	r2, r2, r3
 80184a6:	4bc8      	ldr	r3, [pc, #800]	; (80187c8 <MyApp+0xb50>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	49c0      	ldr	r1, [pc, #768]	; (80187ac <MyApp+0xb34>)
 80184ac:	5c89      	ldrb	r1, [r1, r2]
 80184ae:	4abf      	ldr	r2, [pc, #764]	; (80187ac <MyApp+0xb34>)
 80184b0:	54d1      	strb	r1, [r2, r3]
					m++;
 80184b2:	4bc5      	ldr	r3, [pc, #788]	; (80187c8 <MyApp+0xb50>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	1c5a      	adds	r2, r3, #1
 80184b8:	4bc3      	ldr	r3, [pc, #780]	; (80187c8 <MyApp+0xb50>)
 80184ba:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80184bc:	4bbe      	ldr	r3, [pc, #760]	; (80187b8 <MyApp+0xb40>)
 80184be:	781b      	ldrb	r3, [r3, #0]
 80184c0:	001a      	movs	r2, r3
 80184c2:	2380      	movs	r3, #128	; 0x80
 80184c4:	005b      	lsls	r3, r3, #1
 80184c6:	1a9a      	subs	r2, r3, r2
 80184c8:	4bbf      	ldr	r3, [pc, #764]	; (80187c8 <MyApp+0xb50>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	429a      	cmp	r2, r3
 80184ce:	dce4      	bgt.n	801849a <MyApp+0x822>
 80184d0:	e002      	b.n	80184d8 <MyApp+0x860>
				}
			}
			else
							problem = true;
 80184d2:	4bb4      	ldr	r3, [pc, #720]	; (80187a4 <MyApp+0xb2c>)
 80184d4:	2201      	movs	r2, #1
 80184d6:	701a      	strb	r2, [r3, #0]
			///9///
			a = search(adatBuffer,(char*)"IRON:");
 80184d8:	4abc      	ldr	r2, [pc, #752]	; (80187cc <MyApp+0xb54>)
 80184da:	4bb4      	ldr	r3, [pc, #720]	; (80187ac <MyApp+0xb34>)
 80184dc:	0011      	movs	r1, r2
 80184de:	0018      	movs	r0, r3
 80184e0:	f000 fb86 	bl	8018bf0 <_Z6searchPcS_>
 80184e4:	0003      	movs	r3, r0
 80184e6:	001a      	movs	r2, r3
 80184e8:	4bb1      	ldr	r3, [pc, #708]	; (80187b0 <MyApp+0xb38>)
 80184ea:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 80184ec:	4ab1      	ldr	r2, [pc, #708]	; (80187b4 <MyApp+0xb3c>)
 80184ee:	4baf      	ldr	r3, [pc, #700]	; (80187ac <MyApp+0xb34>)
 80184f0:	0011      	movs	r1, r2
 80184f2:	0018      	movs	r0, r3
 80184f4:	f000 fb7c 	bl	8018bf0 <_Z6searchPcS_>
 80184f8:	0003      	movs	r3, r0
 80184fa:	001a      	movs	r2, r3
 80184fc:	4bae      	ldr	r3, [pc, #696]	; (80187b8 <MyApp+0xb40>)
 80184fe:	701a      	strb	r2, [r3, #0]
			if(a){
 8018500:	4bab      	ldr	r3, [pc, #684]	; (80187b0 <MyApp+0xb38>)
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d045      	beq.n	8018594 <MyApp+0x91c>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018508:	4bac      	ldr	r3, [pc, #688]	; (80187bc <MyApp+0xb44>)
 801850a:	2200      	movs	r2, #0
 801850c:	601a      	str	r2, [r3, #0]
 801850e:	4ba8      	ldr	r3, [pc, #672]	; (80187b0 <MyApp+0xb38>)
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	001a      	movs	r2, r3
 8018514:	4baa      	ldr	r3, [pc, #680]	; (80187c0 <MyApp+0xb48>)
 8018516:	601a      	str	r2, [r3, #0]
 8018518:	e015      	b.n	8018546 <MyApp+0x8ce>
					file.sSetIRON[i] = adatBuffer[j];
 801851a:	4ba9      	ldr	r3, [pc, #676]	; (80187c0 <MyApp+0xb48>)
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	4ba7      	ldr	r3, [pc, #668]	; (80187bc <MyApp+0xb44>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	49a2      	ldr	r1, [pc, #648]	; (80187ac <MyApp+0xb34>)
 8018524:	5c88      	ldrb	r0, [r1, r2]
 8018526:	4aa7      	ldr	r2, [pc, #668]	; (80187c4 <MyApp+0xb4c>)
 8018528:	21de      	movs	r1, #222	; 0xde
 801852a:	18d3      	adds	r3, r2, r3
 801852c:	185b      	adds	r3, r3, r1
 801852e:	1c02      	adds	r2, r0, #0
 8018530:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018532:	4ba3      	ldr	r3, [pc, #652]	; (80187c0 <MyApp+0xb48>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	1c5a      	adds	r2, r3, #1
 8018538:	4ba1      	ldr	r3, [pc, #644]	; (80187c0 <MyApp+0xb48>)
 801853a:	601a      	str	r2, [r3, #0]
 801853c:	4b9f      	ldr	r3, [pc, #636]	; (80187bc <MyApp+0xb44>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	1c5a      	adds	r2, r3, #1
 8018542:	4b9e      	ldr	r3, [pc, #632]	; (80187bc <MyApp+0xb44>)
 8018544:	601a      	str	r2, [r3, #0]
 8018546:	4b9c      	ldr	r3, [pc, #624]	; (80187b8 <MyApp+0xb40>)
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	1e5a      	subs	r2, r3, #1
 801854c:	4b9c      	ldr	r3, [pc, #624]	; (80187c0 <MyApp+0xb48>)
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	429a      	cmp	r2, r3
 8018552:	dce2      	bgt.n	801851a <MyApp+0x8a2>
				}
				m = 0;
 8018554:	4b9c      	ldr	r3, [pc, #624]	; (80187c8 <MyApp+0xb50>)
 8018556:	2200      	movs	r2, #0
 8018558:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 801855a:	e010      	b.n	801857e <MyApp+0x906>
					adatBuffer[m] = adatBuffer[m + b];
 801855c:	4b96      	ldr	r3, [pc, #600]	; (80187b8 <MyApp+0xb40>)
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	001a      	movs	r2, r3
 8018562:	4b99      	ldr	r3, [pc, #612]	; (80187c8 <MyApp+0xb50>)
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	18d2      	adds	r2, r2, r3
 8018568:	4b97      	ldr	r3, [pc, #604]	; (80187c8 <MyApp+0xb50>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	498f      	ldr	r1, [pc, #572]	; (80187ac <MyApp+0xb34>)
 801856e:	5c89      	ldrb	r1, [r1, r2]
 8018570:	4a8e      	ldr	r2, [pc, #568]	; (80187ac <MyApp+0xb34>)
 8018572:	54d1      	strb	r1, [r2, r3]
					m++;
 8018574:	4b94      	ldr	r3, [pc, #592]	; (80187c8 <MyApp+0xb50>)
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	1c5a      	adds	r2, r3, #1
 801857a:	4b93      	ldr	r3, [pc, #588]	; (80187c8 <MyApp+0xb50>)
 801857c:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 801857e:	4b8e      	ldr	r3, [pc, #568]	; (80187b8 <MyApp+0xb40>)
 8018580:	781b      	ldrb	r3, [r3, #0]
 8018582:	001a      	movs	r2, r3
 8018584:	2380      	movs	r3, #128	; 0x80
 8018586:	005b      	lsls	r3, r3, #1
 8018588:	1a9a      	subs	r2, r3, r2
 801858a:	4b8f      	ldr	r3, [pc, #572]	; (80187c8 <MyApp+0xb50>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	429a      	cmp	r2, r3
 8018590:	dce4      	bgt.n	801855c <MyApp+0x8e4>
 8018592:	e002      	b.n	801859a <MyApp+0x922>
				}
			}
			else
							problem = true;
 8018594:	4b83      	ldr	r3, [pc, #524]	; (80187a4 <MyApp+0xb2c>)
 8018596:	2201      	movs	r2, #1
 8018598:	701a      	strb	r2, [r3, #0]
			///10///
			a = search(adatBuffer,(char*)"RS232ON:");
 801859a:	4a8d      	ldr	r2, [pc, #564]	; (80187d0 <MyApp+0xb58>)
 801859c:	4b83      	ldr	r3, [pc, #524]	; (80187ac <MyApp+0xb34>)
 801859e:	0011      	movs	r1, r2
 80185a0:	0018      	movs	r0, r3
 80185a2:	f000 fb25 	bl	8018bf0 <_Z6searchPcS_>
 80185a6:	0003      	movs	r3, r0
 80185a8:	001a      	movs	r2, r3
 80185aa:	4b81      	ldr	r3, [pc, #516]	; (80187b0 <MyApp+0xb38>)
 80185ac:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 80185ae:	4a81      	ldr	r2, [pc, #516]	; (80187b4 <MyApp+0xb3c>)
 80185b0:	4b7e      	ldr	r3, [pc, #504]	; (80187ac <MyApp+0xb34>)
 80185b2:	0011      	movs	r1, r2
 80185b4:	0018      	movs	r0, r3
 80185b6:	f000 fb1b 	bl	8018bf0 <_Z6searchPcS_>
 80185ba:	0003      	movs	r3, r0
 80185bc:	001a      	movs	r2, r3
 80185be:	4b7e      	ldr	r3, [pc, #504]	; (80187b8 <MyApp+0xb40>)
 80185c0:	701a      	strb	r2, [r3, #0]
			if(a){
 80185c2:	4b7b      	ldr	r3, [pc, #492]	; (80187b0 <MyApp+0xb38>)
 80185c4:	781b      	ldrb	r3, [r3, #0]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d045      	beq.n	8018656 <MyApp+0x9de>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 80185ca:	4b7c      	ldr	r3, [pc, #496]	; (80187bc <MyApp+0xb44>)
 80185cc:	2200      	movs	r2, #0
 80185ce:	601a      	str	r2, [r3, #0]
 80185d0:	4b77      	ldr	r3, [pc, #476]	; (80187b0 <MyApp+0xb38>)
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	001a      	movs	r2, r3
 80185d6:	4b7a      	ldr	r3, [pc, #488]	; (80187c0 <MyApp+0xb48>)
 80185d8:	601a      	str	r2, [r3, #0]
 80185da:	e015      	b.n	8018608 <MyApp+0x990>
					file.sSetRS232ON[i] = adatBuffer[j];
 80185dc:	4b78      	ldr	r3, [pc, #480]	; (80187c0 <MyApp+0xb48>)
 80185de:	681a      	ldr	r2, [r3, #0]
 80185e0:	4b76      	ldr	r3, [pc, #472]	; (80187bc <MyApp+0xb44>)
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	4971      	ldr	r1, [pc, #452]	; (80187ac <MyApp+0xb34>)
 80185e6:	5c88      	ldrb	r0, [r1, r2]
 80185e8:	4a76      	ldr	r2, [pc, #472]	; (80187c4 <MyApp+0xb4c>)
 80185ea:	21e8      	movs	r1, #232	; 0xe8
 80185ec:	18d3      	adds	r3, r2, r3
 80185ee:	185b      	adds	r3, r3, r1
 80185f0:	1c02      	adds	r2, r0, #0
 80185f2:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 80185f4:	4b72      	ldr	r3, [pc, #456]	; (80187c0 <MyApp+0xb48>)
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	1c5a      	adds	r2, r3, #1
 80185fa:	4b71      	ldr	r3, [pc, #452]	; (80187c0 <MyApp+0xb48>)
 80185fc:	601a      	str	r2, [r3, #0]
 80185fe:	4b6f      	ldr	r3, [pc, #444]	; (80187bc <MyApp+0xb44>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	1c5a      	adds	r2, r3, #1
 8018604:	4b6d      	ldr	r3, [pc, #436]	; (80187bc <MyApp+0xb44>)
 8018606:	601a      	str	r2, [r3, #0]
 8018608:	4b6b      	ldr	r3, [pc, #428]	; (80187b8 <MyApp+0xb40>)
 801860a:	781b      	ldrb	r3, [r3, #0]
 801860c:	1e5a      	subs	r2, r3, #1
 801860e:	4b6c      	ldr	r3, [pc, #432]	; (80187c0 <MyApp+0xb48>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	429a      	cmp	r2, r3
 8018614:	dce2      	bgt.n	80185dc <MyApp+0x964>
				}
				m = 0;
 8018616:	4b6c      	ldr	r3, [pc, #432]	; (80187c8 <MyApp+0xb50>)
 8018618:	2200      	movs	r2, #0
 801861a:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 801861c:	e010      	b.n	8018640 <MyApp+0x9c8>
					adatBuffer[m] = adatBuffer[m + b];
 801861e:	4b66      	ldr	r3, [pc, #408]	; (80187b8 <MyApp+0xb40>)
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	001a      	movs	r2, r3
 8018624:	4b68      	ldr	r3, [pc, #416]	; (80187c8 <MyApp+0xb50>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	18d2      	adds	r2, r2, r3
 801862a:	4b67      	ldr	r3, [pc, #412]	; (80187c8 <MyApp+0xb50>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	495f      	ldr	r1, [pc, #380]	; (80187ac <MyApp+0xb34>)
 8018630:	5c89      	ldrb	r1, [r1, r2]
 8018632:	4a5e      	ldr	r2, [pc, #376]	; (80187ac <MyApp+0xb34>)
 8018634:	54d1      	strb	r1, [r2, r3]
					m++;
 8018636:	4b64      	ldr	r3, [pc, #400]	; (80187c8 <MyApp+0xb50>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	1c5a      	adds	r2, r3, #1
 801863c:	4b62      	ldr	r3, [pc, #392]	; (80187c8 <MyApp+0xb50>)
 801863e:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018640:	4b5d      	ldr	r3, [pc, #372]	; (80187b8 <MyApp+0xb40>)
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	001a      	movs	r2, r3
 8018646:	2380      	movs	r3, #128	; 0x80
 8018648:	005b      	lsls	r3, r3, #1
 801864a:	1a9a      	subs	r2, r3, r2
 801864c:	4b5e      	ldr	r3, [pc, #376]	; (80187c8 <MyApp+0xb50>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	429a      	cmp	r2, r3
 8018652:	dce4      	bgt.n	801861e <MyApp+0x9a6>
 8018654:	e002      	b.n	801865c <MyApp+0x9e4>
				}
			}
			else
							problem = true;
 8018656:	4b53      	ldr	r3, [pc, #332]	; (80187a4 <MyApp+0xb2c>)
 8018658:	2201      	movs	r2, #1
 801865a:	701a      	strb	r2, [r3, #0]
			///11///
			a = search(adatBuffer,(char*)"tvtype:");
 801865c:	4a5d      	ldr	r2, [pc, #372]	; (80187d4 <MyApp+0xb5c>)
 801865e:	4b53      	ldr	r3, [pc, #332]	; (80187ac <MyApp+0xb34>)
 8018660:	0011      	movs	r1, r2
 8018662:	0018      	movs	r0, r3
 8018664:	f000 fac4 	bl	8018bf0 <_Z6searchPcS_>
 8018668:	0003      	movs	r3, r0
 801866a:	001a      	movs	r2, r3
 801866c:	4b50      	ldr	r3, [pc, #320]	; (80187b0 <MyApp+0xb38>)
 801866e:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8018670:	4a50      	ldr	r2, [pc, #320]	; (80187b4 <MyApp+0xb3c>)
 8018672:	4b4e      	ldr	r3, [pc, #312]	; (80187ac <MyApp+0xb34>)
 8018674:	0011      	movs	r1, r2
 8018676:	0018      	movs	r0, r3
 8018678:	f000 faba 	bl	8018bf0 <_Z6searchPcS_>
 801867c:	0003      	movs	r3, r0
 801867e:	001a      	movs	r2, r3
 8018680:	4b4d      	ldr	r3, [pc, #308]	; (80187b8 <MyApp+0xb40>)
 8018682:	701a      	strb	r2, [r3, #0]
			if(a){
 8018684:	4b4a      	ldr	r3, [pc, #296]	; (80187b0 <MyApp+0xb38>)
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d045      	beq.n	8018718 <MyApp+0xaa0>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 801868c:	4b4b      	ldr	r3, [pc, #300]	; (80187bc <MyApp+0xb44>)
 801868e:	2200      	movs	r2, #0
 8018690:	601a      	str	r2, [r3, #0]
 8018692:	4b47      	ldr	r3, [pc, #284]	; (80187b0 <MyApp+0xb38>)
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	001a      	movs	r2, r3
 8018698:	4b49      	ldr	r3, [pc, #292]	; (80187c0 <MyApp+0xb48>)
 801869a:	601a      	str	r2, [r3, #0]
 801869c:	e015      	b.n	80186ca <MyApp+0xa52>
					file.tvtype[i] = adatBuffer[j];
 801869e:	4b48      	ldr	r3, [pc, #288]	; (80187c0 <MyApp+0xb48>)
 80186a0:	681a      	ldr	r2, [r3, #0]
 80186a2:	4b46      	ldr	r3, [pc, #280]	; (80187bc <MyApp+0xb44>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	4941      	ldr	r1, [pc, #260]	; (80187ac <MyApp+0xb34>)
 80186a8:	5c88      	ldrb	r0, [r1, r2]
 80186aa:	4a46      	ldr	r2, [pc, #280]	; (80187c4 <MyApp+0xb4c>)
 80186ac:	21f2      	movs	r1, #242	; 0xf2
 80186ae:	18d3      	adds	r3, r2, r3
 80186b0:	185b      	adds	r3, r3, r1
 80186b2:	1c02      	adds	r2, r0, #0
 80186b4:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 80186b6:	4b42      	ldr	r3, [pc, #264]	; (80187c0 <MyApp+0xb48>)
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	1c5a      	adds	r2, r3, #1
 80186bc:	4b40      	ldr	r3, [pc, #256]	; (80187c0 <MyApp+0xb48>)
 80186be:	601a      	str	r2, [r3, #0]
 80186c0:	4b3e      	ldr	r3, [pc, #248]	; (80187bc <MyApp+0xb44>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	1c5a      	adds	r2, r3, #1
 80186c6:	4b3d      	ldr	r3, [pc, #244]	; (80187bc <MyApp+0xb44>)
 80186c8:	601a      	str	r2, [r3, #0]
 80186ca:	4b3b      	ldr	r3, [pc, #236]	; (80187b8 <MyApp+0xb40>)
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	1e5a      	subs	r2, r3, #1
 80186d0:	4b3b      	ldr	r3, [pc, #236]	; (80187c0 <MyApp+0xb48>)
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	429a      	cmp	r2, r3
 80186d6:	dce2      	bgt.n	801869e <MyApp+0xa26>
				}
				m = 0;
 80186d8:	4b3b      	ldr	r3, [pc, #236]	; (80187c8 <MyApp+0xb50>)
 80186da:	2200      	movs	r2, #0
 80186dc:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80186de:	e010      	b.n	8018702 <MyApp+0xa8a>
					adatBuffer[m] = adatBuffer[m + b];
 80186e0:	4b35      	ldr	r3, [pc, #212]	; (80187b8 <MyApp+0xb40>)
 80186e2:	781b      	ldrb	r3, [r3, #0]
 80186e4:	001a      	movs	r2, r3
 80186e6:	4b38      	ldr	r3, [pc, #224]	; (80187c8 <MyApp+0xb50>)
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	18d2      	adds	r2, r2, r3
 80186ec:	4b36      	ldr	r3, [pc, #216]	; (80187c8 <MyApp+0xb50>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	492e      	ldr	r1, [pc, #184]	; (80187ac <MyApp+0xb34>)
 80186f2:	5c89      	ldrb	r1, [r1, r2]
 80186f4:	4a2d      	ldr	r2, [pc, #180]	; (80187ac <MyApp+0xb34>)
 80186f6:	54d1      	strb	r1, [r2, r3]
					m++;
 80186f8:	4b33      	ldr	r3, [pc, #204]	; (80187c8 <MyApp+0xb50>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	1c5a      	adds	r2, r3, #1
 80186fe:	4b32      	ldr	r3, [pc, #200]	; (80187c8 <MyApp+0xb50>)
 8018700:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018702:	4b2d      	ldr	r3, [pc, #180]	; (80187b8 <MyApp+0xb40>)
 8018704:	781b      	ldrb	r3, [r3, #0]
 8018706:	001a      	movs	r2, r3
 8018708:	2380      	movs	r3, #128	; 0x80
 801870a:	005b      	lsls	r3, r3, #1
 801870c:	1a9a      	subs	r2, r3, r2
 801870e:	4b2e      	ldr	r3, [pc, #184]	; (80187c8 <MyApp+0xb50>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	429a      	cmp	r2, r3
 8018714:	dce4      	bgt.n	80186e0 <MyApp+0xa68>
 8018716:	e002      	b.n	801871e <MyApp+0xaa6>
				}
			}
			else
							problem = true;
 8018718:	4b22      	ldr	r3, [pc, #136]	; (80187a4 <MyApp+0xb2c>)
 801871a:	2201      	movs	r2, #1
 801871c:	701a      	strb	r2, [r3, #0]
			///11///
			a = search(adatBuffer,(char*)"rs1:");
 801871e:	4a2e      	ldr	r2, [pc, #184]	; (80187d8 <MyApp+0xb60>)
 8018720:	4b22      	ldr	r3, [pc, #136]	; (80187ac <MyApp+0xb34>)
 8018722:	0011      	movs	r1, r2
 8018724:	0018      	movs	r0, r3
 8018726:	f000 fa63 	bl	8018bf0 <_Z6searchPcS_>
 801872a:	0003      	movs	r3, r0
 801872c:	001a      	movs	r2, r3
 801872e:	4b20      	ldr	r3, [pc, #128]	; (80187b0 <MyApp+0xb38>)
 8018730:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 8018732:	4a20      	ldr	r2, [pc, #128]	; (80187b4 <MyApp+0xb3c>)
 8018734:	4b1d      	ldr	r3, [pc, #116]	; (80187ac <MyApp+0xb34>)
 8018736:	0011      	movs	r1, r2
 8018738:	0018      	movs	r0, r3
 801873a:	f000 fa59 	bl	8018bf0 <_Z6searchPcS_>
 801873e:	0003      	movs	r3, r0
 8018740:	001a      	movs	r2, r3
 8018742:	4b1d      	ldr	r3, [pc, #116]	; (80187b8 <MyApp+0xb40>)
 8018744:	701a      	strb	r2, [r3, #0]
			if(a){
 8018746:	4b1a      	ldr	r3, [pc, #104]	; (80187b0 <MyApp+0xb38>)
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d062      	beq.n	8018814 <MyApp+0xb9c>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 801874e:	4b1b      	ldr	r3, [pc, #108]	; (80187bc <MyApp+0xb44>)
 8018750:	2200      	movs	r2, #0
 8018752:	601a      	str	r2, [r3, #0]
 8018754:	4b16      	ldr	r3, [pc, #88]	; (80187b0 <MyApp+0xb38>)
 8018756:	781b      	ldrb	r3, [r3, #0]
 8018758:	001a      	movs	r2, r3
 801875a:	4b19      	ldr	r3, [pc, #100]	; (80187c0 <MyApp+0xb48>)
 801875c:	601a      	str	r2, [r3, #0]
 801875e:	e015      	b.n	801878c <MyApp+0xb14>
					file.rs1[i] = adatBuffer[j];
 8018760:	4b17      	ldr	r3, [pc, #92]	; (80187c0 <MyApp+0xb48>)
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	4b15      	ldr	r3, [pc, #84]	; (80187bc <MyApp+0xb44>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	4910      	ldr	r1, [pc, #64]	; (80187ac <MyApp+0xb34>)
 801876a:	5c88      	ldrb	r0, [r1, r2]
 801876c:	4a15      	ldr	r2, [pc, #84]	; (80187c4 <MyApp+0xb4c>)
 801876e:	21f8      	movs	r1, #248	; 0xf8
 8018770:	18d3      	adds	r3, r2, r3
 8018772:	185b      	adds	r3, r3, r1
 8018774:	1c02      	adds	r2, r0, #0
 8018776:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018778:	4b11      	ldr	r3, [pc, #68]	; (80187c0 <MyApp+0xb48>)
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	1c5a      	adds	r2, r3, #1
 801877e:	4b10      	ldr	r3, [pc, #64]	; (80187c0 <MyApp+0xb48>)
 8018780:	601a      	str	r2, [r3, #0]
 8018782:	4b0e      	ldr	r3, [pc, #56]	; (80187bc <MyApp+0xb44>)
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	1c5a      	adds	r2, r3, #1
 8018788:	4b0c      	ldr	r3, [pc, #48]	; (80187bc <MyApp+0xb44>)
 801878a:	601a      	str	r2, [r3, #0]
 801878c:	4b0a      	ldr	r3, [pc, #40]	; (80187b8 <MyApp+0xb40>)
 801878e:	781b      	ldrb	r3, [r3, #0]
 8018790:	1e5a      	subs	r2, r3, #1
 8018792:	4b0b      	ldr	r3, [pc, #44]	; (80187c0 <MyApp+0xb48>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	429a      	cmp	r2, r3
 8018798:	dce2      	bgt.n	8018760 <MyApp+0xae8>
				}
				m = 0;
 801879a:	4b0b      	ldr	r3, [pc, #44]	; (80187c8 <MyApp+0xb50>)
 801879c:	2200      	movs	r2, #0
 801879e:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80187a0:	e02d      	b.n	80187fe <MyApp+0xb86>
 80187a2:	46c0      	nop			; (mov r8, r8)
 80187a4:	200077f4 	.word	0x200077f4
 80187a8:	08030bb8 	.word	0x08030bb8
 80187ac:	20007850 	.word	0x20007850
 80187b0:	20007abc 	.word	0x20007abc
 80187b4:	08030b60 	.word	0x08030b60
 80187b8:	20007abd 	.word	0x20007abd
 80187bc:	20007ac0 	.word	0x20007ac0
 80187c0:	20007ac8 	.word	0x20007ac8
 80187c4:	20007950 	.word	0x20007950
 80187c8:	20007ac4 	.word	0x20007ac4
 80187cc:	08030bc8 	.word	0x08030bc8
 80187d0:	08030bd0 	.word	0x08030bd0
 80187d4:	08030bdc 	.word	0x08030bdc
 80187d8:	08030be4 	.word	0x08030be4
					adatBuffer[m] = adatBuffer[m + b];
 80187dc:	4b9d      	ldr	r3, [pc, #628]	; (8018a54 <MyApp+0xddc>)
 80187de:	781b      	ldrb	r3, [r3, #0]
 80187e0:	001a      	movs	r2, r3
 80187e2:	4b9d      	ldr	r3, [pc, #628]	; (8018a58 <MyApp+0xde0>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	18d2      	adds	r2, r2, r3
 80187e8:	4b9b      	ldr	r3, [pc, #620]	; (8018a58 <MyApp+0xde0>)
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	499b      	ldr	r1, [pc, #620]	; (8018a5c <MyApp+0xde4>)
 80187ee:	5c89      	ldrb	r1, [r1, r2]
 80187f0:	4a9a      	ldr	r2, [pc, #616]	; (8018a5c <MyApp+0xde4>)
 80187f2:	54d1      	strb	r1, [r2, r3]
					m++;
 80187f4:	4b98      	ldr	r3, [pc, #608]	; (8018a58 <MyApp+0xde0>)
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	1c5a      	adds	r2, r3, #1
 80187fa:	4b97      	ldr	r3, [pc, #604]	; (8018a58 <MyApp+0xde0>)
 80187fc:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80187fe:	4b95      	ldr	r3, [pc, #596]	; (8018a54 <MyApp+0xddc>)
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	001a      	movs	r2, r3
 8018804:	2380      	movs	r3, #128	; 0x80
 8018806:	005b      	lsls	r3, r3, #1
 8018808:	1a9a      	subs	r2, r3, r2
 801880a:	4b93      	ldr	r3, [pc, #588]	; (8018a58 <MyApp+0xde0>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	429a      	cmp	r2, r3
 8018810:	dce4      	bgt.n	80187dc <MyApp+0xb64>
 8018812:	e002      	b.n	801881a <MyApp+0xba2>
				}
			}
			else
							problem = true;
 8018814:	4b92      	ldr	r3, [pc, #584]	; (8018a60 <MyApp+0xde8>)
 8018816:	2201      	movs	r2, #1
 8018818:	701a      	strb	r2, [r3, #0]
			///11///
			a = search(adatBuffer,(char*)"rs2:");
 801881a:	4a92      	ldr	r2, [pc, #584]	; (8018a64 <MyApp+0xdec>)
 801881c:	4b8f      	ldr	r3, [pc, #572]	; (8018a5c <MyApp+0xde4>)
 801881e:	0011      	movs	r1, r2
 8018820:	0018      	movs	r0, r3
 8018822:	f000 f9e5 	bl	8018bf0 <_Z6searchPcS_>
 8018826:	0003      	movs	r3, r0
 8018828:	001a      	movs	r2, r3
 801882a:	4b8f      	ldr	r3, [pc, #572]	; (8018a68 <MyApp+0xdf0>)
 801882c:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 801882e:	4a8f      	ldr	r2, [pc, #572]	; (8018a6c <MyApp+0xdf4>)
 8018830:	4b8a      	ldr	r3, [pc, #552]	; (8018a5c <MyApp+0xde4>)
 8018832:	0011      	movs	r1, r2
 8018834:	0018      	movs	r0, r3
 8018836:	f000 f9db 	bl	8018bf0 <_Z6searchPcS_>
 801883a:	0003      	movs	r3, r0
 801883c:	001a      	movs	r2, r3
 801883e:	4b85      	ldr	r3, [pc, #532]	; (8018a54 <MyApp+0xddc>)
 8018840:	701a      	strb	r2, [r3, #0]
			if(a){
 8018842:	4b89      	ldr	r3, [pc, #548]	; (8018a68 <MyApp+0xdf0>)
 8018844:	781b      	ldrb	r3, [r3, #0]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d045      	beq.n	80188d6 <MyApp+0xc5e>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 801884a:	4b89      	ldr	r3, [pc, #548]	; (8018a70 <MyApp+0xdf8>)
 801884c:	2200      	movs	r2, #0
 801884e:	601a      	str	r2, [r3, #0]
 8018850:	4b85      	ldr	r3, [pc, #532]	; (8018a68 <MyApp+0xdf0>)
 8018852:	781b      	ldrb	r3, [r3, #0]
 8018854:	001a      	movs	r2, r3
 8018856:	4b87      	ldr	r3, [pc, #540]	; (8018a74 <MyApp+0xdfc>)
 8018858:	601a      	str	r2, [r3, #0]
 801885a:	e015      	b.n	8018888 <MyApp+0xc10>
					file.rs2[i] = adatBuffer[j];
 801885c:	4b85      	ldr	r3, [pc, #532]	; (8018a74 <MyApp+0xdfc>)
 801885e:	681a      	ldr	r2, [r3, #0]
 8018860:	4b83      	ldr	r3, [pc, #524]	; (8018a70 <MyApp+0xdf8>)
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	497d      	ldr	r1, [pc, #500]	; (8018a5c <MyApp+0xde4>)
 8018866:	5c88      	ldrb	r0, [r1, r2]
 8018868:	4a83      	ldr	r2, [pc, #524]	; (8018a78 <MyApp+0xe00>)
 801886a:	21fe      	movs	r1, #254	; 0xfe
 801886c:	18d3      	adds	r3, r2, r3
 801886e:	185b      	adds	r3, r3, r1
 8018870:	1c02      	adds	r2, r0, #0
 8018872:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018874:	4b7f      	ldr	r3, [pc, #508]	; (8018a74 <MyApp+0xdfc>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	1c5a      	adds	r2, r3, #1
 801887a:	4b7e      	ldr	r3, [pc, #504]	; (8018a74 <MyApp+0xdfc>)
 801887c:	601a      	str	r2, [r3, #0]
 801887e:	4b7c      	ldr	r3, [pc, #496]	; (8018a70 <MyApp+0xdf8>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	1c5a      	adds	r2, r3, #1
 8018884:	4b7a      	ldr	r3, [pc, #488]	; (8018a70 <MyApp+0xdf8>)
 8018886:	601a      	str	r2, [r3, #0]
 8018888:	4b72      	ldr	r3, [pc, #456]	; (8018a54 <MyApp+0xddc>)
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	1e5a      	subs	r2, r3, #1
 801888e:	4b79      	ldr	r3, [pc, #484]	; (8018a74 <MyApp+0xdfc>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	429a      	cmp	r2, r3
 8018894:	dce2      	bgt.n	801885c <MyApp+0xbe4>
				}
				m = 0;
 8018896:	4b70      	ldr	r3, [pc, #448]	; (8018a58 <MyApp+0xde0>)
 8018898:	2200      	movs	r2, #0
 801889a:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 801889c:	e010      	b.n	80188c0 <MyApp+0xc48>
					adatBuffer[m] = adatBuffer[m + b];
 801889e:	4b6d      	ldr	r3, [pc, #436]	; (8018a54 <MyApp+0xddc>)
 80188a0:	781b      	ldrb	r3, [r3, #0]
 80188a2:	001a      	movs	r2, r3
 80188a4:	4b6c      	ldr	r3, [pc, #432]	; (8018a58 <MyApp+0xde0>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	18d2      	adds	r2, r2, r3
 80188aa:	4b6b      	ldr	r3, [pc, #428]	; (8018a58 <MyApp+0xde0>)
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	496b      	ldr	r1, [pc, #428]	; (8018a5c <MyApp+0xde4>)
 80188b0:	5c89      	ldrb	r1, [r1, r2]
 80188b2:	4a6a      	ldr	r2, [pc, #424]	; (8018a5c <MyApp+0xde4>)
 80188b4:	54d1      	strb	r1, [r2, r3]
					m++;
 80188b6:	4b68      	ldr	r3, [pc, #416]	; (8018a58 <MyApp+0xde0>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	1c5a      	adds	r2, r3, #1
 80188bc:	4b66      	ldr	r3, [pc, #408]	; (8018a58 <MyApp+0xde0>)
 80188be:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 80188c0:	4b64      	ldr	r3, [pc, #400]	; (8018a54 <MyApp+0xddc>)
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	001a      	movs	r2, r3
 80188c6:	2380      	movs	r3, #128	; 0x80
 80188c8:	005b      	lsls	r3, r3, #1
 80188ca:	1a9a      	subs	r2, r3, r2
 80188cc:	4b62      	ldr	r3, [pc, #392]	; (8018a58 <MyApp+0xde0>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	dce4      	bgt.n	801889e <MyApp+0xc26>
 80188d4:	e002      	b.n	80188dc <MyApp+0xc64>
				}
			}
			else
							problem = true;
 80188d6:	4b62      	ldr	r3, [pc, #392]	; (8018a60 <MyApp+0xde8>)
 80188d8:	2201      	movs	r2, #1
 80188da:	701a      	strb	r2, [r3, #0]
			///11///
			a = search(adatBuffer,(char*)"rs3:");
 80188dc:	4a67      	ldr	r2, [pc, #412]	; (8018a7c <MyApp+0xe04>)
 80188de:	4b5f      	ldr	r3, [pc, #380]	; (8018a5c <MyApp+0xde4>)
 80188e0:	0011      	movs	r1, r2
 80188e2:	0018      	movs	r0, r3
 80188e4:	f000 f984 	bl	8018bf0 <_Z6searchPcS_>
 80188e8:	0003      	movs	r3, r0
 80188ea:	001a      	movs	r2, r3
 80188ec:	4b5e      	ldr	r3, [pc, #376]	; (8018a68 <MyApp+0xdf0>)
 80188ee:	701a      	strb	r2, [r3, #0]
			b = search(adatBuffer,(char*)";");
 80188f0:	4a5e      	ldr	r2, [pc, #376]	; (8018a6c <MyApp+0xdf4>)
 80188f2:	4b5a      	ldr	r3, [pc, #360]	; (8018a5c <MyApp+0xde4>)
 80188f4:	0011      	movs	r1, r2
 80188f6:	0018      	movs	r0, r3
 80188f8:	f000 f97a 	bl	8018bf0 <_Z6searchPcS_>
 80188fc:	0003      	movs	r3, r0
 80188fe:	001a      	movs	r2, r3
 8018900:	4b54      	ldr	r3, [pc, #336]	; (8018a54 <MyApp+0xddc>)
 8018902:	701a      	strb	r2, [r3, #0]
			if(a){
 8018904:	4b58      	ldr	r3, [pc, #352]	; (8018a68 <MyApp+0xdf0>)
 8018906:	781b      	ldrb	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d046      	beq.n	801899a <MyApp+0xd22>
				for(i = 0,j = a;j <  b - 1;j++,i++){
 801890c:	4b58      	ldr	r3, [pc, #352]	; (8018a70 <MyApp+0xdf8>)
 801890e:	2200      	movs	r2, #0
 8018910:	601a      	str	r2, [r3, #0]
 8018912:	4b55      	ldr	r3, [pc, #340]	; (8018a68 <MyApp+0xdf0>)
 8018914:	781b      	ldrb	r3, [r3, #0]
 8018916:	001a      	movs	r2, r3
 8018918:	4b56      	ldr	r3, [pc, #344]	; (8018a74 <MyApp+0xdfc>)
 801891a:	601a      	str	r2, [r3, #0]
 801891c:	e016      	b.n	801894c <MyApp+0xcd4>
					file.rs3[i] = adatBuffer[j];
 801891e:	4b55      	ldr	r3, [pc, #340]	; (8018a74 <MyApp+0xdfc>)
 8018920:	6819      	ldr	r1, [r3, #0]
 8018922:	4b53      	ldr	r3, [pc, #332]	; (8018a70 <MyApp+0xdf8>)
 8018924:	681a      	ldr	r2, [r3, #0]
 8018926:	4b4d      	ldr	r3, [pc, #308]	; (8018a5c <MyApp+0xde4>)
 8018928:	5c58      	ldrb	r0, [r3, r1]
 801892a:	4953      	ldr	r1, [pc, #332]	; (8018a78 <MyApp+0xe00>)
 801892c:	2380      	movs	r3, #128	; 0x80
 801892e:	005b      	lsls	r3, r3, #1
 8018930:	188a      	adds	r2, r1, r2
 8018932:	18d3      	adds	r3, r2, r3
 8018934:	1c02      	adds	r2, r0, #0
 8018936:	701a      	strb	r2, [r3, #0]
				for(i = 0,j = a;j <  b - 1;j++,i++){
 8018938:	4b4e      	ldr	r3, [pc, #312]	; (8018a74 <MyApp+0xdfc>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	1c5a      	adds	r2, r3, #1
 801893e:	4b4d      	ldr	r3, [pc, #308]	; (8018a74 <MyApp+0xdfc>)
 8018940:	601a      	str	r2, [r3, #0]
 8018942:	4b4b      	ldr	r3, [pc, #300]	; (8018a70 <MyApp+0xdf8>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	1c5a      	adds	r2, r3, #1
 8018948:	4b49      	ldr	r3, [pc, #292]	; (8018a70 <MyApp+0xdf8>)
 801894a:	601a      	str	r2, [r3, #0]
 801894c:	4b41      	ldr	r3, [pc, #260]	; (8018a54 <MyApp+0xddc>)
 801894e:	781b      	ldrb	r3, [r3, #0]
 8018950:	1e5a      	subs	r2, r3, #1
 8018952:	4b48      	ldr	r3, [pc, #288]	; (8018a74 <MyApp+0xdfc>)
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	429a      	cmp	r2, r3
 8018958:	dce1      	bgt.n	801891e <MyApp+0xca6>
				}
				m = 0;
 801895a:	4b3f      	ldr	r3, [pc, #252]	; (8018a58 <MyApp+0xde0>)
 801895c:	2200      	movs	r2, #0
 801895e:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018960:	e010      	b.n	8018984 <MyApp+0xd0c>
					adatBuffer[m] = adatBuffer[m + b];
 8018962:	4b3c      	ldr	r3, [pc, #240]	; (8018a54 <MyApp+0xddc>)
 8018964:	781b      	ldrb	r3, [r3, #0]
 8018966:	001a      	movs	r2, r3
 8018968:	4b3b      	ldr	r3, [pc, #236]	; (8018a58 <MyApp+0xde0>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	18d2      	adds	r2, r2, r3
 801896e:	4b3a      	ldr	r3, [pc, #232]	; (8018a58 <MyApp+0xde0>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	493a      	ldr	r1, [pc, #232]	; (8018a5c <MyApp+0xde4>)
 8018974:	5c89      	ldrb	r1, [r1, r2]
 8018976:	4a39      	ldr	r2, [pc, #228]	; (8018a5c <MyApp+0xde4>)
 8018978:	54d1      	strb	r1, [r2, r3]
					m++;
 801897a:	4b37      	ldr	r3, [pc, #220]	; (8018a58 <MyApp+0xde0>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	1c5a      	adds	r2, r3, #1
 8018980:	4b35      	ldr	r3, [pc, #212]	; (8018a58 <MyApp+0xde0>)
 8018982:	601a      	str	r2, [r3, #0]
				while(m < 256-b){
 8018984:	4b33      	ldr	r3, [pc, #204]	; (8018a54 <MyApp+0xddc>)
 8018986:	781b      	ldrb	r3, [r3, #0]
 8018988:	001a      	movs	r2, r3
 801898a:	2380      	movs	r3, #128	; 0x80
 801898c:	005b      	lsls	r3, r3, #1
 801898e:	1a9a      	subs	r2, r3, r2
 8018990:	4b31      	ldr	r3, [pc, #196]	; (8018a58 <MyApp+0xde0>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	429a      	cmp	r2, r3
 8018996:	dce4      	bgt.n	8018962 <MyApp+0xcea>
 8018998:	e002      	b.n	80189a0 <MyApp+0xd28>
				}
			}
			else
							problem = true;
 801899a:	4b31      	ldr	r3, [pc, #196]	; (8018a60 <MyApp+0xde8>)
 801899c:	2201      	movs	r2, #1
 801899e:	701a      	strb	r2, [r3, #0]



			if (file.sPIRDelayON[0] == '0' && file.sPIRDelayON[1] == '0' && file.sPIRDelayON[2] == '0')
 80189a0:	4b35      	ldr	r3, [pc, #212]	; (8018a78 <MyApp+0xe00>)
 80189a2:	22ca      	movs	r2, #202	; 0xca
 80189a4:	5c9b      	ldrb	r3, [r3, r2]
 80189a6:	2b30      	cmp	r3, #48	; 0x30
 80189a8:	d111      	bne.n	80189ce <MyApp+0xd56>
 80189aa:	4b33      	ldr	r3, [pc, #204]	; (8018a78 <MyApp+0xe00>)
 80189ac:	22cb      	movs	r2, #203	; 0xcb
 80189ae:	5c9b      	ldrb	r3, [r3, r2]
 80189b0:	2b30      	cmp	r3, #48	; 0x30
 80189b2:	d10c      	bne.n	80189ce <MyApp+0xd56>
 80189b4:	4b30      	ldr	r3, [pc, #192]	; (8018a78 <MyApp+0xe00>)
 80189b6:	22cc      	movs	r2, #204	; 0xcc
 80189b8:	5c9b      	ldrb	r3, [r3, r2]
 80189ba:	2b30      	cmp	r3, #48	; 0x30
 80189bc:	d107      	bne.n	80189ce <MyApp+0xd56>
			{
				file.sPIRDelayON[2] = '1';
 80189be:	4b2e      	ldr	r3, [pc, #184]	; (8018a78 <MyApp+0xe00>)
 80189c0:	22cc      	movs	r2, #204	; 0xcc
 80189c2:	2131      	movs	r1, #49	; 0x31
 80189c4:	5499      	strb	r1, [r3, r2]
				file.sPIRDelayON[3] = '0';
 80189c6:	4b2c      	ldr	r3, [pc, #176]	; (8018a78 <MyApp+0xe00>)
 80189c8:	22cd      	movs	r2, #205	; 0xcd
 80189ca:	2130      	movs	r1, #48	; 0x30
 80189cc:	5499      	strb	r1, [r3, r2]
			}
			if (file.sPIRDelayOFF[0] == '0' && file.sPIRDelayOFF[1] == '0' && file.sPIRDelayOFF[2] == '0')
 80189ce:	4b2a      	ldr	r3, [pc, #168]	; (8018a78 <MyApp+0xe00>)
 80189d0:	22d4      	movs	r2, #212	; 0xd4
 80189d2:	5c9b      	ldrb	r3, [r3, r2]
 80189d4:	2b30      	cmp	r3, #48	; 0x30
 80189d6:	d111      	bne.n	80189fc <MyApp+0xd84>
 80189d8:	4b27      	ldr	r3, [pc, #156]	; (8018a78 <MyApp+0xe00>)
 80189da:	22d5      	movs	r2, #213	; 0xd5
 80189dc:	5c9b      	ldrb	r3, [r3, r2]
 80189de:	2b30      	cmp	r3, #48	; 0x30
 80189e0:	d10c      	bne.n	80189fc <MyApp+0xd84>
 80189e2:	4b25      	ldr	r3, [pc, #148]	; (8018a78 <MyApp+0xe00>)
 80189e4:	22d6      	movs	r2, #214	; 0xd6
 80189e6:	5c9b      	ldrb	r3, [r3, r2]
 80189e8:	2b30      	cmp	r3, #48	; 0x30
 80189ea:	d107      	bne.n	80189fc <MyApp+0xd84>
			{
				file.sPIRDelayOFF[2] = '1';
 80189ec:	4b22      	ldr	r3, [pc, #136]	; (8018a78 <MyApp+0xe00>)
 80189ee:	22d6      	movs	r2, #214	; 0xd6
 80189f0:	2131      	movs	r1, #49	; 0x31
 80189f2:	5499      	strb	r1, [r3, r2]
				file.sPIRDelayOFF[3] = '0';
 80189f4:	4b20      	ldr	r3, [pc, #128]	; (8018a78 <MyApp+0xe00>)
 80189f6:	22d7      	movs	r2, #215	; 0xd7
 80189f8:	2130      	movs	r1, #48	; 0x30
 80189fa:	5499      	strb	r1, [r3, r2]
			}
			memcpy(&pcb_config,&file, sizeof(file));
 80189fc:	4a20      	ldr	r2, [pc, #128]	; (8018a80 <MyApp+0xe08>)
 80189fe:	4b1e      	ldr	r3, [pc, #120]	; (8018a78 <MyApp+0xe00>)
 8018a00:	0010      	movs	r0, r2
 8018a02:	0019      	movs	r1, r3
 8018a04:	23b6      	movs	r3, #182	; 0xb6
 8018a06:	005b      	lsls	r3, r3, #1
 8018a08:	001a      	movs	r2, r3
 8018a0a:	f00a ffad 	bl	8023968 <memcpy>


			if (problem)
 8018a0e:	4b14      	ldr	r3, [pc, #80]	; (8018a60 <MyApp+0xde8>)
 8018a10:	781b      	ldrb	r3, [r3, #0]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d005      	beq.n	8018a22 <MyApp+0xdaa>
			{
				Send_String((char*)"BAD USB Config, verify file\n\r", sizeof("BAD USB Config, verify file\n\r"));
 8018a16:	4b1b      	ldr	r3, [pc, #108]	; (8018a84 <MyApp+0xe0c>)
 8018a18:	211e      	movs	r1, #30
 8018a1a:	0018      	movs	r0, r3
 8018a1c:	f7f5 f946 	bl	800dcac <Send_String>
			}
		}
		//HAL_Delay(1000);
	//}

}
 8018a20:	e015      	b.n	8018a4e <MyApp+0xdd6>
			else if (!checkIfBadConfig())
 8018a22:	f000 f835 	bl	8018a90 <checkIfBadConfig>
 8018a26:	0003      	movs	r3, r0
 8018a28:	001a      	movs	r2, r3
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	4053      	eors	r3, r2
 8018a2e:	b2db      	uxtb	r3, r3
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d005      	beq.n	8018a40 <MyApp+0xdc8>
				Send_String((char*)"BAD USB param, verify file\n\r", sizeof("BAD USB param, verify file\n\r"));
 8018a34:	4b14      	ldr	r3, [pc, #80]	; (8018a88 <MyApp+0xe10>)
 8018a36:	211d      	movs	r1, #29
 8018a38:	0018      	movs	r0, r3
 8018a3a:	f7f5 f937 	bl	800dcac <Send_String>
}
 8018a3e:	e006      	b.n	8018a4e <MyApp+0xdd6>
				Send_String((char*)"GOOD USB Config/n/r", sizeof("GOOD USB Config/n/r"));
 8018a40:	4b12      	ldr	r3, [pc, #72]	; (8018a8c <MyApp+0xe14>)
 8018a42:	2114      	movs	r1, #20
 8018a44:	0018      	movs	r0, r3
 8018a46:	f7f5 f931 	bl	800dcac <Send_String>
				WriteToEeprom();
 8018a4a:	f7f1 f8db 	bl	8009c04 <WriteToEeprom>
}
 8018a4e:	46c0      	nop			; (mov r8, r8)
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}
 8018a54:	20007abd 	.word	0x20007abd
 8018a58:	20007ac4 	.word	0x20007ac4
 8018a5c:	20007850 	.word	0x20007850
 8018a60:	200077f4 	.word	0x200077f4
 8018a64:	08030bec 	.word	0x08030bec
 8018a68:	20007abc 	.word	0x20007abc
 8018a6c:	08030b60 	.word	0x08030b60
 8018a70:	20007ac0 	.word	0x20007ac0
 8018a74:	20007ac8 	.word	0x20007ac8
 8018a78:	20007950 	.word	0x20007950
 8018a7c:	08030bf4 	.word	0x08030bf4
 8018a80:	20006db4 	.word	0x20006db4
 8018a84:	08030bfc 	.word	0x08030bfc
 8018a88:	08030c1c 	.word	0x08030c1c
 8018a8c:	08030c3c 	.word	0x08030c3c

08018a90 <checkIfBadConfig>:

bool checkIfBadConfig()
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b084      	sub	sp, #16
 8018a94:	af00      	add	r7, sp, #0
	if (pcb_config.sSetIRON[0] == '1')
 8018a96:	4b3f      	ldr	r3, [pc, #252]	; (8018b94 <checkIfBadConfig+0x104>)
 8018a98:	22de      	movs	r2, #222	; 0xde
 8018a9a:	5c9b      	ldrb	r3, [r3, r2]
 8018a9c:	2b31      	cmp	r3, #49	; 0x31
 8018a9e:	d116      	bne.n	8018ace <checkIfBadConfig+0x3e>
	{
		for (int i = 0; i< 5 ; i++)
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	60fb      	str	r3, [r7, #12]
 8018aa4:	e010      	b.n	8018ac8 <checkIfBadConfig+0x38>
		{
			if (pcb_config.sSetIR[i] == 0)
 8018aa6:	4a3b      	ldr	r2, [pc, #236]	; (8018b94 <checkIfBadConfig+0x104>)
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	18d3      	adds	r3, r2, r3
 8018aac:	3304      	adds	r3, #4
 8018aae:	781b      	ldrb	r3, [r3, #0]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d106      	bne.n	8018ac2 <checkIfBadConfig+0x32>
			{
				Send_String((char*)"BAD IR set, verify your IR cmd\n\r", sizeof("BAD IR set, verify your IR command\n\r"));
 8018ab4:	4b38      	ldr	r3, [pc, #224]	; (8018b98 <checkIfBadConfig+0x108>)
 8018ab6:	2125      	movs	r1, #37	; 0x25
 8018ab8:	0018      	movs	r0, r3
 8018aba:	f7f5 f8f7 	bl	800dcac <Send_String>
				return false;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	e064      	b.n	8018b8c <checkIfBadConfig+0xfc>
		for (int i = 0; i< 5 ; i++)
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	3301      	adds	r3, #1
 8018ac6:	60fb      	str	r3, [r7, #12]
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	2b04      	cmp	r3, #4
 8018acc:	ddeb      	ble.n	8018aa6 <checkIfBadConfig+0x16>
			}
		}
	}
	if (pcb_config.sSetIRON[0] == '1')
 8018ace:	4b31      	ldr	r3, [pc, #196]	; (8018b94 <checkIfBadConfig+0x104>)
 8018ad0:	22de      	movs	r2, #222	; 0xde
 8018ad2:	5c9b      	ldrb	r3, [r3, r2]
 8018ad4:	2b31      	cmp	r3, #49	; 0x31
 8018ad6:	d116      	bne.n	8018b06 <checkIfBadConfig+0x76>
	{
		for (int i = 0; i< 5 ; i++)
 8018ad8:	2300      	movs	r3, #0
 8018ada:	60bb      	str	r3, [r7, #8]
 8018adc:	e010      	b.n	8018b00 <checkIfBadConfig+0x70>
		{
			if (pcb_config.sSetIROFF[i] == 0)
 8018ade:	4a2d      	ldr	r2, [pc, #180]	; (8018b94 <checkIfBadConfig+0x104>)
 8018ae0:	68bb      	ldr	r3, [r7, #8]
 8018ae2:	18d3      	adds	r3, r2, r3
 8018ae4:	3313      	adds	r3, #19
 8018ae6:	781b      	ldrb	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d106      	bne.n	8018afa <checkIfBadConfig+0x6a>
			{
				Send_String((char*)"BAD IROFF set, verify your IR cmd\n\r", sizeof("BAD IROFF set, verify your IR command\n\r"));
 8018aec:	4b2b      	ldr	r3, [pc, #172]	; (8018b9c <checkIfBadConfig+0x10c>)
 8018aee:	2128      	movs	r1, #40	; 0x28
 8018af0:	0018      	movs	r0, r3
 8018af2:	f7f5 f8db 	bl	800dcac <Send_String>
				return false;
 8018af6:	2300      	movs	r3, #0
 8018af8:	e048      	b.n	8018b8c <checkIfBadConfig+0xfc>
		for (int i = 0; i< 5 ; i++)
 8018afa:	68bb      	ldr	r3, [r7, #8]
 8018afc:	3301      	adds	r3, #1
 8018afe:	60bb      	str	r3, [r7, #8]
 8018b00:	68bb      	ldr	r3, [r7, #8]
 8018b02:	2b04      	cmp	r3, #4
 8018b04:	ddeb      	ble.n	8018ade <checkIfBadConfig+0x4e>
			}
		}
	}
	if (pcb_config.sSetRS232ON[0] == '1')
 8018b06:	4b23      	ldr	r3, [pc, #140]	; (8018b94 <checkIfBadConfig+0x104>)
 8018b08:	22e8      	movs	r2, #232	; 0xe8
 8018b0a:	5c9b      	ldrb	r3, [r3, r2]
 8018b0c:	2b31      	cmp	r3, #49	; 0x31
 8018b0e:	d11b      	bne.n	8018b48 <checkIfBadConfig+0xb8>
	{
		for (int i = 0; i< pcb_config.rs232nbcharsON[0] ; i++)
 8018b10:	2300      	movs	r3, #0
 8018b12:	607b      	str	r3, [r7, #4]
 8018b14:	e011      	b.n	8018b3a <checkIfBadConfig+0xaa>
		{
			if (pcb_config.sSetR2S9C[i] == 0)
 8018b16:	4a1f      	ldr	r2, [pc, #124]	; (8018b94 <checkIfBadConfig+0x104>)
 8018b18:	2122      	movs	r1, #34	; 0x22
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	18d3      	adds	r3, r2, r3
 8018b1e:	185b      	adds	r3, r3, r1
 8018b20:	781b      	ldrb	r3, [r3, #0]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d106      	bne.n	8018b34 <checkIfBadConfig+0xa4>
			{
				Send_String((char*)"BAD RS232ON set, verify your IR cmd\n\r", sizeof("BAD RS232ON set, verify your RS232 command\n\r"));
 8018b26:	4b1e      	ldr	r3, [pc, #120]	; (8018ba0 <checkIfBadConfig+0x110>)
 8018b28:	212d      	movs	r1, #45	; 0x2d
 8018b2a:	0018      	movs	r0, r3
 8018b2c:	f7f5 f8be 	bl	800dcac <Send_String>
				return false;
 8018b30:	2300      	movs	r3, #0
 8018b32:	e02b      	b.n	8018b8c <checkIfBadConfig+0xfc>
		for (int i = 0; i< pcb_config.rs232nbcharsON[0] ; i++)
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	3301      	adds	r3, #1
 8018b38:	607b      	str	r3, [r7, #4]
 8018b3a:	4b16      	ldr	r3, [pc, #88]	; (8018b94 <checkIfBadConfig+0x104>)
 8018b3c:	22f4      	movs	r2, #244	; 0xf4
 8018b3e:	5c9b      	ldrb	r3, [r3, r2]
 8018b40:	001a      	movs	r2, r3
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	4293      	cmp	r3, r2
 8018b46:	dbe6      	blt.n	8018b16 <checkIfBadConfig+0x86>
			}
		}
	}
	if (pcb_config.sSetRS232ON[0] == '1')
 8018b48:	4b12      	ldr	r3, [pc, #72]	; (8018b94 <checkIfBadConfig+0x104>)
 8018b4a:	22e8      	movs	r2, #232	; 0xe8
 8018b4c:	5c9b      	ldrb	r3, [r3, r2]
 8018b4e:	2b31      	cmp	r3, #49	; 0x31
 8018b50:	d11b      	bne.n	8018b8a <checkIfBadConfig+0xfa>
	{
		for (int i = 0; i< pcb_config.rs232nbcharsOFF[0] ; i++)
 8018b52:	2300      	movs	r3, #0
 8018b54:	603b      	str	r3, [r7, #0]
 8018b56:	e011      	b.n	8018b7c <checkIfBadConfig+0xec>
		{
			if (pcb_config.sSetR2S9COFF[i] == 0)
 8018b58:	4a0e      	ldr	r2, [pc, #56]	; (8018b94 <checkIfBadConfig+0x104>)
 8018b5a:	2162      	movs	r1, #98	; 0x62
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	18d3      	adds	r3, r2, r3
 8018b60:	185b      	adds	r3, r3, r1
 8018b62:	781b      	ldrb	r3, [r3, #0]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d106      	bne.n	8018b76 <checkIfBadConfig+0xe6>
			{
				Send_String((char*)"BAD RS232OFF set, verify your IR cmd\n\r", sizeof("BAD RS232OFF set, verify your RS232 command\n\r"));
 8018b68:	4b0e      	ldr	r3, [pc, #56]	; (8018ba4 <checkIfBadConfig+0x114>)
 8018b6a:	212e      	movs	r1, #46	; 0x2e
 8018b6c:	0018      	movs	r0, r3
 8018b6e:	f7f5 f89d 	bl	800dcac <Send_String>
				return false;
 8018b72:	2300      	movs	r3, #0
 8018b74:	e00a      	b.n	8018b8c <checkIfBadConfig+0xfc>
		for (int i = 0; i< pcb_config.rs232nbcharsOFF[0] ; i++)
 8018b76:	683b      	ldr	r3, [r7, #0]
 8018b78:	3301      	adds	r3, #1
 8018b7a:	603b      	str	r3, [r7, #0]
 8018b7c:	4b05      	ldr	r3, [pc, #20]	; (8018b94 <checkIfBadConfig+0x104>)
 8018b7e:	22f6      	movs	r2, #246	; 0xf6
 8018b80:	5c9b      	ldrb	r3, [r3, r2]
 8018b82:	001a      	movs	r2, r3
 8018b84:	683b      	ldr	r3, [r7, #0]
 8018b86:	4293      	cmp	r3, r2
 8018b88:	dbe6      	blt.n	8018b58 <checkIfBadConfig+0xc8>
//	data[1] = '\r';
//
//	HAL_UART_Transmit(&huart1, (uint8_t *)pcb_config.sSetIR[0], 8, 1000); //Send dataFrame through UART
//	HAL_UART_Transmit(&huart1, (uint8_t *)data[0], 2, 1000); //Send dataFrame through UART

	return true;
 8018b8a:	2301      	movs	r3, #1

}
 8018b8c:	0018      	movs	r0, r3
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	b004      	add	sp, #16
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	20006db4 	.word	0x20006db4
 8018b98:	08030c50 	.word	0x08030c50
 8018b9c:	08030c74 	.word	0x08030c74
 8018ba0:	08030c98 	.word	0x08030c98
 8018ba4:	08030cc0 	.word	0x08030cc0

08018ba8 <to_hex>:
void to_hex(char buf[], int i)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
 8018bb0:	6039      	str	r1, [r7, #0]
  if (*buf == '\0')
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	781b      	ldrb	r3, [r3, #0]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d016      	beq.n	8018be8 <to_hex+0x40>
    return;

  to_hex(buf + 2, i+1);
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	1c9a      	adds	r2, r3, #2
 8018bbe:	683b      	ldr	r3, [r7, #0]
 8018bc0:	3301      	adds	r3, #1
 8018bc2:	0019      	movs	r1, r3
 8018bc4:	0010      	movs	r0, r2
 8018bc6:	f7ff ffef 	bl	8018ba8 <to_hex>
  buf[1] = strtol(buf, NULL, 16);
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2210      	movs	r2, #16
 8018bce:	2100      	movs	r1, #0
 8018bd0:	0018      	movs	r0, r3
 8018bd2:	f009 fd61 	bl	8022698 <strtol>
 8018bd6:	0002      	movs	r2, r0
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	3301      	adds	r3, #1
 8018bdc:	b2d2      	uxtb	r2, r2
 8018bde:	701a      	strb	r2, [r3, #0]
  *buf = '\0';
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2200      	movs	r2, #0
 8018be4:	701a      	strb	r2, [r3, #0]
 8018be6:	e000      	b.n	8018bea <to_hex+0x42>
    return;
 8018be8:	46c0      	nop			; (mov r8, r8)
}
 8018bea:	46bd      	mov	sp, r7
 8018bec:	b002      	add	sp, #8
 8018bee:	bd80      	pop	{r7, pc}

08018bf0 <_Z6searchPcS_>:

char search(char str[],char* s){
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b084      	sub	sp, #16
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
 8018bf8:	6039      	str	r1, [r7, #0]
	char *pch;
	int n;
	pch = strstr (str,s);
 8018bfa:	683a      	ldr	r2, [r7, #0]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	0011      	movs	r1, r2
 8018c00:	0018      	movs	r0, r3
 8018c02:	f00a f879 	bl	8022cf8 <strstr>
 8018c06:	0003      	movs	r3, r0
 8018c08:	60fb      	str	r3, [r7, #12]
	if (pch != NULL){
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d00f      	beq.n	8018c30 <_Z6searchPcS_+0x40>
		n = pch - str;
 8018c10:	68fa      	ldr	r2, [r7, #12]
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	1ad3      	subs	r3, r2, r3
 8018c16:	60bb      	str	r3, [r7, #8]
		n += int((strlen(s)));
 8018c18:	683b      	ldr	r3, [r7, #0]
 8018c1a:	0018      	movs	r0, r3
 8018c1c:	f7e9 fa7a 	bl	8002114 <strlen>
 8018c20:	0003      	movs	r3, r0
 8018c22:	001a      	movs	r2, r3
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	189b      	adds	r3, r3, r2
 8018c28:	60bb      	str	r3, [r7, #8]
		return n;
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	e000      	b.n	8018c32 <_Z6searchPcS_+0x42>
	}
	return 0;
 8018c30:	2300      	movs	r3, #0
}
 8018c32:	0018      	movs	r0, r3
 8018c34:	46bd      	mov	sp, r7
 8018c36:	b004      	add	sp, #16
 8018c38:	bd80      	pop	{r7, pc}
	...

08018c3c <init_the_thing>:
void init_the_thing(void)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	af00      	add	r7, sp, #0
	flashDrive.init();
 8018c40:	4b03      	ldr	r3, [pc, #12]	; (8018c50 <init_the_thing+0x14>)
 8018c42:	0018      	movs	r0, r3
 8018c44:	f7fd ffe2 	bl	8016c0c <_ZN8Ch376msc4initEv>
}
 8018c48:	46c0      	nop			; (mov r8, r8)
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	46c0      	nop			; (mov r8, r8)
 8018c50:	200077f8 	.word	0x200077f8

08018c54 <_Z41__static_initialization_and_destruction_0ii>:
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b082      	sub	sp, #8
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	2b01      	cmp	r3, #1
 8018c62:	d10a      	bne.n	8018c7a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	4a0c      	ldr	r2, [pc, #48]	; (8018c98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	d106      	bne.n	8018c7a <_Z41__static_initialization_and_destruction_0ii+0x26>
Ch376msc flashDrive(9600); // chipSelect, busy pins (use this if no other device are attached to SPI port(MISO pin used as interrupt))
 8018c6c:	2396      	movs	r3, #150	; 0x96
 8018c6e:	019a      	lsls	r2, r3, #6
 8018c70:	4b0a      	ldr	r3, [pc, #40]	; (8018c9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8018c72:	0011      	movs	r1, r2
 8018c74:	0018      	movs	r0, r3
 8018c76:	f7fd ff79 	bl	8016b6c <_ZN8Ch376mscC1Em>
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d107      	bne.n	8018c90 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8018c80:	683b      	ldr	r3, [r7, #0]
 8018c82:	4a05      	ldr	r2, [pc, #20]	; (8018c98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d103      	bne.n	8018c90 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8018c88:	4b04      	ldr	r3, [pc, #16]	; (8018c9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8018c8a:	0018      	movs	r0, r3
 8018c8c:	f7fd ff9e 	bl	8016bcc <_ZN8Ch376mscD1Ev>
}
 8018c90:	46c0      	nop			; (mov r8, r8)
 8018c92:	46bd      	mov	sp, r7
 8018c94:	b002      	add	sp, #8
 8018c96:	bd80      	pop	{r7, pc}
 8018c98:	0000ffff 	.word	0x0000ffff
 8018c9c:	200077f8 	.word	0x200077f8

08018ca0 <_GLOBAL__sub_I_bufferLog>:
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	af00      	add	r7, sp, #0
 8018ca4:	4b03      	ldr	r3, [pc, #12]	; (8018cb4 <_GLOBAL__sub_I_bufferLog+0x14>)
 8018ca6:	0019      	movs	r1, r3
 8018ca8:	2001      	movs	r0, #1
 8018caa:	f7ff ffd3 	bl	8018c54 <_Z41__static_initialization_and_destruction_0ii>
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}
 8018cb2:	46c0      	nop			; (mov r8, r8)
 8018cb4:	0000ffff 	.word	0x0000ffff

08018cb8 <_GLOBAL__sub_D_bufferLog>:
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	4b03      	ldr	r3, [pc, #12]	; (8018ccc <_GLOBAL__sub_D_bufferLog+0x14>)
 8018cbe:	0019      	movs	r1, r3
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	f7ff ffc7 	bl	8018c54 <_Z41__static_initialization_and_destruction_0ii>
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}
 8018cca:	46c0      	nop			; (mov r8, r8)
 8018ccc:	0000ffff 	.word	0x0000ffff

08018cd0 <_ZN8Ch376msc11setFileNameEPKc>:
char* Ch376msc::getFileName(){
	strncpy(_filename,_fileData.name,11);//copy the filename string to internal filename variable
	_filename[11] = '\0';
	return _filename;
}
void Ch376msc::setFileName(const char* filename){ //programFile.TXT
 8018cd0:	b590      	push	{r4, r7, lr}
 8018cd2:	b083      	sub	sp, #12
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
 8018cd8:	6039      	str	r1, [r7, #0]
	strncpy(_filename,filename,strlen(filename));//copy the filename string to internal filename variable
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	3314      	adds	r3, #20
 8018cde:	001c      	movs	r4, r3
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	0018      	movs	r0, r3
 8018ce4:	f7e9 fa16 	bl	8002114 <strlen>
 8018ce8:	0002      	movs	r2, r0
 8018cea:	683b      	ldr	r3, [r7, #0]
 8018cec:	0019      	movs	r1, r3
 8018cee:	0020      	movs	r0, r4
 8018cf0:	f009 ff86 	bl	8022c00 <strncpy>
	sendFilename(); // send to the CH376
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	0018      	movs	r0, r3
 8018cf8:	f7fe fe00 	bl	80178fc <_ZN8Ch376msc12sendFilenameEv>
//		_filename[i] = NULL;
//		i++;
//	}
//	strncpy(_filename,".TXT",4);//copy the filename string to internal filename variable
//	sendFilename(); // send to the CH376
}
 8018cfc:	46c0      	nop			; (mov r8, r8)
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	b003      	add	sp, #12
 8018d02:	bd90      	pop	{r4, r7, pc}

08018d04 <_Z17delayMicrosecondsi>:
#include "stdio.h"
//#include "string.h"


void delayMicroseconds(int us)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
	HAL_Delay(us);
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	0018      	movs	r0, r3
 8018d10:	f7f6 fb4a 	bl	800f3a8 <HAL_Delay>
}
 8018d14:	46c0      	nop			; (mov r8, r8)
 8018d16:	46bd      	mov	sp, r7
 8018d18:	b002      	add	sp, #8
 8018d1a:	bd80      	pop	{r7, pc}

08018d1c <_ZN8Ch376msc14readSerDataUSBEv>:
{
	return HAL_GetTick();
}


uint8_t Ch376msc::readSerDataUSB(){
 8018d1c:	b590      	push	{r4, r7, lr}
 8018d1e:	b087      	sub	sp, #28
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
			if ((millis()- oldMillis) > TIMEOUT){
				return 0xFF; // Timeout valasz
			}//end if
		}//end while*/
		//char data[1];
		uint8_t data[12] = {0};
 8018d24:	240c      	movs	r4, #12
 8018d26:	193b      	adds	r3, r7, r4
 8018d28:	2200      	movs	r2, #0
 8018d2a:	601a      	str	r2, [r3, #0]
 8018d2c:	3304      	adds	r3, #4
 8018d2e:	2208      	movs	r2, #8
 8018d30:	2100      	movs	r1, #0
 8018d32:	0018      	movs	r0, r3
 8018d34:	f009 ff30 	bl	8022b98 <memset>
		HAL_UART_Receive(&huart1, data,1, 1000);
 8018d38:	23fa      	movs	r3, #250	; 0xfa
 8018d3a:	009b      	lsls	r3, r3, #2
 8018d3c:	1939      	adds	r1, r7, r4
 8018d3e:	4805      	ldr	r0, [pc, #20]	; (8018d54 <_ZN8Ch376msc14readSerDataUSBEv+0x38>)
 8018d40:	2201      	movs	r2, #1
 8018d42:	f7fc fba3 	bl	801548c <HAL_UART_Receive>
		//data[0] = Receive2;
	return  data[0];//_comPort->read();
 8018d46:	193b      	adds	r3, r7, r4
 8018d48:	781b      	ldrb	r3, [r3, #0]
}
 8018d4a:	0018      	movs	r0, r3
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	b007      	add	sp, #28
 8018d50:	bd90      	pop	{r4, r7, pc}
 8018d52:	46c0      	nop			; (mov r8, r8)
 8018d54:	20006a90 	.word	0x20006a90

08018d58 <_ZN8Ch376msc11spiReadDataEv>:
//		HAL_SPI_Transmit(&hspi3,&data,1,100);
//		//	SPI.transfer(data);
		}
	}//end SPI*/

uint8_t Ch376msc::spiReadData(){
 8018d58:	b590      	push	{r4, r7, lr}
 8018d5a:	b085      	sub	sp, #20
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]

	uint8_t DataIn = 0;
 8018d60:	240f      	movs	r4, #15
 8018d62:	193b      	adds	r3, r7, r4
 8018d64:	2200      	movs	r2, #0
 8018d66:	701a      	strb	r2, [r3, #0]
	delayMicroseconds(3);//datasheet TSC min 1.5uSec
 8018d68:	2003      	movs	r0, #3
 8018d6a:	f7ff ffcb 	bl	8018d04 <_Z17delayMicrosecondsi>
	spiReady();
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	0018      	movs	r0, r3
 8018d72:	f000 f846 	bl	8018e02 <_ZN8Ch376msc8spiReadyEv>
	//HAL_SPI_TransmitReceive(&hspi3,&DataOut,&DataIn,1,100);
	//return SPI.transfer(0x00);
	return DataIn;
 8018d76:	193b      	adds	r3, r7, r4
 8018d78:	781b      	ldrb	r3, [r3, #0]
}
 8018d7a:	0018      	movs	r0, r3
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	b005      	add	sp, #20
 8018d80:	bd90      	pop	{r4, r7, pc}

08018d82 <_ZN8Ch376msc5printEPc>:
void Ch376msc::print(char str[]){
 8018d82:	b590      	push	{r4, r7, lr}
 8018d84:	b085      	sub	sp, #20
 8018d86:	af00      	add	r7, sp, #0
 8018d88:	6078      	str	r0, [r7, #4]
 8018d8a:	6039      	str	r1, [r7, #0]
	uint8_t stringCounter = 0;
 8018d8c:	230f      	movs	r3, #15
 8018d8e:	18fb      	adds	r3, r7, r3
 8018d90:	2200      	movs	r2, #0
 8018d92:	701a      	strb	r2, [r3, #0]
	if(_interface == UART){
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2228      	movs	r2, #40	; 0x28
 8018d98:	5c9b      	ldrb	r3, [r3, r2]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d125      	bne.n	8018dea <_ZN8Ch376msc5printEPc+0x68>
		while(str[stringCounter]){ ///while not NULL
 8018d9e:	e00d      	b.n	8018dbc <_ZN8Ch376msc5printEPc+0x3a>
			Send(str[stringCounter]);
 8018da0:	240f      	movs	r4, #15
 8018da2:	193b      	adds	r3, r7, r4
 8018da4:	781b      	ldrb	r3, [r3, #0]
 8018da6:	683a      	ldr	r2, [r7, #0]
 8018da8:	18d3      	adds	r3, r2, r3
 8018daa:	781b      	ldrb	r3, [r3, #0]
 8018dac:	0018      	movs	r0, r3
 8018dae:	f7f3 fc17 	bl	800c5e0 <Send>
			stringCounter++;
 8018db2:	193b      	adds	r3, r7, r4
 8018db4:	781a      	ldrb	r2, [r3, #0]
 8018db6:	193b      	adds	r3, r7, r4
 8018db8:	3201      	adds	r2, #1
 8018dba:	701a      	strb	r2, [r3, #0]
		while(str[stringCounter]){ ///while not NULL
 8018dbc:	230f      	movs	r3, #15
 8018dbe:	18fb      	adds	r3, r7, r3
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	683a      	ldr	r2, [r7, #0]
 8018dc4:	18d3      	adds	r3, r2, r3
 8018dc6:	781b      	ldrb	r3, [r3, #0]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d1e9      	bne.n	8018da0 <_ZN8Ch376msc5printEPc+0x1e>
		while(str[stringCounter]){ ///while not NULL
			Send(str[stringCounter]);
			stringCounter++;
		}
	}
}
 8018dcc:	e015      	b.n	8018dfa <_ZN8Ch376msc5printEPc+0x78>
			Send(str[stringCounter]);
 8018dce:	240f      	movs	r4, #15
 8018dd0:	193b      	adds	r3, r7, r4
 8018dd2:	781b      	ldrb	r3, [r3, #0]
 8018dd4:	683a      	ldr	r2, [r7, #0]
 8018dd6:	18d3      	adds	r3, r2, r3
 8018dd8:	781b      	ldrb	r3, [r3, #0]
 8018dda:	0018      	movs	r0, r3
 8018ddc:	f7f3 fc00 	bl	800c5e0 <Send>
			stringCounter++;
 8018de0:	193b      	adds	r3, r7, r4
 8018de2:	781a      	ldrb	r2, [r3, #0]
 8018de4:	193b      	adds	r3, r7, r4
 8018de6:	3201      	adds	r2, #1
 8018de8:	701a      	strb	r2, [r3, #0]
		while(str[stringCounter]){ ///while not NULL
 8018dea:	230f      	movs	r3, #15
 8018dec:	18fb      	adds	r3, r7, r3
 8018dee:	781b      	ldrb	r3, [r3, #0]
 8018df0:	683a      	ldr	r2, [r7, #0]
 8018df2:	18d3      	adds	r3, r2, r3
 8018df4:	781b      	ldrb	r3, [r3, #0]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d1e9      	bne.n	8018dce <_ZN8Ch376msc5printEPc+0x4c>
}
 8018dfa:	46c0      	nop			; (mov r8, r8)
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	b005      	add	sp, #20
 8018e00:	bd90      	pop	{r4, r7, pc}

08018e02 <_ZN8Ch376msc8spiReadyEv>:

void Ch376msc::spiReady(){
 8018e02:	b580      	push	{r7, lr}
 8018e04:	b082      	sub	sp, #8
 8018e06:	af00      	add	r7, sp, #0
 8018e08:	6078      	str	r0, [r7, #4]
	//uint32_t msTimeout;
	delayMicroseconds(3);
 8018e0a:	2003      	movs	r0, #3
 8018e0c:	f7ff ff7a 	bl	8018d04 <_Z17delayMicrosecondsi>
	{
//		if(millis()-msTimeout > TIMEOUT){
//			break;
//		}//end if
	}//end while
}
 8018e10:	46c0      	nop			; (mov r8, r8)
 8018e12:	46bd      	mov	sp, r7
 8018e14:	b002      	add	sp, #8
 8018e16:	bd80      	pop	{r7, pc}

08018e18 <_ZN8Ch376msc16spiWaitInterruptEv>:

uint8_t Ch376msc::spiWaitInterrupt(){
 8018e18:	b590      	push	{r4, r7, lr}
 8018e1a:	b085      	sub	sp, #20
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
	uint8_t answ = 0xFF;
 8018e20:	210f      	movs	r1, #15
 8018e22:	187b      	adds	r3, r7, r1
 8018e24:	22ff      	movs	r2, #255	; 0xff
 8018e26:	701a      	strb	r2, [r3, #0]
//		if ((millis()- oldMillis) > TIMEOUT){
//			answ = 0;//timeout occurred
//			break;
//		}//end if
	}//end while
	if(answ){
 8018e28:	000a      	movs	r2, r1
 8018e2a:	18bb      	adds	r3, r7, r2
 8018e2c:	781b      	ldrb	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d006      	beq.n	8018e40 <_ZN8Ch376msc16spiWaitInterruptEv+0x28>
		answ = getInterrupt();
 8018e32:	18bc      	adds	r4, r7, r2
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	0018      	movs	r0, r3
 8018e38:	f000 f809 	bl	8018e4e <_ZN8Ch376msc12getInterruptEv>
 8018e3c:	0003      	movs	r3, r0
 8018e3e:	7023      	strb	r3, [r4, #0]
	}
	return answ;
 8018e40:	230f      	movs	r3, #15
 8018e42:	18fb      	adds	r3, r7, r3
 8018e44:	781b      	ldrb	r3, [r3, #0]
}
 8018e46:	0018      	movs	r0, r3
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	b005      	add	sp, #20
 8018e4c:	bd90      	pop	{r4, r7, pc}

08018e4e <_ZN8Ch376msc12getInterruptEv>:

uint8_t Ch376msc::getInterrupt(){
 8018e4e:	b5b0      	push	{r4, r5, r7, lr}
 8018e50:	b084      	sub	sp, #16
 8018e52:	af00      	add	r7, sp, #0
 8018e54:	6078      	str	r0, [r7, #4]
	uint8_t _tmpReturn = 0;
 8018e56:	250f      	movs	r5, #15
 8018e58:	197b      	adds	r3, r7, r5
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	701a      	strb	r2, [r3, #0]
	//spiWaitInterrupt();
		spiBeginTransfer();
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	0018      	movs	r0, r3
 8018e62:	f000 f816 	bl	8018e92 <_ZN8Ch376msc16spiBeginTransferEv>
		sendCommand(CMD_GET_STATUS);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	2122      	movs	r1, #34	; 0x22
 8018e6a:	0018      	movs	r0, r3
 8018e6c:	f7fd fff9 	bl	8016e62 <_ZN8Ch376msc11sendCommandEh>
		_tmpReturn = spiReadData();
 8018e70:	197c      	adds	r4, r7, r5
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	0018      	movs	r0, r3
 8018e76:	f7ff ff6f 	bl	8018d58 <_ZN8Ch376msc11spiReadDataEv>
 8018e7a:	0003      	movs	r3, r0
 8018e7c:	7023      	strb	r3, [r4, #0]
		spiEndTransfer();
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	0018      	movs	r0, r3
 8018e82:	f000 f812 	bl	8018eaa <_ZN8Ch376msc14spiEndTransferEv>
	return _tmpReturn;
 8018e86:	197b      	adds	r3, r7, r5
 8018e88:	781b      	ldrb	r3, [r3, #0]
}
 8018e8a:	0018      	movs	r0, r3
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	b004      	add	sp, #16
 8018e90:	bdb0      	pop	{r4, r5, r7, pc}

08018e92 <_ZN8Ch376msc16spiBeginTransferEv>:

void Ch376msc::spiBeginTransfer(){
 8018e92:	b580      	push	{r7, lr}
 8018e94:	b082      	sub	sp, #8
 8018e96:	af00      	add	r7, sp, #0
 8018e98:	6078      	str	r0, [r7, #4]
	spiReady();
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	0018      	movs	r0, r3
 8018e9e:	f7ff ffb0 	bl	8018e02 <_ZN8Ch376msc8spiReadyEv>
//	SPI.beginTransaction(SPISettings(SPICLKRATE, MSBFIRST, SPI_MODE0));
//	digitalWrite(_spiChipSelect, LOW);
	
	//HAL_GPIO_WritePin(CH376S_CS_GPIO_Port,CH376S_CS_Pin,GPIO_PIN_RESET);
	
}
 8018ea2:	46c0      	nop			; (mov r8, r8)
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	b002      	add	sp, #8
 8018ea8:	bd80      	pop	{r7, pc}

08018eaa <_ZN8Ch376msc14spiEndTransferEv>:

void Ch376msc::spiEndTransfer(){
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b082      	sub	sp, #8
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
//	digitalWrite(_spiChipSelect, HIGH);
//	SPI.endTransaction();
	
	//HAL_GPIO_WritePin(CH376S_CS_GPIO_Port,CH376S_CS_Pin,GPIO_PIN_SET);
}
 8018eb2:	46c0      	nop			; (mov r8, r8)
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	b002      	add	sp, #8
 8018eb8:	bd80      	pop	{r7, pc}
	...

08018ebc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8018ebc:	b5b0      	push	{r4, r5, r7, lr}
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8018ec4:	4b25      	ldr	r3, [pc, #148]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018ec6:	68db      	ldr	r3, [r3, #12]
 8018ec8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018eca:	4b24      	ldr	r3, [pc, #144]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018ecc:	695b      	ldr	r3, [r3, #20]
 8018ece:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018ed0:	4b22      	ldr	r3, [pc, #136]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d003      	beq.n	8018ee0 <WIZCHIP_READ+0x24>
 8018ed8:	4b20      	ldr	r3, [pc, #128]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d114      	bne.n	8018f0a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018ee0:	4b1e      	ldr	r3, [pc, #120]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018ee2:	6a1b      	ldr	r3, [r3, #32]
 8018ee4:	687a      	ldr	r2, [r7, #4]
 8018ee6:	0c12      	lsrs	r2, r2, #16
 8018ee8:	b2d2      	uxtb	r2, r2
 8018eea:	0010      	movs	r0, r2
 8018eec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018eee:	4b1b      	ldr	r3, [pc, #108]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018ef0:	6a1b      	ldr	r3, [r3, #32]
 8018ef2:	687a      	ldr	r2, [r7, #4]
 8018ef4:	0a12      	lsrs	r2, r2, #8
 8018ef6:	b2d2      	uxtb	r2, r2
 8018ef8:	0010      	movs	r0, r2
 8018efa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018efc:	4b17      	ldr	r3, [pc, #92]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018efe:	6a1b      	ldr	r3, [r3, #32]
 8018f00:	687a      	ldr	r2, [r7, #4]
 8018f02:	b2d2      	uxtb	r2, r2
 8018f04:	0010      	movs	r0, r2
 8018f06:	4798      	blx	r3
 8018f08:	e014      	b.n	8018f34 <WIZCHIP_READ+0x78>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	0c1b      	lsrs	r3, r3, #16
 8018f0e:	b2da      	uxtb	r2, r3
 8018f10:	210c      	movs	r1, #12
 8018f12:	187b      	adds	r3, r7, r1
 8018f14:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	0a1b      	lsrs	r3, r3, #8
 8018f1a:	b2da      	uxtb	r2, r3
 8018f1c:	187b      	adds	r3, r7, r1
 8018f1e:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	b2da      	uxtb	r2, r3
 8018f24:	187b      	adds	r3, r7, r1
 8018f26:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018f28:	4b0c      	ldr	r3, [pc, #48]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f2c:	187a      	adds	r2, r7, r1
 8018f2e:	2103      	movs	r1, #3
 8018f30:	0010      	movs	r0, r2
 8018f32:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8018f34:	4b09      	ldr	r3, [pc, #36]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018f36:	69db      	ldr	r3, [r3, #28]
 8018f38:	250f      	movs	r5, #15
 8018f3a:	197c      	adds	r4, r7, r5
 8018f3c:	4798      	blx	r3
 8018f3e:	0003      	movs	r3, r0
 8018f40:	7023      	strb	r3, [r4, #0]

   WIZCHIP.CS._deselect();
 8018f42:	4b06      	ldr	r3, [pc, #24]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018f44:	699b      	ldr	r3, [r3, #24]
 8018f46:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018f48:	4b04      	ldr	r3, [pc, #16]	; (8018f5c <WIZCHIP_READ+0xa0>)
 8018f4a:	691b      	ldr	r3, [r3, #16]
 8018f4c:	4798      	blx	r3
   return ret;
 8018f4e:	197b      	adds	r3, r7, r5
 8018f50:	781b      	ldrb	r3, [r3, #0]
}
 8018f52:	0018      	movs	r0, r3
 8018f54:	46bd      	mov	sp, r7
 8018f56:	b004      	add	sp, #16
 8018f58:	bdb0      	pop	{r4, r5, r7, pc}
 8018f5a:	46c0      	nop			; (mov r8, r8)
 8018f5c:	20005084 	.word	0x20005084

08018f60 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	000a      	movs	r2, r1
 8018f6a:	1cfb      	adds	r3, r7, #3
 8018f6c:	701a      	strb	r2, [r3, #0]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8018f6e:	4b26      	ldr	r3, [pc, #152]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018f70:	68db      	ldr	r3, [r3, #12]
 8018f72:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018f74:	4b24      	ldr	r3, [pc, #144]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018f76:	695b      	ldr	r3, [r3, #20]
 8018f78:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2204      	movs	r2, #4
 8018f7e:	4313      	orrs	r3, r2
 8018f80:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018f82:	4b21      	ldr	r3, [pc, #132]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d11a      	bne.n	8018fc0 <WIZCHIP_WRITE+0x60>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018f8a:	4b1f      	ldr	r3, [pc, #124]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018f8c:	6a1b      	ldr	r3, [r3, #32]
 8018f8e:	687a      	ldr	r2, [r7, #4]
 8018f90:	0c12      	lsrs	r2, r2, #16
 8018f92:	b2d2      	uxtb	r2, r2
 8018f94:	0010      	movs	r0, r2
 8018f96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018f98:	4b1b      	ldr	r3, [pc, #108]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018f9a:	6a1b      	ldr	r3, [r3, #32]
 8018f9c:	687a      	ldr	r2, [r7, #4]
 8018f9e:	0a12      	lsrs	r2, r2, #8
 8018fa0:	b2d2      	uxtb	r2, r2
 8018fa2:	0010      	movs	r0, r2
 8018fa4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018fa6:	4b18      	ldr	r3, [pc, #96]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018fa8:	6a1b      	ldr	r3, [r3, #32]
 8018faa:	687a      	ldr	r2, [r7, #4]
 8018fac:	b2d2      	uxtb	r2, r2
 8018fae:	0010      	movs	r0, r2
 8018fb0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8018fb2:	4b15      	ldr	r3, [pc, #84]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018fb4:	6a1b      	ldr	r3, [r3, #32]
 8018fb6:	1cfa      	adds	r2, r7, #3
 8018fb8:	7812      	ldrb	r2, [r2, #0]
 8018fba:	0010      	movs	r0, r2
 8018fbc:	4798      	blx	r3
 8018fbe:	e018      	b.n	8018ff2 <WIZCHIP_WRITE+0x92>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	0c1b      	lsrs	r3, r3, #16
 8018fc4:	b2da      	uxtb	r2, r3
 8018fc6:	210c      	movs	r1, #12
 8018fc8:	187b      	adds	r3, r7, r1
 8018fca:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	0a1b      	lsrs	r3, r3, #8
 8018fd0:	b2da      	uxtb	r2, r3
 8018fd2:	187b      	adds	r3, r7, r1
 8018fd4:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	b2da      	uxtb	r2, r3
 8018fda:	187b      	adds	r3, r7, r1
 8018fdc:	709a      	strb	r2, [r3, #2]
		spi_data[3] = wb;
 8018fde:	187b      	adds	r3, r7, r1
 8018fe0:	1cfa      	adds	r2, r7, #3
 8018fe2:	7812      	ldrb	r2, [r2, #0]
 8018fe4:	70da      	strb	r2, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8018fe6:	4b08      	ldr	r3, [pc, #32]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fea:	187a      	adds	r2, r7, r1
 8018fec:	2104      	movs	r1, #4
 8018fee:	0010      	movs	r0, r2
 8018ff0:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018ff2:	4b05      	ldr	r3, [pc, #20]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018ff4:	699b      	ldr	r3, [r3, #24]
 8018ff6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018ff8:	4b03      	ldr	r3, [pc, #12]	; (8019008 <WIZCHIP_WRITE+0xa8>)
 8018ffa:	691b      	ldr	r3, [r3, #16]
 8018ffc:	4798      	blx	r3
}
 8018ffe:	46c0      	nop			; (mov r8, r8)
 8019000:	46bd      	mov	sp, r7
 8019002:	b004      	add	sp, #16
 8019004:	bd80      	pop	{r7, pc}
 8019006:	46c0      	nop			; (mov r8, r8)
 8019008:	20005084 	.word	0x20005084

0801900c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801900c:	b5b0      	push	{r4, r5, r7, lr}
 801900e:	b086      	sub	sp, #24
 8019010:	af00      	add	r7, sp, #0
 8019012:	60f8      	str	r0, [r7, #12]
 8019014:	60b9      	str	r1, [r7, #8]
 8019016:	1dbb      	adds	r3, r7, #6
 8019018:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801901a:	4b32      	ldr	r3, [pc, #200]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 801901c:	68db      	ldr	r3, [r3, #12]
 801901e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8019020:	4b30      	ldr	r3, [pc, #192]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 8019022:	695b      	ldr	r3, [r3, #20]
 8019024:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8019026:	4b2f      	ldr	r3, [pc, #188]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 8019028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801902a:	2b00      	cmp	r3, #0
 801902c:	d003      	beq.n	8019036 <WIZCHIP_READ_BUF+0x2a>
 801902e:	4b2d      	ldr	r3, [pc, #180]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 8019030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019032:	2b00      	cmp	r3, #0
 8019034:	d12f      	bne.n	8019096 <WIZCHIP_READ_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8019036:	4b2b      	ldr	r3, [pc, #172]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 8019038:	6a1b      	ldr	r3, [r3, #32]
 801903a:	68fa      	ldr	r2, [r7, #12]
 801903c:	0c12      	lsrs	r2, r2, #16
 801903e:	b2d2      	uxtb	r2, r2
 8019040:	0010      	movs	r0, r2
 8019042:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8019044:	4b27      	ldr	r3, [pc, #156]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 8019046:	6a1b      	ldr	r3, [r3, #32]
 8019048:	68fa      	ldr	r2, [r7, #12]
 801904a:	0a12      	lsrs	r2, r2, #8
 801904c:	b2d2      	uxtb	r2, r2
 801904e:	0010      	movs	r0, r2
 8019050:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8019052:	4b24      	ldr	r3, [pc, #144]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 8019054:	6a1b      	ldr	r3, [r3, #32]
 8019056:	68fa      	ldr	r2, [r7, #12]
 8019058:	b2d2      	uxtb	r2, r2
 801905a:	0010      	movs	r0, r2
 801905c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801905e:	2316      	movs	r3, #22
 8019060:	18fb      	adds	r3, r7, r3
 8019062:	2200      	movs	r2, #0
 8019064:	801a      	strh	r2, [r3, #0]
 8019066:	e00e      	b.n	8019086 <WIZCHIP_READ_BUF+0x7a>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8019068:	4b1e      	ldr	r3, [pc, #120]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 801906a:	69db      	ldr	r3, [r3, #28]
 801906c:	2516      	movs	r5, #22
 801906e:	197a      	adds	r2, r7, r5
 8019070:	8812      	ldrh	r2, [r2, #0]
 8019072:	68b9      	ldr	r1, [r7, #8]
 8019074:	188c      	adds	r4, r1, r2
 8019076:	4798      	blx	r3
 8019078:	0003      	movs	r3, r0
 801907a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 801907c:	197b      	adds	r3, r7, r5
 801907e:	881a      	ldrh	r2, [r3, #0]
 8019080:	197b      	adds	r3, r7, r5
 8019082:	3201      	adds	r2, #1
 8019084:	801a      	strh	r2, [r3, #0]
 8019086:	2316      	movs	r3, #22
 8019088:	18fa      	adds	r2, r7, r3
 801908a:	1dbb      	adds	r3, r7, #6
 801908c:	8812      	ldrh	r2, [r2, #0]
 801908e:	881b      	ldrh	r3, [r3, #0]
 8019090:	429a      	cmp	r2, r3
 8019092:	d3e9      	bcc.n	8019068 <WIZCHIP_READ_BUF+0x5c>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8019094:	e01b      	b.n	80190ce <WIZCHIP_READ_BUF+0xc2>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	0c1b      	lsrs	r3, r3, #16
 801909a:	b2da      	uxtb	r2, r3
 801909c:	2110      	movs	r1, #16
 801909e:	187b      	adds	r3, r7, r1
 80190a0:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	0a1b      	lsrs	r3, r3, #8
 80190a6:	b2da      	uxtb	r2, r3
 80190a8:	187b      	adds	r3, r7, r1
 80190aa:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	b2da      	uxtb	r2, r3
 80190b0:	187b      	adds	r3, r7, r1
 80190b2:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80190b4:	4b0b      	ldr	r3, [pc, #44]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 80190b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190b8:	187a      	adds	r2, r7, r1
 80190ba:	2103      	movs	r1, #3
 80190bc:	0010      	movs	r0, r2
 80190be:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80190c0:	4b08      	ldr	r3, [pc, #32]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 80190c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c4:	1dba      	adds	r2, r7, #6
 80190c6:	8811      	ldrh	r1, [r2, #0]
 80190c8:	68ba      	ldr	r2, [r7, #8]
 80190ca:	0010      	movs	r0, r2
 80190cc:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80190ce:	4b05      	ldr	r3, [pc, #20]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 80190d0:	699b      	ldr	r3, [r3, #24]
 80190d2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80190d4:	4b03      	ldr	r3, [pc, #12]	; (80190e4 <WIZCHIP_READ_BUF+0xd8>)
 80190d6:	691b      	ldr	r3, [r3, #16]
 80190d8:	4798      	blx	r3
}
 80190da:	46c0      	nop			; (mov r8, r8)
 80190dc:	46bd      	mov	sp, r7
 80190de:	b006      	add	sp, #24
 80190e0:	bdb0      	pop	{r4, r5, r7, pc}
 80190e2:	46c0      	nop			; (mov r8, r8)
 80190e4:	20005084 	.word	0x20005084

080190e8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80190e8:	b590      	push	{r4, r7, lr}
 80190ea:	b087      	sub	sp, #28
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	60f8      	str	r0, [r7, #12]
 80190f0:	60b9      	str	r1, [r7, #8]
 80190f2:	1dbb      	adds	r3, r7, #6
 80190f4:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80190f6:	4b32      	ldr	r3, [pc, #200]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 80190f8:	68db      	ldr	r3, [r3, #12]
 80190fa:	4798      	blx	r3
   WIZCHIP.CS._select();
 80190fc:	4b30      	ldr	r3, [pc, #192]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 80190fe:	695b      	ldr	r3, [r3, #20]
 8019100:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	2204      	movs	r2, #4
 8019106:	4313      	orrs	r3, r2
 8019108:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801910a:	4b2d      	ldr	r3, [pc, #180]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 801910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801910e:	2b00      	cmp	r3, #0
 8019110:	d12f      	bne.n	8019172 <WIZCHIP_WRITE_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8019112:	4b2b      	ldr	r3, [pc, #172]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 8019114:	6a1b      	ldr	r3, [r3, #32]
 8019116:	68fa      	ldr	r2, [r7, #12]
 8019118:	0c12      	lsrs	r2, r2, #16
 801911a:	b2d2      	uxtb	r2, r2
 801911c:	0010      	movs	r0, r2
 801911e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8019120:	4b27      	ldr	r3, [pc, #156]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 8019122:	6a1b      	ldr	r3, [r3, #32]
 8019124:	68fa      	ldr	r2, [r7, #12]
 8019126:	0a12      	lsrs	r2, r2, #8
 8019128:	b2d2      	uxtb	r2, r2
 801912a:	0010      	movs	r0, r2
 801912c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801912e:	4b24      	ldr	r3, [pc, #144]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 8019130:	6a1b      	ldr	r3, [r3, #32]
 8019132:	68fa      	ldr	r2, [r7, #12]
 8019134:	b2d2      	uxtb	r2, r2
 8019136:	0010      	movs	r0, r2
 8019138:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801913a:	2316      	movs	r3, #22
 801913c:	18fb      	adds	r3, r7, r3
 801913e:	2200      	movs	r2, #0
 8019140:	801a      	strh	r2, [r3, #0]
 8019142:	e00e      	b.n	8019162 <WIZCHIP_WRITE_BUF+0x7a>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8019144:	4b1e      	ldr	r3, [pc, #120]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 8019146:	6a1b      	ldr	r3, [r3, #32]
 8019148:	2416      	movs	r4, #22
 801914a:	193a      	adds	r2, r7, r4
 801914c:	8812      	ldrh	r2, [r2, #0]
 801914e:	68b9      	ldr	r1, [r7, #8]
 8019150:	188a      	adds	r2, r1, r2
 8019152:	7812      	ldrb	r2, [r2, #0]
 8019154:	0010      	movs	r0, r2
 8019156:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8019158:	193b      	adds	r3, r7, r4
 801915a:	881a      	ldrh	r2, [r3, #0]
 801915c:	193b      	adds	r3, r7, r4
 801915e:	3201      	adds	r2, #1
 8019160:	801a      	strh	r2, [r3, #0]
 8019162:	2316      	movs	r3, #22
 8019164:	18fa      	adds	r2, r7, r3
 8019166:	1dbb      	adds	r3, r7, #6
 8019168:	8812      	ldrh	r2, [r2, #0]
 801916a:	881b      	ldrh	r3, [r3, #0]
 801916c:	429a      	cmp	r2, r3
 801916e:	d3e9      	bcc.n	8019144 <WIZCHIP_WRITE_BUF+0x5c>
 8019170:	e01b      	b.n	80191aa <WIZCHIP_WRITE_BUF+0xc2>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	0c1b      	lsrs	r3, r3, #16
 8019176:	b2da      	uxtb	r2, r3
 8019178:	2110      	movs	r1, #16
 801917a:	187b      	adds	r3, r7, r1
 801917c:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	0a1b      	lsrs	r3, r3, #8
 8019182:	b2da      	uxtb	r2, r3
 8019184:	187b      	adds	r3, r7, r1
 8019186:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	b2da      	uxtb	r2, r3
 801918c:	187b      	adds	r3, r7, r1
 801918e:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8019190:	4b0b      	ldr	r3, [pc, #44]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 8019192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019194:	187a      	adds	r2, r7, r1
 8019196:	2103      	movs	r1, #3
 8019198:	0010      	movs	r0, r2
 801919a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 801919c:	4b08      	ldr	r3, [pc, #32]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 801919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191a0:	1dba      	adds	r2, r7, #6
 80191a2:	8811      	ldrh	r1, [r2, #0]
 80191a4:	68ba      	ldr	r2, [r7, #8]
 80191a6:	0010      	movs	r0, r2
 80191a8:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80191aa:	4b05      	ldr	r3, [pc, #20]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 80191ac:	699b      	ldr	r3, [r3, #24]
 80191ae:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80191b0:	4b03      	ldr	r3, [pc, #12]	; (80191c0 <WIZCHIP_WRITE_BUF+0xd8>)
 80191b2:	691b      	ldr	r3, [r3, #16]
 80191b4:	4798      	blx	r3
}
 80191b6:	46c0      	nop			; (mov r8, r8)
 80191b8:	46bd      	mov	sp, r7
 80191ba:	b007      	add	sp, #28
 80191bc:	bd90      	pop	{r4, r7, pc}
 80191be:	46c0      	nop			; (mov r8, r8)
 80191c0:	20005084 	.word	0x20005084

080191c4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80191c4:	b5b0      	push	{r4, r5, r7, lr}
 80191c6:	b084      	sub	sp, #16
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	0002      	movs	r2, r0
 80191cc:	1dfb      	adds	r3, r7, #7
 80191ce:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 80191d0:	230e      	movs	r3, #14
 80191d2:	18fb      	adds	r3, r7, r3
 80191d4:	2200      	movs	r2, #0
 80191d6:	801a      	strh	r2, [r3, #0]
 80191d8:	230c      	movs	r3, #12
 80191da:	18fb      	adds	r3, r7, r3
 80191dc:	2200      	movs	r2, #0
 80191de:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80191e0:	1dfb      	adds	r3, r7, #7
 80191e2:	781b      	ldrb	r3, [r3, #0]
 80191e4:	009b      	lsls	r3, r3, #2
 80191e6:	3301      	adds	r3, #1
 80191e8:	00db      	lsls	r3, r3, #3
 80191ea:	2280      	movs	r2, #128	; 0x80
 80191ec:	0192      	lsls	r2, r2, #6
 80191ee:	4694      	mov	ip, r2
 80191f0:	4463      	add	r3, ip
 80191f2:	0018      	movs	r0, r3
 80191f4:	f7ff fe62 	bl	8018ebc <WIZCHIP_READ>
 80191f8:	0003      	movs	r3, r0
 80191fa:	001a      	movs	r2, r3
 80191fc:	250c      	movs	r5, #12
 80191fe:	197b      	adds	r3, r7, r5
 8019200:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8019202:	197b      	adds	r3, r7, r5
 8019204:	881b      	ldrh	r3, [r3, #0]
 8019206:	021b      	lsls	r3, r3, #8
 8019208:	b29c      	uxth	r4, r3
 801920a:	1dfb      	adds	r3, r7, #7
 801920c:	781b      	ldrb	r3, [r3, #0]
 801920e:	009b      	lsls	r3, r3, #2
 8019210:	3301      	adds	r3, #1
 8019212:	00db      	lsls	r3, r3, #3
 8019214:	2284      	movs	r2, #132	; 0x84
 8019216:	0192      	lsls	r2, r2, #6
 8019218:	4694      	mov	ip, r2
 801921a:	4463      	add	r3, ip
 801921c:	0018      	movs	r0, r3
 801921e:	f7ff fe4d 	bl	8018ebc <WIZCHIP_READ>
 8019222:	0003      	movs	r3, r0
 8019224:	b29a      	uxth	r2, r3
 8019226:	197b      	adds	r3, r7, r5
 8019228:	18a2      	adds	r2, r4, r2
 801922a:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 801922c:	197b      	adds	r3, r7, r5
 801922e:	881b      	ldrh	r3, [r3, #0]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d025      	beq.n	8019280 <getSn_TX_FSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8019234:	1dfb      	adds	r3, r7, #7
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	009b      	lsls	r3, r3, #2
 801923a:	3301      	adds	r3, #1
 801923c:	00db      	lsls	r3, r3, #3
 801923e:	2280      	movs	r2, #128	; 0x80
 8019240:	0192      	lsls	r2, r2, #6
 8019242:	4694      	mov	ip, r2
 8019244:	4463      	add	r3, ip
 8019246:	0018      	movs	r0, r3
 8019248:	f7ff fe38 	bl	8018ebc <WIZCHIP_READ>
 801924c:	0003      	movs	r3, r0
 801924e:	001a      	movs	r2, r3
 8019250:	250e      	movs	r5, #14
 8019252:	197b      	adds	r3, r7, r5
 8019254:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8019256:	197b      	adds	r3, r7, r5
 8019258:	881b      	ldrh	r3, [r3, #0]
 801925a:	021b      	lsls	r3, r3, #8
 801925c:	b29c      	uxth	r4, r3
 801925e:	1dfb      	adds	r3, r7, #7
 8019260:	781b      	ldrb	r3, [r3, #0]
 8019262:	009b      	lsls	r3, r3, #2
 8019264:	3301      	adds	r3, #1
 8019266:	00db      	lsls	r3, r3, #3
 8019268:	2284      	movs	r2, #132	; 0x84
 801926a:	0192      	lsls	r2, r2, #6
 801926c:	4694      	mov	ip, r2
 801926e:	4463      	add	r3, ip
 8019270:	0018      	movs	r0, r3
 8019272:	f7ff fe23 	bl	8018ebc <WIZCHIP_READ>
 8019276:	0003      	movs	r3, r0
 8019278:	b29a      	uxth	r2, r3
 801927a:	197b      	adds	r3, r7, r5
 801927c:	18a2      	adds	r2, r4, r2
 801927e:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8019280:	210e      	movs	r1, #14
 8019282:	187a      	adds	r2, r7, r1
 8019284:	230c      	movs	r3, #12
 8019286:	18fb      	adds	r3, r7, r3
 8019288:	8812      	ldrh	r2, [r2, #0]
 801928a:	881b      	ldrh	r3, [r3, #0]
 801928c:	429a      	cmp	r2, r3
 801928e:	d1a7      	bne.n	80191e0 <getSn_TX_FSR+0x1c>
   return val;
 8019290:	187b      	adds	r3, r7, r1
 8019292:	881b      	ldrh	r3, [r3, #0]
}
 8019294:	0018      	movs	r0, r3
 8019296:	46bd      	mov	sp, r7
 8019298:	b004      	add	sp, #16
 801929a:	bdb0      	pop	{r4, r5, r7, pc}

0801929c <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 801929c:	b5b0      	push	{r4, r5, r7, lr}
 801929e:	b084      	sub	sp, #16
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	0002      	movs	r2, r0
 80192a4:	1dfb      	adds	r3, r7, #7
 80192a6:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 80192a8:	230e      	movs	r3, #14
 80192aa:	18fb      	adds	r3, r7, r3
 80192ac:	2200      	movs	r2, #0
 80192ae:	801a      	strh	r2, [r3, #0]
 80192b0:	230c      	movs	r3, #12
 80192b2:	18fb      	adds	r3, r7, r3
 80192b4:	2200      	movs	r2, #0
 80192b6:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80192b8:	1dfb      	adds	r3, r7, #7
 80192ba:	781b      	ldrb	r3, [r3, #0]
 80192bc:	009b      	lsls	r3, r3, #2
 80192be:	3301      	adds	r3, #1
 80192c0:	00db      	lsls	r3, r3, #3
 80192c2:	2298      	movs	r2, #152	; 0x98
 80192c4:	0192      	lsls	r2, r2, #6
 80192c6:	4694      	mov	ip, r2
 80192c8:	4463      	add	r3, ip
 80192ca:	0018      	movs	r0, r3
 80192cc:	f7ff fdf6 	bl	8018ebc <WIZCHIP_READ>
 80192d0:	0003      	movs	r3, r0
 80192d2:	001a      	movs	r2, r3
 80192d4:	250c      	movs	r5, #12
 80192d6:	197b      	adds	r3, r7, r5
 80192d8:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80192da:	197b      	adds	r3, r7, r5
 80192dc:	881b      	ldrh	r3, [r3, #0]
 80192de:	021b      	lsls	r3, r3, #8
 80192e0:	b29c      	uxth	r4, r3
 80192e2:	1dfb      	adds	r3, r7, #7
 80192e4:	781b      	ldrb	r3, [r3, #0]
 80192e6:	009b      	lsls	r3, r3, #2
 80192e8:	3301      	adds	r3, #1
 80192ea:	00db      	lsls	r3, r3, #3
 80192ec:	229c      	movs	r2, #156	; 0x9c
 80192ee:	0192      	lsls	r2, r2, #6
 80192f0:	4694      	mov	ip, r2
 80192f2:	4463      	add	r3, ip
 80192f4:	0018      	movs	r0, r3
 80192f6:	f7ff fde1 	bl	8018ebc <WIZCHIP_READ>
 80192fa:	0003      	movs	r3, r0
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	197b      	adds	r3, r7, r5
 8019300:	18a2      	adds	r2, r4, r2
 8019302:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8019304:	197b      	adds	r3, r7, r5
 8019306:	881b      	ldrh	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d025      	beq.n	8019358 <getSn_RX_RSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 801930c:	1dfb      	adds	r3, r7, #7
 801930e:	781b      	ldrb	r3, [r3, #0]
 8019310:	009b      	lsls	r3, r3, #2
 8019312:	3301      	adds	r3, #1
 8019314:	00db      	lsls	r3, r3, #3
 8019316:	2298      	movs	r2, #152	; 0x98
 8019318:	0192      	lsls	r2, r2, #6
 801931a:	4694      	mov	ip, r2
 801931c:	4463      	add	r3, ip
 801931e:	0018      	movs	r0, r3
 8019320:	f7ff fdcc 	bl	8018ebc <WIZCHIP_READ>
 8019324:	0003      	movs	r3, r0
 8019326:	001a      	movs	r2, r3
 8019328:	250e      	movs	r5, #14
 801932a:	197b      	adds	r3, r7, r5
 801932c:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801932e:	197b      	adds	r3, r7, r5
 8019330:	881b      	ldrh	r3, [r3, #0]
 8019332:	021b      	lsls	r3, r3, #8
 8019334:	b29c      	uxth	r4, r3
 8019336:	1dfb      	adds	r3, r7, #7
 8019338:	781b      	ldrb	r3, [r3, #0]
 801933a:	009b      	lsls	r3, r3, #2
 801933c:	3301      	adds	r3, #1
 801933e:	00db      	lsls	r3, r3, #3
 8019340:	229c      	movs	r2, #156	; 0x9c
 8019342:	0192      	lsls	r2, r2, #6
 8019344:	4694      	mov	ip, r2
 8019346:	4463      	add	r3, ip
 8019348:	0018      	movs	r0, r3
 801934a:	f7ff fdb7 	bl	8018ebc <WIZCHIP_READ>
 801934e:	0003      	movs	r3, r0
 8019350:	b29a      	uxth	r2, r3
 8019352:	197b      	adds	r3, r7, r5
 8019354:	18a2      	adds	r2, r4, r2
 8019356:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8019358:	210e      	movs	r1, #14
 801935a:	187a      	adds	r2, r7, r1
 801935c:	230c      	movs	r3, #12
 801935e:	18fb      	adds	r3, r7, r3
 8019360:	8812      	ldrh	r2, [r2, #0]
 8019362:	881b      	ldrh	r3, [r3, #0]
 8019364:	429a      	cmp	r2, r3
 8019366:	d1a7      	bne.n	80192b8 <getSn_RX_RSR+0x1c>
   return val;
 8019368:	187b      	adds	r3, r7, r1
 801936a:	881b      	ldrh	r3, [r3, #0]
}
 801936c:	0018      	movs	r0, r3
 801936e:	46bd      	mov	sp, r7
 8019370:	b004      	add	sp, #16
 8019372:	bdb0      	pop	{r4, r5, r7, pc}

08019374 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8019374:	b5b0      	push	{r4, r5, r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af00      	add	r7, sp, #0
 801937a:	6039      	str	r1, [r7, #0]
 801937c:	0011      	movs	r1, r2
 801937e:	1dfb      	adds	r3, r7, #7
 8019380:	1c02      	adds	r2, r0, #0
 8019382:	701a      	strb	r2, [r3, #0]
 8019384:	1d3b      	adds	r3, r7, #4
 8019386:	1c0a      	adds	r2, r1, #0
 8019388:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 801938a:	250e      	movs	r5, #14
 801938c:	197b      	adds	r3, r7, r5
 801938e:	2200      	movs	r2, #0
 8019390:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8019392:	2300      	movs	r3, #0
 8019394:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8019396:	1d3b      	adds	r3, r7, #4
 8019398:	881b      	ldrh	r3, [r3, #0]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d05e      	beq.n	801945c <wiz_send_data+0xe8>
   ptr = getSn_TX_WR(sn);
 801939e:	1dfb      	adds	r3, r7, #7
 80193a0:	781b      	ldrb	r3, [r3, #0]
 80193a2:	009b      	lsls	r3, r3, #2
 80193a4:	3301      	adds	r3, #1
 80193a6:	00db      	lsls	r3, r3, #3
 80193a8:	2290      	movs	r2, #144	; 0x90
 80193aa:	0192      	lsls	r2, r2, #6
 80193ac:	4694      	mov	ip, r2
 80193ae:	4463      	add	r3, ip
 80193b0:	0018      	movs	r0, r3
 80193b2:	f7ff fd83 	bl	8018ebc <WIZCHIP_READ>
 80193b6:	0003      	movs	r3, r0
 80193b8:	b29b      	uxth	r3, r3
 80193ba:	021b      	lsls	r3, r3, #8
 80193bc:	b29c      	uxth	r4, r3
 80193be:	1dfb      	adds	r3, r7, #7
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	009b      	lsls	r3, r3, #2
 80193c4:	3301      	adds	r3, #1
 80193c6:	00db      	lsls	r3, r3, #3
 80193c8:	2294      	movs	r2, #148	; 0x94
 80193ca:	0192      	lsls	r2, r2, #6
 80193cc:	4694      	mov	ip, r2
 80193ce:	4463      	add	r3, ip
 80193d0:	0018      	movs	r0, r3
 80193d2:	f7ff fd73 	bl	8018ebc <WIZCHIP_READ>
 80193d6:	0003      	movs	r3, r0
 80193d8:	b29a      	uxth	r2, r3
 80193da:	197b      	adds	r3, r7, r5
 80193dc:	18a2      	adds	r2, r4, r2
 80193de:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80193e0:	002c      	movs	r4, r5
 80193e2:	197b      	adds	r3, r7, r5
 80193e4:	881b      	ldrh	r3, [r3, #0]
 80193e6:	021b      	lsls	r3, r3, #8
 80193e8:	1dfa      	adds	r2, r7, #7
 80193ea:	7812      	ldrb	r2, [r2, #0]
 80193ec:	0092      	lsls	r2, r2, #2
 80193ee:	3202      	adds	r2, #2
 80193f0:	00d2      	lsls	r2, r2, #3
 80193f2:	189b      	adds	r3, r3, r2
 80193f4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80193f6:	1d3b      	adds	r3, r7, #4
 80193f8:	881a      	ldrh	r2, [r3, #0]
 80193fa:	6839      	ldr	r1, [r7, #0]
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	0018      	movs	r0, r3
 8019400:	f7ff fe72 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8019404:	193b      	adds	r3, r7, r4
 8019406:	1939      	adds	r1, r7, r4
 8019408:	1d3a      	adds	r2, r7, #4
 801940a:	8809      	ldrh	r1, [r1, #0]
 801940c:	8812      	ldrh	r2, [r2, #0]
 801940e:	188a      	adds	r2, r1, r2
 8019410:	801a      	strh	r2, [r3, #0]
   setSn_TX_WR(sn,ptr);
 8019412:	1dfb      	adds	r3, r7, #7
 8019414:	781b      	ldrb	r3, [r3, #0]
 8019416:	009b      	lsls	r3, r3, #2
 8019418:	3301      	adds	r3, #1
 801941a:	00db      	lsls	r3, r3, #3
 801941c:	2290      	movs	r2, #144	; 0x90
 801941e:	0192      	lsls	r2, r2, #6
 8019420:	4694      	mov	ip, r2
 8019422:	4463      	add	r3, ip
 8019424:	001a      	movs	r2, r3
 8019426:	193b      	adds	r3, r7, r4
 8019428:	881b      	ldrh	r3, [r3, #0]
 801942a:	0a1b      	lsrs	r3, r3, #8
 801942c:	b29b      	uxth	r3, r3
 801942e:	b2db      	uxtb	r3, r3
 8019430:	0019      	movs	r1, r3
 8019432:	0010      	movs	r0, r2
 8019434:	f7ff fd94 	bl	8018f60 <WIZCHIP_WRITE>
 8019438:	1dfb      	adds	r3, r7, #7
 801943a:	781b      	ldrb	r3, [r3, #0]
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	3301      	adds	r3, #1
 8019440:	00db      	lsls	r3, r3, #3
 8019442:	2294      	movs	r2, #148	; 0x94
 8019444:	0192      	lsls	r2, r2, #6
 8019446:	4694      	mov	ip, r2
 8019448:	4463      	add	r3, ip
 801944a:	001a      	movs	r2, r3
 801944c:	193b      	adds	r3, r7, r4
 801944e:	881b      	ldrh	r3, [r3, #0]
 8019450:	b2db      	uxtb	r3, r3
 8019452:	0019      	movs	r1, r3
 8019454:	0010      	movs	r0, r2
 8019456:	f7ff fd83 	bl	8018f60 <WIZCHIP_WRITE>
 801945a:	e000      	b.n	801945e <wiz_send_data+0xea>
   if(len == 0)  return;
 801945c:	46c0      	nop			; (mov r8, r8)
}
 801945e:	46bd      	mov	sp, r7
 8019460:	b004      	add	sp, #16
 8019462:	bdb0      	pop	{r4, r5, r7, pc}

08019464 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8019464:	b5b0      	push	{r4, r5, r7, lr}
 8019466:	b084      	sub	sp, #16
 8019468:	af00      	add	r7, sp, #0
 801946a:	6039      	str	r1, [r7, #0]
 801946c:	0011      	movs	r1, r2
 801946e:	1dfb      	adds	r3, r7, #7
 8019470:	1c02      	adds	r2, r0, #0
 8019472:	701a      	strb	r2, [r3, #0]
 8019474:	1d3b      	adds	r3, r7, #4
 8019476:	1c0a      	adds	r2, r1, #0
 8019478:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 801947a:	250e      	movs	r5, #14
 801947c:	197b      	adds	r3, r7, r5
 801947e:	2200      	movs	r2, #0
 8019480:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8019482:	2300      	movs	r3, #0
 8019484:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8019486:	1d3b      	adds	r3, r7, #4
 8019488:	881b      	ldrh	r3, [r3, #0]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d05e      	beq.n	801954c <wiz_recv_data+0xe8>
   ptr = getSn_RX_RD(sn);
 801948e:	1dfb      	adds	r3, r7, #7
 8019490:	781b      	ldrb	r3, [r3, #0]
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	3301      	adds	r3, #1
 8019496:	00db      	lsls	r3, r3, #3
 8019498:	22a0      	movs	r2, #160	; 0xa0
 801949a:	0192      	lsls	r2, r2, #6
 801949c:	4694      	mov	ip, r2
 801949e:	4463      	add	r3, ip
 80194a0:	0018      	movs	r0, r3
 80194a2:	f7ff fd0b 	bl	8018ebc <WIZCHIP_READ>
 80194a6:	0003      	movs	r3, r0
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	021b      	lsls	r3, r3, #8
 80194ac:	b29c      	uxth	r4, r3
 80194ae:	1dfb      	adds	r3, r7, #7
 80194b0:	781b      	ldrb	r3, [r3, #0]
 80194b2:	009b      	lsls	r3, r3, #2
 80194b4:	3301      	adds	r3, #1
 80194b6:	00db      	lsls	r3, r3, #3
 80194b8:	22a4      	movs	r2, #164	; 0xa4
 80194ba:	0192      	lsls	r2, r2, #6
 80194bc:	4694      	mov	ip, r2
 80194be:	4463      	add	r3, ip
 80194c0:	0018      	movs	r0, r3
 80194c2:	f7ff fcfb 	bl	8018ebc <WIZCHIP_READ>
 80194c6:	0003      	movs	r3, r0
 80194c8:	b29a      	uxth	r2, r3
 80194ca:	197b      	adds	r3, r7, r5
 80194cc:	18a2      	adds	r2, r4, r2
 80194ce:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80194d0:	002c      	movs	r4, r5
 80194d2:	197b      	adds	r3, r7, r5
 80194d4:	881b      	ldrh	r3, [r3, #0]
 80194d6:	021b      	lsls	r3, r3, #8
 80194d8:	1dfa      	adds	r2, r7, #7
 80194da:	7812      	ldrb	r2, [r2, #0]
 80194dc:	0092      	lsls	r2, r2, #2
 80194de:	3203      	adds	r2, #3
 80194e0:	00d2      	lsls	r2, r2, #3
 80194e2:	189b      	adds	r3, r3, r2
 80194e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80194e6:	1d3b      	adds	r3, r7, #4
 80194e8:	881a      	ldrh	r2, [r3, #0]
 80194ea:	6839      	ldr	r1, [r7, #0]
 80194ec:	68bb      	ldr	r3, [r7, #8]
 80194ee:	0018      	movs	r0, r3
 80194f0:	f7ff fd8c 	bl	801900c <WIZCHIP_READ_BUF>
   ptr += len;
 80194f4:	193b      	adds	r3, r7, r4
 80194f6:	1939      	adds	r1, r7, r4
 80194f8:	1d3a      	adds	r2, r7, #4
 80194fa:	8809      	ldrh	r1, [r1, #0]
 80194fc:	8812      	ldrh	r2, [r2, #0]
 80194fe:	188a      	adds	r2, r1, r2
 8019500:	801a      	strh	r2, [r3, #0]
   
   setSn_RX_RD(sn,ptr);
 8019502:	1dfb      	adds	r3, r7, #7
 8019504:	781b      	ldrb	r3, [r3, #0]
 8019506:	009b      	lsls	r3, r3, #2
 8019508:	3301      	adds	r3, #1
 801950a:	00db      	lsls	r3, r3, #3
 801950c:	22a0      	movs	r2, #160	; 0xa0
 801950e:	0192      	lsls	r2, r2, #6
 8019510:	4694      	mov	ip, r2
 8019512:	4463      	add	r3, ip
 8019514:	001a      	movs	r2, r3
 8019516:	193b      	adds	r3, r7, r4
 8019518:	881b      	ldrh	r3, [r3, #0]
 801951a:	0a1b      	lsrs	r3, r3, #8
 801951c:	b29b      	uxth	r3, r3
 801951e:	b2db      	uxtb	r3, r3
 8019520:	0019      	movs	r1, r3
 8019522:	0010      	movs	r0, r2
 8019524:	f7ff fd1c 	bl	8018f60 <WIZCHIP_WRITE>
 8019528:	1dfb      	adds	r3, r7, #7
 801952a:	781b      	ldrb	r3, [r3, #0]
 801952c:	009b      	lsls	r3, r3, #2
 801952e:	3301      	adds	r3, #1
 8019530:	00db      	lsls	r3, r3, #3
 8019532:	22a4      	movs	r2, #164	; 0xa4
 8019534:	0192      	lsls	r2, r2, #6
 8019536:	4694      	mov	ip, r2
 8019538:	4463      	add	r3, ip
 801953a:	001a      	movs	r2, r3
 801953c:	193b      	adds	r3, r7, r4
 801953e:	881b      	ldrh	r3, [r3, #0]
 8019540:	b2db      	uxtb	r3, r3
 8019542:	0019      	movs	r1, r3
 8019544:	0010      	movs	r0, r2
 8019546:	f7ff fd0b 	bl	8018f60 <WIZCHIP_WRITE>
 801954a:	e000      	b.n	801954e <wiz_recv_data+0xea>
   if(len == 0) return;
 801954c:	46c0      	nop			; (mov r8, r8)
}
 801954e:	46bd      	mov	sp, r7
 8019550:	b004      	add	sp, #16
 8019552:	bdb0      	pop	{r4, r5, r7, pc}

08019554 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8019554:	b5b0      	push	{r4, r5, r7, lr}
 8019556:	b084      	sub	sp, #16
 8019558:	af00      	add	r7, sp, #0
 801955a:	0002      	movs	r2, r0
 801955c:	1dfb      	adds	r3, r7, #7
 801955e:	701a      	strb	r2, [r3, #0]
 8019560:	1d3b      	adds	r3, r7, #4
 8019562:	1c0a      	adds	r2, r1, #0
 8019564:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8019566:	250e      	movs	r5, #14
 8019568:	197b      	adds	r3, r7, r5
 801956a:	2200      	movs	r2, #0
 801956c:	801a      	strh	r2, [r3, #0]

   ptr = getSn_RX_RD(sn);
 801956e:	1dfb      	adds	r3, r7, #7
 8019570:	781b      	ldrb	r3, [r3, #0]
 8019572:	009b      	lsls	r3, r3, #2
 8019574:	3301      	adds	r3, #1
 8019576:	00db      	lsls	r3, r3, #3
 8019578:	22a0      	movs	r2, #160	; 0xa0
 801957a:	0192      	lsls	r2, r2, #6
 801957c:	4694      	mov	ip, r2
 801957e:	4463      	add	r3, ip
 8019580:	0018      	movs	r0, r3
 8019582:	f7ff fc9b 	bl	8018ebc <WIZCHIP_READ>
 8019586:	0003      	movs	r3, r0
 8019588:	b29b      	uxth	r3, r3
 801958a:	021b      	lsls	r3, r3, #8
 801958c:	b29c      	uxth	r4, r3
 801958e:	1dfb      	adds	r3, r7, #7
 8019590:	781b      	ldrb	r3, [r3, #0]
 8019592:	009b      	lsls	r3, r3, #2
 8019594:	3301      	adds	r3, #1
 8019596:	00db      	lsls	r3, r3, #3
 8019598:	22a4      	movs	r2, #164	; 0xa4
 801959a:	0192      	lsls	r2, r2, #6
 801959c:	4694      	mov	ip, r2
 801959e:	4463      	add	r3, ip
 80195a0:	0018      	movs	r0, r3
 80195a2:	f7ff fc8b 	bl	8018ebc <WIZCHIP_READ>
 80195a6:	0003      	movs	r3, r0
 80195a8:	b29a      	uxth	r2, r3
 80195aa:	197b      	adds	r3, r7, r5
 80195ac:	18a2      	adds	r2, r4, r2
 80195ae:	801a      	strh	r2, [r3, #0]
   ptr += len;
 80195b0:	002c      	movs	r4, r5
 80195b2:	193b      	adds	r3, r7, r4
 80195b4:	1939      	adds	r1, r7, r4
 80195b6:	1d3a      	adds	r2, r7, #4
 80195b8:	8809      	ldrh	r1, [r1, #0]
 80195ba:	8812      	ldrh	r2, [r2, #0]
 80195bc:	188a      	adds	r2, r1, r2
 80195be:	801a      	strh	r2, [r3, #0]
   setSn_RX_RD(sn,ptr);
 80195c0:	1dfb      	adds	r3, r7, #7
 80195c2:	781b      	ldrb	r3, [r3, #0]
 80195c4:	009b      	lsls	r3, r3, #2
 80195c6:	3301      	adds	r3, #1
 80195c8:	00db      	lsls	r3, r3, #3
 80195ca:	22a0      	movs	r2, #160	; 0xa0
 80195cc:	0192      	lsls	r2, r2, #6
 80195ce:	4694      	mov	ip, r2
 80195d0:	4463      	add	r3, ip
 80195d2:	001a      	movs	r2, r3
 80195d4:	193b      	adds	r3, r7, r4
 80195d6:	881b      	ldrh	r3, [r3, #0]
 80195d8:	0a1b      	lsrs	r3, r3, #8
 80195da:	b29b      	uxth	r3, r3
 80195dc:	b2db      	uxtb	r3, r3
 80195de:	0019      	movs	r1, r3
 80195e0:	0010      	movs	r0, r2
 80195e2:	f7ff fcbd 	bl	8018f60 <WIZCHIP_WRITE>
 80195e6:	1dfb      	adds	r3, r7, #7
 80195e8:	781b      	ldrb	r3, [r3, #0]
 80195ea:	009b      	lsls	r3, r3, #2
 80195ec:	3301      	adds	r3, #1
 80195ee:	00db      	lsls	r3, r3, #3
 80195f0:	22a4      	movs	r2, #164	; 0xa4
 80195f2:	0192      	lsls	r2, r2, #6
 80195f4:	4694      	mov	ip, r2
 80195f6:	4463      	add	r3, ip
 80195f8:	001a      	movs	r2, r3
 80195fa:	193b      	adds	r3, r7, r4
 80195fc:	881b      	ldrh	r3, [r3, #0]
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	0019      	movs	r1, r3
 8019602:	0010      	movs	r0, r2
 8019604:	f7ff fcac 	bl	8018f60 <WIZCHIP_WRITE>
}
 8019608:	46c0      	nop			; (mov r8, r8)
 801960a:	46bd      	mov	sp, r7
 801960c:	b004      	add	sp, #16
 801960e:	bdb0      	pop	{r4, r5, r7, pc}

08019610 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8019610:	b580      	push	{r7, lr}
 8019612:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8019614:	490b      	ldr	r1, [pc, #44]	; (8019644 <default_ip_assign+0x34>)
 8019616:	23f0      	movs	r3, #240	; 0xf0
 8019618:	011b      	lsls	r3, r3, #4
 801961a:	2204      	movs	r2, #4
 801961c:	0018      	movs	r0, r3
 801961e:	f7ff fd63 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8019622:	4909      	ldr	r1, [pc, #36]	; (8019648 <default_ip_assign+0x38>)
 8019624:	23a0      	movs	r3, #160	; 0xa0
 8019626:	00db      	lsls	r3, r3, #3
 8019628:	2204      	movs	r2, #4
 801962a:	0018      	movs	r0, r3
 801962c:	f7ff fd5c 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8019630:	4906      	ldr	r1, [pc, #24]	; (801964c <default_ip_assign+0x3c>)
 8019632:	2380      	movs	r3, #128	; 0x80
 8019634:	005b      	lsls	r3, r3, #1
 8019636:	2204      	movs	r2, #4
 8019638:	0018      	movs	r0, r3
 801963a:	f7ff fd55 	bl	80190e8 <WIZCHIP_WRITE_BUF>
}
 801963e:	46c0      	nop			; (mov r8, r8)
 8019640:	46bd      	mov	sp, r7
 8019642:	bd80      	pop	{r7, pc}
 8019644:	20007adc 	.word	0x20007adc
 8019648:	20007ae4 	.word	0x20007ae4
 801964c:	20007ae0 	.word	0x20007ae0

08019650 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8019654:	2180      	movs	r1, #128	; 0x80
 8019656:	2000      	movs	r0, #0
 8019658:	f7ff fc82 	bl	8018f60 <WIZCHIP_WRITE>
   getMR(); // for delay
 801965c:	2000      	movs	r0, #0
 801965e:	f7ff fc2d 	bl	8018ebc <WIZCHIP_READ>
   default_ip_assign();
 8019662:	f7ff ffd5 	bl	8019610 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8019666:	4905      	ldr	r1, [pc, #20]	; (801967c <default_ip_update+0x2c>)
 8019668:	2390      	movs	r3, #144	; 0x90
 801966a:	011b      	lsls	r3, r3, #4
 801966c:	2206      	movs	r2, #6
 801966e:	0018      	movs	r0, r3
 8019670:	f7ff fd3a 	bl	80190e8 <WIZCHIP_WRITE_BUF>
}
 8019674:	46c0      	nop			; (mov r8, r8)
 8019676:	46bd      	mov	sp, r7
 8019678:	bd80      	pop	{r7, pc}
 801967a:	46c0      	nop			; (mov r8, r8)
 801967c:	20007afc 	.word	0x20007afc

08019680 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8019684:	2180      	movs	r1, #128	; 0x80
 8019686:	2000      	movs	r0, #0
 8019688:	f7ff fc6a 	bl	8018f60 <WIZCHIP_WRITE>
	getMR(); // for delay
 801968c:	2000      	movs	r0, #0
 801968e:	f7ff fc15 	bl	8018ebc <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8019692:	4905      	ldr	r1, [pc, #20]	; (80196a8 <default_ip_conflict+0x28>)
 8019694:	2390      	movs	r3, #144	; 0x90
 8019696:	011b      	lsls	r3, r3, #4
 8019698:	2206      	movs	r2, #6
 801969a:	0018      	movs	r0, r3
 801969c:	f7ff fd24 	bl	80190e8 <WIZCHIP_WRITE_BUF>
}
 80196a0:	46c0      	nop			; (mov r8, r8)
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bd80      	pop	{r7, pc}
 80196a6:	46c0      	nop			; (mov r8, r8)
 80196a8:	20007afc 	.word	0x20007afc

080196ac <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b084      	sub	sp, #16
 80196b0:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80196b2:	0039      	movs	r1, r7
 80196b4:	2390      	movs	r3, #144	; 0x90
 80196b6:	011b      	lsls	r3, r3, #4
 80196b8:	2206      	movs	r2, #6
 80196ba:	0018      	movs	r0, r3
 80196bc:	f7ff fca6 	bl	801900c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 80196c0:	4b7e      	ldr	r3, [pc, #504]	; (80198bc <makeDHCPMSG+0x210>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	2201      	movs	r2, #1
 80196c6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80196c8:	4b7c      	ldr	r3, [pc, #496]	; (80198bc <makeDHCPMSG+0x210>)
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	2201      	movs	r2, #1
 80196ce:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80196d0:	4b7a      	ldr	r3, [pc, #488]	; (80198bc <makeDHCPMSG+0x210>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	2206      	movs	r2, #6
 80196d6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80196d8:	4b78      	ldr	r3, [pc, #480]	; (80198bc <makeDHCPMSG+0x210>)
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	2200      	movs	r2, #0
 80196de:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80196e0:	4b76      	ldr	r3, [pc, #472]	; (80198bc <makeDHCPMSG+0x210>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	3304      	adds	r3, #4
 80196e6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80196e8:	4b75      	ldr	r3, [pc, #468]	; (80198c0 <makeDHCPMSG+0x214>)
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	0e1b      	lsrs	r3, r3, #24
 80196ee:	b2da      	uxtb	r2, r3
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80196f4:	4b72      	ldr	r3, [pc, #456]	; (80198c0 <makeDHCPMSG+0x214>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	0c1a      	lsrs	r2, r3, #16
 80196fa:	68bb      	ldr	r3, [r7, #8]
 80196fc:	3301      	adds	r3, #1
 80196fe:	b2d2      	uxtb	r2, r2
 8019700:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8019702:	4b6f      	ldr	r3, [pc, #444]	; (80198c0 <makeDHCPMSG+0x214>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	0a1a      	lsrs	r2, r3, #8
 8019708:	68bb      	ldr	r3, [r7, #8]
 801970a:	3302      	adds	r3, #2
 801970c:	b2d2      	uxtb	r2, r2
 801970e:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8019710:	4b6b      	ldr	r3, [pc, #428]	; (80198c0 <makeDHCPMSG+0x214>)
 8019712:	681a      	ldr	r2, [r3, #0]
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	3303      	adds	r3, #3
 8019718:	b2d2      	uxtb	r2, r2
 801971a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801971c:	4b67      	ldr	r3, [pc, #412]	; (80198bc <makeDHCPMSG+0x210>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	2200      	movs	r2, #0
 8019722:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8019724:	4b65      	ldr	r3, [pc, #404]	; (80198bc <makeDHCPMSG+0x210>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	330a      	adds	r3, #10
 801972a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801972c:	68bb      	ldr	r3, [r7, #8]
 801972e:	2280      	movs	r2, #128	; 0x80
 8019730:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8019732:	68bb      	ldr	r3, [r7, #8]
 8019734:	3301      	adds	r3, #1
 8019736:	2200      	movs	r2, #0
 8019738:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801973a:	4b60      	ldr	r3, [pc, #384]	; (80198bc <makeDHCPMSG+0x210>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	2200      	movs	r2, #0
 8019740:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8019742:	4b5e      	ldr	r3, [pc, #376]	; (80198bc <makeDHCPMSG+0x210>)
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	2200      	movs	r2, #0
 8019748:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801974a:	4b5c      	ldr	r3, [pc, #368]	; (80198bc <makeDHCPMSG+0x210>)
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	2200      	movs	r2, #0
 8019750:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8019752:	4b5a      	ldr	r3, [pc, #360]	; (80198bc <makeDHCPMSG+0x210>)
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	2200      	movs	r2, #0
 8019758:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801975a:	4b58      	ldr	r3, [pc, #352]	; (80198bc <makeDHCPMSG+0x210>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	2200      	movs	r2, #0
 8019760:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8019762:	4b56      	ldr	r3, [pc, #344]	; (80198bc <makeDHCPMSG+0x210>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	2200      	movs	r2, #0
 8019768:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801976a:	4b54      	ldr	r3, [pc, #336]	; (80198bc <makeDHCPMSG+0x210>)
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	2200      	movs	r2, #0
 8019770:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8019772:	4b52      	ldr	r3, [pc, #328]	; (80198bc <makeDHCPMSG+0x210>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	2200      	movs	r2, #0
 8019778:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801977a:	4b50      	ldr	r3, [pc, #320]	; (80198bc <makeDHCPMSG+0x210>)
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2200      	movs	r2, #0
 8019780:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8019782:	4b4e      	ldr	r3, [pc, #312]	; (80198bc <makeDHCPMSG+0x210>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	2200      	movs	r2, #0
 8019788:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801978a:	4b4c      	ldr	r3, [pc, #304]	; (80198bc <makeDHCPMSG+0x210>)
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	2200      	movs	r2, #0
 8019790:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8019792:	4b4a      	ldr	r3, [pc, #296]	; (80198bc <makeDHCPMSG+0x210>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	2200      	movs	r2, #0
 8019798:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801979a:	4b48      	ldr	r3, [pc, #288]	; (80198bc <makeDHCPMSG+0x210>)
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	2200      	movs	r2, #0
 80197a0:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80197a2:	4b46      	ldr	r3, [pc, #280]	; (80198bc <makeDHCPMSG+0x210>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	2200      	movs	r2, #0
 80197a8:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80197aa:	4b44      	ldr	r3, [pc, #272]	; (80198bc <makeDHCPMSG+0x210>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	2200      	movs	r2, #0
 80197b0:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80197b2:	4b42      	ldr	r3, [pc, #264]	; (80198bc <makeDHCPMSG+0x210>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	2200      	movs	r2, #0
 80197b8:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80197ba:	4b40      	ldr	r3, [pc, #256]	; (80198bc <makeDHCPMSG+0x210>)
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	4a41      	ldr	r2, [pc, #260]	; (80198c4 <makeDHCPMSG+0x218>)
 80197c0:	7812      	ldrb	r2, [r2, #0]
 80197c2:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80197c4:	4b3d      	ldr	r3, [pc, #244]	; (80198bc <makeDHCPMSG+0x210>)
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	4a3e      	ldr	r2, [pc, #248]	; (80198c4 <makeDHCPMSG+0x218>)
 80197ca:	7852      	ldrb	r2, [r2, #1]
 80197cc:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80197ce:	4b3b      	ldr	r3, [pc, #236]	; (80198bc <makeDHCPMSG+0x210>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	4a3c      	ldr	r2, [pc, #240]	; (80198c4 <makeDHCPMSG+0x218>)
 80197d4:	7892      	ldrb	r2, [r2, #2]
 80197d6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80197d8:	4b38      	ldr	r3, [pc, #224]	; (80198bc <makeDHCPMSG+0x210>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	4a39      	ldr	r2, [pc, #228]	; (80198c4 <makeDHCPMSG+0x218>)
 80197de:	78d2      	ldrb	r2, [r2, #3]
 80197e0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80197e2:	4b36      	ldr	r3, [pc, #216]	; (80198bc <makeDHCPMSG+0x210>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	4a37      	ldr	r2, [pc, #220]	; (80198c4 <makeDHCPMSG+0x218>)
 80197e8:	7911      	ldrb	r1, [r2, #4]
 80197ea:	2220      	movs	r2, #32
 80197ec:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80197ee:	4b33      	ldr	r3, [pc, #204]	; (80198bc <makeDHCPMSG+0x210>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	4a34      	ldr	r2, [pc, #208]	; (80198c4 <makeDHCPMSG+0x218>)
 80197f4:	7951      	ldrb	r1, [r2, #5]
 80197f6:	2221      	movs	r2, #33	; 0x21
 80197f8:	5499      	strb	r1, [r3, r2]

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80197fa:	230f      	movs	r3, #15
 80197fc:	18fb      	adds	r3, r7, r3
 80197fe:	2206      	movs	r2, #6
 8019800:	701a      	strb	r2, [r3, #0]
 8019802:	e00c      	b.n	801981e <makeDHCPMSG+0x172>
 8019804:	4b2d      	ldr	r3, [pc, #180]	; (80198bc <makeDHCPMSG+0x210>)
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	210f      	movs	r1, #15
 801980a:	187b      	adds	r3, r7, r1
 801980c:	781b      	ldrb	r3, [r3, #0]
 801980e:	18d3      	adds	r3, r2, r3
 8019810:	2200      	movs	r2, #0
 8019812:	771a      	strb	r2, [r3, #28]
 8019814:	187b      	adds	r3, r7, r1
 8019816:	781a      	ldrb	r2, [r3, #0]
 8019818:	187b      	adds	r3, r7, r1
 801981a:	3201      	adds	r2, #1
 801981c:	701a      	strb	r2, [r3, #0]
 801981e:	220f      	movs	r2, #15
 8019820:	18bb      	adds	r3, r7, r2
 8019822:	781b      	ldrb	r3, [r3, #0]
 8019824:	2b0f      	cmp	r3, #15
 8019826:	d9ed      	bls.n	8019804 <makeDHCPMSG+0x158>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8019828:	18bb      	adds	r3, r7, r2
 801982a:	2200      	movs	r2, #0
 801982c:	701a      	strb	r2, [r3, #0]
 801982e:	e00e      	b.n	801984e <makeDHCPMSG+0x1a2>
 8019830:	4b22      	ldr	r3, [pc, #136]	; (80198bc <makeDHCPMSG+0x210>)
 8019832:	681a      	ldr	r2, [r3, #0]
 8019834:	200f      	movs	r0, #15
 8019836:	183b      	adds	r3, r7, r0
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	212c      	movs	r1, #44	; 0x2c
 801983c:	18d3      	adds	r3, r2, r3
 801983e:	185b      	adds	r3, r3, r1
 8019840:	2200      	movs	r2, #0
 8019842:	701a      	strb	r2, [r3, #0]
 8019844:	183b      	adds	r3, r7, r0
 8019846:	781a      	ldrb	r2, [r3, #0]
 8019848:	183b      	adds	r3, r7, r0
 801984a:	3201      	adds	r2, #1
 801984c:	701a      	strb	r2, [r3, #0]
 801984e:	220f      	movs	r2, #15
 8019850:	18bb      	adds	r3, r7, r2
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	2b3f      	cmp	r3, #63	; 0x3f
 8019856:	d9eb      	bls.n	8019830 <makeDHCPMSG+0x184>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8019858:	18bb      	adds	r3, r7, r2
 801985a:	2200      	movs	r2, #0
 801985c:	701a      	strb	r2, [r3, #0]
 801985e:	e00e      	b.n	801987e <makeDHCPMSG+0x1d2>
 8019860:	4b16      	ldr	r3, [pc, #88]	; (80198bc <makeDHCPMSG+0x210>)
 8019862:	681a      	ldr	r2, [r3, #0]
 8019864:	200f      	movs	r0, #15
 8019866:	183b      	adds	r3, r7, r0
 8019868:	781b      	ldrb	r3, [r3, #0]
 801986a:	216c      	movs	r1, #108	; 0x6c
 801986c:	18d3      	adds	r3, r2, r3
 801986e:	185b      	adds	r3, r3, r1
 8019870:	2200      	movs	r2, #0
 8019872:	701a      	strb	r2, [r3, #0]
 8019874:	183b      	adds	r3, r7, r0
 8019876:	781a      	ldrb	r2, [r3, #0]
 8019878:	183b      	adds	r3, r7, r0
 801987a:	3201      	adds	r2, #1
 801987c:	701a      	strb	r2, [r3, #0]
 801987e:	230f      	movs	r3, #15
 8019880:	18fb      	adds	r3, r7, r3
 8019882:	781b      	ldrb	r3, [r3, #0]
 8019884:	b25b      	sxtb	r3, r3
 8019886:	2b00      	cmp	r3, #0
 8019888:	daea      	bge.n	8019860 <makeDHCPMSG+0x1b4>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801988a:	4b0c      	ldr	r3, [pc, #48]	; (80198bc <makeDHCPMSG+0x210>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	22ec      	movs	r2, #236	; 0xec
 8019890:	2163      	movs	r1, #99	; 0x63
 8019892:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8019894:	4b09      	ldr	r3, [pc, #36]	; (80198bc <makeDHCPMSG+0x210>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	22ed      	movs	r2, #237	; 0xed
 801989a:	2182      	movs	r1, #130	; 0x82
 801989c:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801989e:	4b07      	ldr	r3, [pc, #28]	; (80198bc <makeDHCPMSG+0x210>)
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	22ee      	movs	r2, #238	; 0xee
 80198a4:	2153      	movs	r1, #83	; 0x53
 80198a6:	5499      	strb	r1, [r3, r2]
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80198a8:	4b04      	ldr	r3, [pc, #16]	; (80198bc <makeDHCPMSG+0x210>)
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	22ef      	movs	r2, #239	; 0xef
 80198ae:	2163      	movs	r1, #99	; 0x63
 80198b0:	5499      	strb	r1, [r3, r2]
}
 80198b2:	46c0      	nop			; (mov r8, r8)
 80198b4:	46bd      	mov	sp, r7
 80198b6:	b004      	add	sp, #16
 80198b8:	bd80      	pop	{r7, pc}
 80198ba:	46c0      	nop			; (mov r8, r8)
 80198bc:	20007af8 	.word	0x20007af8
 80198c0:	20007af4 	.word	0x20007af4
 80198c4:	20007afc 	.word	0x20007afc

080198c8 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80198c8:	b5b0      	push	{r4, r5, r7, lr}
 80198ca:	b084      	sub	sp, #16
 80198cc:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80198ce:	1d3b      	adds	r3, r7, #4
 80198d0:	2200      	movs	r2, #0
 80198d2:	801a      	strh	r2, [r3, #0]
   
   makeDHCPMSG();
 80198d4:	f7ff feea 	bl	80196ac <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80198d8:	4b6c      	ldr	r3, [pc, #432]	; (8019a8c <send_DHCP_DISCOVER+0x1c4>)
 80198da:	2200      	movs	r2, #0
 80198dc:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80198de:	4b6b      	ldr	r3, [pc, #428]	; (8019a8c <send_DHCP_DISCOVER+0x1c4>)
 80198e0:	2200      	movs	r2, #0
 80198e2:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80198e4:	4b69      	ldr	r3, [pc, #420]	; (8019a8c <send_DHCP_DISCOVER+0x1c4>)
 80198e6:	2200      	movs	r2, #0
 80198e8:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80198ea:	4b68      	ldr	r3, [pc, #416]	; (8019a8c <send_DHCP_DISCOVER+0x1c4>)
 80198ec:	2200      	movs	r2, #0
 80198ee:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80198f0:	4b67      	ldr	r3, [pc, #412]	; (8019a90 <send_DHCP_DISCOVER+0x1c8>)
 80198f2:	2200      	movs	r2, #0
 80198f4:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80198f6:	4b66      	ldr	r3, [pc, #408]	; (8019a90 <send_DHCP_DISCOVER+0x1c8>)
 80198f8:	2200      	movs	r2, #0
 80198fa:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80198fc:	4b64      	ldr	r3, [pc, #400]	; (8019a90 <send_DHCP_DISCOVER+0x1c8>)
 80198fe:	2200      	movs	r2, #0
 8019900:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8019902:	4b63      	ldr	r3, [pc, #396]	; (8019a90 <send_DHCP_DISCOVER+0x1c8>)
 8019904:	2200      	movs	r2, #0
 8019906:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8019908:	1d3b      	adds	r3, r7, #4
 801990a:	2204      	movs	r2, #4
 801990c:	801a      	strh	r2, [r3, #0]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801990e:	4b61      	ldr	r3, [pc, #388]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019910:	681a      	ldr	r2, [r3, #0]
 8019912:	1d3b      	adds	r3, r7, #4
 8019914:	881b      	ldrh	r3, [r3, #0]
 8019916:	1d39      	adds	r1, r7, #4
 8019918:	1c58      	adds	r0, r3, #1
 801991a:	8008      	strh	r0, [r1, #0]
 801991c:	21ec      	movs	r1, #236	; 0xec
 801991e:	18d3      	adds	r3, r2, r3
 8019920:	185b      	adds	r3, r3, r1
 8019922:	2235      	movs	r2, #53	; 0x35
 8019924:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 8019926:	4b5b      	ldr	r3, [pc, #364]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019928:	681a      	ldr	r2, [r3, #0]
 801992a:	1d3b      	adds	r3, r7, #4
 801992c:	881b      	ldrh	r3, [r3, #0]
 801992e:	1d39      	adds	r1, r7, #4
 8019930:	1c58      	adds	r0, r3, #1
 8019932:	8008      	strh	r0, [r1, #0]
 8019934:	21ec      	movs	r1, #236	; 0xec
 8019936:	18d3      	adds	r3, r2, r3
 8019938:	185b      	adds	r3, r3, r1
 801993a:	2201      	movs	r2, #1
 801993c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801993e:	4b55      	ldr	r3, [pc, #340]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019940:	681a      	ldr	r2, [r3, #0]
 8019942:	1d3b      	adds	r3, r7, #4
 8019944:	881b      	ldrh	r3, [r3, #0]
 8019946:	1d39      	adds	r1, r7, #4
 8019948:	1c58      	adds	r0, r3, #1
 801994a:	8008      	strh	r0, [r1, #0]
 801994c:	21ec      	movs	r1, #236	; 0xec
 801994e:	18d3      	adds	r3, r2, r3
 8019950:	185b      	adds	r3, r3, r1
 8019952:	2201      	movs	r2, #1
 8019954:	701a      	strb	r2, [r3, #0]
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8019956:	4b4f      	ldr	r3, [pc, #316]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019958:	681a      	ldr	r2, [r3, #0]
 801995a:	1d3b      	adds	r3, r7, #4
 801995c:	881b      	ldrh	r3, [r3, #0]
 801995e:	1d39      	adds	r1, r7, #4
 8019960:	1c58      	adds	r0, r3, #1
 8019962:	8008      	strh	r0, [r1, #0]
 8019964:	21ec      	movs	r1, #236	; 0xec
 8019966:	18d3      	adds	r3, r2, r3
 8019968:	185b      	adds	r3, r3, r1
 801996a:	223d      	movs	r2, #61	; 0x3d
 801996c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 801996e:	4b49      	ldr	r3, [pc, #292]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019970:	681a      	ldr	r2, [r3, #0]
 8019972:	1d3b      	adds	r3, r7, #4
 8019974:	881b      	ldrh	r3, [r3, #0]
 8019976:	1d39      	adds	r1, r7, #4
 8019978:	1c58      	adds	r0, r3, #1
 801997a:	8008      	strh	r0, [r1, #0]
 801997c:	21ec      	movs	r1, #236	; 0xec
 801997e:	18d3      	adds	r3, r2, r3
 8019980:	185b      	adds	r3, r3, r1
 8019982:	2207      	movs	r2, #7
 8019984:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 8019986:	4b43      	ldr	r3, [pc, #268]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019988:	681a      	ldr	r2, [r3, #0]
 801998a:	1d3b      	adds	r3, r7, #4
 801998c:	881b      	ldrh	r3, [r3, #0]
 801998e:	1d39      	adds	r1, r7, #4
 8019990:	1c58      	adds	r0, r3, #1
 8019992:	8008      	strh	r0, [r1, #0]
 8019994:	21ec      	movs	r1, #236	; 0xec
 8019996:	18d3      	adds	r3, r2, r3
 8019998:	185b      	adds	r3, r3, r1
 801999a:	2201      	movs	r2, #1
 801999c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801999e:	4b3d      	ldr	r3, [pc, #244]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 80199a0:	681a      	ldr	r2, [r3, #0]
 80199a2:	1d3b      	adds	r3, r7, #4
 80199a4:	881b      	ldrh	r3, [r3, #0]
 80199a6:	1d39      	adds	r1, r7, #4
 80199a8:	1c58      	adds	r0, r3, #1
 80199aa:	8008      	strh	r0, [r1, #0]
 80199ac:	001c      	movs	r4, r3
 80199ae:	4b3a      	ldr	r3, [pc, #232]	; (8019a98 <send_DHCP_DISCOVER+0x1d0>)
 80199b0:	7818      	ldrb	r0, [r3, #0]
 80199b2:	21ec      	movs	r1, #236	; 0xec
 80199b4:	1913      	adds	r3, r2, r4
 80199b6:	185b      	adds	r3, r3, r1
 80199b8:	1c02      	adds	r2, r0, #0
 80199ba:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80199bc:	4b35      	ldr	r3, [pc, #212]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 80199be:	681a      	ldr	r2, [r3, #0]
 80199c0:	1d3b      	adds	r3, r7, #4
 80199c2:	881b      	ldrh	r3, [r3, #0]
 80199c4:	1d39      	adds	r1, r7, #4
 80199c6:	1c58      	adds	r0, r3, #1
 80199c8:	8008      	strh	r0, [r1, #0]
 80199ca:	001c      	movs	r4, r3
 80199cc:	4b32      	ldr	r3, [pc, #200]	; (8019a98 <send_DHCP_DISCOVER+0x1d0>)
 80199ce:	7858      	ldrb	r0, [r3, #1]
 80199d0:	21ec      	movs	r1, #236	; 0xec
 80199d2:	1913      	adds	r3, r2, r4
 80199d4:	185b      	adds	r3, r3, r1
 80199d6:	1c02      	adds	r2, r0, #0
 80199d8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80199da:	4b2e      	ldr	r3, [pc, #184]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 80199dc:	681a      	ldr	r2, [r3, #0]
 80199de:	1d3b      	adds	r3, r7, #4
 80199e0:	881b      	ldrh	r3, [r3, #0]
 80199e2:	1d39      	adds	r1, r7, #4
 80199e4:	1c58      	adds	r0, r3, #1
 80199e6:	8008      	strh	r0, [r1, #0]
 80199e8:	001c      	movs	r4, r3
 80199ea:	4b2b      	ldr	r3, [pc, #172]	; (8019a98 <send_DHCP_DISCOVER+0x1d0>)
 80199ec:	7898      	ldrb	r0, [r3, #2]
 80199ee:	21ec      	movs	r1, #236	; 0xec
 80199f0:	1913      	adds	r3, r2, r4
 80199f2:	185b      	adds	r3, r3, r1
 80199f4:	1c02      	adds	r2, r0, #0
 80199f6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80199f8:	4b26      	ldr	r3, [pc, #152]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 80199fa:	681a      	ldr	r2, [r3, #0]
 80199fc:	1d3b      	adds	r3, r7, #4
 80199fe:	881b      	ldrh	r3, [r3, #0]
 8019a00:	1d39      	adds	r1, r7, #4
 8019a02:	1c58      	adds	r0, r3, #1
 8019a04:	8008      	strh	r0, [r1, #0]
 8019a06:	001c      	movs	r4, r3
 8019a08:	4b23      	ldr	r3, [pc, #140]	; (8019a98 <send_DHCP_DISCOVER+0x1d0>)
 8019a0a:	78d8      	ldrb	r0, [r3, #3]
 8019a0c:	21ec      	movs	r1, #236	; 0xec
 8019a0e:	1913      	adds	r3, r2, r4
 8019a10:	185b      	adds	r3, r3, r1
 8019a12:	1c02      	adds	r2, r0, #0
 8019a14:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8019a16:	4b1f      	ldr	r3, [pc, #124]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019a18:	681a      	ldr	r2, [r3, #0]
 8019a1a:	1d3b      	adds	r3, r7, #4
 8019a1c:	881b      	ldrh	r3, [r3, #0]
 8019a1e:	1d39      	adds	r1, r7, #4
 8019a20:	1c58      	adds	r0, r3, #1
 8019a22:	8008      	strh	r0, [r1, #0]
 8019a24:	001c      	movs	r4, r3
 8019a26:	4b1c      	ldr	r3, [pc, #112]	; (8019a98 <send_DHCP_DISCOVER+0x1d0>)
 8019a28:	7918      	ldrb	r0, [r3, #4]
 8019a2a:	21ec      	movs	r1, #236	; 0xec
 8019a2c:	1913      	adds	r3, r2, r4
 8019a2e:	185b      	adds	r3, r3, r1
 8019a30:	1c02      	adds	r2, r0, #0
 8019a32:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8019a34:	4b17      	ldr	r3, [pc, #92]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019a36:	681a      	ldr	r2, [r3, #0]
 8019a38:	1d3b      	adds	r3, r7, #4
 8019a3a:	881b      	ldrh	r3, [r3, #0]
 8019a3c:	1d39      	adds	r1, r7, #4
 8019a3e:	1c58      	adds	r0, r3, #1
 8019a40:	8008      	strh	r0, [r1, #0]
 8019a42:	001c      	movs	r4, r3
 8019a44:	4b14      	ldr	r3, [pc, #80]	; (8019a98 <send_DHCP_DISCOVER+0x1d0>)
 8019a46:	7958      	ldrb	r0, [r3, #5]
 8019a48:	21ec      	movs	r1, #236	; 0xec
 8019a4a:	1913      	adds	r3, r2, r4
 8019a4c:	185b      	adds	r3, r3, r1
 8019a4e:	1c02      	adds	r2, r0, #0
 8019a50:	701a      	strb	r2, [r3, #0]
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8019a52:	4b10      	ldr	r3, [pc, #64]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019a54:	681a      	ldr	r2, [r3, #0]
 8019a56:	1d3b      	adds	r3, r7, #4
 8019a58:	881b      	ldrh	r3, [r3, #0]
 8019a5a:	1d39      	adds	r1, r7, #4
 8019a5c:	1c58      	adds	r0, r3, #1
 8019a5e:	8008      	strh	r0, [r1, #0]
 8019a60:	21ec      	movs	r1, #236	; 0xec
 8019a62:	18d3      	adds	r3, r2, r3
 8019a64:	185b      	adds	r3, r3, r1
 8019a66:	220c      	movs	r2, #12
 8019a68:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8019a6a:	4b0a      	ldr	r3, [pc, #40]	; (8019a94 <send_DHCP_DISCOVER+0x1cc>)
 8019a6c:	681a      	ldr	r2, [r3, #0]
 8019a6e:	1d3b      	adds	r3, r7, #4
 8019a70:	881b      	ldrh	r3, [r3, #0]
 8019a72:	1d39      	adds	r1, r7, #4
 8019a74:	1c58      	adds	r0, r3, #1
 8019a76:	8008      	strh	r0, [r1, #0]
 8019a78:	21ec      	movs	r1, #236	; 0xec
 8019a7a:	18d3      	adds	r3, r2, r3
 8019a7c:	185b      	adds	r3, r3, r1
 8019a7e:	2200      	movs	r2, #0
 8019a80:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8019a82:	1dbb      	adds	r3, r7, #6
 8019a84:	2200      	movs	r2, #0
 8019a86:	801a      	strh	r2, [r3, #0]
 8019a88:	e01e      	b.n	8019ac8 <send_DHCP_DISCOVER+0x200>
 8019a8a:	46c0      	nop			; (mov r8, r8)
 8019a8c:	20007ad0 	.word	0x20007ad0
 8019a90:	20007ad4 	.word	0x20007ad4
 8019a94:	20007af8 	.word	0x20007af8
 8019a98:	20007afc 	.word	0x20007afc
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8019a9c:	1dbb      	adds	r3, r7, #6
 8019a9e:	8819      	ldrh	r1, [r3, #0]
 8019aa0:	4ba4      	ldr	r3, [pc, #656]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019aa2:	681a      	ldr	r2, [r3, #0]
 8019aa4:	1d3b      	adds	r3, r7, #4
 8019aa6:	881b      	ldrh	r3, [r3, #0]
 8019aa8:	1d38      	adds	r0, r7, #4
 8019aaa:	1c5c      	adds	r4, r3, #1
 8019aac:	8004      	strh	r4, [r0, #0]
 8019aae:	001c      	movs	r4, r3
 8019ab0:	4ba1      	ldr	r3, [pc, #644]	; (8019d38 <send_DHCP_DISCOVER+0x470>)
 8019ab2:	5c58      	ldrb	r0, [r3, r1]
 8019ab4:	21ec      	movs	r1, #236	; 0xec
 8019ab6:	1913      	adds	r3, r2, r4
 8019ab8:	185b      	adds	r3, r3, r1
 8019aba:	1c02      	adds	r2, r0, #0
 8019abc:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8019abe:	1dbb      	adds	r3, r7, #6
 8019ac0:	881a      	ldrh	r2, [r3, #0]
 8019ac2:	1dbb      	adds	r3, r7, #6
 8019ac4:	3201      	adds	r2, #1
 8019ac6:	801a      	strh	r2, [r3, #0]
 8019ac8:	1dbb      	adds	r3, r7, #6
 8019aca:	881b      	ldrh	r3, [r3, #0]
 8019acc:	4a9a      	ldr	r2, [pc, #616]	; (8019d38 <send_DHCP_DISCOVER+0x470>)
 8019ace:	5cd3      	ldrb	r3, [r2, r3]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d1e3      	bne.n	8019a9c <send_DHCP_DISCOVER+0x1d4>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8019ad4:	4b99      	ldr	r3, [pc, #612]	; (8019d3c <send_DHCP_DISCOVER+0x474>)
 8019ad6:	78db      	ldrb	r3, [r3, #3]
 8019ad8:	091b      	lsrs	r3, r3, #4
 8019ada:	b2d9      	uxtb	r1, r3
 8019adc:	4b95      	ldr	r3, [pc, #596]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019ade:	681c      	ldr	r4, [r3, #0]
 8019ae0:	1d3b      	adds	r3, r7, #4
 8019ae2:	881b      	ldrh	r3, [r3, #0]
 8019ae4:	1d3a      	adds	r2, r7, #4
 8019ae6:	1c58      	adds	r0, r3, #1
 8019ae8:	8010      	strh	r0, [r2, #0]
 8019aea:	001d      	movs	r5, r3
 8019aec:	0008      	movs	r0, r1
 8019aee:	f001 fa55 	bl	801af9c <NibbleToHex>
 8019af2:	0003      	movs	r3, r0
 8019af4:	0019      	movs	r1, r3
 8019af6:	22ec      	movs	r2, #236	; 0xec
 8019af8:	1963      	adds	r3, r4, r5
 8019afa:	189b      	adds	r3, r3, r2
 8019afc:	1c0a      	adds	r2, r1, #0
 8019afe:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8019b00:	4b8e      	ldr	r3, [pc, #568]	; (8019d3c <send_DHCP_DISCOVER+0x474>)
 8019b02:	78d9      	ldrb	r1, [r3, #3]
 8019b04:	4b8b      	ldr	r3, [pc, #556]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019b06:	681c      	ldr	r4, [r3, #0]
 8019b08:	1d3b      	adds	r3, r7, #4
 8019b0a:	881b      	ldrh	r3, [r3, #0]
 8019b0c:	1d3a      	adds	r2, r7, #4
 8019b0e:	1c58      	adds	r0, r3, #1
 8019b10:	8010      	strh	r0, [r2, #0]
 8019b12:	001d      	movs	r5, r3
 8019b14:	0008      	movs	r0, r1
 8019b16:	f001 fa41 	bl	801af9c <NibbleToHex>
 8019b1a:	0003      	movs	r3, r0
 8019b1c:	0019      	movs	r1, r3
 8019b1e:	22ec      	movs	r2, #236	; 0xec
 8019b20:	1963      	adds	r3, r4, r5
 8019b22:	189b      	adds	r3, r3, r2
 8019b24:	1c0a      	adds	r2, r1, #0
 8019b26:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8019b28:	4b84      	ldr	r3, [pc, #528]	; (8019d3c <send_DHCP_DISCOVER+0x474>)
 8019b2a:	791b      	ldrb	r3, [r3, #4]
 8019b2c:	091b      	lsrs	r3, r3, #4
 8019b2e:	b2d9      	uxtb	r1, r3
 8019b30:	4b80      	ldr	r3, [pc, #512]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019b32:	681c      	ldr	r4, [r3, #0]
 8019b34:	1d3b      	adds	r3, r7, #4
 8019b36:	881b      	ldrh	r3, [r3, #0]
 8019b38:	1d3a      	adds	r2, r7, #4
 8019b3a:	1c58      	adds	r0, r3, #1
 8019b3c:	8010      	strh	r0, [r2, #0]
 8019b3e:	001d      	movs	r5, r3
 8019b40:	0008      	movs	r0, r1
 8019b42:	f001 fa2b 	bl	801af9c <NibbleToHex>
 8019b46:	0003      	movs	r3, r0
 8019b48:	0019      	movs	r1, r3
 8019b4a:	22ec      	movs	r2, #236	; 0xec
 8019b4c:	1963      	adds	r3, r4, r5
 8019b4e:	189b      	adds	r3, r3, r2
 8019b50:	1c0a      	adds	r2, r1, #0
 8019b52:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8019b54:	4b79      	ldr	r3, [pc, #484]	; (8019d3c <send_DHCP_DISCOVER+0x474>)
 8019b56:	7919      	ldrb	r1, [r3, #4]
 8019b58:	4b76      	ldr	r3, [pc, #472]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019b5a:	681c      	ldr	r4, [r3, #0]
 8019b5c:	1d3b      	adds	r3, r7, #4
 8019b5e:	881b      	ldrh	r3, [r3, #0]
 8019b60:	1d3a      	adds	r2, r7, #4
 8019b62:	1c58      	adds	r0, r3, #1
 8019b64:	8010      	strh	r0, [r2, #0]
 8019b66:	001d      	movs	r5, r3
 8019b68:	0008      	movs	r0, r1
 8019b6a:	f001 fa17 	bl	801af9c <NibbleToHex>
 8019b6e:	0003      	movs	r3, r0
 8019b70:	0019      	movs	r1, r3
 8019b72:	22ec      	movs	r2, #236	; 0xec
 8019b74:	1963      	adds	r3, r4, r5
 8019b76:	189b      	adds	r3, r3, r2
 8019b78:	1c0a      	adds	r2, r1, #0
 8019b7a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8019b7c:	4b6f      	ldr	r3, [pc, #444]	; (8019d3c <send_DHCP_DISCOVER+0x474>)
 8019b7e:	795b      	ldrb	r3, [r3, #5]
 8019b80:	091b      	lsrs	r3, r3, #4
 8019b82:	b2d9      	uxtb	r1, r3
 8019b84:	4b6b      	ldr	r3, [pc, #428]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019b86:	681c      	ldr	r4, [r3, #0]
 8019b88:	1d3b      	adds	r3, r7, #4
 8019b8a:	881b      	ldrh	r3, [r3, #0]
 8019b8c:	1d3a      	adds	r2, r7, #4
 8019b8e:	1c58      	adds	r0, r3, #1
 8019b90:	8010      	strh	r0, [r2, #0]
 8019b92:	001d      	movs	r5, r3
 8019b94:	0008      	movs	r0, r1
 8019b96:	f001 fa01 	bl	801af9c <NibbleToHex>
 8019b9a:	0003      	movs	r3, r0
 8019b9c:	0019      	movs	r1, r3
 8019b9e:	22ec      	movs	r2, #236	; 0xec
 8019ba0:	1963      	adds	r3, r4, r5
 8019ba2:	189b      	adds	r3, r3, r2
 8019ba4:	1c0a      	adds	r2, r1, #0
 8019ba6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8019ba8:	4b64      	ldr	r3, [pc, #400]	; (8019d3c <send_DHCP_DISCOVER+0x474>)
 8019baa:	7959      	ldrb	r1, [r3, #5]
 8019bac:	4b61      	ldr	r3, [pc, #388]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019bae:	681c      	ldr	r4, [r3, #0]
 8019bb0:	1d3b      	adds	r3, r7, #4
 8019bb2:	881b      	ldrh	r3, [r3, #0]
 8019bb4:	1d3a      	adds	r2, r7, #4
 8019bb6:	1c58      	adds	r0, r3, #1
 8019bb8:	8010      	strh	r0, [r2, #0]
 8019bba:	001d      	movs	r5, r3
 8019bbc:	0008      	movs	r0, r1
 8019bbe:	f001 f9ed 	bl	801af9c <NibbleToHex>
 8019bc2:	0003      	movs	r3, r0
 8019bc4:	0019      	movs	r1, r3
 8019bc6:	22ec      	movs	r2, #236	; 0xec
 8019bc8:	1963      	adds	r3, r4, r5
 8019bca:	189b      	adds	r3, r3, r2
 8019bcc:	1c0a      	adds	r2, r1, #0
 8019bce:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8019bd0:	1dbb      	adds	r3, r7, #6
 8019bd2:	881b      	ldrh	r3, [r3, #0]
 8019bd4:	b2d9      	uxtb	r1, r3
 8019bd6:	4b57      	ldr	r3, [pc, #348]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019bd8:	681a      	ldr	r2, [r3, #0]
 8019bda:	1d3b      	adds	r3, r7, #4
 8019bdc:	8818      	ldrh	r0, [r3, #0]
 8019bde:	1dbb      	adds	r3, r7, #6
 8019be0:	881b      	ldrh	r3, [r3, #0]
 8019be2:	3307      	adds	r3, #7
 8019be4:	1ac3      	subs	r3, r0, r3
 8019be6:	3106      	adds	r1, #6
 8019be8:	b2c8      	uxtb	r0, r1
 8019bea:	21ec      	movs	r1, #236	; 0xec
 8019bec:	18d3      	adds	r3, r2, r3
 8019bee:	185b      	adds	r3, r3, r1
 8019bf0:	1c02      	adds	r2, r0, #0
 8019bf2:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8019bf4:	4b4f      	ldr	r3, [pc, #316]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019bf6:	681a      	ldr	r2, [r3, #0]
 8019bf8:	1d3b      	adds	r3, r7, #4
 8019bfa:	881b      	ldrh	r3, [r3, #0]
 8019bfc:	1d39      	adds	r1, r7, #4
 8019bfe:	1c58      	adds	r0, r3, #1
 8019c00:	8008      	strh	r0, [r1, #0]
 8019c02:	21ec      	movs	r1, #236	; 0xec
 8019c04:	18d3      	adds	r3, r2, r3
 8019c06:	185b      	adds	r3, r3, r1
 8019c08:	2237      	movs	r2, #55	; 0x37
 8019c0a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8019c0c:	4b49      	ldr	r3, [pc, #292]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019c0e:	681a      	ldr	r2, [r3, #0]
 8019c10:	1d3b      	adds	r3, r7, #4
 8019c12:	881b      	ldrh	r3, [r3, #0]
 8019c14:	1d39      	adds	r1, r7, #4
 8019c16:	1c58      	adds	r0, r3, #1
 8019c18:	8008      	strh	r0, [r1, #0]
 8019c1a:	21ec      	movs	r1, #236	; 0xec
 8019c1c:	18d3      	adds	r3, r2, r3
 8019c1e:	185b      	adds	r3, r3, r1
 8019c20:	2206      	movs	r2, #6
 8019c22:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = subnetMask;
 8019c24:	4b43      	ldr	r3, [pc, #268]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019c26:	681a      	ldr	r2, [r3, #0]
 8019c28:	1d3b      	adds	r3, r7, #4
 8019c2a:	881b      	ldrh	r3, [r3, #0]
 8019c2c:	1d39      	adds	r1, r7, #4
 8019c2e:	1c58      	adds	r0, r3, #1
 8019c30:	8008      	strh	r0, [r1, #0]
 8019c32:	21ec      	movs	r1, #236	; 0xec
 8019c34:	18d3      	adds	r3, r2, r3
 8019c36:	185b      	adds	r3, r3, r1
 8019c38:	2201      	movs	r2, #1
 8019c3a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8019c3c:	4b3d      	ldr	r3, [pc, #244]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019c3e:	681a      	ldr	r2, [r3, #0]
 8019c40:	1d3b      	adds	r3, r7, #4
 8019c42:	881b      	ldrh	r3, [r3, #0]
 8019c44:	1d39      	adds	r1, r7, #4
 8019c46:	1c58      	adds	r0, r3, #1
 8019c48:	8008      	strh	r0, [r1, #0]
 8019c4a:	21ec      	movs	r1, #236	; 0xec
 8019c4c:	18d3      	adds	r3, r2, r3
 8019c4e:	185b      	adds	r3, r3, r1
 8019c50:	2203      	movs	r2, #3
 8019c52:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dns;
 8019c54:	4b37      	ldr	r3, [pc, #220]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019c56:	681a      	ldr	r2, [r3, #0]
 8019c58:	1d3b      	adds	r3, r7, #4
 8019c5a:	881b      	ldrh	r3, [r3, #0]
 8019c5c:	1d39      	adds	r1, r7, #4
 8019c5e:	1c58      	adds	r0, r3, #1
 8019c60:	8008      	strh	r0, [r1, #0]
 8019c62:	21ec      	movs	r1, #236	; 0xec
 8019c64:	18d3      	adds	r3, r2, r3
 8019c66:	185b      	adds	r3, r3, r1
 8019c68:	2206      	movs	r2, #6
 8019c6a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = domainName;
 8019c6c:	4b31      	ldr	r3, [pc, #196]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019c6e:	681a      	ldr	r2, [r3, #0]
 8019c70:	1d3b      	adds	r3, r7, #4
 8019c72:	881b      	ldrh	r3, [r3, #0]
 8019c74:	1d39      	adds	r1, r7, #4
 8019c76:	1c58      	adds	r0, r3, #1
 8019c78:	8008      	strh	r0, [r1, #0]
 8019c7a:	21ec      	movs	r1, #236	; 0xec
 8019c7c:	18d3      	adds	r3, r2, r3
 8019c7e:	185b      	adds	r3, r3, r1
 8019c80:	220f      	movs	r2, #15
 8019c82:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8019c84:	4b2b      	ldr	r3, [pc, #172]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019c86:	681a      	ldr	r2, [r3, #0]
 8019c88:	1d3b      	adds	r3, r7, #4
 8019c8a:	881b      	ldrh	r3, [r3, #0]
 8019c8c:	1d39      	adds	r1, r7, #4
 8019c8e:	1c58      	adds	r0, r3, #1
 8019c90:	8008      	strh	r0, [r1, #0]
 8019c92:	21ec      	movs	r1, #236	; 0xec
 8019c94:	18d3      	adds	r3, r2, r3
 8019c96:	185b      	adds	r3, r3, r1
 8019c98:	223a      	movs	r2, #58	; 0x3a
 8019c9a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8019c9c:	4b25      	ldr	r3, [pc, #148]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	1d3b      	adds	r3, r7, #4
 8019ca2:	881b      	ldrh	r3, [r3, #0]
 8019ca4:	1d39      	adds	r1, r7, #4
 8019ca6:	1c58      	adds	r0, r3, #1
 8019ca8:	8008      	strh	r0, [r1, #0]
 8019caa:	21ec      	movs	r1, #236	; 0xec
 8019cac:	18d3      	adds	r3, r2, r3
 8019cae:	185b      	adds	r3, r3, r1
 8019cb0:	223b      	movs	r2, #59	; 0x3b
 8019cb2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = endOption;
 8019cb4:	4b1f      	ldr	r3, [pc, #124]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019cb6:	681a      	ldr	r2, [r3, #0]
 8019cb8:	1d3b      	adds	r3, r7, #4
 8019cba:	881b      	ldrh	r3, [r3, #0]
 8019cbc:	1d39      	adds	r1, r7, #4
 8019cbe:	1c58      	adds	r0, r3, #1
 8019cc0:	8008      	strh	r0, [r1, #0]
 8019cc2:	21ec      	movs	r1, #236	; 0xec
 8019cc4:	18d3      	adds	r3, r2, r3
 8019cc6:	185b      	adds	r3, r3, r1
 8019cc8:	22ff      	movs	r2, #255	; 0xff
 8019cca:	701a      	strb	r2, [r3, #0]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8019ccc:	1dbb      	adds	r3, r7, #6
 8019cce:	1d3a      	adds	r2, r7, #4
 8019cd0:	8812      	ldrh	r2, [r2, #0]
 8019cd2:	801a      	strh	r2, [r3, #0]
 8019cd4:	e00d      	b.n	8019cf2 <send_DHCP_DISCOVER+0x42a>
 8019cd6:	4b17      	ldr	r3, [pc, #92]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019cd8:	681a      	ldr	r2, [r3, #0]
 8019cda:	1dbb      	adds	r3, r7, #6
 8019cdc:	881b      	ldrh	r3, [r3, #0]
 8019cde:	21ec      	movs	r1, #236	; 0xec
 8019ce0:	18d3      	adds	r3, r2, r3
 8019ce2:	185b      	adds	r3, r3, r1
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	701a      	strb	r2, [r3, #0]
 8019ce8:	1dbb      	adds	r3, r7, #6
 8019cea:	881a      	ldrh	r2, [r3, #0]
 8019cec:	1dbb      	adds	r3, r7, #6
 8019cee:	3201      	adds	r2, #1
 8019cf0:	801a      	strh	r2, [r3, #0]
 8019cf2:	1dbb      	adds	r3, r7, #6
 8019cf4:	881a      	ldrh	r2, [r3, #0]
 8019cf6:	239c      	movs	r3, #156	; 0x9c
 8019cf8:	005b      	lsls	r3, r3, #1
 8019cfa:	429a      	cmp	r2, r3
 8019cfc:	d3eb      	bcc.n	8019cd6 <send_DHCP_DISCOVER+0x40e>

	// send broadcasting packet
	ip[0] = 255;
 8019cfe:	003b      	movs	r3, r7
 8019d00:	22ff      	movs	r2, #255	; 0xff
 8019d02:	701a      	strb	r2, [r3, #0]
	ip[1] = 255;
 8019d04:	003b      	movs	r3, r7
 8019d06:	22ff      	movs	r2, #255	; 0xff
 8019d08:	705a      	strb	r2, [r3, #1]
	ip[2] = 255;
 8019d0a:	003b      	movs	r3, r7
 8019d0c:	22ff      	movs	r2, #255	; 0xff
 8019d0e:	709a      	strb	r2, [r3, #2]
	ip[3] = 255;
 8019d10:	003b      	movs	r3, r7
 8019d12:	22ff      	movs	r2, #255	; 0xff
 8019d14:	70da      	strb	r2, [r3, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8019d16:	4b0a      	ldr	r3, [pc, #40]	; (8019d40 <send_DHCP_DISCOVER+0x478>)
 8019d18:	7818      	ldrb	r0, [r3, #0]
 8019d1a:	4b06      	ldr	r3, [pc, #24]	; (8019d34 <send_DHCP_DISCOVER+0x46c>)
 8019d1c:	6819      	ldr	r1, [r3, #0]
 8019d1e:	003b      	movs	r3, r7
 8019d20:	2289      	movs	r2, #137	; 0x89
 8019d22:	0092      	lsls	r2, r2, #2
 8019d24:	2443      	movs	r4, #67	; 0x43
 8019d26:	9400      	str	r4, [sp, #0]
 8019d28:	f001 fe0e 	bl	801b948 <sendto>
}
 8019d2c:	46c0      	nop			; (mov r8, r8)
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	b002      	add	sp, #8
 8019d32:	bdb0      	pop	{r4, r5, r7, pc}
 8019d34:	20007af8 	.word	0x20007af8
 8019d38:	2000506c 	.word	0x2000506c
 8019d3c:	20007afc 	.word	0x20007afc
 8019d40:	20007acc 	.word	0x20007acc

08019d44 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8019d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d46:	b087      	sub	sp, #28
 8019d48:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8019d4a:	230a      	movs	r3, #10
 8019d4c:	18fb      	adds	r3, r7, r3
 8019d4e:	2200      	movs	r2, #0
 8019d50:	801a      	strh	r2, [r3, #0]

   makeDHCPMSG();
 8019d52:	f7ff fcab 	bl	80196ac <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8019d56:	4bda      	ldr	r3, [pc, #872]	; (801a0c0 <send_DHCP_REQUEST+0x37c>)
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	b25b      	sxtb	r3, r3
 8019d5c:	2b03      	cmp	r3, #3
 8019d5e:	d004      	beq.n	8019d6a <send_DHCP_REQUEST+0x26>
 8019d60:	4bd7      	ldr	r3, [pc, #860]	; (801a0c0 <send_DHCP_REQUEST+0x37c>)
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	b25b      	sxtb	r3, r3
 8019d66:	2b04      	cmp	r3, #4
 8019d68:	d12f      	bne.n	8019dca <send_DHCP_REQUEST+0x86>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8019d6a:	4bd6      	ldr	r3, [pc, #856]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	330a      	adds	r3, #10
 8019d70:	2200      	movs	r2, #0
 8019d72:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8019d74:	4bd3      	ldr	r3, [pc, #844]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	330a      	adds	r3, #10
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	2200      	movs	r2, #0
 8019d7e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8019d80:	4bd0      	ldr	r3, [pc, #832]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	4ad0      	ldr	r2, [pc, #832]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019d86:	7812      	ldrb	r2, [r2, #0]
 8019d88:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8019d8a:	4bce      	ldr	r3, [pc, #824]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	4ace      	ldr	r2, [pc, #824]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019d90:	7852      	ldrb	r2, [r2, #1]
 8019d92:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8019d94:	4bcb      	ldr	r3, [pc, #812]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	4acb      	ldr	r2, [pc, #812]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019d9a:	7892      	ldrb	r2, [r2, #2]
 8019d9c:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8019d9e:	4bc9      	ldr	r3, [pc, #804]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	4ac9      	ldr	r2, [pc, #804]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019da4:	78d2      	ldrb	r2, [r2, #3]
 8019da6:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8019da8:	4bc8      	ldr	r3, [pc, #800]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 8019daa:	781a      	ldrb	r2, [r3, #0]
 8019dac:	1d3b      	adds	r3, r7, #4
 8019dae:	701a      	strb	r2, [r3, #0]
   	ip[1] = DHCP_SIP[1];
 8019db0:	4bc6      	ldr	r3, [pc, #792]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 8019db2:	785a      	ldrb	r2, [r3, #1]
 8019db4:	1d3b      	adds	r3, r7, #4
 8019db6:	705a      	strb	r2, [r3, #1]
   	ip[2] = DHCP_SIP[2];
 8019db8:	4bc4      	ldr	r3, [pc, #784]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 8019dba:	789a      	ldrb	r2, [r3, #2]
 8019dbc:	1d3b      	adds	r3, r7, #4
 8019dbe:	709a      	strb	r2, [r3, #2]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8019dc0:	4bc2      	ldr	r3, [pc, #776]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 8019dc2:	78da      	ldrb	r2, [r3, #3]
 8019dc4:	1d3b      	adds	r3, r7, #4
 8019dc6:	70da      	strb	r2, [r3, #3]
 8019dc8:	e00b      	b.n	8019de2 <send_DHCP_REQUEST+0x9e>
   }
   else
   {
   	ip[0] = 255;
 8019dca:	1d3b      	adds	r3, r7, #4
 8019dcc:	22ff      	movs	r2, #255	; 0xff
 8019dce:	701a      	strb	r2, [r3, #0]
   	ip[1] = 255;
 8019dd0:	1d3b      	adds	r3, r7, #4
 8019dd2:	22ff      	movs	r2, #255	; 0xff
 8019dd4:	705a      	strb	r2, [r3, #1]
   	ip[2] = 255;
 8019dd6:	1d3b      	adds	r3, r7, #4
 8019dd8:	22ff      	movs	r2, #255	; 0xff
 8019dda:	709a      	strb	r2, [r3, #2]
   	ip[3] = 255;   	   	   	
 8019ddc:	1d3b      	adds	r3, r7, #4
 8019dde:	22ff      	movs	r2, #255	; 0xff
 8019de0:	70da      	strb	r2, [r3, #3]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8019de2:	250a      	movs	r5, #10
 8019de4:	197b      	adds	r3, r7, r5
 8019de6:	2204      	movs	r2, #4
 8019de8:	801a      	strh	r2, [r3, #0]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8019dea:	4bb6      	ldr	r3, [pc, #728]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019dec:	681a      	ldr	r2, [r3, #0]
 8019dee:	197b      	adds	r3, r7, r5
 8019df0:	881b      	ldrh	r3, [r3, #0]
 8019df2:	1979      	adds	r1, r7, r5
 8019df4:	1c58      	adds	r0, r3, #1
 8019df6:	8008      	strh	r0, [r1, #0]
 8019df8:	21ec      	movs	r1, #236	; 0xec
 8019dfa:	18d3      	adds	r3, r2, r3
 8019dfc:	185b      	adds	r3, r3, r1
 8019dfe:	2235      	movs	r2, #53	; 0x35
 8019e00:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 8019e02:	4bb0      	ldr	r3, [pc, #704]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019e04:	681a      	ldr	r2, [r3, #0]
 8019e06:	197b      	adds	r3, r7, r5
 8019e08:	881b      	ldrh	r3, [r3, #0]
 8019e0a:	1979      	adds	r1, r7, r5
 8019e0c:	1c58      	adds	r0, r3, #1
 8019e0e:	8008      	strh	r0, [r1, #0]
 8019e10:	21ec      	movs	r1, #236	; 0xec
 8019e12:	18d3      	adds	r3, r2, r3
 8019e14:	185b      	adds	r3, r3, r1
 8019e16:	2201      	movs	r2, #1
 8019e18:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8019e1a:	4baa      	ldr	r3, [pc, #680]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019e1c:	681a      	ldr	r2, [r3, #0]
 8019e1e:	197b      	adds	r3, r7, r5
 8019e20:	881b      	ldrh	r3, [r3, #0]
 8019e22:	1979      	adds	r1, r7, r5
 8019e24:	1c58      	adds	r0, r3, #1
 8019e26:	8008      	strh	r0, [r1, #0]
 8019e28:	21ec      	movs	r1, #236	; 0xec
 8019e2a:	18d3      	adds	r3, r2, r3
 8019e2c:	185b      	adds	r3, r3, r1
 8019e2e:	2203      	movs	r2, #3
 8019e30:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8019e32:	4ba4      	ldr	r3, [pc, #656]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019e34:	681a      	ldr	r2, [r3, #0]
 8019e36:	197b      	adds	r3, r7, r5
 8019e38:	881b      	ldrh	r3, [r3, #0]
 8019e3a:	1979      	adds	r1, r7, r5
 8019e3c:	1c58      	adds	r0, r3, #1
 8019e3e:	8008      	strh	r0, [r1, #0]
 8019e40:	21ec      	movs	r1, #236	; 0xec
 8019e42:	18d3      	adds	r3, r2, r3
 8019e44:	185b      	adds	r3, r3, r1
 8019e46:	223d      	movs	r2, #61	; 0x3d
 8019e48:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 8019e4a:	4b9e      	ldr	r3, [pc, #632]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019e4c:	681a      	ldr	r2, [r3, #0]
 8019e4e:	197b      	adds	r3, r7, r5
 8019e50:	881b      	ldrh	r3, [r3, #0]
 8019e52:	1979      	adds	r1, r7, r5
 8019e54:	1c58      	adds	r0, r3, #1
 8019e56:	8008      	strh	r0, [r1, #0]
 8019e58:	21ec      	movs	r1, #236	; 0xec
 8019e5a:	18d3      	adds	r3, r2, r3
 8019e5c:	185b      	adds	r3, r3, r1
 8019e5e:	2207      	movs	r2, #7
 8019e60:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 8019e62:	4b98      	ldr	r3, [pc, #608]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019e64:	681a      	ldr	r2, [r3, #0]
 8019e66:	197b      	adds	r3, r7, r5
 8019e68:	881b      	ldrh	r3, [r3, #0]
 8019e6a:	1979      	adds	r1, r7, r5
 8019e6c:	1c58      	adds	r0, r3, #1
 8019e6e:	8008      	strh	r0, [r1, #0]
 8019e70:	21ec      	movs	r1, #236	; 0xec
 8019e72:	18d3      	adds	r3, r2, r3
 8019e74:	185b      	adds	r3, r3, r1
 8019e76:	2201      	movs	r2, #1
 8019e78:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8019e7a:	4b92      	ldr	r3, [pc, #584]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019e7c:	681a      	ldr	r2, [r3, #0]
 8019e7e:	197b      	adds	r3, r7, r5
 8019e80:	881b      	ldrh	r3, [r3, #0]
 8019e82:	1979      	adds	r1, r7, r5
 8019e84:	1c58      	adds	r0, r3, #1
 8019e86:	8008      	strh	r0, [r1, #0]
 8019e88:	001c      	movs	r4, r3
 8019e8a:	4b91      	ldr	r3, [pc, #580]	; (801a0d0 <send_DHCP_REQUEST+0x38c>)
 8019e8c:	7818      	ldrb	r0, [r3, #0]
 8019e8e:	21ec      	movs	r1, #236	; 0xec
 8019e90:	1913      	adds	r3, r2, r4
 8019e92:	185b      	adds	r3, r3, r1
 8019e94:	1c02      	adds	r2, r0, #0
 8019e96:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8019e98:	4b8a      	ldr	r3, [pc, #552]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019e9a:	681a      	ldr	r2, [r3, #0]
 8019e9c:	197b      	adds	r3, r7, r5
 8019e9e:	881b      	ldrh	r3, [r3, #0]
 8019ea0:	1979      	adds	r1, r7, r5
 8019ea2:	1c58      	adds	r0, r3, #1
 8019ea4:	8008      	strh	r0, [r1, #0]
 8019ea6:	001c      	movs	r4, r3
 8019ea8:	4b89      	ldr	r3, [pc, #548]	; (801a0d0 <send_DHCP_REQUEST+0x38c>)
 8019eaa:	7858      	ldrb	r0, [r3, #1]
 8019eac:	21ec      	movs	r1, #236	; 0xec
 8019eae:	1913      	adds	r3, r2, r4
 8019eb0:	185b      	adds	r3, r3, r1
 8019eb2:	1c02      	adds	r2, r0, #0
 8019eb4:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8019eb6:	4b83      	ldr	r3, [pc, #524]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019eb8:	681a      	ldr	r2, [r3, #0]
 8019eba:	197b      	adds	r3, r7, r5
 8019ebc:	881b      	ldrh	r3, [r3, #0]
 8019ebe:	1979      	adds	r1, r7, r5
 8019ec0:	1c58      	adds	r0, r3, #1
 8019ec2:	8008      	strh	r0, [r1, #0]
 8019ec4:	001c      	movs	r4, r3
 8019ec6:	4b82      	ldr	r3, [pc, #520]	; (801a0d0 <send_DHCP_REQUEST+0x38c>)
 8019ec8:	7898      	ldrb	r0, [r3, #2]
 8019eca:	21ec      	movs	r1, #236	; 0xec
 8019ecc:	1913      	adds	r3, r2, r4
 8019ece:	185b      	adds	r3, r3, r1
 8019ed0:	1c02      	adds	r2, r0, #0
 8019ed2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8019ed4:	4b7b      	ldr	r3, [pc, #492]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019ed6:	681a      	ldr	r2, [r3, #0]
 8019ed8:	197b      	adds	r3, r7, r5
 8019eda:	881b      	ldrh	r3, [r3, #0]
 8019edc:	1979      	adds	r1, r7, r5
 8019ede:	1c58      	adds	r0, r3, #1
 8019ee0:	8008      	strh	r0, [r1, #0]
 8019ee2:	001c      	movs	r4, r3
 8019ee4:	4b7a      	ldr	r3, [pc, #488]	; (801a0d0 <send_DHCP_REQUEST+0x38c>)
 8019ee6:	78d8      	ldrb	r0, [r3, #3]
 8019ee8:	21ec      	movs	r1, #236	; 0xec
 8019eea:	1913      	adds	r3, r2, r4
 8019eec:	185b      	adds	r3, r3, r1
 8019eee:	1c02      	adds	r2, r0, #0
 8019ef0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8019ef2:	4b74      	ldr	r3, [pc, #464]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019ef4:	681a      	ldr	r2, [r3, #0]
 8019ef6:	197b      	adds	r3, r7, r5
 8019ef8:	881b      	ldrh	r3, [r3, #0]
 8019efa:	1979      	adds	r1, r7, r5
 8019efc:	1c58      	adds	r0, r3, #1
 8019efe:	8008      	strh	r0, [r1, #0]
 8019f00:	001c      	movs	r4, r3
 8019f02:	4b73      	ldr	r3, [pc, #460]	; (801a0d0 <send_DHCP_REQUEST+0x38c>)
 8019f04:	7918      	ldrb	r0, [r3, #4]
 8019f06:	21ec      	movs	r1, #236	; 0xec
 8019f08:	1913      	adds	r3, r2, r4
 8019f0a:	185b      	adds	r3, r3, r1
 8019f0c:	1c02      	adds	r2, r0, #0
 8019f0e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8019f10:	4b6c      	ldr	r3, [pc, #432]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019f12:	681a      	ldr	r2, [r3, #0]
 8019f14:	197b      	adds	r3, r7, r5
 8019f16:	881b      	ldrh	r3, [r3, #0]
 8019f18:	1979      	adds	r1, r7, r5
 8019f1a:	1c58      	adds	r0, r3, #1
 8019f1c:	8008      	strh	r0, [r1, #0]
 8019f1e:	001c      	movs	r4, r3
 8019f20:	4b6b      	ldr	r3, [pc, #428]	; (801a0d0 <send_DHCP_REQUEST+0x38c>)
 8019f22:	7958      	ldrb	r0, [r3, #5]
 8019f24:	21ec      	movs	r1, #236	; 0xec
 8019f26:	1913      	adds	r3, r2, r4
 8019f28:	185b      	adds	r3, r3, r1
 8019f2a:	1c02      	adds	r2, r0, #0
 8019f2c:	701a      	strb	r2, [r3, #0]

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8019f2e:	1d3b      	adds	r3, r7, #4
 8019f30:	78db      	ldrb	r3, [r3, #3]
 8019f32:	2bff      	cmp	r3, #255	; 0xff
 8019f34:	d000      	beq.n	8019f38 <send_DHCP_REQUEST+0x1f4>
 8019f36:	e0a7      	b.n	801a088 <send_DHCP_REQUEST+0x344>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8019f38:	4b62      	ldr	r3, [pc, #392]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019f3a:	681a      	ldr	r2, [r3, #0]
 8019f3c:	197b      	adds	r3, r7, r5
 8019f3e:	881b      	ldrh	r3, [r3, #0]
 8019f40:	1979      	adds	r1, r7, r5
 8019f42:	1c58      	adds	r0, r3, #1
 8019f44:	8008      	strh	r0, [r1, #0]
 8019f46:	21ec      	movs	r1, #236	; 0xec
 8019f48:	18d3      	adds	r3, r2, r3
 8019f4a:	185b      	adds	r3, r3, r1
 8019f4c:	2232      	movs	r2, #50	; 0x32
 8019f4e:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = 0x04;
 8019f50:	4b5c      	ldr	r3, [pc, #368]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019f52:	681a      	ldr	r2, [r3, #0]
 8019f54:	197b      	adds	r3, r7, r5
 8019f56:	881b      	ldrh	r3, [r3, #0]
 8019f58:	1979      	adds	r1, r7, r5
 8019f5a:	1c58      	adds	r0, r3, #1
 8019f5c:	8008      	strh	r0, [r1, #0]
 8019f5e:	21ec      	movs	r1, #236	; 0xec
 8019f60:	18d3      	adds	r3, r2, r3
 8019f62:	185b      	adds	r3, r3, r1
 8019f64:	2204      	movs	r2, #4
 8019f66:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8019f68:	4b56      	ldr	r3, [pc, #344]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019f6a:	681a      	ldr	r2, [r3, #0]
 8019f6c:	197b      	adds	r3, r7, r5
 8019f6e:	881b      	ldrh	r3, [r3, #0]
 8019f70:	1979      	adds	r1, r7, r5
 8019f72:	1c58      	adds	r0, r3, #1
 8019f74:	8008      	strh	r0, [r1, #0]
 8019f76:	001c      	movs	r4, r3
 8019f78:	4b53      	ldr	r3, [pc, #332]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019f7a:	7818      	ldrb	r0, [r3, #0]
 8019f7c:	21ec      	movs	r1, #236	; 0xec
 8019f7e:	1913      	adds	r3, r2, r4
 8019f80:	185b      	adds	r3, r3, r1
 8019f82:	1c02      	adds	r2, r0, #0
 8019f84:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8019f86:	4b4f      	ldr	r3, [pc, #316]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019f88:	681a      	ldr	r2, [r3, #0]
 8019f8a:	197b      	adds	r3, r7, r5
 8019f8c:	881b      	ldrh	r3, [r3, #0]
 8019f8e:	1979      	adds	r1, r7, r5
 8019f90:	1c58      	adds	r0, r3, #1
 8019f92:	8008      	strh	r0, [r1, #0]
 8019f94:	001c      	movs	r4, r3
 8019f96:	4b4c      	ldr	r3, [pc, #304]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019f98:	7858      	ldrb	r0, [r3, #1]
 8019f9a:	21ec      	movs	r1, #236	; 0xec
 8019f9c:	1913      	adds	r3, r2, r4
 8019f9e:	185b      	adds	r3, r3, r1
 8019fa0:	1c02      	adds	r2, r0, #0
 8019fa2:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8019fa4:	4b47      	ldr	r3, [pc, #284]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019fa6:	681a      	ldr	r2, [r3, #0]
 8019fa8:	197b      	adds	r3, r7, r5
 8019faa:	881b      	ldrh	r3, [r3, #0]
 8019fac:	1979      	adds	r1, r7, r5
 8019fae:	1c58      	adds	r0, r3, #1
 8019fb0:	8008      	strh	r0, [r1, #0]
 8019fb2:	001c      	movs	r4, r3
 8019fb4:	4b44      	ldr	r3, [pc, #272]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019fb6:	7898      	ldrb	r0, [r3, #2]
 8019fb8:	21ec      	movs	r1, #236	; 0xec
 8019fba:	1913      	adds	r3, r2, r4
 8019fbc:	185b      	adds	r3, r3, r1
 8019fbe:	1c02      	adds	r2, r0, #0
 8019fc0:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8019fc2:	4b40      	ldr	r3, [pc, #256]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019fc4:	681a      	ldr	r2, [r3, #0]
 8019fc6:	197b      	adds	r3, r7, r5
 8019fc8:	881b      	ldrh	r3, [r3, #0]
 8019fca:	1979      	adds	r1, r7, r5
 8019fcc:	1c58      	adds	r0, r3, #1
 8019fce:	8008      	strh	r0, [r1, #0]
 8019fd0:	001c      	movs	r4, r3
 8019fd2:	4b3d      	ldr	r3, [pc, #244]	; (801a0c8 <send_DHCP_REQUEST+0x384>)
 8019fd4:	78d8      	ldrb	r0, [r3, #3]
 8019fd6:	21ec      	movs	r1, #236	; 0xec
 8019fd8:	1913      	adds	r3, r2, r4
 8019fda:	185b      	adds	r3, r3, r1
 8019fdc:	1c02      	adds	r2, r0, #0
 8019fde:	701a      	strb	r2, [r3, #0]
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8019fe0:	4b38      	ldr	r3, [pc, #224]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019fe2:	681a      	ldr	r2, [r3, #0]
 8019fe4:	197b      	adds	r3, r7, r5
 8019fe6:	881b      	ldrh	r3, [r3, #0]
 8019fe8:	1979      	adds	r1, r7, r5
 8019fea:	1c58      	adds	r0, r3, #1
 8019fec:	8008      	strh	r0, [r1, #0]
 8019fee:	21ec      	movs	r1, #236	; 0xec
 8019ff0:	18d3      	adds	r3, r2, r3
 8019ff2:	185b      	adds	r3, r3, r1
 8019ff4:	2236      	movs	r2, #54	; 0x36
 8019ff6:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = 0x04;
 8019ff8:	4b32      	ldr	r3, [pc, #200]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 8019ffa:	681a      	ldr	r2, [r3, #0]
 8019ffc:	197b      	adds	r3, r7, r5
 8019ffe:	881b      	ldrh	r3, [r3, #0]
 801a000:	1979      	adds	r1, r7, r5
 801a002:	1c58      	adds	r0, r3, #1
 801a004:	8008      	strh	r0, [r1, #0]
 801a006:	21ec      	movs	r1, #236	; 0xec
 801a008:	18d3      	adds	r3, r2, r3
 801a00a:	185b      	adds	r3, r3, r1
 801a00c:	2204      	movs	r2, #4
 801a00e:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801a010:	4b2c      	ldr	r3, [pc, #176]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 801a012:	681a      	ldr	r2, [r3, #0]
 801a014:	197b      	adds	r3, r7, r5
 801a016:	881b      	ldrh	r3, [r3, #0]
 801a018:	1979      	adds	r1, r7, r5
 801a01a:	1c58      	adds	r0, r3, #1
 801a01c:	8008      	strh	r0, [r1, #0]
 801a01e:	001c      	movs	r4, r3
 801a020:	4b2a      	ldr	r3, [pc, #168]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 801a022:	7818      	ldrb	r0, [r3, #0]
 801a024:	21ec      	movs	r1, #236	; 0xec
 801a026:	1913      	adds	r3, r2, r4
 801a028:	185b      	adds	r3, r3, r1
 801a02a:	1c02      	adds	r2, r0, #0
 801a02c:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801a02e:	4b25      	ldr	r3, [pc, #148]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 801a030:	681a      	ldr	r2, [r3, #0]
 801a032:	197b      	adds	r3, r7, r5
 801a034:	881b      	ldrh	r3, [r3, #0]
 801a036:	1979      	adds	r1, r7, r5
 801a038:	1c58      	adds	r0, r3, #1
 801a03a:	8008      	strh	r0, [r1, #0]
 801a03c:	001c      	movs	r4, r3
 801a03e:	4b23      	ldr	r3, [pc, #140]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 801a040:	7858      	ldrb	r0, [r3, #1]
 801a042:	21ec      	movs	r1, #236	; 0xec
 801a044:	1913      	adds	r3, r2, r4
 801a046:	185b      	adds	r3, r3, r1
 801a048:	1c02      	adds	r2, r0, #0
 801a04a:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801a04c:	4b1d      	ldr	r3, [pc, #116]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 801a04e:	681a      	ldr	r2, [r3, #0]
 801a050:	197b      	adds	r3, r7, r5
 801a052:	881b      	ldrh	r3, [r3, #0]
 801a054:	1979      	adds	r1, r7, r5
 801a056:	1c58      	adds	r0, r3, #1
 801a058:	8008      	strh	r0, [r1, #0]
 801a05a:	001c      	movs	r4, r3
 801a05c:	4b1b      	ldr	r3, [pc, #108]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 801a05e:	7898      	ldrb	r0, [r3, #2]
 801a060:	21ec      	movs	r1, #236	; 0xec
 801a062:	1913      	adds	r3, r2, r4
 801a064:	185b      	adds	r3, r3, r1
 801a066:	1c02      	adds	r2, r0, #0
 801a068:	701a      	strb	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801a06a:	4b16      	ldr	r3, [pc, #88]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 801a06c:	681a      	ldr	r2, [r3, #0]
 801a06e:	197b      	adds	r3, r7, r5
 801a070:	881b      	ldrh	r3, [r3, #0]
 801a072:	1979      	adds	r1, r7, r5
 801a074:	1c58      	adds	r0, r3, #1
 801a076:	8008      	strh	r0, [r1, #0]
 801a078:	001c      	movs	r4, r3
 801a07a:	4b14      	ldr	r3, [pc, #80]	; (801a0cc <send_DHCP_REQUEST+0x388>)
 801a07c:	78d8      	ldrb	r0, [r3, #3]
 801a07e:	21ec      	movs	r1, #236	; 0xec
 801a080:	1913      	adds	r3, r2, r4
 801a082:	185b      	adds	r3, r3, r1
 801a084:	1c02      	adds	r2, r0, #0
 801a086:	701a      	strb	r2, [r3, #0]
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801a088:	4b0e      	ldr	r3, [pc, #56]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 801a08a:	681a      	ldr	r2, [r3, #0]
 801a08c:	240a      	movs	r4, #10
 801a08e:	193b      	adds	r3, r7, r4
 801a090:	881b      	ldrh	r3, [r3, #0]
 801a092:	1939      	adds	r1, r7, r4
 801a094:	1c58      	adds	r0, r3, #1
 801a096:	8008      	strh	r0, [r1, #0]
 801a098:	21ec      	movs	r1, #236	; 0xec
 801a09a:	18d3      	adds	r3, r2, r3
 801a09c:	185b      	adds	r3, r3, r1
 801a09e:	220c      	movs	r2, #12
 801a0a0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801a0a2:	4b08      	ldr	r3, [pc, #32]	; (801a0c4 <send_DHCP_REQUEST+0x380>)
 801a0a4:	681a      	ldr	r2, [r3, #0]
 801a0a6:	193b      	adds	r3, r7, r4
 801a0a8:	881b      	ldrh	r3, [r3, #0]
 801a0aa:	1939      	adds	r1, r7, r4
 801a0ac:	1c58      	adds	r0, r3, #1
 801a0ae:	8008      	strh	r0, [r1, #0]
 801a0b0:	21ec      	movs	r1, #236	; 0xec
 801a0b2:	18d3      	adds	r3, r2, r3
 801a0b4:	185b      	adds	r3, r3, r1
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	60fb      	str	r3, [r7, #12]
 801a0be:	e01e      	b.n	801a0fe <send_DHCP_REQUEST+0x3ba>
 801a0c0:	20007aec 	.word	0x20007aec
 801a0c4:	20007af8 	.word	0x20007af8
 801a0c8:	20007adc 	.word	0x20007adc
 801a0cc:	20007ad0 	.word	0x20007ad0
 801a0d0:	20007afc 	.word	0x20007afc
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801a0d4:	4ba8      	ldr	r3, [pc, #672]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a0d6:	681a      	ldr	r2, [r3, #0]
 801a0d8:	210a      	movs	r1, #10
 801a0da:	187b      	adds	r3, r7, r1
 801a0dc:	881b      	ldrh	r3, [r3, #0]
 801a0de:	1879      	adds	r1, r7, r1
 801a0e0:	1c58      	adds	r0, r3, #1
 801a0e2:	8008      	strh	r0, [r1, #0]
 801a0e4:	001c      	movs	r4, r3
 801a0e6:	49a5      	ldr	r1, [pc, #660]	; (801a37c <send_DHCP_REQUEST+0x638>)
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	18cb      	adds	r3, r1, r3
 801a0ec:	7818      	ldrb	r0, [r3, #0]
 801a0ee:	21ec      	movs	r1, #236	; 0xec
 801a0f0:	1913      	adds	r3, r2, r4
 801a0f2:	185b      	adds	r3, r3, r1
 801a0f4:	1c02      	adds	r2, r0, #0
 801a0f6:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	3301      	adds	r3, #1
 801a0fc:	60fb      	str	r3, [r7, #12]
 801a0fe:	4a9f      	ldr	r2, [pc, #636]	; (801a37c <send_DHCP_REQUEST+0x638>)
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	18d3      	adds	r3, r2, r3
 801a104:	781b      	ldrb	r3, [r3, #0]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d1e4      	bne.n	801a0d4 <send_DHCP_REQUEST+0x390>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801a10a:	4b9d      	ldr	r3, [pc, #628]	; (801a380 <send_DHCP_REQUEST+0x63c>)
 801a10c:	78db      	ldrb	r3, [r3, #3]
 801a10e:	091b      	lsrs	r3, r3, #4
 801a110:	b2d9      	uxtb	r1, r3
 801a112:	4b99      	ldr	r3, [pc, #612]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a114:	681c      	ldr	r4, [r3, #0]
 801a116:	260a      	movs	r6, #10
 801a118:	19bb      	adds	r3, r7, r6
 801a11a:	881b      	ldrh	r3, [r3, #0]
 801a11c:	19ba      	adds	r2, r7, r6
 801a11e:	1c58      	adds	r0, r3, #1
 801a120:	8010      	strh	r0, [r2, #0]
 801a122:	001d      	movs	r5, r3
 801a124:	0008      	movs	r0, r1
 801a126:	f000 ff39 	bl	801af9c <NibbleToHex>
 801a12a:	0003      	movs	r3, r0
 801a12c:	0019      	movs	r1, r3
 801a12e:	22ec      	movs	r2, #236	; 0xec
 801a130:	1963      	adds	r3, r4, r5
 801a132:	189b      	adds	r3, r3, r2
 801a134:	1c0a      	adds	r2, r1, #0
 801a136:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801a138:	4b91      	ldr	r3, [pc, #580]	; (801a380 <send_DHCP_REQUEST+0x63c>)
 801a13a:	78d9      	ldrb	r1, [r3, #3]
 801a13c:	4b8e      	ldr	r3, [pc, #568]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a13e:	681c      	ldr	r4, [r3, #0]
 801a140:	19bb      	adds	r3, r7, r6
 801a142:	881b      	ldrh	r3, [r3, #0]
 801a144:	19ba      	adds	r2, r7, r6
 801a146:	1c58      	adds	r0, r3, #1
 801a148:	8010      	strh	r0, [r2, #0]
 801a14a:	001d      	movs	r5, r3
 801a14c:	0008      	movs	r0, r1
 801a14e:	f000 ff25 	bl	801af9c <NibbleToHex>
 801a152:	0003      	movs	r3, r0
 801a154:	0019      	movs	r1, r3
 801a156:	22ec      	movs	r2, #236	; 0xec
 801a158:	1963      	adds	r3, r4, r5
 801a15a:	189b      	adds	r3, r3, r2
 801a15c:	1c0a      	adds	r2, r1, #0
 801a15e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801a160:	4b87      	ldr	r3, [pc, #540]	; (801a380 <send_DHCP_REQUEST+0x63c>)
 801a162:	791b      	ldrb	r3, [r3, #4]
 801a164:	091b      	lsrs	r3, r3, #4
 801a166:	b2d9      	uxtb	r1, r3
 801a168:	4b83      	ldr	r3, [pc, #524]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a16a:	681c      	ldr	r4, [r3, #0]
 801a16c:	19bb      	adds	r3, r7, r6
 801a16e:	881b      	ldrh	r3, [r3, #0]
 801a170:	19ba      	adds	r2, r7, r6
 801a172:	1c58      	adds	r0, r3, #1
 801a174:	8010      	strh	r0, [r2, #0]
 801a176:	001d      	movs	r5, r3
 801a178:	0008      	movs	r0, r1
 801a17a:	f000 ff0f 	bl	801af9c <NibbleToHex>
 801a17e:	0003      	movs	r3, r0
 801a180:	0019      	movs	r1, r3
 801a182:	22ec      	movs	r2, #236	; 0xec
 801a184:	1963      	adds	r3, r4, r5
 801a186:	189b      	adds	r3, r3, r2
 801a188:	1c0a      	adds	r2, r1, #0
 801a18a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801a18c:	4b7c      	ldr	r3, [pc, #496]	; (801a380 <send_DHCP_REQUEST+0x63c>)
 801a18e:	7919      	ldrb	r1, [r3, #4]
 801a190:	4b79      	ldr	r3, [pc, #484]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a192:	681c      	ldr	r4, [r3, #0]
 801a194:	19bb      	adds	r3, r7, r6
 801a196:	881b      	ldrh	r3, [r3, #0]
 801a198:	19ba      	adds	r2, r7, r6
 801a19a:	1c58      	adds	r0, r3, #1
 801a19c:	8010      	strh	r0, [r2, #0]
 801a19e:	001d      	movs	r5, r3
 801a1a0:	0008      	movs	r0, r1
 801a1a2:	f000 fefb 	bl	801af9c <NibbleToHex>
 801a1a6:	0003      	movs	r3, r0
 801a1a8:	0019      	movs	r1, r3
 801a1aa:	22ec      	movs	r2, #236	; 0xec
 801a1ac:	1963      	adds	r3, r4, r5
 801a1ae:	189b      	adds	r3, r3, r2
 801a1b0:	1c0a      	adds	r2, r1, #0
 801a1b2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801a1b4:	4b72      	ldr	r3, [pc, #456]	; (801a380 <send_DHCP_REQUEST+0x63c>)
 801a1b6:	795b      	ldrb	r3, [r3, #5]
 801a1b8:	091b      	lsrs	r3, r3, #4
 801a1ba:	b2d9      	uxtb	r1, r3
 801a1bc:	4b6e      	ldr	r3, [pc, #440]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a1be:	681c      	ldr	r4, [r3, #0]
 801a1c0:	19bb      	adds	r3, r7, r6
 801a1c2:	881b      	ldrh	r3, [r3, #0]
 801a1c4:	19ba      	adds	r2, r7, r6
 801a1c6:	1c58      	adds	r0, r3, #1
 801a1c8:	8010      	strh	r0, [r2, #0]
 801a1ca:	001d      	movs	r5, r3
 801a1cc:	0008      	movs	r0, r1
 801a1ce:	f000 fee5 	bl	801af9c <NibbleToHex>
 801a1d2:	0003      	movs	r3, r0
 801a1d4:	0019      	movs	r1, r3
 801a1d6:	22ec      	movs	r2, #236	; 0xec
 801a1d8:	1963      	adds	r3, r4, r5
 801a1da:	189b      	adds	r3, r3, r2
 801a1dc:	1c0a      	adds	r2, r1, #0
 801a1de:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801a1e0:	4b67      	ldr	r3, [pc, #412]	; (801a380 <send_DHCP_REQUEST+0x63c>)
 801a1e2:	7959      	ldrb	r1, [r3, #5]
 801a1e4:	4b64      	ldr	r3, [pc, #400]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a1e6:	681c      	ldr	r4, [r3, #0]
 801a1e8:	19bb      	adds	r3, r7, r6
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	19ba      	adds	r2, r7, r6
 801a1ee:	1c58      	adds	r0, r3, #1
 801a1f0:	8010      	strh	r0, [r2, #0]
 801a1f2:	001d      	movs	r5, r3
 801a1f4:	0008      	movs	r0, r1
 801a1f6:	f000 fed1 	bl	801af9c <NibbleToHex>
 801a1fa:	0003      	movs	r3, r0
 801a1fc:	0019      	movs	r1, r3
 801a1fe:	22ec      	movs	r2, #236	; 0xec
 801a200:	1963      	adds	r3, r4, r5
 801a202:	189b      	adds	r3, r3, r2
 801a204:	1c0a      	adds	r2, r1, #0
 801a206:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	b2d9      	uxtb	r1, r3
 801a20c:	4b5a      	ldr	r3, [pc, #360]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a20e:	681a      	ldr	r2, [r3, #0]
 801a210:	19bb      	adds	r3, r7, r6
 801a212:	8818      	ldrh	r0, [r3, #0]
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	3307      	adds	r3, #7
 801a218:	1ac3      	subs	r3, r0, r3
 801a21a:	3106      	adds	r1, #6
 801a21c:	b2c8      	uxtb	r0, r1
 801a21e:	21ec      	movs	r1, #236	; 0xec
 801a220:	18d3      	adds	r3, r2, r3
 801a222:	185b      	adds	r3, r3, r1
 801a224:	1c02      	adds	r2, r0, #0
 801a226:	701a      	strb	r2, [r3, #0]
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801a228:	4b53      	ldr	r3, [pc, #332]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a22a:	681a      	ldr	r2, [r3, #0]
 801a22c:	19bb      	adds	r3, r7, r6
 801a22e:	881b      	ldrh	r3, [r3, #0]
 801a230:	19b9      	adds	r1, r7, r6
 801a232:	1c58      	adds	r0, r3, #1
 801a234:	8008      	strh	r0, [r1, #0]
 801a236:	21ec      	movs	r1, #236	; 0xec
 801a238:	18d3      	adds	r3, r2, r3
 801a23a:	185b      	adds	r3, r3, r1
 801a23c:	2237      	movs	r2, #55	; 0x37
 801a23e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x08;
 801a240:	4b4d      	ldr	r3, [pc, #308]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a242:	681a      	ldr	r2, [r3, #0]
 801a244:	0034      	movs	r4, r6
 801a246:	193b      	adds	r3, r7, r4
 801a248:	881b      	ldrh	r3, [r3, #0]
 801a24a:	1939      	adds	r1, r7, r4
 801a24c:	1c58      	adds	r0, r3, #1
 801a24e:	8008      	strh	r0, [r1, #0]
 801a250:	21ec      	movs	r1, #236	; 0xec
 801a252:	18d3      	adds	r3, r2, r3
 801a254:	185b      	adds	r3, r3, r1
 801a256:	2208      	movs	r2, #8
 801a258:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = subnetMask;
 801a25a:	4b47      	ldr	r3, [pc, #284]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a25c:	681a      	ldr	r2, [r3, #0]
 801a25e:	193b      	adds	r3, r7, r4
 801a260:	881b      	ldrh	r3, [r3, #0]
 801a262:	1939      	adds	r1, r7, r4
 801a264:	1c58      	adds	r0, r3, #1
 801a266:	8008      	strh	r0, [r1, #0]
 801a268:	21ec      	movs	r1, #236	; 0xec
 801a26a:	18d3      	adds	r3, r2, r3
 801a26c:	185b      	adds	r3, r3, r1
 801a26e:	2201      	movs	r2, #1
 801a270:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801a272:	4b41      	ldr	r3, [pc, #260]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a274:	681a      	ldr	r2, [r3, #0]
 801a276:	193b      	adds	r3, r7, r4
 801a278:	881b      	ldrh	r3, [r3, #0]
 801a27a:	1939      	adds	r1, r7, r4
 801a27c:	1c58      	adds	r0, r3, #1
 801a27e:	8008      	strh	r0, [r1, #0]
 801a280:	21ec      	movs	r1, #236	; 0xec
 801a282:	18d3      	adds	r3, r2, r3
 801a284:	185b      	adds	r3, r3, r1
 801a286:	2203      	movs	r2, #3
 801a288:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dns;
 801a28a:	4b3b      	ldr	r3, [pc, #236]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a28c:	681a      	ldr	r2, [r3, #0]
 801a28e:	193b      	adds	r3, r7, r4
 801a290:	881b      	ldrh	r3, [r3, #0]
 801a292:	1939      	adds	r1, r7, r4
 801a294:	1c58      	adds	r0, r3, #1
 801a296:	8008      	strh	r0, [r1, #0]
 801a298:	21ec      	movs	r1, #236	; 0xec
 801a29a:	18d3      	adds	r3, r2, r3
 801a29c:	185b      	adds	r3, r3, r1
 801a29e:	2206      	movs	r2, #6
 801a2a0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = domainName;
 801a2a2:	4b35      	ldr	r3, [pc, #212]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a2a4:	681a      	ldr	r2, [r3, #0]
 801a2a6:	193b      	adds	r3, r7, r4
 801a2a8:	881b      	ldrh	r3, [r3, #0]
 801a2aa:	1939      	adds	r1, r7, r4
 801a2ac:	1c58      	adds	r0, r3, #1
 801a2ae:	8008      	strh	r0, [r1, #0]
 801a2b0:	21ec      	movs	r1, #236	; 0xec
 801a2b2:	18d3      	adds	r3, r2, r3
 801a2b4:	185b      	adds	r3, r3, r1
 801a2b6:	220f      	movs	r2, #15
 801a2b8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801a2ba:	4b2f      	ldr	r3, [pc, #188]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a2bc:	681a      	ldr	r2, [r3, #0]
 801a2be:	193b      	adds	r3, r7, r4
 801a2c0:	881b      	ldrh	r3, [r3, #0]
 801a2c2:	1939      	adds	r1, r7, r4
 801a2c4:	1c58      	adds	r0, r3, #1
 801a2c6:	8008      	strh	r0, [r1, #0]
 801a2c8:	21ec      	movs	r1, #236	; 0xec
 801a2ca:	18d3      	adds	r3, r2, r3
 801a2cc:	185b      	adds	r3, r3, r1
 801a2ce:	223a      	movs	r2, #58	; 0x3a
 801a2d0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801a2d2:	4b29      	ldr	r3, [pc, #164]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a2d4:	681a      	ldr	r2, [r3, #0]
 801a2d6:	193b      	adds	r3, r7, r4
 801a2d8:	881b      	ldrh	r3, [r3, #0]
 801a2da:	1939      	adds	r1, r7, r4
 801a2dc:	1c58      	adds	r0, r3, #1
 801a2de:	8008      	strh	r0, [r1, #0]
 801a2e0:	21ec      	movs	r1, #236	; 0xec
 801a2e2:	18d3      	adds	r3, r2, r3
 801a2e4:	185b      	adds	r3, r3, r1
 801a2e6:	223b      	movs	r2, #59	; 0x3b
 801a2e8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801a2ea:	4b23      	ldr	r3, [pc, #140]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a2ec:	681a      	ldr	r2, [r3, #0]
 801a2ee:	193b      	adds	r3, r7, r4
 801a2f0:	881b      	ldrh	r3, [r3, #0]
 801a2f2:	1939      	adds	r1, r7, r4
 801a2f4:	1c58      	adds	r0, r3, #1
 801a2f6:	8008      	strh	r0, [r1, #0]
 801a2f8:	21ec      	movs	r1, #236	; 0xec
 801a2fa:	18d3      	adds	r3, r2, r3
 801a2fc:	185b      	adds	r3, r3, r1
 801a2fe:	221f      	movs	r2, #31
 801a300:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = staticRoute;
 801a302:	4b1d      	ldr	r3, [pc, #116]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a304:	681a      	ldr	r2, [r3, #0]
 801a306:	193b      	adds	r3, r7, r4
 801a308:	881b      	ldrh	r3, [r3, #0]
 801a30a:	1939      	adds	r1, r7, r4
 801a30c:	1c58      	adds	r0, r3, #1
 801a30e:	8008      	strh	r0, [r1, #0]
 801a310:	21ec      	movs	r1, #236	; 0xec
 801a312:	18d3      	adds	r3, r2, r3
 801a314:	185b      	adds	r3, r3, r1
 801a316:	2221      	movs	r2, #33	; 0x21
 801a318:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = endOption;
 801a31a:	4b17      	ldr	r3, [pc, #92]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a31c:	681a      	ldr	r2, [r3, #0]
 801a31e:	193b      	adds	r3, r7, r4
 801a320:	881b      	ldrh	r3, [r3, #0]
 801a322:	1939      	adds	r1, r7, r4
 801a324:	1c58      	adds	r0, r3, #1
 801a326:	8008      	strh	r0, [r1, #0]
 801a328:	21ec      	movs	r1, #236	; 0xec
 801a32a:	18d3      	adds	r3, r2, r3
 801a32c:	185b      	adds	r3, r3, r1
 801a32e:	22ff      	movs	r2, #255	; 0xff
 801a330:	701a      	strb	r2, [r3, #0]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801a332:	193b      	adds	r3, r7, r4
 801a334:	881b      	ldrh	r3, [r3, #0]
 801a336:	60fb      	str	r3, [r7, #12]
 801a338:	e00a      	b.n	801a350 <send_DHCP_REQUEST+0x60c>
 801a33a:	4b0f      	ldr	r3, [pc, #60]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a33c:	681a      	ldr	r2, [r3, #0]
 801a33e:	21ec      	movs	r1, #236	; 0xec
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	18d3      	adds	r3, r2, r3
 801a344:	185b      	adds	r3, r3, r1
 801a346:	2200      	movs	r2, #0
 801a348:	701a      	strb	r2, [r3, #0]
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	3301      	adds	r3, #1
 801a34e:	60fb      	str	r3, [r7, #12]
 801a350:	68fa      	ldr	r2, [r7, #12]
 801a352:	239c      	movs	r3, #156	; 0x9c
 801a354:	005b      	lsls	r3, r3, #1
 801a356:	429a      	cmp	r2, r3
 801a358:	dbef      	blt.n	801a33a <send_DHCP_REQUEST+0x5f6>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801a35a:	4b0a      	ldr	r3, [pc, #40]	; (801a384 <send_DHCP_REQUEST+0x640>)
 801a35c:	7818      	ldrb	r0, [r3, #0]
 801a35e:	4b06      	ldr	r3, [pc, #24]	; (801a378 <send_DHCP_REQUEST+0x634>)
 801a360:	6819      	ldr	r1, [r3, #0]
 801a362:	1d3b      	adds	r3, r7, #4
 801a364:	2289      	movs	r2, #137	; 0x89
 801a366:	0092      	lsls	r2, r2, #2
 801a368:	2443      	movs	r4, #67	; 0x43
 801a36a:	9400      	str	r4, [sp, #0]
 801a36c:	f001 faec 	bl	801b948 <sendto>

}
 801a370:	46c0      	nop			; (mov r8, r8)
 801a372:	46bd      	mov	sp, r7
 801a374:	b005      	add	sp, #20
 801a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a378:	20007af8 	.word	0x20007af8
 801a37c:	2000506c 	.word	0x2000506c
 801a380:	20007afc 	.word	0x20007afc
 801a384:	20007acc 	.word	0x20007acc

0801a388 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801a388:	b5b0      	push	{r4, r5, r7, lr}
 801a38a:	b086      	sub	sp, #24
 801a38c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801a38e:	240a      	movs	r4, #10
 801a390:	193b      	adds	r3, r7, r4
 801a392:	2200      	movs	r2, #0
 801a394:	801a      	strh	r2, [r3, #0]
	
	makeDHCPMSG();
 801a396:	f7ff f989 	bl	80196ac <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801a39a:	0021      	movs	r1, r4
 801a39c:	187b      	adds	r3, r7, r1
 801a39e:	2204      	movs	r2, #4
 801a3a0:	801a      	strh	r2, [r3, #0]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801a3a2:	4bc8      	ldr	r3, [pc, #800]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	330a      	adds	r3, #10
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801a3ac:	4bc5      	ldr	r3, [pc, #788]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	330a      	adds	r3, #10
 801a3b2:	3301      	adds	r3, #1
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801a3b8:	4bc2      	ldr	r3, [pc, #776]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a3ba:	681a      	ldr	r2, [r3, #0]
 801a3bc:	000d      	movs	r5, r1
 801a3be:	197b      	adds	r3, r7, r5
 801a3c0:	881b      	ldrh	r3, [r3, #0]
 801a3c2:	1979      	adds	r1, r7, r5
 801a3c4:	1c58      	adds	r0, r3, #1
 801a3c6:	8008      	strh	r0, [r1, #0]
 801a3c8:	21ec      	movs	r1, #236	; 0xec
 801a3ca:	18d3      	adds	r3, r2, r3
 801a3cc:	185b      	adds	r3, r3, r1
 801a3ce:	2235      	movs	r2, #53	; 0x35
 801a3d0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 801a3d2:	4bbc      	ldr	r3, [pc, #752]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a3d4:	681a      	ldr	r2, [r3, #0]
 801a3d6:	197b      	adds	r3, r7, r5
 801a3d8:	881b      	ldrh	r3, [r3, #0]
 801a3da:	1979      	adds	r1, r7, r5
 801a3dc:	1c58      	adds	r0, r3, #1
 801a3de:	8008      	strh	r0, [r1, #0]
 801a3e0:	21ec      	movs	r1, #236	; 0xec
 801a3e2:	18d3      	adds	r3, r2, r3
 801a3e4:	185b      	adds	r3, r3, r1
 801a3e6:	2201      	movs	r2, #1
 801a3e8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801a3ea:	4bb6      	ldr	r3, [pc, #728]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a3ec:	681a      	ldr	r2, [r3, #0]
 801a3ee:	197b      	adds	r3, r7, r5
 801a3f0:	881b      	ldrh	r3, [r3, #0]
 801a3f2:	1979      	adds	r1, r7, r5
 801a3f4:	1c58      	adds	r0, r3, #1
 801a3f6:	8008      	strh	r0, [r1, #0]
 801a3f8:	21ec      	movs	r1, #236	; 0xec
 801a3fa:	18d3      	adds	r3, r2, r3
 801a3fc:	185b      	adds	r3, r3, r1
 801a3fe:	2204      	movs	r2, #4
 801a400:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801a402:	4bb0      	ldr	r3, [pc, #704]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a404:	681a      	ldr	r2, [r3, #0]
 801a406:	197b      	adds	r3, r7, r5
 801a408:	881b      	ldrh	r3, [r3, #0]
 801a40a:	1979      	adds	r1, r7, r5
 801a40c:	1c58      	adds	r0, r3, #1
 801a40e:	8008      	strh	r0, [r1, #0]
 801a410:	21ec      	movs	r1, #236	; 0xec
 801a412:	18d3      	adds	r3, r2, r3
 801a414:	185b      	adds	r3, r3, r1
 801a416:	223d      	movs	r2, #61	; 0x3d
 801a418:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 801a41a:	4baa      	ldr	r3, [pc, #680]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a41c:	681a      	ldr	r2, [r3, #0]
 801a41e:	197b      	adds	r3, r7, r5
 801a420:	881b      	ldrh	r3, [r3, #0]
 801a422:	1979      	adds	r1, r7, r5
 801a424:	1c58      	adds	r0, r3, #1
 801a426:	8008      	strh	r0, [r1, #0]
 801a428:	21ec      	movs	r1, #236	; 0xec
 801a42a:	18d3      	adds	r3, r2, r3
 801a42c:	185b      	adds	r3, r3, r1
 801a42e:	2207      	movs	r2, #7
 801a430:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
 801a432:	4ba4      	ldr	r3, [pc, #656]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a434:	681a      	ldr	r2, [r3, #0]
 801a436:	197b      	adds	r3, r7, r5
 801a438:	881b      	ldrh	r3, [r3, #0]
 801a43a:	1979      	adds	r1, r7, r5
 801a43c:	1c58      	adds	r0, r3, #1
 801a43e:	8008      	strh	r0, [r1, #0]
 801a440:	21ec      	movs	r1, #236	; 0xec
 801a442:	18d3      	adds	r3, r2, r3
 801a444:	185b      	adds	r3, r3, r1
 801a446:	2201      	movs	r2, #1
 801a448:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801a44a:	4b9e      	ldr	r3, [pc, #632]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a44c:	681a      	ldr	r2, [r3, #0]
 801a44e:	197b      	adds	r3, r7, r5
 801a450:	881b      	ldrh	r3, [r3, #0]
 801a452:	1979      	adds	r1, r7, r5
 801a454:	1c58      	adds	r0, r3, #1
 801a456:	8008      	strh	r0, [r1, #0]
 801a458:	001c      	movs	r4, r3
 801a45a:	4b9b      	ldr	r3, [pc, #620]	; (801a6c8 <send_DHCP_DECLINE+0x340>)
 801a45c:	7818      	ldrb	r0, [r3, #0]
 801a45e:	21ec      	movs	r1, #236	; 0xec
 801a460:	1913      	adds	r3, r2, r4
 801a462:	185b      	adds	r3, r3, r1
 801a464:	1c02      	adds	r2, r0, #0
 801a466:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801a468:	4b96      	ldr	r3, [pc, #600]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a46a:	681a      	ldr	r2, [r3, #0]
 801a46c:	197b      	adds	r3, r7, r5
 801a46e:	881b      	ldrh	r3, [r3, #0]
 801a470:	1979      	adds	r1, r7, r5
 801a472:	1c58      	adds	r0, r3, #1
 801a474:	8008      	strh	r0, [r1, #0]
 801a476:	001c      	movs	r4, r3
 801a478:	4b93      	ldr	r3, [pc, #588]	; (801a6c8 <send_DHCP_DECLINE+0x340>)
 801a47a:	7858      	ldrb	r0, [r3, #1]
 801a47c:	21ec      	movs	r1, #236	; 0xec
 801a47e:	1913      	adds	r3, r2, r4
 801a480:	185b      	adds	r3, r3, r1
 801a482:	1c02      	adds	r2, r0, #0
 801a484:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801a486:	4b8f      	ldr	r3, [pc, #572]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a488:	681a      	ldr	r2, [r3, #0]
 801a48a:	197b      	adds	r3, r7, r5
 801a48c:	881b      	ldrh	r3, [r3, #0]
 801a48e:	1979      	adds	r1, r7, r5
 801a490:	1c58      	adds	r0, r3, #1
 801a492:	8008      	strh	r0, [r1, #0]
 801a494:	001c      	movs	r4, r3
 801a496:	4b8c      	ldr	r3, [pc, #560]	; (801a6c8 <send_DHCP_DECLINE+0x340>)
 801a498:	7898      	ldrb	r0, [r3, #2]
 801a49a:	21ec      	movs	r1, #236	; 0xec
 801a49c:	1913      	adds	r3, r2, r4
 801a49e:	185b      	adds	r3, r3, r1
 801a4a0:	1c02      	adds	r2, r0, #0
 801a4a2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801a4a4:	4b87      	ldr	r3, [pc, #540]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a4a6:	681a      	ldr	r2, [r3, #0]
 801a4a8:	197b      	adds	r3, r7, r5
 801a4aa:	881b      	ldrh	r3, [r3, #0]
 801a4ac:	1979      	adds	r1, r7, r5
 801a4ae:	1c58      	adds	r0, r3, #1
 801a4b0:	8008      	strh	r0, [r1, #0]
 801a4b2:	001c      	movs	r4, r3
 801a4b4:	4b84      	ldr	r3, [pc, #528]	; (801a6c8 <send_DHCP_DECLINE+0x340>)
 801a4b6:	78d8      	ldrb	r0, [r3, #3]
 801a4b8:	21ec      	movs	r1, #236	; 0xec
 801a4ba:	1913      	adds	r3, r2, r4
 801a4bc:	185b      	adds	r3, r3, r1
 801a4be:	1c02      	adds	r2, r0, #0
 801a4c0:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801a4c2:	4b80      	ldr	r3, [pc, #512]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a4c4:	681a      	ldr	r2, [r3, #0]
 801a4c6:	197b      	adds	r3, r7, r5
 801a4c8:	881b      	ldrh	r3, [r3, #0]
 801a4ca:	1979      	adds	r1, r7, r5
 801a4cc:	1c58      	adds	r0, r3, #1
 801a4ce:	8008      	strh	r0, [r1, #0]
 801a4d0:	001c      	movs	r4, r3
 801a4d2:	4b7d      	ldr	r3, [pc, #500]	; (801a6c8 <send_DHCP_DECLINE+0x340>)
 801a4d4:	7918      	ldrb	r0, [r3, #4]
 801a4d6:	21ec      	movs	r1, #236	; 0xec
 801a4d8:	1913      	adds	r3, r2, r4
 801a4da:	185b      	adds	r3, r3, r1
 801a4dc:	1c02      	adds	r2, r0, #0
 801a4de:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801a4e0:	4b78      	ldr	r3, [pc, #480]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a4e2:	681a      	ldr	r2, [r3, #0]
 801a4e4:	197b      	adds	r3, r7, r5
 801a4e6:	881b      	ldrh	r3, [r3, #0]
 801a4e8:	1979      	adds	r1, r7, r5
 801a4ea:	1c58      	adds	r0, r3, #1
 801a4ec:	8008      	strh	r0, [r1, #0]
 801a4ee:	001c      	movs	r4, r3
 801a4f0:	4b75      	ldr	r3, [pc, #468]	; (801a6c8 <send_DHCP_DECLINE+0x340>)
 801a4f2:	7958      	ldrb	r0, [r3, #5]
 801a4f4:	21ec      	movs	r1, #236	; 0xec
 801a4f6:	1913      	adds	r3, r2, r4
 801a4f8:	185b      	adds	r3, r3, r1
 801a4fa:	1c02      	adds	r2, r0, #0
 801a4fc:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801a4fe:	4b71      	ldr	r3, [pc, #452]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a500:	681a      	ldr	r2, [r3, #0]
 801a502:	197b      	adds	r3, r7, r5
 801a504:	881b      	ldrh	r3, [r3, #0]
 801a506:	1979      	adds	r1, r7, r5
 801a508:	1c58      	adds	r0, r3, #1
 801a50a:	8008      	strh	r0, [r1, #0]
 801a50c:	21ec      	movs	r1, #236	; 0xec
 801a50e:	18d3      	adds	r3, r2, r3
 801a510:	185b      	adds	r3, r3, r1
 801a512:	2232      	movs	r2, #50	; 0x32
 801a514:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x04;
 801a516:	4b6b      	ldr	r3, [pc, #428]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a518:	681a      	ldr	r2, [r3, #0]
 801a51a:	197b      	adds	r3, r7, r5
 801a51c:	881b      	ldrh	r3, [r3, #0]
 801a51e:	1979      	adds	r1, r7, r5
 801a520:	1c58      	adds	r0, r3, #1
 801a522:	8008      	strh	r0, [r1, #0]
 801a524:	21ec      	movs	r1, #236	; 0xec
 801a526:	18d3      	adds	r3, r2, r3
 801a528:	185b      	adds	r3, r3, r1
 801a52a:	2204      	movs	r2, #4
 801a52c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801a52e:	4b65      	ldr	r3, [pc, #404]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a530:	681a      	ldr	r2, [r3, #0]
 801a532:	197b      	adds	r3, r7, r5
 801a534:	881b      	ldrh	r3, [r3, #0]
 801a536:	1979      	adds	r1, r7, r5
 801a538:	1c58      	adds	r0, r3, #1
 801a53a:	8008      	strh	r0, [r1, #0]
 801a53c:	001c      	movs	r4, r3
 801a53e:	4b63      	ldr	r3, [pc, #396]	; (801a6cc <send_DHCP_DECLINE+0x344>)
 801a540:	7818      	ldrb	r0, [r3, #0]
 801a542:	21ec      	movs	r1, #236	; 0xec
 801a544:	1913      	adds	r3, r2, r4
 801a546:	185b      	adds	r3, r3, r1
 801a548:	1c02      	adds	r2, r0, #0
 801a54a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801a54c:	4b5d      	ldr	r3, [pc, #372]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a54e:	681a      	ldr	r2, [r3, #0]
 801a550:	197b      	adds	r3, r7, r5
 801a552:	881b      	ldrh	r3, [r3, #0]
 801a554:	1979      	adds	r1, r7, r5
 801a556:	1c58      	adds	r0, r3, #1
 801a558:	8008      	strh	r0, [r1, #0]
 801a55a:	001c      	movs	r4, r3
 801a55c:	4b5b      	ldr	r3, [pc, #364]	; (801a6cc <send_DHCP_DECLINE+0x344>)
 801a55e:	7858      	ldrb	r0, [r3, #1]
 801a560:	21ec      	movs	r1, #236	; 0xec
 801a562:	1913      	adds	r3, r2, r4
 801a564:	185b      	adds	r3, r3, r1
 801a566:	1c02      	adds	r2, r0, #0
 801a568:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801a56a:	4b56      	ldr	r3, [pc, #344]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a56c:	681a      	ldr	r2, [r3, #0]
 801a56e:	197b      	adds	r3, r7, r5
 801a570:	881b      	ldrh	r3, [r3, #0]
 801a572:	1979      	adds	r1, r7, r5
 801a574:	1c58      	adds	r0, r3, #1
 801a576:	8008      	strh	r0, [r1, #0]
 801a578:	001c      	movs	r4, r3
 801a57a:	4b54      	ldr	r3, [pc, #336]	; (801a6cc <send_DHCP_DECLINE+0x344>)
 801a57c:	7898      	ldrb	r0, [r3, #2]
 801a57e:	21ec      	movs	r1, #236	; 0xec
 801a580:	1913      	adds	r3, r2, r4
 801a582:	185b      	adds	r3, r3, r1
 801a584:	1c02      	adds	r2, r0, #0
 801a586:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801a588:	4b4e      	ldr	r3, [pc, #312]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a58a:	681a      	ldr	r2, [r3, #0]
 801a58c:	197b      	adds	r3, r7, r5
 801a58e:	881b      	ldrh	r3, [r3, #0]
 801a590:	1979      	adds	r1, r7, r5
 801a592:	1c58      	adds	r0, r3, #1
 801a594:	8008      	strh	r0, [r1, #0]
 801a596:	001c      	movs	r4, r3
 801a598:	4b4c      	ldr	r3, [pc, #304]	; (801a6cc <send_DHCP_DECLINE+0x344>)
 801a59a:	78d8      	ldrb	r0, [r3, #3]
 801a59c:	21ec      	movs	r1, #236	; 0xec
 801a59e:	1913      	adds	r3, r2, r4
 801a5a0:	185b      	adds	r3, r3, r1
 801a5a2:	1c02      	adds	r2, r0, #0
 801a5a4:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801a5a6:	4b47      	ldr	r3, [pc, #284]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a5a8:	681a      	ldr	r2, [r3, #0]
 801a5aa:	197b      	adds	r3, r7, r5
 801a5ac:	881b      	ldrh	r3, [r3, #0]
 801a5ae:	1979      	adds	r1, r7, r5
 801a5b0:	1c58      	adds	r0, r3, #1
 801a5b2:	8008      	strh	r0, [r1, #0]
 801a5b4:	21ec      	movs	r1, #236	; 0xec
 801a5b6:	18d3      	adds	r3, r2, r3
 801a5b8:	185b      	adds	r3, r3, r1
 801a5ba:	2236      	movs	r2, #54	; 0x36
 801a5bc:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x04;
 801a5be:	4b41      	ldr	r3, [pc, #260]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a5c0:	681a      	ldr	r2, [r3, #0]
 801a5c2:	197b      	adds	r3, r7, r5
 801a5c4:	881b      	ldrh	r3, [r3, #0]
 801a5c6:	1979      	adds	r1, r7, r5
 801a5c8:	1c58      	adds	r0, r3, #1
 801a5ca:	8008      	strh	r0, [r1, #0]
 801a5cc:	21ec      	movs	r1, #236	; 0xec
 801a5ce:	18d3      	adds	r3, r2, r3
 801a5d0:	185b      	adds	r3, r3, r1
 801a5d2:	2204      	movs	r2, #4
 801a5d4:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801a5d6:	4b3b      	ldr	r3, [pc, #236]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a5d8:	681a      	ldr	r2, [r3, #0]
 801a5da:	197b      	adds	r3, r7, r5
 801a5dc:	881b      	ldrh	r3, [r3, #0]
 801a5de:	1979      	adds	r1, r7, r5
 801a5e0:	1c58      	adds	r0, r3, #1
 801a5e2:	8008      	strh	r0, [r1, #0]
 801a5e4:	001c      	movs	r4, r3
 801a5e6:	4b3a      	ldr	r3, [pc, #232]	; (801a6d0 <send_DHCP_DECLINE+0x348>)
 801a5e8:	7818      	ldrb	r0, [r3, #0]
 801a5ea:	21ec      	movs	r1, #236	; 0xec
 801a5ec:	1913      	adds	r3, r2, r4
 801a5ee:	185b      	adds	r3, r3, r1
 801a5f0:	1c02      	adds	r2, r0, #0
 801a5f2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801a5f4:	4b33      	ldr	r3, [pc, #204]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a5f6:	681a      	ldr	r2, [r3, #0]
 801a5f8:	197b      	adds	r3, r7, r5
 801a5fa:	881b      	ldrh	r3, [r3, #0]
 801a5fc:	1979      	adds	r1, r7, r5
 801a5fe:	1c58      	adds	r0, r3, #1
 801a600:	8008      	strh	r0, [r1, #0]
 801a602:	001c      	movs	r4, r3
 801a604:	4b32      	ldr	r3, [pc, #200]	; (801a6d0 <send_DHCP_DECLINE+0x348>)
 801a606:	7858      	ldrb	r0, [r3, #1]
 801a608:	21ec      	movs	r1, #236	; 0xec
 801a60a:	1913      	adds	r3, r2, r4
 801a60c:	185b      	adds	r3, r3, r1
 801a60e:	1c02      	adds	r2, r0, #0
 801a610:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801a612:	4b2c      	ldr	r3, [pc, #176]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a614:	681a      	ldr	r2, [r3, #0]
 801a616:	197b      	adds	r3, r7, r5
 801a618:	881b      	ldrh	r3, [r3, #0]
 801a61a:	1979      	adds	r1, r7, r5
 801a61c:	1c58      	adds	r0, r3, #1
 801a61e:	8008      	strh	r0, [r1, #0]
 801a620:	001c      	movs	r4, r3
 801a622:	4b2b      	ldr	r3, [pc, #172]	; (801a6d0 <send_DHCP_DECLINE+0x348>)
 801a624:	7898      	ldrb	r0, [r3, #2]
 801a626:	21ec      	movs	r1, #236	; 0xec
 801a628:	1913      	adds	r3, r2, r4
 801a62a:	185b      	adds	r3, r3, r1
 801a62c:	1c02      	adds	r2, r0, #0
 801a62e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801a630:	4b24      	ldr	r3, [pc, #144]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a632:	681a      	ldr	r2, [r3, #0]
 801a634:	197b      	adds	r3, r7, r5
 801a636:	881b      	ldrh	r3, [r3, #0]
 801a638:	1979      	adds	r1, r7, r5
 801a63a:	1c58      	adds	r0, r3, #1
 801a63c:	8008      	strh	r0, [r1, #0]
 801a63e:	001c      	movs	r4, r3
 801a640:	4b23      	ldr	r3, [pc, #140]	; (801a6d0 <send_DHCP_DECLINE+0x348>)
 801a642:	78d8      	ldrb	r0, [r3, #3]
 801a644:	21ec      	movs	r1, #236	; 0xec
 801a646:	1913      	adds	r3, r2, r4
 801a648:	185b      	adds	r3, r3, r1
 801a64a:	1c02      	adds	r2, r0, #0
 801a64c:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->OPT[k++] = endOption;
 801a64e:	4b1d      	ldr	r3, [pc, #116]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a650:	681a      	ldr	r2, [r3, #0]
 801a652:	197b      	adds	r3, r7, r5
 801a654:	881b      	ldrh	r3, [r3, #0]
 801a656:	1979      	adds	r1, r7, r5
 801a658:	1c58      	adds	r0, r3, #1
 801a65a:	8008      	strh	r0, [r1, #0]
 801a65c:	21ec      	movs	r1, #236	; 0xec
 801a65e:	18d3      	adds	r3, r2, r3
 801a660:	185b      	adds	r3, r3, r1
 801a662:	22ff      	movs	r2, #255	; 0xff
 801a664:	701a      	strb	r2, [r3, #0]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801a666:	197b      	adds	r3, r7, r5
 801a668:	881b      	ldrh	r3, [r3, #0]
 801a66a:	60fb      	str	r3, [r7, #12]
 801a66c:	e00a      	b.n	801a684 <send_DHCP_DECLINE+0x2fc>
 801a66e:	4b15      	ldr	r3, [pc, #84]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a670:	681a      	ldr	r2, [r3, #0]
 801a672:	21ec      	movs	r1, #236	; 0xec
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	18d3      	adds	r3, r2, r3
 801a678:	185b      	adds	r3, r3, r1
 801a67a:	2200      	movs	r2, #0
 801a67c:	701a      	strb	r2, [r3, #0]
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	3301      	adds	r3, #1
 801a682:	60fb      	str	r3, [r7, #12]
 801a684:	68fa      	ldr	r2, [r7, #12]
 801a686:	239c      	movs	r3, #156	; 0x9c
 801a688:	005b      	lsls	r3, r3, #1
 801a68a:	429a      	cmp	r2, r3
 801a68c:	dbef      	blt.n	801a66e <send_DHCP_DECLINE+0x2e6>

	//send broadcasting packet
	ip[0] = 0xFF;
 801a68e:	1d3b      	adds	r3, r7, #4
 801a690:	22ff      	movs	r2, #255	; 0xff
 801a692:	701a      	strb	r2, [r3, #0]
	ip[1] = 0xFF;
 801a694:	1d3b      	adds	r3, r7, #4
 801a696:	22ff      	movs	r2, #255	; 0xff
 801a698:	705a      	strb	r2, [r3, #1]
	ip[2] = 0xFF;
 801a69a:	1d3b      	adds	r3, r7, #4
 801a69c:	22ff      	movs	r2, #255	; 0xff
 801a69e:	709a      	strb	r2, [r3, #2]
	ip[3] = 0xFF;
 801a6a0:	1d3b      	adds	r3, r7, #4
 801a6a2:	22ff      	movs	r2, #255	; 0xff
 801a6a4:	70da      	strb	r2, [r3, #3]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801a6a6:	4b0b      	ldr	r3, [pc, #44]	; (801a6d4 <send_DHCP_DECLINE+0x34c>)
 801a6a8:	7818      	ldrb	r0, [r3, #0]
 801a6aa:	4b06      	ldr	r3, [pc, #24]	; (801a6c4 <send_DHCP_DECLINE+0x33c>)
 801a6ac:	6819      	ldr	r1, [r3, #0]
 801a6ae:	1d3b      	adds	r3, r7, #4
 801a6b0:	2289      	movs	r2, #137	; 0x89
 801a6b2:	0092      	lsls	r2, r2, #2
 801a6b4:	2443      	movs	r4, #67	; 0x43
 801a6b6:	9400      	str	r4, [sp, #0]
 801a6b8:	f001 f946 	bl	801b948 <sendto>
}
 801a6bc:	46c0      	nop			; (mov r8, r8)
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	b004      	add	sp, #16
 801a6c2:	bdb0      	pop	{r4, r5, r7, pc}
 801a6c4:	20007af8 	.word	0x20007af8
 801a6c8:	20007afc 	.word	0x20007afc
 801a6cc:	20007adc 	.word	0x20007adc
 801a6d0:	20007ad0 	.word	0x20007ad0
 801a6d4:	20007acc 	.word	0x20007acc

0801a6d8 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801a6d8:	b5b0      	push	{r4, r5, r7, lr}
 801a6da:	b088      	sub	sp, #32
 801a6dc:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801a6de:	2313      	movs	r3, #19
 801a6e0:	18fb      	adds	r3, r7, r3
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	701a      	strb	r2, [r3, #0]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801a6e6:	4bcf      	ldr	r3, [pc, #828]	; (801aa24 <parseDHCPMSG+0x34c>)
 801a6e8:	781b      	ldrb	r3, [r3, #0]
 801a6ea:	2510      	movs	r5, #16
 801a6ec:	197c      	adds	r4, r7, r5
 801a6ee:	0018      	movs	r0, r3
 801a6f0:	f7fe fdd4 	bl	801929c <getSn_RX_RSR>
 801a6f4:	0003      	movs	r3, r0
 801a6f6:	8023      	strh	r3, [r4, #0]
 801a6f8:	002a      	movs	r2, r5
 801a6fa:	18bb      	adds	r3, r7, r2
 801a6fc:	881b      	ldrh	r3, [r3, #0]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d015      	beq.n	801a72e <parseDHCPMSG+0x56>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801a702:	4bc8      	ldr	r3, [pc, #800]	; (801aa24 <parseDHCPMSG+0x34c>)
 801a704:	7818      	ldrb	r0, [r3, #0]
 801a706:	4bc8      	ldr	r3, [pc, #800]	; (801aa28 <parseDHCPMSG+0x350>)
 801a708:	6819      	ldr	r1, [r3, #0]
 801a70a:	1d3c      	adds	r4, r7, #4
 801a70c:	0015      	movs	r5, r2
 801a70e:	18bb      	adds	r3, r7, r2
 801a710:	881a      	ldrh	r2, [r3, #0]
 801a712:	1cbb      	adds	r3, r7, #2
 801a714:	9300      	str	r3, [sp, #0]
 801a716:	0023      	movs	r3, r4
 801a718:	f001 faaa 	bl	801bc70 <recvfrom>
 801a71c:	0002      	movs	r2, r0
 801a71e:	197b      	adds	r3, r7, r5
 801a720:	801a      	strh	r2, [r3, #0]
   #endif   
   }
   else{
	   return 0;
   }
	if (svr_port == DHCP_SERVER_PORT) {
 801a722:	1cbb      	adds	r3, r7, #2
 801a724:	881b      	ldrh	r3, [r3, #0]
 801a726:	2b43      	cmp	r3, #67	; 0x43
 801a728:	d000      	beq.n	801a72c <parseDHCPMSG+0x54>
 801a72a:	e1a4      	b.n	801aa76 <parseDHCPMSG+0x39e>
 801a72c:	e001      	b.n	801a732 <parseDHCPMSG+0x5a>
	   return 0;
 801a72e:	2300      	movs	r3, #0
 801a730:	e1a5      	b.n	801aa7e <parseDHCPMSG+0x3a6>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801a732:	4bbd      	ldr	r3, [pc, #756]	; (801aa28 <parseDHCPMSG+0x350>)
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	7f1a      	ldrb	r2, [r3, #28]
 801a738:	4bbc      	ldr	r3, [pc, #752]	; (801aa2c <parseDHCPMSG+0x354>)
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	429a      	cmp	r2, r3
 801a73e:	d124      	bne.n	801a78a <parseDHCPMSG+0xb2>
 801a740:	4bb9      	ldr	r3, [pc, #740]	; (801aa28 <parseDHCPMSG+0x350>)
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	7f5a      	ldrb	r2, [r3, #29]
 801a746:	4bb9      	ldr	r3, [pc, #740]	; (801aa2c <parseDHCPMSG+0x354>)
 801a748:	785b      	ldrb	r3, [r3, #1]
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d11d      	bne.n	801a78a <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801a74e:	4bb6      	ldr	r3, [pc, #728]	; (801aa28 <parseDHCPMSG+0x350>)
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	7f9a      	ldrb	r2, [r3, #30]
 801a754:	4bb5      	ldr	r3, [pc, #724]	; (801aa2c <parseDHCPMSG+0x354>)
 801a756:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801a758:	429a      	cmp	r2, r3
 801a75a:	d116      	bne.n	801a78a <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801a75c:	4bb2      	ldr	r3, [pc, #712]	; (801aa28 <parseDHCPMSG+0x350>)
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	7fda      	ldrb	r2, [r3, #31]
 801a762:	4bb2      	ldr	r3, [pc, #712]	; (801aa2c <parseDHCPMSG+0x354>)
 801a764:	78db      	ldrb	r3, [r3, #3]
 801a766:	429a      	cmp	r2, r3
 801a768:	d10f      	bne.n	801a78a <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801a76a:	4baf      	ldr	r3, [pc, #700]	; (801aa28 <parseDHCPMSG+0x350>)
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	2220      	movs	r2, #32
 801a770:	5c9a      	ldrb	r2, [r3, r2]
 801a772:	4bae      	ldr	r3, [pc, #696]	; (801aa2c <parseDHCPMSG+0x354>)
 801a774:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801a776:	429a      	cmp	r2, r3
 801a778:	d107      	bne.n	801a78a <parseDHCPMSG+0xb2>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801a77a:	4bab      	ldr	r3, [pc, #684]	; (801aa28 <parseDHCPMSG+0x350>)
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	2221      	movs	r2, #33	; 0x21
 801a780:	5c9a      	ldrb	r2, [r3, r2]
 801a782:	4baa      	ldr	r3, [pc, #680]	; (801aa2c <parseDHCPMSG+0x354>)
 801a784:	795b      	ldrb	r3, [r3, #5]
 801a786:	429a      	cmp	r2, r3
 801a788:	d001      	beq.n	801a78e <parseDHCPMSG+0xb6>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801a78a:	2300      	movs	r3, #0
 801a78c:	e177      	b.n	801aa7e <parseDHCPMSG+0x3a6>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801a78e:	4ba8      	ldr	r3, [pc, #672]	; (801aa30 <parseDHCPMSG+0x358>)
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d10b      	bne.n	801a7ae <parseDHCPMSG+0xd6>
 801a796:	4ba6      	ldr	r3, [pc, #664]	; (801aa30 <parseDHCPMSG+0x358>)
 801a798:	785b      	ldrb	r3, [r3, #1]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d107      	bne.n	801a7ae <parseDHCPMSG+0xd6>
 801a79e:	4ba4      	ldr	r3, [pc, #656]	; (801aa30 <parseDHCPMSG+0x358>)
 801a7a0:	789b      	ldrb	r3, [r3, #2]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d103      	bne.n	801a7ae <parseDHCPMSG+0xd6>
 801a7a6:	4ba2      	ldr	r3, [pc, #648]	; (801aa30 <parseDHCPMSG+0x358>)
 801a7a8:	78db      	ldrb	r3, [r3, #3]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d031      	beq.n	801a812 <parseDHCPMSG+0x13a>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801a7ae:	1d3b      	adds	r3, r7, #4
 801a7b0:	781a      	ldrb	r2, [r3, #0]
 801a7b2:	4b9f      	ldr	r3, [pc, #636]	; (801aa30 <parseDHCPMSG+0x358>)
 801a7b4:	781b      	ldrb	r3, [r3, #0]
 801a7b6:	429a      	cmp	r2, r3
 801a7b8:	d111      	bne.n	801a7de <parseDHCPMSG+0x106>
 801a7ba:	1d3b      	adds	r3, r7, #4
 801a7bc:	785a      	ldrb	r2, [r3, #1]
 801a7be:	4b9c      	ldr	r3, [pc, #624]	; (801aa30 <parseDHCPMSG+0x358>)
 801a7c0:	785b      	ldrb	r3, [r3, #1]
 801a7c2:	429a      	cmp	r2, r3
 801a7c4:	d10b      	bne.n	801a7de <parseDHCPMSG+0x106>
 801a7c6:	1d3b      	adds	r3, r7, #4
 801a7c8:	789a      	ldrb	r2, [r3, #2]
 801a7ca:	4b99      	ldr	r3, [pc, #612]	; (801aa30 <parseDHCPMSG+0x358>)
 801a7cc:	789b      	ldrb	r3, [r3, #2]
 801a7ce:	429a      	cmp	r2, r3
 801a7d0:	d105      	bne.n	801a7de <parseDHCPMSG+0x106>
 801a7d2:	1d3b      	adds	r3, r7, #4
 801a7d4:	78da      	ldrb	r2, [r3, #3]
 801a7d6:	4b96      	ldr	r3, [pc, #600]	; (801aa30 <parseDHCPMSG+0x358>)
 801a7d8:	78db      	ldrb	r3, [r3, #3]
 801a7da:	429a      	cmp	r2, r3
 801a7dc:	d019      	beq.n	801a812 <parseDHCPMSG+0x13a>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801a7de:	1d3b      	adds	r3, r7, #4
 801a7e0:	781a      	ldrb	r2, [r3, #0]
 801a7e2:	4b94      	ldr	r3, [pc, #592]	; (801aa34 <parseDHCPMSG+0x35c>)
 801a7e4:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	d111      	bne.n	801a80e <parseDHCPMSG+0x136>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801a7ea:	1d3b      	adds	r3, r7, #4
 801a7ec:	785a      	ldrb	r2, [r3, #1]
 801a7ee:	4b91      	ldr	r3, [pc, #580]	; (801aa34 <parseDHCPMSG+0x35c>)
 801a7f0:	785b      	ldrb	r3, [r3, #1]
 801a7f2:	429a      	cmp	r2, r3
 801a7f4:	d10b      	bne.n	801a80e <parseDHCPMSG+0x136>
 801a7f6:	1d3b      	adds	r3, r7, #4
 801a7f8:	789a      	ldrb	r2, [r3, #2]
 801a7fa:	4b8e      	ldr	r3, [pc, #568]	; (801aa34 <parseDHCPMSG+0x35c>)
 801a7fc:	789b      	ldrb	r3, [r3, #2]
 801a7fe:	429a      	cmp	r2, r3
 801a800:	d105      	bne.n	801a80e <parseDHCPMSG+0x136>
 801a802:	1d3b      	adds	r3, r7, #4
 801a804:	78da      	ldrb	r2, [r3, #3]
 801a806:	4b8b      	ldr	r3, [pc, #556]	; (801aa34 <parseDHCPMSG+0x35c>)
 801a808:	78db      	ldrb	r3, [r3, #3]
 801a80a:	429a      	cmp	r2, r3
 801a80c:	d001      	beq.n	801a812 <parseDHCPMSG+0x13a>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801a80e:	2300      	movs	r3, #0
 801a810:	e135      	b.n	801aa7e <parseDHCPMSG+0x3a6>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801a812:	4b85      	ldr	r3, [pc, #532]	; (801aa28 <parseDHCPMSG+0x350>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801a818:	697b      	ldr	r3, [r7, #20]
 801a81a:	33f0      	adds	r3, #240	; 0xf0
 801a81c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801a81e:	2310      	movs	r3, #16
 801a820:	18fb      	adds	r3, r7, r3
 801a822:	881b      	ldrh	r3, [r3, #0]
 801a824:	3bf0      	subs	r3, #240	; 0xf0
 801a826:	697a      	ldr	r2, [r7, #20]
 801a828:	18d3      	adds	r3, r2, r3
 801a82a:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801a82c:	e11e      	b.n	801aa6c <parseDHCPMSG+0x394>

			switch ( *p ) {
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	2b36      	cmp	r3, #54	; 0x36
 801a834:	dc0a      	bgt.n	801a84c <parseDHCPMSG+0x174>
 801a836:	2b00      	cmp	r3, #0
 801a838:	da00      	bge.n	801a83c <parseDHCPMSG+0x164>
 801a83a:	e107      	b.n	801aa4c <parseDHCPMSG+0x374>
 801a83c:	2b36      	cmp	r3, #54	; 0x36
 801a83e:	d900      	bls.n	801a842 <parseDHCPMSG+0x16a>
 801a840:	e104      	b.n	801aa4c <parseDHCPMSG+0x374>
 801a842:	009a      	lsls	r2, r3, #2
 801a844:	4b7c      	ldr	r3, [pc, #496]	; (801aa38 <parseDHCPMSG+0x360>)
 801a846:	18d3      	adds	r3, r2, r3
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	469f      	mov	pc, r3
 801a84c:	2bff      	cmp	r3, #255	; 0xff
 801a84e:	d000      	beq.n	801a852 <parseDHCPMSG+0x17a>
 801a850:	e0fc      	b.n	801aa4c <parseDHCPMSG+0x374>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	617b      	str	r3, [r7, #20]
   				break;
 801a856:	e109      	b.n	801aa6c <parseDHCPMSG+0x394>
            case padOption :
   				p++;
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	3301      	adds	r3, #1
 801a85c:	617b      	str	r3, [r7, #20]
   				break;
 801a85e:	e105      	b.n	801aa6c <parseDHCPMSG+0x394>
   			case dhcpMessageType :
   				p++;
 801a860:	697b      	ldr	r3, [r7, #20]
 801a862:	3301      	adds	r3, #1
 801a864:	617b      	str	r3, [r7, #20]
   				p++;
 801a866:	697b      	ldr	r3, [r7, #20]
 801a868:	3301      	adds	r3, #1
 801a86a:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801a86c:	697b      	ldr	r3, [r7, #20]
 801a86e:	1c5a      	adds	r2, r3, #1
 801a870:	617a      	str	r2, [r7, #20]
 801a872:	2213      	movs	r2, #19
 801a874:	18ba      	adds	r2, r7, r2
 801a876:	781b      	ldrb	r3, [r3, #0]
 801a878:	7013      	strb	r3, [r2, #0]
   				break;
 801a87a:	e0f7      	b.n	801aa6c <parseDHCPMSG+0x394>
   			case subnetMask :
   				p++;
 801a87c:	697b      	ldr	r3, [r7, #20]
 801a87e:	3301      	adds	r3, #1
 801a880:	617b      	str	r3, [r7, #20]
   				p++;
 801a882:	697b      	ldr	r3, [r7, #20]
 801a884:	3301      	adds	r3, #1
 801a886:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801a888:	697b      	ldr	r3, [r7, #20]
 801a88a:	1c5a      	adds	r2, r3, #1
 801a88c:	617a      	str	r2, [r7, #20]
 801a88e:	781a      	ldrb	r2, [r3, #0]
 801a890:	4b6a      	ldr	r3, [pc, #424]	; (801aa3c <parseDHCPMSG+0x364>)
 801a892:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	1c5a      	adds	r2, r3, #1
 801a898:	617a      	str	r2, [r7, #20]
 801a89a:	781a      	ldrb	r2, [r3, #0]
 801a89c:	4b67      	ldr	r3, [pc, #412]	; (801aa3c <parseDHCPMSG+0x364>)
 801a89e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801a8a0:	697b      	ldr	r3, [r7, #20]
 801a8a2:	1c5a      	adds	r2, r3, #1
 801a8a4:	617a      	str	r2, [r7, #20]
 801a8a6:	781a      	ldrb	r2, [r3, #0]
 801a8a8:	4b64      	ldr	r3, [pc, #400]	; (801aa3c <parseDHCPMSG+0x364>)
 801a8aa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801a8ac:	697b      	ldr	r3, [r7, #20]
 801a8ae:	1c5a      	adds	r2, r3, #1
 801a8b0:	617a      	str	r2, [r7, #20]
 801a8b2:	781a      	ldrb	r2, [r3, #0]
 801a8b4:	4b61      	ldr	r3, [pc, #388]	; (801aa3c <parseDHCPMSG+0x364>)
 801a8b6:	70da      	strb	r2, [r3, #3]
   				break;
 801a8b8:	e0d8      	b.n	801aa6c <parseDHCPMSG+0x394>
   			case routersOnSubnet :
   				p++;
 801a8ba:	697b      	ldr	r3, [r7, #20]
 801a8bc:	3301      	adds	r3, #1
 801a8be:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801a8c0:	697b      	ldr	r3, [r7, #20]
 801a8c2:	1c5a      	adds	r2, r3, #1
 801a8c4:	617a      	str	r2, [r7, #20]
 801a8c6:	210b      	movs	r1, #11
 801a8c8:	187a      	adds	r2, r7, r1
 801a8ca:	781b      	ldrb	r3, [r3, #0]
 801a8cc:	7013      	strb	r3, [r2, #0]
   				DHCP_allocated_gw[0] = *p++;
 801a8ce:	697b      	ldr	r3, [r7, #20]
 801a8d0:	1c5a      	adds	r2, r3, #1
 801a8d2:	617a      	str	r2, [r7, #20]
 801a8d4:	781a      	ldrb	r2, [r3, #0]
 801a8d6:	4b5a      	ldr	r3, [pc, #360]	; (801aa40 <parseDHCPMSG+0x368>)
 801a8d8:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801a8da:	697b      	ldr	r3, [r7, #20]
 801a8dc:	1c5a      	adds	r2, r3, #1
 801a8de:	617a      	str	r2, [r7, #20]
 801a8e0:	781a      	ldrb	r2, [r3, #0]
 801a8e2:	4b57      	ldr	r3, [pc, #348]	; (801aa40 <parseDHCPMSG+0x368>)
 801a8e4:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801a8e6:	697b      	ldr	r3, [r7, #20]
 801a8e8:	1c5a      	adds	r2, r3, #1
 801a8ea:	617a      	str	r2, [r7, #20]
 801a8ec:	781a      	ldrb	r2, [r3, #0]
 801a8ee:	4b54      	ldr	r3, [pc, #336]	; (801aa40 <parseDHCPMSG+0x368>)
 801a8f0:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	1c5a      	adds	r2, r3, #1
 801a8f6:	617a      	str	r2, [r7, #20]
 801a8f8:	781a      	ldrb	r2, [r3, #0]
 801a8fa:	4b51      	ldr	r3, [pc, #324]	; (801aa40 <parseDHCPMSG+0x368>)
 801a8fc:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801a8fe:	187b      	adds	r3, r7, r1
 801a900:	781b      	ldrb	r3, [r3, #0]
 801a902:	3b04      	subs	r3, #4
 801a904:	697a      	ldr	r2, [r7, #20]
 801a906:	18d3      	adds	r3, r2, r3
 801a908:	617b      	str	r3, [r7, #20]
   				break;
 801a90a:	e0af      	b.n	801aa6c <parseDHCPMSG+0x394>
   			case dns :
   				p++;                  
 801a90c:	697b      	ldr	r3, [r7, #20]
 801a90e:	3301      	adds	r3, #1
 801a910:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801a912:	697b      	ldr	r3, [r7, #20]
 801a914:	1c5a      	adds	r2, r3, #1
 801a916:	617a      	str	r2, [r7, #20]
 801a918:	210b      	movs	r1, #11
 801a91a:	187a      	adds	r2, r7, r1
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	7013      	strb	r3, [r2, #0]
   				DHCP_allocated_dns[0] = *p++;
 801a920:	697b      	ldr	r3, [r7, #20]
 801a922:	1c5a      	adds	r2, r3, #1
 801a924:	617a      	str	r2, [r7, #20]
 801a926:	781a      	ldrb	r2, [r3, #0]
 801a928:	4b46      	ldr	r3, [pc, #280]	; (801aa44 <parseDHCPMSG+0x36c>)
 801a92a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801a92c:	697b      	ldr	r3, [r7, #20]
 801a92e:	1c5a      	adds	r2, r3, #1
 801a930:	617a      	str	r2, [r7, #20]
 801a932:	781a      	ldrb	r2, [r3, #0]
 801a934:	4b43      	ldr	r3, [pc, #268]	; (801aa44 <parseDHCPMSG+0x36c>)
 801a936:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801a938:	697b      	ldr	r3, [r7, #20]
 801a93a:	1c5a      	adds	r2, r3, #1
 801a93c:	617a      	str	r2, [r7, #20]
 801a93e:	781a      	ldrb	r2, [r3, #0]
 801a940:	4b40      	ldr	r3, [pc, #256]	; (801aa44 <parseDHCPMSG+0x36c>)
 801a942:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801a944:	697b      	ldr	r3, [r7, #20]
 801a946:	1c5a      	adds	r2, r3, #1
 801a948:	617a      	str	r2, [r7, #20]
 801a94a:	781a      	ldrb	r2, [r3, #0]
 801a94c:	4b3d      	ldr	r3, [pc, #244]	; (801aa44 <parseDHCPMSG+0x36c>)
 801a94e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801a950:	187b      	adds	r3, r7, r1
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	3b04      	subs	r3, #4
 801a956:	697a      	ldr	r2, [r7, #20]
 801a958:	18d3      	adds	r3, r2, r3
 801a95a:	617b      	str	r3, [r7, #20]
   				break;
 801a95c:	e086      	b.n	801aa6c <parseDHCPMSG+0x394>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801a95e:	697b      	ldr	r3, [r7, #20]
 801a960:	3301      	adds	r3, #1
 801a962:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801a964:	697b      	ldr	r3, [r7, #20]
 801a966:	1c5a      	adds	r2, r3, #1
 801a968:	617a      	str	r2, [r7, #20]
 801a96a:	220b      	movs	r2, #11
 801a96c:	18ba      	adds	r2, r7, r2
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	7013      	strb	r3, [r2, #0]
   				dhcp_lease_time  = *p++;
 801a972:	697b      	ldr	r3, [r7, #20]
 801a974:	1c5a      	adds	r2, r3, #1
 801a976:	617a      	str	r2, [r7, #20]
 801a978:	781b      	ldrb	r3, [r3, #0]
 801a97a:	001a      	movs	r2, r3
 801a97c:	4b32      	ldr	r3, [pc, #200]	; (801aa48 <parseDHCPMSG+0x370>)
 801a97e:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801a980:	4b31      	ldr	r3, [pc, #196]	; (801aa48 <parseDHCPMSG+0x370>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	021a      	lsls	r2, r3, #8
 801a986:	697b      	ldr	r3, [r7, #20]
 801a988:	1c59      	adds	r1, r3, #1
 801a98a:	6179      	str	r1, [r7, #20]
 801a98c:	781b      	ldrb	r3, [r3, #0]
 801a98e:	18d2      	adds	r2, r2, r3
 801a990:	4b2d      	ldr	r3, [pc, #180]	; (801aa48 <parseDHCPMSG+0x370>)
 801a992:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801a994:	4b2c      	ldr	r3, [pc, #176]	; (801aa48 <parseDHCPMSG+0x370>)
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	021a      	lsls	r2, r3, #8
 801a99a:	697b      	ldr	r3, [r7, #20]
 801a99c:	1c59      	adds	r1, r3, #1
 801a99e:	6179      	str	r1, [r7, #20]
 801a9a0:	781b      	ldrb	r3, [r3, #0]
 801a9a2:	18d2      	adds	r2, r2, r3
 801a9a4:	4b28      	ldr	r3, [pc, #160]	; (801aa48 <parseDHCPMSG+0x370>)
 801a9a6:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801a9a8:	4b27      	ldr	r3, [pc, #156]	; (801aa48 <parseDHCPMSG+0x370>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	021a      	lsls	r2, r3, #8
 801a9ae:	697b      	ldr	r3, [r7, #20]
 801a9b0:	1c59      	adds	r1, r3, #1
 801a9b2:	6179      	str	r1, [r7, #20]
 801a9b4:	781b      	ldrb	r3, [r3, #0]
 801a9b6:	18d2      	adds	r2, r2, r3
 801a9b8:	4b23      	ldr	r3, [pc, #140]	; (801aa48 <parseDHCPMSG+0x370>)
 801a9ba:	601a      	str	r2, [r3, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801a9bc:	e056      	b.n	801aa6c <parseDHCPMSG+0x394>
   			case dhcpServerIdentifier :
   				p++;
 801a9be:	697b      	ldr	r3, [r7, #20]
 801a9c0:	3301      	adds	r3, #1
 801a9c2:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801a9c4:	697b      	ldr	r3, [r7, #20]
 801a9c6:	1c5a      	adds	r2, r3, #1
 801a9c8:	617a      	str	r2, [r7, #20]
 801a9ca:	220b      	movs	r2, #11
 801a9cc:	18ba      	adds	r2, r7, r2
 801a9ce:	781b      	ldrb	r3, [r3, #0]
 801a9d0:	7013      	strb	r3, [r2, #0]
   				DHCP_SIP[0] = *p++;
 801a9d2:	697b      	ldr	r3, [r7, #20]
 801a9d4:	1c5a      	adds	r2, r3, #1
 801a9d6:	617a      	str	r2, [r7, #20]
 801a9d8:	781a      	ldrb	r2, [r3, #0]
 801a9da:	4b15      	ldr	r3, [pc, #84]	; (801aa30 <parseDHCPMSG+0x358>)
 801a9dc:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801a9de:	697b      	ldr	r3, [r7, #20]
 801a9e0:	1c5a      	adds	r2, r3, #1
 801a9e2:	617a      	str	r2, [r7, #20]
 801a9e4:	781a      	ldrb	r2, [r3, #0]
 801a9e6:	4b12      	ldr	r3, [pc, #72]	; (801aa30 <parseDHCPMSG+0x358>)
 801a9e8:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801a9ea:	697b      	ldr	r3, [r7, #20]
 801a9ec:	1c5a      	adds	r2, r3, #1
 801a9ee:	617a      	str	r2, [r7, #20]
 801a9f0:	781a      	ldrb	r2, [r3, #0]
 801a9f2:	4b0f      	ldr	r3, [pc, #60]	; (801aa30 <parseDHCPMSG+0x358>)
 801a9f4:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801a9f6:	697b      	ldr	r3, [r7, #20]
 801a9f8:	1c5a      	adds	r2, r3, #1
 801a9fa:	617a      	str	r2, [r7, #20]
 801a9fc:	781a      	ldrb	r2, [r3, #0]
 801a9fe:	4b0c      	ldr	r3, [pc, #48]	; (801aa30 <parseDHCPMSG+0x358>)
 801aa00:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801aa02:	1d3b      	adds	r3, r7, #4
 801aa04:	781a      	ldrb	r2, [r3, #0]
 801aa06:	4b0b      	ldr	r3, [pc, #44]	; (801aa34 <parseDHCPMSG+0x35c>)
 801aa08:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801aa0a:	1d3b      	adds	r3, r7, #4
 801aa0c:	785a      	ldrb	r2, [r3, #1]
 801aa0e:	4b09      	ldr	r3, [pc, #36]	; (801aa34 <parseDHCPMSG+0x35c>)
 801aa10:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801aa12:	1d3b      	adds	r3, r7, #4
 801aa14:	789a      	ldrb	r2, [r3, #2]
 801aa16:	4b07      	ldr	r3, [pc, #28]	; (801aa34 <parseDHCPMSG+0x35c>)
 801aa18:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801aa1a:	1d3b      	adds	r3, r7, #4
 801aa1c:	78da      	ldrb	r2, [r3, #3]
 801aa1e:	4b05      	ldr	r3, [pc, #20]	; (801aa34 <parseDHCPMSG+0x35c>)
 801aa20:	70da      	strb	r2, [r3, #3]
   				break;
 801aa22:	e023      	b.n	801aa6c <parseDHCPMSG+0x394>
 801aa24:	20007acc 	.word	0x20007acc
 801aa28:	20007af8 	.word	0x20007af8
 801aa2c:	20007afc 	.word	0x20007afc
 801aa30:	20007ad0 	.word	0x20007ad0
 801aa34:	20007ad4 	.word	0x20007ad4
 801aa38:	08031d70 	.word	0x08031d70
 801aa3c:	20007ae4 	.word	0x20007ae4
 801aa40:	20007ae0 	.word	0x20007ae0
 801aa44:	20007ae8 	.word	0x20007ae8
 801aa48:	20005064 	.word	0x20005064
   			default :
   				p++;
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	3301      	adds	r3, #1
 801aa50:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801aa52:	697b      	ldr	r3, [r7, #20]
 801aa54:	1c5a      	adds	r2, r3, #1
 801aa56:	617a      	str	r2, [r7, #20]
 801aa58:	210b      	movs	r1, #11
 801aa5a:	187a      	adds	r2, r7, r1
 801aa5c:	781b      	ldrb	r3, [r3, #0]
 801aa5e:	7013      	strb	r3, [r2, #0]
   				p += opt_len;
 801aa60:	187b      	adds	r3, r7, r1
 801aa62:	781b      	ldrb	r3, [r3, #0]
 801aa64:	697a      	ldr	r2, [r7, #20]
 801aa66:	18d3      	adds	r3, r2, r3
 801aa68:	617b      	str	r3, [r7, #20]
   				break;
 801aa6a:	46c0      	nop			; (mov r8, r8)
		while ( p < e ) {
 801aa6c:	697a      	ldr	r2, [r7, #20]
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	429a      	cmp	r2, r3
 801aa72:	d200      	bcs.n	801aa76 <parseDHCPMSG+0x39e>
 801aa74:	e6db      	b.n	801a82e <parseDHCPMSG+0x156>
			} // switch
		} // while
	} // if
	return	type;
 801aa76:	2313      	movs	r3, #19
 801aa78:	18fb      	adds	r3, r7, r3
 801aa7a:	781b      	ldrb	r3, [r3, #0]
 801aa7c:	b25b      	sxtb	r3, r3
}
 801aa7e:	0018      	movs	r0, r3
 801aa80:	46bd      	mov	sp, r7
 801aa82:	b006      	add	sp, #24
 801aa84:	bdb0      	pop	{r4, r5, r7, pc}
 801aa86:	46c0      	nop			; (mov r8, r8)

0801aa88 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801aa88:	b590      	push	{r4, r7, lr}
 801aa8a:	b083      	sub	sp, #12
 801aa8c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801aa8e:	4b83      	ldr	r3, [pc, #524]	; (801ac9c <DHCP_run+0x214>)
 801aa90:	781b      	ldrb	r3, [r3, #0]
 801aa92:	b25b      	sxtb	r3, r3
 801aa94:	2b06      	cmp	r3, #6
 801aa96:	d101      	bne.n	801aa9c <DHCP_run+0x14>
 801aa98:	2305      	movs	r3, #5
 801aa9a:	e0fa      	b.n	801ac92 <DHCP_run+0x20a>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801aa9c:	4b80      	ldr	r3, [pc, #512]	; (801aca0 <DHCP_run+0x218>)
 801aa9e:	781b      	ldrb	r3, [r3, #0]
 801aaa0:	009b      	lsls	r3, r3, #2
 801aaa2:	3301      	adds	r3, #1
 801aaa4:	00db      	lsls	r3, r3, #3
 801aaa6:	22c0      	movs	r2, #192	; 0xc0
 801aaa8:	0092      	lsls	r2, r2, #2
 801aaaa:	4694      	mov	ip, r2
 801aaac:	4463      	add	r3, ip
 801aaae:	0018      	movs	r0, r3
 801aab0:	f7fe fa04 	bl	8018ebc <WIZCHIP_READ>
 801aab4:	0003      	movs	r3, r0
 801aab6:	2b22      	cmp	r3, #34	; 0x22
 801aab8:	d006      	beq.n	801aac8 <DHCP_run+0x40>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801aaba:	4b79      	ldr	r3, [pc, #484]	; (801aca0 <DHCP_run+0x218>)
 801aabc:	7818      	ldrb	r0, [r3, #0]
 801aabe:	2300      	movs	r3, #0
 801aac0:	2244      	movs	r2, #68	; 0x44
 801aac2:	2102      	movs	r1, #2
 801aac4:	f000 fa88 	bl	801afd8 <socket>

	ret = DHCP_RUNNING;
 801aac8:	1dfb      	adds	r3, r7, #7
 801aaca:	2201      	movs	r2, #1
 801aacc:	701a      	strb	r2, [r3, #0]
	type = parseDHCPMSG();
 801aace:	f7ff fe03 	bl	801a6d8 <parseDHCPMSG>
 801aad2:	0003      	movs	r3, r0
 801aad4:	001a      	movs	r2, r3
 801aad6:	1dbb      	adds	r3, r7, #6
 801aad8:	701a      	strb	r2, [r3, #0]

	switch ( dhcp_state ) {
 801aada:	4b70      	ldr	r3, [pc, #448]	; (801ac9c <DHCP_run+0x214>)
 801aadc:	781b      	ldrb	r3, [r3, #0]
 801aade:	b25b      	sxtb	r3, r3
 801aae0:	2b04      	cmp	r3, #4
 801aae2:	d900      	bls.n	801aae6 <DHCP_run+0x5e>
 801aae4:	e0d0      	b.n	801ac88 <DHCP_run+0x200>
 801aae6:	009a      	lsls	r2, r3, #2
 801aae8:	4b6e      	ldr	r3, [pc, #440]	; (801aca4 <DHCP_run+0x21c>)
 801aaea:	18d3      	adds	r3, r2, r3
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	469f      	mov	pc, r3
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801aaf0:	4b6d      	ldr	r3, [pc, #436]	; (801aca8 <DHCP_run+0x220>)
 801aaf2:	2200      	movs	r2, #0
 801aaf4:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801aaf6:	4b6c      	ldr	r3, [pc, #432]	; (801aca8 <DHCP_run+0x220>)
 801aaf8:	2200      	movs	r2, #0
 801aafa:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801aafc:	4b6a      	ldr	r3, [pc, #424]	; (801aca8 <DHCP_run+0x220>)
 801aafe:	2200      	movs	r2, #0
 801ab00:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801ab02:	4b69      	ldr	r3, [pc, #420]	; (801aca8 <DHCP_run+0x220>)
 801ab04:	2200      	movs	r2, #0
 801ab06:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801ab08:	f7fe fede 	bl	80198c8 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801ab0c:	4b63      	ldr	r3, [pc, #396]	; (801ac9c <DHCP_run+0x214>)
 801ab0e:	2201      	movs	r2, #1
 801ab10:	701a      	strb	r2, [r3, #0]
   		break;
 801ab12:	e0bc      	b.n	801ac8e <DHCP_run+0x206>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801ab14:	1dbb      	adds	r3, r7, #6
 801ab16:	781b      	ldrb	r3, [r3, #0]
 801ab18:	2b02      	cmp	r3, #2
 801ab1a:	d119      	bne.n	801ab50 <DHCP_run+0xc8>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801ab1c:	4b63      	ldr	r3, [pc, #396]	; (801acac <DHCP_run+0x224>)
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	7c1a      	ldrb	r2, [r3, #16]
 801ab22:	4b61      	ldr	r3, [pc, #388]	; (801aca8 <DHCP_run+0x220>)
 801ab24:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801ab26:	4b61      	ldr	r3, [pc, #388]	; (801acac <DHCP_run+0x224>)
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	7c5a      	ldrb	r2, [r3, #17]
 801ab2c:	4b5e      	ldr	r3, [pc, #376]	; (801aca8 <DHCP_run+0x220>)
 801ab2e:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801ab30:	4b5e      	ldr	r3, [pc, #376]	; (801acac <DHCP_run+0x224>)
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	7c9a      	ldrb	r2, [r3, #18]
 801ab36:	4b5c      	ldr	r3, [pc, #368]	; (801aca8 <DHCP_run+0x220>)
 801ab38:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801ab3a:	4b5c      	ldr	r3, [pc, #368]	; (801acac <DHCP_run+0x224>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	7cda      	ldrb	r2, [r3, #19]
 801ab40:	4b59      	ldr	r3, [pc, #356]	; (801aca8 <DHCP_run+0x220>)
 801ab42:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801ab44:	f7ff f8fe 	bl	8019d44 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801ab48:	4b54      	ldr	r3, [pc, #336]	; (801ac9c <DHCP_run+0x214>)
 801ab4a:	2202      	movs	r2, #2
 801ab4c:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801ab4e:	e09e      	b.n	801ac8e <DHCP_run+0x206>
			} else ret = check_DHCP_timeout();
 801ab50:	1dfc      	adds	r4, r7, #7
 801ab52:	f000 f8cf 	bl	801acf4 <check_DHCP_timeout>
 801ab56:	0003      	movs	r3, r0
 801ab58:	7023      	strb	r3, [r4, #0]
         break;
 801ab5a:	e098      	b.n	801ac8e <DHCP_run+0x206>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801ab5c:	1dbb      	adds	r3, r7, #6
 801ab5e:	781b      	ldrb	r3, [r3, #0]
 801ab60:	2b05      	cmp	r3, #5
 801ab62:	d115      	bne.n	801ab90 <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801ab64:	f000 f928 	bl	801adb8 <check_DHCP_leasedIP>
 801ab68:	1e03      	subs	r3, r0, #0
 801ab6a:	d008      	beq.n	801ab7e <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801ab6c:	4b50      	ldr	r3, [pc, #320]	; (801acb0 <DHCP_run+0x228>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	4798      	blx	r3
					reset_DHCP_timeout();
 801ab72:	f000 f9ff 	bl	801af74 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801ab76:	4b49      	ldr	r3, [pc, #292]	; (801ac9c <DHCP_run+0x214>)
 801ab78:	2203      	movs	r2, #3
 801ab7a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801ab7c:	e087      	b.n	801ac8e <DHCP_run+0x206>
					reset_DHCP_timeout();
 801ab7e:	f000 f9f9 	bl	801af74 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801ab82:	4b4c      	ldr	r3, [pc, #304]	; (801acb4 <DHCP_run+0x22c>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801ab88:	4b44      	ldr	r3, [pc, #272]	; (801ac9c <DHCP_run+0x214>)
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	701a      	strb	r2, [r3, #0]
		break;
 801ab8e:	e07e      	b.n	801ac8e <DHCP_run+0x206>
			} else if (type == DHCP_NAK) {
 801ab90:	1dbb      	adds	r3, r7, #6
 801ab92:	781b      	ldrb	r3, [r3, #0]
 801ab94:	2b06      	cmp	r3, #6
 801ab96:	d105      	bne.n	801aba4 <DHCP_run+0x11c>
				reset_DHCP_timeout();
 801ab98:	f000 f9ec 	bl	801af74 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801ab9c:	4b3f      	ldr	r3, [pc, #252]	; (801ac9c <DHCP_run+0x214>)
 801ab9e:	2201      	movs	r2, #1
 801aba0:	701a      	strb	r2, [r3, #0]
		break;
 801aba2:	e074      	b.n	801ac8e <DHCP_run+0x206>
			} else ret = check_DHCP_timeout();
 801aba4:	1dfc      	adds	r4, r7, #7
 801aba6:	f000 f8a5 	bl	801acf4 <check_DHCP_timeout>
 801abaa:	0003      	movs	r3, r0
 801abac:	7023      	strb	r3, [r4, #0]
		break;
 801abae:	e06e      	b.n	801ac8e <DHCP_run+0x206>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801abb0:	1dfb      	adds	r3, r7, #7
 801abb2:	2204      	movs	r2, #4
 801abb4:	701a      	strb	r2, [r3, #0]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 801abb6:	4b40      	ldr	r3, [pc, #256]	; (801acb8 <DHCP_run+0x230>)
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	3301      	adds	r3, #1
 801abbc:	d066      	beq.n	801ac8c <DHCP_run+0x204>
 801abbe:	4b3e      	ldr	r3, [pc, #248]	; (801acb8 <DHCP_run+0x230>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	085a      	lsrs	r2, r3, #1
 801abc4:	4b3d      	ldr	r3, [pc, #244]	; (801acbc <DHCP_run+0x234>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	429a      	cmp	r2, r3
 801abca:	d25f      	bcs.n	801ac8c <DHCP_run+0x204>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801abcc:	1dbb      	adds	r3, r7, #6
 801abce:	2200      	movs	r2, #0
 801abd0:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801abd2:	4b35      	ldr	r3, [pc, #212]	; (801aca8 <DHCP_run+0x220>)
 801abd4:	781a      	ldrb	r2, [r3, #0]
 801abd6:	4b3a      	ldr	r3, [pc, #232]	; (801acc0 <DHCP_run+0x238>)
 801abd8:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801abda:	4b33      	ldr	r3, [pc, #204]	; (801aca8 <DHCP_run+0x220>)
 801abdc:	785a      	ldrb	r2, [r3, #1]
 801abde:	4b38      	ldr	r3, [pc, #224]	; (801acc0 <DHCP_run+0x238>)
 801abe0:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801abe2:	4b31      	ldr	r3, [pc, #196]	; (801aca8 <DHCP_run+0x220>)
 801abe4:	789a      	ldrb	r2, [r3, #2]
 801abe6:	4b36      	ldr	r3, [pc, #216]	; (801acc0 <DHCP_run+0x238>)
 801abe8:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801abea:	4b2f      	ldr	r3, [pc, #188]	; (801aca8 <DHCP_run+0x220>)
 801abec:	78da      	ldrb	r2, [r3, #3]
 801abee:	4b34      	ldr	r3, [pc, #208]	; (801acc0 <DHCP_run+0x238>)
 801abf0:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801abf2:	4b34      	ldr	r3, [pc, #208]	; (801acc4 <DHCP_run+0x23c>)
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	1c5a      	adds	r2, r3, #1
 801abf8:	4b32      	ldr	r3, [pc, #200]	; (801acc4 <DHCP_run+0x23c>)
 801abfa:	601a      	str	r2, [r3, #0]

				send_DHCP_REQUEST();
 801abfc:	f7ff f8a2 	bl	8019d44 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801ac00:	f000 f9b8 	bl	801af74 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801ac04:	4b25      	ldr	r3, [pc, #148]	; (801ac9c <DHCP_run+0x214>)
 801ac06:	2204      	movs	r2, #4
 801ac08:	701a      	strb	r2, [r3, #0]
			}
		break;
 801ac0a:	e03f      	b.n	801ac8c <DHCP_run+0x204>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801ac0c:	1dfb      	adds	r3, r7, #7
 801ac0e:	2204      	movs	r2, #4
 801ac10:	701a      	strb	r2, [r3, #0]
			if (type == DHCP_ACK) {
 801ac12:	1dbb      	adds	r3, r7, #6
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	2b05      	cmp	r3, #5
 801ac18:	d126      	bne.n	801ac68 <DHCP_run+0x1e0>
				dhcp_retry_count = 0;
 801ac1a:	4b2b      	ldr	r3, [pc, #172]	; (801acc8 <DHCP_run+0x240>)
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801ac20:	4b27      	ldr	r3, [pc, #156]	; (801acc0 <DHCP_run+0x238>)
 801ac22:	781a      	ldrb	r2, [r3, #0]
 801ac24:	4b20      	ldr	r3, [pc, #128]	; (801aca8 <DHCP_run+0x220>)
 801ac26:	781b      	ldrb	r3, [r3, #0]
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	d111      	bne.n	801ac50 <DHCP_run+0x1c8>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801ac2c:	4b24      	ldr	r3, [pc, #144]	; (801acc0 <DHCP_run+0x238>)
 801ac2e:	785a      	ldrb	r2, [r3, #1]
 801ac30:	4b1d      	ldr	r3, [pc, #116]	; (801aca8 <DHCP_run+0x220>)
 801ac32:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801ac34:	429a      	cmp	r2, r3
 801ac36:	d10b      	bne.n	801ac50 <DHCP_run+0x1c8>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801ac38:	4b21      	ldr	r3, [pc, #132]	; (801acc0 <DHCP_run+0x238>)
 801ac3a:	789a      	ldrb	r2, [r3, #2]
 801ac3c:	4b1a      	ldr	r3, [pc, #104]	; (801aca8 <DHCP_run+0x220>)
 801ac3e:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801ac40:	429a      	cmp	r2, r3
 801ac42:	d105      	bne.n	801ac50 <DHCP_run+0x1c8>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801ac44:	4b1e      	ldr	r3, [pc, #120]	; (801acc0 <DHCP_run+0x238>)
 801ac46:	78da      	ldrb	r2, [r3, #3]
 801ac48:	4b17      	ldr	r3, [pc, #92]	; (801aca8 <DHCP_run+0x220>)
 801ac4a:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d005      	beq.n	801ac5c <DHCP_run+0x1d4>
				{
					ret = DHCP_IP_CHANGED;
 801ac50:	1dfb      	adds	r3, r7, #7
 801ac52:	2203      	movs	r2, #3
 801ac54:	701a      	strb	r2, [r3, #0]
					dhcp_ip_update();
 801ac56:	4b1d      	ldr	r3, [pc, #116]	; (801accc <DHCP_run+0x244>)
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801ac5c:	f000 f98a 	bl	801af74 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801ac60:	4b0e      	ldr	r3, [pc, #56]	; (801ac9c <DHCP_run+0x214>)
 801ac62:	2203      	movs	r2, #3
 801ac64:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801ac66:	e012      	b.n	801ac8e <DHCP_run+0x206>
			} else if (type == DHCP_NAK) {
 801ac68:	1dbb      	adds	r3, r7, #6
 801ac6a:	781b      	ldrb	r3, [r3, #0]
 801ac6c:	2b06      	cmp	r3, #6
 801ac6e:	d105      	bne.n	801ac7c <DHCP_run+0x1f4>
				reset_DHCP_timeout();
 801ac70:	f000 f980 	bl	801af74 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801ac74:	4b09      	ldr	r3, [pc, #36]	; (801ac9c <DHCP_run+0x214>)
 801ac76:	2201      	movs	r2, #1
 801ac78:	701a      	strb	r2, [r3, #0]
	   	break;
 801ac7a:	e008      	b.n	801ac8e <DHCP_run+0x206>
			} else ret = check_DHCP_timeout();
 801ac7c:	1dfc      	adds	r4, r7, #7
 801ac7e:	f000 f839 	bl	801acf4 <check_DHCP_timeout>
 801ac82:	0003      	movs	r3, r0
 801ac84:	7023      	strb	r3, [r4, #0]
	   	break;
 801ac86:	e002      	b.n	801ac8e <DHCP_run+0x206>
		default :
   		break;
 801ac88:	46c0      	nop			; (mov r8, r8)
 801ac8a:	e000      	b.n	801ac8e <DHCP_run+0x206>
		break;
 801ac8c:	46c0      	nop			; (mov r8, r8)
	}

	return ret;
 801ac8e:	1dfb      	adds	r3, r7, #7
 801ac90:	781b      	ldrb	r3, [r3, #0]
}
 801ac92:	0018      	movs	r0, r3
 801ac94:	46bd      	mov	sp, r7
 801ac96:	b003      	add	sp, #12
 801ac98:	bd90      	pop	{r4, r7, pc}
 801ac9a:	46c0      	nop			; (mov r8, r8)
 801ac9c:	20007aec 	.word	0x20007aec
 801aca0:	20007acc 	.word	0x20007acc
 801aca4:	08031e4c 	.word	0x08031e4c
 801aca8:	20007adc 	.word	0x20007adc
 801acac:	20007af8 	.word	0x20007af8
 801acb0:	20005074 	.word	0x20005074
 801acb4:	2000507c 	.word	0x2000507c
 801acb8:	20005064 	.word	0x20005064
 801acbc:	20007af0 	.word	0x20007af0
 801acc0:	20007ad8 	.word	0x20007ad8
 801acc4:	20007af4 	.word	0x20007af4
 801acc8:	20007aed 	.word	0x20007aed
 801accc:	20005078 	.word	0x20005078

0801acd0 <DHCP_stop>:

void    DHCP_stop(void)
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 801acd4:	4b05      	ldr	r3, [pc, #20]	; (801acec <DHCP_stop+0x1c>)
 801acd6:	781b      	ldrb	r3, [r3, #0]
 801acd8:	0018      	movs	r0, r3
 801acda:	f000 fab5 	bl	801b248 <close>
   dhcp_state = STATE_DHCP_STOP;
 801acde:	4b04      	ldr	r3, [pc, #16]	; (801acf0 <DHCP_stop+0x20>)
 801ace0:	2206      	movs	r2, #6
 801ace2:	701a      	strb	r2, [r3, #0]
}
 801ace4:	46c0      	nop			; (mov r8, r8)
 801ace6:	46bd      	mov	sp, r7
 801ace8:	bd80      	pop	{r7, pc}
 801acea:	46c0      	nop			; (mov r8, r8)
 801acec:	20007acc 	.word	0x20007acc
 801acf0:	20007aec 	.word	0x20007aec

0801acf4 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b082      	sub	sp, #8
 801acf8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801acfa:	1dfb      	adds	r3, r7, #7
 801acfc:	2201      	movs	r2, #1
 801acfe:	701a      	strb	r2, [r3, #0]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 801ad00:	4b29      	ldr	r3, [pc, #164]	; (801ada8 <check_DHCP_timeout+0xb4>)
 801ad02:	781b      	ldrb	r3, [r3, #0]
 801ad04:	b25b      	sxtb	r3, r3
 801ad06:	2b01      	cmp	r3, #1
 801ad08:	dc2d      	bgt.n	801ad66 <check_DHCP_timeout+0x72>
		if (dhcp_tick_next < dhcp_tick_1s) {
 801ad0a:	4b28      	ldr	r3, [pc, #160]	; (801adac <check_DHCP_timeout+0xb8>)
 801ad0c:	681a      	ldr	r2, [r3, #0]
 801ad0e:	4b28      	ldr	r3, [pc, #160]	; (801adb0 <check_DHCP_timeout+0xbc>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d242      	bcs.n	801ad9c <check_DHCP_timeout+0xa8>

			switch ( dhcp_state ) {
 801ad16:	4b27      	ldr	r3, [pc, #156]	; (801adb4 <check_DHCP_timeout+0xc0>)
 801ad18:	781b      	ldrb	r3, [r3, #0]
 801ad1a:	b25b      	sxtb	r3, r3
 801ad1c:	2b04      	cmp	r3, #4
 801ad1e:	d00b      	beq.n	801ad38 <check_DHCP_timeout+0x44>
 801ad20:	dc0d      	bgt.n	801ad3e <check_DHCP_timeout+0x4a>
 801ad22:	2b01      	cmp	r3, #1
 801ad24:	d002      	beq.n	801ad2c <check_DHCP_timeout+0x38>
 801ad26:	2b02      	cmp	r3, #2
 801ad28:	d003      	beq.n	801ad32 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801ad2a:	e008      	b.n	801ad3e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 801ad2c:	f7fe fdcc 	bl	80198c8 <send_DHCP_DISCOVER>
				break;
 801ad30:	e006      	b.n	801ad40 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801ad32:	f7ff f807 	bl	8019d44 <send_DHCP_REQUEST>
				break;
 801ad36:	e003      	b.n	801ad40 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801ad38:	f7ff f804 	bl	8019d44 <send_DHCP_REQUEST>
				break;
 801ad3c:	e000      	b.n	801ad40 <check_DHCP_timeout+0x4c>
				break;
 801ad3e:	46c0      	nop			; (mov r8, r8)
			}

			dhcp_tick_1s = 0;
 801ad40:	4b1b      	ldr	r3, [pc, #108]	; (801adb0 <check_DHCP_timeout+0xbc>)
 801ad42:	2200      	movs	r2, #0
 801ad44:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801ad46:	4b1a      	ldr	r3, [pc, #104]	; (801adb0 <check_DHCP_timeout+0xbc>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	330a      	adds	r3, #10
 801ad4c:	001a      	movs	r2, r3
 801ad4e:	4b17      	ldr	r3, [pc, #92]	; (801adac <check_DHCP_timeout+0xb8>)
 801ad50:	601a      	str	r2, [r3, #0]
			dhcp_retry_count++;
 801ad52:	4b15      	ldr	r3, [pc, #84]	; (801ada8 <check_DHCP_timeout+0xb4>)
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	b25b      	sxtb	r3, r3
 801ad58:	b2db      	uxtb	r3, r3
 801ad5a:	3301      	adds	r3, #1
 801ad5c:	b2db      	uxtb	r3, r3
 801ad5e:	b25a      	sxtb	r2, r3
 801ad60:	4b11      	ldr	r3, [pc, #68]	; (801ada8 <check_DHCP_timeout+0xb4>)
 801ad62:	701a      	strb	r2, [r3, #0]
 801ad64:	e01a      	b.n	801ad9c <check_DHCP_timeout+0xa8>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 801ad66:	4b13      	ldr	r3, [pc, #76]	; (801adb4 <check_DHCP_timeout+0xc0>)
 801ad68:	781b      	ldrb	r3, [r3, #0]
 801ad6a:	b25b      	sxtb	r3, r3
 801ad6c:	2b04      	cmp	r3, #4
 801ad6e:	d00c      	beq.n	801ad8a <check_DHCP_timeout+0x96>
 801ad70:	dc11      	bgt.n	801ad96 <check_DHCP_timeout+0xa2>
 801ad72:	2b01      	cmp	r3, #1
 801ad74:	d002      	beq.n	801ad7c <check_DHCP_timeout+0x88>
 801ad76:	2b02      	cmp	r3, #2
 801ad78:	d007      	beq.n	801ad8a <check_DHCP_timeout+0x96>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 801ad7a:	e00c      	b.n	801ad96 <check_DHCP_timeout+0xa2>
				dhcp_state = STATE_DHCP_INIT;
 801ad7c:	4b0d      	ldr	r3, [pc, #52]	; (801adb4 <check_DHCP_timeout+0xc0>)
 801ad7e:	2200      	movs	r2, #0
 801ad80:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 801ad82:	1dfb      	adds	r3, r7, #7
 801ad84:	2200      	movs	r2, #0
 801ad86:	701a      	strb	r2, [r3, #0]
				break;
 801ad88:	e006      	b.n	801ad98 <check_DHCP_timeout+0xa4>
				send_DHCP_DISCOVER();
 801ad8a:	f7fe fd9d 	bl	80198c8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 801ad8e:	4b09      	ldr	r3, [pc, #36]	; (801adb4 <check_DHCP_timeout+0xc0>)
 801ad90:	2201      	movs	r2, #1
 801ad92:	701a      	strb	r2, [r3, #0]
				break;
 801ad94:	e000      	b.n	801ad98 <check_DHCP_timeout+0xa4>
				break;
 801ad96:	46c0      	nop			; (mov r8, r8)
		}
		reset_DHCP_timeout();
 801ad98:	f000 f8ec 	bl	801af74 <reset_DHCP_timeout>
	}
	return ret;
 801ad9c:	1dfb      	adds	r3, r7, #7
 801ad9e:	781b      	ldrb	r3, [r3, #0]
}
 801ada0:	0018      	movs	r0, r3
 801ada2:	46bd      	mov	sp, r7
 801ada4:	b002      	add	sp, #8
 801ada6:	bd80      	pop	{r7, pc}
 801ada8:	20007aed 	.word	0x20007aed
 801adac:	20005068 	.word	0x20005068
 801adb0:	20007af0 	.word	0x20007af0
 801adb4:	20007aec 	.word	0x20007aec

0801adb8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801adb8:	b590      	push	{r4, r7, lr}
 801adba:	b085      	sub	sp, #20
 801adbc:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801adbe:	1dfc      	adds	r4, r7, #7
 801adc0:	23d8      	movs	r3, #216	; 0xd8
 801adc2:	015b      	lsls	r3, r3, #5
 801adc4:	0018      	movs	r0, r3
 801adc6:	f7fe f879 	bl	8018ebc <WIZCHIP_READ>
 801adca:	0003      	movs	r3, r0
 801adcc:	7023      	strb	r3, [r4, #0]
	setRCR(0x03);
 801adce:	23d8      	movs	r3, #216	; 0xd8
 801add0:	015b      	lsls	r3, r3, #5
 801add2:	2103      	movs	r1, #3
 801add4:	0018      	movs	r0, r3
 801add6:	f7fe f8c3 	bl	8018f60 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801adda:	4b14      	ldr	r3, [pc, #80]	; (801ae2c <check_DHCP_leasedIP+0x74>)
 801addc:	7818      	ldrb	r0, [r3, #0]
 801adde:	4b14      	ldr	r3, [pc, #80]	; (801ae30 <check_DHCP_leasedIP+0x78>)
 801ade0:	4914      	ldr	r1, [pc, #80]	; (801ae34 <check_DHCP_leasedIP+0x7c>)
 801ade2:	4a15      	ldr	r2, [pc, #84]	; (801ae38 <check_DHCP_leasedIP+0x80>)
 801ade4:	9200      	str	r2, [sp, #0]
 801ade6:	2211      	movs	r2, #17
 801ade8:	f000 fdae 	bl	801b948 <sendto>
 801adec:	0003      	movs	r3, r0
 801adee:	603b      	str	r3, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801adf0:	1dfb      	adds	r3, r7, #7
 801adf2:	781a      	ldrb	r2, [r3, #0]
 801adf4:	23d8      	movs	r3, #216	; 0xd8
 801adf6:	015b      	lsls	r3, r3, #5
 801adf8:	0011      	movs	r1, r2
 801adfa:	0018      	movs	r0, r3
 801adfc:	f7fe f8b0 	bl	8018f60 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801ae00:	683b      	ldr	r3, [r7, #0]
 801ae02:	330d      	adds	r3, #13
 801ae04:	d101      	bne.n	801ae0a <check_DHCP_leasedIP+0x52>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801ae06:	2301      	movs	r3, #1
 801ae08:	e00c      	b.n	801ae24 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801ae0a:	f7ff fabd 	bl	801a388 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801ae0e:	4b0b      	ldr	r3, [pc, #44]	; (801ae3c <check_DHCP_leasedIP+0x84>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 801ae14:	46c0      	nop			; (mov r8, r8)
 801ae16:	4b09      	ldr	r3, [pc, #36]	; (801ae3c <check_DHCP_leasedIP+0x84>)
 801ae18:	681a      	ldr	r2, [r3, #0]
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	1ad3      	subs	r3, r2, r3
 801ae1e:	2b01      	cmp	r3, #1
 801ae20:	d9f9      	bls.n	801ae16 <check_DHCP_leasedIP+0x5e>

		return 0;
 801ae22:	2300      	movs	r3, #0
	}
}	
 801ae24:	0018      	movs	r0, r3
 801ae26:	46bd      	mov	sp, r7
 801ae28:	b003      	add	sp, #12
 801ae2a:	bd90      	pop	{r4, r7, pc}
 801ae2c:	20007acc 	.word	0x20007acc
 801ae30:	20007adc 	.word	0x20007adc
 801ae34:	08030ce8 	.word	0x08030ce8
 801ae38:	00001388 	.word	0x00001388
 801ae3c:	20007af0 	.word	0x20007af0

0801ae40 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801ae40:	b590      	push	{r4, r7, lr}
 801ae42:	b085      	sub	sp, #20
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	0002      	movs	r2, r0
 801ae48:	6039      	str	r1, [r7, #0]
 801ae4a:	1dfb      	adds	r3, r7, #7
 801ae4c:	701a      	strb	r2, [r3, #0]
   uint8_t zeroip[4] = {0,0,0,0};
 801ae4e:	230c      	movs	r3, #12
 801ae50:	18fb      	adds	r3, r7, r3
 801ae52:	2200      	movs	r2, #0
 801ae54:	601a      	str	r2, [r3, #0]
   getSHAR(DHCP_CHADDR);
 801ae56:	4941      	ldr	r1, [pc, #260]	; (801af5c <DHCP_init+0x11c>)
 801ae58:	2390      	movs	r3, #144	; 0x90
 801ae5a:	011b      	lsls	r3, r3, #4
 801ae5c:	2206      	movs	r2, #6
 801ae5e:	0018      	movs	r0, r3
 801ae60:	f7fe f8d4 	bl	801900c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801ae64:	4b3d      	ldr	r3, [pc, #244]	; (801af5c <DHCP_init+0x11c>)
 801ae66:	781a      	ldrb	r2, [r3, #0]
 801ae68:	4b3c      	ldr	r3, [pc, #240]	; (801af5c <DHCP_init+0x11c>)
 801ae6a:	785b      	ldrb	r3, [r3, #1]
 801ae6c:	4313      	orrs	r3, r2
 801ae6e:	b2da      	uxtb	r2, r3
 801ae70:	4b3a      	ldr	r3, [pc, #232]	; (801af5c <DHCP_init+0x11c>)
 801ae72:	789b      	ldrb	r3, [r3, #2]
 801ae74:	4313      	orrs	r3, r2
 801ae76:	b2da      	uxtb	r2, r3
 801ae78:	4b38      	ldr	r3, [pc, #224]	; (801af5c <DHCP_init+0x11c>)
 801ae7a:	78db      	ldrb	r3, [r3, #3]
 801ae7c:	4313      	orrs	r3, r2
 801ae7e:	b2da      	uxtb	r2, r3
 801ae80:	4b36      	ldr	r3, [pc, #216]	; (801af5c <DHCP_init+0x11c>)
 801ae82:	791b      	ldrb	r3, [r3, #4]
 801ae84:	4313      	orrs	r3, r2
 801ae86:	b2da      	uxtb	r2, r3
 801ae88:	4b34      	ldr	r3, [pc, #208]	; (801af5c <DHCP_init+0x11c>)
 801ae8a:	795b      	ldrb	r3, [r3, #5]
 801ae8c:	4313      	orrs	r3, r2
 801ae8e:	b2db      	uxtb	r3, r3
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d118      	bne.n	801aec6 <DHCP_init+0x86>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801ae94:	4b31      	ldr	r3, [pc, #196]	; (801af5c <DHCP_init+0x11c>)
 801ae96:	2200      	movs	r2, #0
 801ae98:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801ae9a:	4b30      	ldr	r3, [pc, #192]	; (801af5c <DHCP_init+0x11c>)
 801ae9c:	2208      	movs	r2, #8
 801ae9e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801aea0:	4b2e      	ldr	r3, [pc, #184]	; (801af5c <DHCP_init+0x11c>)
 801aea2:	22dc      	movs	r2, #220	; 0xdc
 801aea4:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801aea6:	4b2d      	ldr	r3, [pc, #180]	; (801af5c <DHCP_init+0x11c>)
 801aea8:	2200      	movs	r2, #0
 801aeaa:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801aeac:	4b2b      	ldr	r3, [pc, #172]	; (801af5c <DHCP_init+0x11c>)
 801aeae:	2200      	movs	r2, #0
 801aeb0:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801aeb2:	4b2a      	ldr	r3, [pc, #168]	; (801af5c <DHCP_init+0x11c>)
 801aeb4:	2200      	movs	r2, #0
 801aeb6:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801aeb8:	4928      	ldr	r1, [pc, #160]	; (801af5c <DHCP_init+0x11c>)
 801aeba:	2390      	movs	r3, #144	; 0x90
 801aebc:	011b      	lsls	r3, r3, #4
 801aebe:	2206      	movs	r2, #6
 801aec0:	0018      	movs	r0, r3
 801aec2:	f7fe f911 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801aec6:	4b26      	ldr	r3, [pc, #152]	; (801af60 <DHCP_init+0x120>)
 801aec8:	1dfa      	adds	r2, r7, #7
 801aeca:	7812      	ldrb	r2, [r2, #0]
 801aecc:	701a      	strb	r2, [r3, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801aece:	4b25      	ldr	r3, [pc, #148]	; (801af64 <DHCP_init+0x124>)
 801aed0:	683a      	ldr	r2, [r7, #0]
 801aed2:	601a      	str	r2, [r3, #0]
	DHCP_XID = 0x12345678;
 801aed4:	4b24      	ldr	r3, [pc, #144]	; (801af68 <DHCP_init+0x128>)
 801aed6:	4a25      	ldr	r2, [pc, #148]	; (801af6c <DHCP_init+0x12c>)
 801aed8:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801aeda:	4b20      	ldr	r3, [pc, #128]	; (801af5c <DHCP_init+0x11c>)
 801aedc:	78db      	ldrb	r3, [r3, #3]
 801aede:	001a      	movs	r2, r3
 801aee0:	4b21      	ldr	r3, [pc, #132]	; (801af68 <DHCP_init+0x128>)
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	18d2      	adds	r2, r2, r3
 801aee6:	4b20      	ldr	r3, [pc, #128]	; (801af68 <DHCP_init+0x128>)
 801aee8:	601a      	str	r2, [r3, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801aeea:	4b1c      	ldr	r3, [pc, #112]	; (801af5c <DHCP_init+0x11c>)
 801aeec:	791b      	ldrb	r3, [r3, #4]
 801aeee:	001a      	movs	r2, r3
 801aef0:	4b1d      	ldr	r3, [pc, #116]	; (801af68 <DHCP_init+0x128>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	18d2      	adds	r2, r2, r3
 801aef6:	4b1c      	ldr	r3, [pc, #112]	; (801af68 <DHCP_init+0x128>)
 801aef8:	601a      	str	r2, [r3, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801aefa:	4b18      	ldr	r3, [pc, #96]	; (801af5c <DHCP_init+0x11c>)
 801aefc:	795b      	ldrb	r3, [r3, #5]
 801aefe:	001a      	movs	r2, r3
 801af00:	4b19      	ldr	r3, [pc, #100]	; (801af68 <DHCP_init+0x128>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	18d2      	adds	r2, r2, r3
 801af06:	4b18      	ldr	r3, [pc, #96]	; (801af68 <DHCP_init+0x128>)
 801af08:	601a      	str	r2, [r3, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801af0a:	4b14      	ldr	r3, [pc, #80]	; (801af5c <DHCP_init+0x11c>)
 801af0c:	78da      	ldrb	r2, [r3, #3]
 801af0e:	4b13      	ldr	r3, [pc, #76]	; (801af5c <DHCP_init+0x11c>)
 801af10:	791b      	ldrb	r3, [r3, #4]
 801af12:	4053      	eors	r3, r2
 801af14:	b2da      	uxtb	r2, r3
 801af16:	4b11      	ldr	r3, [pc, #68]	; (801af5c <DHCP_init+0x11c>)
 801af18:	795b      	ldrb	r3, [r3, #5]
 801af1a:	4053      	eors	r3, r2
 801af1c:	b2db      	uxtb	r3, r3
 801af1e:	001a      	movs	r2, r3
 801af20:	4b11      	ldr	r3, [pc, #68]	; (801af68 <DHCP_init+0x128>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	18d2      	adds	r2, r2, r3
 801af26:	4b10      	ldr	r3, [pc, #64]	; (801af68 <DHCP_init+0x128>)
 801af28:	601a      	str	r2, [r3, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801af2a:	240c      	movs	r4, #12
 801af2c:	1939      	adds	r1, r7, r4
 801af2e:	23f0      	movs	r3, #240	; 0xf0
 801af30:	011b      	lsls	r3, r3, #4
 801af32:	2204      	movs	r2, #4
 801af34:	0018      	movs	r0, r3
 801af36:	f7fe f8d7 	bl	80190e8 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801af3a:	1939      	adds	r1, r7, r4
 801af3c:	2380      	movs	r3, #128	; 0x80
 801af3e:	005b      	lsls	r3, r3, #1
 801af40:	2204      	movs	r2, #4
 801af42:	0018      	movs	r0, r3
 801af44:	f7fe f8d0 	bl	80190e8 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801af48:	f000 f814 	bl	801af74 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801af4c:	4b08      	ldr	r3, [pc, #32]	; (801af70 <DHCP_init+0x130>)
 801af4e:	2200      	movs	r2, #0
 801af50:	701a      	strb	r2, [r3, #0]
}
 801af52:	46c0      	nop			; (mov r8, r8)
 801af54:	46bd      	mov	sp, r7
 801af56:	b005      	add	sp, #20
 801af58:	bd90      	pop	{r4, r7, pc}
 801af5a:	46c0      	nop			; (mov r8, r8)
 801af5c:	20007afc 	.word	0x20007afc
 801af60:	20007acc 	.word	0x20007acc
 801af64:	20007af8 	.word	0x20007af8
 801af68:	20007af4 	.word	0x20007af4
 801af6c:	12345678 	.word	0x12345678
 801af70:	20007aec 	.word	0x20007aec

0801af74 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801af78:	4b05      	ldr	r3, [pc, #20]	; (801af90 <reset_DHCP_timeout+0x1c>)
 801af7a:	2200      	movs	r2, #0
 801af7c:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801af7e:	4b05      	ldr	r3, [pc, #20]	; (801af94 <reset_DHCP_timeout+0x20>)
 801af80:	220a      	movs	r2, #10
 801af82:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801af84:	4b04      	ldr	r3, [pc, #16]	; (801af98 <reset_DHCP_timeout+0x24>)
 801af86:	2200      	movs	r2, #0
 801af88:	701a      	strb	r2, [r3, #0]
}
 801af8a:	46c0      	nop			; (mov r8, r8)
 801af8c:	46bd      	mov	sp, r7
 801af8e:	bd80      	pop	{r7, pc}
 801af90:	20007af0 	.word	0x20007af0
 801af94:	20005068 	.word	0x20005068
 801af98:	20007aed 	.word	0x20007aed

0801af9c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b082      	sub	sp, #8
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	0002      	movs	r2, r0
 801afa4:	1dfb      	adds	r3, r7, #7
 801afa6:	701a      	strb	r2, [r3, #0]
  nibble &= 0x0F;
 801afa8:	1dfb      	adds	r3, r7, #7
 801afaa:	1dfa      	adds	r2, r7, #7
 801afac:	7812      	ldrb	r2, [r2, #0]
 801afae:	210f      	movs	r1, #15
 801afb0:	400a      	ands	r2, r1
 801afb2:	701a      	strb	r2, [r3, #0]
  if (nibble <= 9)
 801afb4:	1dfb      	adds	r3, r7, #7
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	2b09      	cmp	r3, #9
 801afba:	d804      	bhi.n	801afc6 <NibbleToHex+0x2a>
    return nibble + '0';
 801afbc:	1dfb      	adds	r3, r7, #7
 801afbe:	781b      	ldrb	r3, [r3, #0]
 801afc0:	3330      	adds	r3, #48	; 0x30
 801afc2:	b2db      	uxtb	r3, r3
 801afc4:	e003      	b.n	801afce <NibbleToHex+0x32>
  else 
    return nibble + ('A'-0x0A);
 801afc6:	1dfb      	adds	r3, r7, #7
 801afc8:	781b      	ldrb	r3, [r3, #0]
 801afca:	3337      	adds	r3, #55	; 0x37
 801afcc:	b2db      	uxtb	r3, r3
}
 801afce:	0018      	movs	r0, r3
 801afd0:	46bd      	mov	sp, r7
 801afd2:	b002      	add	sp, #8
 801afd4:	bd80      	pop	{r7, pc}
	...

0801afd8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 801afd8:	b5b0      	push	{r4, r5, r7, lr}
 801afda:	b084      	sub	sp, #16
 801afdc:	af00      	add	r7, sp, #0
 801afde:	0005      	movs	r5, r0
 801afe0:	000c      	movs	r4, r1
 801afe2:	0010      	movs	r0, r2
 801afe4:	0019      	movs	r1, r3
 801afe6:	1dfb      	adds	r3, r7, #7
 801afe8:	1c2a      	adds	r2, r5, #0
 801afea:	701a      	strb	r2, [r3, #0]
 801afec:	1dbb      	adds	r3, r7, #6
 801afee:	1c22      	adds	r2, r4, #0
 801aff0:	701a      	strb	r2, [r3, #0]
 801aff2:	1d3b      	adds	r3, r7, #4
 801aff4:	1c02      	adds	r2, r0, #0
 801aff6:	801a      	strh	r2, [r3, #0]
 801aff8:	1cfb      	adds	r3, r7, #3
 801affa:	1c0a      	adds	r2, r1, #0
 801affc:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 801affe:	1dfb      	adds	r3, r7, #7
 801b000:	781b      	ldrb	r3, [r3, #0]
 801b002:	2b08      	cmp	r3, #8
 801b004:	d902      	bls.n	801b00c <socket+0x34>
 801b006:	2301      	movs	r3, #1
 801b008:	425b      	negs	r3, r3
 801b00a:	e10b      	b.n	801b224 <socket+0x24c>
	switch(protocol)
 801b00c:	1dbb      	adds	r3, r7, #6
 801b00e:	781b      	ldrb	r3, [r3, #0]
 801b010:	2b01      	cmp	r3, #1
 801b012:	d005      	beq.n	801b020 <socket+0x48>
 801b014:	2b00      	cmp	r3, #0
 801b016:	dd11      	ble.n	801b03c <socket+0x64>
 801b018:	3b02      	subs	r3, #2
 801b01a:	2b02      	cmp	r3, #2
 801b01c:	d80e      	bhi.n	801b03c <socket+0x64>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 801b01e:	e011      	b.n	801b044 <socket+0x6c>
            getSIPR((uint8_t*)&taddr);
 801b020:	230c      	movs	r3, #12
 801b022:	18f9      	adds	r1, r7, r3
 801b024:	23f0      	movs	r3, #240	; 0xf0
 801b026:	011b      	lsls	r3, r3, #4
 801b028:	2204      	movs	r2, #4
 801b02a:	0018      	movs	r0, r3
 801b02c:	f7fd ffee 	bl	801900c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d105      	bne.n	801b042 <socket+0x6a>
 801b036:	2303      	movs	r3, #3
 801b038:	425b      	negs	r3, r3
 801b03a:	e0f3      	b.n	801b224 <socket+0x24c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 801b03c:	2305      	movs	r3, #5
 801b03e:	425b      	negs	r3, r3
 801b040:	e0f0      	b.n	801b224 <socket+0x24c>
	    break;
 801b042:	46c0      	nop			; (mov r8, r8)
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 801b044:	1cfb      	adds	r3, r7, #3
 801b046:	781b      	ldrb	r3, [r3, #0]
 801b048:	2204      	movs	r2, #4
 801b04a:	4013      	ands	r3, r2
 801b04c:	d002      	beq.n	801b054 <socket+0x7c>
 801b04e:	2306      	movs	r3, #6
 801b050:	425b      	negs	r3, r3
 801b052:	e0e7      	b.n	801b224 <socket+0x24c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 801b054:	1cfb      	adds	r3, r7, #3
 801b056:	781b      	ldrb	r3, [r3, #0]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d02b      	beq.n	801b0b4 <socket+0xdc>
	{
   	switch(protocol)
 801b05c:	1dbb      	adds	r3, r7, #6
 801b05e:	781b      	ldrb	r3, [r3, #0]
 801b060:	2b01      	cmp	r3, #1
 801b062:	d002      	beq.n	801b06a <socket+0x92>
 801b064:	2b02      	cmp	r3, #2
 801b066:	d008      	beq.n	801b07a <socket+0xa2>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 801b068:	e024      	b.n	801b0b4 <socket+0xdc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 801b06a:	1cfb      	adds	r3, r7, #3
 801b06c:	781b      	ldrb	r3, [r3, #0]
 801b06e:	2221      	movs	r2, #33	; 0x21
 801b070:	4013      	ands	r3, r2
 801b072:	d11c      	bne.n	801b0ae <socket+0xd6>
 801b074:	2306      	movs	r3, #6
 801b076:	425b      	negs	r3, r3
 801b078:	e0d4      	b.n	801b224 <socket+0x24c>
   	      if(flag & SF_IGMP_VER2)
 801b07a:	1cfb      	adds	r3, r7, #3
 801b07c:	781b      	ldrb	r3, [r3, #0]
 801b07e:	2220      	movs	r2, #32
 801b080:	4013      	ands	r3, r2
 801b082:	d007      	beq.n	801b094 <socket+0xbc>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 801b084:	1cfb      	adds	r3, r7, #3
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	b25b      	sxtb	r3, r3
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	db02      	blt.n	801b094 <socket+0xbc>
 801b08e:	2306      	movs	r3, #6
 801b090:	425b      	negs	r3, r3
 801b092:	e0c7      	b.n	801b224 <socket+0x24c>
      	      if(flag & SF_UNI_BLOCK)
 801b094:	1cfb      	adds	r3, r7, #3
 801b096:	781b      	ldrb	r3, [r3, #0]
 801b098:	2210      	movs	r2, #16
 801b09a:	4013      	ands	r3, r2
 801b09c:	d009      	beq.n	801b0b2 <socket+0xda>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 801b09e:	1cfb      	adds	r3, r7, #3
 801b0a0:	781b      	ldrb	r3, [r3, #0]
 801b0a2:	b25b      	sxtb	r3, r3
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	db04      	blt.n	801b0b2 <socket+0xda>
 801b0a8:	2306      	movs	r3, #6
 801b0aa:	425b      	negs	r3, r3
 801b0ac:	e0ba      	b.n	801b224 <socket+0x24c>
   	      break;
 801b0ae:	46c0      	nop			; (mov r8, r8)
 801b0b0:	e000      	b.n	801b0b4 <socket+0xdc>
   	      break;
 801b0b2:	46c0      	nop			; (mov r8, r8)
   	}
   }
	close(sn);
 801b0b4:	1dfb      	adds	r3, r7, #7
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	0018      	movs	r0, r3
 801b0ba:	f000 f8c5 	bl	801b248 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 801b0be:	1dfb      	adds	r3, r7, #7
 801b0c0:	781b      	ldrb	r3, [r3, #0]
 801b0c2:	009b      	lsls	r3, r3, #2
 801b0c4:	3301      	adds	r3, #1
 801b0c6:	00db      	lsls	r3, r3, #3
 801b0c8:	0018      	movs	r0, r3
 801b0ca:	1cfb      	adds	r3, r7, #3
 801b0cc:	781b      	ldrb	r3, [r3, #0]
 801b0ce:	b25b      	sxtb	r3, r3
 801b0d0:	220f      	movs	r2, #15
 801b0d2:	4393      	bics	r3, r2
 801b0d4:	b25a      	sxtb	r2, r3
 801b0d6:	1dbb      	adds	r3, r7, #6
 801b0d8:	781b      	ldrb	r3, [r3, #0]
 801b0da:	b25b      	sxtb	r3, r3
 801b0dc:	4313      	orrs	r3, r2
 801b0de:	b25b      	sxtb	r3, r3
 801b0e0:	b2db      	uxtb	r3, r3
 801b0e2:	0019      	movs	r1, r3
 801b0e4:	f7fd ff3c 	bl	8018f60 <WIZCHIP_WRITE>
    #endif
	if(!port)
 801b0e8:	1d3b      	adds	r3, r7, #4
 801b0ea:	881b      	ldrh	r3, [r3, #0]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d10f      	bne.n	801b110 <socket+0x138>
	{
	   port = sock_any_port++;
 801b0f0:	4b4e      	ldr	r3, [pc, #312]	; (801b22c <socket+0x254>)
 801b0f2:	881b      	ldrh	r3, [r3, #0]
 801b0f4:	1c5a      	adds	r2, r3, #1
 801b0f6:	b291      	uxth	r1, r2
 801b0f8:	4a4c      	ldr	r2, [pc, #304]	; (801b22c <socket+0x254>)
 801b0fa:	8011      	strh	r1, [r2, #0]
 801b0fc:	1d3a      	adds	r2, r7, #4
 801b0fe:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801b100:	4b4a      	ldr	r3, [pc, #296]	; (801b22c <socket+0x254>)
 801b102:	881b      	ldrh	r3, [r3, #0]
 801b104:	4a4a      	ldr	r2, [pc, #296]	; (801b230 <socket+0x258>)
 801b106:	4293      	cmp	r3, r2
 801b108:	d102      	bne.n	801b110 <socket+0x138>
 801b10a:	4b48      	ldr	r3, [pc, #288]	; (801b22c <socket+0x254>)
 801b10c:	4a49      	ldr	r2, [pc, #292]	; (801b234 <socket+0x25c>)
 801b10e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 801b110:	1dfb      	adds	r3, r7, #7
 801b112:	781b      	ldrb	r3, [r3, #0]
 801b114:	009b      	lsls	r3, r3, #2
 801b116:	3301      	adds	r3, #1
 801b118:	00db      	lsls	r3, r3, #3
 801b11a:	2280      	movs	r2, #128	; 0x80
 801b11c:	00d2      	lsls	r2, r2, #3
 801b11e:	4694      	mov	ip, r2
 801b120:	4463      	add	r3, ip
 801b122:	001a      	movs	r2, r3
 801b124:	1d3b      	adds	r3, r7, #4
 801b126:	881b      	ldrh	r3, [r3, #0]
 801b128:	0a1b      	lsrs	r3, r3, #8
 801b12a:	b29b      	uxth	r3, r3
 801b12c:	b2db      	uxtb	r3, r3
 801b12e:	0019      	movs	r1, r3
 801b130:	0010      	movs	r0, r2
 801b132:	f7fd ff15 	bl	8018f60 <WIZCHIP_WRITE>
 801b136:	1dfb      	adds	r3, r7, #7
 801b138:	781b      	ldrb	r3, [r3, #0]
 801b13a:	009b      	lsls	r3, r3, #2
 801b13c:	3301      	adds	r3, #1
 801b13e:	00db      	lsls	r3, r3, #3
 801b140:	22a0      	movs	r2, #160	; 0xa0
 801b142:	00d2      	lsls	r2, r2, #3
 801b144:	4694      	mov	ip, r2
 801b146:	4463      	add	r3, ip
 801b148:	001a      	movs	r2, r3
 801b14a:	1d3b      	adds	r3, r7, #4
 801b14c:	881b      	ldrh	r3, [r3, #0]
 801b14e:	b2db      	uxtb	r3, r3
 801b150:	0019      	movs	r1, r3
 801b152:	0010      	movs	r0, r2
 801b154:	f7fd ff04 	bl	8018f60 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801b158:	1dfb      	adds	r3, r7, #7
 801b15a:	781b      	ldrb	r3, [r3, #0]
 801b15c:	009b      	lsls	r3, r3, #2
 801b15e:	3301      	adds	r3, #1
 801b160:	00db      	lsls	r3, r3, #3
 801b162:	3301      	adds	r3, #1
 801b164:	33ff      	adds	r3, #255	; 0xff
 801b166:	2101      	movs	r1, #1
 801b168:	0018      	movs	r0, r3
 801b16a:	f7fd fef9 	bl	8018f60 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801b16e:	46c0      	nop			; (mov r8, r8)
 801b170:	1dfb      	adds	r3, r7, #7
 801b172:	781b      	ldrb	r3, [r3, #0]
 801b174:	009b      	lsls	r3, r3, #2
 801b176:	3301      	adds	r3, #1
 801b178:	00db      	lsls	r3, r3, #3
 801b17a:	3301      	adds	r3, #1
 801b17c:	33ff      	adds	r3, #255	; 0xff
 801b17e:	0018      	movs	r0, r3
 801b180:	f7fd fe9c 	bl	8018ebc <WIZCHIP_READ>
 801b184:	1e03      	subs	r3, r0, #0
 801b186:	d1f3      	bne.n	801b170 <socket+0x198>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 801b188:	1dfb      	adds	r3, r7, #7
 801b18a:	781b      	ldrb	r3, [r3, #0]
 801b18c:	2201      	movs	r2, #1
 801b18e:	409a      	lsls	r2, r3
 801b190:	0013      	movs	r3, r2
 801b192:	b21b      	sxth	r3, r3
 801b194:	43db      	mvns	r3, r3
 801b196:	b21b      	sxth	r3, r3
 801b198:	4a27      	ldr	r2, [pc, #156]	; (801b238 <socket+0x260>)
 801b19a:	8812      	ldrh	r2, [r2, #0]
 801b19c:	b212      	sxth	r2, r2
 801b19e:	4013      	ands	r3, r2
 801b1a0:	b21b      	sxth	r3, r3
 801b1a2:	b29a      	uxth	r2, r3
 801b1a4:	4b24      	ldr	r3, [pc, #144]	; (801b238 <socket+0x260>)
 801b1a6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 801b1a8:	1cfb      	adds	r3, r7, #3
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	2201      	movs	r2, #1
 801b1ae:	401a      	ands	r2, r3
 801b1b0:	1dfb      	adds	r3, r7, #7
 801b1b2:	781b      	ldrb	r3, [r3, #0]
 801b1b4:	409a      	lsls	r2, r3
 801b1b6:	0013      	movs	r3, r2
 801b1b8:	b21a      	sxth	r2, r3
 801b1ba:	4b1f      	ldr	r3, [pc, #124]	; (801b238 <socket+0x260>)
 801b1bc:	881b      	ldrh	r3, [r3, #0]
 801b1be:	b21b      	sxth	r3, r3
 801b1c0:	4313      	orrs	r3, r2
 801b1c2:	b21b      	sxth	r3, r3
 801b1c4:	b29a      	uxth	r2, r3
 801b1c6:	4b1c      	ldr	r3, [pc, #112]	; (801b238 <socket+0x260>)
 801b1c8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 801b1ca:	1dfb      	adds	r3, r7, #7
 801b1cc:	781b      	ldrb	r3, [r3, #0]
 801b1ce:	2201      	movs	r2, #1
 801b1d0:	409a      	lsls	r2, r3
 801b1d2:	0013      	movs	r3, r2
 801b1d4:	b21b      	sxth	r3, r3
 801b1d6:	43db      	mvns	r3, r3
 801b1d8:	b21b      	sxth	r3, r3
 801b1da:	4a18      	ldr	r2, [pc, #96]	; (801b23c <socket+0x264>)
 801b1dc:	8812      	ldrh	r2, [r2, #0]
 801b1de:	b212      	sxth	r2, r2
 801b1e0:	4013      	ands	r3, r2
 801b1e2:	b21b      	sxth	r3, r3
 801b1e4:	b29a      	uxth	r2, r3
 801b1e6:	4b15      	ldr	r3, [pc, #84]	; (801b23c <socket+0x264>)
 801b1e8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 801b1ea:	1dfb      	adds	r3, r7, #7
 801b1ec:	781a      	ldrb	r2, [r3, #0]
 801b1ee:	4b14      	ldr	r3, [pc, #80]	; (801b240 <socket+0x268>)
 801b1f0:	0052      	lsls	r2, r2, #1
 801b1f2:	2100      	movs	r1, #0
 801b1f4:	52d1      	strh	r1, [r2, r3]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 801b1f6:	1dfb      	adds	r3, r7, #7
 801b1f8:	781b      	ldrb	r3, [r3, #0]
 801b1fa:	4a12      	ldr	r2, [pc, #72]	; (801b244 <socket+0x26c>)
 801b1fc:	2100      	movs	r1, #0
 801b1fe:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 801b200:	46c0      	nop			; (mov r8, r8)
 801b202:	1dfb      	adds	r3, r7, #7
 801b204:	781b      	ldrb	r3, [r3, #0]
 801b206:	009b      	lsls	r3, r3, #2
 801b208:	3301      	adds	r3, #1
 801b20a:	00db      	lsls	r3, r3, #3
 801b20c:	22c0      	movs	r2, #192	; 0xc0
 801b20e:	0092      	lsls	r2, r2, #2
 801b210:	4694      	mov	ip, r2
 801b212:	4463      	add	r3, ip
 801b214:	0018      	movs	r0, r3
 801b216:	f7fd fe51 	bl	8018ebc <WIZCHIP_READ>
 801b21a:	1e03      	subs	r3, r0, #0
 801b21c:	d0f1      	beq.n	801b202 <socket+0x22a>
   return (int8_t)sn;
 801b21e:	1dfb      	adds	r3, r7, #7
 801b220:	781b      	ldrb	r3, [r3, #0]
 801b222:	b25b      	sxtb	r3, r3
}	   
 801b224:	0018      	movs	r0, r3
 801b226:	46bd      	mov	sp, r7
 801b228:	b004      	add	sp, #16
 801b22a:	bdb0      	pop	{r4, r5, r7, pc}
 801b22c:	20005080 	.word	0x20005080
 801b230:	0000fff0 	.word	0x0000fff0
 801b234:	ffffc000 	.word	0xffffc000
 801b238:	20007b02 	.word	0x20007b02
 801b23c:	20007b04 	.word	0x20007b04
 801b240:	20007b08 	.word	0x20007b08
 801b244:	20007b18 	.word	0x20007b18

0801b248 <close>:

int8_t close(uint8_t sn)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b082      	sub	sp, #8
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	0002      	movs	r2, r0
 801b250:	1dfb      	adds	r3, r7, #7
 801b252:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 801b254:	1dfb      	adds	r3, r7, #7
 801b256:	781b      	ldrb	r3, [r3, #0]
 801b258:	2b08      	cmp	r3, #8
 801b25a:	d902      	bls.n	801b262 <close+0x1a>
 801b25c:	2301      	movs	r3, #1
 801b25e:	425b      	negs	r3, r3
 801b260:	e05f      	b.n	801b322 <close+0xda>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 801b262:	1dfb      	adds	r3, r7, #7
 801b264:	781b      	ldrb	r3, [r3, #0]
 801b266:	009b      	lsls	r3, r3, #2
 801b268:	3301      	adds	r3, #1
 801b26a:	00db      	lsls	r3, r3, #3
 801b26c:	3301      	adds	r3, #1
 801b26e:	33ff      	adds	r3, #255	; 0xff
 801b270:	2110      	movs	r1, #16
 801b272:	0018      	movs	r0, r3
 801b274:	f7fd fe74 	bl	8018f60 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 801b278:	46c0      	nop			; (mov r8, r8)
 801b27a:	1dfb      	adds	r3, r7, #7
 801b27c:	781b      	ldrb	r3, [r3, #0]
 801b27e:	009b      	lsls	r3, r3, #2
 801b280:	3301      	adds	r3, #1
 801b282:	00db      	lsls	r3, r3, #3
 801b284:	3301      	adds	r3, #1
 801b286:	33ff      	adds	r3, #255	; 0xff
 801b288:	0018      	movs	r0, r3
 801b28a:	f7fd fe17 	bl	8018ebc <WIZCHIP_READ>
 801b28e:	1e03      	subs	r3, r0, #0
 801b290:	d1f3      	bne.n	801b27a <close+0x32>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 801b292:	1dfb      	adds	r3, r7, #7
 801b294:	781b      	ldrb	r3, [r3, #0]
 801b296:	009b      	lsls	r3, r3, #2
 801b298:	3301      	adds	r3, #1
 801b29a:	00db      	lsls	r3, r3, #3
 801b29c:	2280      	movs	r2, #128	; 0x80
 801b29e:	0092      	lsls	r2, r2, #2
 801b2a0:	4694      	mov	ip, r2
 801b2a2:	4463      	add	r3, ip
 801b2a4:	211f      	movs	r1, #31
 801b2a6:	0018      	movs	r0, r3
 801b2a8:	f7fd fe5a 	bl	8018f60 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 801b2ac:	1dfb      	adds	r3, r7, #7
 801b2ae:	781b      	ldrb	r3, [r3, #0]
 801b2b0:	2201      	movs	r2, #1
 801b2b2:	409a      	lsls	r2, r3
 801b2b4:	0013      	movs	r3, r2
 801b2b6:	b21b      	sxth	r3, r3
 801b2b8:	43db      	mvns	r3, r3
 801b2ba:	b21b      	sxth	r3, r3
 801b2bc:	4a1b      	ldr	r2, [pc, #108]	; (801b32c <close+0xe4>)
 801b2be:	8812      	ldrh	r2, [r2, #0]
 801b2c0:	b212      	sxth	r2, r2
 801b2c2:	4013      	ands	r3, r2
 801b2c4:	b21b      	sxth	r3, r3
 801b2c6:	b29a      	uxth	r2, r3
 801b2c8:	4b18      	ldr	r3, [pc, #96]	; (801b32c <close+0xe4>)
 801b2ca:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 801b2cc:	1dfb      	adds	r3, r7, #7
 801b2ce:	781b      	ldrb	r3, [r3, #0]
 801b2d0:	2201      	movs	r2, #1
 801b2d2:	409a      	lsls	r2, r3
 801b2d4:	0013      	movs	r3, r2
 801b2d6:	b21b      	sxth	r3, r3
 801b2d8:	43db      	mvns	r3, r3
 801b2da:	b21b      	sxth	r3, r3
 801b2dc:	4a14      	ldr	r2, [pc, #80]	; (801b330 <close+0xe8>)
 801b2de:	8812      	ldrh	r2, [r2, #0]
 801b2e0:	b212      	sxth	r2, r2
 801b2e2:	4013      	ands	r3, r2
 801b2e4:	b21b      	sxth	r3, r3
 801b2e6:	b29a      	uxth	r2, r3
 801b2e8:	4b11      	ldr	r3, [pc, #68]	; (801b330 <close+0xe8>)
 801b2ea:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 801b2ec:	1dfb      	adds	r3, r7, #7
 801b2ee:	781a      	ldrb	r2, [r3, #0]
 801b2f0:	4b10      	ldr	r3, [pc, #64]	; (801b334 <close+0xec>)
 801b2f2:	0052      	lsls	r2, r2, #1
 801b2f4:	2100      	movs	r1, #0
 801b2f6:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
 801b2f8:	1dfb      	adds	r3, r7, #7
 801b2fa:	781b      	ldrb	r3, [r3, #0]
 801b2fc:	4a0e      	ldr	r2, [pc, #56]	; (801b338 <close+0xf0>)
 801b2fe:	2100      	movs	r1, #0
 801b300:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b302:	46c0      	nop			; (mov r8, r8)
 801b304:	1dfb      	adds	r3, r7, #7
 801b306:	781b      	ldrb	r3, [r3, #0]
 801b308:	009b      	lsls	r3, r3, #2
 801b30a:	3301      	adds	r3, #1
 801b30c:	00db      	lsls	r3, r3, #3
 801b30e:	22c0      	movs	r2, #192	; 0xc0
 801b310:	0092      	lsls	r2, r2, #2
 801b312:	4694      	mov	ip, r2
 801b314:	4463      	add	r3, ip
 801b316:	0018      	movs	r0, r3
 801b318:	f7fd fdd0 	bl	8018ebc <WIZCHIP_READ>
 801b31c:	1e03      	subs	r3, r0, #0
 801b31e:	d1f1      	bne.n	801b304 <close+0xbc>
	return SOCK_OK;
 801b320:	2301      	movs	r3, #1
}
 801b322:	0018      	movs	r0, r3
 801b324:	46bd      	mov	sp, r7
 801b326:	b002      	add	sp, #8
 801b328:	bd80      	pop	{r7, pc}
 801b32a:	46c0      	nop			; (mov r8, r8)
 801b32c:	20007b02 	.word	0x20007b02
 801b330:	20007b04 	.word	0x20007b04
 801b334:	20007b08 	.word	0x20007b08
 801b338:	20007b18 	.word	0x20007b18

0801b33c <listen>:

int8_t listen(uint8_t sn)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b082      	sub	sp, #8
 801b340:	af00      	add	r7, sp, #0
 801b342:	0002      	movs	r2, r0
 801b344:	1dfb      	adds	r3, r7, #7
 801b346:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 801b348:	1dfb      	adds	r3, r7, #7
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	2b08      	cmp	r3, #8
 801b34e:	d902      	bls.n	801b356 <listen+0x1a>
 801b350:	2301      	movs	r3, #1
 801b352:	425b      	negs	r3, r3
 801b354:	e053      	b.n	801b3fe <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b356:	1dfb      	adds	r3, r7, #7
 801b358:	781b      	ldrb	r3, [r3, #0]
 801b35a:	009b      	lsls	r3, r3, #2
 801b35c:	3301      	adds	r3, #1
 801b35e:	00db      	lsls	r3, r3, #3
 801b360:	0018      	movs	r0, r3
 801b362:	f7fd fdab 	bl	8018ebc <WIZCHIP_READ>
 801b366:	0003      	movs	r3, r0
 801b368:	001a      	movs	r2, r3
 801b36a:	230f      	movs	r3, #15
 801b36c:	4013      	ands	r3, r2
 801b36e:	2b01      	cmp	r3, #1
 801b370:	d002      	beq.n	801b378 <listen+0x3c>
 801b372:	2305      	movs	r3, #5
 801b374:	425b      	negs	r3, r3
 801b376:	e042      	b.n	801b3fe <listen+0xc2>
	CHECK_SOCKINIT();
 801b378:	1dfb      	adds	r3, r7, #7
 801b37a:	781b      	ldrb	r3, [r3, #0]
 801b37c:	009b      	lsls	r3, r3, #2
 801b37e:	3301      	adds	r3, #1
 801b380:	00db      	lsls	r3, r3, #3
 801b382:	22c0      	movs	r2, #192	; 0xc0
 801b384:	0092      	lsls	r2, r2, #2
 801b386:	4694      	mov	ip, r2
 801b388:	4463      	add	r3, ip
 801b38a:	0018      	movs	r0, r3
 801b38c:	f7fd fd96 	bl	8018ebc <WIZCHIP_READ>
 801b390:	0003      	movs	r3, r0
 801b392:	2b13      	cmp	r3, #19
 801b394:	d002      	beq.n	801b39c <listen+0x60>
 801b396:	2303      	movs	r3, #3
 801b398:	425b      	negs	r3, r3
 801b39a:	e030      	b.n	801b3fe <listen+0xc2>
	setSn_CR(sn,Sn_CR_LISTEN);
 801b39c:	1dfb      	adds	r3, r7, #7
 801b39e:	781b      	ldrb	r3, [r3, #0]
 801b3a0:	009b      	lsls	r3, r3, #2
 801b3a2:	3301      	adds	r3, #1
 801b3a4:	00db      	lsls	r3, r3, #3
 801b3a6:	3301      	adds	r3, #1
 801b3a8:	33ff      	adds	r3, #255	; 0xff
 801b3aa:	2102      	movs	r1, #2
 801b3ac:	0018      	movs	r0, r3
 801b3ae:	f7fd fdd7 	bl	8018f60 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 801b3b2:	46c0      	nop			; (mov r8, r8)
 801b3b4:	1dfb      	adds	r3, r7, #7
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	009b      	lsls	r3, r3, #2
 801b3ba:	3301      	adds	r3, #1
 801b3bc:	00db      	lsls	r3, r3, #3
 801b3be:	3301      	adds	r3, #1
 801b3c0:	33ff      	adds	r3, #255	; 0xff
 801b3c2:	0018      	movs	r0, r3
 801b3c4:	f7fd fd7a 	bl	8018ebc <WIZCHIP_READ>
 801b3c8:	1e03      	subs	r3, r0, #0
 801b3ca:	d1f3      	bne.n	801b3b4 <listen+0x78>
   while(getSn_SR(sn) != SOCK_LISTEN)
 801b3cc:	e007      	b.n	801b3de <listen+0xa2>
   {
         close(sn);
 801b3ce:	1dfb      	adds	r3, r7, #7
 801b3d0:	781b      	ldrb	r3, [r3, #0]
 801b3d2:	0018      	movs	r0, r3
 801b3d4:	f7ff ff38 	bl	801b248 <close>
         return SOCKERR_SOCKCLOSED;
 801b3d8:	2304      	movs	r3, #4
 801b3da:	425b      	negs	r3, r3
 801b3dc:	e00f      	b.n	801b3fe <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 801b3de:	1dfb      	adds	r3, r7, #7
 801b3e0:	781b      	ldrb	r3, [r3, #0]
 801b3e2:	009b      	lsls	r3, r3, #2
 801b3e4:	3301      	adds	r3, #1
 801b3e6:	00db      	lsls	r3, r3, #3
 801b3e8:	22c0      	movs	r2, #192	; 0xc0
 801b3ea:	0092      	lsls	r2, r2, #2
 801b3ec:	4694      	mov	ip, r2
 801b3ee:	4463      	add	r3, ip
 801b3f0:	0018      	movs	r0, r3
 801b3f2:	f7fd fd63 	bl	8018ebc <WIZCHIP_READ>
 801b3f6:	0003      	movs	r3, r0
 801b3f8:	2b14      	cmp	r3, #20
 801b3fa:	d1e8      	bne.n	801b3ce <listen+0x92>
   }
   return SOCK_OK;
 801b3fc:	2301      	movs	r3, #1
}
 801b3fe:	0018      	movs	r0, r3
 801b400:	46bd      	mov	sp, r7
 801b402:	b002      	add	sp, #8
 801b404:	bd80      	pop	{r7, pc}
	...

0801b408 <disconnect>:
   
   return SOCK_OK;
}
*/
int8_t disconnect(uint8_t sn)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	0002      	movs	r2, r0
 801b410:	1dfb      	adds	r3, r7, #7
 801b412:	701a      	strb	r2, [r3, #0]
   CHECK_SOCKNUM();
 801b414:	1dfb      	adds	r3, r7, #7
 801b416:	781b      	ldrb	r3, [r3, #0]
 801b418:	2b08      	cmp	r3, #8
 801b41a:	d902      	bls.n	801b422 <disconnect+0x1a>
 801b41c:	2301      	movs	r3, #1
 801b41e:	425b      	negs	r3, r3
 801b420:	e06c      	b.n	801b4fc <disconnect+0xf4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b422:	1dfb      	adds	r3, r7, #7
 801b424:	781b      	ldrb	r3, [r3, #0]
 801b426:	009b      	lsls	r3, r3, #2
 801b428:	3301      	adds	r3, #1
 801b42a:	00db      	lsls	r3, r3, #3
 801b42c:	0018      	movs	r0, r3
 801b42e:	f7fd fd45 	bl	8018ebc <WIZCHIP_READ>
 801b432:	0003      	movs	r3, r0
 801b434:	001a      	movs	r2, r3
 801b436:	230f      	movs	r3, #15
 801b438:	4013      	ands	r3, r2
 801b43a:	2b01      	cmp	r3, #1
 801b43c:	d002      	beq.n	801b444 <disconnect+0x3c>
 801b43e:	2305      	movs	r3, #5
 801b440:	425b      	negs	r3, r3
 801b442:	e05b      	b.n	801b4fc <disconnect+0xf4>
	setSn_CR(sn,Sn_CR_DISCON);
 801b444:	1dfb      	adds	r3, r7, #7
 801b446:	781b      	ldrb	r3, [r3, #0]
 801b448:	009b      	lsls	r3, r3, #2
 801b44a:	3301      	adds	r3, #1
 801b44c:	00db      	lsls	r3, r3, #3
 801b44e:	3301      	adds	r3, #1
 801b450:	33ff      	adds	r3, #255	; 0xff
 801b452:	2108      	movs	r1, #8
 801b454:	0018      	movs	r0, r3
 801b456:	f7fd fd83 	bl	8018f60 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801b45a:	46c0      	nop			; (mov r8, r8)
 801b45c:	1dfb      	adds	r3, r7, #7
 801b45e:	781b      	ldrb	r3, [r3, #0]
 801b460:	009b      	lsls	r3, r3, #2
 801b462:	3301      	adds	r3, #1
 801b464:	00db      	lsls	r3, r3, #3
 801b466:	3301      	adds	r3, #1
 801b468:	33ff      	adds	r3, #255	; 0xff
 801b46a:	0018      	movs	r0, r3
 801b46c:	f7fd fd26 	bl	8018ebc <WIZCHIP_READ>
 801b470:	1e03      	subs	r3, r0, #0
 801b472:	d1f3      	bne.n	801b45c <disconnect+0x54>
	sock_is_sending &= ~(1<<sn);
 801b474:	1dfb      	adds	r3, r7, #7
 801b476:	781b      	ldrb	r3, [r3, #0]
 801b478:	2201      	movs	r2, #1
 801b47a:	409a      	lsls	r2, r3
 801b47c:	0013      	movs	r3, r2
 801b47e:	b21b      	sxth	r3, r3
 801b480:	43db      	mvns	r3, r3
 801b482:	b21b      	sxth	r3, r3
 801b484:	4a1f      	ldr	r2, [pc, #124]	; (801b504 <disconnect+0xfc>)
 801b486:	8812      	ldrh	r2, [r2, #0]
 801b488:	b212      	sxth	r2, r2
 801b48a:	4013      	ands	r3, r2
 801b48c:	b21b      	sxth	r3, r3
 801b48e:	b29a      	uxth	r2, r3
 801b490:	4b1c      	ldr	r3, [pc, #112]	; (801b504 <disconnect+0xfc>)
 801b492:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801b494:	4b1c      	ldr	r3, [pc, #112]	; (801b508 <disconnect+0x100>)
 801b496:	881b      	ldrh	r3, [r3, #0]
 801b498:	001a      	movs	r2, r3
 801b49a:	1dfb      	adds	r3, r7, #7
 801b49c:	781b      	ldrb	r3, [r3, #0]
 801b49e:	411a      	asrs	r2, r3
 801b4a0:	0013      	movs	r3, r2
 801b4a2:	2201      	movs	r2, #1
 801b4a4:	4013      	ands	r3, r2
 801b4a6:	d01a      	beq.n	801b4de <disconnect+0xd6>
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	e027      	b.n	801b4fc <disconnect+0xf4>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 801b4ac:	1dfb      	adds	r3, r7, #7
 801b4ae:	781b      	ldrb	r3, [r3, #0]
 801b4b0:	009b      	lsls	r3, r3, #2
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	00db      	lsls	r3, r3, #3
 801b4b6:	2280      	movs	r2, #128	; 0x80
 801b4b8:	0092      	lsls	r2, r2, #2
 801b4ba:	4694      	mov	ip, r2
 801b4bc:	4463      	add	r3, ip
 801b4be:	0018      	movs	r0, r3
 801b4c0:	f7fd fcfc 	bl	8018ebc <WIZCHIP_READ>
 801b4c4:	0003      	movs	r3, r0
 801b4c6:	001a      	movs	r2, r3
 801b4c8:	2308      	movs	r3, #8
 801b4ca:	4013      	ands	r3, r2
 801b4cc:	d007      	beq.n	801b4de <disconnect+0xd6>
	   {
	      close(sn);
 801b4ce:	1dfb      	adds	r3, r7, #7
 801b4d0:	781b      	ldrb	r3, [r3, #0]
 801b4d2:	0018      	movs	r0, r3
 801b4d4:	f7ff feb8 	bl	801b248 <close>
	      return SOCKERR_TIMEOUT;
 801b4d8:	230d      	movs	r3, #13
 801b4da:	425b      	negs	r3, r3
 801b4dc:	e00e      	b.n	801b4fc <disconnect+0xf4>
	while(getSn_SR(sn) != SOCK_CLOSED)
 801b4de:	1dfb      	adds	r3, r7, #7
 801b4e0:	781b      	ldrb	r3, [r3, #0]
 801b4e2:	009b      	lsls	r3, r3, #2
 801b4e4:	3301      	adds	r3, #1
 801b4e6:	00db      	lsls	r3, r3, #3
 801b4e8:	22c0      	movs	r2, #192	; 0xc0
 801b4ea:	0092      	lsls	r2, r2, #2
 801b4ec:	4694      	mov	ip, r2
 801b4ee:	4463      	add	r3, ip
 801b4f0:	0018      	movs	r0, r3
 801b4f2:	f7fd fce3 	bl	8018ebc <WIZCHIP_READ>
 801b4f6:	1e03      	subs	r3, r0, #0
 801b4f8:	d1d8      	bne.n	801b4ac <disconnect+0xa4>
	   }
	}
	return SOCK_OK;
 801b4fa:	2301      	movs	r3, #1
}
 801b4fc:	0018      	movs	r0, r3
 801b4fe:	46bd      	mov	sp, r7
 801b500:	b002      	add	sp, #8
 801b502:	bd80      	pop	{r7, pc}
 801b504:	20007b04 	.word	0x20007b04
 801b508:	20007b02 	.word	0x20007b02

0801b50c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801b50c:	b5b0      	push	{r4, r5, r7, lr}
 801b50e:	b084      	sub	sp, #16
 801b510:	af00      	add	r7, sp, #0
 801b512:	6039      	str	r1, [r7, #0]
 801b514:	0011      	movs	r1, r2
 801b516:	1dfb      	adds	r3, r7, #7
 801b518:	1c02      	adds	r2, r0, #0
 801b51a:	701a      	strb	r2, [r3, #0]
 801b51c:	1d3b      	adds	r3, r7, #4
 801b51e:	1c0a      	adds	r2, r1, #0
 801b520:	801a      	strh	r2, [r3, #0]
   uint8_t tmp=0;
 801b522:	230f      	movs	r3, #15
 801b524:	18fb      	adds	r3, r7, r3
 801b526:	2200      	movs	r2, #0
 801b528:	701a      	strb	r2, [r3, #0]
   uint16_t freesize=0;
 801b52a:	230c      	movs	r3, #12
 801b52c:	18fb      	adds	r3, r7, r3
 801b52e:	2200      	movs	r2, #0
 801b530:	801a      	strh	r2, [r3, #0]
   
   CHECK_SOCKNUM();
 801b532:	1dfb      	adds	r3, r7, #7
 801b534:	781b      	ldrb	r3, [r3, #0]
 801b536:	2b08      	cmp	r3, #8
 801b538:	d902      	bls.n	801b540 <send+0x34>
 801b53a:	2301      	movs	r3, #1
 801b53c:	425b      	negs	r3, r3
 801b53e:	e113      	b.n	801b768 <send+0x25c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b540:	1dfb      	adds	r3, r7, #7
 801b542:	781b      	ldrb	r3, [r3, #0]
 801b544:	009b      	lsls	r3, r3, #2
 801b546:	3301      	adds	r3, #1
 801b548:	00db      	lsls	r3, r3, #3
 801b54a:	0018      	movs	r0, r3
 801b54c:	f7fd fcb6 	bl	8018ebc <WIZCHIP_READ>
 801b550:	0003      	movs	r3, r0
 801b552:	001a      	movs	r2, r3
 801b554:	230f      	movs	r3, #15
 801b556:	4013      	ands	r3, r2
 801b558:	2b01      	cmp	r3, #1
 801b55a:	d002      	beq.n	801b562 <send+0x56>
 801b55c:	2305      	movs	r3, #5
 801b55e:	425b      	negs	r3, r3
 801b560:	e102      	b.n	801b768 <send+0x25c>
   CHECK_SOCKDATA();
 801b562:	1d3b      	adds	r3, r7, #4
 801b564:	881b      	ldrh	r3, [r3, #0]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d102      	bne.n	801b570 <send+0x64>
 801b56a:	230e      	movs	r3, #14
 801b56c:	425b      	negs	r3, r3
 801b56e:	e0fb      	b.n	801b768 <send+0x25c>
   tmp = getSn_SR(sn);
 801b570:	1dfb      	adds	r3, r7, #7
 801b572:	781b      	ldrb	r3, [r3, #0]
 801b574:	009b      	lsls	r3, r3, #2
 801b576:	3301      	adds	r3, #1
 801b578:	00db      	lsls	r3, r3, #3
 801b57a:	22c0      	movs	r2, #192	; 0xc0
 801b57c:	0092      	lsls	r2, r2, #2
 801b57e:	4694      	mov	ip, r2
 801b580:	4463      	add	r3, ip
 801b582:	250f      	movs	r5, #15
 801b584:	197c      	adds	r4, r7, r5
 801b586:	0018      	movs	r0, r3
 801b588:	f7fd fc98 	bl	8018ebc <WIZCHIP_READ>
 801b58c:	0003      	movs	r3, r0
 801b58e:	7023      	strb	r3, [r4, #0]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 801b590:	197b      	adds	r3, r7, r5
 801b592:	781b      	ldrb	r3, [r3, #0]
 801b594:	2b17      	cmp	r3, #23
 801b596:	d006      	beq.n	801b5a6 <send+0x9a>
 801b598:	197b      	adds	r3, r7, r5
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	2b1c      	cmp	r3, #28
 801b59e:	d002      	beq.n	801b5a6 <send+0x9a>
 801b5a0:	2307      	movs	r3, #7
 801b5a2:	425b      	negs	r3, r3
 801b5a4:	e0e0      	b.n	801b768 <send+0x25c>
   if( sock_is_sending & (1<<sn) )
 801b5a6:	4b72      	ldr	r3, [pc, #456]	; (801b770 <send+0x264>)
 801b5a8:	881b      	ldrh	r3, [r3, #0]
 801b5aa:	001a      	movs	r2, r3
 801b5ac:	1dfb      	adds	r3, r7, #7
 801b5ae:	781b      	ldrb	r3, [r3, #0]
 801b5b0:	411a      	asrs	r2, r3
 801b5b2:	0013      	movs	r3, r2
 801b5b4:	2201      	movs	r2, #1
 801b5b6:	4013      	ands	r3, r2
 801b5b8:	d045      	beq.n	801b646 <send+0x13a>
   {
      tmp = getSn_IR(sn);
 801b5ba:	1dfb      	adds	r3, r7, #7
 801b5bc:	781b      	ldrb	r3, [r3, #0]
 801b5be:	009b      	lsls	r3, r3, #2
 801b5c0:	3301      	adds	r3, #1
 801b5c2:	00db      	lsls	r3, r3, #3
 801b5c4:	2280      	movs	r2, #128	; 0x80
 801b5c6:	0092      	lsls	r2, r2, #2
 801b5c8:	4694      	mov	ip, r2
 801b5ca:	4463      	add	r3, ip
 801b5cc:	0018      	movs	r0, r3
 801b5ce:	f7fd fc75 	bl	8018ebc <WIZCHIP_READ>
 801b5d2:	0003      	movs	r3, r0
 801b5d4:	0019      	movs	r1, r3
 801b5d6:	200f      	movs	r0, #15
 801b5d8:	183b      	adds	r3, r7, r0
 801b5da:	221f      	movs	r2, #31
 801b5dc:	400a      	ands	r2, r1
 801b5de:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 801b5e0:	183b      	adds	r3, r7, r0
 801b5e2:	781b      	ldrb	r3, [r3, #0]
 801b5e4:	2210      	movs	r2, #16
 801b5e6:	4013      	ands	r3, r2
 801b5e8:	d01d      	beq.n	801b626 <send+0x11a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 801b5ea:	1dfb      	adds	r3, r7, #7
 801b5ec:	781b      	ldrb	r3, [r3, #0]
 801b5ee:	009b      	lsls	r3, r3, #2
 801b5f0:	3301      	adds	r3, #1
 801b5f2:	00db      	lsls	r3, r3, #3
 801b5f4:	2280      	movs	r2, #128	; 0x80
 801b5f6:	0092      	lsls	r2, r2, #2
 801b5f8:	4694      	mov	ip, r2
 801b5fa:	4463      	add	r3, ip
 801b5fc:	2110      	movs	r1, #16
 801b5fe:	0018      	movs	r0, r3
 801b600:	f7fd fcae 	bl	8018f60 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 801b604:	1dfb      	adds	r3, r7, #7
 801b606:	781b      	ldrb	r3, [r3, #0]
 801b608:	2201      	movs	r2, #1
 801b60a:	409a      	lsls	r2, r3
 801b60c:	0013      	movs	r3, r2
 801b60e:	b21b      	sxth	r3, r3
 801b610:	43db      	mvns	r3, r3
 801b612:	b21b      	sxth	r3, r3
 801b614:	4a56      	ldr	r2, [pc, #344]	; (801b770 <send+0x264>)
 801b616:	8812      	ldrh	r2, [r2, #0]
 801b618:	b212      	sxth	r2, r2
 801b61a:	4013      	ands	r3, r2
 801b61c:	b21b      	sxth	r3, r3
 801b61e:	b29a      	uxth	r2, r3
 801b620:	4b53      	ldr	r3, [pc, #332]	; (801b770 <send+0x264>)
 801b622:	801a      	strh	r2, [r3, #0]
 801b624:	e00f      	b.n	801b646 <send+0x13a>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 801b626:	230f      	movs	r3, #15
 801b628:	18fb      	adds	r3, r7, r3
 801b62a:	781b      	ldrb	r3, [r3, #0]
 801b62c:	2208      	movs	r2, #8
 801b62e:	4013      	ands	r3, r2
 801b630:	d007      	beq.n	801b642 <send+0x136>
      {
         close(sn);
 801b632:	1dfb      	adds	r3, r7, #7
 801b634:	781b      	ldrb	r3, [r3, #0]
 801b636:	0018      	movs	r0, r3
 801b638:	f7ff fe06 	bl	801b248 <close>
         return SOCKERR_TIMEOUT;
 801b63c:	230d      	movs	r3, #13
 801b63e:	425b      	negs	r3, r3
 801b640:	e092      	b.n	801b768 <send+0x25c>
      }
      else return SOCK_BUSY;
 801b642:	2300      	movs	r3, #0
 801b644:	e090      	b.n	801b768 <send+0x25c>
   }
   freesize = getSn_TxMAX(sn);
 801b646:	1dfb      	adds	r3, r7, #7
 801b648:	781b      	ldrb	r3, [r3, #0]
 801b64a:	009b      	lsls	r3, r3, #2
 801b64c:	3301      	adds	r3, #1
 801b64e:	00db      	lsls	r3, r3, #3
 801b650:	22f8      	movs	r2, #248	; 0xf8
 801b652:	0152      	lsls	r2, r2, #5
 801b654:	4694      	mov	ip, r2
 801b656:	4463      	add	r3, ip
 801b658:	0018      	movs	r0, r3
 801b65a:	f7fd fc2f 	bl	8018ebc <WIZCHIP_READ>
 801b65e:	0003      	movs	r3, r0
 801b660:	b29a      	uxth	r2, r3
 801b662:	210c      	movs	r1, #12
 801b664:	187b      	adds	r3, r7, r1
 801b666:	0292      	lsls	r2, r2, #10
 801b668:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801b66a:	1d3a      	adds	r2, r7, #4
 801b66c:	187b      	adds	r3, r7, r1
 801b66e:	8812      	ldrh	r2, [r2, #0]
 801b670:	881b      	ldrh	r3, [r3, #0]
 801b672:	429a      	cmp	r2, r3
 801b674:	d903      	bls.n	801b67e <send+0x172>
 801b676:	1d3b      	adds	r3, r7, #4
 801b678:	187a      	adds	r2, r7, r1
 801b67a:	8812      	ldrh	r2, [r2, #0]
 801b67c:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801b67e:	230c      	movs	r3, #12
 801b680:	18fc      	adds	r4, r7, r3
 801b682:	1dfb      	adds	r3, r7, #7
 801b684:	781b      	ldrb	r3, [r3, #0]
 801b686:	0018      	movs	r0, r3
 801b688:	f7fd fd9c 	bl	80191c4 <getSn_TX_FSR>
 801b68c:	0003      	movs	r3, r0
 801b68e:	8023      	strh	r3, [r4, #0]
      tmp = getSn_SR(sn);
 801b690:	1dfb      	adds	r3, r7, #7
 801b692:	781b      	ldrb	r3, [r3, #0]
 801b694:	009b      	lsls	r3, r3, #2
 801b696:	3301      	adds	r3, #1
 801b698:	00db      	lsls	r3, r3, #3
 801b69a:	22c0      	movs	r2, #192	; 0xc0
 801b69c:	0092      	lsls	r2, r2, #2
 801b69e:	4694      	mov	ip, r2
 801b6a0:	4463      	add	r3, ip
 801b6a2:	250f      	movs	r5, #15
 801b6a4:	197c      	adds	r4, r7, r5
 801b6a6:	0018      	movs	r0, r3
 801b6a8:	f7fd fc08 	bl	8018ebc <WIZCHIP_READ>
 801b6ac:	0003      	movs	r3, r0
 801b6ae:	7023      	strb	r3, [r4, #0]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 801b6b0:	197b      	adds	r3, r7, r5
 801b6b2:	781b      	ldrb	r3, [r3, #0]
 801b6b4:	2b17      	cmp	r3, #23
 801b6b6:	d00b      	beq.n	801b6d0 <send+0x1c4>
 801b6b8:	197b      	adds	r3, r7, r5
 801b6ba:	781b      	ldrb	r3, [r3, #0]
 801b6bc:	2b1c      	cmp	r3, #28
 801b6be:	d007      	beq.n	801b6d0 <send+0x1c4>
      {
         close(sn);
 801b6c0:	1dfb      	adds	r3, r7, #7
 801b6c2:	781b      	ldrb	r3, [r3, #0]
 801b6c4:	0018      	movs	r0, r3
 801b6c6:	f7ff fdbf 	bl	801b248 <close>
         return SOCKERR_SOCKSTATUS;
 801b6ca:	2307      	movs	r3, #7
 801b6cc:	425b      	negs	r3, r3
 801b6ce:	e04b      	b.n	801b768 <send+0x25c>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801b6d0:	4b28      	ldr	r3, [pc, #160]	; (801b774 <send+0x268>)
 801b6d2:	881b      	ldrh	r3, [r3, #0]
 801b6d4:	001a      	movs	r2, r3
 801b6d6:	1dfb      	adds	r3, r7, #7
 801b6d8:	781b      	ldrb	r3, [r3, #0]
 801b6da:	411a      	asrs	r2, r3
 801b6dc:	0013      	movs	r3, r2
 801b6de:	2201      	movs	r2, #1
 801b6e0:	4013      	ands	r3, r2
 801b6e2:	d008      	beq.n	801b6f6 <send+0x1ea>
 801b6e4:	1d3a      	adds	r2, r7, #4
 801b6e6:	230c      	movs	r3, #12
 801b6e8:	18fb      	adds	r3, r7, r3
 801b6ea:	8812      	ldrh	r2, [r2, #0]
 801b6ec:	881b      	ldrh	r3, [r3, #0]
 801b6ee:	429a      	cmp	r2, r3
 801b6f0:	d901      	bls.n	801b6f6 <send+0x1ea>
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	e038      	b.n	801b768 <send+0x25c>
      if(len <= freesize) break;
 801b6f6:	1d3a      	adds	r2, r7, #4
 801b6f8:	230c      	movs	r3, #12
 801b6fa:	18fb      	adds	r3, r7, r3
 801b6fc:	8812      	ldrh	r2, [r2, #0]
 801b6fe:	881b      	ldrh	r3, [r3, #0]
 801b700:	429a      	cmp	r2, r3
 801b702:	d900      	bls.n	801b706 <send+0x1fa>
      freesize = getSn_TX_FSR(sn);
 801b704:	e7bb      	b.n	801b67e <send+0x172>
      if(len <= freesize) break;
 801b706:	46c0      	nop			; (mov r8, r8)
   }
   wiz_send_data(sn, buf, len);
 801b708:	1d3b      	adds	r3, r7, #4
 801b70a:	881a      	ldrh	r2, [r3, #0]
 801b70c:	6839      	ldr	r1, [r7, #0]
 801b70e:	1dfb      	adds	r3, r7, #7
 801b710:	781b      	ldrb	r3, [r3, #0]
 801b712:	0018      	movs	r0, r3
 801b714:	f7fd fe2e 	bl	8019374 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801b718:	1dfb      	adds	r3, r7, #7
 801b71a:	781b      	ldrb	r3, [r3, #0]
 801b71c:	009b      	lsls	r3, r3, #2
 801b71e:	3301      	adds	r3, #1
 801b720:	00db      	lsls	r3, r3, #3
 801b722:	3301      	adds	r3, #1
 801b724:	33ff      	adds	r3, #255	; 0xff
 801b726:	2120      	movs	r1, #32
 801b728:	0018      	movs	r0, r3
 801b72a:	f7fd fc19 	bl	8018f60 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 801b72e:	46c0      	nop			; (mov r8, r8)
 801b730:	1dfb      	adds	r3, r7, #7
 801b732:	781b      	ldrb	r3, [r3, #0]
 801b734:	009b      	lsls	r3, r3, #2
 801b736:	3301      	adds	r3, #1
 801b738:	00db      	lsls	r3, r3, #3
 801b73a:	3301      	adds	r3, #1
 801b73c:	33ff      	adds	r3, #255	; 0xff
 801b73e:	0018      	movs	r0, r3
 801b740:	f7fd fbbc 	bl	8018ebc <WIZCHIP_READ>
 801b744:	1e03      	subs	r3, r0, #0
 801b746:	d1f3      	bne.n	801b730 <send+0x224>
   sock_is_sending |= (1 << sn);
 801b748:	1dfb      	adds	r3, r7, #7
 801b74a:	781b      	ldrb	r3, [r3, #0]
 801b74c:	2201      	movs	r2, #1
 801b74e:	409a      	lsls	r2, r3
 801b750:	0013      	movs	r3, r2
 801b752:	b21a      	sxth	r2, r3
 801b754:	4b06      	ldr	r3, [pc, #24]	; (801b770 <send+0x264>)
 801b756:	881b      	ldrh	r3, [r3, #0]
 801b758:	b21b      	sxth	r3, r3
 801b75a:	4313      	orrs	r3, r2
 801b75c:	b21b      	sxth	r3, r3
 801b75e:	b29a      	uxth	r2, r3
 801b760:	4b03      	ldr	r3, [pc, #12]	; (801b770 <send+0x264>)
 801b762:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801b764:	1d3b      	adds	r3, r7, #4
 801b766:	881b      	ldrh	r3, [r3, #0]
}
 801b768:	0018      	movs	r0, r3
 801b76a:	46bd      	mov	sp, r7
 801b76c:	b004      	add	sp, #16
 801b76e:	bdb0      	pop	{r4, r5, r7, pc}
 801b770:	20007b04 	.word	0x20007b04
 801b774:	20007b02 	.word	0x20007b02

0801b778 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801b778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b77a:	b085      	sub	sp, #20
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6039      	str	r1, [r7, #0]
 801b780:	0011      	movs	r1, r2
 801b782:	1dfb      	adds	r3, r7, #7
 801b784:	1c02      	adds	r2, r0, #0
 801b786:	701a      	strb	r2, [r3, #0]
 801b788:	1d3b      	adds	r3, r7, #4
 801b78a:	1c0a      	adds	r2, r1, #0
 801b78c:	801a      	strh	r2, [r3, #0]
   uint8_t  tmp = 0;
 801b78e:	230f      	movs	r3, #15
 801b790:	18fb      	adds	r3, r7, r3
 801b792:	2200      	movs	r2, #0
 801b794:	701a      	strb	r2, [r3, #0]
   uint16_t recvsize = 0;
 801b796:	230c      	movs	r3, #12
 801b798:	18fb      	adds	r3, r7, r3
 801b79a:	2200      	movs	r2, #0
 801b79c:	801a      	strh	r2, [r3, #0]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 801b79e:	1dfb      	adds	r3, r7, #7
 801b7a0:	781b      	ldrb	r3, [r3, #0]
 801b7a2:	2b08      	cmp	r3, #8
 801b7a4:	d902      	bls.n	801b7ac <recv+0x34>
 801b7a6:	2301      	movs	r3, #1
 801b7a8:	425b      	negs	r3, r3
 801b7aa:	e0c6      	b.n	801b93a <recv+0x1c2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b7ac:	1dfb      	adds	r3, r7, #7
 801b7ae:	781b      	ldrb	r3, [r3, #0]
 801b7b0:	009b      	lsls	r3, r3, #2
 801b7b2:	3301      	adds	r3, #1
 801b7b4:	00db      	lsls	r3, r3, #3
 801b7b6:	0018      	movs	r0, r3
 801b7b8:	f7fd fb80 	bl	8018ebc <WIZCHIP_READ>
 801b7bc:	0003      	movs	r3, r0
 801b7be:	001a      	movs	r2, r3
 801b7c0:	230f      	movs	r3, #15
 801b7c2:	4013      	ands	r3, r2
 801b7c4:	2b01      	cmp	r3, #1
 801b7c6:	d002      	beq.n	801b7ce <recv+0x56>
 801b7c8:	2305      	movs	r3, #5
 801b7ca:	425b      	negs	r3, r3
 801b7cc:	e0b5      	b.n	801b93a <recv+0x1c2>
   CHECK_SOCKDATA();
 801b7ce:	1d3b      	adds	r3, r7, #4
 801b7d0:	881b      	ldrh	r3, [r3, #0]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d102      	bne.n	801b7dc <recv+0x64>
 801b7d6:	230e      	movs	r3, #14
 801b7d8:	425b      	negs	r3, r3
 801b7da:	e0ae      	b.n	801b93a <recv+0x1c2>
   
   recvsize = getSn_RxMAX(sn);
 801b7dc:	1dfb      	adds	r3, r7, #7
 801b7de:	781b      	ldrb	r3, [r3, #0]
 801b7e0:	009b      	lsls	r3, r3, #2
 801b7e2:	3301      	adds	r3, #1
 801b7e4:	00db      	lsls	r3, r3, #3
 801b7e6:	22f0      	movs	r2, #240	; 0xf0
 801b7e8:	0152      	lsls	r2, r2, #5
 801b7ea:	4694      	mov	ip, r2
 801b7ec:	4463      	add	r3, ip
 801b7ee:	0018      	movs	r0, r3
 801b7f0:	f7fd fb64 	bl	8018ebc <WIZCHIP_READ>
 801b7f4:	0003      	movs	r3, r0
 801b7f6:	b29a      	uxth	r2, r3
 801b7f8:	210c      	movs	r1, #12
 801b7fa:	187b      	adds	r3, r7, r1
 801b7fc:	0292      	lsls	r2, r2, #10
 801b7fe:	801a      	strh	r2, [r3, #0]
   if(recvsize < len) len = recvsize;
 801b800:	187a      	adds	r2, r7, r1
 801b802:	1d3b      	adds	r3, r7, #4
 801b804:	8812      	ldrh	r2, [r2, #0]
 801b806:	881b      	ldrh	r3, [r3, #0]
 801b808:	429a      	cmp	r2, r3
 801b80a:	d203      	bcs.n	801b814 <recv+0x9c>
 801b80c:	1d3b      	adds	r3, r7, #4
 801b80e:	187a      	adds	r2, r7, r1
 801b810:	8812      	ldrh	r2, [r2, #0]
 801b812:	801a      	strh	r2, [r3, #0]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 801b814:	260c      	movs	r6, #12
 801b816:	19bc      	adds	r4, r7, r6
 801b818:	1dfb      	adds	r3, r7, #7
 801b81a:	781b      	ldrb	r3, [r3, #0]
 801b81c:	0018      	movs	r0, r3
 801b81e:	f7fd fd3d 	bl	801929c <getSn_RX_RSR>
 801b822:	0003      	movs	r3, r0
 801b824:	8023      	strh	r3, [r4, #0]
         tmp = getSn_SR(sn);
 801b826:	1dfb      	adds	r3, r7, #7
 801b828:	781b      	ldrb	r3, [r3, #0]
 801b82a:	009b      	lsls	r3, r3, #2
 801b82c:	3301      	adds	r3, #1
 801b82e:	00db      	lsls	r3, r3, #3
 801b830:	22c0      	movs	r2, #192	; 0xc0
 801b832:	0092      	lsls	r2, r2, #2
 801b834:	4694      	mov	ip, r2
 801b836:	4463      	add	r3, ip
 801b838:	250f      	movs	r5, #15
 801b83a:	197c      	adds	r4, r7, r5
 801b83c:	0018      	movs	r0, r3
 801b83e:	f7fd fb3d 	bl	8018ebc <WIZCHIP_READ>
 801b842:	0003      	movs	r3, r0
 801b844:	7023      	strb	r3, [r4, #0]
         if (tmp != SOCK_ESTABLISHED)
 801b846:	197b      	adds	r3, r7, r5
 801b848:	781b      	ldrb	r3, [r3, #0]
 801b84a:	2b17      	cmp	r3, #23
 801b84c:	d02e      	beq.n	801b8ac <recv+0x134>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 801b84e:	197b      	adds	r3, r7, r5
 801b850:	781b      	ldrb	r3, [r3, #0]
 801b852:	2b1c      	cmp	r3, #28
 801b854:	d122      	bne.n	801b89c <recv+0x124>
            {
               if(recvsize != 0) break;
 801b856:	19bb      	adds	r3, r7, r6
 801b858:	881b      	ldrh	r3, [r3, #0]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d13d      	bne.n	801b8da <recv+0x162>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801b85e:	1dfb      	adds	r3, r7, #7
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	0018      	movs	r0, r3
 801b864:	f7fd fcae 	bl	80191c4 <getSn_TX_FSR>
 801b868:	0003      	movs	r3, r0
 801b86a:	001c      	movs	r4, r3
 801b86c:	1dfb      	adds	r3, r7, #7
 801b86e:	781b      	ldrb	r3, [r3, #0]
 801b870:	009b      	lsls	r3, r3, #2
 801b872:	3301      	adds	r3, #1
 801b874:	00db      	lsls	r3, r3, #3
 801b876:	22f8      	movs	r2, #248	; 0xf8
 801b878:	0152      	lsls	r2, r2, #5
 801b87a:	4694      	mov	ip, r2
 801b87c:	4463      	add	r3, ip
 801b87e:	0018      	movs	r0, r3
 801b880:	f7fd fb1c 	bl	8018ebc <WIZCHIP_READ>
 801b884:	0003      	movs	r3, r0
 801b886:	029b      	lsls	r3, r3, #10
 801b888:	429c      	cmp	r4, r3
 801b88a:	d10f      	bne.n	801b8ac <recv+0x134>
               {
                  close(sn);
 801b88c:	1dfb      	adds	r3, r7, #7
 801b88e:	781b      	ldrb	r3, [r3, #0]
 801b890:	0018      	movs	r0, r3
 801b892:	f7ff fcd9 	bl	801b248 <close>
                  return SOCKERR_SOCKSTATUS;
 801b896:	2307      	movs	r3, #7
 801b898:	425b      	negs	r3, r3
 801b89a:	e04e      	b.n	801b93a <recv+0x1c2>
               }
            }
            else
            {
               close(sn);
 801b89c:	1dfb      	adds	r3, r7, #7
 801b89e:	781b      	ldrb	r3, [r3, #0]
 801b8a0:	0018      	movs	r0, r3
 801b8a2:	f7ff fcd1 	bl	801b248 <close>
               return SOCKERR_SOCKSTATUS;
 801b8a6:	2307      	movs	r3, #7
 801b8a8:	425b      	negs	r3, r3
 801b8aa:	e046      	b.n	801b93a <recv+0x1c2>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801b8ac:	4b25      	ldr	r3, [pc, #148]	; (801b944 <recv+0x1cc>)
 801b8ae:	881b      	ldrh	r3, [r3, #0]
 801b8b0:	001a      	movs	r2, r3
 801b8b2:	1dfb      	adds	r3, r7, #7
 801b8b4:	781b      	ldrb	r3, [r3, #0]
 801b8b6:	411a      	asrs	r2, r3
 801b8b8:	0013      	movs	r3, r2
 801b8ba:	2201      	movs	r2, #1
 801b8bc:	4013      	ands	r3, r2
 801b8be:	d006      	beq.n	801b8ce <recv+0x156>
 801b8c0:	230c      	movs	r3, #12
 801b8c2:	18fb      	adds	r3, r7, r3
 801b8c4:	881b      	ldrh	r3, [r3, #0]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d101      	bne.n	801b8ce <recv+0x156>
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	e035      	b.n	801b93a <recv+0x1c2>
         if(recvsize != 0) break;
 801b8ce:	230c      	movs	r3, #12
 801b8d0:	18fb      	adds	r3, r7, r3
 801b8d2:	881b      	ldrh	r3, [r3, #0]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d102      	bne.n	801b8de <recv+0x166>
         recvsize = getSn_RX_RSR(sn);
 801b8d8:	e79c      	b.n	801b814 <recv+0x9c>
               if(recvsize != 0) break;
 801b8da:	46c0      	nop			; (mov r8, r8)
 801b8dc:	e000      	b.n	801b8e0 <recv+0x168>
         if(recvsize != 0) break;
 801b8de:	46c0      	nop			; (mov r8, r8)
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 801b8e0:	210c      	movs	r1, #12
 801b8e2:	187a      	adds	r2, r7, r1
 801b8e4:	1d3b      	adds	r3, r7, #4
 801b8e6:	8812      	ldrh	r2, [r2, #0]
 801b8e8:	881b      	ldrh	r3, [r3, #0]
 801b8ea:	429a      	cmp	r2, r3
 801b8ec:	d203      	bcs.n	801b8f6 <recv+0x17e>
 801b8ee:	1d3b      	adds	r3, r7, #4
 801b8f0:	187a      	adds	r2, r7, r1
 801b8f2:	8812      	ldrh	r2, [r2, #0]
 801b8f4:	801a      	strh	r2, [r3, #0]
   wiz_recv_data(sn, buf, len);
 801b8f6:	1d3b      	adds	r3, r7, #4
 801b8f8:	881a      	ldrh	r2, [r3, #0]
 801b8fa:	6839      	ldr	r1, [r7, #0]
 801b8fc:	1dfb      	adds	r3, r7, #7
 801b8fe:	781b      	ldrb	r3, [r3, #0]
 801b900:	0018      	movs	r0, r3
 801b902:	f7fd fdaf 	bl	8019464 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801b906:	1dfb      	adds	r3, r7, #7
 801b908:	781b      	ldrb	r3, [r3, #0]
 801b90a:	009b      	lsls	r3, r3, #2
 801b90c:	3301      	adds	r3, #1
 801b90e:	00db      	lsls	r3, r3, #3
 801b910:	3301      	adds	r3, #1
 801b912:	33ff      	adds	r3, #255	; 0xff
 801b914:	2140      	movs	r1, #64	; 0x40
 801b916:	0018      	movs	r0, r3
 801b918:	f7fd fb22 	bl	8018f60 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801b91c:	46c0      	nop			; (mov r8, r8)
 801b91e:	1dfb      	adds	r3, r7, #7
 801b920:	781b      	ldrb	r3, [r3, #0]
 801b922:	009b      	lsls	r3, r3, #2
 801b924:	3301      	adds	r3, #1
 801b926:	00db      	lsls	r3, r3, #3
 801b928:	3301      	adds	r3, #1
 801b92a:	33ff      	adds	r3, #255	; 0xff
 801b92c:	0018      	movs	r0, r3
 801b92e:	f7fd fac5 	bl	8018ebc <WIZCHIP_READ>
 801b932:	1e03      	subs	r3, r0, #0
 801b934:	d1f3      	bne.n	801b91e <recv+0x1a6>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801b936:	1d3b      	adds	r3, r7, #4
 801b938:	881b      	ldrh	r3, [r3, #0]
}
 801b93a:	0018      	movs	r0, r3
 801b93c:	46bd      	mov	sp, r7
 801b93e:	b005      	add	sp, #20
 801b940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b942:	46c0      	nop			; (mov r8, r8)
 801b944:	20007b02 	.word	0x20007b02

0801b948 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 801b948:	b5b0      	push	{r4, r5, r7, lr}
 801b94a:	b086      	sub	sp, #24
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	60b9      	str	r1, [r7, #8]
 801b950:	0011      	movs	r1, r2
 801b952:	607b      	str	r3, [r7, #4]
 801b954:	240f      	movs	r4, #15
 801b956:	193b      	adds	r3, r7, r4
 801b958:	1c02      	adds	r2, r0, #0
 801b95a:	701a      	strb	r2, [r3, #0]
 801b95c:	230c      	movs	r3, #12
 801b95e:	18fb      	adds	r3, r7, r3
 801b960:	1c0a      	adds	r2, r1, #0
 801b962:	801a      	strh	r2, [r3, #0]
   uint8_t tmp = 0;
 801b964:	2317      	movs	r3, #23
 801b966:	18fb      	adds	r3, r7, r3
 801b968:	2200      	movs	r2, #0
 801b96a:	701a      	strb	r2, [r3, #0]
   uint16_t freesize = 0;
 801b96c:	2314      	movs	r3, #20
 801b96e:	18fb      	adds	r3, r7, r3
 801b970:	2200      	movs	r2, #0
 801b972:	801a      	strh	r2, [r3, #0]
   uint32_t taddr;

   CHECK_SOCKNUM();
 801b974:	193b      	adds	r3, r7, r4
 801b976:	781b      	ldrb	r3, [r3, #0]
 801b978:	2b08      	cmp	r3, #8
 801b97a:	d902      	bls.n	801b982 <sendto+0x3a>
 801b97c:	2301      	movs	r3, #1
 801b97e:	425b      	negs	r3, r3
 801b980:	e16f      	b.n	801bc62 <sendto+0x31a>
   switch(getSn_MR(sn) & 0x0F)
 801b982:	230f      	movs	r3, #15
 801b984:	18fb      	adds	r3, r7, r3
 801b986:	781b      	ldrb	r3, [r3, #0]
 801b988:	009b      	lsls	r3, r3, #2
 801b98a:	3301      	adds	r3, #1
 801b98c:	00db      	lsls	r3, r3, #3
 801b98e:	0018      	movs	r0, r3
 801b990:	f7fd fa94 	bl	8018ebc <WIZCHIP_READ>
 801b994:	0003      	movs	r3, r0
 801b996:	001a      	movs	r2, r3
 801b998:	230f      	movs	r3, #15
 801b99a:	4013      	ands	r3, r2
 801b99c:	3b02      	subs	r3, #2
 801b99e:	2b02      	cmp	r3, #2
 801b9a0:	d902      	bls.n	801b9a8 <sendto+0x60>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 801b9a2:	2305      	movs	r3, #5
 801b9a4:	425b      	negs	r3, r3
 801b9a6:	e15c      	b.n	801bc62 <sendto+0x31a>
         break;
 801b9a8:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 801b9aa:	230c      	movs	r3, #12
 801b9ac:	18fb      	adds	r3, r7, r3
 801b9ae:	881b      	ldrh	r3, [r3, #0]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d102      	bne.n	801b9ba <sendto+0x72>
 801b9b4:	230e      	movs	r3, #14
 801b9b6:	425b      	negs	r3, r3
 801b9b8:	e153      	b.n	801bc62 <sendto+0x31a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	781b      	ldrb	r3, [r3, #0]
 801b9be:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801b9c0:	693b      	ldr	r3, [r7, #16]
 801b9c2:	021b      	lsls	r3, r3, #8
 801b9c4:	687a      	ldr	r2, [r7, #4]
 801b9c6:	3201      	adds	r2, #1
 801b9c8:	7812      	ldrb	r2, [r2, #0]
 801b9ca:	189b      	adds	r3, r3, r2
 801b9cc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801b9ce:	693b      	ldr	r3, [r7, #16]
 801b9d0:	021b      	lsls	r3, r3, #8
 801b9d2:	687a      	ldr	r2, [r7, #4]
 801b9d4:	3202      	adds	r2, #2
 801b9d6:	7812      	ldrb	r2, [r2, #0]
 801b9d8:	189b      	adds	r3, r3, r2
 801b9da:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801b9dc:	693b      	ldr	r3, [r7, #16]
 801b9de:	021b      	lsls	r3, r3, #8
 801b9e0:	687a      	ldr	r2, [r7, #4]
 801b9e2:	3203      	adds	r2, #3
 801b9e4:	7812      	ldrb	r2, [r2, #0]
 801b9e6:	189b      	adds	r3, r3, r2
 801b9e8:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 801b9ea:	693b      	ldr	r3, [r7, #16]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d111      	bne.n	801ba14 <sendto+0xcc>
 801b9f0:	230f      	movs	r3, #15
 801b9f2:	18fb      	adds	r3, r7, r3
 801b9f4:	781b      	ldrb	r3, [r3, #0]
 801b9f6:	009b      	lsls	r3, r3, #2
 801b9f8:	3301      	adds	r3, #1
 801b9fa:	00db      	lsls	r3, r3, #3
 801b9fc:	0018      	movs	r0, r3
 801b9fe:	f7fd fa5d 	bl	8018ebc <WIZCHIP_READ>
 801ba02:	0003      	movs	r3, r0
 801ba04:	001a      	movs	r2, r3
 801ba06:	2304      	movs	r3, #4
 801ba08:	4013      	ands	r3, r2
 801ba0a:	2b04      	cmp	r3, #4
 801ba0c:	d002      	beq.n	801ba14 <sendto+0xcc>
 801ba0e:	230c      	movs	r3, #12
 801ba10:	425b      	negs	r3, r3
 801ba12:	e126      	b.n	801bc62 <sendto+0x31a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 801ba14:	2328      	movs	r3, #40	; 0x28
 801ba16:	18fb      	adds	r3, r7, r3
 801ba18:	881b      	ldrh	r3, [r3, #0]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d111      	bne.n	801ba42 <sendto+0xfa>
 801ba1e:	230f      	movs	r3, #15
 801ba20:	18fb      	adds	r3, r7, r3
 801ba22:	781b      	ldrb	r3, [r3, #0]
 801ba24:	009b      	lsls	r3, r3, #2
 801ba26:	3301      	adds	r3, #1
 801ba28:	00db      	lsls	r3, r3, #3
 801ba2a:	0018      	movs	r0, r3
 801ba2c:	f7fd fa46 	bl	8018ebc <WIZCHIP_READ>
 801ba30:	0003      	movs	r3, r0
 801ba32:	001a      	movs	r2, r3
 801ba34:	2304      	movs	r3, #4
 801ba36:	4013      	ands	r3, r2
 801ba38:	2b04      	cmp	r3, #4
 801ba3a:	d002      	beq.n	801ba42 <sendto+0xfa>
 801ba3c:	230b      	movs	r3, #11
 801ba3e:	425b      	negs	r3, r3
 801ba40:	e10f      	b.n	801bc62 <sendto+0x31a>
   tmp = getSn_SR(sn);
 801ba42:	230f      	movs	r3, #15
 801ba44:	18fb      	adds	r3, r7, r3
 801ba46:	781b      	ldrb	r3, [r3, #0]
 801ba48:	009b      	lsls	r3, r3, #2
 801ba4a:	3301      	adds	r3, #1
 801ba4c:	00db      	lsls	r3, r3, #3
 801ba4e:	22c0      	movs	r2, #192	; 0xc0
 801ba50:	0092      	lsls	r2, r2, #2
 801ba52:	4694      	mov	ip, r2
 801ba54:	4463      	add	r3, ip
 801ba56:	2517      	movs	r5, #23
 801ba58:	197c      	adds	r4, r7, r5
 801ba5a:	0018      	movs	r0, r3
 801ba5c:	f7fd fa2e 	bl	8018ebc <WIZCHIP_READ>
 801ba60:	0003      	movs	r3, r0
 801ba62:	7023      	strb	r3, [r4, #0]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 801ba64:	197b      	adds	r3, r7, r5
 801ba66:	781b      	ldrb	r3, [r3, #0]
 801ba68:	2b42      	cmp	r3, #66	; 0x42
 801ba6a:	d00a      	beq.n	801ba82 <sendto+0x13a>
 801ba6c:	197b      	adds	r3, r7, r5
 801ba6e:	781b      	ldrb	r3, [r3, #0]
 801ba70:	2b22      	cmp	r3, #34	; 0x22
 801ba72:	d006      	beq.n	801ba82 <sendto+0x13a>
 801ba74:	197b      	adds	r3, r7, r5
 801ba76:	781b      	ldrb	r3, [r3, #0]
 801ba78:	2b32      	cmp	r3, #50	; 0x32
 801ba7a:	d002      	beq.n	801ba82 <sendto+0x13a>
 801ba7c:	2307      	movs	r3, #7
 801ba7e:	425b      	negs	r3, r3
 801ba80:	e0ef      	b.n	801bc62 <sendto+0x31a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 801ba82:	240f      	movs	r4, #15
 801ba84:	193b      	adds	r3, r7, r4
 801ba86:	781b      	ldrb	r3, [r3, #0]
 801ba88:	009b      	lsls	r3, r3, #2
 801ba8a:	3301      	adds	r3, #1
 801ba8c:	00db      	lsls	r3, r3, #3
 801ba8e:	22c0      	movs	r2, #192	; 0xc0
 801ba90:	0112      	lsls	r2, r2, #4
 801ba92:	4694      	mov	ip, r2
 801ba94:	4463      	add	r3, ip
 801ba96:	0018      	movs	r0, r3
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	2204      	movs	r2, #4
 801ba9c:	0019      	movs	r1, r3
 801ba9e:	f7fd fb23 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 801baa2:	193b      	adds	r3, r7, r4
 801baa4:	781b      	ldrb	r3, [r3, #0]
 801baa6:	009b      	lsls	r3, r3, #2
 801baa8:	3301      	adds	r3, #1
 801baaa:	00db      	lsls	r3, r3, #3
 801baac:	2280      	movs	r2, #128	; 0x80
 801baae:	0152      	lsls	r2, r2, #5
 801bab0:	4694      	mov	ip, r2
 801bab2:	4463      	add	r3, ip
 801bab4:	001a      	movs	r2, r3
 801bab6:	2528      	movs	r5, #40	; 0x28
 801bab8:	197b      	adds	r3, r7, r5
 801baba:	881b      	ldrh	r3, [r3, #0]
 801babc:	0a1b      	lsrs	r3, r3, #8
 801babe:	b29b      	uxth	r3, r3
 801bac0:	b2db      	uxtb	r3, r3
 801bac2:	0019      	movs	r1, r3
 801bac4:	0010      	movs	r0, r2
 801bac6:	f7fd fa4b 	bl	8018f60 <WIZCHIP_WRITE>
 801baca:	193b      	adds	r3, r7, r4
 801bacc:	781b      	ldrb	r3, [r3, #0]
 801bace:	009b      	lsls	r3, r3, #2
 801bad0:	3301      	adds	r3, #1
 801bad2:	00db      	lsls	r3, r3, #3
 801bad4:	2288      	movs	r2, #136	; 0x88
 801bad6:	0152      	lsls	r2, r2, #5
 801bad8:	4694      	mov	ip, r2
 801bada:	4463      	add	r3, ip
 801badc:	001a      	movs	r2, r3
 801bade:	197b      	adds	r3, r7, r5
 801bae0:	881b      	ldrh	r3, [r3, #0]
 801bae2:	b2db      	uxtb	r3, r3
 801bae4:	0019      	movs	r1, r3
 801bae6:	0010      	movs	r0, r2
 801bae8:	f7fd fa3a 	bl	8018f60 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 801baec:	193b      	adds	r3, r7, r4
 801baee:	781b      	ldrb	r3, [r3, #0]
 801baf0:	009b      	lsls	r3, r3, #2
 801baf2:	3301      	adds	r3, #1
 801baf4:	00db      	lsls	r3, r3, #3
 801baf6:	22f8      	movs	r2, #248	; 0xf8
 801baf8:	0152      	lsls	r2, r2, #5
 801bafa:	4694      	mov	ip, r2
 801bafc:	4463      	add	r3, ip
 801bafe:	0018      	movs	r0, r3
 801bb00:	f7fd f9dc 	bl	8018ebc <WIZCHIP_READ>
 801bb04:	0003      	movs	r3, r0
 801bb06:	b29a      	uxth	r2, r3
 801bb08:	2114      	movs	r1, #20
 801bb0a:	187b      	adds	r3, r7, r1
 801bb0c:	0292      	lsls	r2, r2, #10
 801bb0e:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801bb10:	200c      	movs	r0, #12
 801bb12:	183a      	adds	r2, r7, r0
 801bb14:	187b      	adds	r3, r7, r1
 801bb16:	8812      	ldrh	r2, [r2, #0]
 801bb18:	881b      	ldrh	r3, [r3, #0]
 801bb1a:	429a      	cmp	r2, r3
 801bb1c:	d903      	bls.n	801bb26 <sendto+0x1de>
 801bb1e:	183b      	adds	r3, r7, r0
 801bb20:	187a      	adds	r2, r7, r1
 801bb22:	8812      	ldrh	r2, [r2, #0]
 801bb24:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801bb26:	2314      	movs	r3, #20
 801bb28:	18fc      	adds	r4, r7, r3
 801bb2a:	250f      	movs	r5, #15
 801bb2c:	197b      	adds	r3, r7, r5
 801bb2e:	781b      	ldrb	r3, [r3, #0]
 801bb30:	0018      	movs	r0, r3
 801bb32:	f7fd fb47 	bl	80191c4 <getSn_TX_FSR>
 801bb36:	0003      	movs	r3, r0
 801bb38:	8023      	strh	r3, [r4, #0]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801bb3a:	197b      	adds	r3, r7, r5
 801bb3c:	781b      	ldrb	r3, [r3, #0]
 801bb3e:	009b      	lsls	r3, r3, #2
 801bb40:	3301      	adds	r3, #1
 801bb42:	00db      	lsls	r3, r3, #3
 801bb44:	22c0      	movs	r2, #192	; 0xc0
 801bb46:	0092      	lsls	r2, r2, #2
 801bb48:	4694      	mov	ip, r2
 801bb4a:	4463      	add	r3, ip
 801bb4c:	0018      	movs	r0, r3
 801bb4e:	f7fd f9b5 	bl	8018ebc <WIZCHIP_READ>
 801bb52:	1e03      	subs	r3, r0, #0
 801bb54:	d102      	bne.n	801bb5c <sendto+0x214>
 801bb56:	2304      	movs	r3, #4
 801bb58:	425b      	negs	r3, r3
 801bb5a:	e082      	b.n	801bc62 <sendto+0x31a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801bb5c:	4b43      	ldr	r3, [pc, #268]	; (801bc6c <sendto+0x324>)
 801bb5e:	881b      	ldrh	r3, [r3, #0]
 801bb60:	001a      	movs	r2, r3
 801bb62:	230f      	movs	r3, #15
 801bb64:	18fb      	adds	r3, r7, r3
 801bb66:	781b      	ldrb	r3, [r3, #0]
 801bb68:	411a      	asrs	r2, r3
 801bb6a:	0013      	movs	r3, r2
 801bb6c:	2201      	movs	r2, #1
 801bb6e:	4013      	ands	r3, r2
 801bb70:	d009      	beq.n	801bb86 <sendto+0x23e>
 801bb72:	230c      	movs	r3, #12
 801bb74:	18fa      	adds	r2, r7, r3
 801bb76:	2314      	movs	r3, #20
 801bb78:	18fb      	adds	r3, r7, r3
 801bb7a:	8812      	ldrh	r2, [r2, #0]
 801bb7c:	881b      	ldrh	r3, [r3, #0]
 801bb7e:	429a      	cmp	r2, r3
 801bb80:	d901      	bls.n	801bb86 <sendto+0x23e>
 801bb82:	2300      	movs	r3, #0
 801bb84:	e06d      	b.n	801bc62 <sendto+0x31a>
      if(len <= freesize) break;
 801bb86:	230c      	movs	r3, #12
 801bb88:	18fa      	adds	r2, r7, r3
 801bb8a:	2314      	movs	r3, #20
 801bb8c:	18fb      	adds	r3, r7, r3
 801bb8e:	8812      	ldrh	r2, [r2, #0]
 801bb90:	881b      	ldrh	r3, [r3, #0]
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d900      	bls.n	801bb98 <sendto+0x250>
      freesize = getSn_TX_FSR(sn);
 801bb96:	e7c6      	b.n	801bb26 <sendto+0x1de>
      if(len <= freesize) break;
 801bb98:	46c0      	nop			; (mov r8, r8)
   };
	wiz_send_data(sn, buf, len);
 801bb9a:	230c      	movs	r3, #12
 801bb9c:	18fb      	adds	r3, r7, r3
 801bb9e:	881a      	ldrh	r2, [r3, #0]
 801bba0:	68b9      	ldr	r1, [r7, #8]
 801bba2:	240f      	movs	r4, #15
 801bba4:	193b      	adds	r3, r7, r4
 801bba6:	781b      	ldrb	r3, [r3, #0]
 801bba8:	0018      	movs	r0, r3
 801bbaa:	f7fd fbe3 	bl	8019374 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 801bbae:	193b      	adds	r3, r7, r4
 801bbb0:	781b      	ldrb	r3, [r3, #0]
 801bbb2:	009b      	lsls	r3, r3, #2
 801bbb4:	3301      	adds	r3, #1
 801bbb6:	00db      	lsls	r3, r3, #3
 801bbb8:	3301      	adds	r3, #1
 801bbba:	33ff      	adds	r3, #255	; 0xff
 801bbbc:	2120      	movs	r1, #32
 801bbbe:	0018      	movs	r0, r3
 801bbc0:	f7fd f9ce 	bl	8018f60 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801bbc4:	46c0      	nop			; (mov r8, r8)
 801bbc6:	230f      	movs	r3, #15
 801bbc8:	18fb      	adds	r3, r7, r3
 801bbca:	781b      	ldrb	r3, [r3, #0]
 801bbcc:	009b      	lsls	r3, r3, #2
 801bbce:	3301      	adds	r3, #1
 801bbd0:	00db      	lsls	r3, r3, #3
 801bbd2:	3301      	adds	r3, #1
 801bbd4:	33ff      	adds	r3, #255	; 0xff
 801bbd6:	0018      	movs	r0, r3
 801bbd8:	f7fd f970 	bl	8018ebc <WIZCHIP_READ>
 801bbdc:	1e03      	subs	r3, r0, #0
 801bbde:	d1f2      	bne.n	801bbc6 <sendto+0x27e>
   while(1)
   {
      tmp = getSn_IR(sn);
 801bbe0:	240f      	movs	r4, #15
 801bbe2:	193b      	adds	r3, r7, r4
 801bbe4:	781b      	ldrb	r3, [r3, #0]
 801bbe6:	009b      	lsls	r3, r3, #2
 801bbe8:	3301      	adds	r3, #1
 801bbea:	00db      	lsls	r3, r3, #3
 801bbec:	2280      	movs	r2, #128	; 0x80
 801bbee:	0092      	lsls	r2, r2, #2
 801bbf0:	4694      	mov	ip, r2
 801bbf2:	4463      	add	r3, ip
 801bbf4:	0018      	movs	r0, r3
 801bbf6:	f7fd f961 	bl	8018ebc <WIZCHIP_READ>
 801bbfa:	0003      	movs	r3, r0
 801bbfc:	0019      	movs	r1, r3
 801bbfe:	2017      	movs	r0, #23
 801bc00:	183b      	adds	r3, r7, r0
 801bc02:	221f      	movs	r2, #31
 801bc04:	400a      	ands	r2, r1
 801bc06:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 801bc08:	183b      	adds	r3, r7, r0
 801bc0a:	781b      	ldrb	r3, [r3, #0]
 801bc0c:	2210      	movs	r2, #16
 801bc0e:	4013      	ands	r3, r2
 801bc10:	d011      	beq.n	801bc36 <sendto+0x2ee>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 801bc12:	193b      	adds	r3, r7, r4
 801bc14:	781b      	ldrb	r3, [r3, #0]
 801bc16:	009b      	lsls	r3, r3, #2
 801bc18:	3301      	adds	r3, #1
 801bc1a:	00db      	lsls	r3, r3, #3
 801bc1c:	2280      	movs	r2, #128	; 0x80
 801bc1e:	0092      	lsls	r2, r2, #2
 801bc20:	4694      	mov	ip, r2
 801bc22:	4463      	add	r3, ip
 801bc24:	2110      	movs	r1, #16
 801bc26:	0018      	movs	r0, r3
 801bc28:	f7fd f99a 	bl	8018f60 <WIZCHIP_WRITE>
         break;
 801bc2c:	46c0      	nop			; (mov r8, r8)
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801bc2e:	230c      	movs	r3, #12
 801bc30:	18fb      	adds	r3, r7, r3
 801bc32:	881b      	ldrh	r3, [r3, #0]
 801bc34:	e015      	b.n	801bc62 <sendto+0x31a>
      else if(tmp & Sn_IR_TIMEOUT)
 801bc36:	2317      	movs	r3, #23
 801bc38:	18fb      	adds	r3, r7, r3
 801bc3a:	781b      	ldrb	r3, [r3, #0]
 801bc3c:	2208      	movs	r2, #8
 801bc3e:	4013      	ands	r3, r2
 801bc40:	d0ce      	beq.n	801bbe0 <sendto+0x298>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 801bc42:	230f      	movs	r3, #15
 801bc44:	18fb      	adds	r3, r7, r3
 801bc46:	781b      	ldrb	r3, [r3, #0]
 801bc48:	009b      	lsls	r3, r3, #2
 801bc4a:	3301      	adds	r3, #1
 801bc4c:	00db      	lsls	r3, r3, #3
 801bc4e:	2280      	movs	r2, #128	; 0x80
 801bc50:	0092      	lsls	r2, r2, #2
 801bc52:	4694      	mov	ip, r2
 801bc54:	4463      	add	r3, ip
 801bc56:	2108      	movs	r1, #8
 801bc58:	0018      	movs	r0, r3
 801bc5a:	f7fd f981 	bl	8018f60 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 801bc5e:	230d      	movs	r3, #13
 801bc60:	425b      	negs	r3, r3
}
 801bc62:	0018      	movs	r0, r3
 801bc64:	46bd      	mov	sp, r7
 801bc66:	b006      	add	sp, #24
 801bc68:	bdb0      	pop	{r4, r5, r7, pc}
 801bc6a:	46c0      	nop			; (mov r8, r8)
 801bc6c:	20007b02 	.word	0x20007b02

0801bc70 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 801bc70:	b5b0      	push	{r4, r5, r7, lr}
 801bc72:	b088      	sub	sp, #32
 801bc74:	af00      	add	r7, sp, #0
 801bc76:	60b9      	str	r1, [r7, #8]
 801bc78:	0011      	movs	r1, r2
 801bc7a:	607b      	str	r3, [r7, #4]
 801bc7c:	240f      	movs	r4, #15
 801bc7e:	193b      	adds	r3, r7, r4
 801bc80:	1c02      	adds	r2, r0, #0
 801bc82:	701a      	strb	r2, [r3, #0]
 801bc84:	230c      	movs	r3, #12
 801bc86:	18fb      	adds	r3, r7, r3
 801bc88:	1c0a      	adds	r2, r1, #0
 801bc8a:	801a      	strh	r2, [r3, #0]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 801bc8c:	231e      	movs	r3, #30
 801bc8e:	18fb      	adds	r3, r7, r3
 801bc90:	2200      	movs	r2, #0
 801bc92:	801a      	strh	r2, [r3, #0]

   CHECK_SOCKNUM();
 801bc94:	193b      	adds	r3, r7, r4
 801bc96:	781b      	ldrb	r3, [r3, #0]
 801bc98:	2b08      	cmp	r3, #8
 801bc9a:	d902      	bls.n	801bca2 <recvfrom+0x32>
 801bc9c:	2301      	movs	r3, #1
 801bc9e:	425b      	negs	r3, r3
 801bca0:	e270      	b.n	801c184 <recvfrom+0x514>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 801bca2:	230f      	movs	r3, #15
 801bca4:	18fb      	adds	r3, r7, r3
 801bca6:	781b      	ldrb	r3, [r3, #0]
 801bca8:	009b      	lsls	r3, r3, #2
 801bcaa:	3301      	adds	r3, #1
 801bcac:	00db      	lsls	r3, r3, #3
 801bcae:	251d      	movs	r5, #29
 801bcb0:	197c      	adds	r4, r7, r5
 801bcb2:	0018      	movs	r0, r3
 801bcb4:	f7fd f902 	bl	8018ebc <WIZCHIP_READ>
 801bcb8:	0003      	movs	r3, r0
 801bcba:	7023      	strb	r3, [r4, #0]
 801bcbc:	197b      	adds	r3, r7, r5
 801bcbe:	781b      	ldrb	r3, [r3, #0]
 801bcc0:	220f      	movs	r2, #15
 801bcc2:	4013      	ands	r3, r2
 801bcc4:	3b02      	subs	r3, #2
 801bcc6:	2b02      	cmp	r3, #2
 801bcc8:	d902      	bls.n	801bcd0 <recvfrom+0x60>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 801bcca:	2305      	movs	r3, #5
 801bccc:	425b      	negs	r3, r3
 801bcce:	e259      	b.n	801c184 <recvfrom+0x514>
         break;
 801bcd0:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 801bcd2:	230c      	movs	r3, #12
 801bcd4:	18fb      	adds	r3, r7, r3
 801bcd6:	881b      	ldrh	r3, [r3, #0]
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d102      	bne.n	801bce2 <recvfrom+0x72>
 801bcdc:	230e      	movs	r3, #14
 801bcde:	425b      	negs	r3, r3
 801bce0:	e250      	b.n	801c184 <recvfrom+0x514>
   if(sock_remained_size[sn] == 0)
 801bce2:	230f      	movs	r3, #15
 801bce4:	18fb      	adds	r3, r7, r3
 801bce6:	781a      	ldrb	r2, [r3, #0]
 801bce8:	4bb4      	ldr	r3, [pc, #720]	; (801bfbc <recvfrom+0x34c>)
 801bcea:	0052      	lsls	r2, r2, #1
 801bcec:	5ad3      	ldrh	r3, [r2, r3]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d133      	bne.n	801bd5a <recvfrom+0xea>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 801bcf2:	231e      	movs	r3, #30
 801bcf4:	18fc      	adds	r4, r7, r3
 801bcf6:	250f      	movs	r5, #15
 801bcf8:	197b      	adds	r3, r7, r5
 801bcfa:	781b      	ldrb	r3, [r3, #0]
 801bcfc:	0018      	movs	r0, r3
 801bcfe:	f7fd facd 	bl	801929c <getSn_RX_RSR>
 801bd02:	0003      	movs	r3, r0
 801bd04:	8023      	strh	r3, [r4, #0]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801bd06:	197b      	adds	r3, r7, r5
 801bd08:	781b      	ldrb	r3, [r3, #0]
 801bd0a:	009b      	lsls	r3, r3, #2
 801bd0c:	3301      	adds	r3, #1
 801bd0e:	00db      	lsls	r3, r3, #3
 801bd10:	22c0      	movs	r2, #192	; 0xc0
 801bd12:	0092      	lsls	r2, r2, #2
 801bd14:	4694      	mov	ip, r2
 801bd16:	4463      	add	r3, ip
 801bd18:	0018      	movs	r0, r3
 801bd1a:	f7fd f8cf 	bl	8018ebc <WIZCHIP_READ>
 801bd1e:	1e03      	subs	r3, r0, #0
 801bd20:	d102      	bne.n	801bd28 <recvfrom+0xb8>
 801bd22:	2304      	movs	r3, #4
 801bd24:	425b      	negs	r3, r3
 801bd26:	e22d      	b.n	801c184 <recvfrom+0x514>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 801bd28:	4ba5      	ldr	r3, [pc, #660]	; (801bfc0 <recvfrom+0x350>)
 801bd2a:	881b      	ldrh	r3, [r3, #0]
 801bd2c:	001a      	movs	r2, r3
 801bd2e:	230f      	movs	r3, #15
 801bd30:	18fb      	adds	r3, r7, r3
 801bd32:	781b      	ldrb	r3, [r3, #0]
 801bd34:	411a      	asrs	r2, r3
 801bd36:	0013      	movs	r3, r2
 801bd38:	2201      	movs	r2, #1
 801bd3a:	4013      	ands	r3, r2
 801bd3c:	d006      	beq.n	801bd4c <recvfrom+0xdc>
 801bd3e:	231e      	movs	r3, #30
 801bd40:	18fb      	adds	r3, r7, r3
 801bd42:	881b      	ldrh	r3, [r3, #0]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d101      	bne.n	801bd4c <recvfrom+0xdc>
 801bd48:	2300      	movs	r3, #0
 801bd4a:	e21b      	b.n	801c184 <recvfrom+0x514>
         if(pack_len != 0) break;
 801bd4c:	231e      	movs	r3, #30
 801bd4e:	18fb      	adds	r3, r7, r3
 801bd50:	881b      	ldrh	r3, [r3, #0]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d100      	bne.n	801bd58 <recvfrom+0xe8>
         pack_len = getSn_RX_RSR(sn);
 801bd56:	e7cc      	b.n	801bcf2 <recvfrom+0x82>
         if(pack_len != 0) break;
 801bd58:	46c0      	nop			; (mov r8, r8)
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 801bd5a:	231d      	movs	r3, #29
 801bd5c:	18fb      	adds	r3, r7, r3
 801bd5e:	781b      	ldrb	r3, [r3, #0]
 801bd60:	2207      	movs	r2, #7
 801bd62:	4013      	ands	r3, r2
 801bd64:	2b04      	cmp	r3, #4
 801bd66:	d100      	bne.n	801bd6a <recvfrom+0xfa>
 801bd68:	e0a7      	b.n	801beba <recvfrom+0x24a>
 801bd6a:	dd00      	ble.n	801bd6e <recvfrom+0xfe>
 801bd6c:	e1b3      	b.n	801c0d6 <recvfrom+0x466>
 801bd6e:	2b02      	cmp	r3, #2
 801bd70:	d003      	beq.n	801bd7a <recvfrom+0x10a>
 801bd72:	2b03      	cmp	r3, #3
 801bd74:	d100      	bne.n	801bd78 <recvfrom+0x108>
 801bd76:	e12d      	b.n	801bfd4 <recvfrom+0x364>
 801bd78:	e1ad      	b.n	801c0d6 <recvfrom+0x466>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 801bd7a:	200f      	movs	r0, #15
 801bd7c:	183b      	adds	r3, r7, r0
 801bd7e:	781a      	ldrb	r2, [r3, #0]
 801bd80:	4b8e      	ldr	r3, [pc, #568]	; (801bfbc <recvfrom+0x34c>)
 801bd82:	0052      	lsls	r2, r2, #1
 801bd84:	5ad3      	ldrh	r3, [r2, r3]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d16d      	bne.n	801be66 <recvfrom+0x1f6>
	      {
   			wiz_recv_data(sn, head, 8);
 801bd8a:	2314      	movs	r3, #20
 801bd8c:	18f9      	adds	r1, r7, r3
 801bd8e:	0004      	movs	r4, r0
 801bd90:	183b      	adds	r3, r7, r0
 801bd92:	781b      	ldrb	r3, [r3, #0]
 801bd94:	2208      	movs	r2, #8
 801bd96:	0018      	movs	r0, r3
 801bd98:	f7fd fb64 	bl	8019464 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 801bd9c:	193b      	adds	r3, r7, r4
 801bd9e:	781b      	ldrb	r3, [r3, #0]
 801bda0:	009b      	lsls	r3, r3, #2
 801bda2:	3301      	adds	r3, #1
 801bda4:	00db      	lsls	r3, r3, #3
 801bda6:	3301      	adds	r3, #1
 801bda8:	33ff      	adds	r3, #255	; 0xff
 801bdaa:	2140      	movs	r1, #64	; 0x40
 801bdac:	0018      	movs	r0, r3
 801bdae:	f7fd f8d7 	bl	8018f60 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801bdb2:	46c0      	nop			; (mov r8, r8)
 801bdb4:	250f      	movs	r5, #15
 801bdb6:	197b      	adds	r3, r7, r5
 801bdb8:	781b      	ldrb	r3, [r3, #0]
 801bdba:	009b      	lsls	r3, r3, #2
 801bdbc:	3301      	adds	r3, #1
 801bdbe:	00db      	lsls	r3, r3, #3
 801bdc0:	3301      	adds	r3, #1
 801bdc2:	33ff      	adds	r3, #255	; 0xff
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	f7fd f879 	bl	8018ebc <WIZCHIP_READ>
 801bdca:	1e03      	subs	r3, r0, #0
 801bdcc:	d1f2      	bne.n	801bdb4 <recvfrom+0x144>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 801bdce:	2414      	movs	r4, #20
 801bdd0:	193b      	adds	r3, r7, r4
 801bdd2:	781a      	ldrb	r2, [r3, #0]
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	3301      	adds	r3, #1
 801bddc:	193a      	adds	r2, r7, r4
 801bdde:	7852      	ldrb	r2, [r2, #1]
 801bde0:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	3302      	adds	r3, #2
 801bde6:	193a      	adds	r2, r7, r4
 801bde8:	7892      	ldrb	r2, [r2, #2]
 801bdea:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	3303      	adds	r3, #3
 801bdf0:	193a      	adds	r2, r7, r4
 801bdf2:	78d2      	ldrb	r2, [r2, #3]
 801bdf4:	701a      	strb	r2, [r3, #0]
      			printf("ip : %d\r\n", (int)addr[2]);
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	3302      	adds	r3, #2
 801bdfa:	781b      	ldrb	r3, [r3, #0]
 801bdfc:	001a      	movs	r2, r3
 801bdfe:	4b71      	ldr	r3, [pc, #452]	; (801bfc4 <recvfrom+0x354>)
 801be00:	0011      	movs	r1, r2
 801be02:	0018      	movs	r0, r3
 801be04:	f006 fd06 	bl	8022814 <iprintf>
      			*port = head[4];
 801be08:	0020      	movs	r0, r4
 801be0a:	183b      	adds	r3, r7, r0
 801be0c:	791b      	ldrb	r3, [r3, #4]
 801be0e:	b29a      	uxth	r2, r3
 801be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be12:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 801be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be16:	881b      	ldrh	r3, [r3, #0]
 801be18:	021b      	lsls	r3, r3, #8
 801be1a:	b29a      	uxth	r2, r3
 801be1c:	183b      	adds	r3, r7, r0
 801be1e:	795b      	ldrb	r3, [r3, #5]
 801be20:	b29b      	uxth	r3, r3
 801be22:	18d3      	adds	r3, r2, r3
 801be24:	b29a      	uxth	r2, r3
 801be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be28:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 801be2a:	183b      	adds	r3, r7, r0
 801be2c:	7999      	ldrb	r1, [r3, #6]
 801be2e:	197b      	adds	r3, r7, r5
 801be30:	781a      	ldrb	r2, [r3, #0]
 801be32:	b289      	uxth	r1, r1
 801be34:	4b61      	ldr	r3, [pc, #388]	; (801bfbc <recvfrom+0x34c>)
 801be36:	0052      	lsls	r2, r2, #1
 801be38:	52d1      	strh	r1, [r2, r3]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 801be3a:	197b      	adds	r3, r7, r5
 801be3c:	781a      	ldrb	r2, [r3, #0]
 801be3e:	4b5f      	ldr	r3, [pc, #380]	; (801bfbc <recvfrom+0x34c>)
 801be40:	0052      	lsls	r2, r2, #1
 801be42:	5ad3      	ldrh	r3, [r2, r3]
 801be44:	021b      	lsls	r3, r3, #8
 801be46:	b299      	uxth	r1, r3
 801be48:	183b      	adds	r3, r7, r0
 801be4a:	79db      	ldrb	r3, [r3, #7]
 801be4c:	b29b      	uxth	r3, r3
 801be4e:	197a      	adds	r2, r7, r5
 801be50:	7812      	ldrb	r2, [r2, #0]
 801be52:	18cb      	adds	r3, r1, r3
 801be54:	b299      	uxth	r1, r3
 801be56:	4b59      	ldr	r3, [pc, #356]	; (801bfbc <recvfrom+0x34c>)
 801be58:	0052      	lsls	r2, r2, #1
 801be5a:	52d1      	strh	r1, [r2, r3]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 801be5c:	197b      	adds	r3, r7, r5
 801be5e:	781b      	ldrb	r3, [r3, #0]
 801be60:	4a59      	ldr	r2, [pc, #356]	; (801bfc8 <recvfrom+0x358>)
 801be62:	2180      	movs	r1, #128	; 0x80
 801be64:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 801be66:	230f      	movs	r3, #15
 801be68:	18fb      	adds	r3, r7, r3
 801be6a:	781a      	ldrb	r2, [r3, #0]
 801be6c:	4b53      	ldr	r3, [pc, #332]	; (801bfbc <recvfrom+0x34c>)
 801be6e:	0052      	lsls	r2, r2, #1
 801be70:	5ad3      	ldrh	r3, [r2, r3]
 801be72:	210c      	movs	r1, #12
 801be74:	187a      	adds	r2, r7, r1
 801be76:	8812      	ldrh	r2, [r2, #0]
 801be78:	429a      	cmp	r2, r3
 801be7a:	d205      	bcs.n	801be88 <recvfrom+0x218>
 801be7c:	231e      	movs	r3, #30
 801be7e:	18fb      	adds	r3, r7, r3
 801be80:	187a      	adds	r2, r7, r1
 801be82:	8812      	ldrh	r2, [r2, #0]
 801be84:	801a      	strh	r2, [r3, #0]
 801be86:	e008      	b.n	801be9a <recvfrom+0x22a>
			else pack_len = sock_remained_size[sn];
 801be88:	230f      	movs	r3, #15
 801be8a:	18fb      	adds	r3, r7, r3
 801be8c:	7819      	ldrb	r1, [r3, #0]
 801be8e:	231e      	movs	r3, #30
 801be90:	18fb      	adds	r3, r7, r3
 801be92:	4a4a      	ldr	r2, [pc, #296]	; (801bfbc <recvfrom+0x34c>)
 801be94:	0049      	lsls	r1, r1, #1
 801be96:	5a8a      	ldrh	r2, [r1, r2]
 801be98:	801a      	strh	r2, [r3, #0]
			//A20150601 : For W5300
			len = pack_len;
 801be9a:	230c      	movs	r3, #12
 801be9c:	18fb      	adds	r3, r7, r3
 801be9e:	211e      	movs	r1, #30
 801bea0:	187a      	adds	r2, r7, r1
 801bea2:	8812      	ldrh	r2, [r2, #0]
 801bea4:	801a      	strh	r2, [r3, #0]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 801bea6:	187b      	adds	r3, r7, r1
 801bea8:	881a      	ldrh	r2, [r3, #0]
 801beaa:	68b9      	ldr	r1, [r7, #8]
 801beac:	230f      	movs	r3, #15
 801beae:	18fb      	adds	r3, r7, r3
 801beb0:	781b      	ldrb	r3, [r3, #0]
 801beb2:	0018      	movs	r0, r3
 801beb4:	f7fd fad6 	bl	8019464 <wiz_recv_data>

			break;
 801beb8:	e11f      	b.n	801c0fa <recvfrom+0x48a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 801beba:	200f      	movs	r0, #15
 801bebc:	183b      	adds	r3, r7, r0
 801bebe:	781a      	ldrb	r2, [r3, #0]
 801bec0:	4b3e      	ldr	r3, [pc, #248]	; (801bfbc <recvfrom+0x34c>)
 801bec2:	0052      	lsls	r2, r2, #1
 801bec4:	5ad3      	ldrh	r3, [r2, r3]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d152      	bne.n	801bf70 <recvfrom+0x300>
	      {
   			wiz_recv_data(sn, head, 2);
 801beca:	2314      	movs	r3, #20
 801becc:	18f9      	adds	r1, r7, r3
 801bece:	0004      	movs	r4, r0
 801bed0:	183b      	adds	r3, r7, r0
 801bed2:	781b      	ldrb	r3, [r3, #0]
 801bed4:	2202      	movs	r2, #2
 801bed6:	0018      	movs	r0, r3
 801bed8:	f7fd fac4 	bl	8019464 <wiz_recv_data>

   			setSn_CR(sn,Sn_CR_RECV);
 801bedc:	193b      	adds	r3, r7, r4
 801bede:	781b      	ldrb	r3, [r3, #0]
 801bee0:	009b      	lsls	r3, r3, #2
 801bee2:	3301      	adds	r3, #1
 801bee4:	00db      	lsls	r3, r3, #3
 801bee6:	3301      	adds	r3, #1
 801bee8:	33ff      	adds	r3, #255	; 0xff
 801beea:	2140      	movs	r1, #64	; 0x40
 801beec:	0018      	movs	r0, r3
 801beee:	f7fd f837 	bl	8018f60 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801bef2:	46c0      	nop			; (mov r8, r8)
 801bef4:	240f      	movs	r4, #15
 801bef6:	193b      	adds	r3, r7, r4
 801bef8:	781b      	ldrb	r3, [r3, #0]
 801befa:	009b      	lsls	r3, r3, #2
 801befc:	3301      	adds	r3, #1
 801befe:	00db      	lsls	r3, r3, #3
 801bf00:	3301      	adds	r3, #1
 801bf02:	33ff      	adds	r3, #255	; 0xff
 801bf04:	0018      	movs	r0, r3
 801bf06:	f7fc ffd9 	bl	8018ebc <WIZCHIP_READ>
 801bf0a:	1e03      	subs	r3, r0, #0
 801bf0c:	d1f2      	bne.n	801bef4 <recvfrom+0x284>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 801bf0e:	2014      	movs	r0, #20
 801bf10:	183b      	adds	r3, r7, r0
 801bf12:	7819      	ldrb	r1, [r3, #0]
 801bf14:	193b      	adds	r3, r7, r4
 801bf16:	781a      	ldrb	r2, [r3, #0]
 801bf18:	b289      	uxth	r1, r1
 801bf1a:	4b28      	ldr	r3, [pc, #160]	; (801bfbc <recvfrom+0x34c>)
 801bf1c:	0052      	lsls	r2, r2, #1
 801bf1e:	52d1      	strh	r1, [r2, r3]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 801bf20:	193b      	adds	r3, r7, r4
 801bf22:	781a      	ldrb	r2, [r3, #0]
 801bf24:	4b25      	ldr	r3, [pc, #148]	; (801bfbc <recvfrom+0x34c>)
 801bf26:	0052      	lsls	r2, r2, #1
 801bf28:	5ad3      	ldrh	r3, [r2, r3]
 801bf2a:	021b      	lsls	r3, r3, #8
 801bf2c:	b29a      	uxth	r2, r3
 801bf2e:	183b      	adds	r3, r7, r0
 801bf30:	785b      	ldrb	r3, [r3, #1]
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	18d3      	adds	r3, r2, r3
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	193a      	adds	r2, r7, r4
 801bf3a:	7812      	ldrb	r2, [r2, #0]
 801bf3c:	3b02      	subs	r3, #2
 801bf3e:	b299      	uxth	r1, r3
 801bf40:	4b1e      	ldr	r3, [pc, #120]	; (801bfbc <recvfrom+0x34c>)
 801bf42:	0052      	lsls	r2, r2, #1
 801bf44:	52d1      	strh	r1, [r2, r3]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 801bf46:	193b      	adds	r3, r7, r4
 801bf48:	781a      	ldrb	r2, [r3, #0]
 801bf4a:	4b1c      	ldr	r3, [pc, #112]	; (801bfbc <recvfrom+0x34c>)
 801bf4c:	0052      	lsls	r2, r2, #1
 801bf4e:	5ad3      	ldrh	r3, [r2, r3]
 801bf50:	4a1e      	ldr	r2, [pc, #120]	; (801bfcc <recvfrom+0x35c>)
 801bf52:	4293      	cmp	r3, r2
 801bf54:	d906      	bls.n	801bf64 <recvfrom+0x2f4>
   			{
   			   close(sn);
 801bf56:	193b      	adds	r3, r7, r4
 801bf58:	781b      	ldrb	r3, [r3, #0]
 801bf5a:	0018      	movs	r0, r3
 801bf5c:	f7ff f974 	bl	801b248 <close>
   			   return SOCKFATAL_PACKLEN;
 801bf60:	4b1b      	ldr	r3, [pc, #108]	; (801bfd0 <recvfrom+0x360>)
 801bf62:	e10f      	b.n	801c184 <recvfrom+0x514>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 801bf64:	230f      	movs	r3, #15
 801bf66:	18fb      	adds	r3, r7, r3
 801bf68:	781b      	ldrb	r3, [r3, #0]
 801bf6a:	4a17      	ldr	r2, [pc, #92]	; (801bfc8 <recvfrom+0x358>)
 801bf6c:	2180      	movs	r1, #128	; 0x80
 801bf6e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 801bf70:	230f      	movs	r3, #15
 801bf72:	18fb      	adds	r3, r7, r3
 801bf74:	781a      	ldrb	r2, [r3, #0]
 801bf76:	4b11      	ldr	r3, [pc, #68]	; (801bfbc <recvfrom+0x34c>)
 801bf78:	0052      	lsls	r2, r2, #1
 801bf7a:	5ad3      	ldrh	r3, [r2, r3]
 801bf7c:	210c      	movs	r1, #12
 801bf7e:	187a      	adds	r2, r7, r1
 801bf80:	8812      	ldrh	r2, [r2, #0]
 801bf82:	429a      	cmp	r2, r3
 801bf84:	d205      	bcs.n	801bf92 <recvfrom+0x322>
 801bf86:	231e      	movs	r3, #30
 801bf88:	18fb      	adds	r3, r7, r3
 801bf8a:	187a      	adds	r2, r7, r1
 801bf8c:	8812      	ldrh	r2, [r2, #0]
 801bf8e:	801a      	strh	r2, [r3, #0]
 801bf90:	e008      	b.n	801bfa4 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 801bf92:	230f      	movs	r3, #15
 801bf94:	18fb      	adds	r3, r7, r3
 801bf96:	7819      	ldrb	r1, [r3, #0]
 801bf98:	231e      	movs	r3, #30
 801bf9a:	18fb      	adds	r3, r7, r3
 801bf9c:	4a07      	ldr	r2, [pc, #28]	; (801bfbc <recvfrom+0x34c>)
 801bf9e:	0049      	lsls	r1, r1, #1
 801bfa0:	5a8a      	ldrh	r2, [r1, r2]
 801bfa2:	801a      	strh	r2, [r3, #0]
			wiz_recv_data(sn,buf,pack_len);
 801bfa4:	231e      	movs	r3, #30
 801bfa6:	18fb      	adds	r3, r7, r3
 801bfa8:	881a      	ldrh	r2, [r3, #0]
 801bfaa:	68b9      	ldr	r1, [r7, #8]
 801bfac:	230f      	movs	r3, #15
 801bfae:	18fb      	adds	r3, r7, r3
 801bfb0:	781b      	ldrb	r3, [r3, #0]
 801bfb2:	0018      	movs	r0, r3
 801bfb4:	f7fd fa56 	bl	8019464 <wiz_recv_data>
		   break;
 801bfb8:	e09f      	b.n	801c0fa <recvfrom+0x48a>
 801bfba:	46c0      	nop			; (mov r8, r8)
 801bfbc:	20007b08 	.word	0x20007b08
 801bfc0:	20007b02 	.word	0x20007b02
 801bfc4:	08030cfc 	.word	0x08030cfc
 801bfc8:	20007b18 	.word	0x20007b18
 801bfcc:	000005ea 	.word	0x000005ea
 801bfd0:	fffffc17 	.word	0xfffffc17
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 801bfd4:	200f      	movs	r0, #15
 801bfd6:	183b      	adds	r3, r7, r0
 801bfd8:	781a      	ldrb	r2, [r3, #0]
 801bfda:	4b6c      	ldr	r3, [pc, #432]	; (801c18c <recvfrom+0x51c>)
 801bfdc:	0052      	lsls	r2, r2, #1
 801bfde:	5ad3      	ldrh	r3, [r2, r3]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d153      	bne.n	801c08c <recvfrom+0x41c>
		   {
   			wiz_recv_data(sn, head, 6);
 801bfe4:	2314      	movs	r3, #20
 801bfe6:	18f9      	adds	r1, r7, r3
 801bfe8:	0004      	movs	r4, r0
 801bfea:	183b      	adds	r3, r7, r0
 801bfec:	781b      	ldrb	r3, [r3, #0]
 801bfee:	2206      	movs	r2, #6
 801bff0:	0018      	movs	r0, r3
 801bff2:	f7fd fa37 	bl	8019464 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 801bff6:	193b      	adds	r3, r7, r4
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	009b      	lsls	r3, r3, #2
 801bffc:	3301      	adds	r3, #1
 801bffe:	00db      	lsls	r3, r3, #3
 801c000:	3301      	adds	r3, #1
 801c002:	33ff      	adds	r3, #255	; 0xff
 801c004:	2140      	movs	r1, #64	; 0x40
 801c006:	0018      	movs	r0, r3
 801c008:	f7fc ffaa 	bl	8018f60 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801c00c:	46c0      	nop			; (mov r8, r8)
 801c00e:	240f      	movs	r4, #15
 801c010:	193b      	adds	r3, r7, r4
 801c012:	781b      	ldrb	r3, [r3, #0]
 801c014:	009b      	lsls	r3, r3, #2
 801c016:	3301      	adds	r3, #1
 801c018:	00db      	lsls	r3, r3, #3
 801c01a:	3301      	adds	r3, #1
 801c01c:	33ff      	adds	r3, #255	; 0xff
 801c01e:	0018      	movs	r0, r3
 801c020:	f7fc ff4c 	bl	8018ebc <WIZCHIP_READ>
 801c024:	1e03      	subs	r3, r0, #0
 801c026:	d1f2      	bne.n	801c00e <recvfrom+0x39e>
   			addr[0] = head[0];
 801c028:	2014      	movs	r0, #20
 801c02a:	183b      	adds	r3, r7, r0
 801c02c:	781a      	ldrb	r2, [r3, #0]
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	3301      	adds	r3, #1
 801c036:	183a      	adds	r2, r7, r0
 801c038:	7852      	ldrb	r2, [r2, #1]
 801c03a:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	3302      	adds	r3, #2
 801c040:	183a      	adds	r2, r7, r0
 801c042:	7892      	ldrb	r2, [r2, #2]
 801c044:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	3303      	adds	r3, #3
 801c04a:	183a      	adds	r2, r7, r0
 801c04c:	78d2      	ldrb	r2, [r2, #3]
 801c04e:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 801c050:	183b      	adds	r3, r7, r0
 801c052:	7919      	ldrb	r1, [r3, #4]
 801c054:	193b      	adds	r3, r7, r4
 801c056:	781a      	ldrb	r2, [r3, #0]
 801c058:	b289      	uxth	r1, r1
 801c05a:	4b4c      	ldr	r3, [pc, #304]	; (801c18c <recvfrom+0x51c>)
 801c05c:	0052      	lsls	r2, r2, #1
 801c05e:	52d1      	strh	r1, [r2, r3]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 801c060:	193b      	adds	r3, r7, r4
 801c062:	781a      	ldrb	r2, [r3, #0]
 801c064:	4b49      	ldr	r3, [pc, #292]	; (801c18c <recvfrom+0x51c>)
 801c066:	0052      	lsls	r2, r2, #1
 801c068:	5ad3      	ldrh	r3, [r2, r3]
 801c06a:	021b      	lsls	r3, r3, #8
 801c06c:	b299      	uxth	r1, r3
 801c06e:	183b      	adds	r3, r7, r0
 801c070:	795b      	ldrb	r3, [r3, #5]
 801c072:	b29b      	uxth	r3, r3
 801c074:	193a      	adds	r2, r7, r4
 801c076:	7812      	ldrb	r2, [r2, #0]
 801c078:	18cb      	adds	r3, r1, r3
 801c07a:	b299      	uxth	r1, r3
 801c07c:	4b43      	ldr	r3, [pc, #268]	; (801c18c <recvfrom+0x51c>)
 801c07e:	0052      	lsls	r2, r2, #1
 801c080:	52d1      	strh	r1, [r2, r3]
   			sock_pack_info[sn] = PACK_FIRST;
 801c082:	193b      	adds	r3, r7, r4
 801c084:	781b      	ldrb	r3, [r3, #0]
 801c086:	4a42      	ldr	r2, [pc, #264]	; (801c190 <recvfrom+0x520>)
 801c088:	2180      	movs	r1, #128	; 0x80
 801c08a:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 801c08c:	230f      	movs	r3, #15
 801c08e:	18fb      	adds	r3, r7, r3
 801c090:	781a      	ldrb	r2, [r3, #0]
 801c092:	4b3e      	ldr	r3, [pc, #248]	; (801c18c <recvfrom+0x51c>)
 801c094:	0052      	lsls	r2, r2, #1
 801c096:	5ad3      	ldrh	r3, [r2, r3]
 801c098:	210c      	movs	r1, #12
 801c09a:	187a      	adds	r2, r7, r1
 801c09c:	8812      	ldrh	r2, [r2, #0]
 801c09e:	429a      	cmp	r2, r3
 801c0a0:	d205      	bcs.n	801c0ae <recvfrom+0x43e>
 801c0a2:	231e      	movs	r3, #30
 801c0a4:	18fb      	adds	r3, r7, r3
 801c0a6:	187a      	adds	r2, r7, r1
 801c0a8:	8812      	ldrh	r2, [r2, #0]
 801c0aa:	801a      	strh	r2, [r3, #0]
 801c0ac:	e008      	b.n	801c0c0 <recvfrom+0x450>
			else pack_len = sock_remained_size[sn];
 801c0ae:	230f      	movs	r3, #15
 801c0b0:	18fb      	adds	r3, r7, r3
 801c0b2:	7819      	ldrb	r1, [r3, #0]
 801c0b4:	231e      	movs	r3, #30
 801c0b6:	18fb      	adds	r3, r7, r3
 801c0b8:	4a34      	ldr	r2, [pc, #208]	; (801c18c <recvfrom+0x51c>)
 801c0ba:	0049      	lsls	r1, r1, #1
 801c0bc:	5a8a      	ldrh	r2, [r1, r2]
 801c0be:	801a      	strh	r2, [r3, #0]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 801c0c0:	231e      	movs	r3, #30
 801c0c2:	18fb      	adds	r3, r7, r3
 801c0c4:	881a      	ldrh	r2, [r3, #0]
 801c0c6:	68b9      	ldr	r1, [r7, #8]
 801c0c8:	230f      	movs	r3, #15
 801c0ca:	18fb      	adds	r3, r7, r3
 801c0cc:	781b      	ldrb	r3, [r3, #0]
 801c0ce:	0018      	movs	r0, r3
 801c0d0:	f7fd f9c8 	bl	8019464 <wiz_recv_data>
			break;
 801c0d4:	e011      	b.n	801c0fa <recvfrom+0x48a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 801c0d6:	241e      	movs	r4, #30
 801c0d8:	193b      	adds	r3, r7, r4
 801c0da:	881a      	ldrh	r2, [r3, #0]
 801c0dc:	250f      	movs	r5, #15
 801c0de:	197b      	adds	r3, r7, r5
 801c0e0:	781b      	ldrb	r3, [r3, #0]
 801c0e2:	0011      	movs	r1, r2
 801c0e4:	0018      	movs	r0, r3
 801c0e6:	f7fd fa35 	bl	8019554 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 801c0ea:	197b      	adds	r3, r7, r5
 801c0ec:	781a      	ldrb	r2, [r3, #0]
 801c0ee:	4b27      	ldr	r3, [pc, #156]	; (801c18c <recvfrom+0x51c>)
 801c0f0:	0052      	lsls	r2, r2, #1
 801c0f2:	1939      	adds	r1, r7, r4
 801c0f4:	8809      	ldrh	r1, [r1, #0]
 801c0f6:	52d1      	strh	r1, [r2, r3]
         break;
 801c0f8:	46c0      	nop			; (mov r8, r8)
   }
	setSn_CR(sn,Sn_CR_RECV);
 801c0fa:	230f      	movs	r3, #15
 801c0fc:	18fb      	adds	r3, r7, r3
 801c0fe:	781b      	ldrb	r3, [r3, #0]
 801c100:	009b      	lsls	r3, r3, #2
 801c102:	3301      	adds	r3, #1
 801c104:	00db      	lsls	r3, r3, #3
 801c106:	3301      	adds	r3, #1
 801c108:	33ff      	adds	r3, #255	; 0xff
 801c10a:	2140      	movs	r1, #64	; 0x40
 801c10c:	0018      	movs	r0, r3
 801c10e:	f7fc ff27 	bl	8018f60 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 801c112:	46c0      	nop			; (mov r8, r8)
 801c114:	240f      	movs	r4, #15
 801c116:	193b      	adds	r3, r7, r4
 801c118:	781b      	ldrb	r3, [r3, #0]
 801c11a:	009b      	lsls	r3, r3, #2
 801c11c:	3301      	adds	r3, #1
 801c11e:	00db      	lsls	r3, r3, #3
 801c120:	3301      	adds	r3, #1
 801c122:	33ff      	adds	r3, #255	; 0xff
 801c124:	0018      	movs	r0, r3
 801c126:	f7fc fec9 	bl	8018ebc <WIZCHIP_READ>
 801c12a:	1e03      	subs	r3, r0, #0
 801c12c:	d1f2      	bne.n	801c114 <recvfrom+0x4a4>
	sock_remained_size[sn] -= pack_len;
 801c12e:	193b      	adds	r3, r7, r4
 801c130:	781a      	ldrb	r2, [r3, #0]
 801c132:	4b16      	ldr	r3, [pc, #88]	; (801c18c <recvfrom+0x51c>)
 801c134:	0052      	lsls	r2, r2, #1
 801c136:	5ad1      	ldrh	r1, [r2, r3]
 801c138:	193b      	adds	r3, r7, r4
 801c13a:	781a      	ldrb	r2, [r3, #0]
 801c13c:	231e      	movs	r3, #30
 801c13e:	18fb      	adds	r3, r7, r3
 801c140:	881b      	ldrh	r3, [r3, #0]
 801c142:	1acb      	subs	r3, r1, r3
 801c144:	b299      	uxth	r1, r3
 801c146:	4b11      	ldr	r3, [pc, #68]	; (801c18c <recvfrom+0x51c>)
 801c148:	0052      	lsls	r2, r2, #1
 801c14a:	52d1      	strh	r1, [r2, r3]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 801c14c:	193b      	adds	r3, r7, r4
 801c14e:	781a      	ldrb	r2, [r3, #0]
 801c150:	4b0e      	ldr	r3, [pc, #56]	; (801c18c <recvfrom+0x51c>)
 801c152:	0052      	lsls	r2, r2, #1
 801c154:	5ad3      	ldrh	r3, [r2, r3]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d00b      	beq.n	801c172 <recvfrom+0x502>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 801c15a:	193b      	adds	r3, r7, r4
 801c15c:	781b      	ldrb	r3, [r3, #0]
 801c15e:	4a0c      	ldr	r2, [pc, #48]	; (801c190 <recvfrom+0x520>)
 801c160:	5cd2      	ldrb	r2, [r2, r3]
 801c162:	193b      	adds	r3, r7, r4
 801c164:	781b      	ldrb	r3, [r3, #0]
 801c166:	2101      	movs	r1, #1
 801c168:	430a      	orrs	r2, r1
 801c16a:	b2d1      	uxtb	r1, r2
 801c16c:	4a08      	ldr	r2, [pc, #32]	; (801c190 <recvfrom+0x520>)
 801c16e:	54d1      	strb	r1, [r2, r3]
 801c170:	e005      	b.n	801c17e <recvfrom+0x50e>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 801c172:	230f      	movs	r3, #15
 801c174:	18fb      	adds	r3, r7, r3
 801c176:	781b      	ldrb	r3, [r3, #0]
 801c178:	4a05      	ldr	r2, [pc, #20]	; (801c190 <recvfrom+0x520>)
 801c17a:	2100      	movs	r1, #0
 801c17c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 801c17e:	231e      	movs	r3, #30
 801c180:	18fb      	adds	r3, r7, r3
 801c182:	881b      	ldrh	r3, [r3, #0]

}
 801c184:	0018      	movs	r0, r3
 801c186:	46bd      	mov	sp, r7
 801c188:	b008      	add	sp, #32
 801c18a:	bdb0      	pop	{r4, r5, r7, pc}
 801c18c:	20007b08 	.word	0x20007b08
 801c190:	20007b18 	.word	0x20007b18

0801c194 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 801c194:	b580      	push	{r7, lr}
 801c196:	af00      	add	r7, sp, #0
 801c198:	46c0      	nop			; (mov r8, r8)
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bd80      	pop	{r7, pc}

0801c19e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 801c19e:	b580      	push	{r7, lr}
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	46c0      	nop			; (mov r8, r8)
 801c1a4:	46bd      	mov	sp, r7
 801c1a6:	bd80      	pop	{r7, pc}

0801c1a8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	af00      	add	r7, sp, #0
 801c1ac:	46c0      	nop			; (mov r8, r8)
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	bd80      	pop	{r7, pc}

0801c1b2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 801c1b2:	b580      	push	{r7, lr}
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	46c0      	nop			; (mov r8, r8)
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd80      	pop	{r7, pc}

0801c1bc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 801c1bc:	b580      	push	{r7, lr}
 801c1be:	b082      	sub	sp, #8
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	781b      	ldrb	r3, [r3, #0]
 801c1c8:	b2db      	uxtb	r3, r3
 801c1ca:	0018      	movs	r0, r3
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	b002      	add	sp, #8
 801c1d0:	bd80      	pop	{r7, pc}

0801c1d2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 801c1d2:	b580      	push	{r7, lr}
 801c1d4:	b082      	sub	sp, #8
 801c1d6:	af00      	add	r7, sp, #0
 801c1d8:	6078      	str	r0, [r7, #4]
 801c1da:	000a      	movs	r2, r1
 801c1dc:	1cfb      	adds	r3, r7, #3
 801c1de:	701a      	strb	r2, [r3, #0]
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	1cfa      	adds	r2, r7, #3
 801c1e4:	7812      	ldrb	r2, [r2, #0]
 801c1e6:	701a      	strb	r2, [r3, #0]
 801c1e8:	46c0      	nop			; (mov r8, r8)
 801c1ea:	46bd      	mov	sp, r7
 801c1ec:	b002      	add	sp, #8
 801c1ee:	bd80      	pop	{r7, pc}

0801c1f0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	af00      	add	r7, sp, #0
 801c1f4:	2300      	movs	r3, #0
 801c1f6:	0018      	movs	r0, r3
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	bd80      	pop	{r7, pc}

0801c1fc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b082      	sub	sp, #8
 801c200:	af00      	add	r7, sp, #0
 801c202:	0002      	movs	r2, r0
 801c204:	1dfb      	adds	r3, r7, #7
 801c206:	701a      	strb	r2, [r3, #0]
 801c208:	46c0      	nop			; (mov r8, r8)
 801c20a:	46bd      	mov	sp, r7
 801c20c:	b002      	add	sp, #8
 801c20e:	bd80      	pop	{r7, pc}

0801c210 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 801c210:	b580      	push	{r7, lr}
 801c212:	b082      	sub	sp, #8
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
 801c218:	000a      	movs	r2, r1
 801c21a:	1cbb      	adds	r3, r7, #2
 801c21c:	801a      	strh	r2, [r3, #0]
 801c21e:	46c0      	nop			; (mov r8, r8)
 801c220:	46bd      	mov	sp, r7
 801c222:	b002      	add	sp, #8
 801c224:	bd80      	pop	{r7, pc}

0801c226 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 801c226:	b580      	push	{r7, lr}
 801c228:	b082      	sub	sp, #8
 801c22a:	af00      	add	r7, sp, #0
 801c22c:	6078      	str	r0, [r7, #4]
 801c22e:	000a      	movs	r2, r1
 801c230:	1cbb      	adds	r3, r7, #2
 801c232:	801a      	strh	r2, [r3, #0]
 801c234:	46c0      	nop			; (mov r8, r8)
 801c236:	46bd      	mov	sp, r7
 801c238:	b002      	add	sp, #8
 801c23a:	bd80      	pop	{r7, pc}

0801c23c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b082      	sub	sp, #8
 801c240:	af00      	add	r7, sp, #0
 801c242:	6078      	str	r0, [r7, #4]
 801c244:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d002      	beq.n	801c252 <reg_wizchip_cs_cbfunc+0x16>
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d106      	bne.n	801c260 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 801c252:	4b09      	ldr	r3, [pc, #36]	; (801c278 <reg_wizchip_cs_cbfunc+0x3c>)
 801c254:	4a09      	ldr	r2, [pc, #36]	; (801c27c <reg_wizchip_cs_cbfunc+0x40>)
 801c256:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801c258:	4b07      	ldr	r3, [pc, #28]	; (801c278 <reg_wizchip_cs_cbfunc+0x3c>)
 801c25a:	4a09      	ldr	r2, [pc, #36]	; (801c280 <reg_wizchip_cs_cbfunc+0x44>)
 801c25c:	619a      	str	r2, [r3, #24]
 801c25e:	e006      	b.n	801c26e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 801c260:	4b05      	ldr	r3, [pc, #20]	; (801c278 <reg_wizchip_cs_cbfunc+0x3c>)
 801c262:	687a      	ldr	r2, [r7, #4]
 801c264:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 801c266:	4b04      	ldr	r3, [pc, #16]	; (801c278 <reg_wizchip_cs_cbfunc+0x3c>)
 801c268:	683a      	ldr	r2, [r7, #0]
 801c26a:	619a      	str	r2, [r3, #24]
   }
}
 801c26c:	46c0      	nop			; (mov r8, r8)
 801c26e:	46c0      	nop			; (mov r8, r8)
 801c270:	46bd      	mov	sp, r7
 801c272:	b002      	add	sp, #8
 801c274:	bd80      	pop	{r7, pc}
 801c276:	46c0      	nop			; (mov r8, r8)
 801c278:	20005084 	.word	0x20005084
 801c27c:	0801c1a9 	.word	0x0801c1a9
 801c280:	0801c1b3 	.word	0x0801c1b3

0801c284 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b082      	sub	sp, #8
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
 801c28c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801c28e:	46c0      	nop			; (mov r8, r8)
 801c290:	4b0f      	ldr	r3, [pc, #60]	; (801c2d0 <reg_wizchip_spi_cbfunc+0x4c>)
 801c292:	881b      	ldrh	r3, [r3, #0]
 801c294:	001a      	movs	r2, r3
 801c296:	2380      	movs	r3, #128	; 0x80
 801c298:	009b      	lsls	r3, r3, #2
 801c29a:	4013      	ands	r3, r2
 801c29c:	d0f8      	beq.n	801c290 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d002      	beq.n	801c2aa <reg_wizchip_spi_cbfunc+0x26>
 801c2a4:	683b      	ldr	r3, [r7, #0]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d106      	bne.n	801c2b8 <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801c2aa:	4b09      	ldr	r3, [pc, #36]	; (801c2d0 <reg_wizchip_spi_cbfunc+0x4c>)
 801c2ac:	4a09      	ldr	r2, [pc, #36]	; (801c2d4 <reg_wizchip_spi_cbfunc+0x50>)
 801c2ae:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801c2b0:	4b07      	ldr	r3, [pc, #28]	; (801c2d0 <reg_wizchip_spi_cbfunc+0x4c>)
 801c2b2:	4a09      	ldr	r2, [pc, #36]	; (801c2d8 <reg_wizchip_spi_cbfunc+0x54>)
 801c2b4:	621a      	str	r2, [r3, #32]
 801c2b6:	e006      	b.n	801c2c6 <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801c2b8:	4b05      	ldr	r3, [pc, #20]	; (801c2d0 <reg_wizchip_spi_cbfunc+0x4c>)
 801c2ba:	687a      	ldr	r2, [r7, #4]
 801c2bc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 801c2be:	4b04      	ldr	r3, [pc, #16]	; (801c2d0 <reg_wizchip_spi_cbfunc+0x4c>)
 801c2c0:	683a      	ldr	r2, [r7, #0]
 801c2c2:	621a      	str	r2, [r3, #32]
   }
}
 801c2c4:	46c0      	nop			; (mov r8, r8)
 801c2c6:	46c0      	nop			; (mov r8, r8)
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	b002      	add	sp, #8
 801c2cc:	bd80      	pop	{r7, pc}
 801c2ce:	46c0      	nop			; (mov r8, r8)
 801c2d0:	20005084 	.word	0x20005084
 801c2d4:	0801c1f1 	.word	0x0801c1f1
 801c2d8:	0801c1fd 	.word	0x0801c1fd

0801c2dc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b082      	sub	sp, #8
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
 801c2e4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801c2e6:	46c0      	nop			; (mov r8, r8)
 801c2e8:	4b0f      	ldr	r3, [pc, #60]	; (801c328 <reg_wizchip_spiburst_cbfunc+0x4c>)
 801c2ea:	881b      	ldrh	r3, [r3, #0]
 801c2ec:	001a      	movs	r2, r3
 801c2ee:	2380      	movs	r3, #128	; 0x80
 801c2f0:	009b      	lsls	r3, r3, #2
 801c2f2:	4013      	ands	r3, r2
 801c2f4:	d0f8      	beq.n	801c2e8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d002      	beq.n	801c302 <reg_wizchip_spiburst_cbfunc+0x26>
 801c2fc:	683b      	ldr	r3, [r7, #0]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d106      	bne.n	801c310 <reg_wizchip_spiburst_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 801c302:	4b09      	ldr	r3, [pc, #36]	; (801c328 <reg_wizchip_spiburst_cbfunc+0x4c>)
 801c304:	4a09      	ldr	r2, [pc, #36]	; (801c32c <reg_wizchip_spiburst_cbfunc+0x50>)
 801c306:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 801c308:	4b07      	ldr	r3, [pc, #28]	; (801c328 <reg_wizchip_spiburst_cbfunc+0x4c>)
 801c30a:	4a09      	ldr	r2, [pc, #36]	; (801c330 <reg_wizchip_spiburst_cbfunc+0x54>)
 801c30c:	629a      	str	r2, [r3, #40]	; 0x28
 801c30e:	e006      	b.n	801c31e <reg_wizchip_spiburst_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 801c310:	4b05      	ldr	r3, [pc, #20]	; (801c328 <reg_wizchip_spiburst_cbfunc+0x4c>)
 801c312:	687a      	ldr	r2, [r7, #4]
 801c314:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 801c316:	4b04      	ldr	r3, [pc, #16]	; (801c328 <reg_wizchip_spiburst_cbfunc+0x4c>)
 801c318:	683a      	ldr	r2, [r7, #0]
 801c31a:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 801c31c:	46c0      	nop			; (mov r8, r8)
 801c31e:	46c0      	nop			; (mov r8, r8)
 801c320:	46bd      	mov	sp, r7
 801c322:	b002      	add	sp, #8
 801c324:	bd80      	pop	{r7, pc}
 801c326:	46c0      	nop			; (mov r8, r8)
 801c328:	20005084 	.word	0x20005084
 801c32c:	0801c211 	.word	0x0801c211
 801c330:	0801c227 	.word	0x0801c227

0801c334 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 801c334:	b590      	push	{r4, r7, lr}
 801c336:	b087      	sub	sp, #28
 801c338:	af00      	add	r7, sp, #0
 801c33a:	0002      	movs	r2, r0
 801c33c:	6039      	str	r1, [r7, #0]
 801c33e:	1dfb      	adds	r3, r7, #7
 801c340:	701a      	strb	r2, [r3, #0]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 801c342:	2317      	movs	r3, #23
 801c344:	18fb      	adds	r3, r7, r3
 801c346:	2200      	movs	r2, #0
 801c348:	701a      	strb	r2, [r3, #0]
#endif
   uint8_t* ptmp[2] = {0,0};
 801c34a:	210c      	movs	r1, #12
 801c34c:	187b      	adds	r3, r7, r1
 801c34e:	2200      	movs	r2, #0
 801c350:	601a      	str	r2, [r3, #0]
 801c352:	187b      	adds	r3, r7, r1
 801c354:	2200      	movs	r2, #0
 801c356:	605a      	str	r2, [r3, #4]
   switch(cwtype)
 801c358:	1dfb      	adds	r3, r7, #7
 801c35a:	781b      	ldrb	r3, [r3, #0]
 801c35c:	2b0f      	cmp	r3, #15
 801c35e:	d900      	bls.n	801c362 <ctlwizchip+0x2e>
 801c360:	e0c1      	b.n	801c4e6 <ctlwizchip+0x1b2>
 801c362:	009a      	lsls	r2, r3, #2
 801c364:	4b64      	ldr	r3, [pc, #400]	; (801c4f8 <ctlwizchip+0x1c4>)
 801c366:	18d3      	adds	r3, r2, r3
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	469f      	mov	pc, r3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 801c36c:	f000 f904 	bl	801c578 <wizchip_sw_reset>
         break;
 801c370:	e0bd      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 801c372:	683b      	ldr	r3, [r7, #0]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d009      	beq.n	801c38c <ctlwizchip+0x58>
         {
            ptmp[0] = (uint8_t*)arg;
 801c378:	210c      	movs	r1, #12
 801c37a:	187b      	adds	r3, r7, r1
 801c37c:	683a      	ldr	r2, [r7, #0]
 801c37e:	601a      	str	r2, [r3, #0]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 801c380:	187b      	adds	r3, r7, r1
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	3308      	adds	r3, #8
 801c386:	001a      	movs	r2, r3
 801c388:	187b      	adds	r3, r7, r1
 801c38a:	605a      	str	r2, [r3, #4]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 801c38c:	210c      	movs	r1, #12
 801c38e:	187b      	adds	r3, r7, r1
 801c390:	681a      	ldr	r2, [r3, #0]
 801c392:	187b      	adds	r3, r7, r1
 801c394:	685b      	ldr	r3, [r3, #4]
 801c396:	0019      	movs	r1, r3
 801c398:	0010      	movs	r0, r2
 801c39a:	f000 f936 	bl	801c60a <wizchip_init>
 801c39e:	0003      	movs	r3, r0
 801c3a0:	e0a6      	b.n	801c4f0 <ctlwizchip+0x1bc>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	881b      	ldrh	r3, [r3, #0]
 801c3a6:	0018      	movs	r0, r3
 801c3a8:	f000 f9f2 	bl	801c790 <wizchip_clrinterrupt>
         break;
 801c3ac:	e09f      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 801c3ae:	f000 fa39 	bl	801c824 <wizchip_getinterrupt>
 801c3b2:	0003      	movs	r3, r0
 801c3b4:	001a      	movs	r2, r3
 801c3b6:	683b      	ldr	r3, [r7, #0]
 801c3b8:	801a      	strh	r2, [r3, #0]
         break;
 801c3ba:	e098      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 801c3bc:	683b      	ldr	r3, [r7, #0]
 801c3be:	881b      	ldrh	r3, [r3, #0]
 801c3c0:	0018      	movs	r0, r3
 801c3c2:	f000 fa63 	bl	801c88c <wizchip_setinterruptmask>
         break;         
 801c3c6:	e092      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 801c3c8:	f000 fa86 	bl	801c8d8 <wizchip_getinterruptmask>
 801c3cc:	0003      	movs	r3, r0
 801c3ce:	001a      	movs	r2, r3
 801c3d0:	683b      	ldr	r3, [r7, #0]
 801c3d2:	801a      	strh	r2, [r3, #0]
         break;
 801c3d4:	e08b      	b.n	801c4ee <ctlwizchip+0x1ba>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	881b      	ldrh	r3, [r3, #0]
 801c3da:	0a1b      	lsrs	r3, r3, #8
 801c3dc:	b29b      	uxth	r3, r3
 801c3de:	b2da      	uxtb	r2, r3
 801c3e0:	2398      	movs	r3, #152	; 0x98
 801c3e2:	015b      	lsls	r3, r3, #5
 801c3e4:	0011      	movs	r1, r2
 801c3e6:	0018      	movs	r0, r3
 801c3e8:	f7fc fdba 	bl	8018f60 <WIZCHIP_WRITE>
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	881b      	ldrh	r3, [r3, #0]
 801c3f0:	b2da      	uxtb	r2, r3
 801c3f2:	23a0      	movs	r3, #160	; 0xa0
 801c3f4:	015b      	lsls	r3, r3, #5
 801c3f6:	0011      	movs	r1, r2
 801c3f8:	0018      	movs	r0, r3
 801c3fa:	f7fc fdb1 	bl	8018f60 <WIZCHIP_WRITE>
         break;
 801c3fe:	e076      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 801c400:	2398      	movs	r3, #152	; 0x98
 801c402:	015b      	lsls	r3, r3, #5
 801c404:	0018      	movs	r0, r3
 801c406:	f7fc fd59 	bl	8018ebc <WIZCHIP_READ>
 801c40a:	0003      	movs	r3, r0
 801c40c:	b29b      	uxth	r3, r3
 801c40e:	021b      	lsls	r3, r3, #8
 801c410:	b29c      	uxth	r4, r3
 801c412:	23a0      	movs	r3, #160	; 0xa0
 801c414:	015b      	lsls	r3, r3, #5
 801c416:	0018      	movs	r0, r3
 801c418:	f7fc fd50 	bl	8018ebc <WIZCHIP_READ>
 801c41c:	0003      	movs	r3, r0
 801c41e:	b29b      	uxth	r3, r3
 801c420:	18e3      	adds	r3, r4, r3
 801c422:	b29a      	uxth	r2, r3
 801c424:	683b      	ldr	r3, [r7, #0]
 801c426:	801a      	strh	r2, [r3, #0]
         break;
 801c428:	e061      	b.n	801c4ee <ctlwizchip+0x1ba>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801c42a:	4b34      	ldr	r3, [pc, #208]	; (801c4fc <ctlwizchip+0x1c8>)
 801c42c:	789a      	ldrb	r2, [r3, #2]
 801c42e:	683b      	ldr	r3, [r7, #0]
 801c430:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 801c432:	683b      	ldr	r3, [r7, #0]
 801c434:	3301      	adds	r3, #1
 801c436:	4a31      	ldr	r2, [pc, #196]	; (801c4fc <ctlwizchip+0x1c8>)
 801c438:	78d2      	ldrb	r2, [r2, #3]
 801c43a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 801c43c:	683b      	ldr	r3, [r7, #0]
 801c43e:	3302      	adds	r3, #2
 801c440:	4a2e      	ldr	r2, [pc, #184]	; (801c4fc <ctlwizchip+0x1c8>)
 801c442:	7912      	ldrb	r2, [r2, #4]
 801c444:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 801c446:	683b      	ldr	r3, [r7, #0]
 801c448:	3303      	adds	r3, #3
 801c44a:	4a2c      	ldr	r2, [pc, #176]	; (801c4fc <ctlwizchip+0x1c8>)
 801c44c:	7952      	ldrb	r2, [r2, #5]
 801c44e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 801c450:	683b      	ldr	r3, [r7, #0]
 801c452:	3304      	adds	r3, #4
 801c454:	4a29      	ldr	r2, [pc, #164]	; (801c4fc <ctlwizchip+0x1c8>)
 801c456:	7992      	ldrb	r2, [r2, #6]
 801c458:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 801c45a:	683b      	ldr	r3, [r7, #0]
 801c45c:	3305      	adds	r3, #5
 801c45e:	4a27      	ldr	r2, [pc, #156]	; (801c4fc <ctlwizchip+0x1c8>)
 801c460:	79d2      	ldrb	r2, [r2, #7]
 801c462:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 801c464:	683b      	ldr	r3, [r7, #0]
 801c466:	3306      	adds	r3, #6
 801c468:	2200      	movs	r2, #0
 801c46a:	701a      	strb	r2, [r3, #0]
         break;
 801c46c:	e03f      	b.n	801c4ee <ctlwizchip+0x1ba>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 801c46e:	f000 fa9c 	bl	801c9aa <wizphy_reset>
         break;
 801c472:	e03c      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	0018      	movs	r0, r3
 801c478:	f000 facb 	bl	801ca12 <wizphy_setphyconf>
         break;
 801c47c:	e037      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 801c47e:	683b      	ldr	r3, [r7, #0]
 801c480:	0018      	movs	r0, r3
 801c482:	f000 fb25 	bl	801cad0 <wizphy_getphyconf>
         break;
 801c486:	e032      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 801c488:	683b      	ldr	r3, [r7, #0]
 801c48a:	781b      	ldrb	r3, [r3, #0]
 801c48c:	0018      	movs	r0, r3
 801c48e:	f000 fb8f 	bl	801cbb0 <wizphy_setphypmode>
 801c492:	0003      	movs	r3, r0
 801c494:	e02c      	b.n	801c4f0 <ctlwizchip+0x1bc>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 801c496:	f000 fa69 	bl	801c96c <wizphy_getphypmode>
 801c49a:	0003      	movs	r3, r0
 801c49c:	001a      	movs	r2, r3
 801c49e:	2117      	movs	r1, #23
 801c4a0:	187b      	adds	r3, r7, r1
 801c4a2:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 801c4a4:	187b      	adds	r3, r7, r1
 801c4a6:	781b      	ldrb	r3, [r3, #0]
 801c4a8:	2bff      	cmp	r3, #255	; 0xff
 801c4aa:	d102      	bne.n	801c4b2 <ctlwizchip+0x17e>
 801c4ac:	2301      	movs	r3, #1
 801c4ae:	425b      	negs	r3, r3
 801c4b0:	e01e      	b.n	801c4f0 <ctlwizchip+0x1bc>
         *(uint8_t*)arg = tmp;
 801c4b2:	683b      	ldr	r3, [r7, #0]
 801c4b4:	2217      	movs	r2, #23
 801c4b6:	18ba      	adds	r2, r7, r2
 801c4b8:	7812      	ldrb	r2, [r2, #0]
 801c4ba:	701a      	strb	r2, [r3, #0]
         break;
 801c4bc:	e017      	b.n	801c4ee <ctlwizchip+0x1ba>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 801c4be:	f000 fa3b 	bl	801c938 <wizphy_getphylink>
 801c4c2:	0003      	movs	r3, r0
 801c4c4:	001a      	movs	r2, r3
 801c4c6:	2117      	movs	r1, #23
 801c4c8:	187b      	adds	r3, r7, r1
 801c4ca:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 801c4cc:	187b      	adds	r3, r7, r1
 801c4ce:	781b      	ldrb	r3, [r3, #0]
 801c4d0:	2bff      	cmp	r3, #255	; 0xff
 801c4d2:	d102      	bne.n	801c4da <ctlwizchip+0x1a6>
 801c4d4:	2301      	movs	r3, #1
 801c4d6:	425b      	negs	r3, r3
 801c4d8:	e00a      	b.n	801c4f0 <ctlwizchip+0x1bc>
         *(uint8_t*)arg = tmp;
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	2217      	movs	r2, #23
 801c4de:	18ba      	adds	r2, r7, r2
 801c4e0:	7812      	ldrb	r2, [r2, #0]
 801c4e2:	701a      	strb	r2, [r3, #0]
         break;
 801c4e4:	e003      	b.n	801c4ee <ctlwizchip+0x1ba>
   #endif      
      default:
         return -1;
 801c4e6:	2301      	movs	r3, #1
 801c4e8:	425b      	negs	r3, r3
 801c4ea:	e001      	b.n	801c4f0 <ctlwizchip+0x1bc>
         break;
 801c4ec:	46c0      	nop			; (mov r8, r8)
   }
   return 0;
 801c4ee:	2300      	movs	r3, #0
}
 801c4f0:	0018      	movs	r0, r3
 801c4f2:	46bd      	mov	sp, r7
 801c4f4:	b007      	add	sp, #28
 801c4f6:	bd90      	pop	{r4, r7, pc}
 801c4f8:	08031e60 	.word	0x08031e60
 801c4fc:	20005084 	.word	0x20005084

0801c500 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 801c500:	b580      	push	{r7, lr}
 801c502:	b082      	sub	sp, #8
 801c504:	af00      	add	r7, sp, #0
 801c506:	0002      	movs	r2, r0
 801c508:	6039      	str	r1, [r7, #0]
 801c50a:	1dfb      	adds	r3, r7, #7
 801c50c:	701a      	strb	r2, [r3, #0]
   
   switch(cntype)
 801c50e:	1dfb      	adds	r3, r7, #7
 801c510:	781b      	ldrb	r3, [r3, #0]
 801c512:	2b05      	cmp	r3, #5
 801c514:	d826      	bhi.n	801c564 <ctlnetwork+0x64>
 801c516:	009a      	lsls	r2, r3, #2
 801c518:	4b16      	ldr	r3, [pc, #88]	; (801c574 <ctlnetwork+0x74>)
 801c51a:	18d3      	adds	r3, r2, r3
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	469f      	mov	pc, r3
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 801c520:	683b      	ldr	r3, [r7, #0]
 801c522:	0018      	movs	r0, r3
 801c524:	f000 fba4 	bl	801cc70 <wizchip_setnetinfo>
         break;
 801c528:	e01f      	b.n	801c56a <ctlnetwork+0x6a>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 801c52a:	683b      	ldr	r3, [r7, #0]
 801c52c:	0018      	movs	r0, r3
 801c52e:	f000 fbe1 	bl	801ccf4 <wizchip_getnetinfo>
         break;
 801c532:	e01a      	b.n	801c56a <ctlnetwork+0x6a>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 801c534:	683b      	ldr	r3, [r7, #0]
 801c536:	781b      	ldrb	r3, [r3, #0]
 801c538:	0018      	movs	r0, r3
 801c53a:	f000 fc1d 	bl	801cd78 <wizchip_setnetmode>
 801c53e:	0003      	movs	r3, r0
 801c540:	e014      	b.n	801c56c <ctlnetwork+0x6c>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 801c542:	f000 fc45 	bl	801cdd0 <wizchip_getnetmode>
 801c546:	0003      	movs	r3, r0
 801c548:	001a      	movs	r2, r3
 801c54a:	683b      	ldr	r3, [r7, #0]
 801c54c:	701a      	strb	r2, [r3, #0]
         break;
 801c54e:	e00c      	b.n	801c56a <ctlnetwork+0x6a>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 801c550:	683b      	ldr	r3, [r7, #0]
 801c552:	0018      	movs	r0, r3
 801c554:	f000 fc45 	bl	801cde2 <wizchip_settimeout>
         break;
 801c558:	e007      	b.n	801c56a <ctlnetwork+0x6a>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 801c55a:	683b      	ldr	r3, [r7, #0]
 801c55c:	0018      	movs	r0, r3
 801c55e:	f000 fc64 	bl	801ce2a <wizchip_gettimeout>
         break;
 801c562:	e002      	b.n	801c56a <ctlnetwork+0x6a>
      default:
         return -1;
 801c564:	2301      	movs	r3, #1
 801c566:	425b      	negs	r3, r3
 801c568:	e000      	b.n	801c56c <ctlnetwork+0x6c>
   }
   return 0;
 801c56a:	2300      	movs	r3, #0
}
 801c56c:	0018      	movs	r0, r3
 801c56e:	46bd      	mov	sp, r7
 801c570:	b002      	add	sp, #8
 801c572:	bd80      	pop	{r7, pc}
 801c574:	08031ea0 	.word	0x08031ea0

0801c578 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 801c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c57a:	b087      	sub	sp, #28
 801c57c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801c57e:	1d39      	adds	r1, r7, #4
 801c580:	2390      	movs	r3, #144	; 0x90
 801c582:	011b      	lsls	r3, r3, #4
 801c584:	2206      	movs	r2, #6
 801c586:	0018      	movs	r0, r3
 801c588:	f7fc fd40 	bl	801900c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801c58c:	2414      	movs	r4, #20
 801c58e:	1939      	adds	r1, r7, r4
 801c590:	2380      	movs	r3, #128	; 0x80
 801c592:	005b      	lsls	r3, r3, #1
 801c594:	2204      	movs	r2, #4
 801c596:	0018      	movs	r0, r3
 801c598:	f7fc fd38 	bl	801900c <WIZCHIP_READ_BUF>
 801c59c:	2510      	movs	r5, #16
 801c59e:	1979      	adds	r1, r7, r5
 801c5a0:	23a0      	movs	r3, #160	; 0xa0
 801c5a2:	00db      	lsls	r3, r3, #3
 801c5a4:	2204      	movs	r2, #4
 801c5a6:	0018      	movs	r0, r3
 801c5a8:	f7fc fd30 	bl	801900c <WIZCHIP_READ_BUF>
 801c5ac:	260c      	movs	r6, #12
 801c5ae:	19b9      	adds	r1, r7, r6
 801c5b0:	23f0      	movs	r3, #240	; 0xf0
 801c5b2:	011b      	lsls	r3, r3, #4
 801c5b4:	2204      	movs	r2, #4
 801c5b6:	0018      	movs	r0, r3
 801c5b8:	f7fc fd28 	bl	801900c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801c5bc:	2180      	movs	r1, #128	; 0x80
 801c5be:	2000      	movs	r0, #0
 801c5c0:	f7fc fcce 	bl	8018f60 <WIZCHIP_WRITE>
   getMR(); // for delay
 801c5c4:	2000      	movs	r0, #0
 801c5c6:	f7fc fc79 	bl	8018ebc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801c5ca:	1d39      	adds	r1, r7, #4
 801c5cc:	2390      	movs	r3, #144	; 0x90
 801c5ce:	011b      	lsls	r3, r3, #4
 801c5d0:	2206      	movs	r2, #6
 801c5d2:	0018      	movs	r0, r3
 801c5d4:	f7fc fd88 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801c5d8:	1939      	adds	r1, r7, r4
 801c5da:	2380      	movs	r3, #128	; 0x80
 801c5dc:	005b      	lsls	r3, r3, #1
 801c5de:	2204      	movs	r2, #4
 801c5e0:	0018      	movs	r0, r3
 801c5e2:	f7fc fd81 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801c5e6:	1979      	adds	r1, r7, r5
 801c5e8:	23a0      	movs	r3, #160	; 0xa0
 801c5ea:	00db      	lsls	r3, r3, #3
 801c5ec:	2204      	movs	r2, #4
 801c5ee:	0018      	movs	r0, r3
 801c5f0:	f7fc fd7a 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801c5f4:	19b9      	adds	r1, r7, r6
 801c5f6:	23f0      	movs	r3, #240	; 0xf0
 801c5f8:	011b      	lsls	r3, r3, #4
 801c5fa:	2204      	movs	r2, #4
 801c5fc:	0018      	movs	r0, r3
 801c5fe:	f7fc fd73 	bl	80190e8 <WIZCHIP_WRITE_BUF>
}
 801c602:	46c0      	nop			; (mov r8, r8)
 801c604:	46bd      	mov	sp, r7
 801c606:	b007      	add	sp, #28
 801c608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c60a <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801c60a:	b590      	push	{r4, r7, lr}
 801c60c:	b085      	sub	sp, #20
 801c60e:	af00      	add	r7, sp, #0
 801c610:	6078      	str	r0, [r7, #4]
 801c612:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801c614:	240e      	movs	r4, #14
 801c616:	193b      	adds	r3, r7, r4
 801c618:	2200      	movs	r2, #0
 801c61a:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 801c61c:	f7ff ffac 	bl	801c578 <wizchip_sw_reset>
   if(txsize)
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d055      	beq.n	801c6d2 <wizchip_init+0xc8>
   {
      tmp = 0;
 801c626:	193b      	adds	r3, r7, r4
 801c628:	2200      	movs	r2, #0
 801c62a:	701a      	strb	r2, [r3, #0]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c62c:	230f      	movs	r3, #15
 801c62e:	18fb      	adds	r3, r7, r3
 801c630:	2200      	movs	r2, #0
 801c632:	701a      	strb	r2, [r3, #0]
 801c634:	e01e      	b.n	801c674 <wizchip_init+0x6a>
		{
			tmp += txsize[i];
 801c636:	230f      	movs	r3, #15
 801c638:	18fb      	adds	r3, r7, r3
 801c63a:	781b      	ldrb	r3, [r3, #0]
 801c63c:	b25b      	sxtb	r3, r3
 801c63e:	687a      	ldr	r2, [r7, #4]
 801c640:	18d3      	adds	r3, r2, r3
 801c642:	781a      	ldrb	r2, [r3, #0]
 801c644:	210e      	movs	r1, #14
 801c646:	187b      	adds	r3, r7, r1
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	18d3      	adds	r3, r2, r3
 801c64c:	b2da      	uxtb	r2, r3
 801c64e:	187b      	adds	r3, r7, r1
 801c650:	701a      	strb	r2, [r3, #0]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 801c652:	187b      	adds	r3, r7, r1
 801c654:	781b      	ldrb	r3, [r3, #0]
 801c656:	b25b      	sxtb	r3, r3
 801c658:	2b10      	cmp	r3, #16
 801c65a:	dd02      	ble.n	801c662 <wizchip_init+0x58>
 801c65c:	2301      	movs	r3, #1
 801c65e:	425b      	negs	r3, r3
 801c660:	e092      	b.n	801c788 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c662:	210f      	movs	r1, #15
 801c664:	187b      	adds	r3, r7, r1
 801c666:	781b      	ldrb	r3, [r3, #0]
 801c668:	b25b      	sxtb	r3, r3
 801c66a:	b2db      	uxtb	r3, r3
 801c66c:	3301      	adds	r3, #1
 801c66e:	b2da      	uxtb	r2, r3
 801c670:	187b      	adds	r3, r7, r1
 801c672:	701a      	strb	r2, [r3, #0]
 801c674:	220f      	movs	r2, #15
 801c676:	18bb      	adds	r3, r7, r2
 801c678:	781b      	ldrb	r3, [r3, #0]
 801c67a:	b25b      	sxtb	r3, r3
 801c67c:	2b07      	cmp	r3, #7
 801c67e:	ddda      	ble.n	801c636 <wizchip_init+0x2c>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c680:	18bb      	adds	r3, r7, r2
 801c682:	2200      	movs	r2, #0
 801c684:	701a      	strb	r2, [r3, #0]
 801c686:	e01e      	b.n	801c6c6 <wizchip_init+0xbc>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801c688:	220f      	movs	r2, #15
 801c68a:	18bb      	adds	r3, r7, r2
 801c68c:	781b      	ldrb	r3, [r3, #0]
 801c68e:	b25b      	sxtb	r3, r3
 801c690:	009b      	lsls	r3, r3, #2
 801c692:	3301      	adds	r3, #1
 801c694:	00db      	lsls	r3, r3, #3
 801c696:	21f8      	movs	r1, #248	; 0xf8
 801c698:	0149      	lsls	r1, r1, #5
 801c69a:	468c      	mov	ip, r1
 801c69c:	4463      	add	r3, ip
 801c69e:	0018      	movs	r0, r3
 801c6a0:	0014      	movs	r4, r2
 801c6a2:	18bb      	adds	r3, r7, r2
 801c6a4:	781b      	ldrb	r3, [r3, #0]
 801c6a6:	b25b      	sxtb	r3, r3
 801c6a8:	687a      	ldr	r2, [r7, #4]
 801c6aa:	18d3      	adds	r3, r2, r3
 801c6ac:	781b      	ldrb	r3, [r3, #0]
 801c6ae:	0019      	movs	r1, r3
 801c6b0:	f7fc fc56 	bl	8018f60 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c6b4:	0021      	movs	r1, r4
 801c6b6:	187b      	adds	r3, r7, r1
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	b25b      	sxtb	r3, r3
 801c6bc:	b2db      	uxtb	r3, r3
 801c6be:	3301      	adds	r3, #1
 801c6c0:	b2da      	uxtb	r2, r3
 801c6c2:	187b      	adds	r3, r7, r1
 801c6c4:	701a      	strb	r2, [r3, #0]
 801c6c6:	230f      	movs	r3, #15
 801c6c8:	18fb      	adds	r3, r7, r3
 801c6ca:	781b      	ldrb	r3, [r3, #0]
 801c6cc:	b25b      	sxtb	r3, r3
 801c6ce:	2b07      	cmp	r3, #7
 801c6d0:	ddda      	ble.n	801c688 <wizchip_init+0x7e>
		}

	#endif
   }

   if(rxsize)
 801c6d2:	683b      	ldr	r3, [r7, #0]
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d056      	beq.n	801c786 <wizchip_init+0x17c>
   {
      tmp = 0;
 801c6d8:	230e      	movs	r3, #14
 801c6da:	18fb      	adds	r3, r7, r3
 801c6dc:	2200      	movs	r2, #0
 801c6de:	701a      	strb	r2, [r3, #0]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c6e0:	230f      	movs	r3, #15
 801c6e2:	18fb      	adds	r3, r7, r3
 801c6e4:	2200      	movs	r2, #0
 801c6e6:	701a      	strb	r2, [r3, #0]
 801c6e8:	e01e      	b.n	801c728 <wizchip_init+0x11e>
		{
			tmp += rxsize[i];
 801c6ea:	230f      	movs	r3, #15
 801c6ec:	18fb      	adds	r3, r7, r3
 801c6ee:	781b      	ldrb	r3, [r3, #0]
 801c6f0:	b25b      	sxtb	r3, r3
 801c6f2:	683a      	ldr	r2, [r7, #0]
 801c6f4:	18d3      	adds	r3, r2, r3
 801c6f6:	781a      	ldrb	r2, [r3, #0]
 801c6f8:	210e      	movs	r1, #14
 801c6fa:	187b      	adds	r3, r7, r1
 801c6fc:	781b      	ldrb	r3, [r3, #0]
 801c6fe:	18d3      	adds	r3, r2, r3
 801c700:	b2da      	uxtb	r2, r3
 801c702:	187b      	adds	r3, r7, r1
 801c704:	701a      	strb	r2, [r3, #0]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 801c706:	187b      	adds	r3, r7, r1
 801c708:	781b      	ldrb	r3, [r3, #0]
 801c70a:	b25b      	sxtb	r3, r3
 801c70c:	2b10      	cmp	r3, #16
 801c70e:	dd02      	ble.n	801c716 <wizchip_init+0x10c>
 801c710:	2301      	movs	r3, #1
 801c712:	425b      	negs	r3, r3
 801c714:	e038      	b.n	801c788 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c716:	210f      	movs	r1, #15
 801c718:	187b      	adds	r3, r7, r1
 801c71a:	781b      	ldrb	r3, [r3, #0]
 801c71c:	b25b      	sxtb	r3, r3
 801c71e:	b2db      	uxtb	r3, r3
 801c720:	3301      	adds	r3, #1
 801c722:	b2da      	uxtb	r2, r3
 801c724:	187b      	adds	r3, r7, r1
 801c726:	701a      	strb	r2, [r3, #0]
 801c728:	220f      	movs	r2, #15
 801c72a:	18bb      	adds	r3, r7, r2
 801c72c:	781b      	ldrb	r3, [r3, #0]
 801c72e:	b25b      	sxtb	r3, r3
 801c730:	2b07      	cmp	r3, #7
 801c732:	ddda      	ble.n	801c6ea <wizchip_init+0xe0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c734:	18bb      	adds	r3, r7, r2
 801c736:	2200      	movs	r2, #0
 801c738:	701a      	strb	r2, [r3, #0]
 801c73a:	e01e      	b.n	801c77a <wizchip_init+0x170>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801c73c:	220f      	movs	r2, #15
 801c73e:	18bb      	adds	r3, r7, r2
 801c740:	781b      	ldrb	r3, [r3, #0]
 801c742:	b25b      	sxtb	r3, r3
 801c744:	009b      	lsls	r3, r3, #2
 801c746:	3301      	adds	r3, #1
 801c748:	00db      	lsls	r3, r3, #3
 801c74a:	21f0      	movs	r1, #240	; 0xf0
 801c74c:	0149      	lsls	r1, r1, #5
 801c74e:	468c      	mov	ip, r1
 801c750:	4463      	add	r3, ip
 801c752:	0018      	movs	r0, r3
 801c754:	0014      	movs	r4, r2
 801c756:	18bb      	adds	r3, r7, r2
 801c758:	781b      	ldrb	r3, [r3, #0]
 801c75a:	b25b      	sxtb	r3, r3
 801c75c:	683a      	ldr	r2, [r7, #0]
 801c75e:	18d3      	adds	r3, r2, r3
 801c760:	781b      	ldrb	r3, [r3, #0]
 801c762:	0019      	movs	r1, r3
 801c764:	f7fc fbfc 	bl	8018f60 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c768:	0021      	movs	r1, r4
 801c76a:	187b      	adds	r3, r7, r1
 801c76c:	781b      	ldrb	r3, [r3, #0]
 801c76e:	b25b      	sxtb	r3, r3
 801c770:	b2db      	uxtb	r3, r3
 801c772:	3301      	adds	r3, #1
 801c774:	b2da      	uxtb	r2, r3
 801c776:	187b      	adds	r3, r7, r1
 801c778:	701a      	strb	r2, [r3, #0]
 801c77a:	230f      	movs	r3, #15
 801c77c:	18fb      	adds	r3, r7, r3
 801c77e:	781b      	ldrb	r3, [r3, #0]
 801c780:	b25b      	sxtb	r3, r3
 801c782:	2b07      	cmp	r3, #7
 801c784:	ddda      	ble.n	801c73c <wizchip_init+0x132>
		#endif
		}
	#endif
   }
   return 0;
 801c786:	2300      	movs	r3, #0
}
 801c788:	0018      	movs	r0, r3
 801c78a:	46bd      	mov	sp, r7
 801c78c:	b005      	add	sp, #20
 801c78e:	bd90      	pop	{r4, r7, pc}

0801c790 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801c790:	b590      	push	{r4, r7, lr}
 801c792:	b085      	sub	sp, #20
 801c794:	af00      	add	r7, sp, #0
 801c796:	0002      	movs	r2, r0
 801c798:	1dbb      	adds	r3, r7, #6
 801c79a:	801a      	strh	r2, [r3, #0]
   uint8_t ir  = (uint8_t)intr;
 801c79c:	210f      	movs	r1, #15
 801c79e:	187b      	adds	r3, r7, r1
 801c7a0:	1dba      	adds	r2, r7, #6
 801c7a2:	8812      	ldrh	r2, [r2, #0]
 801c7a4:	701a      	strb	r2, [r3, #0]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801c7a6:	1dbb      	adds	r3, r7, #6
 801c7a8:	881b      	ldrh	r3, [r3, #0]
 801c7aa:	0a1b      	lsrs	r3, r3, #8
 801c7ac:	b29a      	uxth	r2, r3
 801c7ae:	230e      	movs	r3, #14
 801c7b0:	18fb      	adds	r3, r7, r3
 801c7b2:	701a      	strb	r2, [r3, #0]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801c7b4:	187b      	adds	r3, r7, r1
 801c7b6:	781a      	ldrb	r2, [r3, #0]
 801c7b8:	000c      	movs	r4, r1
 801c7ba:	187b      	adds	r3, r7, r1
 801c7bc:	781b      	ldrb	r3, [r3, #0]
 801c7be:	210f      	movs	r1, #15
 801c7c0:	438b      	bics	r3, r1
 801c7c2:	b2db      	uxtb	r3, r3
 801c7c4:	0019      	movs	r1, r3
 801c7c6:	0010      	movs	r0, r2
 801c7c8:	f7fc fbca 	bl	8018f60 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801c7cc:	193b      	adds	r3, r7, r4
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	701a      	strb	r2, [r3, #0]
 801c7d2:	e01d      	b.n	801c810 <wizchip_clrinterrupt+0x80>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801c7d4:	230e      	movs	r3, #14
 801c7d6:	18fb      	adds	r3, r7, r3
 801c7d8:	781a      	ldrb	r2, [r3, #0]
 801c7da:	210f      	movs	r1, #15
 801c7dc:	187b      	adds	r3, r7, r1
 801c7de:	781b      	ldrb	r3, [r3, #0]
 801c7e0:	411a      	asrs	r2, r3
 801c7e2:	0013      	movs	r3, r2
 801c7e4:	2201      	movs	r2, #1
 801c7e6:	4013      	ands	r3, r2
 801c7e8:	d00c      	beq.n	801c804 <wizchip_clrinterrupt+0x74>
 801c7ea:	187b      	adds	r3, r7, r1
 801c7ec:	781b      	ldrb	r3, [r3, #0]
 801c7ee:	009b      	lsls	r3, r3, #2
 801c7f0:	3301      	adds	r3, #1
 801c7f2:	00db      	lsls	r3, r3, #3
 801c7f4:	2280      	movs	r2, #128	; 0x80
 801c7f6:	0092      	lsls	r2, r2, #2
 801c7f8:	4694      	mov	ip, r2
 801c7fa:	4463      	add	r3, ip
 801c7fc:	211f      	movs	r1, #31
 801c7fe:	0018      	movs	r0, r3
 801c800:	f7fc fbae 	bl	8018f60 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801c804:	210f      	movs	r1, #15
 801c806:	187b      	adds	r3, r7, r1
 801c808:	781a      	ldrb	r2, [r3, #0]
 801c80a:	187b      	adds	r3, r7, r1
 801c80c:	3201      	adds	r2, #1
 801c80e:	701a      	strb	r2, [r3, #0]
 801c810:	230f      	movs	r3, #15
 801c812:	18fb      	adds	r3, r7, r3
 801c814:	781b      	ldrb	r3, [r3, #0]
 801c816:	2b07      	cmp	r3, #7
 801c818:	d9dc      	bls.n	801c7d4 <wizchip_clrinterrupt+0x44>
   }

#endif   
}
 801c81a:	46c0      	nop			; (mov r8, r8)
 801c81c:	46c0      	nop			; (mov r8, r8)
 801c81e:	46bd      	mov	sp, r7
 801c820:	b005      	add	sp, #20
 801c822:	bd90      	pop	{r4, r7, pc}

0801c824 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801c824:	b590      	push	{r4, r7, lr}
 801c826:	b083      	sub	sp, #12
 801c828:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801c82a:	1dfb      	adds	r3, r7, #7
 801c82c:	2200      	movs	r2, #0
 801c82e:	701a      	strb	r2, [r3, #0]
   uint8_t sir = 0;
 801c830:	1dbb      	adds	r3, r7, #6
 801c832:	2200      	movs	r2, #0
 801c834:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 801c836:	1d3b      	adds	r3, r7, #4
 801c838:	2200      	movs	r2, #0
 801c83a:	801a      	strh	r2, [r3, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801c83c:	23a8      	movs	r3, #168	; 0xa8
 801c83e:	015b      	lsls	r3, r3, #5
 801c840:	0018      	movs	r0, r3
 801c842:	f7fc fb3b 	bl	8018ebc <WIZCHIP_READ>
 801c846:	0003      	movs	r3, r0
 801c848:	0019      	movs	r1, r3
 801c84a:	1dfb      	adds	r3, r7, #7
 801c84c:	220f      	movs	r2, #15
 801c84e:	4391      	bics	r1, r2
 801c850:	000a      	movs	r2, r1
 801c852:	701a      	strb	r2, [r3, #0]
   sir = getSIR();
 801c854:	1dbc      	adds	r4, r7, #6
 801c856:	23b8      	movs	r3, #184	; 0xb8
 801c858:	015b      	lsls	r3, r3, #5
 801c85a:	0018      	movs	r0, r3
 801c85c:	f7fc fb2e 	bl	8018ebc <WIZCHIP_READ>
 801c860:	0003      	movs	r3, r0
 801c862:	7023      	strb	r3, [r4, #0]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801c864:	1d3b      	adds	r3, r7, #4
 801c866:	1dba      	adds	r2, r7, #6
 801c868:	7812      	ldrb	r2, [r2, #0]
 801c86a:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + ir;
 801c86c:	1d3b      	adds	r3, r7, #4
 801c86e:	881b      	ldrh	r3, [r3, #0]
 801c870:	021b      	lsls	r3, r3, #8
 801c872:	b299      	uxth	r1, r3
 801c874:	1dfb      	adds	r3, r7, #7
 801c876:	781b      	ldrb	r3, [r3, #0]
 801c878:	b29a      	uxth	r2, r3
 801c87a:	1d3b      	adds	r3, r7, #4
 801c87c:	188a      	adds	r2, r1, r2
 801c87e:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 801c880:	1d3b      	adds	r3, r7, #4
 801c882:	881b      	ldrh	r3, [r3, #0]
}
 801c884:	0018      	movs	r0, r3
 801c886:	46bd      	mov	sp, r7
 801c888:	b003      	add	sp, #12
 801c88a:	bd90      	pop	{r4, r7, pc}

0801c88c <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801c88c:	b590      	push	{r4, r7, lr}
 801c88e:	b085      	sub	sp, #20
 801c890:	af00      	add	r7, sp, #0
 801c892:	0002      	movs	r2, r0
 801c894:	1dbb      	adds	r3, r7, #6
 801c896:	801a      	strh	r2, [r3, #0]
   uint8_t imr  = (uint8_t)intr;
 801c898:	210f      	movs	r1, #15
 801c89a:	187b      	adds	r3, r7, r1
 801c89c:	1dba      	adds	r2, r7, #6
 801c89e:	8812      	ldrh	r2, [r2, #0]
 801c8a0:	701a      	strb	r2, [r3, #0]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801c8a2:	1dbb      	adds	r3, r7, #6
 801c8a4:	881b      	ldrh	r3, [r3, #0]
 801c8a6:	0a1b      	lsrs	r3, r3, #8
 801c8a8:	b29a      	uxth	r2, r3
 801c8aa:	240e      	movs	r4, #14
 801c8ac:	193b      	adds	r3, r7, r4
 801c8ae:	701a      	strb	r2, [r3, #0]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801c8b0:	187b      	adds	r3, r7, r1
 801c8b2:	781a      	ldrb	r2, [r3, #0]
 801c8b4:	23b0      	movs	r3, #176	; 0xb0
 801c8b6:	015b      	lsls	r3, r3, #5
 801c8b8:	0011      	movs	r1, r2
 801c8ba:	0018      	movs	r0, r3
 801c8bc:	f7fc fb50 	bl	8018f60 <WIZCHIP_WRITE>
   setSIMR(simr);
 801c8c0:	193b      	adds	r3, r7, r4
 801c8c2:	781a      	ldrb	r2, [r3, #0]
 801c8c4:	23c0      	movs	r3, #192	; 0xc0
 801c8c6:	015b      	lsls	r3, r3, #5
 801c8c8:	0011      	movs	r1, r2
 801c8ca:	0018      	movs	r0, r3
 801c8cc:	f7fc fb48 	bl	8018f60 <WIZCHIP_WRITE>
#endif   
}
 801c8d0:	46c0      	nop			; (mov r8, r8)
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	b005      	add	sp, #20
 801c8d6:	bd90      	pop	{r4, r7, pc}

0801c8d8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801c8d8:	b590      	push	{r4, r7, lr}
 801c8da:	b083      	sub	sp, #12
 801c8dc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801c8de:	1dfb      	adds	r3, r7, #7
 801c8e0:	2200      	movs	r2, #0
 801c8e2:	701a      	strb	r2, [r3, #0]
   uint8_t simr = 0;
 801c8e4:	1dbb      	adds	r3, r7, #6
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 801c8ea:	1d3b      	adds	r3, r7, #4
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	801a      	strh	r2, [r3, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801c8f0:	1dfc      	adds	r4, r7, #7
 801c8f2:	23b0      	movs	r3, #176	; 0xb0
 801c8f4:	015b      	lsls	r3, r3, #5
 801c8f6:	0018      	movs	r0, r3
 801c8f8:	f7fc fae0 	bl	8018ebc <WIZCHIP_READ>
 801c8fc:	0003      	movs	r3, r0
 801c8fe:	7023      	strb	r3, [r4, #0]
   simr = getSIMR();
 801c900:	1dbc      	adds	r4, r7, #6
 801c902:	23c0      	movs	r3, #192	; 0xc0
 801c904:	015b      	lsls	r3, r3, #5
 801c906:	0018      	movs	r0, r3
 801c908:	f7fc fad8 	bl	8018ebc <WIZCHIP_READ>
 801c90c:	0003      	movs	r3, r0
 801c90e:	7023      	strb	r3, [r4, #0]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801c910:	1d3b      	adds	r3, r7, #4
 801c912:	1dba      	adds	r2, r7, #6
 801c914:	7812      	ldrb	r2, [r2, #0]
 801c916:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + imr;
 801c918:	1d3b      	adds	r3, r7, #4
 801c91a:	881b      	ldrh	r3, [r3, #0]
 801c91c:	021b      	lsls	r3, r3, #8
 801c91e:	b299      	uxth	r1, r3
 801c920:	1dfb      	adds	r3, r7, #7
 801c922:	781b      	ldrb	r3, [r3, #0]
 801c924:	b29a      	uxth	r2, r3
 801c926:	1d3b      	adds	r3, r7, #4
 801c928:	188a      	adds	r2, r1, r2
 801c92a:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 801c92c:	1d3b      	adds	r3, r7, #4
 801c92e:	881b      	ldrh	r3, [r3, #0]
}
 801c930:	0018      	movs	r0, r3
 801c932:	46bd      	mov	sp, r7
 801c934:	b003      	add	sp, #12
 801c936:	bd90      	pop	{r4, r7, pc}

0801c938 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801c93e:	1dfb      	adds	r3, r7, #7
 801c940:	2200      	movs	r2, #0
 801c942:	701a      	strb	r2, [r3, #0]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801c944:	23b8      	movs	r3, #184	; 0xb8
 801c946:	019b      	lsls	r3, r3, #6
 801c948:	0018      	movs	r0, r3
 801c94a:	f7fc fab7 	bl	8018ebc <WIZCHIP_READ>
 801c94e:	0003      	movs	r3, r0
 801c950:	001a      	movs	r2, r3
 801c952:	2301      	movs	r3, #1
 801c954:	4013      	ands	r3, r2
 801c956:	d002      	beq.n	801c95e <wizphy_getphylink+0x26>
      tmp = PHY_LINK_ON;
 801c958:	1dfb      	adds	r3, r7, #7
 801c95a:	2201      	movs	r2, #1
 801c95c:	701a      	strb	r2, [r3, #0]

#else
   tmp = -1;
#endif
   return tmp;
 801c95e:	1dfb      	adds	r3, r7, #7
 801c960:	781b      	ldrb	r3, [r3, #0]
 801c962:	b25b      	sxtb	r3, r3
}
 801c964:	0018      	movs	r0, r3
 801c966:	46bd      	mov	sp, r7
 801c968:	b002      	add	sp, #8
 801c96a:	bd80      	pop	{r7, pc}

0801c96c <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b082      	sub	sp, #8
 801c970:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801c972:	1dfb      	adds	r3, r7, #7
 801c974:	2200      	movs	r2, #0
 801c976:	701a      	strb	r2, [r3, #0]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801c978:	23b8      	movs	r3, #184	; 0xb8
 801c97a:	019b      	lsls	r3, r3, #6
 801c97c:	0018      	movs	r0, r3
 801c97e:	f7fc fa9d 	bl	8018ebc <WIZCHIP_READ>
 801c982:	0003      	movs	r3, r0
 801c984:	001a      	movs	r2, r3
 801c986:	2338      	movs	r3, #56	; 0x38
 801c988:	4013      	ands	r3, r2
 801c98a:	2b30      	cmp	r3, #48	; 0x30
 801c98c:	d103      	bne.n	801c996 <wizphy_getphypmode+0x2a>
         tmp = PHY_POWER_DOWN;
 801c98e:	1dfb      	adds	r3, r7, #7
 801c990:	2201      	movs	r2, #1
 801c992:	701a      	strb	r2, [r3, #0]
 801c994:	e002      	b.n	801c99c <wizphy_getphypmode+0x30>
      else 
         tmp = PHY_POWER_NORM;
 801c996:	1dfb      	adds	r3, r7, #7
 801c998:	2200      	movs	r2, #0
 801c99a:	701a      	strb	r2, [r3, #0]
   #else
      tmp = -1;
   #endif
   return tmp;
 801c99c:	1dfb      	adds	r3, r7, #7
 801c99e:	781b      	ldrb	r3, [r3, #0]
 801c9a0:	b25b      	sxtb	r3, r3
}
 801c9a2:	0018      	movs	r0, r3
 801c9a4:	46bd      	mov	sp, r7
 801c9a6:	b002      	add	sp, #8
 801c9a8:	bd80      	pop	{r7, pc}

0801c9aa <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801c9aa:	b590      	push	{r4, r7, lr}
 801c9ac:	b083      	sub	sp, #12
 801c9ae:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801c9b0:	1dfc      	adds	r4, r7, #7
 801c9b2:	23b8      	movs	r3, #184	; 0xb8
 801c9b4:	019b      	lsls	r3, r3, #6
 801c9b6:	0018      	movs	r0, r3
 801c9b8:	f7fc fa80 	bl	8018ebc <WIZCHIP_READ>
 801c9bc:	0003      	movs	r3, r0
 801c9be:	7023      	strb	r3, [r4, #0]
   tmp &= PHYCFGR_RST;
 801c9c0:	1dfb      	adds	r3, r7, #7
 801c9c2:	1dfa      	adds	r2, r7, #7
 801c9c4:	7812      	ldrb	r2, [r2, #0]
 801c9c6:	217f      	movs	r1, #127	; 0x7f
 801c9c8:	400a      	ands	r2, r1
 801c9ca:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 801c9cc:	1dfb      	adds	r3, r7, #7
 801c9ce:	781a      	ldrb	r2, [r3, #0]
 801c9d0:	23b8      	movs	r3, #184	; 0xb8
 801c9d2:	019b      	lsls	r3, r3, #6
 801c9d4:	0011      	movs	r1, r2
 801c9d6:	0018      	movs	r0, r3
 801c9d8:	f7fc fac2 	bl	8018f60 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801c9dc:	1dfc      	adds	r4, r7, #7
 801c9de:	23b8      	movs	r3, #184	; 0xb8
 801c9e0:	019b      	lsls	r3, r3, #6
 801c9e2:	0018      	movs	r0, r3
 801c9e4:	f7fc fa6a 	bl	8018ebc <WIZCHIP_READ>
 801c9e8:	0003      	movs	r3, r0
 801c9ea:	7023      	strb	r3, [r4, #0]
   tmp |= ~PHYCFGR_RST;
 801c9ec:	1dfb      	adds	r3, r7, #7
 801c9ee:	1dfa      	adds	r2, r7, #7
 801c9f0:	7812      	ldrb	r2, [r2, #0]
 801c9f2:	2180      	movs	r1, #128	; 0x80
 801c9f4:	4249      	negs	r1, r1
 801c9f6:	430a      	orrs	r2, r1
 801c9f8:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 801c9fa:	1dfb      	adds	r3, r7, #7
 801c9fc:	781a      	ldrb	r2, [r3, #0]
 801c9fe:	23b8      	movs	r3, #184	; 0xb8
 801ca00:	019b      	lsls	r3, r3, #6
 801ca02:	0011      	movs	r1, r2
 801ca04:	0018      	movs	r0, r3
 801ca06:	f7fc faab 	bl	8018f60 <WIZCHIP_WRITE>
}
 801ca0a:	46c0      	nop			; (mov r8, r8)
 801ca0c:	46bd      	mov	sp, r7
 801ca0e:	b003      	add	sp, #12
 801ca10:	bd90      	pop	{r4, r7, pc}

0801ca12 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801ca12:	b580      	push	{r7, lr}
 801ca14:	b084      	sub	sp, #16
 801ca16:	af00      	add	r7, sp, #0
 801ca18:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801ca1a:	210f      	movs	r1, #15
 801ca1c:	187b      	adds	r3, r7, r1
 801ca1e:	2200      	movs	r2, #0
 801ca20:	701a      	strb	r2, [r3, #0]
   if(phyconf->by == PHY_CONFBY_SW)
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	781b      	ldrb	r3, [r3, #0]
 801ca26:	2b01      	cmp	r3, #1
 801ca28:	d106      	bne.n	801ca38 <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMD;
 801ca2a:	187b      	adds	r3, r7, r1
 801ca2c:	187a      	adds	r2, r7, r1
 801ca2e:	7812      	ldrb	r2, [r2, #0]
 801ca30:	2140      	movs	r1, #64	; 0x40
 801ca32:	430a      	orrs	r2, r1
 801ca34:	701a      	strb	r2, [r3, #0]
 801ca36:	e006      	b.n	801ca46 <wizphy_setphyconf+0x34>
   else
      tmp &= ~PHYCFGR_OPMD;
 801ca38:	220f      	movs	r2, #15
 801ca3a:	18bb      	adds	r3, r7, r2
 801ca3c:	18ba      	adds	r2, r7, r2
 801ca3e:	7812      	ldrb	r2, [r2, #0]
 801ca40:	2140      	movs	r1, #64	; 0x40
 801ca42:	438a      	bics	r2, r1
 801ca44:	701a      	strb	r2, [r3, #0]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	785b      	ldrb	r3, [r3, #1]
 801ca4a:	2b01      	cmp	r3, #1
 801ca4c:	d107      	bne.n	801ca5e <wizphy_setphyconf+0x4c>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801ca4e:	220f      	movs	r2, #15
 801ca50:	18bb      	adds	r3, r7, r2
 801ca52:	18ba      	adds	r2, r7, r2
 801ca54:	7812      	ldrb	r2, [r2, #0]
 801ca56:	2138      	movs	r1, #56	; 0x38
 801ca58:	430a      	orrs	r2, r1
 801ca5a:	701a      	strb	r2, [r3, #0]
 801ca5c:	e028      	b.n	801cab0 <wizphy_setphyconf+0x9e>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	78db      	ldrb	r3, [r3, #3]
 801ca62:	2b01      	cmp	r3, #1
 801ca64:	d113      	bne.n	801ca8e <wizphy_setphyconf+0x7c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	789b      	ldrb	r3, [r3, #2]
 801ca6a:	2b01      	cmp	r3, #1
 801ca6c:	d107      	bne.n	801ca7e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100F;
 801ca6e:	220f      	movs	r2, #15
 801ca70:	18bb      	adds	r3, r7, r2
 801ca72:	18ba      	adds	r2, r7, r2
 801ca74:	7812      	ldrb	r2, [r2, #0]
 801ca76:	2118      	movs	r1, #24
 801ca78:	430a      	orrs	r2, r1
 801ca7a:	701a      	strb	r2, [r3, #0]
 801ca7c:	e018      	b.n	801cab0 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801ca7e:	220f      	movs	r2, #15
 801ca80:	18bb      	adds	r3, r7, r2
 801ca82:	18ba      	adds	r2, r7, r2
 801ca84:	7812      	ldrb	r2, [r2, #0]
 801ca86:	2108      	movs	r1, #8
 801ca88:	430a      	orrs	r2, r1
 801ca8a:	701a      	strb	r2, [r3, #0]
 801ca8c:	e010      	b.n	801cab0 <wizphy_setphyconf+0x9e>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	789b      	ldrb	r3, [r3, #2]
 801ca92:	2b01      	cmp	r3, #1
 801ca94:	d107      	bne.n	801caa6 <wizphy_setphyconf+0x94>
            tmp |= PHYCFGR_OPMDC_100H;
 801ca96:	220f      	movs	r2, #15
 801ca98:	18bb      	adds	r3, r7, r2
 801ca9a:	18ba      	adds	r2, r7, r2
 801ca9c:	7812      	ldrb	r2, [r2, #0]
 801ca9e:	2110      	movs	r1, #16
 801caa0:	430a      	orrs	r2, r1
 801caa2:	701a      	strb	r2, [r3, #0]
 801caa4:	e004      	b.n	801cab0 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10H;
 801caa6:	220f      	movs	r2, #15
 801caa8:	18bb      	adds	r3, r7, r2
 801caaa:	18ba      	adds	r2, r7, r2
 801caac:	7812      	ldrb	r2, [r2, #0]
 801caae:	701a      	strb	r2, [r3, #0]
      }
   }
   setPHYCFGR(tmp);
 801cab0:	230f      	movs	r3, #15
 801cab2:	18fb      	adds	r3, r7, r3
 801cab4:	781a      	ldrb	r2, [r3, #0]
 801cab6:	23b8      	movs	r3, #184	; 0xb8
 801cab8:	019b      	lsls	r3, r3, #6
 801caba:	0011      	movs	r1, r2
 801cabc:	0018      	movs	r0, r3
 801cabe:	f7fc fa4f 	bl	8018f60 <WIZCHIP_WRITE>
   wizphy_reset();
 801cac2:	f7ff ff72 	bl	801c9aa <wizphy_reset>
}
 801cac6:	46c0      	nop			; (mov r8, r8)
 801cac8:	46bd      	mov	sp, r7
 801caca:	b004      	add	sp, #16
 801cacc:	bd80      	pop	{r7, pc}
	...

0801cad0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801cad0:	b5b0      	push	{r4, r5, r7, lr}
 801cad2:	b084      	sub	sp, #16
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801cad8:	250f      	movs	r5, #15
 801cada:	197b      	adds	r3, r7, r5
 801cadc:	2200      	movs	r2, #0
 801cade:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 801cae0:	197c      	adds	r4, r7, r5
 801cae2:	23b8      	movs	r3, #184	; 0xb8
 801cae4:	019b      	lsls	r3, r3, #6
 801cae6:	0018      	movs	r0, r3
 801cae8:	f7fc f9e8 	bl	8018ebc <WIZCHIP_READ>
 801caec:	0003      	movs	r3, r0
 801caee:	7023      	strb	r3, [r4, #0]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801caf0:	0029      	movs	r1, r5
 801caf2:	187b      	adds	r3, r7, r1
 801caf4:	781b      	ldrb	r3, [r3, #0]
 801caf6:	119b      	asrs	r3, r3, #6
 801caf8:	b2db      	uxtb	r3, r3
 801cafa:	2201      	movs	r2, #1
 801cafc:	4013      	ands	r3, r2
 801cafe:	b2da      	uxtb	r2, r3
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801cb04:	187b      	adds	r3, r7, r1
 801cb06:	781b      	ldrb	r3, [r3, #0]
 801cb08:	2238      	movs	r2, #56	; 0x38
 801cb0a:	4013      	ands	r3, r2
 801cb0c:	2b20      	cmp	r3, #32
 801cb0e:	d001      	beq.n	801cb14 <wizphy_getphyconf+0x44>
 801cb10:	2b38      	cmp	r3, #56	; 0x38
 801cb12:	d103      	bne.n	801cb1c <wizphy_getphyconf+0x4c>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	2201      	movs	r2, #1
 801cb18:	705a      	strb	r2, [r3, #1]
         break;
 801cb1a:	e003      	b.n	801cb24 <wizphy_getphyconf+0x54>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	2200      	movs	r2, #0
 801cb20:	705a      	strb	r2, [r3, #1]
         break;
 801cb22:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801cb24:	230f      	movs	r3, #15
 801cb26:	18fb      	adds	r3, r7, r3
 801cb28:	781b      	ldrb	r3, [r3, #0]
 801cb2a:	2238      	movs	r2, #56	; 0x38
 801cb2c:	4013      	ands	r3, r2
 801cb2e:	3b10      	subs	r3, #16
 801cb30:	2210      	movs	r2, #16
 801cb32:	429a      	cmp	r2, r3
 801cb34:	4192      	sbcs	r2, r2
 801cb36:	4252      	negs	r2, r2
 801cb38:	b2d2      	uxtb	r2, r2
 801cb3a:	2a00      	cmp	r2, #0
 801cb3c:	d10d      	bne.n	801cb5a <wizphy_getphyconf+0x8a>
 801cb3e:	4a1a      	ldr	r2, [pc, #104]	; (801cba8 <wizphy_getphyconf+0xd8>)
 801cb40:	40da      	lsrs	r2, r3
 801cb42:	0013      	movs	r3, r2
 801cb44:	2201      	movs	r2, #1
 801cb46:	4013      	ands	r3, r2
 801cb48:	1e5a      	subs	r2, r3, #1
 801cb4a:	4193      	sbcs	r3, r2
 801cb4c:	b2db      	uxtb	r3, r3
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d003      	beq.n	801cb5a <wizphy_getphyconf+0x8a>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	2201      	movs	r2, #1
 801cb56:	709a      	strb	r2, [r3, #2]
         break;
 801cb58:	e003      	b.n	801cb62 <wizphy_getphyconf+0x92>
      default:
         phyconf->speed = PHY_SPEED_10;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	2200      	movs	r2, #0
 801cb5e:	709a      	strb	r2, [r3, #2]
         break;
 801cb60:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801cb62:	230f      	movs	r3, #15
 801cb64:	18fb      	adds	r3, r7, r3
 801cb66:	781b      	ldrb	r3, [r3, #0]
 801cb68:	2238      	movs	r2, #56	; 0x38
 801cb6a:	4013      	ands	r3, r2
 801cb6c:	3b08      	subs	r3, #8
 801cb6e:	2218      	movs	r2, #24
 801cb70:	429a      	cmp	r2, r3
 801cb72:	4192      	sbcs	r2, r2
 801cb74:	4252      	negs	r2, r2
 801cb76:	b2d2      	uxtb	r2, r2
 801cb78:	2a00      	cmp	r2, #0
 801cb7a:	d10d      	bne.n	801cb98 <wizphy_getphyconf+0xc8>
 801cb7c:	4a0b      	ldr	r2, [pc, #44]	; (801cbac <wizphy_getphyconf+0xdc>)
 801cb7e:	40da      	lsrs	r2, r3
 801cb80:	0013      	movs	r3, r2
 801cb82:	2201      	movs	r2, #1
 801cb84:	4013      	ands	r3, r2
 801cb86:	1e5a      	subs	r2, r3, #1
 801cb88:	4193      	sbcs	r3, r2
 801cb8a:	b2db      	uxtb	r3, r3
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d003      	beq.n	801cb98 <wizphy_getphyconf+0xc8>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	2201      	movs	r2, #1
 801cb94:	70da      	strb	r2, [r3, #3]
         break;
 801cb96:	e003      	b.n	801cba0 <wizphy_getphyconf+0xd0>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	70da      	strb	r2, [r3, #3]
         break;
 801cb9e:	46c0      	nop			; (mov r8, r8)
   }
}
 801cba0:	46c0      	nop			; (mov r8, r8)
 801cba2:	46bd      	mov	sp, r7
 801cba4:	b004      	add	sp, #16
 801cba6:	bdb0      	pop	{r4, r5, r7, pc}
 801cba8:	00010101 	.word	0x00010101
 801cbac:	01010001 	.word	0x01010001

0801cbb0 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801cbb0:	b5b0      	push	{r4, r5, r7, lr}
 801cbb2:	b084      	sub	sp, #16
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	0002      	movs	r2, r0
 801cbb8:	1dfb      	adds	r3, r7, #7
 801cbba:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 801cbbc:	250f      	movs	r5, #15
 801cbbe:	197b      	adds	r3, r7, r5
 801cbc0:	2200      	movs	r2, #0
 801cbc2:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 801cbc4:	197c      	adds	r4, r7, r5
 801cbc6:	23b8      	movs	r3, #184	; 0xb8
 801cbc8:	019b      	lsls	r3, r3, #6
 801cbca:	0018      	movs	r0, r3
 801cbcc:	f7fc f976 	bl	8018ebc <WIZCHIP_READ>
 801cbd0:	0003      	movs	r3, r0
 801cbd2:	7023      	strb	r3, [r4, #0]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801cbd4:	197b      	adds	r3, r7, r5
 801cbd6:	781b      	ldrb	r3, [r3, #0]
 801cbd8:	2240      	movs	r2, #64	; 0x40
 801cbda:	4013      	ands	r3, r2
 801cbdc:	d102      	bne.n	801cbe4 <wizphy_setphypmode+0x34>
 801cbde:	2301      	movs	r3, #1
 801cbe0:	425b      	negs	r3, r3
 801cbe2:	e040      	b.n	801cc66 <wizphy_setphypmode+0xb6>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801cbe4:	200f      	movs	r0, #15
 801cbe6:	183b      	adds	r3, r7, r0
 801cbe8:	183a      	adds	r2, r7, r0
 801cbea:	7812      	ldrb	r2, [r2, #0]
 801cbec:	2138      	movs	r1, #56	; 0x38
 801cbee:	438a      	bics	r2, r1
 801cbf0:	701a      	strb	r2, [r3, #0]
   if( pmode == PHY_POWER_DOWN)
 801cbf2:	1dfb      	adds	r3, r7, #7
 801cbf4:	781b      	ldrb	r3, [r3, #0]
 801cbf6:	2b01      	cmp	r3, #1
 801cbf8:	d106      	bne.n	801cc08 <wizphy_setphypmode+0x58>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801cbfa:	183b      	adds	r3, r7, r0
 801cbfc:	183a      	adds	r2, r7, r0
 801cbfe:	7812      	ldrb	r2, [r2, #0]
 801cc00:	2130      	movs	r1, #48	; 0x30
 801cc02:	430a      	orrs	r2, r1
 801cc04:	701a      	strb	r2, [r3, #0]
 801cc06:	e006      	b.n	801cc16 <wizphy_setphypmode+0x66>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801cc08:	220f      	movs	r2, #15
 801cc0a:	18bb      	adds	r3, r7, r2
 801cc0c:	18ba      	adds	r2, r7, r2
 801cc0e:	7812      	ldrb	r2, [r2, #0]
 801cc10:	2138      	movs	r1, #56	; 0x38
 801cc12:	430a      	orrs	r2, r1
 801cc14:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 801cc16:	250f      	movs	r5, #15
 801cc18:	197b      	adds	r3, r7, r5
 801cc1a:	781a      	ldrb	r2, [r3, #0]
 801cc1c:	23b8      	movs	r3, #184	; 0xb8
 801cc1e:	019b      	lsls	r3, r3, #6
 801cc20:	0011      	movs	r1, r2
 801cc22:	0018      	movs	r0, r3
 801cc24:	f7fc f99c 	bl	8018f60 <WIZCHIP_WRITE>
   wizphy_reset();
 801cc28:	f7ff febf 	bl	801c9aa <wizphy_reset>
   tmp = getPHYCFGR();
 801cc2c:	197c      	adds	r4, r7, r5
 801cc2e:	23b8      	movs	r3, #184	; 0xb8
 801cc30:	019b      	lsls	r3, r3, #6
 801cc32:	0018      	movs	r0, r3
 801cc34:	f7fc f942 	bl	8018ebc <WIZCHIP_READ>
 801cc38:	0003      	movs	r3, r0
 801cc3a:	7023      	strb	r3, [r4, #0]
   if( pmode == PHY_POWER_DOWN)
 801cc3c:	1dfb      	adds	r3, r7, #7
 801cc3e:	781b      	ldrb	r3, [r3, #0]
 801cc40:	2b01      	cmp	r3, #1
 801cc42:	d106      	bne.n	801cc52 <wizphy_setphypmode+0xa2>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801cc44:	197b      	adds	r3, r7, r5
 801cc46:	781b      	ldrb	r3, [r3, #0]
 801cc48:	2230      	movs	r2, #48	; 0x30
 801cc4a:	4013      	ands	r3, r2
 801cc4c:	d009      	beq.n	801cc62 <wizphy_setphypmode+0xb2>
 801cc4e:	2300      	movs	r3, #0
 801cc50:	e009      	b.n	801cc66 <wizphy_setphypmode+0xb6>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801cc52:	230f      	movs	r3, #15
 801cc54:	18fb      	adds	r3, r7, r3
 801cc56:	781b      	ldrb	r3, [r3, #0]
 801cc58:	2238      	movs	r2, #56	; 0x38
 801cc5a:	4013      	ands	r3, r2
 801cc5c:	d001      	beq.n	801cc62 <wizphy_setphypmode+0xb2>
 801cc5e:	2300      	movs	r3, #0
 801cc60:	e001      	b.n	801cc66 <wizphy_setphypmode+0xb6>
   }
   return -1;
 801cc62:	2301      	movs	r3, #1
 801cc64:	425b      	negs	r3, r3
}
 801cc66:	0018      	movs	r0, r3
 801cc68:	46bd      	mov	sp, r7
 801cc6a:	b004      	add	sp, #16
 801cc6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801cc70 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801cc70:	b580      	push	{r7, lr}
 801cc72:	b082      	sub	sp, #8
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801cc78:	6879      	ldr	r1, [r7, #4]
 801cc7a:	2390      	movs	r3, #144	; 0x90
 801cc7c:	011b      	lsls	r3, r3, #4
 801cc7e:	2206      	movs	r2, #6
 801cc80:	0018      	movs	r0, r3
 801cc82:	f7fc fa31 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	330e      	adds	r3, #14
 801cc8a:	0019      	movs	r1, r3
 801cc8c:	2380      	movs	r3, #128	; 0x80
 801cc8e:	005b      	lsls	r3, r3, #1
 801cc90:	2204      	movs	r2, #4
 801cc92:	0018      	movs	r0, r3
 801cc94:	f7fc fa28 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	330a      	adds	r3, #10
 801cc9c:	0019      	movs	r1, r3
 801cc9e:	23a0      	movs	r3, #160	; 0xa0
 801cca0:	00db      	lsls	r3, r3, #3
 801cca2:	2204      	movs	r2, #4
 801cca4:	0018      	movs	r0, r3
 801cca6:	f7fc fa1f 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	1d99      	adds	r1, r3, #6
 801ccae:	23f0      	movs	r3, #240	; 0xf0
 801ccb0:	011b      	lsls	r3, r3, #4
 801ccb2:	2204      	movs	r2, #4
 801ccb4:	0018      	movs	r0, r3
 801ccb6:	f7fc fa17 	bl	80190e8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	7c9a      	ldrb	r2, [r3, #18]
 801ccbe:	4b0b      	ldr	r3, [pc, #44]	; (801ccec <wizchip_setnetinfo+0x7c>)
 801ccc0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	7cda      	ldrb	r2, [r3, #19]
 801ccc6:	4b09      	ldr	r3, [pc, #36]	; (801ccec <wizchip_setnetinfo+0x7c>)
 801ccc8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	7d1a      	ldrb	r2, [r3, #20]
 801ccce:	4b07      	ldr	r3, [pc, #28]	; (801ccec <wizchip_setnetinfo+0x7c>)
 801ccd0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	7d5a      	ldrb	r2, [r3, #21]
 801ccd6:	4b05      	ldr	r3, [pc, #20]	; (801ccec <wizchip_setnetinfo+0x7c>)
 801ccd8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	7d9a      	ldrb	r2, [r3, #22]
 801ccde:	4b04      	ldr	r3, [pc, #16]	; (801ccf0 <wizchip_setnetinfo+0x80>)
 801cce0:	701a      	strb	r2, [r3, #0]
}
 801cce2:	46c0      	nop			; (mov r8, r8)
 801cce4:	46bd      	mov	sp, r7
 801cce6:	b002      	add	sp, #8
 801cce8:	bd80      	pop	{r7, pc}
 801ccea:	46c0      	nop			; (mov r8, r8)
 801ccec:	20007b20 	.word	0x20007b20
 801ccf0:	20007b24 	.word	0x20007b24

0801ccf4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801ccf4:	b580      	push	{r7, lr}
 801ccf6:	b082      	sub	sp, #8
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801ccfc:	6879      	ldr	r1, [r7, #4]
 801ccfe:	2390      	movs	r3, #144	; 0x90
 801cd00:	011b      	lsls	r3, r3, #4
 801cd02:	2206      	movs	r2, #6
 801cd04:	0018      	movs	r0, r3
 801cd06:	f7fc f981 	bl	801900c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	330e      	adds	r3, #14
 801cd0e:	0019      	movs	r1, r3
 801cd10:	2380      	movs	r3, #128	; 0x80
 801cd12:	005b      	lsls	r3, r3, #1
 801cd14:	2204      	movs	r2, #4
 801cd16:	0018      	movs	r0, r3
 801cd18:	f7fc f978 	bl	801900c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	330a      	adds	r3, #10
 801cd20:	0019      	movs	r1, r3
 801cd22:	23a0      	movs	r3, #160	; 0xa0
 801cd24:	00db      	lsls	r3, r3, #3
 801cd26:	2204      	movs	r2, #4
 801cd28:	0018      	movs	r0, r3
 801cd2a:	f7fc f96f 	bl	801900c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	1d99      	adds	r1, r3, #6
 801cd32:	23f0      	movs	r3, #240	; 0xf0
 801cd34:	011b      	lsls	r3, r3, #4
 801cd36:	2204      	movs	r2, #4
 801cd38:	0018      	movs	r0, r3
 801cd3a:	f7fc f967 	bl	801900c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801cd3e:	4b0c      	ldr	r3, [pc, #48]	; (801cd70 <wizchip_getnetinfo+0x7c>)
 801cd40:	781a      	ldrb	r2, [r3, #0]
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801cd46:	4b0a      	ldr	r3, [pc, #40]	; (801cd70 <wizchip_getnetinfo+0x7c>)
 801cd48:	785a      	ldrb	r2, [r3, #1]
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801cd4e:	4b08      	ldr	r3, [pc, #32]	; (801cd70 <wizchip_getnetinfo+0x7c>)
 801cd50:	789a      	ldrb	r2, [r3, #2]
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801cd56:	4b06      	ldr	r3, [pc, #24]	; (801cd70 <wizchip_getnetinfo+0x7c>)
 801cd58:	78da      	ldrb	r2, [r3, #3]
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801cd5e:	4b05      	ldr	r3, [pc, #20]	; (801cd74 <wizchip_getnetinfo+0x80>)
 801cd60:	781a      	ldrb	r2, [r3, #0]
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	759a      	strb	r2, [r3, #22]
}
 801cd66:	46c0      	nop			; (mov r8, r8)
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	b002      	add	sp, #8
 801cd6c:	bd80      	pop	{r7, pc}
 801cd6e:	46c0      	nop			; (mov r8, r8)
 801cd70:	20007b20 	.word	0x20007b20
 801cd74:	20007b24 	.word	0x20007b24

0801cd78 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801cd78:	b5b0      	push	{r4, r5, r7, lr}
 801cd7a:	b084      	sub	sp, #16
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	0002      	movs	r2, r0
 801cd80:	1dfb      	adds	r3, r7, #7
 801cd82:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 801cd84:	230f      	movs	r3, #15
 801cd86:	18fb      	adds	r3, r7, r3
 801cd88:	2200      	movs	r2, #0
 801cd8a:	701a      	strb	r2, [r3, #0]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801cd8c:	1dfb      	adds	r3, r7, #7
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	223a      	movs	r2, #58	; 0x3a
 801cd92:	4393      	bics	r3, r2
 801cd94:	d002      	beq.n	801cd9c <wizchip_setnetmode+0x24>
 801cd96:	2301      	movs	r3, #1
 801cd98:	425b      	negs	r3, r3
 801cd9a:	e015      	b.n	801cdc8 <wizchip_setnetmode+0x50>
#endif      
   tmp = getMR();
 801cd9c:	250f      	movs	r5, #15
 801cd9e:	197c      	adds	r4, r7, r5
 801cda0:	2000      	movs	r0, #0
 801cda2:	f7fc f88b 	bl	8018ebc <WIZCHIP_READ>
 801cda6:	0003      	movs	r3, r0
 801cda8:	7023      	strb	r3, [r4, #0]
   tmp |= (uint8_t)netmode;
 801cdaa:	0028      	movs	r0, r5
 801cdac:	183b      	adds	r3, r7, r0
 801cdae:	1839      	adds	r1, r7, r0
 801cdb0:	1dfa      	adds	r2, r7, #7
 801cdb2:	7809      	ldrb	r1, [r1, #0]
 801cdb4:	7812      	ldrb	r2, [r2, #0]
 801cdb6:	430a      	orrs	r2, r1
 801cdb8:	701a      	strb	r2, [r3, #0]
   setMR(tmp);
 801cdba:	183b      	adds	r3, r7, r0
 801cdbc:	781b      	ldrb	r3, [r3, #0]
 801cdbe:	0019      	movs	r1, r3
 801cdc0:	2000      	movs	r0, #0
 801cdc2:	f7fc f8cd 	bl	8018f60 <WIZCHIP_WRITE>
   return 0;
 801cdc6:	2300      	movs	r3, #0
}
 801cdc8:	0018      	movs	r0, r3
 801cdca:	46bd      	mov	sp, r7
 801cdcc:	b004      	add	sp, #16
 801cdce:	bdb0      	pop	{r4, r5, r7, pc}

0801cdd0 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801cdd4:	2000      	movs	r0, #0
 801cdd6:	f7fc f871 	bl	8018ebc <WIZCHIP_READ>
 801cdda:	0003      	movs	r3, r0
}
 801cddc:	0018      	movs	r0, r3
 801cdde:	46bd      	mov	sp, r7
 801cde0:	bd80      	pop	{r7, pc}

0801cde2 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801cde2:	b580      	push	{r7, lr}
 801cde4:	b082      	sub	sp, #8
 801cde6:	af00      	add	r7, sp, #0
 801cde8:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	781a      	ldrb	r2, [r3, #0]
 801cdee:	23d8      	movs	r3, #216	; 0xd8
 801cdf0:	015b      	lsls	r3, r3, #5
 801cdf2:	0011      	movs	r1, r2
 801cdf4:	0018      	movs	r0, r3
 801cdf6:	f7fc f8b3 	bl	8018f60 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	885b      	ldrh	r3, [r3, #2]
 801cdfe:	0a1b      	lsrs	r3, r3, #8
 801ce00:	b29b      	uxth	r3, r3
 801ce02:	b2da      	uxtb	r2, r3
 801ce04:	23c8      	movs	r3, #200	; 0xc8
 801ce06:	015b      	lsls	r3, r3, #5
 801ce08:	0011      	movs	r1, r2
 801ce0a:	0018      	movs	r0, r3
 801ce0c:	f7fc f8a8 	bl	8018f60 <WIZCHIP_WRITE>
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	885b      	ldrh	r3, [r3, #2]
 801ce14:	b2da      	uxtb	r2, r3
 801ce16:	23d0      	movs	r3, #208	; 0xd0
 801ce18:	015b      	lsls	r3, r3, #5
 801ce1a:	0011      	movs	r1, r2
 801ce1c:	0018      	movs	r0, r3
 801ce1e:	f7fc f89f 	bl	8018f60 <WIZCHIP_WRITE>
}
 801ce22:	46c0      	nop			; (mov r8, r8)
 801ce24:	46bd      	mov	sp, r7
 801ce26:	b002      	add	sp, #8
 801ce28:	bd80      	pop	{r7, pc}

0801ce2a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801ce2a:	b590      	push	{r4, r7, lr}
 801ce2c:	b083      	sub	sp, #12
 801ce2e:	af00      	add	r7, sp, #0
 801ce30:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801ce32:	23d8      	movs	r3, #216	; 0xd8
 801ce34:	015b      	lsls	r3, r3, #5
 801ce36:	0018      	movs	r0, r3
 801ce38:	f7fc f840 	bl	8018ebc <WIZCHIP_READ>
 801ce3c:	0003      	movs	r3, r0
 801ce3e:	001a      	movs	r2, r3
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801ce44:	23c8      	movs	r3, #200	; 0xc8
 801ce46:	015b      	lsls	r3, r3, #5
 801ce48:	0018      	movs	r0, r3
 801ce4a:	f7fc f837 	bl	8018ebc <WIZCHIP_READ>
 801ce4e:	0003      	movs	r3, r0
 801ce50:	b29b      	uxth	r3, r3
 801ce52:	021b      	lsls	r3, r3, #8
 801ce54:	b29c      	uxth	r4, r3
 801ce56:	23d0      	movs	r3, #208	; 0xd0
 801ce58:	015b      	lsls	r3, r3, #5
 801ce5a:	0018      	movs	r0, r3
 801ce5c:	f7fc f82e 	bl	8018ebc <WIZCHIP_READ>
 801ce60:	0003      	movs	r3, r0
 801ce62:	b29b      	uxth	r3, r3
 801ce64:	18e3      	adds	r3, r4, r3
 801ce66:	b29a      	uxth	r2, r3
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	805a      	strh	r2, [r3, #2]
}
 801ce6c:	46c0      	nop			; (mov r8, r8)
 801ce6e:	46bd      	mov	sp, r7
 801ce70:	b003      	add	sp, #12
 801ce72:	bd90      	pop	{r4, r7, pc}

0801ce74 <get_seconds_from_ntp_server>:
47) UTC+12:45 (Summer)New Zealand
48) UTC+13:00 Tonga
49) UTC+14:00 Kiribati (Line Islands)
*/
void get_seconds_from_ntp_server(uint8_t *buf, uint16_t idx)
{
 801ce74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce76:	b087      	sub	sp, #28
 801ce78:	af00      	add	r7, sp, #0
 801ce7a:	6078      	str	r0, [r7, #4]
 801ce7c:	0008      	movs	r0, r1
 801ce7e:	1cb9      	adds	r1, r7, #2
 801ce80:	8008      	strh	r0, [r1, #0]
	tstamp seconds = 0;
 801ce82:	2000      	movs	r0, #0
 801ce84:	2100      	movs	r1, #0
 801ce86:	6138      	str	r0, [r7, #16]
 801ce88:	6179      	str	r1, [r7, #20]
	uint8_t i=0;
 801ce8a:	260f      	movs	r6, #15
 801ce8c:	19b9      	adds	r1, r7, r6
 801ce8e:	2000      	movs	r0, #0
 801ce90:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < 4; i++)
 801ce92:	19b9      	adds	r1, r7, r6
 801ce94:	2000      	movs	r0, #0
 801ce96:	7008      	strb	r0, [r1, #0]
 801ce98:	e01e      	b.n	801ced8 <get_seconds_from_ntp_server+0x64>
	{
		seconds = (seconds << 8) | buf[idx + i];
 801ce9a:	6939      	ldr	r1, [r7, #16]
 801ce9c:	0e09      	lsrs	r1, r1, #24
 801ce9e:	6978      	ldr	r0, [r7, #20]
 801cea0:	0203      	lsls	r3, r0, #8
 801cea2:	430b      	orrs	r3, r1
 801cea4:	6939      	ldr	r1, [r7, #16]
 801cea6:	020a      	lsls	r2, r1, #8
 801cea8:	1cb9      	adds	r1, r7, #2
 801ceaa:	8808      	ldrh	r0, [r1, #0]
 801ceac:	260f      	movs	r6, #15
 801ceae:	19b9      	adds	r1, r7, r6
 801ceb0:	7809      	ldrb	r1, [r1, #0]
 801ceb2:	1841      	adds	r1, r0, r1
 801ceb4:	0008      	movs	r0, r1
 801ceb6:	6879      	ldr	r1, [r7, #4]
 801ceb8:	1809      	adds	r1, r1, r0
 801ceba:	7809      	ldrb	r1, [r1, #0]
 801cebc:	000c      	movs	r4, r1
 801cebe:	2100      	movs	r1, #0
 801cec0:	000d      	movs	r5, r1
 801cec2:	0011      	movs	r1, r2
 801cec4:	4321      	orrs	r1, r4
 801cec6:	6139      	str	r1, [r7, #16]
 801cec8:	0019      	movs	r1, r3
 801ceca:	4329      	orrs	r1, r5
 801cecc:	6179      	str	r1, [r7, #20]
	for (i = 0; i < 4; i++)
 801cece:	19b9      	adds	r1, r7, r6
 801ced0:	7808      	ldrb	r0, [r1, #0]
 801ced2:	19b9      	adds	r1, r7, r6
 801ced4:	3001      	adds	r0, #1
 801ced6:	7008      	strb	r0, [r1, #0]
 801ced8:	210f      	movs	r1, #15
 801ceda:	1879      	adds	r1, r7, r1
 801cedc:	7809      	ldrb	r1, [r1, #0]
 801cede:	2903      	cmp	r1, #3
 801cee0:	d9db      	bls.n	801ce9a <get_seconds_from_ntp_server+0x26>
	}
	switch (time_zone)
 801cee2:	4bbf      	ldr	r3, [pc, #764]	; (801d1e0 <get_seconds_from_ntp_server+0x36c>)
 801cee4:	781b      	ldrb	r3, [r3, #0]
 801cee6:	2b31      	cmp	r3, #49	; 0x31
 801cee8:	d900      	bls.n	801ceec <get_seconds_from_ntp_server+0x78>
 801ceea:	e16e      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
 801ceec:	009a      	lsls	r2, r3, #2
 801ceee:	4bbd      	ldr	r3, [pc, #756]	; (801d1e4 <get_seconds_from_ntp_server+0x370>)
 801cef0:	18d3      	adds	r3, r2, r3
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	469f      	mov	pc, r3
	{
	case 0:
		seconds -=  12*3600;
 801cef6:	693a      	ldr	r2, [r7, #16]
 801cef8:	697b      	ldr	r3, [r7, #20]
 801cefa:	48bb      	ldr	r0, [pc, #748]	; (801d1e8 <get_seconds_from_ntp_server+0x374>)
 801cefc:	2101      	movs	r1, #1
 801cefe:	4249      	negs	r1, r1
 801cf00:	1812      	adds	r2, r2, r0
 801cf02:	414b      	adcs	r3, r1
 801cf04:	613a      	str	r2, [r7, #16]
 801cf06:	617b      	str	r3, [r7, #20]
		break;
 801cf08:	e15f      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 1:
		seconds -=  11*3600;
 801cf0a:	693a      	ldr	r2, [r7, #16]
 801cf0c:	697b      	ldr	r3, [r7, #20]
 801cf0e:	48b7      	ldr	r0, [pc, #732]	; (801d1ec <get_seconds_from_ntp_server+0x378>)
 801cf10:	2101      	movs	r1, #1
 801cf12:	4249      	negs	r1, r1
 801cf14:	1812      	adds	r2, r2, r0
 801cf16:	414b      	adcs	r3, r1
 801cf18:	613a      	str	r2, [r7, #16]
 801cf1a:	617b      	str	r3, [r7, #20]
		break;
 801cf1c:	e155      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 2:
		seconds -=  10*3600;
 801cf1e:	693a      	ldr	r2, [r7, #16]
 801cf20:	697b      	ldr	r3, [r7, #20]
 801cf22:	48b3      	ldr	r0, [pc, #716]	; (801d1f0 <get_seconds_from_ntp_server+0x37c>)
 801cf24:	2101      	movs	r1, #1
 801cf26:	4249      	negs	r1, r1
 801cf28:	1812      	adds	r2, r2, r0
 801cf2a:	414b      	adcs	r3, r1
 801cf2c:	613a      	str	r2, [r7, #16]
 801cf2e:	617b      	str	r3, [r7, #20]
		break;
 801cf30:	e14b      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 3:
		seconds -=  (9*3600+30*60);
 801cf32:	693a      	ldr	r2, [r7, #16]
 801cf34:	697b      	ldr	r3, [r7, #20]
 801cf36:	48af      	ldr	r0, [pc, #700]	; (801d1f4 <get_seconds_from_ntp_server+0x380>)
 801cf38:	2101      	movs	r1, #1
 801cf3a:	4249      	negs	r1, r1
 801cf3c:	1812      	adds	r2, r2, r0
 801cf3e:	414b      	adcs	r3, r1
 801cf40:	613a      	str	r2, [r7, #16]
 801cf42:	617b      	str	r3, [r7, #20]
		break;
 801cf44:	e141      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 4:
		seconds -=  9*3600;
 801cf46:	693a      	ldr	r2, [r7, #16]
 801cf48:	697b      	ldr	r3, [r7, #20]
 801cf4a:	48ab      	ldr	r0, [pc, #684]	; (801d1f8 <get_seconds_from_ntp_server+0x384>)
 801cf4c:	2101      	movs	r1, #1
 801cf4e:	4249      	negs	r1, r1
 801cf50:	1812      	adds	r2, r2, r0
 801cf52:	414b      	adcs	r3, r1
 801cf54:	613a      	str	r2, [r7, #16]
 801cf56:	617b      	str	r3, [r7, #20]
		break;
 801cf58:	e137      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 5:
	case 6:
		seconds -=  8*3600;
 801cf5a:	693a      	ldr	r2, [r7, #16]
 801cf5c:	697b      	ldr	r3, [r7, #20]
 801cf5e:	48a7      	ldr	r0, [pc, #668]	; (801d1fc <get_seconds_from_ntp_server+0x388>)
 801cf60:	2101      	movs	r1, #1
 801cf62:	4249      	negs	r1, r1
 801cf64:	1812      	adds	r2, r2, r0
 801cf66:	414b      	adcs	r3, r1
 801cf68:	613a      	str	r2, [r7, #16]
 801cf6a:	617b      	str	r3, [r7, #20]
		break;
 801cf6c:	e12d      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 7:
	case 8:
		seconds -=  7*3600;
 801cf6e:	693a      	ldr	r2, [r7, #16]
 801cf70:	697b      	ldr	r3, [r7, #20]
 801cf72:	48a3      	ldr	r0, [pc, #652]	; (801d200 <get_seconds_from_ntp_server+0x38c>)
 801cf74:	2101      	movs	r1, #1
 801cf76:	4249      	negs	r1, r1
 801cf78:	1812      	adds	r2, r2, r0
 801cf7a:	414b      	adcs	r3, r1
 801cf7c:	613a      	str	r2, [r7, #16]
 801cf7e:	617b      	str	r3, [r7, #20]
		break;
 801cf80:	e123      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 9:
	case 10:
		seconds -=  6*3600;
 801cf82:	693a      	ldr	r2, [r7, #16]
 801cf84:	697b      	ldr	r3, [r7, #20]
 801cf86:	489f      	ldr	r0, [pc, #636]	; (801d204 <get_seconds_from_ntp_server+0x390>)
 801cf88:	2101      	movs	r1, #1
 801cf8a:	4249      	negs	r1, r1
 801cf8c:	1812      	adds	r2, r2, r0
 801cf8e:	414b      	adcs	r3, r1
 801cf90:	613a      	str	r2, [r7, #16]
 801cf92:	617b      	str	r3, [r7, #20]
		break;
 801cf94:	e119      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 11:
	case 12:
	case 13:
		seconds -= 5*3600;
 801cf96:	693a      	ldr	r2, [r7, #16]
 801cf98:	697b      	ldr	r3, [r7, #20]
 801cf9a:	489b      	ldr	r0, [pc, #620]	; (801d208 <get_seconds_from_ntp_server+0x394>)
 801cf9c:	2101      	movs	r1, #1
 801cf9e:	4249      	negs	r1, r1
 801cfa0:	1812      	adds	r2, r2, r0
 801cfa2:	414b      	adcs	r3, r1
 801cfa4:	613a      	str	r2, [r7, #16]
 801cfa6:	617b      	str	r3, [r7, #20]
		break;
 801cfa8:	e10f      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 14:
		seconds -=  (4*3600+30*60);
 801cfaa:	693a      	ldr	r2, [r7, #16]
 801cfac:	697b      	ldr	r3, [r7, #20]
 801cfae:	4897      	ldr	r0, [pc, #604]	; (801d20c <get_seconds_from_ntp_server+0x398>)
 801cfb0:	2101      	movs	r1, #1
 801cfb2:	4249      	negs	r1, r1
 801cfb4:	1812      	adds	r2, r2, r0
 801cfb6:	414b      	adcs	r3, r1
 801cfb8:	613a      	str	r2, [r7, #16]
 801cfba:	617b      	str	r3, [r7, #20]
		break;
 801cfbc:	e105      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 15:
	case 16:
		seconds -=  4*3600;
 801cfbe:	693a      	ldr	r2, [r7, #16]
 801cfc0:	697b      	ldr	r3, [r7, #20]
 801cfc2:	4893      	ldr	r0, [pc, #588]	; (801d210 <get_seconds_from_ntp_server+0x39c>)
 801cfc4:	2101      	movs	r1, #1
 801cfc6:	4249      	negs	r1, r1
 801cfc8:	1812      	adds	r2, r2, r0
 801cfca:	414b      	adcs	r3, r1
 801cfcc:	613a      	str	r2, [r7, #16]
 801cfce:	617b      	str	r3, [r7, #20]
		break;
 801cfd0:	e0fb      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 17:
		seconds -=  (3*3600+30*60);
 801cfd2:	693a      	ldr	r2, [r7, #16]
 801cfd4:	697b      	ldr	r3, [r7, #20]
 801cfd6:	488f      	ldr	r0, [pc, #572]	; (801d214 <get_seconds_from_ntp_server+0x3a0>)
 801cfd8:	2101      	movs	r1, #1
 801cfda:	4249      	negs	r1, r1
 801cfdc:	1812      	adds	r2, r2, r0
 801cfde:	414b      	adcs	r3, r1
 801cfe0:	613a      	str	r2, [r7, #16]
 801cfe2:	617b      	str	r3, [r7, #20]
		break;
 801cfe4:	e0f1      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 18:
		seconds -=  3*3600;
 801cfe6:	693a      	ldr	r2, [r7, #16]
 801cfe8:	697b      	ldr	r3, [r7, #20]
 801cfea:	488b      	ldr	r0, [pc, #556]	; (801d218 <get_seconds_from_ntp_server+0x3a4>)
 801cfec:	2101      	movs	r1, #1
 801cfee:	4249      	negs	r1, r1
 801cff0:	1812      	adds	r2, r2, r0
 801cff2:	414b      	adcs	r3, r1
 801cff4:	613a      	str	r2, [r7, #16]
 801cff6:	617b      	str	r3, [r7, #20]
		break;
 801cff8:	e0e7      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 19:
		seconds -=  2*3600;
 801cffa:	693a      	ldr	r2, [r7, #16]
 801cffc:	697b      	ldr	r3, [r7, #20]
 801cffe:	4887      	ldr	r0, [pc, #540]	; (801d21c <get_seconds_from_ntp_server+0x3a8>)
 801d000:	2101      	movs	r1, #1
 801d002:	4249      	negs	r1, r1
 801d004:	1812      	adds	r2, r2, r0
 801d006:	414b      	adcs	r3, r1
 801d008:	613a      	str	r2, [r7, #16]
 801d00a:	617b      	str	r3, [r7, #20]
		break;
 801d00c:	e0dd      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 20:
		seconds -=  1*3600;
 801d00e:	693a      	ldr	r2, [r7, #16]
 801d010:	697b      	ldr	r3, [r7, #20]
 801d012:	4883      	ldr	r0, [pc, #524]	; (801d220 <get_seconds_from_ntp_server+0x3ac>)
 801d014:	2101      	movs	r1, #1
 801d016:	4249      	negs	r1, r1
 801d018:	1812      	adds	r2, r2, r0
 801d01a:	414b      	adcs	r3, r1
 801d01c:	613a      	str	r2, [r7, #16]
 801d01e:	617b      	str	r3, [r7, #20]
		break;
 801d020:	e0d3      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 22:
		break;
	case 23:
	case 24:
	case 25:
		seconds +=  1*3600;
 801d022:	693a      	ldr	r2, [r7, #16]
 801d024:	697b      	ldr	r3, [r7, #20]
 801d026:	20e1      	movs	r0, #225	; 0xe1
 801d028:	0100      	lsls	r0, r0, #4
 801d02a:	2100      	movs	r1, #0
 801d02c:	1812      	adds	r2, r2, r0
 801d02e:	414b      	adcs	r3, r1
 801d030:	613a      	str	r2, [r7, #16]
 801d032:	617b      	str	r3, [r7, #20]
		break;
 801d034:	e0c9      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 26:
	case 27:
		seconds +=  2*3600;
 801d036:	693a      	ldr	r2, [r7, #16]
 801d038:	697b      	ldr	r3, [r7, #20]
 801d03a:	20e1      	movs	r0, #225	; 0xe1
 801d03c:	0140      	lsls	r0, r0, #5
 801d03e:	2100      	movs	r1, #0
 801d040:	1812      	adds	r2, r2, r0
 801d042:	414b      	adcs	r3, r1
 801d044:	613a      	str	r2, [r7, #16]
 801d046:	617b      	str	r3, [r7, #20]
		break;
 801d048:	e0bf      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 28:
	case 29:
		seconds +=  3*3600;
 801d04a:	693a      	ldr	r2, [r7, #16]
 801d04c:	697b      	ldr	r3, [r7, #20]
 801d04e:	4875      	ldr	r0, [pc, #468]	; (801d224 <get_seconds_from_ntp_server+0x3b0>)
 801d050:	2100      	movs	r1, #0
 801d052:	1812      	adds	r2, r2, r0
 801d054:	414b      	adcs	r3, r1
 801d056:	613a      	str	r2, [r7, #16]
 801d058:	617b      	str	r3, [r7, #20]
		break;
 801d05a:	e0b6      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 30:
		seconds +=  (3*3600+30*60);
 801d05c:	693a      	ldr	r2, [r7, #16]
 801d05e:	697b      	ldr	r3, [r7, #20]
 801d060:	4871      	ldr	r0, [pc, #452]	; (801d228 <get_seconds_from_ntp_server+0x3b4>)
 801d062:	2100      	movs	r1, #0
 801d064:	1812      	adds	r2, r2, r0
 801d066:	414b      	adcs	r3, r1
 801d068:	613a      	str	r2, [r7, #16]
 801d06a:	617b      	str	r3, [r7, #20]
		break;
 801d06c:	e0ad      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 31:
		seconds +=  4*3600;
 801d06e:	693a      	ldr	r2, [r7, #16]
 801d070:	697b      	ldr	r3, [r7, #20]
 801d072:	20e1      	movs	r0, #225	; 0xe1
 801d074:	0180      	lsls	r0, r0, #6
 801d076:	2100      	movs	r1, #0
 801d078:	1812      	adds	r2, r2, r0
 801d07a:	414b      	adcs	r3, r1
 801d07c:	613a      	str	r2, [r7, #16]
 801d07e:	617b      	str	r3, [r7, #20]
		break;
 801d080:	e0a3      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 32:
		seconds +=  (4*3600+30*60);
 801d082:	693a      	ldr	r2, [r7, #16]
 801d084:	697b      	ldr	r3, [r7, #20]
 801d086:	4869      	ldr	r0, [pc, #420]	; (801d22c <get_seconds_from_ntp_server+0x3b8>)
 801d088:	2100      	movs	r1, #0
 801d08a:	1812      	adds	r2, r2, r0
 801d08c:	414b      	adcs	r3, r1
 801d08e:	613a      	str	r2, [r7, #16]
 801d090:	617b      	str	r3, [r7, #20]
		break;
 801d092:	e09a      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 33:
		seconds +=  5*3600;
 801d094:	693a      	ldr	r2, [r7, #16]
 801d096:	697b      	ldr	r3, [r7, #20]
 801d098:	4865      	ldr	r0, [pc, #404]	; (801d230 <get_seconds_from_ntp_server+0x3bc>)
 801d09a:	2100      	movs	r1, #0
 801d09c:	1812      	adds	r2, r2, r0
 801d09e:	414b      	adcs	r3, r1
 801d0a0:	613a      	str	r2, [r7, #16]
 801d0a2:	617b      	str	r3, [r7, #20]
		break;
 801d0a4:	e091      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 34:
		seconds +=  (5*3600+30*60);
 801d0a6:	693a      	ldr	r2, [r7, #16]
 801d0a8:	697b      	ldr	r3, [r7, #20]
 801d0aa:	4862      	ldr	r0, [pc, #392]	; (801d234 <get_seconds_from_ntp_server+0x3c0>)
 801d0ac:	2100      	movs	r1, #0
 801d0ae:	1812      	adds	r2, r2, r0
 801d0b0:	414b      	adcs	r3, r1
 801d0b2:	613a      	str	r2, [r7, #16]
 801d0b4:	617b      	str	r3, [r7, #20]
		break;
 801d0b6:	e088      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 35:
		seconds +=  (5*3600+45*60);
 801d0b8:	693a      	ldr	r2, [r7, #16]
 801d0ba:	697b      	ldr	r3, [r7, #20]
 801d0bc:	485e      	ldr	r0, [pc, #376]	; (801d238 <get_seconds_from_ntp_server+0x3c4>)
 801d0be:	2100      	movs	r1, #0
 801d0c0:	1812      	adds	r2, r2, r0
 801d0c2:	414b      	adcs	r3, r1
 801d0c4:	613a      	str	r2, [r7, #16]
 801d0c6:	617b      	str	r3, [r7, #20]
		break;
 801d0c8:	e07f      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 36:
		seconds +=  6*3600;
 801d0ca:	693a      	ldr	r2, [r7, #16]
 801d0cc:	697b      	ldr	r3, [r7, #20]
 801d0ce:	485b      	ldr	r0, [pc, #364]	; (801d23c <get_seconds_from_ntp_server+0x3c8>)
 801d0d0:	2100      	movs	r1, #0
 801d0d2:	1812      	adds	r2, r2, r0
 801d0d4:	414b      	adcs	r3, r1
 801d0d6:	613a      	str	r2, [r7, #16]
 801d0d8:	617b      	str	r3, [r7, #20]
		break;
 801d0da:	e076      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 37:
		seconds +=  (6*3600+30*60);
 801d0dc:	693a      	ldr	r2, [r7, #16]
 801d0de:	697b      	ldr	r3, [r7, #20]
 801d0e0:	4857      	ldr	r0, [pc, #348]	; (801d240 <get_seconds_from_ntp_server+0x3cc>)
 801d0e2:	2100      	movs	r1, #0
 801d0e4:	1812      	adds	r2, r2, r0
 801d0e6:	414b      	adcs	r3, r1
 801d0e8:	613a      	str	r2, [r7, #16]
 801d0ea:	617b      	str	r3, [r7, #20]
		break;
 801d0ec:	e06d      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 38:
		seconds +=  7*3600;
 801d0ee:	693a      	ldr	r2, [r7, #16]
 801d0f0:	697b      	ldr	r3, [r7, #20]
 801d0f2:	4854      	ldr	r0, [pc, #336]	; (801d244 <get_seconds_from_ntp_server+0x3d0>)
 801d0f4:	2100      	movs	r1, #0
 801d0f6:	1812      	adds	r2, r2, r0
 801d0f8:	414b      	adcs	r3, r1
 801d0fa:	613a      	str	r2, [r7, #16]
 801d0fc:	617b      	str	r3, [r7, #20]
		break;
 801d0fe:	e064      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 39:
		seconds +=  8*3600;
 801d100:	693a      	ldr	r2, [r7, #16]
 801d102:	697b      	ldr	r3, [r7, #20]
 801d104:	20e1      	movs	r0, #225	; 0xe1
 801d106:	01c0      	lsls	r0, r0, #7
 801d108:	2100      	movs	r1, #0
 801d10a:	1812      	adds	r2, r2, r0
 801d10c:	414b      	adcs	r3, r1
 801d10e:	613a      	str	r2, [r7, #16]
 801d110:	617b      	str	r3, [r7, #20]
		break;
 801d112:	e05a      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 40:
		seconds +=  9*3600;
 801d114:	693a      	ldr	r2, [r7, #16]
 801d116:	697b      	ldr	r3, [r7, #20]
 801d118:	484b      	ldr	r0, [pc, #300]	; (801d248 <get_seconds_from_ntp_server+0x3d4>)
 801d11a:	2100      	movs	r1, #0
 801d11c:	1812      	adds	r2, r2, r0
 801d11e:	414b      	adcs	r3, r1
 801d120:	613a      	str	r2, [r7, #16]
 801d122:	617b      	str	r3, [r7, #20]
		break;
 801d124:	e051      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 41:
		seconds +=  (9*3600+30*60);
 801d126:	693a      	ldr	r2, [r7, #16]
 801d128:	697b      	ldr	r3, [r7, #20]
 801d12a:	4848      	ldr	r0, [pc, #288]	; (801d24c <get_seconds_from_ntp_server+0x3d8>)
 801d12c:	2100      	movs	r1, #0
 801d12e:	1812      	adds	r2, r2, r0
 801d130:	414b      	adcs	r3, r1
 801d132:	613a      	str	r2, [r7, #16]
 801d134:	617b      	str	r3, [r7, #20]
		break;
 801d136:	e048      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 42:
		seconds +=  10*3600;
 801d138:	693a      	ldr	r2, [r7, #16]
 801d13a:	697b      	ldr	r3, [r7, #20]
 801d13c:	4844      	ldr	r0, [pc, #272]	; (801d250 <get_seconds_from_ntp_server+0x3dc>)
 801d13e:	2100      	movs	r1, #0
 801d140:	1812      	adds	r2, r2, r0
 801d142:	414b      	adcs	r3, r1
 801d144:	613a      	str	r2, [r7, #16]
 801d146:	617b      	str	r3, [r7, #20]
		break;
 801d148:	e03f      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 43:
		seconds +=  (10*3600+30*60);
 801d14a:	693a      	ldr	r2, [r7, #16]
 801d14c:	697b      	ldr	r3, [r7, #20]
 801d14e:	4841      	ldr	r0, [pc, #260]	; (801d254 <get_seconds_from_ntp_server+0x3e0>)
 801d150:	2100      	movs	r1, #0
 801d152:	1812      	adds	r2, r2, r0
 801d154:	414b      	adcs	r3, r1
 801d156:	613a      	str	r2, [r7, #16]
 801d158:	617b      	str	r3, [r7, #20]
		break;
 801d15a:	e036      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 44:
		seconds +=  11*3600;
 801d15c:	693a      	ldr	r2, [r7, #16]
 801d15e:	697b      	ldr	r3, [r7, #20]
 801d160:	483d      	ldr	r0, [pc, #244]	; (801d258 <get_seconds_from_ntp_server+0x3e4>)
 801d162:	2100      	movs	r1, #0
 801d164:	1812      	adds	r2, r2, r0
 801d166:	414b      	adcs	r3, r1
 801d168:	613a      	str	r2, [r7, #16]
 801d16a:	617b      	str	r3, [r7, #20]
		break;
 801d16c:	e02d      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 45:
		seconds +=  (11*3600+30*60);
 801d16e:	693a      	ldr	r2, [r7, #16]
 801d170:	697b      	ldr	r3, [r7, #20]
 801d172:	483a      	ldr	r0, [pc, #232]	; (801d25c <get_seconds_from_ntp_server+0x3e8>)
 801d174:	2100      	movs	r1, #0
 801d176:	1812      	adds	r2, r2, r0
 801d178:	414b      	adcs	r3, r1
 801d17a:	613a      	str	r2, [r7, #16]
 801d17c:	617b      	str	r3, [r7, #20]
		break;
 801d17e:	e024      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 46:
		seconds +=  12*3600;
 801d180:	693a      	ldr	r2, [r7, #16]
 801d182:	697b      	ldr	r3, [r7, #20]
 801d184:	4836      	ldr	r0, [pc, #216]	; (801d260 <get_seconds_from_ntp_server+0x3ec>)
 801d186:	2100      	movs	r1, #0
 801d188:	1812      	adds	r2, r2, r0
 801d18a:	414b      	adcs	r3, r1
 801d18c:	613a      	str	r2, [r7, #16]
 801d18e:	617b      	str	r3, [r7, #20]
		break;
 801d190:	e01b      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 47:
		seconds +=  (12*3600+45*60);
 801d192:	693a      	ldr	r2, [r7, #16]
 801d194:	697b      	ldr	r3, [r7, #20]
 801d196:	4833      	ldr	r0, [pc, #204]	; (801d264 <get_seconds_from_ntp_server+0x3f0>)
 801d198:	2100      	movs	r1, #0
 801d19a:	1812      	adds	r2, r2, r0
 801d19c:	414b      	adcs	r3, r1
 801d19e:	613a      	str	r2, [r7, #16]
 801d1a0:	617b      	str	r3, [r7, #20]
		break;
 801d1a2:	e012      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 48:
		seconds +=  13*3600;
 801d1a4:	693a      	ldr	r2, [r7, #16]
 801d1a6:	697b      	ldr	r3, [r7, #20]
 801d1a8:	482f      	ldr	r0, [pc, #188]	; (801d268 <get_seconds_from_ntp_server+0x3f4>)
 801d1aa:	2100      	movs	r1, #0
 801d1ac:	1812      	adds	r2, r2, r0
 801d1ae:	414b      	adcs	r3, r1
 801d1b0:	613a      	str	r2, [r7, #16]
 801d1b2:	617b      	str	r3, [r7, #20]
		break;
 801d1b4:	e009      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
	case 49:
		seconds +=  14*3600;
 801d1b6:	693a      	ldr	r2, [r7, #16]
 801d1b8:	697b      	ldr	r3, [r7, #20]
 801d1ba:	482c      	ldr	r0, [pc, #176]	; (801d26c <get_seconds_from_ntp_server+0x3f8>)
 801d1bc:	2100      	movs	r1, #0
 801d1be:	1812      	adds	r2, r2, r0
 801d1c0:	414b      	adcs	r3, r1
 801d1c2:	613a      	str	r2, [r7, #16]
 801d1c4:	617b      	str	r3, [r7, #20]
		break;
 801d1c6:	e000      	b.n	801d1ca <get_seconds_from_ntp_server+0x356>
		break;
 801d1c8:	46c0      	nop			; (mov r8, r8)

	}

	//calculation for date
	calcdatetime(seconds);
 801d1ca:	693a      	ldr	r2, [r7, #16]
 801d1cc:	697b      	ldr	r3, [r7, #20]
 801d1ce:	0010      	movs	r0, r2
 801d1d0:	0019      	movs	r1, r3
 801d1d2:	f000 f99d 	bl	801d510 <calcdatetime>
}
 801d1d6:	46c0      	nop			; (mov r8, r8)
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	b007      	add	sp, #28
 801d1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1de:	46c0      	nop			; (mov r8, r8)
 801d1e0:	20007b9d 	.word	0x20007b9d
 801d1e4:	08031eb8 	.word	0x08031eb8
 801d1e8:	ffff5740 	.word	0xffff5740
 801d1ec:	ffff6550 	.word	0xffff6550
 801d1f0:	ffff7360 	.word	0xffff7360
 801d1f4:	ffff7a68 	.word	0xffff7a68
 801d1f8:	ffff8170 	.word	0xffff8170
 801d1fc:	ffff8f80 	.word	0xffff8f80
 801d200:	ffff9d90 	.word	0xffff9d90
 801d204:	ffffaba0 	.word	0xffffaba0
 801d208:	ffffb9b0 	.word	0xffffb9b0
 801d20c:	ffffc0b8 	.word	0xffffc0b8
 801d210:	ffffc7c0 	.word	0xffffc7c0
 801d214:	ffffcec8 	.word	0xffffcec8
 801d218:	ffffd5d0 	.word	0xffffd5d0
 801d21c:	ffffe3e0 	.word	0xffffe3e0
 801d220:	fffff1f0 	.word	0xfffff1f0
 801d224:	00002a30 	.word	0x00002a30
 801d228:	00003138 	.word	0x00003138
 801d22c:	00003f48 	.word	0x00003f48
 801d230:	00004650 	.word	0x00004650
 801d234:	00004d58 	.word	0x00004d58
 801d238:	000050dc 	.word	0x000050dc
 801d23c:	00005460 	.word	0x00005460
 801d240:	00005b68 	.word	0x00005b68
 801d244:	00006270 	.word	0x00006270
 801d248:	00007e90 	.word	0x00007e90
 801d24c:	00008598 	.word	0x00008598
 801d250:	00008ca0 	.word	0x00008ca0
 801d254:	000093a8 	.word	0x000093a8
 801d258:	00009ab0 	.word	0x00009ab0
 801d25c:	0000a1b8 	.word	0x0000a1b8
 801d260:	0000a8c0 	.word	0x0000a8c0
 801d264:	0000b34c 	.word	0x0000b34c
 801d268:	0000b6d0 	.word	0x0000b6d0
 801d26c:	0000c4e0 	.word	0x0000c4e0

0801d270 <SNTP_init>:

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 801d270:	b590      	push	{r4, r7, lr}
 801d272:	b087      	sub	sp, #28
 801d274:	af00      	add	r7, sp, #0
 801d276:	60b9      	str	r1, [r7, #8]
 801d278:	0011      	movs	r1, r2
 801d27a:	607b      	str	r3, [r7, #4]
 801d27c:	240f      	movs	r4, #15
 801d27e:	193b      	adds	r3, r7, r4
 801d280:	1c02      	adds	r2, r0, #0
 801d282:	701a      	strb	r2, [r3, #0]
 801d284:	200e      	movs	r0, #14
 801d286:	183b      	adds	r3, r7, r0
 801d288:	1c0a      	adds	r2, r1, #0
 801d28a:	701a      	strb	r2, [r3, #0]
	NTP_SOCKET = s;
 801d28c:	4b31      	ldr	r3, [pc, #196]	; (801d354 <SNTP_init+0xe4>)
 801d28e:	193a      	adds	r2, r7, r4
 801d290:	7812      	ldrb	r2, [r2, #0]
 801d292:	701a      	strb	r2, [r3, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 801d294:	68bb      	ldr	r3, [r7, #8]
 801d296:	781a      	ldrb	r2, [r3, #0]
 801d298:	4b2f      	ldr	r3, [pc, #188]	; (801d358 <SNTP_init+0xe8>)
 801d29a:	701a      	strb	r2, [r3, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 801d29c:	68bb      	ldr	r3, [r7, #8]
 801d29e:	785a      	ldrb	r2, [r3, #1]
 801d2a0:	4b2d      	ldr	r3, [pc, #180]	; (801d358 <SNTP_init+0xe8>)
 801d2a2:	705a      	strb	r2, [r3, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 801d2a4:	68bb      	ldr	r3, [r7, #8]
 801d2a6:	789a      	ldrb	r2, [r3, #2]
 801d2a8:	4b2b      	ldr	r3, [pc, #172]	; (801d358 <SNTP_init+0xe8>)
 801d2aa:	709a      	strb	r2, [r3, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 801d2ac:	68bb      	ldr	r3, [r7, #8]
 801d2ae:	78da      	ldrb	r2, [r3, #3]
 801d2b0:	4b29      	ldr	r3, [pc, #164]	; (801d358 <SNTP_init+0xe8>)
 801d2b2:	70da      	strb	r2, [r3, #3]

	time_zone = tz;
 801d2b4:	4b29      	ldr	r3, [pc, #164]	; (801d35c <SNTP_init+0xec>)
 801d2b6:	183a      	adds	r2, r7, r0
 801d2b8:	7812      	ldrb	r2, [r2, #0]
 801d2ba:	701a      	strb	r2, [r3, #0]

	data_buf = buf;
 801d2bc:	4b28      	ldr	r3, [pc, #160]	; (801d360 <SNTP_init+0xf0>)
 801d2be:	687a      	ldr	r2, [r7, #4]
 801d2c0:	601a      	str	r2, [r3, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 801d2c2:	4b25      	ldr	r3, [pc, #148]	; (801d358 <SNTP_init+0xe8>)
 801d2c4:	2200      	movs	r2, #0
 801d2c6:	715a      	strb	r2, [r3, #5]
	NTPformat.version = 4;        /* version number */
 801d2c8:	4b23      	ldr	r3, [pc, #140]	; (801d358 <SNTP_init+0xe8>)
 801d2ca:	2204      	movs	r2, #4
 801d2cc:	711a      	strb	r2, [r3, #4]
	NTPformat.mode = 3;           /* mode */
 801d2ce:	4b22      	ldr	r3, [pc, #136]	; (801d358 <SNTP_init+0xe8>)
 801d2d0:	2203      	movs	r2, #3
 801d2d2:	719a      	strb	r2, [r3, #6]
	NTPformat.stratum = 0;        /* stratum */
 801d2d4:	4b20      	ldr	r3, [pc, #128]	; (801d358 <SNTP_init+0xe8>)
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	71da      	strb	r2, [r3, #7]
	NTPformat.poll = 0;           /* poll interval */
 801d2da:	4b1f      	ldr	r3, [pc, #124]	; (801d358 <SNTP_init+0xe8>)
 801d2dc:	2200      	movs	r2, #0
 801d2de:	721a      	strb	r2, [r3, #8]
	NTPformat.precision = 0;      /* precision */
 801d2e0:	4b1d      	ldr	r3, [pc, #116]	; (801d358 <SNTP_init+0xe8>)
 801d2e2:	2200      	movs	r2, #0
 801d2e4:	725a      	strb	r2, [r3, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 801d2e6:	4b1c      	ldr	r3, [pc, #112]	; (801d358 <SNTP_init+0xe8>)
 801d2e8:	2200      	movs	r2, #0
 801d2ea:	60da      	str	r2, [r3, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 801d2ec:	4b1a      	ldr	r3, [pc, #104]	; (801d358 <SNTP_init+0xe8>)
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	611a      	str	r2, [r3, #16]
	NTPformat.refid = 0;          /* reference ID */
 801d2f2:	4b19      	ldr	r3, [pc, #100]	; (801d358 <SNTP_init+0xe8>)
 801d2f4:	2200      	movs	r2, #0
 801d2f6:	751a      	strb	r2, [r3, #20]
	NTPformat.reftime = 0;        /* reference time */
 801d2f8:	4917      	ldr	r1, [pc, #92]	; (801d358 <SNTP_init+0xe8>)
 801d2fa:	2200      	movs	r2, #0
 801d2fc:	2300      	movs	r3, #0
 801d2fe:	618a      	str	r2, [r1, #24]
 801d300:	61cb      	str	r3, [r1, #28]
	NTPformat.org = 0;            /* origin timestamp */
 801d302:	4915      	ldr	r1, [pc, #84]	; (801d358 <SNTP_init+0xe8>)
 801d304:	2200      	movs	r2, #0
 801d306:	2300      	movs	r3, #0
 801d308:	620a      	str	r2, [r1, #32]
 801d30a:	624b      	str	r3, [r1, #36]	; 0x24
	NTPformat.rec = 0;            /* receive timestamp */
 801d30c:	4912      	ldr	r1, [pc, #72]	; (801d358 <SNTP_init+0xe8>)
 801d30e:	2200      	movs	r2, #0
 801d310:	2300      	movs	r3, #0
 801d312:	628a      	str	r2, [r1, #40]	; 0x28
 801d314:	62cb      	str	r3, [r1, #44]	; 0x2c
	NTPformat.xmt = 1;            /* transmit timestamp */
 801d316:	4910      	ldr	r1, [pc, #64]	; (801d358 <SNTP_init+0xe8>)
 801d318:	2201      	movs	r2, #1
 801d31a:	2300      	movs	r3, #0
 801d31c:	630a      	str	r2, [r1, #48]	; 0x30
 801d31e:	634b      	str	r3, [r1, #52]	; 0x34

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
 801d320:	4b0d      	ldr	r3, [pc, #52]	; (801d358 <SNTP_init+0xe8>)
 801d322:	795b      	ldrb	r3, [r3, #5]
 801d324:	019b      	lsls	r3, r3, #6
 801d326:	b2da      	uxtb	r2, r3
 801d328:	4b0b      	ldr	r3, [pc, #44]	; (801d358 <SNTP_init+0xe8>)
 801d32a:	791b      	ldrb	r3, [r3, #4]
 801d32c:	00db      	lsls	r3, r3, #3
 801d32e:	b2db      	uxtb	r3, r3
 801d330:	18d3      	adds	r3, r2, r3
 801d332:	b2da      	uxtb	r2, r3
 801d334:	4b08      	ldr	r3, [pc, #32]	; (801d358 <SNTP_init+0xe8>)
 801d336:	799b      	ldrb	r3, [r3, #6]
 801d338:	18d3      	adds	r3, r2, r3
 801d33a:	b2da      	uxtb	r2, r3
 801d33c:	2117      	movs	r1, #23
 801d33e:	187b      	adds	r3, r7, r1
 801d340:	701a      	strb	r2, [r3, #0]
 801d342:	187b      	adds	r3, r7, r1
 801d344:	781a      	ldrb	r2, [r3, #0]
	memcpy(ntpmessage,(void const*)(&Flag),1);
 801d346:	4b07      	ldr	r3, [pc, #28]	; (801d364 <SNTP_init+0xf4>)
 801d348:	701a      	strb	r2, [r3, #0]
}
 801d34a:	46c0      	nop			; (mov r8, r8)
 801d34c:	46bd      	mov	sp, r7
 801d34e:	b007      	add	sp, #28
 801d350:	bd90      	pop	{r4, r7, pc}
 801d352:	46c0      	nop			; (mov r8, r8)
 801d354:	20007b9c 	.word	0x20007b9c
 801d358:	20007b28 	.word	0x20007b28
 801d35c:	20007b9d 	.word	0x20007b9d
 801d360:	20007b98 	.word	0x20007b98
 801d364:	20007b68 	.word	0x20007b68

0801d368 <SNTP_run>:

int8_t SNTP_run(datetime *time)
{
 801d368:	b5b0      	push	{r4, r5, r7, lr}
 801d36a:	b088      	sub	sp, #32
 801d36c:	af02      	add	r7, sp, #8
 801d36e:	6078      	str	r0, [r7, #4]
	uint16_t RSR_len;
	uint32_t destip = 0;
 801d370:	2300      	movs	r3, #0
 801d372:	613b      	str	r3, [r7, #16]
	uint16_t destport;
	uint16_t startindex = 40; //last 8-byte of data_buf[size is 48 byte] is xmt, so the startindex should be 40
 801d374:	2314      	movs	r3, #20
 801d376:	18fb      	adds	r3, r7, r3
 801d378:	2228      	movs	r2, #40	; 0x28
 801d37a:	801a      	strh	r2, [r3, #0]

	switch(getSn_SR(NTP_SOCKET))
 801d37c:	4b5a      	ldr	r3, [pc, #360]	; (801d4e8 <SNTP_run+0x180>)
 801d37e:	781b      	ldrb	r3, [r3, #0]
 801d380:	009b      	lsls	r3, r3, #2
 801d382:	3301      	adds	r3, #1
 801d384:	00db      	lsls	r3, r3, #3
 801d386:	22c0      	movs	r2, #192	; 0xc0
 801d388:	0092      	lsls	r2, r2, #2
 801d38a:	4694      	mov	ip, r2
 801d38c:	4463      	add	r3, ip
 801d38e:	0018      	movs	r0, r3
 801d390:	f7fb fd94 	bl	8018ebc <WIZCHIP_READ>
 801d394:	1e03      	subs	r3, r0, #0
 801d396:	d100      	bne.n	801d39a <SNTP_run+0x32>
 801d398:	e098      	b.n	801d4cc <SNTP_run+0x164>
 801d39a:	2b22      	cmp	r3, #34	; 0x22
 801d39c:	d000      	beq.n	801d3a0 <SNTP_run+0x38>
 801d39e:	e09d      	b.n	801d4dc <SNTP_run+0x174>
	{
	case SOCK_UDP:
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 801d3a0:	4b51      	ldr	r3, [pc, #324]	; (801d4e8 <SNTP_run+0x180>)
 801d3a2:	781b      	ldrb	r3, [r3, #0]
 801d3a4:	2516      	movs	r5, #22
 801d3a6:	197c      	adds	r4, r7, r5
 801d3a8:	0018      	movs	r0, r3
 801d3aa:	f7fb ff77 	bl	801929c <getSn_RX_RSR>
 801d3ae:	0003      	movs	r3, r0
 801d3b0:	8023      	strh	r3, [r4, #0]
 801d3b2:	197b      	adds	r3, r7, r5
 801d3b4:	881b      	ldrh	r3, [r3, #0]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d040      	beq.n	801d43c <SNTP_run+0xd4>
		{
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 801d3ba:	197b      	adds	r3, r7, r5
 801d3bc:	881b      	ldrh	r3, [r3, #0]
 801d3be:	2b38      	cmp	r3, #56	; 0x38
 801d3c0:	d902      	bls.n	801d3c8 <SNTP_run+0x60>
 801d3c2:	197b      	adds	r3, r7, r5
 801d3c4:	2238      	movs	r2, #56	; 0x38
 801d3c6:	801a      	strh	r2, [r3, #0]
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 801d3c8:	4b47      	ldr	r3, [pc, #284]	; (801d4e8 <SNTP_run+0x180>)
 801d3ca:	7818      	ldrb	r0, [r3, #0]
 801d3cc:	4b47      	ldr	r3, [pc, #284]	; (801d4ec <SNTP_run+0x184>)
 801d3ce:	6819      	ldr	r1, [r3, #0]
 801d3d0:	2310      	movs	r3, #16
 801d3d2:	18fc      	adds	r4, r7, r3
 801d3d4:	2316      	movs	r3, #22
 801d3d6:	18fb      	adds	r3, r7, r3
 801d3d8:	881a      	ldrh	r2, [r3, #0]
 801d3da:	230e      	movs	r3, #14
 801d3dc:	18fb      	adds	r3, r7, r3
 801d3de:	9300      	str	r3, [sp, #0]
 801d3e0:	0023      	movs	r3, r4
 801d3e2:	f7fe fc45 	bl	801bc70 <recvfrom>

			get_seconds_from_ntp_server(data_buf,startindex);
 801d3e6:	4b41      	ldr	r3, [pc, #260]	; (801d4ec <SNTP_run+0x184>)
 801d3e8:	681a      	ldr	r2, [r3, #0]
 801d3ea:	2314      	movs	r3, #20
 801d3ec:	18fb      	adds	r3, r7, r3
 801d3ee:	881b      	ldrh	r3, [r3, #0]
 801d3f0:	0019      	movs	r1, r3
 801d3f2:	0010      	movs	r0, r2
 801d3f4:	f7ff fd3e 	bl	801ce74 <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 801d3f8:	4b3d      	ldr	r3, [pc, #244]	; (801d4f0 <SNTP_run+0x188>)
 801d3fa:	881a      	ldrh	r2, [r3, #0]
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	801a      	strh	r2, [r3, #0]
			time->mo = Nowdatetime.mo;
 801d400:	4b3b      	ldr	r3, [pc, #236]	; (801d4f0 <SNTP_run+0x188>)
 801d402:	789a      	ldrb	r2, [r3, #2]
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	709a      	strb	r2, [r3, #2]
			time->dd = Nowdatetime.dd;
 801d408:	4b39      	ldr	r3, [pc, #228]	; (801d4f0 <SNTP_run+0x188>)
 801d40a:	78da      	ldrb	r2, [r3, #3]
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	70da      	strb	r2, [r3, #3]
			time->hh = Nowdatetime.hh;
 801d410:	4b37      	ldr	r3, [pc, #220]	; (801d4f0 <SNTP_run+0x188>)
 801d412:	791a      	ldrb	r2, [r3, #4]
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	711a      	strb	r2, [r3, #4]
			time->mm = Nowdatetime.mm;
 801d418:	4b35      	ldr	r3, [pc, #212]	; (801d4f0 <SNTP_run+0x188>)
 801d41a:	795a      	ldrb	r2, [r3, #5]
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	715a      	strb	r2, [r3, #5]
			time->ss = Nowdatetime.ss;
 801d420:	4b33      	ldr	r3, [pc, #204]	; (801d4f0 <SNTP_run+0x188>)
 801d422:	799a      	ldrb	r2, [r3, #6]
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	719a      	strb	r2, [r3, #6]

			ntp_retry_cnt=0;
 801d428:	4b32      	ldr	r3, [pc, #200]	; (801d4f4 <SNTP_run+0x18c>)
 801d42a:	2200      	movs	r2, #0
 801d42c:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 801d42e:	4b2e      	ldr	r3, [pc, #184]	; (801d4e8 <SNTP_run+0x180>)
 801d430:	781b      	ldrb	r3, [r3, #0]
 801d432:	0018      	movs	r0, r3
 801d434:	f7fd ff08 	bl	801b248 <close>

			return 1;
 801d438:	2301      	movs	r3, #1
 801d43a:	e050      	b.n	801d4de <SNTP_run+0x176>
		}

		if(ntp_retry_cnt<0xFFFF)
 801d43c:	4b2d      	ldr	r3, [pc, #180]	; (801d4f4 <SNTP_run+0x18c>)
 801d43e:	881b      	ldrh	r3, [r3, #0]
 801d440:	4a2d      	ldr	r2, [pc, #180]	; (801d4f8 <SNTP_run+0x190>)
 801d442:	4293      	cmp	r3, r2
 801d444:	d035      	beq.n	801d4b2 <SNTP_run+0x14a>
		{
			if(ntp_retry_cnt==0)//first send request, no need to wait
 801d446:	4b2b      	ldr	r3, [pc, #172]	; (801d4f4 <SNTP_run+0x18c>)
 801d448:	881b      	ldrh	r3, [r3, #0]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d10f      	bne.n	801d46e <SNTP_run+0x106>
			{
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 801d44e:	4b26      	ldr	r3, [pc, #152]	; (801d4e8 <SNTP_run+0x180>)
 801d450:	7818      	ldrb	r0, [r3, #0]
 801d452:	4b2a      	ldr	r3, [pc, #168]	; (801d4fc <SNTP_run+0x194>)
 801d454:	492a      	ldr	r1, [pc, #168]	; (801d500 <SNTP_run+0x198>)
 801d456:	227b      	movs	r2, #123	; 0x7b
 801d458:	9200      	str	r2, [sp, #0]
 801d45a:	2230      	movs	r2, #48	; 0x30
 801d45c:	f7fe fa74 	bl	801b948 <sendto>
				ntp_retry_cnt++;
 801d460:	4b24      	ldr	r3, [pc, #144]	; (801d4f4 <SNTP_run+0x18c>)
 801d462:	881b      	ldrh	r3, [r3, #0]
 801d464:	3301      	adds	r3, #1
 801d466:	b29a      	uxth	r2, r3
 801d468:	4b22      	ldr	r3, [pc, #136]	; (801d4f4 <SNTP_run+0x18c>)
 801d46a:	801a      	strh	r2, [r3, #0]
#ifdef _SNTP_DEBUG_
			printf("ntp retry failed!\r\n");
#endif
			close(NTP_SOCKET);
		}
		break;
 801d46c:	e036      	b.n	801d4dc <SNTP_run+0x174>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 801d46e:	4b21      	ldr	r3, [pc, #132]	; (801d4f4 <SNTP_run+0x18c>)
 801d470:	881b      	ldrh	r3, [r3, #0]
 801d472:	4924      	ldr	r1, [pc, #144]	; (801d504 <SNTP_run+0x19c>)
 801d474:	0018      	movs	r0, r3
 801d476:	f7e4 fee5 	bl	8002244 <__aeabi_uidivmod>
 801d47a:	000b      	movs	r3, r1
 801d47c:	b29b      	uxth	r3, r3
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d110      	bne.n	801d4a4 <SNTP_run+0x13c>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 801d482:	4b19      	ldr	r3, [pc, #100]	; (801d4e8 <SNTP_run+0x180>)
 801d484:	7818      	ldrb	r0, [r3, #0]
 801d486:	4b1d      	ldr	r3, [pc, #116]	; (801d4fc <SNTP_run+0x194>)
 801d488:	491d      	ldr	r1, [pc, #116]	; (801d500 <SNTP_run+0x198>)
 801d48a:	227b      	movs	r2, #123	; 0x7b
 801d48c:	9200      	str	r2, [sp, #0]
 801d48e:	2230      	movs	r2, #48	; 0x30
 801d490:	f7fe fa5a 	bl	801b948 <sendto>
					printf("ntp retry: %d\r\n", ntp_retry_cnt);
 801d494:	4b17      	ldr	r3, [pc, #92]	; (801d4f4 <SNTP_run+0x18c>)
 801d496:	881b      	ldrh	r3, [r3, #0]
 801d498:	001a      	movs	r2, r3
 801d49a:	4b1b      	ldr	r3, [pc, #108]	; (801d508 <SNTP_run+0x1a0>)
 801d49c:	0011      	movs	r1, r2
 801d49e:	0018      	movs	r0, r3
 801d4a0:	f005 f9b8 	bl	8022814 <iprintf>
				ntp_retry_cnt++;
 801d4a4:	4b13      	ldr	r3, [pc, #76]	; (801d4f4 <SNTP_run+0x18c>)
 801d4a6:	881b      	ldrh	r3, [r3, #0]
 801d4a8:	3301      	adds	r3, #1
 801d4aa:	b29a      	uxth	r2, r3
 801d4ac:	4b11      	ldr	r3, [pc, #68]	; (801d4f4 <SNTP_run+0x18c>)
 801d4ae:	801a      	strh	r2, [r3, #0]
		break;
 801d4b0:	e014      	b.n	801d4dc <SNTP_run+0x174>
			ntp_retry_cnt=0;
 801d4b2:	4b10      	ldr	r3, [pc, #64]	; (801d4f4 <SNTP_run+0x18c>)
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	801a      	strh	r2, [r3, #0]
			printf("ntp retry failed!\r\n");
 801d4b8:	4b14      	ldr	r3, [pc, #80]	; (801d50c <SNTP_run+0x1a4>)
 801d4ba:	0018      	movs	r0, r3
 801d4bc:	f005 fa1a 	bl	80228f4 <puts>
			close(NTP_SOCKET);
 801d4c0:	4b09      	ldr	r3, [pc, #36]	; (801d4e8 <SNTP_run+0x180>)
 801d4c2:	781b      	ldrb	r3, [r3, #0]
 801d4c4:	0018      	movs	r0, r3
 801d4c6:	f7fd febf 	bl	801b248 <close>
		break;
 801d4ca:	e007      	b.n	801d4dc <SNTP_run+0x174>
	case SOCK_CLOSED:
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 801d4cc:	4b06      	ldr	r3, [pc, #24]	; (801d4e8 <SNTP_run+0x180>)
 801d4ce:	7818      	ldrb	r0, [r3, #0]
 801d4d0:	2300      	movs	r3, #0
 801d4d2:	227b      	movs	r2, #123	; 0x7b
 801d4d4:	2102      	movs	r1, #2
 801d4d6:	f7fd fd7f 	bl	801afd8 <socket>
		break;
 801d4da:	46c0      	nop			; (mov r8, r8)
	}
	// Return value
	// 0 - failed / 1 - success
	return 0;
 801d4dc:	2300      	movs	r3, #0
}
 801d4de:	0018      	movs	r0, r3
 801d4e0:	46bd      	mov	sp, r7
 801d4e2:	b006      	add	sp, #24
 801d4e4:	bdb0      	pop	{r4, r5, r7, pc}
 801d4e6:	46c0      	nop			; (mov r8, r8)
 801d4e8:	20007b9c 	.word	0x20007b9c
 801d4ec:	20007b98 	.word	0x20007b98
 801d4f0:	20007b60 	.word	0x20007b60
 801d4f4:	20007b9e 	.word	0x20007b9e
 801d4f8:	0000ffff 	.word	0x0000ffff
 801d4fc:	20007b28 	.word	0x20007b28
 801d500:	20007b68 	.word	0x20007b68
 801d504:	00000fff 	.word	0x00000fff
 801d508:	08030d08 	.word	0x08030d08
 801d50c:	08030d18 	.word	0x08030d18

0801d510 <calcdatetime>:

void calcdatetime(tstamp seconds)
{
 801d510:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d512:	b099      	sub	sp, #100	; 0x64
 801d514:	af00      	add	r7, sp, #0
 801d516:	6138      	str	r0, [r7, #16]
 801d518:	6179      	str	r1, [r7, #20]
	uint8_t yf=0;
 801d51a:	234f      	movs	r3, #79	; 0x4f
 801d51c:	2110      	movs	r1, #16
 801d51e:	185b      	adds	r3, r3, r1
 801d520:	19db      	adds	r3, r3, r7
 801d522:	2200      	movs	r2, #0
 801d524:	701a      	strb	r2, [r3, #0]
	tstamp n=0,d=0,total_d=0,rz=0;
 801d526:	2200      	movs	r2, #0
 801d528:	2300      	movs	r3, #0
 801d52a:	653a      	str	r2, [r7, #80]	; 0x50
 801d52c:	657b      	str	r3, [r7, #84]	; 0x54
 801d52e:	2200      	movs	r2, #0
 801d530:	2300      	movs	r3, #0
 801d532:	64ba      	str	r2, [r7, #72]	; 0x48
 801d534:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d536:	2200      	movs	r2, #0
 801d538:	2300      	movs	r3, #0
 801d53a:	62ba      	str	r2, [r7, #40]	; 0x28
 801d53c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d53e:	2200      	movs	r2, #0
 801d540:	2300      	movs	r3, #0
 801d542:	643a      	str	r2, [r7, #64]	; 0x40
 801d544:	647b      	str	r3, [r7, #68]	; 0x44
	uint16_t y=0,r=0,yr=0;
 801d546:	232e      	movs	r3, #46	; 0x2e
 801d548:	185b      	adds	r3, r3, r1
 801d54a:	19db      	adds	r3, r3, r7
 801d54c:	2200      	movs	r2, #0
 801d54e:	801a      	strh	r2, [r3, #0]
 801d550:	232c      	movs	r3, #44	; 0x2c
 801d552:	185b      	adds	r3, r3, r1
 801d554:	19db      	adds	r3, r3, r7
 801d556:	2200      	movs	r2, #0
 801d558:	801a      	strh	r2, [r3, #0]
 801d55a:	2316      	movs	r3, #22
 801d55c:	185b      	adds	r3, r3, r1
 801d55e:	19db      	adds	r3, r3, r7
 801d560:	2200      	movs	r2, #0
 801d562:	801a      	strh	r2, [r3, #0]
	signed long long yd=0;
 801d564:	2200      	movs	r2, #0
 801d566:	2300      	movs	r3, #0
 801d568:	633a      	str	r2, [r7, #48]	; 0x30
 801d56a:	637b      	str	r3, [r7, #52]	; 0x34

	n = seconds;
 801d56c:	693a      	ldr	r2, [r7, #16]
 801d56e:	697b      	ldr	r3, [r7, #20]
 801d570:	653a      	str	r2, [r7, #80]	; 0x50
 801d572:	657b      	str	r3, [r7, #84]	; 0x54
	total_d = seconds/(SECS_PERDAY);
 801d574:	6938      	ldr	r0, [r7, #16]
 801d576:	6979      	ldr	r1, [r7, #20]
 801d578:	4aa9      	ldr	r2, [pc, #676]	; (801d820 <calcdatetime+0x310>)
 801d57a:	2300      	movs	r3, #0
 801d57c:	f7e4 ffb0 	bl	80024e0 <__aeabi_uldivmod>
 801d580:	0002      	movs	r2, r0
 801d582:	000b      	movs	r3, r1
 801d584:	62ba      	str	r2, [r7, #40]	; 0x28
 801d586:	62fb      	str	r3, [r7, #44]	; 0x2c
	d=0;
 801d588:	2200      	movs	r2, #0
 801d58a:	2300      	movs	r3, #0
 801d58c:	64ba      	str	r2, [r7, #72]	; 0x48
 801d58e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t p_year_total_sec=SECS_PERDAY*365;
 801d590:	4ba4      	ldr	r3, [pc, #656]	; (801d824 <calcdatetime+0x314>)
 801d592:	623b      	str	r3, [r7, #32]
	uint32_t r_year_total_sec=SECS_PERDAY*366;
 801d594:	4ba4      	ldr	r3, [pc, #656]	; (801d828 <calcdatetime+0x318>)
 801d596:	61fb      	str	r3, [r7, #28]
	while(n>=p_year_total_sec)
 801d598:	e062      	b.n	801d660 <calcdatetime+0x150>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 801d59a:	262c      	movs	r6, #44	; 0x2c
 801d59c:	2310      	movs	r3, #16
 801d59e:	18f2      	adds	r2, r6, r3
 801d5a0:	19d3      	adds	r3, r2, r7
 801d5a2:	881b      	ldrh	r3, [r3, #0]
 801d5a4:	4aa1      	ldr	r2, [pc, #644]	; (801d82c <calcdatetime+0x31c>)
 801d5a6:	4694      	mov	ip, r2
 801d5a8:	4463      	add	r3, ip
 801d5aa:	22c8      	movs	r2, #200	; 0xc8
 801d5ac:	0051      	lsls	r1, r2, #1
 801d5ae:	0018      	movs	r0, r3
 801d5b0:	f7e4 ff32 	bl	8002418 <__aeabi_idivmod>
 801d5b4:	1e0b      	subs	r3, r1, #0
 801d5b6:	d017      	beq.n	801d5e8 <calcdatetime+0xd8>
 801d5b8:	2310      	movs	r3, #16
 801d5ba:	18f2      	adds	r2, r6, r3
 801d5bc:	19d3      	adds	r3, r2, r7
 801d5be:	881b      	ldrh	r3, [r3, #0]
 801d5c0:	4a9a      	ldr	r2, [pc, #616]	; (801d82c <calcdatetime+0x31c>)
 801d5c2:	4694      	mov	ip, r2
 801d5c4:	4463      	add	r3, ip
 801d5c6:	2164      	movs	r1, #100	; 0x64
 801d5c8:	0018      	movs	r0, r3
 801d5ca:	f7e4 ff25 	bl	8002418 <__aeabi_idivmod>
 801d5ce:	1e0b      	subs	r3, r1, #0
 801d5d0:	d020      	beq.n	801d614 <calcdatetime+0x104>
 801d5d2:	2310      	movs	r3, #16
 801d5d4:	18f3      	adds	r3, r6, r3
 801d5d6:	19db      	adds	r3, r3, r7
 801d5d8:	881b      	ldrh	r3, [r3, #0]
 801d5da:	4a94      	ldr	r2, [pc, #592]	; (801d82c <calcdatetime+0x31c>)
 801d5dc:	4694      	mov	ip, r2
 801d5de:	4463      	add	r3, ip
 801d5e0:	001a      	movs	r2, r3
 801d5e2:	2303      	movs	r3, #3
 801d5e4:	4013      	ands	r3, r2
 801d5e6:	d115      	bne.n	801d614 <calcdatetime+0x104>
		{
			n = n -(r_year_total_sec);
 801d5e8:	69fb      	ldr	r3, [r7, #28]
 801d5ea:	60bb      	str	r3, [r7, #8]
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	60fb      	str	r3, [r7, #12]
 801d5f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d5f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d5f4:	68b8      	ldr	r0, [r7, #8]
 801d5f6:	68f9      	ldr	r1, [r7, #12]
 801d5f8:	1a12      	subs	r2, r2, r0
 801d5fa:	418b      	sbcs	r3, r1
 801d5fc:	653a      	str	r2, [r7, #80]	; 0x50
 801d5fe:	657b      	str	r3, [r7, #84]	; 0x54
			d = d + 366;
 801d600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d604:	20b7      	movs	r0, #183	; 0xb7
 801d606:	0040      	lsls	r0, r0, #1
 801d608:	2100      	movs	r1, #0
 801d60a:	1812      	adds	r2, r2, r0
 801d60c:	414b      	adcs	r3, r1
 801d60e:	64ba      	str	r2, [r7, #72]	; 0x48
 801d610:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d612:	e014      	b.n	801d63e <calcdatetime+0x12e>
		}
		else
		{
			n = n - (p_year_total_sec);
 801d614:	6a3b      	ldr	r3, [r7, #32]
 801d616:	603b      	str	r3, [r7, #0]
 801d618:	2300      	movs	r3, #0
 801d61a:	607b      	str	r3, [r7, #4]
 801d61c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d620:	6838      	ldr	r0, [r7, #0]
 801d622:	6879      	ldr	r1, [r7, #4]
 801d624:	1a12      	subs	r2, r2, r0
 801d626:	418b      	sbcs	r3, r1
 801d628:	653a      	str	r2, [r7, #80]	; 0x50
 801d62a:	657b      	str	r3, [r7, #84]	; 0x54
			d = d + 365;
 801d62c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d630:	206e      	movs	r0, #110	; 0x6e
 801d632:	30ff      	adds	r0, #255	; 0xff
 801d634:	2100      	movs	r1, #0
 801d636:	1812      	adds	r2, r2, r0
 801d638:	414b      	adcs	r3, r1
 801d63a:	64ba      	str	r2, [r7, #72]	; 0x48
 801d63c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		r+=1;
 801d63e:	222c      	movs	r2, #44	; 0x2c
 801d640:	2110      	movs	r1, #16
 801d642:	1853      	adds	r3, r2, r1
 801d644:	19db      	adds	r3, r3, r7
 801d646:	1852      	adds	r2, r2, r1
 801d648:	19d2      	adds	r2, r2, r7
 801d64a:	8812      	ldrh	r2, [r2, #0]
 801d64c:	3201      	adds	r2, #1
 801d64e:	801a      	strh	r2, [r3, #0]
		y+=1;
 801d650:	222e      	movs	r2, #46	; 0x2e
 801d652:	1853      	adds	r3, r2, r1
 801d654:	19db      	adds	r3, r3, r7
 801d656:	1852      	adds	r2, r2, r1
 801d658:	19d2      	adds	r2, r2, r7
 801d65a:	8812      	ldrh	r2, [r2, #0]
 801d65c:	3201      	adds	r2, #1
 801d65e:	801a      	strh	r2, [r3, #0]
	while(n>=p_year_total_sec)
 801d660:	6a3b      	ldr	r3, [r7, #32]
 801d662:	001c      	movs	r4, r3
 801d664:	2300      	movs	r3, #0
 801d666:	001d      	movs	r5, r3
 801d668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d66a:	42ab      	cmp	r3, r5
 801d66c:	d305      	bcc.n	801d67a <calcdatetime+0x16a>
 801d66e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d670:	42ab      	cmp	r3, r5
 801d672:	d192      	bne.n	801d59a <calcdatetime+0x8a>
 801d674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d676:	42a3      	cmp	r3, r4
 801d678:	d28f      	bcs.n	801d59a <calcdatetime+0x8a>

	}

	y += EPOCH;
 801d67a:	212e      	movs	r1, #46	; 0x2e
 801d67c:	2410      	movs	r4, #16
 801d67e:	190b      	adds	r3, r1, r4
 801d680:	19db      	adds	r3, r3, r7
 801d682:	190a      	adds	r2, r1, r4
 801d684:	19d2      	adds	r2, r2, r7
 801d686:	8812      	ldrh	r2, [r2, #0]
 801d688:	4868      	ldr	r0, [pc, #416]	; (801d82c <calcdatetime+0x31c>)
 801d68a:	4684      	mov	ip, r0
 801d68c:	4462      	add	r2, ip
 801d68e:	801a      	strh	r2, [r3, #0]

	Nowdatetime.yy = y;
 801d690:	4b67      	ldr	r3, [pc, #412]	; (801d830 <calcdatetime+0x320>)
 801d692:	190a      	adds	r2, r1, r4
 801d694:	19d2      	adds	r2, r2, r7
 801d696:	8812      	ldrh	r2, [r2, #0]
 801d698:	801a      	strh	r2, [r3, #0]

	yd=0;
 801d69a:	2200      	movs	r2, #0
 801d69c:	2300      	movs	r3, #0
 801d69e:	633a      	str	r2, [r7, #48]	; 0x30
 801d6a0:	637b      	str	r3, [r7, #52]	; 0x34
	yd = total_d - d;
 801d6a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d6a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d6a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d6a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d6aa:	1a80      	subs	r0, r0, r2
 801d6ac:	4199      	sbcs	r1, r3
 801d6ae:	0002      	movs	r2, r0
 801d6b0:	000b      	movs	r3, r1
 801d6b2:	633a      	str	r2, [r7, #48]	; 0x30
 801d6b4:	637b      	str	r3, [r7, #52]	; 0x34

	yf=1;
 801d6b6:	234f      	movs	r3, #79	; 0x4f
 801d6b8:	191b      	adds	r3, r3, r4
 801d6ba:	19db      	adds	r3, r3, r7
 801d6bc:	2201      	movs	r2, #1
 801d6be:	701a      	strb	r2, [r3, #0]
	while(yd>=28)
 801d6c0:	e0c9      	b.n	801d856 <calcdatetime+0x346>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 801d6c2:	224f      	movs	r2, #79	; 0x4f
 801d6c4:	2110      	movs	r1, #16
 801d6c6:	1853      	adds	r3, r2, r1
 801d6c8:	19db      	adds	r3, r3, r7
 801d6ca:	781b      	ldrb	r3, [r3, #0]
 801d6cc:	2b01      	cmp	r3, #1
 801d6ce:	d01d      	beq.n	801d70c <calcdatetime+0x1fc>
 801d6d0:	1853      	adds	r3, r2, r1
 801d6d2:	19db      	adds	r3, r3, r7
 801d6d4:	781b      	ldrb	r3, [r3, #0]
 801d6d6:	2b03      	cmp	r3, #3
 801d6d8:	d018      	beq.n	801d70c <calcdatetime+0x1fc>
 801d6da:	1853      	adds	r3, r2, r1
 801d6dc:	19db      	adds	r3, r3, r7
 801d6de:	781b      	ldrb	r3, [r3, #0]
 801d6e0:	2b05      	cmp	r3, #5
 801d6e2:	d013      	beq.n	801d70c <calcdatetime+0x1fc>
 801d6e4:	1853      	adds	r3, r2, r1
 801d6e6:	19db      	adds	r3, r3, r7
 801d6e8:	781b      	ldrb	r3, [r3, #0]
 801d6ea:	2b07      	cmp	r3, #7
 801d6ec:	d00e      	beq.n	801d70c <calcdatetime+0x1fc>
 801d6ee:	1853      	adds	r3, r2, r1
 801d6f0:	19db      	adds	r3, r3, r7
 801d6f2:	781b      	ldrb	r3, [r3, #0]
 801d6f4:	2b08      	cmp	r3, #8
 801d6f6:	d009      	beq.n	801d70c <calcdatetime+0x1fc>
 801d6f8:	1853      	adds	r3, r2, r1
 801d6fa:	19db      	adds	r3, r3, r7
 801d6fc:	781b      	ldrb	r3, [r3, #0]
 801d6fe:	2b0a      	cmp	r3, #10
 801d700:	d004      	beq.n	801d70c <calcdatetime+0x1fc>
 801d702:	1853      	adds	r3, r2, r1
 801d704:	19db      	adds	r3, r3, r7
 801d706:	781b      	ldrb	r3, [r3, #0]
 801d708:	2b0c      	cmp	r3, #12
 801d70a:	d114      	bne.n	801d736 <calcdatetime+0x226>
		{
			yd -= 31;
 801d70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d710:	201f      	movs	r0, #31
 801d712:	4240      	negs	r0, r0
 801d714:	17c1      	asrs	r1, r0, #31
 801d716:	1812      	adds	r2, r2, r0
 801d718:	414b      	adcs	r3, r1
 801d71a:	633a      	str	r2, [r7, #48]	; 0x30
 801d71c:	637b      	str	r3, [r7, #52]	; 0x34
			if(yd<0)break;
 801d71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d720:	2b00      	cmp	r3, #0
 801d722:	da00      	bge.n	801d726 <calcdatetime+0x216>
 801d724:	e0a2      	b.n	801d86c <calcdatetime+0x35c>
			rz += 31;
 801d726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d72a:	201f      	movs	r0, #31
 801d72c:	2100      	movs	r1, #0
 801d72e:	1812      	adds	r2, r2, r0
 801d730:	414b      	adcs	r3, r1
 801d732:	643a      	str	r2, [r7, #64]	; 0x40
 801d734:	647b      	str	r3, [r7, #68]	; 0x44
		}

		if (yf==2)
 801d736:	234f      	movs	r3, #79	; 0x4f
 801d738:	2510      	movs	r5, #16
 801d73a:	195b      	adds	r3, r3, r5
 801d73c:	19db      	adds	r3, r3, r7
 801d73e:	781b      	ldrb	r3, [r3, #0]
 801d740:	2b02      	cmp	r3, #2
 801d742:	d14a      	bne.n	801d7da <calcdatetime+0x2ca>
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 801d744:	242e      	movs	r4, #46	; 0x2e
 801d746:	1963      	adds	r3, r4, r5
 801d748:	19db      	adds	r3, r3, r7
 801d74a:	881b      	ldrh	r3, [r3, #0]
 801d74c:	22c8      	movs	r2, #200	; 0xc8
 801d74e:	0051      	lsls	r1, r2, #1
 801d750:	0018      	movs	r0, r3
 801d752:	f7e4 fd77 	bl	8002244 <__aeabi_uidivmod>
 801d756:	000b      	movs	r3, r1
 801d758:	b29b      	uxth	r3, r3
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d012      	beq.n	801d784 <calcdatetime+0x274>
 801d75e:	1963      	adds	r3, r4, r5
 801d760:	19db      	adds	r3, r3, r7
 801d762:	881b      	ldrh	r3, [r3, #0]
 801d764:	2164      	movs	r1, #100	; 0x64
 801d766:	0018      	movs	r0, r3
 801d768:	f7e4 fd6c 	bl	8002244 <__aeabi_uidivmod>
 801d76c:	000b      	movs	r3, r1
 801d76e:	b29b      	uxth	r3, r3
 801d770:	2b00      	cmp	r3, #0
 801d772:	d01d      	beq.n	801d7b0 <calcdatetime+0x2a0>
 801d774:	1963      	adds	r3, r4, r5
 801d776:	19db      	adds	r3, r3, r7
 801d778:	881b      	ldrh	r3, [r3, #0]
 801d77a:	2203      	movs	r2, #3
 801d77c:	4013      	ands	r3, r2
 801d77e:	b29b      	uxth	r3, r3
 801d780:	2b00      	cmp	r3, #0
 801d782:	d115      	bne.n	801d7b0 <calcdatetime+0x2a0>
			{
				yd -= 29;
 801d784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d788:	201d      	movs	r0, #29
 801d78a:	4240      	negs	r0, r0
 801d78c:	17c1      	asrs	r1, r0, #31
 801d78e:	1812      	adds	r2, r2, r0
 801d790:	414b      	adcs	r3, r1
 801d792:	633a      	str	r2, [r7, #48]	; 0x30
 801d794:	637b      	str	r3, [r7, #52]	; 0x34
				if(yd<0)break;
 801d796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d798:	2b00      	cmp	r3, #0
 801d79a:	da00      	bge.n	801d79e <calcdatetime+0x28e>
 801d79c:	e066      	b.n	801d86c <calcdatetime+0x35c>
				rz += 29;
 801d79e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d7a2:	201d      	movs	r0, #29
 801d7a4:	2100      	movs	r1, #0
 801d7a6:	1812      	adds	r2, r2, r0
 801d7a8:	414b      	adcs	r3, r1
 801d7aa:	643a      	str	r2, [r7, #64]	; 0x40
 801d7ac:	647b      	str	r3, [r7, #68]	; 0x44
 801d7ae:	e014      	b.n	801d7da <calcdatetime+0x2ca>
			}
			else
			{
				yd -= 28;
 801d7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7b4:	201c      	movs	r0, #28
 801d7b6:	4240      	negs	r0, r0
 801d7b8:	17c1      	asrs	r1, r0, #31
 801d7ba:	1812      	adds	r2, r2, r0
 801d7bc:	414b      	adcs	r3, r1
 801d7be:	633a      	str	r2, [r7, #48]	; 0x30
 801d7c0:	637b      	str	r3, [r7, #52]	; 0x34
				if(yd<0)break;
 801d7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	da00      	bge.n	801d7ca <calcdatetime+0x2ba>
 801d7c8:	e050      	b.n	801d86c <calcdatetime+0x35c>
				rz += 28;
 801d7ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d7ce:	201c      	movs	r0, #28
 801d7d0:	2100      	movs	r1, #0
 801d7d2:	1812      	adds	r2, r2, r0
 801d7d4:	414b      	adcs	r3, r1
 801d7d6:	643a      	str	r2, [r7, #64]	; 0x40
 801d7d8:	647b      	str	r3, [r7, #68]	; 0x44
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 801d7da:	224f      	movs	r2, #79	; 0x4f
 801d7dc:	2110      	movs	r1, #16
 801d7de:	1853      	adds	r3, r2, r1
 801d7e0:	19db      	adds	r3, r3, r7
 801d7e2:	781b      	ldrb	r3, [r3, #0]
 801d7e4:	2b04      	cmp	r3, #4
 801d7e6:	d00e      	beq.n	801d806 <calcdatetime+0x2f6>
 801d7e8:	1853      	adds	r3, r2, r1
 801d7ea:	19db      	adds	r3, r3, r7
 801d7ec:	781b      	ldrb	r3, [r3, #0]
 801d7ee:	2b06      	cmp	r3, #6
 801d7f0:	d009      	beq.n	801d806 <calcdatetime+0x2f6>
 801d7f2:	1853      	adds	r3, r2, r1
 801d7f4:	19db      	adds	r3, r3, r7
 801d7f6:	781b      	ldrb	r3, [r3, #0]
 801d7f8:	2b09      	cmp	r3, #9
 801d7fa:	d004      	beq.n	801d806 <calcdatetime+0x2f6>
 801d7fc:	1853      	adds	r3, r2, r1
 801d7fe:	19db      	adds	r3, r3, r7
 801d800:	781b      	ldrb	r3, [r3, #0]
 801d802:	2b0b      	cmp	r3, #11
 801d804:	d11e      	bne.n	801d844 <calcdatetime+0x334>
		{
			yd -= 30;
 801d806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d80a:	201e      	movs	r0, #30
 801d80c:	4240      	negs	r0, r0
 801d80e:	17c1      	asrs	r1, r0, #31
 801d810:	1812      	adds	r2, r2, r0
 801d812:	414b      	adcs	r3, r1
 801d814:	633a      	str	r2, [r7, #48]	; 0x30
 801d816:	637b      	str	r3, [r7, #52]	; 0x34
			if(yd<0)break;
 801d818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	da0a      	bge.n	801d834 <calcdatetime+0x324>
 801d81e:	e025      	b.n	801d86c <calcdatetime+0x35c>
 801d820:	00015180 	.word	0x00015180
 801d824:	01e13380 	.word	0x01e13380
 801d828:	01e28500 	.word	0x01e28500
 801d82c:	0000076c 	.word	0x0000076c
 801d830:	20007b60 	.word	0x20007b60
			rz += 30;
 801d834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d838:	201e      	movs	r0, #30
 801d83a:	2100      	movs	r1, #0
 801d83c:	1812      	adds	r2, r2, r0
 801d83e:	414b      	adcs	r3, r1
 801d840:	643a      	str	r2, [r7, #64]	; 0x40
 801d842:	647b      	str	r3, [r7, #68]	; 0x44
		}
		yf += 1;
 801d844:	224f      	movs	r2, #79	; 0x4f
 801d846:	2110      	movs	r1, #16
 801d848:	1853      	adds	r3, r2, r1
 801d84a:	19db      	adds	r3, r3, r7
 801d84c:	1852      	adds	r2, r2, r1
 801d84e:	19d2      	adds	r2, r2, r7
 801d850:	7812      	ldrb	r2, [r2, #0]
 801d852:	3201      	adds	r2, #1
 801d854:	701a      	strb	r2, [r3, #0]
	while(yd>=28)
 801d856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d858:	2b00      	cmp	r3, #0
 801d85a:	dd00      	ble.n	801d85e <calcdatetime+0x34e>
 801d85c:	e731      	b.n	801d6c2 <calcdatetime+0x1b2>
 801d85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d860:	2b00      	cmp	r3, #0
 801d862:	d103      	bne.n	801d86c <calcdatetime+0x35c>
 801d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d866:	2b1b      	cmp	r3, #27
 801d868:	d900      	bls.n	801d86c <calcdatetime+0x35c>
 801d86a:	e72a      	b.n	801d6c2 <calcdatetime+0x1b2>

	}
	Nowdatetime.mo=yf;
 801d86c:	4b30      	ldr	r3, [pc, #192]	; (801d930 <calcdatetime+0x420>)
 801d86e:	224f      	movs	r2, #79	; 0x4f
 801d870:	2410      	movs	r4, #16
 801d872:	1912      	adds	r2, r2, r4
 801d874:	19d2      	adds	r2, r2, r7
 801d876:	7812      	ldrb	r2, [r2, #0]
 801d878:	709a      	strb	r2, [r3, #2]
	yr = total_d-d-rz;
 801d87a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d87e:	1c13      	adds	r3, r2, #0
 801d880:	b299      	uxth	r1, r3
 801d882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d886:	1c13      	adds	r3, r2, #0
 801d888:	b29b      	uxth	r3, r3
 801d88a:	1acb      	subs	r3, r1, r3
 801d88c:	b299      	uxth	r1, r3
 801d88e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d892:	1c13      	adds	r3, r2, #0
 801d894:	b29a      	uxth	r2, r3
 801d896:	2016      	movs	r0, #22
 801d898:	1903      	adds	r3, r0, r4
 801d89a:	19db      	adds	r3, r3, r7
 801d89c:	1a8a      	subs	r2, r1, r2
 801d89e:	801a      	strh	r2, [r3, #0]

	yr += 1;
 801d8a0:	0001      	movs	r1, r0
 801d8a2:	190b      	adds	r3, r1, r4
 801d8a4:	19db      	adds	r3, r3, r7
 801d8a6:	190a      	adds	r2, r1, r4
 801d8a8:	19d2      	adds	r2, r2, r7
 801d8aa:	8812      	ldrh	r2, [r2, #0]
 801d8ac:	3201      	adds	r2, #1
 801d8ae:	801a      	strh	r2, [r3, #0]

	Nowdatetime.dd=yr;
 801d8b0:	190b      	adds	r3, r1, r4
 801d8b2:	19db      	adds	r3, r3, r7
 801d8b4:	881b      	ldrh	r3, [r3, #0]
 801d8b6:	b2da      	uxtb	r2, r3
 801d8b8:	4b1d      	ldr	r3, [pc, #116]	; (801d930 <calcdatetime+0x420>)
 801d8ba:	70da      	strb	r2, [r3, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 801d8bc:	6938      	ldr	r0, [r7, #16]
 801d8be:	6979      	ldr	r1, [r7, #20]
 801d8c0:	4a1c      	ldr	r2, [pc, #112]	; (801d934 <calcdatetime+0x424>)
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	f7e4 fe0c 	bl	80024e0 <__aeabi_uldivmod>
 801d8c8:	613a      	str	r2, [r7, #16]
 801d8ca:	617b      	str	r3, [r7, #20]
	Nowdatetime.hh = seconds/3600;
 801d8cc:	6938      	ldr	r0, [r7, #16]
 801d8ce:	6979      	ldr	r1, [r7, #20]
 801d8d0:	22e1      	movs	r2, #225	; 0xe1
 801d8d2:	0112      	lsls	r2, r2, #4
 801d8d4:	2300      	movs	r3, #0
 801d8d6:	f7e4 fe03 	bl	80024e0 <__aeabi_uldivmod>
 801d8da:	0002      	movs	r2, r0
 801d8dc:	000b      	movs	r3, r1
 801d8de:	b2d2      	uxtb	r2, r2
 801d8e0:	4b13      	ldr	r3, [pc, #76]	; (801d930 <calcdatetime+0x420>)
 801d8e2:	711a      	strb	r2, [r3, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 801d8e4:	6938      	ldr	r0, [r7, #16]
 801d8e6:	6979      	ldr	r1, [r7, #20]
 801d8e8:	22e1      	movs	r2, #225	; 0xe1
 801d8ea:	0112      	lsls	r2, r2, #4
 801d8ec:	2300      	movs	r3, #0
 801d8ee:	f7e4 fdf7 	bl	80024e0 <__aeabi_uldivmod>
 801d8f2:	0010      	movs	r0, r2
 801d8f4:	0019      	movs	r1, r3
 801d8f6:	223c      	movs	r2, #60	; 0x3c
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	f7e4 fdf1 	bl	80024e0 <__aeabi_uldivmod>
 801d8fe:	0002      	movs	r2, r0
 801d900:	000b      	movs	r3, r1
 801d902:	b2d2      	uxtb	r2, r2
 801d904:	4b0a      	ldr	r3, [pc, #40]	; (801d930 <calcdatetime+0x420>)
 801d906:	715a      	strb	r2, [r3, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 801d908:	6938      	ldr	r0, [r7, #16]
 801d90a:	6979      	ldr	r1, [r7, #20]
 801d90c:	22e1      	movs	r2, #225	; 0xe1
 801d90e:	0112      	lsls	r2, r2, #4
 801d910:	2300      	movs	r3, #0
 801d912:	f7e4 fde5 	bl	80024e0 <__aeabi_uldivmod>
 801d916:	0010      	movs	r0, r2
 801d918:	0019      	movs	r1, r3
 801d91a:	223c      	movs	r2, #60	; 0x3c
 801d91c:	2300      	movs	r3, #0
 801d91e:	f7e4 fddf 	bl	80024e0 <__aeabi_uldivmod>
 801d922:	b2d2      	uxtb	r2, r2
 801d924:	4b02      	ldr	r3, [pc, #8]	; (801d930 <calcdatetime+0x420>)
 801d926:	719a      	strb	r2, [r3, #6]

}
 801d928:	46c0      	nop			; (mov r8, r8)
 801d92a:	46bd      	mov	sp, r7
 801d92c:	b019      	add	sp, #100	; 0x64
 801d92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d930:	20007b60 	.word	0x20007b60
 801d934:	00015180 	.word	0x00015180

0801d938 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */
void unescape_http_url(
	char *url /**< pointer to be converted ( escape characters )*/
)
{
 801d938:	b590      	push	{r4, r7, lr}
 801d93a:	b085      	sub	sp, #20
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y)
 801d940:	2300      	movs	r3, #0
 801d942:	60fb      	str	r3, [r7, #12]
 801d944:	2300      	movs	r3, #0
 801d946:	60bb      	str	r3, [r7, #8]
 801d948:	e02e      	b.n	801d9a8 <unescape_http_url+0x70>
	{
		if ((url[x] = url[y]) == '%')
 801d94a:	68bb      	ldr	r3, [r7, #8]
 801d94c:	687a      	ldr	r2, [r7, #4]
 801d94e:	18d2      	adds	r2, r2, r3
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	6879      	ldr	r1, [r7, #4]
 801d954:	18cb      	adds	r3, r1, r3
 801d956:	7812      	ldrb	r2, [r2, #0]
 801d958:	701a      	strb	r2, [r3, #0]
 801d95a:	781b      	ldrb	r3, [r3, #0]
 801d95c:	2b25      	cmp	r3, #37	; 0x25
 801d95e:	d11d      	bne.n	801d99c <unescape_http_url+0x64>
		{
			url[x] = C2D(url[y + 1]) * 0x10 + C2D(url[y + 2]);
 801d960:	68bb      	ldr	r3, [r7, #8]
 801d962:	3301      	adds	r3, #1
 801d964:	687a      	ldr	r2, [r7, #4]
 801d966:	18d3      	adds	r3, r2, r3
 801d968:	781b      	ldrb	r3, [r3, #0]
 801d96a:	0018      	movs	r0, r3
 801d96c:	f001 fa0b 	bl	801ed86 <C2D>
 801d970:	0003      	movs	r3, r0
 801d972:	011b      	lsls	r3, r3, #4
 801d974:	b2dc      	uxtb	r4, r3
 801d976:	68bb      	ldr	r3, [r7, #8]
 801d978:	3302      	adds	r3, #2
 801d97a:	687a      	ldr	r2, [r7, #4]
 801d97c:	18d3      	adds	r3, r2, r3
 801d97e:	781b      	ldrb	r3, [r3, #0]
 801d980:	0018      	movs	r0, r3
 801d982:	f001 fa00 	bl	801ed86 <C2D>
 801d986:	0003      	movs	r3, r0
 801d988:	0019      	movs	r1, r3
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	687a      	ldr	r2, [r7, #4]
 801d98e:	18d3      	adds	r3, r2, r3
 801d990:	1862      	adds	r2, r4, r1
 801d992:	b2d2      	uxtb	r2, r2
 801d994:	701a      	strb	r2, [r3, #0]
			y += 2;
 801d996:	68bb      	ldr	r3, [r7, #8]
 801d998:	3302      	adds	r3, #2
 801d99a:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y)
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	3301      	adds	r3, #1
 801d9a0:	60fb      	str	r3, [r7, #12]
 801d9a2:	68bb      	ldr	r3, [r7, #8]
 801d9a4:	3301      	adds	r3, #1
 801d9a6:	60bb      	str	r3, [r7, #8]
 801d9a8:	68bb      	ldr	r3, [r7, #8]
 801d9aa:	687a      	ldr	r2, [r7, #4]
 801d9ac:	18d3      	adds	r3, r2, r3
 801d9ae:	781b      	ldrb	r3, [r3, #0]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d1ca      	bne.n	801d94a <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	687a      	ldr	r2, [r7, #4]
 801d9b8:	18d3      	adds	r3, r2, r3
 801d9ba:	2200      	movs	r2, #0
 801d9bc:	701a      	strb	r2, [r3, #0]
}
 801d9be:	46c0      	nop			; (mov r8, r8)
 801d9c0:	46bd      	mov	sp, r7
 801d9c2:	b005      	add	sp, #20
 801d9c4:	bd90      	pop	{r4, r7, pc}
	...

0801d9c8 <make_http_response_head>:
void make_http_response_head(
	char *buf,	 /**< pointer to response header to be made */
	char type,	 /**< response type */
	uint32_t len /**< size of response header */
)
{
 801d9c8:	b590      	push	{r4, r7, lr}
 801d9ca:	b089      	sub	sp, #36	; 0x24
 801d9cc:	af00      	add	r7, sp, #0
 801d9ce:	60f8      	str	r0, [r7, #12]
 801d9d0:	607a      	str	r2, [r7, #4]
 801d9d2:	200b      	movs	r0, #11
 801d9d4:	183b      	adds	r3, r7, r0
 801d9d6:	1c0a      	adds	r2, r1, #0
 801d9d8:	701a      	strb	r2, [r3, #0]
	char *head;
	char tmp[10];

	/*  file type*/
	if (type == PTYPE_HTML)
 801d9da:	183b      	adds	r3, r7, r0
 801d9dc:	781b      	ldrb	r3, [r3, #0]
 801d9de:	2b01      	cmp	r3, #1
 801d9e0:	d102      	bne.n	801d9e8 <make_http_response_head+0x20>
		head = RES_HTMLHEAD_OK;
 801d9e2:	4b55      	ldr	r3, [pc, #340]	; (801db38 <make_http_response_head+0x170>)
 801d9e4:	61fb      	str	r3, [r7, #28]
 801d9e6:	e081      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_GIF)
 801d9e8:	230b      	movs	r3, #11
 801d9ea:	18fb      	adds	r3, r7, r3
 801d9ec:	781b      	ldrb	r3, [r3, #0]
 801d9ee:	2b02      	cmp	r3, #2
 801d9f0:	d102      	bne.n	801d9f8 <make_http_response_head+0x30>
		head = RES_GIFHEAD_OK;
 801d9f2:	4b52      	ldr	r3, [pc, #328]	; (801db3c <make_http_response_head+0x174>)
 801d9f4:	61fb      	str	r3, [r7, #28]
 801d9f6:	e079      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_TEXT)
 801d9f8:	230b      	movs	r3, #11
 801d9fa:	18fb      	adds	r3, r7, r3
 801d9fc:	781b      	ldrb	r3, [r3, #0]
 801d9fe:	2b03      	cmp	r3, #3
 801da00:	d102      	bne.n	801da08 <make_http_response_head+0x40>
		head = RES_TEXTHEAD_OK;
 801da02:	4b4f      	ldr	r3, [pc, #316]	; (801db40 <make_http_response_head+0x178>)
 801da04:	61fb      	str	r3, [r7, #28]
 801da06:	e071      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_JPEG)
 801da08:	230b      	movs	r3, #11
 801da0a:	18fb      	adds	r3, r7, r3
 801da0c:	781b      	ldrb	r3, [r3, #0]
 801da0e:	2b04      	cmp	r3, #4
 801da10:	d102      	bne.n	801da18 <make_http_response_head+0x50>
		head = RES_JPEGHEAD_OK;
 801da12:	4b4c      	ldr	r3, [pc, #304]	; (801db44 <make_http_response_head+0x17c>)
 801da14:	61fb      	str	r3, [r7, #28]
 801da16:	e069      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_FLASH)
 801da18:	230b      	movs	r3, #11
 801da1a:	18fb      	adds	r3, r7, r3
 801da1c:	781b      	ldrb	r3, [r3, #0]
 801da1e:	2b05      	cmp	r3, #5
 801da20:	d102      	bne.n	801da28 <make_http_response_head+0x60>
		head = RES_FLASHHEAD_OK;
 801da22:	4b49      	ldr	r3, [pc, #292]	; (801db48 <make_http_response_head+0x180>)
 801da24:	61fb      	str	r3, [r7, #28]
 801da26:	e061      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_XML)
 801da28:	230b      	movs	r3, #11
 801da2a:	18fb      	adds	r3, r7, r3
 801da2c:	781b      	ldrb	r3, [r3, #0]
 801da2e:	2b09      	cmp	r3, #9
 801da30:	d102      	bne.n	801da38 <make_http_response_head+0x70>
		head = RES_XMLHEAD_OK;
 801da32:	4b46      	ldr	r3, [pc, #280]	; (801db4c <make_http_response_head+0x184>)
 801da34:	61fb      	str	r3, [r7, #28]
 801da36:	e059      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_CSS)
 801da38:	230b      	movs	r3, #11
 801da3a:	18fb      	adds	r3, r7, r3
 801da3c:	781b      	ldrb	r3, [r3, #0]
 801da3e:	2b0a      	cmp	r3, #10
 801da40:	d102      	bne.n	801da48 <make_http_response_head+0x80>
		head = RES_CSSHEAD_OK;
 801da42:	4b43      	ldr	r3, [pc, #268]	; (801db50 <make_http_response_head+0x188>)
 801da44:	61fb      	str	r3, [r7, #28]
 801da46:	e051      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_JSON)
 801da48:	230b      	movs	r3, #11
 801da4a:	18fb      	adds	r3, r7, r3
 801da4c:	781b      	ldrb	r3, [r3, #0]
 801da4e:	2b0c      	cmp	r3, #12
 801da50:	d102      	bne.n	801da58 <make_http_response_head+0x90>
		head = RES_JSONHEAD_OK;
 801da52:	4b40      	ldr	r3, [pc, #256]	; (801db54 <make_http_response_head+0x18c>)
 801da54:	61fb      	str	r3, [r7, #28]
 801da56:	e049      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_JS)
 801da58:	230b      	movs	r3, #11
 801da5a:	18fb      	adds	r3, r7, r3
 801da5c:	781b      	ldrb	r3, [r3, #0]
 801da5e:	2b0b      	cmp	r3, #11
 801da60:	d102      	bne.n	801da68 <make_http_response_head+0xa0>
		head = RES_JSHEAD_OK;
 801da62:	4b3d      	ldr	r3, [pc, #244]	; (801db58 <make_http_response_head+0x190>)
 801da64:	61fb      	str	r3, [r7, #28]
 801da66:	e041      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_CGI)
 801da68:	230b      	movs	r3, #11
 801da6a:	18fb      	adds	r3, r7, r3
 801da6c:	781b      	ldrb	r3, [r3, #0]
 801da6e:	2b08      	cmp	r3, #8
 801da70:	d102      	bne.n	801da78 <make_http_response_head+0xb0>
		head = RES_CGIHEAD_OK;
 801da72:	4b3a      	ldr	r3, [pc, #232]	; (801db5c <make_http_response_head+0x194>)
 801da74:	61fb      	str	r3, [r7, #28]
 801da76:	e039      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_PNG)
 801da78:	230b      	movs	r3, #11
 801da7a:	18fb      	adds	r3, r7, r3
 801da7c:	781b      	ldrb	r3, [r3, #0]
 801da7e:	2b0d      	cmp	r3, #13
 801da80:	d102      	bne.n	801da88 <make_http_response_head+0xc0>
		head = RES_PNGHEAD_OK;
 801da82:	4b37      	ldr	r3, [pc, #220]	; (801db60 <make_http_response_head+0x198>)
 801da84:	61fb      	str	r3, [r7, #28]
 801da86:	e031      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_ICO)
 801da88:	230b      	movs	r3, #11
 801da8a:	18fb      	adds	r3, r7, r3
 801da8c:	781b      	ldrb	r3, [r3, #0]
 801da8e:	2b0e      	cmp	r3, #14
 801da90:	d102      	bne.n	801da98 <make_http_response_head+0xd0>
		head = RES_ICOHEAD_OK;
 801da92:	4b34      	ldr	r3, [pc, #208]	; (801db64 <make_http_response_head+0x19c>)
 801da94:	61fb      	str	r3, [r7, #28]
 801da96:	e029      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_TTF)
 801da98:	230b      	movs	r3, #11
 801da9a:	18fb      	adds	r3, r7, r3
 801da9c:	781b      	ldrb	r3, [r3, #0]
 801da9e:	2b14      	cmp	r3, #20
 801daa0:	d102      	bne.n	801daa8 <make_http_response_head+0xe0>
		head = RES_TTFHEAD_OK;
 801daa2:	4b31      	ldr	r3, [pc, #196]	; (801db68 <make_http_response_head+0x1a0>)
 801daa4:	61fb      	str	r3, [r7, #28]
 801daa6:	e021      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_OTF)
 801daa8:	230b      	movs	r3, #11
 801daaa:	18fb      	adds	r3, r7, r3
 801daac:	781b      	ldrb	r3, [r3, #0]
 801daae:	2b15      	cmp	r3, #21
 801dab0:	d102      	bne.n	801dab8 <make_http_response_head+0xf0>
		head = RES_OTFHEAD_OK;
 801dab2:	4b2e      	ldr	r3, [pc, #184]	; (801db6c <make_http_response_head+0x1a4>)
 801dab4:	61fb      	str	r3, [r7, #28]
 801dab6:	e019      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_WOFF)
 801dab8:	230b      	movs	r3, #11
 801daba:	18fb      	adds	r3, r7, r3
 801dabc:	781b      	ldrb	r3, [r3, #0]
 801dabe:	2b16      	cmp	r3, #22
 801dac0:	d102      	bne.n	801dac8 <make_http_response_head+0x100>
		head = RES_WOFFHEAD_OK;
 801dac2:	4b2b      	ldr	r3, [pc, #172]	; (801db70 <make_http_response_head+0x1a8>)
 801dac4:	61fb      	str	r3, [r7, #28]
 801dac6:	e011      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_EOT)
 801dac8:	230b      	movs	r3, #11
 801daca:	18fb      	adds	r3, r7, r3
 801dacc:	781b      	ldrb	r3, [r3, #0]
 801dace:	2b17      	cmp	r3, #23
 801dad0:	d102      	bne.n	801dad8 <make_http_response_head+0x110>
		head = RES_EOTHEAD_OK;
 801dad2:	4b28      	ldr	r3, [pc, #160]	; (801db74 <make_http_response_head+0x1ac>)
 801dad4:	61fb      	str	r3, [r7, #28]
 801dad6:	e009      	b.n	801daec <make_http_response_head+0x124>
	else if (type == PTYPE_SVG)
 801dad8:	230b      	movs	r3, #11
 801dada:	18fb      	adds	r3, r7, r3
 801dadc:	781b      	ldrb	r3, [r3, #0]
 801dade:	2b18      	cmp	r3, #24
 801dae0:	d102      	bne.n	801dae8 <make_http_response_head+0x120>
		head = RES_SVGHEAD_OK;
 801dae2:	4b25      	ldr	r3, [pc, #148]	; (801db78 <make_http_response_head+0x1b0>)
 801dae4:	61fb      	str	r3, [r7, #28]
 801dae6:	e001      	b.n	801daec <make_http_response_head+0x124>
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else
		head = NULL;
 801dae8:	2300      	movs	r3, #0
 801daea:	61fb      	str	r3, [r7, #28]
#endif

	sprintf(tmp, "%ld", len);
 801daec:	687a      	ldr	r2, [r7, #4]
 801daee:	4923      	ldr	r1, [pc, #140]	; (801db7c <make_http_response_head+0x1b4>)
 801daf0:	2410      	movs	r4, #16
 801daf2:	193b      	adds	r3, r7, r4
 801daf4:	0018      	movs	r0, r3
 801daf6:	f004 ff3b 	bl	8022970 <siprintf>
	strcpy(buf, head);
 801dafa:	69fa      	ldr	r2, [r7, #28]
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	0011      	movs	r1, r2
 801db00:	0018      	movs	r0, r3
 801db02:	f005 ff29 	bl	8023958 <strcpy>
	strcat(buf, tmp);
 801db06:	193a      	adds	r2, r7, r4
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	0011      	movs	r1, r2
 801db0c:	0018      	movs	r0, r3
 801db0e:	f005 f84b 	bl	8022ba8 <strcat>
	strcat(buf, "\r\n\r\n");
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	0018      	movs	r0, r3
 801db16:	f7e4 fafd 	bl	8002114 <strlen>
 801db1a:	0003      	movs	r3, r0
 801db1c:	001a      	movs	r2, r3
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	189a      	adds	r2, r3, r2
 801db22:	4b17      	ldr	r3, [pc, #92]	; (801db80 <make_http_response_head+0x1b8>)
 801db24:	0010      	movs	r0, r2
 801db26:	0019      	movs	r1, r3
 801db28:	2305      	movs	r3, #5
 801db2a:	001a      	movs	r2, r3
 801db2c:	f005 ff1c 	bl	8023968 <memcpy>
}
 801db30:	46c0      	nop			; (mov r8, r8)
 801db32:	46bd      	mov	sp, r7
 801db34:	b009      	add	sp, #36	; 0x24
 801db36:	bd90      	pop	{r4, r7, pc}
 801db38:	08030d2c 	.word	0x08030d2c
 801db3c:	08030d80 	.word	0x08030d80
 801db40:	08030dbc 	.word	0x08030dbc
 801db44:	08030df8 	.word	0x08030df8
 801db48:	08030e34 	.word	0x08030e34
 801db4c:	08030e84 	.word	0x08030e84
 801db50:	08030ed8 	.word	0x08030ed8
 801db54:	08030f14 	.word	0x08030f14
 801db58:	08030f58 	.word	0x08030f58
 801db5c:	08030fa0 	.word	0x08030fa0
 801db60:	08030fdc 	.word	0x08030fdc
 801db64:	08031018 	.word	0x08031018
 801db68:	08031058 	.word	0x08031058
 801db6c:	080310a8 	.word	0x080310a8
 801db70:	080310f8 	.word	0x080310f8
 801db74:	08031140 	.word	0x08031140
 801db78:	08031190 	.word	0x08031190
 801db7c:	080311d0 	.word	0x080311d0
 801db80:	080311d4 	.word	0x080311d4

0801db84 <find_http_uri_type>:
 */
void find_http_uri_type(
	uint8_t *type, /**< type to be returned */
	uint8_t *buff  /**< file name */
)
{
 801db84:	b580      	push	{r7, lr}
 801db86:	b084      	sub	sp, #16
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
 801db8c:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char *buf;
	buf = (char *)buff;
 801db8e:	683b      	ldr	r3, [r7, #0]
 801db90:	60fb      	str	r3, [r7, #12]

	if (strstr(buf, ".htm") || strstr(buf, ".html"))
 801db92:	4ab8      	ldr	r2, [pc, #736]	; (801de74 <find_http_uri_type+0x2f0>)
 801db94:	68fb      	ldr	r3, [r7, #12]
 801db96:	0011      	movs	r1, r2
 801db98:	0018      	movs	r0, r3
 801db9a:	f005 f8ad 	bl	8022cf8 <strstr>
 801db9e:	1e03      	subs	r3, r0, #0
 801dba0:	d107      	bne.n	801dbb2 <find_http_uri_type+0x2e>
 801dba2:	4ab5      	ldr	r2, [pc, #724]	; (801de78 <find_http_uri_type+0x2f4>)
 801dba4:	68fb      	ldr	r3, [r7, #12]
 801dba6:	0011      	movs	r1, r2
 801dba8:	0018      	movs	r0, r3
 801dbaa:	f005 f8a5 	bl	8022cf8 <strstr>
 801dbae:	1e03      	subs	r3, r0, #0
 801dbb0:	d003      	beq.n	801dbba <find_http_uri_type+0x36>
		*type = PTYPE_HTML;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	2201      	movs	r2, #1
 801dbb6:	701a      	strb	r2, [r3, #0]
 801dbb8:	e19e      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".gif"))
 801dbba:	4ab0      	ldr	r2, [pc, #704]	; (801de7c <find_http_uri_type+0x2f8>)
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	0011      	movs	r1, r2
 801dbc0:	0018      	movs	r0, r3
 801dbc2:	f005 f899 	bl	8022cf8 <strstr>
 801dbc6:	1e03      	subs	r3, r0, #0
 801dbc8:	d003      	beq.n	801dbd2 <find_http_uri_type+0x4e>
		*type = PTYPE_GIF;
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	2202      	movs	r2, #2
 801dbce:	701a      	strb	r2, [r3, #0]
		*type = PTYPE_SVG;
	else if (strstr(buf, ".bin") || strstr(buf, ".SVG"))
		*type = PTYPE_SVG;
	else
		*type = PTYPE_ERR;
}
 801dbd0:	e192      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".text") || strstr(buf, ".txt"))
 801dbd2:	4aab      	ldr	r2, [pc, #684]	; (801de80 <find_http_uri_type+0x2fc>)
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	0011      	movs	r1, r2
 801dbd8:	0018      	movs	r0, r3
 801dbda:	f005 f88d 	bl	8022cf8 <strstr>
 801dbde:	1e03      	subs	r3, r0, #0
 801dbe0:	d107      	bne.n	801dbf2 <find_http_uri_type+0x6e>
 801dbe2:	4aa8      	ldr	r2, [pc, #672]	; (801de84 <find_http_uri_type+0x300>)
 801dbe4:	68fb      	ldr	r3, [r7, #12]
 801dbe6:	0011      	movs	r1, r2
 801dbe8:	0018      	movs	r0, r3
 801dbea:	f005 f885 	bl	8022cf8 <strstr>
 801dbee:	1e03      	subs	r3, r0, #0
 801dbf0:	d003      	beq.n	801dbfa <find_http_uri_type+0x76>
		*type = PTYPE_TEXT;
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	2203      	movs	r2, #3
 801dbf6:	701a      	strb	r2, [r3, #0]
 801dbf8:	e17e      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".jpeg") || strstr(buf, ".jpg"))
 801dbfa:	4aa3      	ldr	r2, [pc, #652]	; (801de88 <find_http_uri_type+0x304>)
 801dbfc:	68fb      	ldr	r3, [r7, #12]
 801dbfe:	0011      	movs	r1, r2
 801dc00:	0018      	movs	r0, r3
 801dc02:	f005 f879 	bl	8022cf8 <strstr>
 801dc06:	1e03      	subs	r3, r0, #0
 801dc08:	d107      	bne.n	801dc1a <find_http_uri_type+0x96>
 801dc0a:	4aa0      	ldr	r2, [pc, #640]	; (801de8c <find_http_uri_type+0x308>)
 801dc0c:	68fb      	ldr	r3, [r7, #12]
 801dc0e:	0011      	movs	r1, r2
 801dc10:	0018      	movs	r0, r3
 801dc12:	f005 f871 	bl	8022cf8 <strstr>
 801dc16:	1e03      	subs	r3, r0, #0
 801dc18:	d003      	beq.n	801dc22 <find_http_uri_type+0x9e>
		*type = PTYPE_JPEG;
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	2204      	movs	r2, #4
 801dc1e:	701a      	strb	r2, [r3, #0]
 801dc20:	e16a      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".swf"))
 801dc22:	4a9b      	ldr	r2, [pc, #620]	; (801de90 <find_http_uri_type+0x30c>)
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	0011      	movs	r1, r2
 801dc28:	0018      	movs	r0, r3
 801dc2a:	f005 f865 	bl	8022cf8 <strstr>
 801dc2e:	1e03      	subs	r3, r0, #0
 801dc30:	d003      	beq.n	801dc3a <find_http_uri_type+0xb6>
		*type = PTYPE_FLASH;
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	2205      	movs	r2, #5
 801dc36:	701a      	strb	r2, [r3, #0]
}
 801dc38:	e15e      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".cgi") || strstr(buf, ".CGI"))
 801dc3a:	4a96      	ldr	r2, [pc, #600]	; (801de94 <find_http_uri_type+0x310>)
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	0011      	movs	r1, r2
 801dc40:	0018      	movs	r0, r3
 801dc42:	f005 f859 	bl	8022cf8 <strstr>
 801dc46:	1e03      	subs	r3, r0, #0
 801dc48:	d107      	bne.n	801dc5a <find_http_uri_type+0xd6>
 801dc4a:	4a93      	ldr	r2, [pc, #588]	; (801de98 <find_http_uri_type+0x314>)
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	0011      	movs	r1, r2
 801dc50:	0018      	movs	r0, r3
 801dc52:	f005 f851 	bl	8022cf8 <strstr>
 801dc56:	1e03      	subs	r3, r0, #0
 801dc58:	d003      	beq.n	801dc62 <find_http_uri_type+0xde>
		*type = PTYPE_CGI;
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	2208      	movs	r2, #8
 801dc5e:	701a      	strb	r2, [r3, #0]
 801dc60:	e14a      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".json") || strstr(buf, ".JSON"))
 801dc62:	4a8e      	ldr	r2, [pc, #568]	; (801de9c <find_http_uri_type+0x318>)
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	0011      	movs	r1, r2
 801dc68:	0018      	movs	r0, r3
 801dc6a:	f005 f845 	bl	8022cf8 <strstr>
 801dc6e:	1e03      	subs	r3, r0, #0
 801dc70:	d107      	bne.n	801dc82 <find_http_uri_type+0xfe>
 801dc72:	4a8b      	ldr	r2, [pc, #556]	; (801dea0 <find_http_uri_type+0x31c>)
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	0011      	movs	r1, r2
 801dc78:	0018      	movs	r0, r3
 801dc7a:	f005 f83d 	bl	8022cf8 <strstr>
 801dc7e:	1e03      	subs	r3, r0, #0
 801dc80:	d003      	beq.n	801dc8a <find_http_uri_type+0x106>
		*type = PTYPE_JSON;
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	220c      	movs	r2, #12
 801dc86:	701a      	strb	r2, [r3, #0]
 801dc88:	e136      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".js") || strstr(buf, ".JS"))
 801dc8a:	4a86      	ldr	r2, [pc, #536]	; (801dea4 <find_http_uri_type+0x320>)
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	0011      	movs	r1, r2
 801dc90:	0018      	movs	r0, r3
 801dc92:	f005 f831 	bl	8022cf8 <strstr>
 801dc96:	1e03      	subs	r3, r0, #0
 801dc98:	d107      	bne.n	801dcaa <find_http_uri_type+0x126>
 801dc9a:	4a83      	ldr	r2, [pc, #524]	; (801dea8 <find_http_uri_type+0x324>)
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	0011      	movs	r1, r2
 801dca0:	0018      	movs	r0, r3
 801dca2:	f005 f829 	bl	8022cf8 <strstr>
 801dca6:	1e03      	subs	r3, r0, #0
 801dca8:	d003      	beq.n	801dcb2 <find_http_uri_type+0x12e>
		*type = PTYPE_JS;
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	220b      	movs	r2, #11
 801dcae:	701a      	strb	r2, [r3, #0]
 801dcb0:	e122      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".CGI") || strstr(buf, ".cgi"))
 801dcb2:	4a79      	ldr	r2, [pc, #484]	; (801de98 <find_http_uri_type+0x314>)
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	0011      	movs	r1, r2
 801dcb8:	0018      	movs	r0, r3
 801dcba:	f005 f81d 	bl	8022cf8 <strstr>
 801dcbe:	1e03      	subs	r3, r0, #0
 801dcc0:	d107      	bne.n	801dcd2 <find_http_uri_type+0x14e>
 801dcc2:	4a74      	ldr	r2, [pc, #464]	; (801de94 <find_http_uri_type+0x310>)
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	0011      	movs	r1, r2
 801dcc8:	0018      	movs	r0, r3
 801dcca:	f005 f815 	bl	8022cf8 <strstr>
 801dcce:	1e03      	subs	r3, r0, #0
 801dcd0:	d003      	beq.n	801dcda <find_http_uri_type+0x156>
		*type = PTYPE_CGI;
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	2208      	movs	r2, #8
 801dcd6:	701a      	strb	r2, [r3, #0]
 801dcd8:	e10e      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".xml") || strstr(buf, ".XML"))
 801dcda:	4a74      	ldr	r2, [pc, #464]	; (801deac <find_http_uri_type+0x328>)
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	0011      	movs	r1, r2
 801dce0:	0018      	movs	r0, r3
 801dce2:	f005 f809 	bl	8022cf8 <strstr>
 801dce6:	1e03      	subs	r3, r0, #0
 801dce8:	d107      	bne.n	801dcfa <find_http_uri_type+0x176>
 801dcea:	4a71      	ldr	r2, [pc, #452]	; (801deb0 <find_http_uri_type+0x32c>)
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	0011      	movs	r1, r2
 801dcf0:	0018      	movs	r0, r3
 801dcf2:	f005 f801 	bl	8022cf8 <strstr>
 801dcf6:	1e03      	subs	r3, r0, #0
 801dcf8:	d003      	beq.n	801dd02 <find_http_uri_type+0x17e>
		*type = PTYPE_XML;
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	2209      	movs	r2, #9
 801dcfe:	701a      	strb	r2, [r3, #0]
 801dd00:	e0fa      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".css") || strstr(buf, ".CSS"))
 801dd02:	4a6c      	ldr	r2, [pc, #432]	; (801deb4 <find_http_uri_type+0x330>)
 801dd04:	68fb      	ldr	r3, [r7, #12]
 801dd06:	0011      	movs	r1, r2
 801dd08:	0018      	movs	r0, r3
 801dd0a:	f004 fff5 	bl	8022cf8 <strstr>
 801dd0e:	1e03      	subs	r3, r0, #0
 801dd10:	d107      	bne.n	801dd22 <find_http_uri_type+0x19e>
 801dd12:	4a69      	ldr	r2, [pc, #420]	; (801deb8 <find_http_uri_type+0x334>)
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	0011      	movs	r1, r2
 801dd18:	0018      	movs	r0, r3
 801dd1a:	f004 ffed 	bl	8022cf8 <strstr>
 801dd1e:	1e03      	subs	r3, r0, #0
 801dd20:	d003      	beq.n	801dd2a <find_http_uri_type+0x1a6>
		*type = PTYPE_CSS;
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	220a      	movs	r2, #10
 801dd26:	701a      	strb	r2, [r3, #0]
 801dd28:	e0e6      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".png") || strstr(buf, ".PNG"))
 801dd2a:	4a64      	ldr	r2, [pc, #400]	; (801debc <find_http_uri_type+0x338>)
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	0011      	movs	r1, r2
 801dd30:	0018      	movs	r0, r3
 801dd32:	f004 ffe1 	bl	8022cf8 <strstr>
 801dd36:	1e03      	subs	r3, r0, #0
 801dd38:	d107      	bne.n	801dd4a <find_http_uri_type+0x1c6>
 801dd3a:	4a61      	ldr	r2, [pc, #388]	; (801dec0 <find_http_uri_type+0x33c>)
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	0011      	movs	r1, r2
 801dd40:	0018      	movs	r0, r3
 801dd42:	f004 ffd9 	bl	8022cf8 <strstr>
 801dd46:	1e03      	subs	r3, r0, #0
 801dd48:	d003      	beq.n	801dd52 <find_http_uri_type+0x1ce>
		*type = PTYPE_PNG;
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	220d      	movs	r2, #13
 801dd4e:	701a      	strb	r2, [r3, #0]
 801dd50:	e0d2      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".ico") || strstr(buf, ".ICO"))
 801dd52:	4a5c      	ldr	r2, [pc, #368]	; (801dec4 <find_http_uri_type+0x340>)
 801dd54:	68fb      	ldr	r3, [r7, #12]
 801dd56:	0011      	movs	r1, r2
 801dd58:	0018      	movs	r0, r3
 801dd5a:	f004 ffcd 	bl	8022cf8 <strstr>
 801dd5e:	1e03      	subs	r3, r0, #0
 801dd60:	d107      	bne.n	801dd72 <find_http_uri_type+0x1ee>
 801dd62:	4a59      	ldr	r2, [pc, #356]	; (801dec8 <find_http_uri_type+0x344>)
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	0011      	movs	r1, r2
 801dd68:	0018      	movs	r0, r3
 801dd6a:	f004 ffc5 	bl	8022cf8 <strstr>
 801dd6e:	1e03      	subs	r3, r0, #0
 801dd70:	d003      	beq.n	801dd7a <find_http_uri_type+0x1f6>
		*type = PTYPE_ICO;
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	220e      	movs	r2, #14
 801dd76:	701a      	strb	r2, [r3, #0]
 801dd78:	e0be      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".ttf") || strstr(buf, ".TTF"))
 801dd7a:	4a54      	ldr	r2, [pc, #336]	; (801decc <find_http_uri_type+0x348>)
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	0011      	movs	r1, r2
 801dd80:	0018      	movs	r0, r3
 801dd82:	f004 ffb9 	bl	8022cf8 <strstr>
 801dd86:	1e03      	subs	r3, r0, #0
 801dd88:	d107      	bne.n	801dd9a <find_http_uri_type+0x216>
 801dd8a:	4a51      	ldr	r2, [pc, #324]	; (801ded0 <find_http_uri_type+0x34c>)
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	0011      	movs	r1, r2
 801dd90:	0018      	movs	r0, r3
 801dd92:	f004 ffb1 	bl	8022cf8 <strstr>
 801dd96:	1e03      	subs	r3, r0, #0
 801dd98:	d003      	beq.n	801dda2 <find_http_uri_type+0x21e>
		*type = PTYPE_TTF;
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	2214      	movs	r2, #20
 801dd9e:	701a      	strb	r2, [r3, #0]
 801dda0:	e0aa      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".otf") || strstr(buf, ".OTF"))
 801dda2:	4a4c      	ldr	r2, [pc, #304]	; (801ded4 <find_http_uri_type+0x350>)
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	0011      	movs	r1, r2
 801dda8:	0018      	movs	r0, r3
 801ddaa:	f004 ffa5 	bl	8022cf8 <strstr>
 801ddae:	1e03      	subs	r3, r0, #0
 801ddb0:	d107      	bne.n	801ddc2 <find_http_uri_type+0x23e>
 801ddb2:	4a49      	ldr	r2, [pc, #292]	; (801ded8 <find_http_uri_type+0x354>)
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	0011      	movs	r1, r2
 801ddb8:	0018      	movs	r0, r3
 801ddba:	f004 ff9d 	bl	8022cf8 <strstr>
 801ddbe:	1e03      	subs	r3, r0, #0
 801ddc0:	d003      	beq.n	801ddca <find_http_uri_type+0x246>
		*type = PTYPE_OTF;
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	2215      	movs	r2, #21
 801ddc6:	701a      	strb	r2, [r3, #0]
 801ddc8:	e096      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".woff") || strstr(buf, ".WOFF"))
 801ddca:	4a44      	ldr	r2, [pc, #272]	; (801dedc <find_http_uri_type+0x358>)
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	0011      	movs	r1, r2
 801ddd0:	0018      	movs	r0, r3
 801ddd2:	f004 ff91 	bl	8022cf8 <strstr>
 801ddd6:	1e03      	subs	r3, r0, #0
 801ddd8:	d107      	bne.n	801ddea <find_http_uri_type+0x266>
 801ddda:	4a41      	ldr	r2, [pc, #260]	; (801dee0 <find_http_uri_type+0x35c>)
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	0011      	movs	r1, r2
 801dde0:	0018      	movs	r0, r3
 801dde2:	f004 ff89 	bl	8022cf8 <strstr>
 801dde6:	1e03      	subs	r3, r0, #0
 801dde8:	d003      	beq.n	801ddf2 <find_http_uri_type+0x26e>
		*type = PTYPE_WOFF;
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	2216      	movs	r2, #22
 801ddee:	701a      	strb	r2, [r3, #0]
 801ddf0:	e082      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".eot") || strstr(buf, ".EOT"))
 801ddf2:	4a3c      	ldr	r2, [pc, #240]	; (801dee4 <find_http_uri_type+0x360>)
 801ddf4:	68fb      	ldr	r3, [r7, #12]
 801ddf6:	0011      	movs	r1, r2
 801ddf8:	0018      	movs	r0, r3
 801ddfa:	f004 ff7d 	bl	8022cf8 <strstr>
 801ddfe:	1e03      	subs	r3, r0, #0
 801de00:	d107      	bne.n	801de12 <find_http_uri_type+0x28e>
 801de02:	4a39      	ldr	r2, [pc, #228]	; (801dee8 <find_http_uri_type+0x364>)
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	0011      	movs	r1, r2
 801de08:	0018      	movs	r0, r3
 801de0a:	f004 ff75 	bl	8022cf8 <strstr>
 801de0e:	1e03      	subs	r3, r0, #0
 801de10:	d003      	beq.n	801de1a <find_http_uri_type+0x296>
		*type = PTYPE_EOT;
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	2217      	movs	r2, #23
 801de16:	701a      	strb	r2, [r3, #0]
 801de18:	e06e      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".svg") || strstr(buf, ".SVG"))
 801de1a:	4a34      	ldr	r2, [pc, #208]	; (801deec <find_http_uri_type+0x368>)
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	0011      	movs	r1, r2
 801de20:	0018      	movs	r0, r3
 801de22:	f004 ff69 	bl	8022cf8 <strstr>
 801de26:	1e03      	subs	r3, r0, #0
 801de28:	d107      	bne.n	801de3a <find_http_uri_type+0x2b6>
 801de2a:	4a31      	ldr	r2, [pc, #196]	; (801def0 <find_http_uri_type+0x36c>)
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	0011      	movs	r1, r2
 801de30:	0018      	movs	r0, r3
 801de32:	f004 ff61 	bl	8022cf8 <strstr>
 801de36:	1e03      	subs	r3, r0, #0
 801de38:	d003      	beq.n	801de42 <find_http_uri_type+0x2be>
		*type = PTYPE_SVG;
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	2218      	movs	r2, #24
 801de3e:	701a      	strb	r2, [r3, #0]
 801de40:	e05a      	b.n	801def8 <find_http_uri_type+0x374>
	else if (strstr(buf, ".bin") || strstr(buf, ".SVG"))
 801de42:	4a2c      	ldr	r2, [pc, #176]	; (801def4 <find_http_uri_type+0x370>)
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	0011      	movs	r1, r2
 801de48:	0018      	movs	r0, r3
 801de4a:	f004 ff55 	bl	8022cf8 <strstr>
 801de4e:	1e03      	subs	r3, r0, #0
 801de50:	d107      	bne.n	801de62 <find_http_uri_type+0x2de>
 801de52:	4a27      	ldr	r2, [pc, #156]	; (801def0 <find_http_uri_type+0x36c>)
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	0011      	movs	r1, r2
 801de58:	0018      	movs	r0, r3
 801de5a:	f004 ff4d 	bl	8022cf8 <strstr>
 801de5e:	1e03      	subs	r3, r0, #0
 801de60:	d003      	beq.n	801de6a <find_http_uri_type+0x2e6>
		*type = PTYPE_SVG;
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	2218      	movs	r2, #24
 801de66:	701a      	strb	r2, [r3, #0]
 801de68:	e046      	b.n	801def8 <find_http_uri_type+0x374>
		*type = PTYPE_ERR;
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	2200      	movs	r2, #0
 801de6e:	701a      	strb	r2, [r3, #0]
}
 801de70:	e042      	b.n	801def8 <find_http_uri_type+0x374>
 801de72:	46c0      	nop			; (mov r8, r8)
 801de74:	080311dc 	.word	0x080311dc
 801de78:	080311e4 	.word	0x080311e4
 801de7c:	080311ec 	.word	0x080311ec
 801de80:	080311f4 	.word	0x080311f4
 801de84:	080311fc 	.word	0x080311fc
 801de88:	08031204 	.word	0x08031204
 801de8c:	0803120c 	.word	0x0803120c
 801de90:	08031214 	.word	0x08031214
 801de94:	0803121c 	.word	0x0803121c
 801de98:	08031224 	.word	0x08031224
 801de9c:	0803122c 	.word	0x0803122c
 801dea0:	08031234 	.word	0x08031234
 801dea4:	0803123c 	.word	0x0803123c
 801dea8:	08031240 	.word	0x08031240
 801deac:	08031244 	.word	0x08031244
 801deb0:	0803124c 	.word	0x0803124c
 801deb4:	08031254 	.word	0x08031254
 801deb8:	0803125c 	.word	0x0803125c
 801debc:	08031264 	.word	0x08031264
 801dec0:	0803126c 	.word	0x0803126c
 801dec4:	08031274 	.word	0x08031274
 801dec8:	0803127c 	.word	0x0803127c
 801decc:	08031284 	.word	0x08031284
 801ded0:	0803128c 	.word	0x0803128c
 801ded4:	08031294 	.word	0x08031294
 801ded8:	0803129c 	.word	0x0803129c
 801dedc:	080312a4 	.word	0x080312a4
 801dee0:	080312ac 	.word	0x080312ac
 801dee4:	080312b4 	.word	0x080312b4
 801dee8:	080312bc 	.word	0x080312bc
 801deec:	080312c4 	.word	0x080312c4
 801def0:	080312cc 	.word	0x080312cc
 801def4:	080312d4 	.word	0x080312d4
 801def8:	46c0      	nop			; (mov r8, r8)
 801defa:	46bd      	mov	sp, r7
 801defc:	b004      	add	sp, #16
 801defe:	bd80      	pop	{r7, pc}

0801df00 <parse_http_request>:
 */
void parse_http_request(
	st_http_request *request, /**< request to be returned */
	uint8_t *buf			  /**< pointer to be parsed */
)
{
 801df00:	b580      	push	{r7, lr}
 801df02:	b084      	sub	sp, #16
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
 801df08:	6039      	str	r1, [r7, #0]
	char *nexttok;
	nexttok = strtok((char *)buf, " ");
 801df0a:	4a3a      	ldr	r2, [pc, #232]	; (801dff4 <parse_http_request+0xf4>)
 801df0c:	683b      	ldr	r3, [r7, #0]
 801df0e:	0011      	movs	r1, r2
 801df10:	0018      	movs	r0, r3
 801df12:	f004 fe89 	bl	8022c28 <strtok>
 801df16:	0003      	movs	r3, r0
 801df18:	60fb      	str	r3, [r7, #12]
	if (!nexttok)
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d103      	bne.n	801df28 <parse_http_request+0x28>
	{
		request->METHOD = METHOD_ERR;
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	2200      	movs	r2, #0
 801df24:	701a      	strb	r2, [r3, #0]
		return;
 801df26:	e061      	b.n	801dfec <parse_http_request+0xec>
	}
	if (!strcmp(nexttok, "GET") || !strcmp(nexttok, "get"))
 801df28:	4a33      	ldr	r2, [pc, #204]	; (801dff8 <parse_http_request+0xf8>)
 801df2a:	68fb      	ldr	r3, [r7, #12]
 801df2c:	0011      	movs	r1, r2
 801df2e:	0018      	movs	r0, r3
 801df30:	f7e4 f8e6 	bl	8002100 <strcmp>
 801df34:	1e03      	subs	r3, r0, #0
 801df36:	d007      	beq.n	801df48 <parse_http_request+0x48>
 801df38:	4a30      	ldr	r2, [pc, #192]	; (801dffc <parse_http_request+0xfc>)
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	0011      	movs	r1, r2
 801df3e:	0018      	movs	r0, r3
 801df40:	f7e4 f8de 	bl	8002100 <strcmp>
 801df44:	1e03      	subs	r3, r0, #0
 801df46:	d10a      	bne.n	801df5e <parse_http_request+0x5e>
	{
		request->METHOD = METHOD_GET;
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	2201      	movs	r2, #1
 801df4c:	701a      	strb	r2, [r3, #0]
		nexttok = strtok(NULL, " ");
 801df4e:	4b29      	ldr	r3, [pc, #164]	; (801dff4 <parse_http_request+0xf4>)
 801df50:	0019      	movs	r1, r3
 801df52:	2000      	movs	r0, #0
 801df54:	f004 fe68 	bl	8022c28 <strtok>
 801df58:	0003      	movs	r3, r0
 801df5a:	60fb      	str	r3, [r7, #12]
 801df5c:	e038      	b.n	801dfd0 <parse_http_request+0xd0>
	}
	else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok, "head"))
 801df5e:	4a28      	ldr	r2, [pc, #160]	; (801e000 <parse_http_request+0x100>)
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	0011      	movs	r1, r2
 801df64:	0018      	movs	r0, r3
 801df66:	f7e4 f8cb 	bl	8002100 <strcmp>
 801df6a:	1e03      	subs	r3, r0, #0
 801df6c:	d007      	beq.n	801df7e <parse_http_request+0x7e>
 801df6e:	4a25      	ldr	r2, [pc, #148]	; (801e004 <parse_http_request+0x104>)
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	0011      	movs	r1, r2
 801df74:	0018      	movs	r0, r3
 801df76:	f7e4 f8c3 	bl	8002100 <strcmp>
 801df7a:	1e03      	subs	r3, r0, #0
 801df7c:	d10a      	bne.n	801df94 <parse_http_request+0x94>
	{
		request->METHOD = METHOD_HEAD;
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	2202      	movs	r2, #2
 801df82:	701a      	strb	r2, [r3, #0]
		nexttok = strtok(NULL, " ");
 801df84:	4b1b      	ldr	r3, [pc, #108]	; (801dff4 <parse_http_request+0xf4>)
 801df86:	0019      	movs	r1, r3
 801df88:	2000      	movs	r0, #0
 801df8a:	f004 fe4d 	bl	8022c28 <strtok>
 801df8e:	0003      	movs	r3, r0
 801df90:	60fb      	str	r3, [r7, #12]
 801df92:	e01d      	b.n	801dfd0 <parse_http_request+0xd0>
	}
	else if (!strcmp(nexttok, "POST") || !strcmp(nexttok, "post"))
 801df94:	4a1c      	ldr	r2, [pc, #112]	; (801e008 <parse_http_request+0x108>)
 801df96:	68fb      	ldr	r3, [r7, #12]
 801df98:	0011      	movs	r1, r2
 801df9a:	0018      	movs	r0, r3
 801df9c:	f7e4 f8b0 	bl	8002100 <strcmp>
 801dfa0:	1e03      	subs	r3, r0, #0
 801dfa2:	d007      	beq.n	801dfb4 <parse_http_request+0xb4>
 801dfa4:	4a19      	ldr	r2, [pc, #100]	; (801e00c <parse_http_request+0x10c>)
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	0011      	movs	r1, r2
 801dfaa:	0018      	movs	r0, r3
 801dfac:	f7e4 f8a8 	bl	8002100 <strcmp>
 801dfb0:	1e03      	subs	r3, r0, #0
 801dfb2:	d10a      	bne.n	801dfca <parse_http_request+0xca>
	{
		nexttok = strtok(NULL, "\0");
 801dfb4:	4b16      	ldr	r3, [pc, #88]	; (801e010 <parse_http_request+0x110>)
 801dfb6:	0019      	movs	r1, r3
 801dfb8:	2000      	movs	r0, #0
 801dfba:	f004 fe35 	bl	8022c28 <strtok>
 801dfbe:	0003      	movs	r3, r0
 801dfc0:	60fb      	str	r3, [r7, #12]
		request->METHOD = METHOD_POST;
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	2203      	movs	r2, #3
 801dfc6:	701a      	strb	r2, [r3, #0]
 801dfc8:	e002      	b.n	801dfd0 <parse_http_request+0xd0>
	}
	else
	{
		request->METHOD = METHOD_ERR;
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	2200      	movs	r2, #0
 801dfce:	701a      	strb	r2, [r3, #0]
	}

	if (!nexttok)
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d103      	bne.n	801dfde <parse_http_request+0xde>
	{
		request->METHOD = METHOD_ERR;
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	2200      	movs	r2, #0
 801dfda:	701a      	strb	r2, [r3, #0]
		return;
 801dfdc:	e006      	b.n	801dfec <parse_http_request+0xec>
	}
	strcpy((char *)request->URI, nexttok);
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	3302      	adds	r3, #2
 801dfe2:	68fa      	ldr	r2, [r7, #12]
 801dfe4:	0011      	movs	r1, r2
 801dfe6:	0018      	movs	r0, r3
 801dfe8:	f005 fcb6 	bl	8023958 <strcpy>
}
 801dfec:	46bd      	mov	sp, r7
 801dfee:	b004      	add	sp, #16
 801dff0:	bd80      	pop	{r7, pc}
 801dff2:	46c0      	nop			; (mov r8, r8)
 801dff4:	080312dc 	.word	0x080312dc
 801dff8:	080312e0 	.word	0x080312e0
 801dffc:	080312e4 	.word	0x080312e4
 801e000:	080312e8 	.word	0x080312e8
 801e004:	080312f0 	.word	0x080312f0
 801e008:	080312f8 	.word	0x080312f8
 801e00c:	08031300 	.word	0x08031300
 801e010:	08031308 	.word	0x08031308

0801e014 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t *get_http_param_value(char *uri, char *param_name)
{
 801e014:	b590      	push	{r4, r7, lr}
 801e016:	b08b      	sub	sp, #44	; 0x2c
 801e018:	af00      	add	r7, sp, #0
 801e01a:	6078      	str	r0, [r7, #4]
 801e01c:	6039      	str	r1, [r7, #0]

	uint8_t *name = 0;
 801e01e:	2300      	movs	r3, #0
 801e020:	623b      	str	r3, [r7, #32]
	uint8_t *ret = BUFPUB;
 801e022:	4b4b      	ldr	r3, [pc, #300]	; (801e150 <get_http_param_value+0x13c>)
 801e024:	61fb      	str	r3, [r7, #28]
	uint8_t *pos2;
	uint16_t len = 0, content_len = 0;
 801e026:	231a      	movs	r3, #26
 801e028:	18fb      	adds	r3, r7, r3
 801e02a:	2200      	movs	r2, #0
 801e02c:	801a      	strh	r2, [r3, #0]
 801e02e:	2318      	movs	r3, #24
 801e030:	18fb      	adds	r3, r7, r3
 801e032:	2200      	movs	r2, #0
 801e034:	801a      	strh	r2, [r3, #0]
	uint8_t tmp_buf[10] = {
 801e036:	230c      	movs	r3, #12
 801e038:	18fb      	adds	r3, r7, r3
 801e03a:	2200      	movs	r2, #0
 801e03c:	601a      	str	r2, [r3, #0]
 801e03e:	3304      	adds	r3, #4
 801e040:	2206      	movs	r2, #6
 801e042:	2100      	movs	r1, #0
 801e044:	0018      	movs	r0, r3
 801e046:	f004 fda7 	bl	8022b98 <memset>
		0x00,
	};

	if (!uri || !param_name)
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d002      	beq.n	801e056 <get_http_param_value+0x42>
 801e050:	683b      	ldr	r3, [r7, #0]
 801e052:	2b00      	cmp	r3, #0
 801e054:	d101      	bne.n	801e05a <get_http_param_value+0x46>
		return 0;
 801e056:	2300      	movs	r3, #0
 801e058:	e075      	b.n	801e146 <get_http_param_value+0x132>

	/***************/
	mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf);
 801e05a:	240c      	movs	r4, #12
 801e05c:	193b      	adds	r3, r7, r4
 801e05e:	4a3d      	ldr	r2, [pc, #244]	; (801e154 <get_http_param_value+0x140>)
 801e060:	493d      	ldr	r1, [pc, #244]	; (801e158 <get_http_param_value+0x144>)
 801e062:	6878      	ldr	r0, [r7, #4]
 801e064:	f000 fe2e 	bl	801ecc4 <mid>
	content_len = ATOI(tmp_buf, 10);
 801e068:	193b      	adds	r3, r7, r4
 801e06a:	210a      	movs	r1, #10
 801e06c:	0018      	movs	r0, r3
 801e06e:	f000 fe03 	bl	801ec78 <ATOI>
 801e072:	0002      	movs	r2, r0
 801e074:	2418      	movs	r4, #24
 801e076:	193b      	adds	r3, r7, r4
 801e078:	801a      	strh	r2, [r3, #0]
	uri = strstr(uri, "\r\n\r\n");
 801e07a:	4a38      	ldr	r2, [pc, #224]	; (801e15c <get_http_param_value+0x148>)
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	0011      	movs	r1, r2
 801e080:	0018      	movs	r0, r3
 801e082:	f004 fe39 	bl	8022cf8 <strstr>
 801e086:	0003      	movs	r3, r0
 801e088:	607b      	str	r3, [r7, #4]
	uri += 4;
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	3304      	adds	r3, #4
 801e08e:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801e090:	193b      	adds	r3, r7, r4
 801e092:	881b      	ldrh	r3, [r3, #0]
 801e094:	687a      	ldr	r2, [r7, #4]
 801e096:	18d3      	adds	r3, r2, r3
 801e098:	2200      	movs	r2, #0
 801e09a:	701a      	strb	r2, [r3, #0]
	/***************/

	if ((name = (uint8_t *)strstr(uri, param_name)))
 801e09c:	683a      	ldr	r2, [r7, #0]
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	0011      	movs	r1, r2
 801e0a2:	0018      	movs	r0, r3
 801e0a4:	f004 fe28 	bl	8022cf8 <strstr>
 801e0a8:	0003      	movs	r3, r0
 801e0aa:	623b      	str	r3, [r7, #32]
 801e0ac:	6a3b      	ldr	r3, [r7, #32]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d040      	beq.n	801e134 <get_http_param_value+0x120>
	{
		name += strlen(param_name) + 1;
 801e0b2:	683b      	ldr	r3, [r7, #0]
 801e0b4:	0018      	movs	r0, r3
 801e0b6:	f7e4 f82d 	bl	8002114 <strlen>
 801e0ba:	0003      	movs	r3, r0
 801e0bc:	3301      	adds	r3, #1
 801e0be:	6a3a      	ldr	r2, [r7, #32]
 801e0c0:	18d3      	adds	r3, r2, r3
 801e0c2:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t *)strstr((char *)name, "&");
 801e0c4:	6a3b      	ldr	r3, [r7, #32]
 801e0c6:	2126      	movs	r1, #38	; 0x26
 801e0c8:	0018      	movs	r0, r3
 801e0ca:	f004 fd7a 	bl	8022bc2 <strchr>
 801e0ce:	0003      	movs	r3, r0
 801e0d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!pos2)
 801e0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d107      	bne.n	801e0e8 <get_http_param_value+0xd4>
		{
			pos2 = name + strlen((char *)name);
 801e0d8:	6a3b      	ldr	r3, [r7, #32]
 801e0da:	0018      	movs	r0, r3
 801e0dc:	f7e4 f81a 	bl	8002114 <strlen>
 801e0e0:	0002      	movs	r2, r0
 801e0e2:	6a3b      	ldr	r3, [r7, #32]
 801e0e4:	189b      	adds	r3, r3, r2
 801e0e6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801e0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e0ea:	6a3b      	ldr	r3, [r7, #32]
 801e0ec:	1ad2      	subs	r2, r2, r3
 801e0ee:	211a      	movs	r1, #26
 801e0f0:	187b      	adds	r3, r7, r1
 801e0f2:	801a      	strh	r2, [r3, #0]

		if (len)
 801e0f4:	187b      	adds	r3, r7, r1
 801e0f6:	881b      	ldrh	r3, [r3, #0]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d017      	beq.n	801e12c <get_http_param_value+0x118>
		{
			ret[len] = 0;
 801e0fc:	187b      	adds	r3, r7, r1
 801e0fe:	881b      	ldrh	r3, [r3, #0]
 801e100:	69fa      	ldr	r2, [r7, #28]
 801e102:	18d3      	adds	r3, r2, r3
 801e104:	2200      	movs	r2, #0
 801e106:	701a      	strb	r2, [r3, #0]
			strncpy((char *)ret, (char *)name, len);
 801e108:	187b      	adds	r3, r7, r1
 801e10a:	881a      	ldrh	r2, [r3, #0]
 801e10c:	6a39      	ldr	r1, [r7, #32]
 801e10e:	69fb      	ldr	r3, [r7, #28]
 801e110:	0018      	movs	r0, r3
 801e112:	f004 fd75 	bl	8022c00 <strncpy>
			unescape_http_url((char *)ret);
 801e116:	69fb      	ldr	r3, [r7, #28]
 801e118:	0018      	movs	r0, r3
 801e11a:	f7ff fc0d 	bl	801d938 <unescape_http_url>
			replacetochar(ret, '+', ' ');
 801e11e:	69fb      	ldr	r3, [r7, #28]
 801e120:	2220      	movs	r2, #32
 801e122:	212b      	movs	r1, #43	; 0x2b
 801e124:	0018      	movs	r0, r3
 801e126:	f000 fe03 	bl	801ed30 <replacetochar>
 801e12a:	e005      	b.n	801e138 <get_http_param_value+0x124>
			// ret[strlen((int8*)ret)] = 0;
			// printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801e12c:	69fb      	ldr	r3, [r7, #28]
 801e12e:	2200      	movs	r2, #0
 801e130:	701a      	strb	r2, [r3, #0]
 801e132:	e001      	b.n	801e138 <get_http_param_value+0x124>
		}
	}
	else
	{
		return 0;
 801e134:	2300      	movs	r3, #0
 801e136:	e006      	b.n	801e146 <get_http_param_value+0x132>
	}

	printf("  %s=%s\r\n", param_name, ret);
 801e138:	69fa      	ldr	r2, [r7, #28]
 801e13a:	6839      	ldr	r1, [r7, #0]
 801e13c:	4b08      	ldr	r3, [pc, #32]	; (801e160 <get_http_param_value+0x14c>)
 801e13e:	0018      	movs	r0, r3
 801e140:	f004 fb68 	bl	8022814 <iprintf>

	return ret;
 801e144:	69fb      	ldr	r3, [r7, #28]
}
 801e146:	0018      	movs	r0, r3
 801e148:	46bd      	mov	sp, r7
 801e14a:	b00b      	add	sp, #44	; 0x2c
 801e14c:	bd90      	pop	{r4, r7, pc}
 801e14e:	46c0      	nop			; (mov r8, r8)
 801e150:	20007ba0 	.word	0x20007ba0
 801e154:	0803130c 	.word	0x0803130c
 801e158:	08031310 	.word	0x08031310
 801e15c:	080311d4 	.word	0x080311d4
 801e160:	08031324 	.word	0x08031324

0801e164 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t *uri, uint8_t *uri_buf)
{
 801e164:	b590      	push	{r4, r7, lr}
 801e166:	b089      	sub	sp, #36	; 0x24
 801e168:	af00      	add	r7, sp, #0
 801e16a:	6078      	str	r0, [r7, #4]
 801e16c:	6039      	str	r1, [r7, #0]
	uint8_t *token;
//	uint8_t *api;

//	uint8_t *ip;
//	uint8_t *sn;
	if (!uri)
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	2b00      	cmp	r3, #0
 801e172:	d102      	bne.n	801e17a <get_http_uri_name+0x16>
		return 0;
 801e174:	2300      	movs	r3, #0
 801e176:	f000 fd52 	bl	801ec1e <get_http_uri_name+0xaba>

	strcpy((char *)uri_buf, (char *)uri);
 801e17a:	687a      	ldr	r2, [r7, #4]
 801e17c:	683b      	ldr	r3, [r7, #0]
 801e17e:	0011      	movs	r1, r2
 801e180:	0018      	movs	r0, r3
 801e182:	f005 fbe9 	bl	8023958 <strcpy>
	char* pch;
	char* hn;
//	char txt[100];
	token = (uint8_t *)strtok((char *)uri_buf, " ?");
 801e186:	4ae6      	ldr	r2, [pc, #920]	; (801e520 <get_http_uri_name+0x3bc>)
 801e188:	683b      	ldr	r3, [r7, #0]
 801e18a:	0011      	movs	r1, r2
 801e18c:	0018      	movs	r0, r3
 801e18e:	f004 fd4b 	bl	8022c28 <strtok>
 801e192:	0003      	movs	r3, r0
 801e194:	61bb      	str	r3, [r7, #24]
	uri_ptr = token;
 801e196:	69bb      	ldr	r3, [r7, #24]
 801e198:	61fb      	str	r3, [r7, #28]
	printf((char*)uri);
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	0018      	movs	r0, r3
 801e19e:	f004 fb39 	bl	8022814 <iprintf>
	printf("\n");
 801e1a2:	200a      	movs	r0, #10
 801e1a4:	f004 fb46 	bl	8022834 <putchar>

	//memset(pch, 0, 128);
	//memset(hn, 0, 128);
	if (strstr((char*)uri, (char*)"TEST=1") != NULL)
 801e1a8:	4ade      	ldr	r2, [pc, #888]	; (801e524 <get_http_uri_name+0x3c0>)
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	0011      	movs	r1, r2
 801e1ae:	0018      	movs	r0, r3
 801e1b0:	f004 fda2 	bl	8022cf8 <strstr>
 801e1b4:	1e03      	subs	r3, r0, #0
 801e1b6:	d00d      	beq.n	801e1d4 <get_http_uri_name+0x70>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e1b8:	23a0      	movs	r3, #160	; 0xa0
 801e1ba:	05db      	lsls	r3, r3, #23
 801e1bc:	2201      	movs	r2, #1
 801e1be:	2101      	movs	r1, #1
 801e1c0:	0018      	movs	r0, r3
 801e1c2:	f7f2 ffce 	bl	8011162 <HAL_GPIO_WritePin>
		printf("LED ON1\n");
 801e1c6:	4bd8      	ldr	r3, [pc, #864]	; (801e528 <get_http_uri_name+0x3c4>)
 801e1c8:	0018      	movs	r0, r3
 801e1ca:	f004 fb93 	bl	80228f4 <puts>
		test = 1;
 801e1ce:	4bd7      	ldr	r3, [pc, #860]	; (801e52c <get_http_uri_name+0x3c8>)
 801e1d0:	2201      	movs	r2, #1
 801e1d2:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"read") != NULL)
 801e1d4:	4ad6      	ldr	r2, [pc, #856]	; (801e530 <get_http_uri_name+0x3cc>)
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	0011      	movs	r1, r2
 801e1da:	0018      	movs	r0, r3
 801e1dc:	f004 fd8c 	bl	8022cf8 <strstr>
 801e1e0:	1e03      	subs	r3, r0, #0
 801e1e2:	d009      	beq.n	801e1f8 <get_http_uri_name+0x94>
		//				code_OFF[0] = ((uint32_t) (copy_config.sSetIROFF[0]) << 24) + ((uint32_t) (copy_config.sSetIROFF[1]) << 16) + ((uint32_t) (copy_config.sSetIROFF[2]) << 8) + copy_config.sSetIROFF[3];
		//				tv_type = pcb_config.tvtype[0] - '0';

		//	Calculate_Temperatures_Offsets();

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e1e4:	23a0      	movs	r3, #160	; 0xa0
 801e1e6:	05db      	lsls	r3, r3, #23
 801e1e8:	2201      	movs	r2, #1
 801e1ea:	2101      	movs	r1, #1
 801e1ec:	0018      	movs	r0, r3
 801e1ee:	f7f2 ffb8 	bl	8011162 <HAL_GPIO_WritePin>
		// printf("READ CONFIG\n");
		test = 1;
 801e1f2:	4bce      	ldr	r3, [pc, #824]	; (801e52c <get_http_uri_name+0x3c8>)
 801e1f4:	2201      	movs	r2, #1
 801e1f6:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"IP") != NULL)
 801e1f8:	4ace      	ldr	r2, [pc, #824]	; (801e534 <get_http_uri_name+0x3d0>)
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	0011      	movs	r1, r2
 801e1fe:	0018      	movs	r0, r3
 801e200:	f004 fd7a 	bl	8022cf8 <strstr>
 801e204:	1e03      	subs	r3, r0, #0
 801e206:	d009      	beq.n	801e21c <get_http_uri_name+0xb8>
	{ // SAVE CONFIG
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e208:	23a0      	movs	r3, #160	; 0xa0
 801e20a:	05db      	lsls	r3, r3, #23
 801e20c:	2201      	movs	r2, #1
 801e20e:	2101      	movs	r1, #1
 801e210:	0018      	movs	r0, r3
 801e212:	f7f2 ffa6 	bl	8011162 <HAL_GPIO_WritePin>
		// printf("SAVE CONFIG\n");
		test = 1;
 801e216:	4bc5      	ldr	r3, [pc, #788]	; (801e52c <get_http_uri_name+0x3c8>)
 801e218:	2201      	movs	r2, #1
 801e21a:	701a      	strb	r2, [r3, #0]
		//				  for (int i = 0; i < 2; i++)
		//					  rs2[i] =  pcb_config.rs2[i];
		//				  for (int i = 0; i < 2; i++)
		//					  rs3[i] =  pcb_config.rs3[i];
	}
	if (strstr((char*)uri, (char*)"TEST=2") != NULL)
 801e21c:	4ac6      	ldr	r2, [pc, #792]	; (801e538 <get_http_uri_name+0x3d4>)
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	0011      	movs	r1, r2
 801e222:	0018      	movs	r0, r3
 801e224:	f004 fd68 	bl	8022cf8 <strstr>
 801e228:	1e03      	subs	r3, r0, #0
 801e22a:	d00d      	beq.n	801e248 <get_http_uri_name+0xe4>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e22c:	23a0      	movs	r3, #160	; 0xa0
 801e22e:	05db      	lsls	r3, r3, #23
 801e230:	2201      	movs	r2, #1
 801e232:	2101      	movs	r1, #1
 801e234:	0018      	movs	r0, r3
 801e236:	f7f2 ff94 	bl	8011162 <HAL_GPIO_WritePin>
		printf("LED OFF1\n");
 801e23a:	4bc0      	ldr	r3, [pc, #768]	; (801e53c <get_http_uri_name+0x3d8>)
 801e23c:	0018      	movs	r0, r3
 801e23e:	f004 fb59 	bl	80228f4 <puts>
		test = 0;
 801e242:	4bba      	ldr	r3, [pc, #744]	; (801e52c <get_http_uri_name+0x3c8>)
 801e244:	2200      	movs	r2, #0
 801e246:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"PIR=1") != NULL)
 801e248:	4abd      	ldr	r2, [pc, #756]	; (801e540 <get_http_uri_name+0x3dc>)
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	0011      	movs	r1, r2
 801e24e:	0018      	movs	r0, r3
 801e250:	f004 fd52 	bl	8022cf8 <strstr>
 801e254:	1e03      	subs	r3, r0, #0
 801e256:	d010      	beq.n	801e27a <get_http_uri_name+0x116>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e258:	23a0      	movs	r3, #160	; 0xa0
 801e25a:	05db      	lsls	r3, r3, #23
 801e25c:	2201      	movs	r2, #1
 801e25e:	2101      	movs	r1, #1
 801e260:	0018      	movs	r0, r3
 801e262:	f7f2 ff7e 	bl	8011162 <HAL_GPIO_WritePin>
		printf("LED ON2\n");
 801e266:	4bb7      	ldr	r3, [pc, #732]	; (801e544 <get_http_uri_name+0x3e0>)
 801e268:	0018      	movs	r0, r3
 801e26a:	f004 fb43 	bl	80228f4 <puts>
		pir = 1;
 801e26e:	4bb6      	ldr	r3, [pc, #728]	; (801e548 <get_http_uri_name+0x3e4>)
 801e270:	2201      	movs	r2, #1
 801e272:	701a      	strb	r2, [r3, #0]
		sSetPIRON[0] = '1';
 801e274:	4bb5      	ldr	r3, [pc, #724]	; (801e54c <get_http_uri_name+0x3e8>)
 801e276:	2231      	movs	r2, #49	; 0x31
 801e278:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"PIR=2") != NULL)
 801e27a:	4ab5      	ldr	r2, [pc, #724]	; (801e550 <get_http_uri_name+0x3ec>)
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	0011      	movs	r1, r2
 801e280:	0018      	movs	r0, r3
 801e282:	f004 fd39 	bl	8022cf8 <strstr>
 801e286:	1e03      	subs	r3, r0, #0
 801e288:	d010      	beq.n	801e2ac <get_http_uri_name+0x148>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e28a:	23a0      	movs	r3, #160	; 0xa0
 801e28c:	05db      	lsls	r3, r3, #23
 801e28e:	2201      	movs	r2, #1
 801e290:	2101      	movs	r1, #1
 801e292:	0018      	movs	r0, r3
 801e294:	f7f2 ff65 	bl	8011162 <HAL_GPIO_WritePin>
		printf("LED OFF2\n");
 801e298:	4bae      	ldr	r3, [pc, #696]	; (801e554 <get_http_uri_name+0x3f0>)
 801e29a:	0018      	movs	r0, r3
 801e29c:	f004 fb2a 	bl	80228f4 <puts>
		pir = 0;
 801e2a0:	4ba9      	ldr	r3, [pc, #676]	; (801e548 <get_http_uri_name+0x3e4>)
 801e2a2:	2200      	movs	r2, #0
 801e2a4:	701a      	strb	r2, [r3, #0]
		sSetPIRON[0] = '0';
 801e2a6:	4ba9      	ldr	r3, [pc, #676]	; (801e54c <get_http_uri_name+0x3e8>)
 801e2a8:	2230      	movs	r2, #48	; 0x30
 801e2aa:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"TEMP=1") != NULL)
 801e2ac:	4aaa      	ldr	r2, [pc, #680]	; (801e558 <get_http_uri_name+0x3f4>)
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	0011      	movs	r1, r2
 801e2b2:	0018      	movs	r0, r3
 801e2b4:	f004 fd20 	bl	8022cf8 <strstr>
 801e2b8:	1e03      	subs	r3, r0, #0
 801e2ba:	d010      	beq.n	801e2de <get_http_uri_name+0x17a>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e2bc:	23a0      	movs	r3, #160	; 0xa0
 801e2be:	05db      	lsls	r3, r3, #23
 801e2c0:	2201      	movs	r2, #1
 801e2c2:	2101      	movs	r1, #1
 801e2c4:	0018      	movs	r0, r3
 801e2c6:	f7f2 ff4c 	bl	8011162 <HAL_GPIO_WritePin>
		printf("LED ON3\n");
 801e2ca:	4ba4      	ldr	r3, [pc, #656]	; (801e55c <get_http_uri_name+0x3f8>)
 801e2cc:	0018      	movs	r0, r3
 801e2ce:	f004 fb11 	bl	80228f4 <puts>
		Temp = 1;
 801e2d2:	4ba3      	ldr	r3, [pc, #652]	; (801e560 <get_http_uri_name+0x3fc>)
 801e2d4:	2201      	movs	r2, #1
 801e2d6:	701a      	strb	r2, [r3, #0]
		sSetTempON[0] = '1';
 801e2d8:	4ba2      	ldr	r3, [pc, #648]	; (801e564 <get_http_uri_name+0x400>)
 801e2da:	2231      	movs	r2, #49	; 0x31
 801e2dc:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"TEMP=2") != NULL)
 801e2de:	4aa2      	ldr	r2, [pc, #648]	; (801e568 <get_http_uri_name+0x404>)
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	0011      	movs	r1, r2
 801e2e4:	0018      	movs	r0, r3
 801e2e6:	f004 fd07 	bl	8022cf8 <strstr>
 801e2ea:	1e03      	subs	r3, r0, #0
 801e2ec:	d010      	beq.n	801e310 <get_http_uri_name+0x1ac>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 801e2ee:	23a0      	movs	r3, #160	; 0xa0
 801e2f0:	05db      	lsls	r3, r3, #23
 801e2f2:	2201      	movs	r2, #1
 801e2f4:	2101      	movs	r1, #1
 801e2f6:	0018      	movs	r0, r3
 801e2f8:	f7f2 ff33 	bl	8011162 <HAL_GPIO_WritePin>
		printf("LED OFF3\n");
 801e2fc:	4b9b      	ldr	r3, [pc, #620]	; (801e56c <get_http_uri_name+0x408>)
 801e2fe:	0018      	movs	r0, r3
 801e300:	f004 faf8 	bl	80228f4 <puts>
		Temp = 0;
 801e304:	4b96      	ldr	r3, [pc, #600]	; (801e560 <get_http_uri_name+0x3fc>)
 801e306:	2200      	movs	r2, #0
 801e308:	701a      	strb	r2, [r3, #0]
		sSetTempON[0] = '0';
 801e30a:	4b96      	ldr	r3, [pc, #600]	; (801e564 <get_http_uri_name+0x400>)
 801e30c:	2230      	movs	r2, #48	; 0x30
 801e30e:	701a      	strb	r2, [r3, #0]
	}

	if (strstr((char*)uri, (char*)"button=1") != NULL)
 801e310:	4a97      	ldr	r2, [pc, #604]	; (801e570 <get_http_uri_name+0x40c>)
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	0011      	movs	r1, r2
 801e316:	0018      	movs	r0, r3
 801e318:	f004 fcee 	bl	8022cf8 <strstr>
 801e31c:	1e03      	subs	r3, r0, #0
 801e31e:	d014      	beq.n	801e34a <get_http_uri_name+0x1e6>
	{
		printf("button1"); // button1 pressed
 801e320:	4b94      	ldr	r3, [pc, #592]	; (801e574 <get_http_uri_name+0x410>)
 801e322:	0018      	movs	r0, r3
 801e324:	f004 fa76 	bl	8022814 <iprintf>
		Send_BTN_ON(1, 8);
 801e328:	2108      	movs	r1, #8
 801e32a:	2001      	movs	r0, #1
 801e32c:	f7ef fbc2 	bl	800dab4 <Send_BTN_ON>
		SetBtnPress(false, 2);
 801e330:	2102      	movs	r1, #2
 801e332:	2000      	movs	r0, #0
 801e334:	f7e9 fe3e 	bl	8007fb4 <SetBtnPress>
		loop2();
 801e338:	f7f9 fbea 	bl	8017b10 <loop2>
		loop3();
 801e33c:	f7f9 fc4a 	bl	8017bd4 <loop3>
		Send_String("Logging to USB\n\r", sizeof("Logging to USB\n\r"));
 801e340:	4b8d      	ldr	r3, [pc, #564]	; (801e578 <get_http_uri_name+0x414>)
 801e342:	2111      	movs	r1, #17
 801e344:	0018      	movs	r0, r3
 801e346:	f7ef fcb1 	bl	800dcac <Send_String>
	}
	if (strstr((char*)uri, (char*)"button=2") != NULL)
 801e34a:	4a8c      	ldr	r2, [pc, #560]	; (801e57c <get_http_uri_name+0x418>)
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	0011      	movs	r1, r2
 801e350:	0018      	movs	r0, r3
 801e352:	f004 fcd1 	bl	8022cf8 <strstr>
 801e356:	1e03      	subs	r3, r0, #0
 801e358:	d063      	beq.n	801e422 <get_http_uri_name+0x2be>
	{
		printf("button2"); // button1 pressed
 801e35a:	4b89      	ldr	r3, [pc, #548]	; (801e580 <get_http_uri_name+0x41c>)
 801e35c:	0018      	movs	r0, r3
 801e35e:	f004 fa59 	bl	8022814 <iprintf>
		SetBtnPress(false, 1);
 801e362:	2101      	movs	r1, #1
 801e364:	2000      	movs	r0, #0
 801e366:	f7e9 fe25 	bl	8007fb4 <SetBtnPress>
		Send_BTN_ON(1, 7);
 801e36a:	2107      	movs	r1, #7
 801e36c:	2001      	movs	r0, #1
 801e36e:	f7ef fba1 	bl	800dab4 <Send_BTN_ON>

		MyApp();
 801e372:	f7f9 fc81 	bl	8017c78 <MyApp>
		//		code_OFF[0] = ((uint32_t) (pcb_config.sSetIROFF[0]) << 24)
		//											+ ((uint32_t) (pcb_config.sSetIROFF[1]) << 16)
		//											+ ((uint32_t) (pcb_config.sSetIROFF[2]) << 8)
		//											+ pcb_config.sSetIROFF[3];
		//		tv_type = pcb_config.tvtype[0] - '0';
		ReadAndSetConfig();
 801e376:	f7ec ff21 	bl	800b1bc <ReadAndSetConfig>
		Calculate_Temperatures_Offsets();
 801e37a:	f7eb fbb5 	bl	8009ae8 <Calculate_Temperatures_Offsets>
		int baurate = ((uint32_t)(pcb_config.rs1[0] - '0') * 100000) + ((uint32_t)(pcb_config.rs1[1] - '0') * 10000) + ((uint32_t)(pcb_config.rs1[2] - '0') * 1000) + ((uint32_t)(pcb_config.rs1[3] - '0') * 100) + ((uint32_t)(pcb_config.rs1[4] - '0') * 10) + ((uint32_t)(pcb_config.rs1[5] - '0'));
 801e37e:	4b81      	ldr	r3, [pc, #516]	; (801e584 <get_http_uri_name+0x420>)
 801e380:	22f8      	movs	r2, #248	; 0xf8
 801e382:	5c9b      	ldrb	r3, [r3, r2]
 801e384:	3b30      	subs	r3, #48	; 0x30
 801e386:	001a      	movs	r2, r3
 801e388:	4b7f      	ldr	r3, [pc, #508]	; (801e588 <get_http_uri_name+0x424>)
 801e38a:	435a      	muls	r2, r3
 801e38c:	4b7d      	ldr	r3, [pc, #500]	; (801e584 <get_http_uri_name+0x420>)
 801e38e:	21f9      	movs	r1, #249	; 0xf9
 801e390:	5c5b      	ldrb	r3, [r3, r1]
 801e392:	3b30      	subs	r3, #48	; 0x30
 801e394:	0019      	movs	r1, r3
 801e396:	4b7d      	ldr	r3, [pc, #500]	; (801e58c <get_http_uri_name+0x428>)
 801e398:	434b      	muls	r3, r1
 801e39a:	18d1      	adds	r1, r2, r3
 801e39c:	4b79      	ldr	r3, [pc, #484]	; (801e584 <get_http_uri_name+0x420>)
 801e39e:	22fb      	movs	r2, #251	; 0xfb
 801e3a0:	5c9b      	ldrb	r3, [r3, r2]
 801e3a2:	3b30      	subs	r3, #48	; 0x30
 801e3a4:	001a      	movs	r2, r3
 801e3a6:	2364      	movs	r3, #100	; 0x64
 801e3a8:	4353      	muls	r3, r2
 801e3aa:	0018      	movs	r0, r3
 801e3ac:	4b75      	ldr	r3, [pc, #468]	; (801e584 <get_http_uri_name+0x420>)
 801e3ae:	22fa      	movs	r2, #250	; 0xfa
 801e3b0:	5c9b      	ldrb	r3, [r3, r2]
 801e3b2:	3b30      	subs	r3, #48	; 0x30
 801e3b4:	001a      	movs	r2, r3
 801e3b6:	0013      	movs	r3, r2
 801e3b8:	015b      	lsls	r3, r3, #5
 801e3ba:	1a9b      	subs	r3, r3, r2
 801e3bc:	009b      	lsls	r3, r3, #2
 801e3be:	189b      	adds	r3, r3, r2
 801e3c0:	00db      	lsls	r3, r3, #3
 801e3c2:	18c3      	adds	r3, r0, r3
 801e3c4:	18ca      	adds	r2, r1, r3
 801e3c6:	4b6f      	ldr	r3, [pc, #444]	; (801e584 <get_http_uri_name+0x420>)
 801e3c8:	21fc      	movs	r1, #252	; 0xfc
 801e3ca:	5c5b      	ldrb	r3, [r3, r1]
 801e3cc:	3b30      	subs	r3, #48	; 0x30
 801e3ce:	0019      	movs	r1, r3
 801e3d0:	000b      	movs	r3, r1
 801e3d2:	009b      	lsls	r3, r3, #2
 801e3d4:	185b      	adds	r3, r3, r1
 801e3d6:	005b      	lsls	r3, r3, #1
 801e3d8:	18d3      	adds	r3, r2, r3
 801e3da:	4a6a      	ldr	r2, [pc, #424]	; (801e584 <get_http_uri_name+0x420>)
 801e3dc:	21fd      	movs	r1, #253	; 0xfd
 801e3de:	5c52      	ldrb	r2, [r2, r1]
 801e3e0:	189b      	adds	r3, r3, r2
 801e3e2:	3b30      	subs	r3, #48	; 0x30
 801e3e4:	617b      	str	r3, [r7, #20]

		changeBaudRate(baurate, pcb_config.rs2[0] - '0',
 801e3e6:	4b67      	ldr	r3, [pc, #412]	; (801e584 <get_http_uri_name+0x420>)
 801e3e8:	22fe      	movs	r2, #254	; 0xfe
 801e3ea:	5c9b      	ldrb	r3, [r3, r2]
 801e3ec:	3b30      	subs	r3, #48	; 0x30
 801e3ee:	0019      	movs	r1, r3
					   pcb_config.rs3[0] - '0');
 801e3f0:	4a64      	ldr	r2, [pc, #400]	; (801e584 <get_http_uri_name+0x420>)
 801e3f2:	2380      	movs	r3, #128	; 0x80
 801e3f4:	005b      	lsls	r3, r3, #1
 801e3f6:	5cd3      	ldrb	r3, [r2, r3]
		changeBaudRate(baurate, pcb_config.rs2[0] - '0',
 801e3f8:	3b30      	subs	r3, #48	; 0x30
 801e3fa:	001a      	movs	r2, r3
 801e3fc:	697b      	ldr	r3, [r7, #20]
 801e3fe:	0018      	movs	r0, r3
 801e400:	f7ef fea0 	bl	800e144 <changeBaudRate>
		//					tv = 6;
		//					break;
		//				default:
		//					tv = 0;
		//				}
		tv_type = tv;
 801e404:	4b62      	ldr	r3, [pc, #392]	; (801e590 <get_http_uri_name+0x42c>)
 801e406:	781b      	ldrb	r3, [r3, #0]
 801e408:	001a      	movs	r2, r3
 801e40a:	4b62      	ldr	r3, [pc, #392]	; (801e594 <get_http_uri_name+0x430>)
 801e40c:	601a      	str	r2, [r3, #0]
		sSetTempON[0] = pcb_config.sSetTempON[0];
 801e40e:	4b5d      	ldr	r3, [pc, #372]	; (801e584 <get_http_uri_name+0x420>)
 801e410:	22b6      	movs	r2, #182	; 0xb6
 801e412:	5c9a      	ldrb	r2, [r3, r2]
 801e414:	4b53      	ldr	r3, [pc, #332]	; (801e564 <get_http_uri_name+0x400>)
 801e416:	701a      	strb	r2, [r3, #0]
		sSetPIRON[0] = pcb_config.sSetPIRON[0];
 801e418:	4b5a      	ldr	r3, [pc, #360]	; (801e584 <get_http_uri_name+0x420>)
 801e41a:	22c0      	movs	r2, #192	; 0xc0
 801e41c:	5c9a      	ldrb	r2, [r3, r2]
 801e41e:	4b4b      	ldr	r3, [pc, #300]	; (801e54c <get_http_uri_name+0x3e8>)
 801e420:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"button=3") != NULL)
 801e422:	4a5d      	ldr	r2, [pc, #372]	; (801e598 <get_http_uri_name+0x434>)
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	0011      	movs	r1, r2
 801e428:	0018      	movs	r0, r3
 801e42a:	f004 fc65 	bl	8022cf8 <strstr>
 801e42e:	1e03      	subs	r3, r0, #0
 801e430:	d010      	beq.n	801e454 <get_http_uri_name+0x2f0>
	{
		printf("button3"); // button1 pressed
 801e432:	4b5a      	ldr	r3, [pc, #360]	; (801e59c <get_http_uri_name+0x438>)
 801e434:	0018      	movs	r0, r3
 801e436:	f004 f9ed 	bl	8022814 <iprintf>
		Send_BTN_ON(0, 9);
 801e43a:	2109      	movs	r1, #9
 801e43c:	2000      	movs	r0, #0
 801e43e:	f7ef fb39 	bl	800dab4 <Send_BTN_ON>
		SetBtnPress(false, 1);
 801e442:	2101      	movs	r1, #1
 801e444:	2000      	movs	r0, #0
 801e446:	f7e9 fdb5 	bl	8007fb4 <SetBtnPress>
		Send_RS232_Command_ON();
 801e44a:	f7ef fae5 	bl	800da18 <Send_RS232_Command_ON>
		IRSend_NEC(true);
 801e44e:	2001      	movs	r0, #1
 801e450:	f7e8 fad2 	bl	80069f8 <IRSend_NEC>
		// IRSend_NEC(true);
	}
	if (strstr((char*)uri, (char*)"button=4") != NULL)
 801e454:	4a52      	ldr	r2, [pc, #328]	; (801e5a0 <get_http_uri_name+0x43c>)
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	0011      	movs	r1, r2
 801e45a:	0018      	movs	r0, r3
 801e45c:	f004 fc4c 	bl	8022cf8 <strstr>
 801e460:	1e03      	subs	r3, r0, #0
 801e462:	d010      	beq.n	801e486 <get_http_uri_name+0x322>
	{
		printf("button4"); // button1 pressedà
 801e464:	4b4f      	ldr	r3, [pc, #316]	; (801e5a4 <get_http_uri_name+0x440>)
 801e466:	0018      	movs	r0, r3
 801e468:	f004 f9d4 	bl	8022814 <iprintf>
		SetBtnPress(false, 2);
 801e46c:	2102      	movs	r1, #2
 801e46e:	2000      	movs	r0, #0
 801e470:	f7e9 fda0 	bl	8007fb4 <SetBtnPress>
		Send_BTN_ON(1, 0);
 801e474:	2100      	movs	r1, #0
 801e476:	2001      	movs	r0, #1
 801e478:	f7ef fb1c 	bl	800dab4 <Send_BTN_ON>
		Send_RS232_Command_OFF();
 801e47c:	f7ef fb4a 	bl	800db14 <Send_RS232_Command_OFF>
		IRSend_NEC(false);
 801e480:	2000      	movs	r0, #0
 801e482:	f7e8 fab9 	bl	80069f8 <IRSend_NEC>
		// IRSend_NEC(false);
		// IRSend_NEC(false);
	}
	if (strstr((char*)uri, (char*)"button=5") != NULL)
 801e486:	4a48      	ldr	r2, [pc, #288]	; (801e5a8 <get_http_uri_name+0x444>)
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	0011      	movs	r1, r2
 801e48c:	0018      	movs	r0, r3
 801e48e:	f004 fc33 	bl	8022cf8 <strstr>
 801e492:	1e03      	subs	r3, r0, #0
 801e494:	d00f      	beq.n	801e4b6 <get_http_uri_name+0x352>
	{
		SetBtnPress(false, 2);
 801e496:	2102      	movs	r1, #2
 801e498:	2000      	movs	r0, #0
 801e49a:	f7e9 fd8b 	bl	8007fb4 <SetBtnPress>
		Send_BTN_ON(0, 6);
 801e49e:	2106      	movs	r1, #6
 801e4a0:	2000      	movs	r0, #0
 801e4a2:	f7ef fb07 	bl	800dab4 <Send_BTN_ON>
		on_receive = 1;
 801e4a6:	4b41      	ldr	r3, [pc, #260]	; (801e5ac <get_http_uri_name+0x448>)
 801e4a8:	2201      	movs	r2, #1
 801e4aa:	601a      	str	r2, [r3, #0]
		locked = false;
 801e4ac:	4b40      	ldr	r3, [pc, #256]	; (801e5b0 <get_http_uri_name+0x44c>)
 801e4ae:	2200      	movs	r2, #0
 801e4b0:	601a      	str	r2, [r3, #0]
		//	IR_Receive_State = INIT_IR;
		//	IR_Receive_OFF_State = INIT2;
		//	timestamp_1min_lock = HAL_GetTick();
		Send_Version_Data();
 801e4b2:	f7ef fbd7 	bl	800dc64 <Send_Version_Data>
	}
	if (strstr((char*)uri, (char*)"button=6") != NULL)
 801e4b6:	4a3f      	ldr	r2, [pc, #252]	; (801e5b4 <get_http_uri_name+0x450>)
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	0011      	movs	r1, r2
 801e4bc:	0018      	movs	r0, r3
 801e4be:	f004 fc1b 	bl	8022cf8 <strstr>
 801e4c2:	1e03      	subs	r3, r0, #0
 801e4c4:	d00d      	beq.n	801e4e2 <get_http_uri_name+0x37e>
	{
		Send_BTN_ON(0, 5);
 801e4c6:	2105      	movs	r1, #5
 801e4c8:	2000      	movs	r0, #0
 801e4ca:	f7ef faf3 	bl	800dab4 <Send_BTN_ON>
		SetBtnPress(false, 1);
 801e4ce:	2101      	movs	r1, #1
 801e4d0:	2000      	movs	r0, #0
 801e4d2:	f7e9 fd6f 	bl	8007fb4 <SetBtnPress>
		locked = false;
 801e4d6:	4b36      	ldr	r3, [pc, #216]	; (801e5b0 <get_http_uri_name+0x44c>)
 801e4d8:	2200      	movs	r2, #0
 801e4da:	601a      	str	r2, [r3, #0]
		on_receive = 0;
 801e4dc:	4b33      	ldr	r3, [pc, #204]	; (801e5ac <get_http_uri_name+0x448>)
 801e4de:	2200      	movs	r2, #0
 801e4e0:	601a      	str	r2, [r3, #0]
		//		}else if(strcmp(pch+7,"4")){
		//			printf("button4");//button4 pressed
		//		}
		//	}
	}
	if (strstr((char*)uri, (char*)"TV=1") != NULL)
 801e4e2:	4a35      	ldr	r2, [pc, #212]	; (801e5b8 <get_http_uri_name+0x454>)
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	0011      	movs	r1, r2
 801e4e8:	0018      	movs	r0, r3
 801e4ea:	f004 fc05 	bl	8022cf8 <strstr>
 801e4ee:	1e03      	subs	r3, r0, #0
 801e4f0:	d006      	beq.n	801e500 <get_http_uri_name+0x39c>
	{
		printf("sumsung"); // sumsung
 801e4f2:	4b32      	ldr	r3, [pc, #200]	; (801e5bc <get_http_uri_name+0x458>)
 801e4f4:	0018      	movs	r0, r3
 801e4f6:	f004 f98d 	bl	8022814 <iprintf>
		tv = 1;
 801e4fa:	4b25      	ldr	r3, [pc, #148]	; (801e590 <get_http_uri_name+0x42c>)
 801e4fc:	2201      	movs	r2, #1
 801e4fe:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"TV=2") != NULL)
 801e500:	4a2f      	ldr	r2, [pc, #188]	; (801e5c0 <get_http_uri_name+0x45c>)
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	0011      	movs	r1, r2
 801e506:	0018      	movs	r0, r3
 801e508:	f004 fbf6 	bl	8022cf8 <strstr>
 801e50c:	1e03      	subs	r3, r0, #0
 801e50e:	d05b      	beq.n	801e5c8 <get_http_uri_name+0x464>
	{
		printf("LG"); // LG
 801e510:	4b2c      	ldr	r3, [pc, #176]	; (801e5c4 <get_http_uri_name+0x460>)
 801e512:	0018      	movs	r0, r3
 801e514:	f004 f97e 	bl	8022814 <iprintf>
		tv = 0;
 801e518:	4b1d      	ldr	r3, [pc, #116]	; (801e590 <get_http_uri_name+0x42c>)
 801e51a:	2200      	movs	r2, #0
 801e51c:	701a      	strb	r2, [r3, #0]
 801e51e:	e053      	b.n	801e5c8 <get_http_uri_name+0x464>
 801e520:	08031330 	.word	0x08031330
 801e524:	08031334 	.word	0x08031334
 801e528:	0803133c 	.word	0x0803133c
 801e52c:	20007da4 	.word	0x20007da4
 801e530:	08031344 	.word	0x08031344
 801e534:	0803134c 	.word	0x0803134c
 801e538:	08031350 	.word	0x08031350
 801e53c:	08031358 	.word	0x08031358
 801e540:	08031364 	.word	0x08031364
 801e544:	0803136c 	.word	0x0803136c
 801e548:	20007da5 	.word	0x20007da5
 801e54c:	20007d08 	.word	0x20007d08
 801e550:	08031374 	.word	0x08031374
 801e554:	0803137c 	.word	0x0803137c
 801e558:	08031388 	.word	0x08031388
 801e55c:	08031390 	.word	0x08031390
 801e560:	20007da6 	.word	0x20007da6
 801e564:	20007d00 	.word	0x20007d00
 801e568:	08031398 	.word	0x08031398
 801e56c:	080313a0 	.word	0x080313a0
 801e570:	080313ac 	.word	0x080313ac
 801e574:	080313b8 	.word	0x080313b8
 801e578:	080313c0 	.word	0x080313c0
 801e57c:	080313d4 	.word	0x080313d4
 801e580:	080313e0 	.word	0x080313e0
 801e584:	20006db4 	.word	0x20006db4
 801e588:	000186a0 	.word	0x000186a0
 801e58c:	00002710 	.word	0x00002710
 801e590:	20007da3 	.word	0x20007da3
 801e594:	20005018 	.word	0x20005018
 801e598:	080313e8 	.word	0x080313e8
 801e59c:	080313f4 	.word	0x080313f4
 801e5a0:	080313fc 	.word	0x080313fc
 801e5a4:	08031408 	.word	0x08031408
 801e5a8:	08031410 	.word	0x08031410
 801e5ac:	20005014 	.word	0x20005014
 801e5b0:	20005010 	.word	0x20005010
 801e5b4:	0803141c 	.word	0x0803141c
 801e5b8:	08031428 	.word	0x08031428
 801e5bc:	08031430 	.word	0x08031430
 801e5c0:	08031438 	.word	0x08031438
 801e5c4:	08031440 	.word	0x08031440
	}
	if (strstr((char*)uri, (char*)"TV=3") != NULL)
 801e5c8:	4ae8      	ldr	r2, [pc, #928]	; (801e96c <get_http_uri_name+0x808>)
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	0011      	movs	r1, r2
 801e5ce:	0018      	movs	r0, r3
 801e5d0:	f004 fb92 	bl	8022cf8 <strstr>
 801e5d4:	1e03      	subs	r3, r0, #0
 801e5d6:	d006      	beq.n	801e5e6 <get_http_uri_name+0x482>
	{
		printf("Panasonic"); // LG
 801e5d8:	4be5      	ldr	r3, [pc, #916]	; (801e970 <get_http_uri_name+0x80c>)
 801e5da:	0018      	movs	r0, r3
 801e5dc:	f004 f91a 	bl	8022814 <iprintf>
		tv = 2;
 801e5e0:	4be4      	ldr	r3, [pc, #912]	; (801e974 <get_http_uri_name+0x810>)
 801e5e2:	2202      	movs	r2, #2
 801e5e4:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"TV=4") != NULL)
 801e5e6:	4ae4      	ldr	r2, [pc, #912]	; (801e978 <get_http_uri_name+0x814>)
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	0011      	movs	r1, r2
 801e5ec:	0018      	movs	r0, r3
 801e5ee:	f004 fb83 	bl	8022cf8 <strstr>
 801e5f2:	1e03      	subs	r3, r0, #0
 801e5f4:	d006      	beq.n	801e604 <get_http_uri_name+0x4a0>
	{
		printf("Sony"); // LG
 801e5f6:	4be1      	ldr	r3, [pc, #900]	; (801e97c <get_http_uri_name+0x818>)
 801e5f8:	0018      	movs	r0, r3
 801e5fa:	f004 f90b 	bl	8022814 <iprintf>
		tv = 3;
 801e5fe:	4bdd      	ldr	r3, [pc, #884]	; (801e974 <get_http_uri_name+0x810>)
 801e600:	2203      	movs	r2, #3
 801e602:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"TV=5") != NULL)
 801e604:	4ade      	ldr	r2, [pc, #888]	; (801e980 <get_http_uri_name+0x81c>)
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	0011      	movs	r1, r2
 801e60a:	0018      	movs	r0, r3
 801e60c:	f004 fb74 	bl	8022cf8 <strstr>
 801e610:	1e03      	subs	r3, r0, #0
 801e612:	d006      	beq.n	801e622 <get_http_uri_name+0x4be>
	{
		printf("RC5"); // LG
 801e614:	4bdb      	ldr	r3, [pc, #876]	; (801e984 <get_http_uri_name+0x820>)
 801e616:	0018      	movs	r0, r3
 801e618:	f004 f8fc 	bl	8022814 <iprintf>
		tv = 4;
 801e61c:	4bd5      	ldr	r3, [pc, #852]	; (801e974 <get_http_uri_name+0x810>)
 801e61e:	2204      	movs	r2, #4
 801e620:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"TV=6") != NULL)
 801e622:	4ad9      	ldr	r2, [pc, #868]	; (801e988 <get_http_uri_name+0x824>)
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	0011      	movs	r1, r2
 801e628:	0018      	movs	r0, r3
 801e62a:	f004 fb65 	bl	8022cf8 <strstr>
 801e62e:	1e03      	subs	r3, r0, #0
 801e630:	d006      	beq.n	801e640 <get_http_uri_name+0x4dc>
	{
		printf("RC6"); // LG
 801e632:	4bd6      	ldr	r3, [pc, #856]	; (801e98c <get_http_uri_name+0x828>)
 801e634:	0018      	movs	r0, r3
 801e636:	f004 f8ed 	bl	8022814 <iprintf>
		tv = 5;
 801e63a:	4bce      	ldr	r3, [pc, #824]	; (801e974 <get_http_uri_name+0x810>)
 801e63c:	2205      	movs	r2, #5
 801e63e:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"TV=7") != NULL)
 801e640:	4ad3      	ldr	r2, [pc, #844]	; (801e990 <get_http_uri_name+0x82c>)
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	0011      	movs	r1, r2
 801e646:	0018      	movs	r0, r3
 801e648:	f004 fb56 	bl	8022cf8 <strstr>
 801e64c:	1e03      	subs	r3, r0, #0
 801e64e:	d006      	beq.n	801e65e <get_http_uri_name+0x4fa>
	{
		printf("Sharp"); // LG
 801e650:	4bd0      	ldr	r3, [pc, #832]	; (801e994 <get_http_uri_name+0x830>)
 801e652:	0018      	movs	r0, r3
 801e654:	f004 f8de 	bl	8022814 <iprintf>
		tv = 6;
 801e658:	4bc6      	ldr	r3, [pc, #792]	; (801e974 <get_http_uri_name+0x810>)
 801e65a:	2206      	movs	r2, #6
 801e65c:	701a      	strb	r2, [r3, #0]
	}
	pch = strstr((char*)uri, (char*)"pir_delay_on=");
 801e65e:	4ace      	ldr	r2, [pc, #824]	; (801e998 <get_http_uri_name+0x834>)
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	0011      	movs	r1, r2
 801e664:	0018      	movs	r0, r3
 801e666:	f004 fb47 	bl	8022cf8 <strstr>
 801e66a:	0003      	movs	r3, r0
 801e66c:	613b      	str	r3, [r7, #16]
	hn = strchr(pch, '&');
 801e66e:	693b      	ldr	r3, [r7, #16]
 801e670:	2126      	movs	r1, #38	; 0x26
 801e672:	0018      	movs	r0, r3
 801e674:	f004 faa5 	bl	8022bc2 <strchr>
 801e678:	0003      	movs	r3, r0
 801e67a:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e67c:	693b      	ldr	r3, [r7, #16]
 801e67e:	2b00      	cmp	r3, #0
 801e680:	d011      	beq.n	801e6a6 <get_http_uri_name+0x542>
	{
		strncpy((char *)sPIRDelayON, pch + 13, hn - pch - 13);
 801e682:	693b      	ldr	r3, [r7, #16]
 801e684:	330d      	adds	r3, #13
 801e686:	0019      	movs	r1, r3
 801e688:	68fa      	ldr	r2, [r7, #12]
 801e68a:	693b      	ldr	r3, [r7, #16]
 801e68c:	1ad3      	subs	r3, r2, r3
 801e68e:	3b0d      	subs	r3, #13
 801e690:	001a      	movs	r2, r3
 801e692:	4bc2      	ldr	r3, [pc, #776]	; (801e99c <get_http_uri_name+0x838>)
 801e694:	0018      	movs	r0, r3
 801e696:	f004 fab3 	bl	8022c00 <strncpy>
		// printf("OK");
		printf("\nPIRDelayON: %s\n\n", sPIRDelayON);
 801e69a:	4ac0      	ldr	r2, [pc, #768]	; (801e99c <get_http_uri_name+0x838>)
 801e69c:	4bc0      	ldr	r3, [pc, #768]	; (801e9a0 <get_http_uri_name+0x83c>)
 801e69e:	0011      	movs	r1, r2
 801e6a0:	0018      	movs	r0, r3
 801e6a2:	f004 f8b7 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"pir_delay_off=");
 801e6a6:	4abf      	ldr	r2, [pc, #764]	; (801e9a4 <get_http_uri_name+0x840>)
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	0011      	movs	r1, r2
 801e6ac:	0018      	movs	r0, r3
 801e6ae:	f004 fb23 	bl	8022cf8 <strstr>
 801e6b2:	0003      	movs	r3, r0
 801e6b4:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 14, '&');
 801e6b6:	693b      	ldr	r3, [r7, #16]
 801e6b8:	330e      	adds	r3, #14
 801e6ba:	2126      	movs	r1, #38	; 0x26
 801e6bc:	0018      	movs	r0, r3
 801e6be:	f004 fa80 	bl	8022bc2 <strchr>
 801e6c2:	0003      	movs	r3, r0
 801e6c4:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e6c6:	693b      	ldr	r3, [r7, #16]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d011      	beq.n	801e6f0 <get_http_uri_name+0x58c>
	{
		strncpy((char *)sPIRDelayOFF, pch + 14, hn - pch - 14);
 801e6cc:	693b      	ldr	r3, [r7, #16]
 801e6ce:	330e      	adds	r3, #14
 801e6d0:	0019      	movs	r1, r3
 801e6d2:	68fa      	ldr	r2, [r7, #12]
 801e6d4:	693b      	ldr	r3, [r7, #16]
 801e6d6:	1ad3      	subs	r3, r2, r3
 801e6d8:	3b0e      	subs	r3, #14
 801e6da:	001a      	movs	r2, r3
 801e6dc:	4bb2      	ldr	r3, [pc, #712]	; (801e9a8 <get_http_uri_name+0x844>)
 801e6de:	0018      	movs	r0, r3
 801e6e0:	f004 fa8e 	bl	8022c00 <strncpy>
		printf("\nPIRDelayOFF: %s\n\n", sPIRDelayOFF);
 801e6e4:	4ab0      	ldr	r2, [pc, #704]	; (801e9a8 <get_http_uri_name+0x844>)
 801e6e6:	4bb1      	ldr	r3, [pc, #708]	; (801e9ac <get_http_uri_name+0x848>)
 801e6e8:	0011      	movs	r1, r2
 801e6ea:	0018      	movs	r0, r3
 801e6ec:	f004 f892 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"T_min_threshold=");
 801e6f0:	4aaf      	ldr	r2, [pc, #700]	; (801e9b0 <get_http_uri_name+0x84c>)
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	0011      	movs	r1, r2
 801e6f6:	0018      	movs	r0, r3
 801e6f8:	f004 fafe 	bl	8022cf8 <strstr>
 801e6fc:	0003      	movs	r3, r0
 801e6fe:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 16, '&');
 801e700:	693b      	ldr	r3, [r7, #16]
 801e702:	3310      	adds	r3, #16
 801e704:	2126      	movs	r1, #38	; 0x26
 801e706:	0018      	movs	r0, r3
 801e708:	f004 fa5b 	bl	8022bc2 <strchr>
 801e70c:	0003      	movs	r3, r0
 801e70e:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e710:	693b      	ldr	r3, [r7, #16]
 801e712:	2b00      	cmp	r3, #0
 801e714:	d011      	beq.n	801e73a <get_http_uri_name+0x5d6>
	{
		strncpy((char *)sSetTempTreshMin, pch + 16, hn - pch - 16);
 801e716:	693b      	ldr	r3, [r7, #16]
 801e718:	3310      	adds	r3, #16
 801e71a:	0019      	movs	r1, r3
 801e71c:	68fa      	ldr	r2, [r7, #12]
 801e71e:	693b      	ldr	r3, [r7, #16]
 801e720:	1ad3      	subs	r3, r2, r3
 801e722:	3b10      	subs	r3, #16
 801e724:	001a      	movs	r2, r3
 801e726:	4ba3      	ldr	r3, [pc, #652]	; (801e9b4 <get_http_uri_name+0x850>)
 801e728:	0018      	movs	r0, r3
 801e72a:	f004 fa69 	bl	8022c00 <strncpy>
		printf("\nSetTempTreshMin: %s\n\n", sSetTempTreshMin);
 801e72e:	4aa1      	ldr	r2, [pc, #644]	; (801e9b4 <get_http_uri_name+0x850>)
 801e730:	4ba1      	ldr	r3, [pc, #644]	; (801e9b8 <get_http_uri_name+0x854>)
 801e732:	0011      	movs	r1, r2
 801e734:	0018      	movs	r0, r3
 801e736:	f004 f86d 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"T_max_threshold=");
 801e73a:	4aa0      	ldr	r2, [pc, #640]	; (801e9bc <get_http_uri_name+0x858>)
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	0011      	movs	r1, r2
 801e740:	0018      	movs	r0, r3
 801e742:	f004 fad9 	bl	8022cf8 <strstr>
 801e746:	0003      	movs	r3, r0
 801e748:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 16, '&');
 801e74a:	693b      	ldr	r3, [r7, #16]
 801e74c:	3310      	adds	r3, #16
 801e74e:	2126      	movs	r1, #38	; 0x26
 801e750:	0018      	movs	r0, r3
 801e752:	f004 fa36 	bl	8022bc2 <strchr>
 801e756:	0003      	movs	r3, r0
 801e758:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e75a:	693b      	ldr	r3, [r7, #16]
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d011      	beq.n	801e784 <get_http_uri_name+0x620>
	{
		strncpy((char *)sSetTempTreshMax, pch + 16, hn - pch - 16);
 801e760:	693b      	ldr	r3, [r7, #16]
 801e762:	3310      	adds	r3, #16
 801e764:	0019      	movs	r1, r3
 801e766:	68fa      	ldr	r2, [r7, #12]
 801e768:	693b      	ldr	r3, [r7, #16]
 801e76a:	1ad3      	subs	r3, r2, r3
 801e76c:	3b10      	subs	r3, #16
 801e76e:	001a      	movs	r2, r3
 801e770:	4b93      	ldr	r3, [pc, #588]	; (801e9c0 <get_http_uri_name+0x85c>)
 801e772:	0018      	movs	r0, r3
 801e774:	f004 fa44 	bl	8022c00 <strncpy>
		printf("\nSetTempTreshMax: %s\n\n", sSetTempTreshMax);
 801e778:	4a91      	ldr	r2, [pc, #580]	; (801e9c0 <get_http_uri_name+0x85c>)
 801e77a:	4b92      	ldr	r3, [pc, #584]	; (801e9c4 <get_http_uri_name+0x860>)
 801e77c:	0011      	movs	r1, r2
 801e77e:	0018      	movs	r0, r3
 801e780:	f004 f848 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"IR_com_on=");
 801e784:	4a90      	ldr	r2, [pc, #576]	; (801e9c8 <get_http_uri_name+0x864>)
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	0011      	movs	r1, r2
 801e78a:	0018      	movs	r0, r3
 801e78c:	f004 fab4 	bl	8022cf8 <strstr>
 801e790:	0003      	movs	r3, r0
 801e792:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 10, '&');
 801e794:	693b      	ldr	r3, [r7, #16]
 801e796:	330a      	adds	r3, #10
 801e798:	2126      	movs	r1, #38	; 0x26
 801e79a:	0018      	movs	r0, r3
 801e79c:	f004 fa11 	bl	8022bc2 <strchr>
 801e7a0:	0003      	movs	r3, r0
 801e7a2:	60fb      	str	r3, [r7, #12]
	// printf("\nnumberSetIRON: %d  %d\n\n", pch,hn);
	if (pch != NULL)
 801e7a4:	693b      	ldr	r3, [r7, #16]
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d011      	beq.n	801e7ce <get_http_uri_name+0x66a>
	{
		strncpy((char *)sSetIRON, pch + 10, hn - pch - 10);
 801e7aa:	693b      	ldr	r3, [r7, #16]
 801e7ac:	330a      	adds	r3, #10
 801e7ae:	0019      	movs	r1, r3
 801e7b0:	68fa      	ldr	r2, [r7, #12]
 801e7b2:	693b      	ldr	r3, [r7, #16]
 801e7b4:	1ad3      	subs	r3, r2, r3
 801e7b6:	3b0a      	subs	r3, #10
 801e7b8:	001a      	movs	r2, r3
 801e7ba:	4b84      	ldr	r3, [pc, #528]	; (801e9cc <get_http_uri_name+0x868>)
 801e7bc:	0018      	movs	r0, r3
 801e7be:	f004 fa1f 	bl	8022c00 <strncpy>
		printf("\nSetIRON: %s\n\n", sSetIRON);
 801e7c2:	4a82      	ldr	r2, [pc, #520]	; (801e9cc <get_http_uri_name+0x868>)
 801e7c4:	4b82      	ldr	r3, [pc, #520]	; (801e9d0 <get_http_uri_name+0x86c>)
 801e7c6:	0011      	movs	r1, r2
 801e7c8:	0018      	movs	r0, r3
 801e7ca:	f004 f823 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"IR_com_off=");
 801e7ce:	4a81      	ldr	r2, [pc, #516]	; (801e9d4 <get_http_uri_name+0x870>)
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	0011      	movs	r1, r2
 801e7d4:	0018      	movs	r0, r3
 801e7d6:	f004 fa8f 	bl	8022cf8 <strstr>
 801e7da:	0003      	movs	r3, r0
 801e7dc:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 11, '&');
 801e7de:	693b      	ldr	r3, [r7, #16]
 801e7e0:	330b      	adds	r3, #11
 801e7e2:	2126      	movs	r1, #38	; 0x26
 801e7e4:	0018      	movs	r0, r3
 801e7e6:	f004 f9ec 	bl	8022bc2 <strchr>
 801e7ea:	0003      	movs	r3, r0
 801e7ec:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e7ee:	693b      	ldr	r3, [r7, #16]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d011      	beq.n	801e818 <get_http_uri_name+0x6b4>
	{
		strncpy((char *)sSetIROFF, pch + 11, hn - pch - 11);
 801e7f4:	693b      	ldr	r3, [r7, #16]
 801e7f6:	330b      	adds	r3, #11
 801e7f8:	0019      	movs	r1, r3
 801e7fa:	68fa      	ldr	r2, [r7, #12]
 801e7fc:	693b      	ldr	r3, [r7, #16]
 801e7fe:	1ad3      	subs	r3, r2, r3
 801e800:	3b0b      	subs	r3, #11
 801e802:	001a      	movs	r2, r3
 801e804:	4b74      	ldr	r3, [pc, #464]	; (801e9d8 <get_http_uri_name+0x874>)
 801e806:	0018      	movs	r0, r3
 801e808:	f004 f9fa 	bl	8022c00 <strncpy>
		printf("\nSetIROFF: %s\n\n", sSetIROFF);
 801e80c:	4a72      	ldr	r2, [pc, #456]	; (801e9d8 <get_http_uri_name+0x874>)
 801e80e:	4b73      	ldr	r3, [pc, #460]	; (801e9dc <get_http_uri_name+0x878>)
 801e810:	0011      	movs	r1, r2
 801e812:	0018      	movs	r0, r3
 801e814:	f003 fffe 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"RS232_com_on=");
 801e818:	4a71      	ldr	r2, [pc, #452]	; (801e9e0 <get_http_uri_name+0x87c>)
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	0011      	movs	r1, r2
 801e81e:	0018      	movs	r0, r3
 801e820:	f004 fa6a 	bl	8022cf8 <strstr>
 801e824:	0003      	movs	r3, r0
 801e826:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 13, '&');
 801e828:	693b      	ldr	r3, [r7, #16]
 801e82a:	330d      	adds	r3, #13
 801e82c:	2126      	movs	r1, #38	; 0x26
 801e82e:	0018      	movs	r0, r3
 801e830:	f004 f9c7 	bl	8022bc2 <strchr>
 801e834:	0003      	movs	r3, r0
 801e836:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e838:	693b      	ldr	r3, [r7, #16]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d011      	beq.n	801e862 <get_http_uri_name+0x6fe>
	{
		strncpy((char *)sSetRS232ON, pch + 13, hn - pch - 13);
 801e83e:	693b      	ldr	r3, [r7, #16]
 801e840:	330d      	adds	r3, #13
 801e842:	0019      	movs	r1, r3
 801e844:	68fa      	ldr	r2, [r7, #12]
 801e846:	693b      	ldr	r3, [r7, #16]
 801e848:	1ad3      	subs	r3, r2, r3
 801e84a:	3b0d      	subs	r3, #13
 801e84c:	001a      	movs	r2, r3
 801e84e:	4b65      	ldr	r3, [pc, #404]	; (801e9e4 <get_http_uri_name+0x880>)
 801e850:	0018      	movs	r0, r3
 801e852:	f004 f9d5 	bl	8022c00 <strncpy>
		printf("\nSetRS232ON: %s\n\n", sSetRS232ON);
 801e856:	4a63      	ldr	r2, [pc, #396]	; (801e9e4 <get_http_uri_name+0x880>)
 801e858:	4b63      	ldr	r3, [pc, #396]	; (801e9e8 <get_http_uri_name+0x884>)
 801e85a:	0011      	movs	r1, r2
 801e85c:	0018      	movs	r0, r3
 801e85e:	f003 ffd9 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"RS232_com_off=");
 801e862:	4a62      	ldr	r2, [pc, #392]	; (801e9ec <get_http_uri_name+0x888>)
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	0011      	movs	r1, r2
 801e868:	0018      	movs	r0, r3
 801e86a:	f004 fa45 	bl	8022cf8 <strstr>
 801e86e:	0003      	movs	r3, r0
 801e870:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 14, '&');
 801e872:	693b      	ldr	r3, [r7, #16]
 801e874:	330e      	adds	r3, #14
 801e876:	2126      	movs	r1, #38	; 0x26
 801e878:	0018      	movs	r0, r3
 801e87a:	f004 f9a2 	bl	8022bc2 <strchr>
 801e87e:	0003      	movs	r3, r0
 801e880:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e882:	693b      	ldr	r3, [r7, #16]
 801e884:	2b00      	cmp	r3, #0
 801e886:	d011      	beq.n	801e8ac <get_http_uri_name+0x748>
	{
		strncpy((char *)sSetRS232OFF, pch + 14, hn - pch - 14);
 801e888:	693b      	ldr	r3, [r7, #16]
 801e88a:	330e      	adds	r3, #14
 801e88c:	0019      	movs	r1, r3
 801e88e:	68fa      	ldr	r2, [r7, #12]
 801e890:	693b      	ldr	r3, [r7, #16]
 801e892:	1ad3      	subs	r3, r2, r3
 801e894:	3b0e      	subs	r3, #14
 801e896:	001a      	movs	r2, r3
 801e898:	4b55      	ldr	r3, [pc, #340]	; (801e9f0 <get_http_uri_name+0x88c>)
 801e89a:	0018      	movs	r0, r3
 801e89c:	f004 f9b0 	bl	8022c00 <strncpy>
		printf("\nSetRS232OFF: %s\n\n", sSetRS232OFF);
 801e8a0:	4a53      	ldr	r2, [pc, #332]	; (801e9f0 <get_http_uri_name+0x88c>)
 801e8a2:	4b54      	ldr	r3, [pc, #336]	; (801e9f4 <get_http_uri_name+0x890>)
 801e8a4:	0011      	movs	r1, r2
 801e8a6:	0018      	movs	r0, r3
 801e8a8:	f003 ffb4 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"RS232_set_rs1=");
 801e8ac:	4a52      	ldr	r2, [pc, #328]	; (801e9f8 <get_http_uri_name+0x894>)
 801e8ae:	687b      	ldr	r3, [r7, #4]
 801e8b0:	0011      	movs	r1, r2
 801e8b2:	0018      	movs	r0, r3
 801e8b4:	f004 fa20 	bl	8022cf8 <strstr>
 801e8b8:	0003      	movs	r3, r0
 801e8ba:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 14, '&');
 801e8bc:	693b      	ldr	r3, [r7, #16]
 801e8be:	330e      	adds	r3, #14
 801e8c0:	2126      	movs	r1, #38	; 0x26
 801e8c2:	0018      	movs	r0, r3
 801e8c4:	f004 f97d 	bl	8022bc2 <strchr>
 801e8c8:	0003      	movs	r3, r0
 801e8ca:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e8cc:	693b      	ldr	r3, [r7, #16]
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d011      	beq.n	801e8f6 <get_http_uri_name+0x792>
	{
		strncpy((char *)rs1, pch + 14, hn - pch - 14);
 801e8d2:	693b      	ldr	r3, [r7, #16]
 801e8d4:	330e      	adds	r3, #14
 801e8d6:	0019      	movs	r1, r3
 801e8d8:	68fa      	ldr	r2, [r7, #12]
 801e8da:	693b      	ldr	r3, [r7, #16]
 801e8dc:	1ad3      	subs	r3, r2, r3
 801e8de:	3b0e      	subs	r3, #14
 801e8e0:	001a      	movs	r2, r3
 801e8e2:	4b46      	ldr	r3, [pc, #280]	; (801e9fc <get_http_uri_name+0x898>)
 801e8e4:	0018      	movs	r0, r3
 801e8e6:	f004 f98b 	bl	8022c00 <strncpy>
		printf("\nrs1: %s\n\n", rs1);
 801e8ea:	4a44      	ldr	r2, [pc, #272]	; (801e9fc <get_http_uri_name+0x898>)
 801e8ec:	4b44      	ldr	r3, [pc, #272]	; (801ea00 <get_http_uri_name+0x89c>)
 801e8ee:	0011      	movs	r1, r2
 801e8f0:	0018      	movs	r0, r3
 801e8f2:	f003 ff8f 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"RS232_set_rs2=");
 801e8f6:	4a43      	ldr	r2, [pc, #268]	; (801ea04 <get_http_uri_name+0x8a0>)
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	0011      	movs	r1, r2
 801e8fc:	0018      	movs	r0, r3
 801e8fe:	f004 f9fb 	bl	8022cf8 <strstr>
 801e902:	0003      	movs	r3, r0
 801e904:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 14, '&');
 801e906:	693b      	ldr	r3, [r7, #16]
 801e908:	330e      	adds	r3, #14
 801e90a:	2126      	movs	r1, #38	; 0x26
 801e90c:	0018      	movs	r0, r3
 801e90e:	f004 f958 	bl	8022bc2 <strchr>
 801e912:	0003      	movs	r3, r0
 801e914:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e916:	693b      	ldr	r3, [r7, #16]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d011      	beq.n	801e940 <get_http_uri_name+0x7dc>
	{
		strncpy((char *)rs2, pch + 14, hn - pch - 14);
 801e91c:	693b      	ldr	r3, [r7, #16]
 801e91e:	330e      	adds	r3, #14
 801e920:	0019      	movs	r1, r3
 801e922:	68fa      	ldr	r2, [r7, #12]
 801e924:	693b      	ldr	r3, [r7, #16]
 801e926:	1ad3      	subs	r3, r2, r3
 801e928:	3b0e      	subs	r3, #14
 801e92a:	001a      	movs	r2, r3
 801e92c:	4b36      	ldr	r3, [pc, #216]	; (801ea08 <get_http_uri_name+0x8a4>)
 801e92e:	0018      	movs	r0, r3
 801e930:	f004 f966 	bl	8022c00 <strncpy>
		printf("\nrs2: %s\n\n", rs2);
 801e934:	4a34      	ldr	r2, [pc, #208]	; (801ea08 <get_http_uri_name+0x8a4>)
 801e936:	4b35      	ldr	r3, [pc, #212]	; (801ea0c <get_http_uri_name+0x8a8>)
 801e938:	0011      	movs	r1, r2
 801e93a:	0018      	movs	r0, r3
 801e93c:	f003 ff6a 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"RS232_set_rs3=");
 801e940:	4a33      	ldr	r2, [pc, #204]	; (801ea10 <get_http_uri_name+0x8ac>)
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	0011      	movs	r1, r2
 801e946:	0018      	movs	r0, r3
 801e948:	f004 f9d6 	bl	8022cf8 <strstr>
 801e94c:	0003      	movs	r3, r0
 801e94e:	613b      	str	r3, [r7, #16]
	hn = strchr((char*)(pch + 14), 0);
 801e950:	693b      	ldr	r3, [r7, #16]
 801e952:	330e      	adds	r3, #14
 801e954:	001c      	movs	r4, r3
 801e956:	0020      	movs	r0, r4
 801e958:	f7e3 fbdc 	bl	8002114 <strlen>
 801e95c:	0003      	movs	r3, r0
 801e95e:	18e3      	adds	r3, r4, r3
 801e960:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801e962:	693b      	ldr	r3, [r7, #16]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d067      	beq.n	801ea38 <get_http_uri_name+0x8d4>
 801e968:	e054      	b.n	801ea14 <get_http_uri_name+0x8b0>
 801e96a:	46c0      	nop			; (mov r8, r8)
 801e96c:	08031444 	.word	0x08031444
 801e970:	0803144c 	.word	0x0803144c
 801e974:	20007da3 	.word	0x20007da3
 801e978:	08031458 	.word	0x08031458
 801e97c:	08031460 	.word	0x08031460
 801e980:	08031468 	.word	0x08031468
 801e984:	08031470 	.word	0x08031470
 801e988:	08031474 	.word	0x08031474
 801e98c:	0803147c 	.word	0x0803147c
 801e990:	08031480 	.word	0x08031480
 801e994:	08031488 	.word	0x08031488
 801e998:	08031490 	.word	0x08031490
 801e99c:	20007d10 	.word	0x20007d10
 801e9a0:	080314a0 	.word	0x080314a0
 801e9a4:	080314b4 	.word	0x080314b4
 801e9a8:	20007d1c 	.word	0x20007d1c
 801e9ac:	080314c4 	.word	0x080314c4
 801e9b0:	080314d8 	.word	0x080314d8
 801e9b4:	20007cf0 	.word	0x20007cf0
 801e9b8:	080314ec 	.word	0x080314ec
 801e9bc:	08031504 	.word	0x08031504
 801e9c0:	20007cf8 	.word	0x20007cf8
 801e9c4:	08031518 	.word	0x08031518
 801e9c8:	08031530 	.word	0x08031530
 801e9cc:	20007d24 	.word	0x20007d24
 801e9d0:	0803153c 	.word	0x0803153c
 801e9d4:	0803154c 	.word	0x0803154c
 801e9d8:	20007ca0 	.word	0x20007ca0
 801e9dc:	08031558 	.word	0x08031558
 801e9e0:	08031568 	.word	0x08031568
 801e9e4:	20007d34 	.word	0x20007d34
 801e9e8:	08031578 	.word	0x08031578
 801e9ec:	0803158c 	.word	0x0803158c
 801e9f0:	20007cb0 	.word	0x20007cb0
 801e9f4:	0803159c 	.word	0x0803159c
 801e9f8:	080315b0 	.word	0x080315b0
 801e9fc:	20007d8c 	.word	0x20007d8c
 801ea00:	080315c0 	.word	0x080315c0
 801ea04:	080315cc 	.word	0x080315cc
 801ea08:	20007d94 	.word	0x20007d94
 801ea0c:	080315dc 	.word	0x080315dc
 801ea10:	080315e8 	.word	0x080315e8
	{
		strncpy((char *)rs3, pch + 14, hn - pch - 14);
 801ea14:	693b      	ldr	r3, [r7, #16]
 801ea16:	330e      	adds	r3, #14
 801ea18:	0019      	movs	r1, r3
 801ea1a:	68fa      	ldr	r2, [r7, #12]
 801ea1c:	693b      	ldr	r3, [r7, #16]
 801ea1e:	1ad3      	subs	r3, r2, r3
 801ea20:	3b0e      	subs	r3, #14
 801ea22:	001a      	movs	r2, r3
 801ea24:	4b80      	ldr	r3, [pc, #512]	; (801ec28 <get_http_uri_name+0xac4>)
 801ea26:	0018      	movs	r0, r3
 801ea28:	f004 f8ea 	bl	8022c00 <strncpy>
		printf("\nrs3: %s\n\n", rs3);
 801ea2c:	4a7e      	ldr	r2, [pc, #504]	; (801ec28 <get_http_uri_name+0xac4>)
 801ea2e:	4b7f      	ldr	r3, [pc, #508]	; (801ec2c <get_http_uri_name+0xac8>)
 801ea30:	0011      	movs	r1, r2
 801ea32:	0018      	movs	r0, r3
 801ea34:	f003 feee 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"function=");
 801ea38:	4a7d      	ldr	r2, [pc, #500]	; (801ec30 <get_http_uri_name+0xacc>)
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	0011      	movs	r1, r2
 801ea3e:	0018      	movs	r0, r3
 801ea40:	f004 f95a 	bl	8022cf8 <strstr>
 801ea44:	0003      	movs	r3, r0
 801ea46:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 9, '&');
 801ea48:	693b      	ldr	r3, [r7, #16]
 801ea4a:	3309      	adds	r3, #9
 801ea4c:	2126      	movs	r1, #38	; 0x26
 801ea4e:	0018      	movs	r0, r3
 801ea50:	f004 f8b7 	bl	8022bc2 <strchr>
 801ea54:	0003      	movs	r3, r0
 801ea56:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801ea58:	693b      	ldr	r3, [r7, #16]
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d011      	beq.n	801ea82 <get_http_uri_name+0x91e>
	{
		strncpy((char *)function, pch + 9, hn - pch - 9);
 801ea5e:	693b      	ldr	r3, [r7, #16]
 801ea60:	3309      	adds	r3, #9
 801ea62:	0019      	movs	r1, r3
 801ea64:	68fa      	ldr	r2, [r7, #12]
 801ea66:	693b      	ldr	r3, [r7, #16]
 801ea68:	1ad3      	subs	r3, r2, r3
 801ea6a:	3b09      	subs	r3, #9
 801ea6c:	001a      	movs	r2, r3
 801ea6e:	4b71      	ldr	r3, [pc, #452]	; (801ec34 <get_http_uri_name+0xad0>)
 801ea70:	0018      	movs	r0, r3
 801ea72:	f004 f8c5 	bl	8022c00 <strncpy>
		printf("\nfunction: %s\n\n", function);
 801ea76:	4a6f      	ldr	r2, [pc, #444]	; (801ec34 <get_http_uri_name+0xad0>)
 801ea78:	4b6f      	ldr	r3, [pc, #444]	; (801ec38 <get_http_uri_name+0xad4>)
 801ea7a:	0011      	movs	r1, r2
 801ea7c:	0018      	movs	r0, r3
 801ea7e:	f003 fec9 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"param1=");
 801ea82:	4a6e      	ldr	r2, [pc, #440]	; (801ec3c <get_http_uri_name+0xad8>)
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	0011      	movs	r1, r2
 801ea88:	0018      	movs	r0, r3
 801ea8a:	f004 f935 	bl	8022cf8 <strstr>
 801ea8e:	0003      	movs	r3, r0
 801ea90:	613b      	str	r3, [r7, #16]
	hn = strchr(pch + 7, '&');
 801ea92:	693b      	ldr	r3, [r7, #16]
 801ea94:	3307      	adds	r3, #7
 801ea96:	2126      	movs	r1, #38	; 0x26
 801ea98:	0018      	movs	r0, r3
 801ea9a:	f004 f892 	bl	8022bc2 <strchr>
 801ea9e:	0003      	movs	r3, r0
 801eaa0:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801eaa2:	693b      	ldr	r3, [r7, #16]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d010      	beq.n	801eaca <get_http_uri_name+0x966>
	{
		strncpy((char *)param1, pch + 7, hn - pch - 7);
 801eaa8:	693b      	ldr	r3, [r7, #16]
 801eaaa:	1dd9      	adds	r1, r3, #7
 801eaac:	68fa      	ldr	r2, [r7, #12]
 801eaae:	693b      	ldr	r3, [r7, #16]
 801eab0:	1ad3      	subs	r3, r2, r3
 801eab2:	3b07      	subs	r3, #7
 801eab4:	001a      	movs	r2, r3
 801eab6:	4b62      	ldr	r3, [pc, #392]	; (801ec40 <get_http_uri_name+0xadc>)
 801eab8:	0018      	movs	r0, r3
 801eaba:	f004 f8a1 	bl	8022c00 <strncpy>
		printf("\nparam1: %s\n\n", param1);
 801eabe:	4a60      	ldr	r2, [pc, #384]	; (801ec40 <get_http_uri_name+0xadc>)
 801eac0:	4b60      	ldr	r3, [pc, #384]	; (801ec44 <get_http_uri_name+0xae0>)
 801eac2:	0011      	movs	r1, r2
 801eac4:	0018      	movs	r0, r3
 801eac6:	f003 fea5 	bl	8022814 <iprintf>
	}
	pch = strstr((char*)uri, (char*)"param2=");
 801eaca:	4a5f      	ldr	r2, [pc, #380]	; (801ec48 <get_http_uri_name+0xae4>)
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	0011      	movs	r1, r2
 801ead0:	0018      	movs	r0, r3
 801ead2:	f004 f911 	bl	8022cf8 <strstr>
 801ead6:	0003      	movs	r3, r0
 801ead8:	613b      	str	r3, [r7, #16]
	hn = strchr((char*)(pch + 7), 0);
 801eada:	693b      	ldr	r3, [r7, #16]
 801eadc:	1ddc      	adds	r4, r3, #7
 801eade:	0020      	movs	r0, r4
 801eae0:	f7e3 fb18 	bl	8002114 <strlen>
 801eae4:	0003      	movs	r3, r0
 801eae6:	18e3      	adds	r3, r4, r3
 801eae8:	60fb      	str	r3, [r7, #12]
	if (pch != NULL)
 801eaea:	693b      	ldr	r3, [r7, #16]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d010      	beq.n	801eb12 <get_http_uri_name+0x9ae>
	{
		strncpy((char *)param2, pch + 7, hn - pch - 7);
 801eaf0:	693b      	ldr	r3, [r7, #16]
 801eaf2:	1dd9      	adds	r1, r3, #7
 801eaf4:	68fa      	ldr	r2, [r7, #12]
 801eaf6:	693b      	ldr	r3, [r7, #16]
 801eaf8:	1ad3      	subs	r3, r2, r3
 801eafa:	3b07      	subs	r3, #7
 801eafc:	001a      	movs	r2, r3
 801eafe:	4b53      	ldr	r3, [pc, #332]	; (801ec4c <get_http_uri_name+0xae8>)
 801eb00:	0018      	movs	r0, r3
 801eb02:	f004 f87d 	bl	8022c00 <strncpy>
		printf("\nparam2: %s\n\n", param2);
 801eb06:	4a51      	ldr	r2, [pc, #324]	; (801ec4c <get_http_uri_name+0xae8>)
 801eb08:	4b51      	ldr	r3, [pc, #324]	; (801ec50 <get_http_uri_name+0xaec>)
 801eb0a:	0011      	movs	r1, r2
 801eb0c:	0018      	movs	r0, r3
 801eb0e:	f003 fe81 	bl	8022814 <iprintf>
	/*if(pch != NULL){
		strcpy(txt, pch+7);
		printf("\nOutput Text: %s\n\n", txt);
	}*/

	if (strcmp((char *)uri_ptr, "/"))
 801eb12:	4a50      	ldr	r2, [pc, #320]	; (801ec54 <get_http_uri_name+0xaf0>)
 801eb14:	69fb      	ldr	r3, [r7, #28]
 801eb16:	0011      	movs	r1, r2
 801eb18:	0018      	movs	r0, r3
 801eb1a:	f7e3 faf1 	bl	8002100 <strcmp>
 801eb1e:	1e03      	subs	r3, r0, #0
 801eb20:	d002      	beq.n	801eb28 <get_http_uri_name+0x9c4>
		uri_ptr++;
 801eb22:	69fb      	ldr	r3, [r7, #28]
 801eb24:	3301      	adds	r3, #1
 801eb26:	61fb      	str	r3, [r7, #28]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801eb28:	69fa      	ldr	r2, [r7, #28]
 801eb2a:	683b      	ldr	r3, [r7, #0]
 801eb2c:	0011      	movs	r1, r2
 801eb2e:	0018      	movs	r0, r3
 801eb30:	f004 ff12 	bl	8023958 <strcpy>
#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	// NOTE: ERHAN 3 new params
	if (strstr((char*)uri, (char*)"LOOPON=1") != NULL)
 801eb34:	4a48      	ldr	r2, [pc, #288]	; (801ec58 <get_http_uri_name+0xaf4>)
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	0011      	movs	r1, r2
 801eb3a:	0018      	movs	r0, r3
 801eb3c:	f004 f8dc 	bl	8022cf8 <strstr>
 801eb40:	1e03      	subs	r3, r0, #0
 801eb42:	d006      	beq.n	801eb52 <get_http_uri_name+0x9ee>
	{
		printf("LOOPON=1");
 801eb44:	4b44      	ldr	r3, [pc, #272]	; (801ec58 <get_http_uri_name+0xaf4>)
 801eb46:	0018      	movs	r0, r3
 801eb48:	f003 fe64 	bl	8022814 <iprintf>
		loopon = 1;
 801eb4c:	4b43      	ldr	r3, [pc, #268]	; (801ec5c <get_http_uri_name+0xaf8>)
 801eb4e:	2201      	movs	r2, #1
 801eb50:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"LOOPON=2") != NULL)
 801eb52:	4a43      	ldr	r2, [pc, #268]	; (801ec60 <get_http_uri_name+0xafc>)
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	0011      	movs	r1, r2
 801eb58:	0018      	movs	r0, r3
 801eb5a:	f004 f8cd 	bl	8022cf8 <strstr>
 801eb5e:	1e03      	subs	r3, r0, #0
 801eb60:	d006      	beq.n	801eb70 <get_http_uri_name+0xa0c>
	{
		printf("LOOPON=2");
 801eb62:	4b3f      	ldr	r3, [pc, #252]	; (801ec60 <get_http_uri_name+0xafc>)
 801eb64:	0018      	movs	r0, r3
 801eb66:	f003 fe55 	bl	8022814 <iprintf>
		loopon = 2;
 801eb6a:	4b3c      	ldr	r3, [pc, #240]	; (801ec5c <get_http_uri_name+0xaf8>)
 801eb6c:	2202      	movs	r2, #2
 801eb6e:	701a      	strb	r2, [r3, #0]
	}

	if (strstr((char*)uri, (char*)"LOOPOFF=1") != NULL)
 801eb70:	4a3c      	ldr	r2, [pc, #240]	; (801ec64 <get_http_uri_name+0xb00>)
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	0011      	movs	r1, r2
 801eb76:	0018      	movs	r0, r3
 801eb78:	f004 f8be 	bl	8022cf8 <strstr>
 801eb7c:	1e03      	subs	r3, r0, #0
 801eb7e:	d006      	beq.n	801eb8e <get_http_uri_name+0xa2a>
	{
		printf("LOOPOFF=1");
 801eb80:	4b38      	ldr	r3, [pc, #224]	; (801ec64 <get_http_uri_name+0xb00>)
 801eb82:	0018      	movs	r0, r3
 801eb84:	f003 fe46 	bl	8022814 <iprintf>
		loopoff = 1;
 801eb88:	4b37      	ldr	r3, [pc, #220]	; (801ec68 <get_http_uri_name+0xb04>)
 801eb8a:	2201      	movs	r2, #1
 801eb8c:	701a      	strb	r2, [r3, #0]
	}
	if (strstr((char*)uri, (char*)"LOOPOFF=2") != NULL)
 801eb8e:	4a37      	ldr	r2, [pc, #220]	; (801ec6c <get_http_uri_name+0xb08>)
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	0011      	movs	r1, r2
 801eb94:	0018      	movs	r0, r3
 801eb96:	f004 f8af 	bl	8022cf8 <strstr>
 801eb9a:	1e03      	subs	r3, r0, #0
 801eb9c:	d006      	beq.n	801ebac <get_http_uri_name+0xa48>
	{
		printf("LOOPOFF=2");
 801eb9e:	4b33      	ldr	r3, [pc, #204]	; (801ec6c <get_http_uri_name+0xb08>)
 801eba0:	0018      	movs	r0, r3
 801eba2:	f003 fe37 	bl	8022814 <iprintf>
		loopoff = 2;
 801eba6:	4b30      	ldr	r3, [pc, #192]	; (801ec68 <get_http_uri_name+0xb04>)
 801eba8:	2202      	movs	r2, #2
 801ebaa:	701a      	strb	r2, [r3, #0]
	}

	if (strstr((char*)uri, (char*)"loop_time=") != NULL)
 801ebac:	4a30      	ldr	r2, [pc, #192]	; (801ec70 <get_http_uri_name+0xb0c>)
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	0011      	movs	r1, r2
 801ebb2:	0018      	movs	r0, r3
 801ebb4:	f004 f8a0 	bl	8022cf8 <strstr>
 801ebb8:	1e03      	subs	r3, r0, #0
 801ebba:	d02f      	beq.n	801ec1c <get_http_uri_name+0xab8>
	{
		pch = strstr((char*)uri, (char*)"loop_time=");
 801ebbc:	4a2c      	ldr	r2, [pc, #176]	; (801ec70 <get_http_uri_name+0xb0c>)
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	0011      	movs	r1, r2
 801ebc2:	0018      	movs	r0, r3
 801ebc4:	f004 f898 	bl	8022cf8 <strstr>
 801ebc8:	0003      	movs	r3, r0
 801ebca:	613b      	str	r3, [r7, #16]
		//char first_digit = pch[10];
		char second_digit = pch[11];
 801ebcc:	210b      	movs	r1, #11
 801ebce:	187b      	adds	r3, r7, r1
 801ebd0:	693a      	ldr	r2, [r7, #16]
 801ebd2:	7ad2      	ldrb	r2, [r2, #11]
 801ebd4:	701a      	strb	r2, [r3, #0]
		if (second_digit == '&')
 801ebd6:	187b      	adds	r3, r7, r1
 801ebd8:	781b      	ldrb	r3, [r3, #0]
 801ebda:	2b26      	cmp	r3, #38	; 0x26
 801ebdc:	d107      	bne.n	801ebee <get_http_uri_name+0xa8a>
		{
			looptime = ((uint8_t)pch[10]) - 48;
 801ebde:	693b      	ldr	r3, [r7, #16]
 801ebe0:	330a      	adds	r3, #10
 801ebe2:	781b      	ldrb	r3, [r3, #0]
 801ebe4:	3b30      	subs	r3, #48	; 0x30
 801ebe6:	b2da      	uxtb	r2, r3
 801ebe8:	4b22      	ldr	r3, [pc, #136]	; (801ec74 <get_http_uri_name+0xb10>)
 801ebea:	701a      	strb	r2, [r3, #0]
 801ebec:	e016      	b.n	801ec1c <get_http_uri_name+0xab8>
		}
		else
		{
			looptime = (((uint8_t)pch[10]) - 48) * 10;
 801ebee:	693b      	ldr	r3, [r7, #16]
 801ebf0:	330a      	adds	r3, #10
 801ebf2:	781b      	ldrb	r3, [r3, #0]
 801ebf4:	3b30      	subs	r3, #48	; 0x30
 801ebf6:	b2db      	uxtb	r3, r3
 801ebf8:	1c1a      	adds	r2, r3, #0
 801ebfa:	0092      	lsls	r2, r2, #2
 801ebfc:	18d3      	adds	r3, r2, r3
 801ebfe:	18db      	adds	r3, r3, r3
 801ec00:	b2da      	uxtb	r2, r3
 801ec02:	4b1c      	ldr	r3, [pc, #112]	; (801ec74 <get_http_uri_name+0xb10>)
 801ec04:	701a      	strb	r2, [r3, #0]
			looptime += ((uint8_t)pch[11]) - 48;
 801ec06:	693b      	ldr	r3, [r7, #16]
 801ec08:	330b      	adds	r3, #11
 801ec0a:	781a      	ldrb	r2, [r3, #0]
 801ec0c:	4b19      	ldr	r3, [pc, #100]	; (801ec74 <get_http_uri_name+0xb10>)
 801ec0e:	781b      	ldrb	r3, [r3, #0]
 801ec10:	18d3      	adds	r3, r2, r3
 801ec12:	b2db      	uxtb	r3, r3
 801ec14:	3b30      	subs	r3, #48	; 0x30
 801ec16:	b2da      	uxtb	r2, r3
 801ec18:	4b16      	ldr	r3, [pc, #88]	; (801ec74 <get_http_uri_name+0xb10>)
 801ec1a:	701a      	strb	r2, [r3, #0]
		strncpy((char *)sPIRDelayON, pch+13, hn-pch-13);
		printf("\nLOOP TIME: %s\n\n", sPIRDelayON);
	}
#endif

	return 1;
 801ec1c:	2301      	movs	r3, #1
}
 801ec1e:	0018      	movs	r0, r3
 801ec20:	46bd      	mov	sp, r7
 801ec22:	b009      	add	sp, #36	; 0x24
 801ec24:	bd90      	pop	{r4, r7, pc}
 801ec26:	46c0      	nop			; (mov r8, r8)
 801ec28:	20007d9c 	.word	0x20007d9c
 801ec2c:	080315f8 	.word	0x080315f8
 801ec30:	08031604 	.word	0x08031604
 801ec34:	20007da8 	.word	0x20007da8
 801ec38:	08031610 	.word	0x08031610
 801ec3c:	08031620 	.word	0x08031620
 801ec40:	20007db4 	.word	0x20007db4
 801ec44:	08031628 	.word	0x08031628
 801ec48:	08031638 	.word	0x08031638
 801ec4c:	20007dc0 	.word	0x20007dc0
 801ec50:	08031640 	.word	0x08031640
 801ec54:	08031650 	.word	0x08031650
 801ec58:	08031654 	.word	0x08031654
 801ec5c:	20007e10 	.word	0x20007e10
 801ec60:	08031660 	.word	0x08031660
 801ec64:	0803166c 	.word	0x0803166c
 801ec68:	20007e11 	.word	0x20007e11
 801ec6c:	08031678 	.word	0x08031678
 801ec70:	08031684 	.word	0x08031684
 801ec74:	20007e12 	.word	0x20007e12

0801ec78 <ATOI>:
*/
uint32_t ATOI(
	uint8_t *str, /**< is a pointer to convert */
	uint8_t base  /**< is a base value (must be in the range 2 - 16) */
)
{
 801ec78:	b590      	push	{r4, r7, lr}
 801ec7a:	b085      	sub	sp, #20
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	6078      	str	r0, [r7, #4]
 801ec80:	000a      	movs	r2, r1
 801ec82:	1cfb      	adds	r3, r7, #3
 801ec84:	701a      	strb	r2, [r3, #0]
	unsigned int num = 0;
 801ec86:	2300      	movs	r3, #0
 801ec88:	60fb      	str	r3, [r7, #12]
	// debug_2013_11_25
	//        while (*str !=0)
	while ((*str != 0) && (*str != 0x20)) // not include the space(0x020)
 801ec8a:	e00e      	b.n	801ecaa <ATOI+0x32>
		num = num * base + C2D(*str++);
 801ec8c:	1cfb      	adds	r3, r7, #3
 801ec8e:	781b      	ldrb	r3, [r3, #0]
 801ec90:	68fa      	ldr	r2, [r7, #12]
 801ec92:	435a      	muls	r2, r3
 801ec94:	0014      	movs	r4, r2
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	1c5a      	adds	r2, r3, #1
 801ec9a:	607a      	str	r2, [r7, #4]
 801ec9c:	781b      	ldrb	r3, [r3, #0]
 801ec9e:	0018      	movs	r0, r3
 801eca0:	f000 f871 	bl	801ed86 <C2D>
 801eca4:	0003      	movs	r3, r0
 801eca6:	18e3      	adds	r3, r4, r3
 801eca8:	60fb      	str	r3, [r7, #12]
	while ((*str != 0) && (*str != 0x20)) // not include the space(0x020)
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	781b      	ldrb	r3, [r3, #0]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d003      	beq.n	801ecba <ATOI+0x42>
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	781b      	ldrb	r3, [r3, #0]
 801ecb6:	2b20      	cmp	r3, #32
 801ecb8:	d1e8      	bne.n	801ec8c <ATOI+0x14>
	return num;
 801ecba:	68fb      	ldr	r3, [r7, #12]
}
 801ecbc:	0018      	movs	r0, r3
 801ecbe:	46bd      	mov	sp, r7
 801ecc0:	b005      	add	sp, #20
 801ecc2:	bd90      	pop	{r4, r7, pc}

0801ecc4 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
void mid(char *src, char *s1, char *s2, char *sub)
{
 801ecc4:	b590      	push	{r4, r7, lr}
 801ecc6:	b089      	sub	sp, #36	; 0x24
 801ecc8:	af00      	add	r7, sp, #0
 801ecca:	60f8      	str	r0, [r7, #12]
 801eccc:	60b9      	str	r1, [r7, #8]
 801ecce:	607a      	str	r2, [r7, #4]
 801ecd0:	603b      	str	r3, [r7, #0]
	char *sub1;
	char *sub2;
	uint16_t n;

	sub1 = strstr((char *)src, (char *)s1);
 801ecd2:	68ba      	ldr	r2, [r7, #8]
 801ecd4:	68fb      	ldr	r3, [r7, #12]
 801ecd6:	0011      	movs	r1, r2
 801ecd8:	0018      	movs	r0, r3
 801ecda:	f004 f80d 	bl	8022cf8 <strstr>
 801ecde:	0003      	movs	r3, r0
 801ece0:	61fb      	str	r3, [r7, #28]
	sub1 += strlen((char *)s1);
 801ece2:	68bb      	ldr	r3, [r7, #8]
 801ece4:	0018      	movs	r0, r3
 801ece6:	f7e3 fa15 	bl	8002114 <strlen>
 801ecea:	0002      	movs	r2, r0
 801ecec:	69fb      	ldr	r3, [r7, #28]
 801ecee:	189b      	adds	r3, r3, r2
 801ecf0:	61fb      	str	r3, [r7, #28]
	sub2 = strstr((char *)sub1, (char *)s2);
 801ecf2:	687a      	ldr	r2, [r7, #4]
 801ecf4:	69fb      	ldr	r3, [r7, #28]
 801ecf6:	0011      	movs	r1, r2
 801ecf8:	0018      	movs	r0, r3
 801ecfa:	f003 fffd 	bl	8022cf8 <strstr>
 801ecfe:	0003      	movs	r3, r0
 801ed00:	61bb      	str	r3, [r7, #24]

	n = sub2 - sub1;
 801ed02:	69ba      	ldr	r2, [r7, #24]
 801ed04:	69fb      	ldr	r3, [r7, #28]
 801ed06:	1ad2      	subs	r2, r2, r3
 801ed08:	2416      	movs	r4, #22
 801ed0a:	193b      	adds	r3, r7, r4
 801ed0c:	801a      	strh	r2, [r3, #0]
	strncpy((char *)sub, (char *)sub1, n);
 801ed0e:	193b      	adds	r3, r7, r4
 801ed10:	881a      	ldrh	r2, [r3, #0]
 801ed12:	69f9      	ldr	r1, [r7, #28]
 801ed14:	683b      	ldr	r3, [r7, #0]
 801ed16:	0018      	movs	r0, r3
 801ed18:	f003 ff72 	bl	8022c00 <strncpy>
	sub[n] = '\0';
 801ed1c:	193b      	adds	r3, r7, r4
 801ed1e:	881b      	ldrh	r3, [r3, #0]
 801ed20:	683a      	ldr	r2, [r7, #0]
 801ed22:	18d3      	adds	r3, r2, r3
 801ed24:	2200      	movs	r2, #0
 801ed26:	701a      	strb	r2, [r3, #0]
}
 801ed28:	46c0      	nop			; (mov r8, r8)
 801ed2a:	46bd      	mov	sp, r7
 801ed2c:	b009      	add	sp, #36	; 0x24
 801ed2e:	bd90      	pop	{r4, r7, pc}

0801ed30 <replacetochar>:
static void replacetochar(
	uint8_t *str,	 /**< pointer to be replaced */
	uint8_t oldchar, /**< old character */
	uint8_t newchar	 /**< new character */
)
{
 801ed30:	b580      	push	{r7, lr}
 801ed32:	b084      	sub	sp, #16
 801ed34:	af00      	add	r7, sp, #0
 801ed36:	6078      	str	r0, [r7, #4]
 801ed38:	0008      	movs	r0, r1
 801ed3a:	0011      	movs	r1, r2
 801ed3c:	1cfb      	adds	r3, r7, #3
 801ed3e:	1c02      	adds	r2, r0, #0
 801ed40:	701a      	strb	r2, [r3, #0]
 801ed42:	1cbb      	adds	r3, r7, #2
 801ed44:	1c0a      	adds	r2, r1, #0
 801ed46:	701a      	strb	r2, [r3, #0]
	int x;
	for (x = 0; str[x]; x++)
 801ed48:	2300      	movs	r3, #0
 801ed4a:	60fb      	str	r3, [r7, #12]
 801ed4c:	e010      	b.n	801ed70 <replacetochar+0x40>
		if (str[x] == oldchar)
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	687a      	ldr	r2, [r7, #4]
 801ed52:	18d3      	adds	r3, r2, r3
 801ed54:	781b      	ldrb	r3, [r3, #0]
 801ed56:	1cfa      	adds	r2, r7, #3
 801ed58:	7812      	ldrb	r2, [r2, #0]
 801ed5a:	429a      	cmp	r2, r3
 801ed5c:	d105      	bne.n	801ed6a <replacetochar+0x3a>
			str[x] = newchar;
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	687a      	ldr	r2, [r7, #4]
 801ed62:	18d3      	adds	r3, r2, r3
 801ed64:	1cba      	adds	r2, r7, #2
 801ed66:	7812      	ldrb	r2, [r2, #0]
 801ed68:	701a      	strb	r2, [r3, #0]
	for (x = 0; str[x]; x++)
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	3301      	adds	r3, #1
 801ed6e:	60fb      	str	r3, [r7, #12]
 801ed70:	68fb      	ldr	r3, [r7, #12]
 801ed72:	687a      	ldr	r2, [r7, #4]
 801ed74:	18d3      	adds	r3, r2, r3
 801ed76:	781b      	ldrb	r3, [r3, #0]
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	d1e8      	bne.n	801ed4e <replacetochar+0x1e>
}
 801ed7c:	46c0      	nop			; (mov r8, r8)
 801ed7e:	46c0      	nop			; (mov r8, r8)
 801ed80:	46bd      	mov	sp, r7
 801ed82:	b004      	add	sp, #16
 801ed84:	bd80      	pop	{r7, pc}

0801ed86 <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
	uint8_t c /**< is a character('0'-'F') to convert to HEX */
)
{
 801ed86:	b580      	push	{r7, lr}
 801ed88:	b082      	sub	sp, #8
 801ed8a:	af00      	add	r7, sp, #0
 801ed8c:	0002      	movs	r2, r0
 801ed8e:	1dfb      	adds	r3, r7, #7
 801ed90:	701a      	strb	r2, [r3, #0]
	if (c >= '0' && c <= '9')
 801ed92:	1dfb      	adds	r3, r7, #7
 801ed94:	781b      	ldrb	r3, [r3, #0]
 801ed96:	2b2f      	cmp	r3, #47	; 0x2f
 801ed98:	d908      	bls.n	801edac <C2D+0x26>
 801ed9a:	1dfb      	adds	r3, r7, #7
 801ed9c:	781b      	ldrb	r3, [r3, #0]
 801ed9e:	2b39      	cmp	r3, #57	; 0x39
 801eda0:	d804      	bhi.n	801edac <C2D+0x26>
		return c - '0';
 801eda2:	1dfb      	adds	r3, r7, #7
 801eda4:	781b      	ldrb	r3, [r3, #0]
 801eda6:	3b30      	subs	r3, #48	; 0x30
 801eda8:	b2db      	uxtb	r3, r3
 801edaa:	e01b      	b.n	801ede4 <C2D+0x5e>
	if (c >= 'a' && c <= 'f')
 801edac:	1dfb      	adds	r3, r7, #7
 801edae:	781b      	ldrb	r3, [r3, #0]
 801edb0:	2b60      	cmp	r3, #96	; 0x60
 801edb2:	d908      	bls.n	801edc6 <C2D+0x40>
 801edb4:	1dfb      	adds	r3, r7, #7
 801edb6:	781b      	ldrb	r3, [r3, #0]
 801edb8:	2b66      	cmp	r3, #102	; 0x66
 801edba:	d804      	bhi.n	801edc6 <C2D+0x40>
		return 10 + c - 'a';
 801edbc:	1dfb      	adds	r3, r7, #7
 801edbe:	781b      	ldrb	r3, [r3, #0]
 801edc0:	3b57      	subs	r3, #87	; 0x57
 801edc2:	b2db      	uxtb	r3, r3
 801edc4:	e00e      	b.n	801ede4 <C2D+0x5e>
	if (c >= 'A' && c <= 'F')
 801edc6:	1dfb      	adds	r3, r7, #7
 801edc8:	781b      	ldrb	r3, [r3, #0]
 801edca:	2b40      	cmp	r3, #64	; 0x40
 801edcc:	d908      	bls.n	801ede0 <C2D+0x5a>
 801edce:	1dfb      	adds	r3, r7, #7
 801edd0:	781b      	ldrb	r3, [r3, #0]
 801edd2:	2b46      	cmp	r3, #70	; 0x46
 801edd4:	d804      	bhi.n	801ede0 <C2D+0x5a>
		return 10 + c - 'A';
 801edd6:	1dfb      	adds	r3, r7, #7
 801edd8:	781b      	ldrb	r3, [r3, #0]
 801edda:	3b37      	subs	r3, #55	; 0x37
 801eddc:	b2db      	uxtb	r3, r3
 801edde:	e001      	b.n	801ede4 <C2D+0x5e>

	return (char)c;
 801ede0:	1dfb      	adds	r3, r7, #7
 801ede2:	781b      	ldrb	r3, [r3, #0]
}
 801ede4:	0018      	movs	r0, r3
 801ede6:	46bd      	mov	sp, r7
 801ede8:	b002      	add	sp, #8
 801edea:	bd80      	pop	{r7, pc}

0801edec <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) { ; }
 801edec:	b580      	push	{r7, lr}
 801edee:	af00      	add	r7, sp, #0
 801edf0:	46c0      	nop			; (mov r8, r8)
 801edf2:	46bd      	mov	sp, r7
 801edf4:	bd80      	pop	{r7, pc}

0801edf6 <default_wdt_reset>:
void default_wdt_reset(void) { ; }
 801edf6:	b580      	push	{r7, lr}
 801edf8:	af00      	add	r7, sp, #0
 801edfa:	46c0      	nop			; (mov r8, r8)
 801edfc:	46bd      	mov	sp, r7
 801edfe:	bd80      	pop	{r7, pc}

0801ee00 <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t *socklist)
{
 801ee00:	b580      	push	{r7, lr}
 801ee02:	b084      	sub	sp, #16
 801ee04:	af00      	add	r7, sp, #0
 801ee06:	0002      	movs	r2, r0
 801ee08:	6039      	str	r1, [r7, #0]
 801ee0a:	1dfb      	adds	r3, r7, #7
 801ee0c:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < cnt; i++)
 801ee0e:	230f      	movs	r3, #15
 801ee10:	18fb      	adds	r3, r7, r3
 801ee12:	2200      	movs	r2, #0
 801ee14:	701a      	strb	r2, [r3, #0]
 801ee16:	e00e      	b.n	801ee36 <httpServer_Sockinit+0x36>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801ee18:	200f      	movs	r0, #15
 801ee1a:	183b      	adds	r3, r7, r0
 801ee1c:	781b      	ldrb	r3, [r3, #0]
 801ee1e:	683a      	ldr	r2, [r7, #0]
 801ee20:	18d2      	adds	r2, r2, r3
 801ee22:	183b      	adds	r3, r7, r0
 801ee24:	781b      	ldrb	r3, [r3, #0]
 801ee26:	7811      	ldrb	r1, [r2, #0]
 801ee28:	4a09      	ldr	r2, [pc, #36]	; (801ee50 <httpServer_Sockinit+0x50>)
 801ee2a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < cnt; i++)
 801ee2c:	183b      	adds	r3, r7, r0
 801ee2e:	781a      	ldrb	r2, [r3, #0]
 801ee30:	183b      	adds	r3, r7, r0
 801ee32:	3201      	adds	r2, #1
 801ee34:	701a      	strb	r2, [r3, #0]
 801ee36:	230f      	movs	r3, #15
 801ee38:	18fa      	adds	r2, r7, r3
 801ee3a:	1dfb      	adds	r3, r7, #7
 801ee3c:	7812      	ldrb	r2, [r2, #0]
 801ee3e:	781b      	ldrb	r3, [r3, #0]
 801ee40:	429a      	cmp	r2, r3
 801ee42:	d3e9      	bcc.n	801ee18 <httpServer_Sockinit+0x18>
	}
}
 801ee44:	46c0      	nop			; (mov r8, r8)
 801ee46:	46c0      	nop			; (mov r8, r8)
 801ee48:	46bd      	mov	sp, r7
 801ee4a:	b004      	add	sp, #16
 801ee4c:	bd80      	pop	{r7, pc}
 801ee4e:	46c0      	nop			; (mov r8, r8)
 801ee50:	20007dd0 	.word	0x20007dd0

0801ee54 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801ee54:	b580      	push	{r7, lr}
 801ee56:	b082      	sub	sp, #8
 801ee58:	af00      	add	r7, sp, #0
 801ee5a:	0002      	movs	r2, r0
 801ee5c:	1dfb      	adds	r3, r7, #7
 801ee5e:	701a      	strb	r2, [r3, #0]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801ee60:	1dfb      	adds	r3, r7, #7
 801ee62:	781b      	ldrb	r3, [r3, #0]
 801ee64:	4a02      	ldr	r2, [pc, #8]	; (801ee70 <getHTTPSocketNum+0x1c>)
 801ee66:	5cd3      	ldrb	r3, [r2, r3]
}
 801ee68:	0018      	movs	r0, r3
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	b002      	add	sp, #8
 801ee6e:	bd80      	pop	{r7, pc}
 801ee70:	20007dd0 	.word	0x20007dd0

0801ee74 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801ee74:	b580      	push	{r7, lr}
 801ee76:	b084      	sub	sp, #16
 801ee78:	af00      	add	r7, sp, #0
 801ee7a:	0002      	movs	r2, r0
 801ee7c:	1dfb      	adds	r3, r7, #7
 801ee7e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ee80:	230f      	movs	r3, #15
 801ee82:	18fb      	adds	r3, r7, r3
 801ee84:	2200      	movs	r2, #0
 801ee86:	701a      	strb	r2, [r3, #0]
 801ee88:	e012      	b.n	801eeb0 <getHTTPSequenceNum+0x3c>
		if (HTTPSock_Num[i] == socket)
 801ee8a:	210f      	movs	r1, #15
 801ee8c:	187b      	adds	r3, r7, r1
 801ee8e:	781b      	ldrb	r3, [r3, #0]
 801ee90:	4a0d      	ldr	r2, [pc, #52]	; (801eec8 <getHTTPSequenceNum+0x54>)
 801ee92:	5cd3      	ldrb	r3, [r2, r3]
 801ee94:	1dfa      	adds	r2, r7, #7
 801ee96:	7812      	ldrb	r2, [r2, #0]
 801ee98:	429a      	cmp	r2, r3
 801ee9a:	d103      	bne.n	801eea4 <getHTTPSequenceNum+0x30>
			return i;
 801ee9c:	187b      	adds	r3, r7, r1
 801ee9e:	781b      	ldrb	r3, [r3, #0]
 801eea0:	b25b      	sxtb	r3, r3
 801eea2:	e00c      	b.n	801eebe <getHTTPSequenceNum+0x4a>
	for (i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801eea4:	210f      	movs	r1, #15
 801eea6:	187b      	adds	r3, r7, r1
 801eea8:	781a      	ldrb	r2, [r3, #0]
 801eeaa:	187b      	adds	r3, r7, r1
 801eeac:	3201      	adds	r2, #1
 801eeae:	701a      	strb	r2, [r3, #0]
 801eeb0:	230f      	movs	r3, #15
 801eeb2:	18fb      	adds	r3, r7, r3
 801eeb4:	781b      	ldrb	r3, [r3, #0]
 801eeb6:	2b07      	cmp	r3, #7
 801eeb8:	d9e7      	bls.n	801ee8a <getHTTPSequenceNum+0x16>

	return -1;
 801eeba:	2301      	movs	r3, #1
 801eebc:	425b      	negs	r3, r3
}
 801eebe:	0018      	movs	r0, r3
 801eec0:	46bd      	mov	sp, r7
 801eec2:	b004      	add	sp, #16
 801eec4:	bd80      	pop	{r7, pc}
 801eec6:	46c0      	nop			; (mov r8, r8)
 801eec8:	20007dd0 	.word	0x20007dd0

0801eecc <httpServer_init>:

void httpServer_init(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t cnt, uint8_t *socklist)
{
 801eecc:	b580      	push	{r7, lr}
 801eece:	b084      	sub	sp, #16
 801eed0:	af00      	add	r7, sp, #0
 801eed2:	60f8      	str	r0, [r7, #12]
 801eed4:	60b9      	str	r1, [r7, #8]
 801eed6:	603b      	str	r3, [r7, #0]
 801eed8:	1dfb      	adds	r3, r7, #7
 801eeda:	701a      	strb	r2, [r3, #0]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801eedc:	4b08      	ldr	r3, [pc, #32]	; (801ef00 <httpServer_init+0x34>)
 801eede:	68fa      	ldr	r2, [r7, #12]
 801eee0:	601a      	str	r2, [r3, #0]
	pHTTP_RX = rx_buf;
 801eee2:	4b08      	ldr	r3, [pc, #32]	; (801ef04 <httpServer_init+0x38>)
 801eee4:	68ba      	ldr	r2, [r7, #8]
 801eee6:	601a      	str	r2, [r3, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801eee8:	683a      	ldr	r2, [r7, #0]
 801eeea:	1dfb      	adds	r3, r7, #7
 801eeec:	781b      	ldrb	r3, [r3, #0]
 801eeee:	0011      	movs	r1, r2
 801eef0:	0018      	movs	r0, r3
 801eef2:	f7ff ff85 	bl	801ee00 <httpServer_Sockinit>
}
 801eef6:	46c0      	nop			; (mov r8, r8)
 801eef8:	46bd      	mov	sp, r7
 801eefa:	b004      	add	sp, #16
 801eefc:	bd80      	pop	{r7, pc}
 801eefe:	46c0      	nop			; (mov r8, r8)
 801ef00:	20007e18 	.word	0x20007e18
 801ef04:	20007e1c 	.word	0x20007e1c

0801ef08 <reg_httpServer_cbfunc>:

/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void (*mcu_reset)(void), void (*wdt_reset)(void))
{
 801ef08:	b580      	push	{r7, lr}
 801ef0a:	b082      	sub	sp, #8
 801ef0c:	af00      	add	r7, sp, #0
 801ef0e:	6078      	str	r0, [r7, #4]
 801ef10:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if (mcu_reset)
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d002      	beq.n	801ef1e <reg_httpServer_cbfunc+0x16>
		HTTPServer_ReStart = mcu_reset;
 801ef18:	4b06      	ldr	r3, [pc, #24]	; (801ef34 <reg_httpServer_cbfunc+0x2c>)
 801ef1a:	687a      	ldr	r2, [r7, #4]
 801ef1c:	601a      	str	r2, [r3, #0]
	if (wdt_reset)
 801ef1e:	683b      	ldr	r3, [r7, #0]
 801ef20:	2b00      	cmp	r3, #0
 801ef22:	d002      	beq.n	801ef2a <reg_httpServer_cbfunc+0x22>
		HTTPServer_WDT_Reset = wdt_reset;
 801ef24:	4b04      	ldr	r3, [pc, #16]	; (801ef38 <reg_httpServer_cbfunc+0x30>)
 801ef26:	683a      	ldr	r2, [r7, #0]
 801ef28:	601a      	str	r2, [r3, #0]
}
 801ef2a:	46c0      	nop			; (mov r8, r8)
 801ef2c:	46bd      	mov	sp, r7
 801ef2e:	b002      	add	sp, #8
 801ef30:	bd80      	pop	{r7, pc}
 801ef32:	46c0      	nop			; (mov r8, r8)
 801ef34:	200050c0 	.word	0x200050c0
 801ef38:	200050c4 	.word	0x200050c4

0801ef3c <httpServer_run>:

void httpServer_run(uint8_t seqnum)
{
 801ef3c:	b5b0      	push	{r4, r5, r7, lr}
 801ef3e:	b088      	sub	sp, #32
 801ef40:	af02      	add	r7, sp, #8
 801ef42:	0002      	movs	r2, r0
 801ef44:	1dfb      	adds	r3, r7, #7
 801ef46:	701a      	strb	r2, [r3, #0]
	uint8_t s; // socket number
	uint16_t len;
	uint32_t gettime = 0;
 801ef48:	2300      	movs	r3, #0
 801ef4a:	613b      	str	r3, [r7, #16]
		0,
	};
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX; // Structure of HTTP Request
 801ef4c:	4bc4      	ldr	r3, [pc, #784]	; (801f260 <httpServer_run+0x324>)
 801ef4e:	681a      	ldr	r2, [r3, #0]
 801ef50:	4bc4      	ldr	r3, [pc, #784]	; (801f264 <httpServer_run+0x328>)
 801ef52:	601a      	str	r2, [r3, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801ef54:	4bc4      	ldr	r3, [pc, #784]	; (801f268 <httpServer_run+0x32c>)
 801ef56:	681a      	ldr	r2, [r3, #0]
 801ef58:	4bc4      	ldr	r3, [pc, #784]	; (801f26c <httpServer_run+0x330>)
 801ef5a:	601a      	str	r2, [r3, #0]
	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801ef5c:	250f      	movs	r5, #15
 801ef5e:	197c      	adds	r4, r7, r5
 801ef60:	1dfb      	adds	r3, r7, #7
 801ef62:	781b      	ldrb	r3, [r3, #0]
 801ef64:	0018      	movs	r0, r3
 801ef66:	f7ff ff75 	bl	801ee54 <getHTTPSocketNum>
 801ef6a:	0003      	movs	r3, r0
 801ef6c:	7023      	strb	r3, [r4, #0]

	/* HTTP Service Start */
	switch (getSn_SR(s))
 801ef6e:	197b      	adds	r3, r7, r5
 801ef70:	781b      	ldrb	r3, [r3, #0]
 801ef72:	009b      	lsls	r3, r3, #2
 801ef74:	3301      	adds	r3, #1
 801ef76:	00db      	lsls	r3, r3, #3
 801ef78:	22c0      	movs	r2, #192	; 0xc0
 801ef7a:	0092      	lsls	r2, r2, #2
 801ef7c:	4694      	mov	ip, r2
 801ef7e:	4463      	add	r3, ip
 801ef80:	0018      	movs	r0, r3
 801ef82:	f7f9 ff9b 	bl	8018ebc <WIZCHIP_READ>
 801ef86:	0003      	movs	r3, r0
 801ef88:	2b1c      	cmp	r3, #28
 801ef8a:	d900      	bls.n	801ef8e <httpServer_run+0x52>
 801ef8c:	e163      	b.n	801f256 <httpServer_run+0x31a>
 801ef8e:	009a      	lsls	r2, r3, #2
 801ef90:	4bb7      	ldr	r3, [pc, #732]	; (801f270 <httpServer_run+0x334>)
 801ef92:	18d3      	adds	r3, r2, r3
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	469f      	mov	pc, r3
	{
	case SOCK_ESTABLISHED:
		// Interrupt clear
		if (getSn_IR(s) & Sn_IR_CON)
 801ef98:	240f      	movs	r4, #15
 801ef9a:	193b      	adds	r3, r7, r4
 801ef9c:	781b      	ldrb	r3, [r3, #0]
 801ef9e:	009b      	lsls	r3, r3, #2
 801efa0:	3301      	adds	r3, #1
 801efa2:	00db      	lsls	r3, r3, #3
 801efa4:	2280      	movs	r2, #128	; 0x80
 801efa6:	0092      	lsls	r2, r2, #2
 801efa8:	4694      	mov	ip, r2
 801efaa:	4463      	add	r3, ip
 801efac:	0018      	movs	r0, r3
 801efae:	f7f9 ff85 	bl	8018ebc <WIZCHIP_READ>
 801efb2:	0003      	movs	r3, r0
 801efb4:	001a      	movs	r2, r3
 801efb6:	2301      	movs	r3, #1
 801efb8:	4013      	ands	r3, r2
 801efba:	d00c      	beq.n	801efd6 <httpServer_run+0x9a>
		{
			setSn_IR(s, Sn_IR_CON);
 801efbc:	193b      	adds	r3, r7, r4
 801efbe:	781b      	ldrb	r3, [r3, #0]
 801efc0:	009b      	lsls	r3, r3, #2
 801efc2:	3301      	adds	r3, #1
 801efc4:	00db      	lsls	r3, r3, #3
 801efc6:	2280      	movs	r2, #128	; 0x80
 801efc8:	0092      	lsls	r2, r2, #2
 801efca:	4694      	mov	ip, r2
 801efcc:	4463      	add	r3, ip
 801efce:	2101      	movs	r1, #1
 801efd0:	0018      	movs	r0, r3
 801efd2:	f7f9 ffc5 	bl	8018f60 <WIZCHIP_WRITE>
		}
		// HTTP Process states
		switch (HTTPSock_Status[seqnum].sock_status)
 801efd6:	1dfb      	adds	r3, r7, #7
 801efd8:	781a      	ldrb	r2, [r3, #0]
 801efda:	4ba6      	ldr	r3, [pc, #664]	; (801f274 <httpServer_run+0x338>)
 801efdc:	2194      	movs	r1, #148	; 0x94
 801efde:	434a      	muls	r2, r1
 801efe0:	5cd3      	ldrb	r3, [r2, r3]
 801efe2:	2b04      	cmp	r3, #4
 801efe4:	d100      	bne.n	801efe8 <httpServer_run+0xac>
 801efe6:	e0ed      	b.n	801f1c4 <httpServer_run+0x288>
 801efe8:	dd00      	ble.n	801efec <httpServer_run+0xb0>
 801efea:	e117      	b.n	801f21c <httpServer_run+0x2e0>
 801efec:	2b00      	cmp	r3, #0
 801efee:	d003      	beq.n	801eff8 <httpServer_run+0xbc>
 801eff0:	2b03      	cmp	r3, #3
 801eff2:	d100      	bne.n	801eff6 <httpServer_run+0xba>
 801eff4:	e0c8      	b.n	801f188 <httpServer_run+0x24c>
#endif
			http_disconnect(s);
			break;

		default:
			break;
 801eff6:	e111      	b.n	801f21c <httpServer_run+0x2e0>
			if ((len = getSn_RX_RSR(s)) > 0)
 801eff8:	2516      	movs	r5, #22
 801effa:	197c      	adds	r4, r7, r5
 801effc:	230f      	movs	r3, #15
 801effe:	18fb      	adds	r3, r7, r3
 801f000:	781b      	ldrb	r3, [r3, #0]
 801f002:	0018      	movs	r0, r3
 801f004:	f7fa f94a 	bl	801929c <getSn_RX_RSR>
 801f008:	0003      	movs	r3, r0
 801f00a:	8023      	strh	r3, [r4, #0]
 801f00c:	197b      	adds	r3, r7, r5
 801f00e:	881b      	ldrh	r3, [r3, #0]
 801f010:	2b00      	cmp	r3, #0
 801f012:	d100      	bne.n	801f016 <httpServer_run+0xda>
 801f014:	e104      	b.n	801f220 <httpServer_run+0x2e4>
				if (len > DATA_BUF_SIZE)
 801f016:	197b      	adds	r3, r7, r5
 801f018:	881a      	ldrh	r2, [r3, #0]
 801f01a:	2380      	movs	r3, #128	; 0x80
 801f01c:	011b      	lsls	r3, r3, #4
 801f01e:	429a      	cmp	r2, r3
 801f020:	d903      	bls.n	801f02a <httpServer_run+0xee>
					len = DATA_BUF_SIZE;
 801f022:	197b      	adds	r3, r7, r5
 801f024:	2280      	movs	r2, #128	; 0x80
 801f026:	0112      	lsls	r2, r2, #4
 801f028:	801a      	strh	r2, [r3, #0]
				len = recv(s, (uint8_t *)http_request, len);
 801f02a:	4b8e      	ldr	r3, [pc, #568]	; (801f264 <httpServer_run+0x328>)
 801f02c:	6819      	ldr	r1, [r3, #0]
 801f02e:	2416      	movs	r4, #22
 801f030:	193b      	adds	r3, r7, r4
 801f032:	881a      	ldrh	r2, [r3, #0]
 801f034:	250f      	movs	r5, #15
 801f036:	197b      	adds	r3, r7, r5
 801f038:	781b      	ldrb	r3, [r3, #0]
 801f03a:	0018      	movs	r0, r3
 801f03c:	f7fc fb9c 	bl	801b778 <recv>
 801f040:	0002      	movs	r2, r0
 801f042:	193b      	adds	r3, r7, r4
 801f044:	801a      	strh	r2, [r3, #0]
				*(((uint8_t *)http_request) + len) = '\0';
 801f046:	4b87      	ldr	r3, [pc, #540]	; (801f264 <httpServer_run+0x328>)
 801f048:	681a      	ldr	r2, [r3, #0]
 801f04a:	193b      	adds	r3, r7, r4
 801f04c:	881b      	ldrh	r3, [r3, #0]
 801f04e:	18d3      	adds	r3, r2, r3
 801f050:	2200      	movs	r2, #0
 801f052:	701a      	strb	r2, [r3, #0]
				parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801f054:	4b85      	ldr	r3, [pc, #532]	; (801f26c <httpServer_run+0x330>)
 801f056:	681a      	ldr	r2, [r3, #0]
 801f058:	4b82      	ldr	r3, [pc, #520]	; (801f264 <httpServer_run+0x328>)
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	0019      	movs	r1, r3
 801f05e:	0010      	movs	r0, r2
 801f060:	f7fe ff4e 	bl	801df00 <parse_http_request>
				http_process_handler(s, parsed_http_request);
 801f064:	4b81      	ldr	r3, [pc, #516]	; (801f26c <httpServer_run+0x330>)
 801f066:	681a      	ldr	r2, [r3, #0]
 801f068:	197b      	adds	r3, r7, r5
 801f06a:	781b      	ldrb	r3, [r3, #0]
 801f06c:	0011      	movs	r1, r2
 801f06e:	0018      	movs	r0, r3
 801f070:	f000 fc72 	bl	801f958 <http_process_handler>
				gettime = get_httpServer_timecount();
 801f074:	f002 fee6 	bl	8021e44 <get_httpServer_timecount>
 801f078:	0003      	movs	r3, r0
 801f07a:	613b      	str	r3, [r7, #16]
				while (getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801f07c:	e006      	b.n	801f08c <httpServer_run+0x150>
					if ((get_httpServer_timecount() - gettime) > 3)
 801f07e:	f002 fee1 	bl	8021e44 <get_httpServer_timecount>
 801f082:	0002      	movs	r2, r0
 801f084:	693b      	ldr	r3, [r7, #16]
 801f086:	1ad3      	subs	r3, r2, r3
 801f088:	2b03      	cmp	r3, #3
 801f08a:	d818      	bhi.n	801f0be <httpServer_run+0x182>
				while (getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801f08c:	250f      	movs	r5, #15
 801f08e:	197b      	adds	r3, r7, r5
 801f090:	781b      	ldrb	r3, [r3, #0]
 801f092:	0018      	movs	r0, r3
 801f094:	f7fa f896 	bl	80191c4 <getSn_TX_FSR>
 801f098:	0003      	movs	r3, r0
 801f09a:	001c      	movs	r4, r3
 801f09c:	197b      	adds	r3, r7, r5
 801f09e:	781b      	ldrb	r3, [r3, #0]
 801f0a0:	009b      	lsls	r3, r3, #2
 801f0a2:	3301      	adds	r3, #1
 801f0a4:	00db      	lsls	r3, r3, #3
 801f0a6:	22f8      	movs	r2, #248	; 0xf8
 801f0a8:	0152      	lsls	r2, r2, #5
 801f0aa:	4694      	mov	ip, r2
 801f0ac:	4463      	add	r3, ip
 801f0ae:	0018      	movs	r0, r3
 801f0b0:	f7f9 ff04 	bl	8018ebc <WIZCHIP_READ>
 801f0b4:	0003      	movs	r3, r0
 801f0b6:	029b      	lsls	r3, r3, #10
 801f0b8:	429c      	cmp	r4, r3
 801f0ba:	d1e0      	bne.n	801f07e <httpServer_run+0x142>
 801f0bc:	e000      	b.n	801f0c0 <httpServer_run+0x184>
						break;
 801f0be:	46c0      	nop			; (mov r8, r8)
				if (HTTPSock_Status[seqnum].file_len > 0)
 801f0c0:	1dfb      	adds	r3, r7, #7
 801f0c2:	781b      	ldrb	r3, [r3, #0]
 801f0c4:	4a6b      	ldr	r2, [pc, #428]	; (801f274 <httpServer_run+0x338>)
 801f0c6:	2188      	movs	r1, #136	; 0x88
 801f0c8:	2094      	movs	r0, #148	; 0x94
 801f0ca:	4343      	muls	r3, r0
 801f0cc:	18d3      	adds	r3, r2, r3
 801f0ce:	185b      	adds	r3, r3, r1
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d007      	beq.n	801f0e6 <httpServer_run+0x1aa>
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801f0d6:	1dfb      	adds	r3, r7, #7
 801f0d8:	781a      	ldrb	r2, [r3, #0]
 801f0da:	4b66      	ldr	r3, [pc, #408]	; (801f274 <httpServer_run+0x338>)
 801f0dc:	2194      	movs	r1, #148	; 0x94
 801f0de:	434a      	muls	r2, r1
 801f0e0:	2103      	movs	r1, #3
 801f0e2:	54d1      	strb	r1, [r2, r3]
 801f0e4:	e010      	b.n	801f108 <httpServer_run+0x1cc>
				else if ((char*)strstr((char*)parsed_http_request->URI, (char*)"/LOAD?TV=") == (char*)NULL)
 801f0e6:	4b61      	ldr	r3, [pc, #388]	; (801f26c <httpServer_run+0x330>)
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	3302      	adds	r3, #2
 801f0ec:	4a62      	ldr	r2, [pc, #392]	; (801f278 <httpServer_run+0x33c>)
 801f0ee:	0011      	movs	r1, r2
 801f0f0:	0018      	movs	r0, r3
 801f0f2:	f003 fe01 	bl	8022cf8 <strstr>
 801f0f6:	1e03      	subs	r3, r0, #0
 801f0f8:	d106      	bne.n	801f108 <httpServer_run+0x1cc>
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801f0fa:	1dfb      	adds	r3, r7, #7
 801f0fc:	781a      	ldrb	r2, [r3, #0]
 801f0fe:	4b5d      	ldr	r3, [pc, #372]	; (801f274 <httpServer_run+0x338>)
 801f100:	2194      	movs	r1, #148	; 0x94
 801f102:	434a      	muls	r2, r1
 801f104:	2104      	movs	r1, #4
 801f106:	54d1      	strb	r1, [r2, r3]
				if (strstr((char*)parsed_http_request->URI, (char*)"/LOAD?TEMP=") != NULL)
 801f108:	4b58      	ldr	r3, [pc, #352]	; (801f26c <httpServer_run+0x330>)
 801f10a:	681b      	ldr	r3, [r3, #0]
 801f10c:	3302      	adds	r3, #2
 801f10e:	4a5b      	ldr	r2, [pc, #364]	; (801f27c <httpServer_run+0x340>)
 801f110:	0011      	movs	r1, r2
 801f112:	0018      	movs	r0, r3
 801f114:	f003 fdf0 	bl	8022cf8 <strstr>
 801f118:	1e03      	subs	r3, r0, #0
 801f11a:	d00a      	beq.n	801f132 <httpServer_run+0x1f6>
					printf("aborted1\n");
 801f11c:	4b58      	ldr	r3, [pc, #352]	; (801f280 <httpServer_run+0x344>)
 801f11e:	0018      	movs	r0, r3
 801f120:	f003 fbe8 	bl	80228f4 <puts>
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801f124:	1dfb      	adds	r3, r7, #7
 801f126:	781a      	ldrb	r2, [r3, #0]
 801f128:	4b52      	ldr	r3, [pc, #328]	; (801f274 <httpServer_run+0x338>)
 801f12a:	2194      	movs	r1, #148	; 0x94
 801f12c:	434a      	muls	r2, r1
 801f12e:	2100      	movs	r1, #0
 801f130:	54d1      	strb	r1, [r2, r3]
				if (strstr((char*)parsed_http_request->URI, (char*)"/LOAD?PIR=") != NULL)
 801f132:	4b4e      	ldr	r3, [pc, #312]	; (801f26c <httpServer_run+0x330>)
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	3302      	adds	r3, #2
 801f138:	4a52      	ldr	r2, [pc, #328]	; (801f284 <httpServer_run+0x348>)
 801f13a:	0011      	movs	r1, r2
 801f13c:	0018      	movs	r0, r3
 801f13e:	f003 fddb 	bl	8022cf8 <strstr>
 801f142:	1e03      	subs	r3, r0, #0
 801f144:	d00a      	beq.n	801f15c <httpServer_run+0x220>
					printf("aborted3\n");
 801f146:	4b50      	ldr	r3, [pc, #320]	; (801f288 <httpServer_run+0x34c>)
 801f148:	0018      	movs	r0, r3
 801f14a:	f003 fbd3 	bl	80228f4 <puts>
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801f14e:	1dfb      	adds	r3, r7, #7
 801f150:	781a      	ldrb	r2, [r3, #0]
 801f152:	4b48      	ldr	r3, [pc, #288]	; (801f274 <httpServer_run+0x338>)
 801f154:	2194      	movs	r1, #148	; 0x94
 801f156:	434a      	muls	r2, r1
 801f158:	2100      	movs	r1, #0
 801f15a:	54d1      	strb	r1, [r2, r3]
				if (strstr((char*)parsed_http_request->URI, (char*)"/LOAD?TEST=") != NULL)
 801f15c:	4b43      	ldr	r3, [pc, #268]	; (801f26c <httpServer_run+0x330>)
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	3302      	adds	r3, #2
 801f162:	4a4a      	ldr	r2, [pc, #296]	; (801f28c <httpServer_run+0x350>)
 801f164:	0011      	movs	r1, r2
 801f166:	0018      	movs	r0, r3
 801f168:	f003 fdc6 	bl	8022cf8 <strstr>
 801f16c:	1e03      	subs	r3, r0, #0
 801f16e:	d057      	beq.n	801f220 <httpServer_run+0x2e4>
					printf("aborted4\n");
 801f170:	4b47      	ldr	r3, [pc, #284]	; (801f290 <httpServer_run+0x354>)
 801f172:	0018      	movs	r0, r3
 801f174:	f003 fbbe 	bl	80228f4 <puts>
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801f178:	1dfb      	adds	r3, r7, #7
 801f17a:	781a      	ldrb	r2, [r3, #0]
 801f17c:	4b3d      	ldr	r3, [pc, #244]	; (801f274 <httpServer_run+0x338>)
 801f17e:	2194      	movs	r1, #148	; 0x94
 801f180:	434a      	muls	r2, r1
 801f182:	2100      	movs	r1, #0
 801f184:	54d1      	strb	r1, [r2, r3]
			break;
 801f186:	e04b      	b.n	801f220 <httpServer_run+0x2e4>
			send_http_response_body(s, 0, http_response, 0, 0);
 801f188:	4b42      	ldr	r3, [pc, #264]	; (801f294 <httpServer_run+0x358>)
 801f18a:	681a      	ldr	r2, [r3, #0]
 801f18c:	230f      	movs	r3, #15
 801f18e:	18fb      	adds	r3, r7, r3
 801f190:	7818      	ldrb	r0, [r3, #0]
 801f192:	2300      	movs	r3, #0
 801f194:	9300      	str	r3, [sp, #0]
 801f196:	2300      	movs	r3, #0
 801f198:	2100      	movs	r1, #0
 801f19a:	f000 f8e5 	bl	801f368 <send_http_response_body>
			if (HTTPSock_Status[seqnum].file_len == 0)
 801f19e:	1dfb      	adds	r3, r7, #7
 801f1a0:	781b      	ldrb	r3, [r3, #0]
 801f1a2:	4a34      	ldr	r2, [pc, #208]	; (801f274 <httpServer_run+0x338>)
 801f1a4:	2188      	movs	r1, #136	; 0x88
 801f1a6:	2094      	movs	r0, #148	; 0x94
 801f1a8:	4343      	muls	r3, r0
 801f1aa:	18d3      	adds	r3, r2, r3
 801f1ac:	185b      	adds	r3, r3, r1
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d137      	bne.n	801f224 <httpServer_run+0x2e8>
				HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801f1b4:	1dfb      	adds	r3, r7, #7
 801f1b6:	781a      	ldrb	r2, [r3, #0]
 801f1b8:	4b2e      	ldr	r3, [pc, #184]	; (801f274 <httpServer_run+0x338>)
 801f1ba:	2194      	movs	r1, #148	; 0x94
 801f1bc:	434a      	muls	r2, r1
 801f1be:	2104      	movs	r1, #4
 801f1c0:	54d1      	strb	r1, [r2, r3]
			break;
 801f1c2:	e02f      	b.n	801f224 <httpServer_run+0x2e8>
			HTTPSock_Status[seqnum].file_len = 0;
 801f1c4:	1dfb      	adds	r3, r7, #7
 801f1c6:	781b      	ldrb	r3, [r3, #0]
 801f1c8:	4a2a      	ldr	r2, [pc, #168]	; (801f274 <httpServer_run+0x338>)
 801f1ca:	2188      	movs	r1, #136	; 0x88
 801f1cc:	2094      	movs	r0, #148	; 0x94
 801f1ce:	4343      	muls	r3, r0
 801f1d0:	18d3      	adds	r3, r2, r3
 801f1d2:	185b      	adds	r3, r3, r1
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[seqnum].file_offset = 0;
 801f1d8:	1dfb      	adds	r3, r7, #7
 801f1da:	781b      	ldrb	r3, [r3, #0]
 801f1dc:	4a25      	ldr	r2, [pc, #148]	; (801f274 <httpServer_run+0x338>)
 801f1de:	218c      	movs	r1, #140	; 0x8c
 801f1e0:	2094      	movs	r0, #148	; 0x94
 801f1e2:	4343      	muls	r3, r0
 801f1e4:	18d3      	adds	r3, r2, r3
 801f1e6:	185b      	adds	r3, r3, r1
 801f1e8:	2200      	movs	r2, #0
 801f1ea:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[seqnum].file_start = 0;
 801f1ec:	1dfb      	adds	r3, r7, #7
 801f1ee:	781b      	ldrb	r3, [r3, #0]
 801f1f0:	4a20      	ldr	r2, [pc, #128]	; (801f274 <httpServer_run+0x338>)
 801f1f2:	2184      	movs	r1, #132	; 0x84
 801f1f4:	2094      	movs	r0, #148	; 0x94
 801f1f6:	4343      	muls	r3, r0
 801f1f8:	18d3      	adds	r3, r2, r3
 801f1fa:	185b      	adds	r3, r3, r1
 801f1fc:	2200      	movs	r2, #0
 801f1fe:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801f200:	1dfb      	adds	r3, r7, #7
 801f202:	781a      	ldrb	r2, [r3, #0]
 801f204:	4b1b      	ldr	r3, [pc, #108]	; (801f274 <httpServer_run+0x338>)
 801f206:	2194      	movs	r1, #148	; 0x94
 801f208:	434a      	muls	r2, r1
 801f20a:	2100      	movs	r1, #0
 801f20c:	54d1      	strb	r1, [r2, r3]
			http_disconnect(s);
 801f20e:	230f      	movs	r3, #15
 801f210:	18fb      	adds	r3, r7, r3
 801f212:	781b      	ldrb	r3, [r3, #0]
 801f214:	0018      	movs	r0, r3
 801f216:	f000 f9f5 	bl	801f604 <http_disconnect>
			break;
 801f21a:	e004      	b.n	801f226 <httpServer_run+0x2ea>
			break;
 801f21c:	46c0      	nop			; (mov r8, r8)
 801f21e:	e01b      	b.n	801f258 <httpServer_run+0x31c>
			break;
 801f220:	46c0      	nop			; (mov r8, r8)
 801f222:	e019      	b.n	801f258 <httpServer_run+0x31c>
			break;
 801f224:	46c0      	nop			; (mov r8, r8)
		}
		break;
 801f226:	e017      	b.n	801f258 <httpServer_run+0x31c>

	case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s); // if a peer requests to close the current connection
#endif
		disconnect(s);
 801f228:	230f      	movs	r3, #15
 801f22a:	18fb      	adds	r3, r7, r3
 801f22c:	781b      	ldrb	r3, [r3, #0]
 801f22e:	0018      	movs	r0, r3
 801f230:	f7fc f8ea 	bl	801b408 <disconnect>
		break;
 801f234:	e010      	b.n	801f258 <httpServer_run+0x31c>

	case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
		if (socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s) /* Reinitialize the socket */
 801f236:	230f      	movs	r3, #15
 801f238:	18fb      	adds	r3, r7, r3
 801f23a:	7818      	ldrb	r0, [r3, #0]
 801f23c:	2300      	movs	r3, #0
 801f23e:	2250      	movs	r2, #80	; 0x50
 801f240:	2101      	movs	r1, #1
 801f242:	f7fb fec9 	bl	801afd8 <socket>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
		}
		break;
 801f246:	e007      	b.n	801f258 <httpServer_run+0x31c>

	case SOCK_INIT:
		listen(s);
 801f248:	230f      	movs	r3, #15
 801f24a:	18fb      	adds	r3, r7, r3
 801f24c:	781b      	ldrb	r3, [r3, #0]
 801f24e:	0018      	movs	r0, r3
 801f250:	f7fc f874 	bl	801b33c <listen>
		break;
 801f254:	e000      	b.n	801f258 <httpServer_run+0x31c>

	case SOCK_LISTEN:
		break;

	default:
		break;
 801f256:	46c0      	nop			; (mov r8, r8)
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801f258:	46c0      	nop			; (mov r8, r8)
 801f25a:	46bd      	mov	sp, r7
 801f25c:	b006      	add	sp, #24
 801f25e:	bdb0      	pop	{r4, r5, r7, pc}
 801f260:	20007e1c 	.word	0x20007e1c
 801f264:	20007dd8 	.word	0x20007dd8
 801f268:	20007e18 	.word	0x20007e18
 801f26c:	20007ddc 	.word	0x20007ddc
 801f270:	08032094 	.word	0x08032094
 801f274:	20007e24 	.word	0x20007e24
 801f278:	080316b8 	.word	0x080316b8
 801f27c:	080316c4 	.word	0x080316c4
 801f280:	080316d0 	.word	0x080316d0
 801f284:	080316dc 	.word	0x080316dc
 801f288:	080316e8 	.word	0x080316e8
 801f28c:	080316f4 	.word	0x080316f4
 801f290:	08031700 	.word	0x08031700
 801f294:	20007de0 	.word	0x20007de0

0801f298 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801f298:	b590      	push	{r4, r7, lr}
 801f29a:	b083      	sub	sp, #12
 801f29c:	af00      	add	r7, sp, #0
 801f29e:	0004      	movs	r4, r0
 801f2a0:	0008      	movs	r0, r1
 801f2a2:	603a      	str	r2, [r7, #0]
 801f2a4:	0019      	movs	r1, r3
 801f2a6:	1dfb      	adds	r3, r7, #7
 801f2a8:	1c22      	adds	r2, r4, #0
 801f2aa:	701a      	strb	r2, [r3, #0]
 801f2ac:	1dbb      	adds	r3, r7, #6
 801f2ae:	1c02      	adds	r2, r0, #0
 801f2b0:	701a      	strb	r2, [r3, #0]
 801f2b2:	1d3b      	adds	r3, r7, #4
 801f2b4:	1c0a      	adds	r2, r1, #0
 801f2b6:	801a      	strh	r2, [r3, #0]
	switch (http_status)
 801f2b8:	1d3b      	adds	r3, r7, #4
 801f2ba:	881b      	ldrh	r3, [r3, #0]
 801f2bc:	22ca      	movs	r2, #202	; 0xca
 801f2be:	0052      	lsls	r2, r2, #1
 801f2c0:	4293      	cmp	r3, r2
 801f2c2:	d029      	beq.n	801f318 <send_http_response_header+0x80>
 801f2c4:	22ca      	movs	r2, #202	; 0xca
 801f2c6:	0052      	lsls	r2, r2, #1
 801f2c8:	4293      	cmp	r3, r2
 801f2ca:	dc2f      	bgt.n	801f32c <send_http_response_header+0x94>
 801f2cc:	2bc8      	cmp	r3, #200	; 0xc8
 801f2ce:	d004      	beq.n	801f2da <send_http_response_header+0x42>
 801f2d0:	22c8      	movs	r2, #200	; 0xc8
 801f2d2:	0052      	lsls	r2, r2, #1
 801f2d4:	4293      	cmp	r3, r2
 801f2d6:	d015      	beq.n	801f304 <send_http_response_header+0x6c>
		printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
#endif
		memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
		break;
	default:
		break;
 801f2d8:	e028      	b.n	801f32c <send_http_response_header+0x94>
		if ((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801f2da:	1dbb      	adds	r3, r7, #6
 801f2dc:	781b      	ldrb	r3, [r3, #0]
 801f2de:	2b08      	cmp	r3, #8
 801f2e0:	d00c      	beq.n	801f2fc <send_http_response_header+0x64>
 801f2e2:	1dbb      	adds	r3, r7, #6
 801f2e4:	781b      	ldrb	r3, [r3, #0]
 801f2e6:	2b09      	cmp	r3, #9
 801f2e8:	d008      	beq.n	801f2fc <send_http_response_header+0x64>
			make_http_response_head((char *)http_response, content_type, body_len);
 801f2ea:	4b1c      	ldr	r3, [pc, #112]	; (801f35c <send_http_response_header+0xc4>)
 801f2ec:	6818      	ldr	r0, [r3, #0]
 801f2ee:	683a      	ldr	r2, [r7, #0]
 801f2f0:	1dbb      	adds	r3, r7, #6
 801f2f2:	781b      	ldrb	r3, [r3, #0]
 801f2f4:	0019      	movs	r1, r3
 801f2f6:	f7fe fb67 	bl	801d9c8 <make_http_response_head>
		break;
 801f2fa:	e018      	b.n	801f32e <send_http_response_header+0x96>
			http_status = 0;
 801f2fc:	1d3b      	adds	r3, r7, #4
 801f2fe:	2200      	movs	r2, #0
 801f300:	801a      	strh	r2, [r3, #0]
		break;
 801f302:	e014      	b.n	801f32e <send_http_response_header+0x96>
		memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801f304:	4b15      	ldr	r3, [pc, #84]	; (801f35c <send_http_response_header+0xc4>)
 801f306:	681a      	ldr	r2, [r3, #0]
 801f308:	4b15      	ldr	r3, [pc, #84]	; (801f360 <send_http_response_header+0xc8>)
 801f30a:	0010      	movs	r0, r2
 801f30c:	0019      	movs	r1, r3
 801f30e:	2376      	movs	r3, #118	; 0x76
 801f310:	001a      	movs	r2, r3
 801f312:	f004 fb29 	bl	8023968 <memcpy>
		break;
 801f316:	e00a      	b.n	801f32e <send_http_response_header+0x96>
		memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801f318:	4b10      	ldr	r3, [pc, #64]	; (801f35c <send_http_response_header+0xc4>)
 801f31a:	681a      	ldr	r2, [r3, #0]
 801f31c:	4b11      	ldr	r3, [pc, #68]	; (801f364 <send_http_response_header+0xcc>)
 801f31e:	0010      	movs	r0, r2
 801f320:	0019      	movs	r1, r3
 801f322:	2399      	movs	r3, #153	; 0x99
 801f324:	001a      	movs	r2, r3
 801f326:	f004 fb1f 	bl	8023968 <memcpy>
		break;
 801f32a:	e000      	b.n	801f32e <send_http_response_header+0x96>
		break;
 801f32c:	46c0      	nop			; (mov r8, r8)
	}

	// Send the HTTP Response 'header'
	if (http_status)
 801f32e:	1d3b      	adds	r3, r7, #4
 801f330:	881b      	ldrh	r3, [r3, #0]
 801f332:	2b00      	cmp	r3, #0
 801f334:	d00e      	beq.n	801f354 <send_http_response_header+0xbc>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		// printf("HTTP Response %s\r\n",(char *)http_response);
		send(s, http_response, strlen((char *)http_response));
 801f336:	4b09      	ldr	r3, [pc, #36]	; (801f35c <send_http_response_header+0xc4>)
 801f338:	681c      	ldr	r4, [r3, #0]
 801f33a:	4b08      	ldr	r3, [pc, #32]	; (801f35c <send_http_response_header+0xc4>)
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	0018      	movs	r0, r3
 801f340:	f7e2 fee8 	bl	8002114 <strlen>
 801f344:	0003      	movs	r3, r0
 801f346:	b29a      	uxth	r2, r3
 801f348:	1dfb      	adds	r3, r7, #7
 801f34a:	781b      	ldrb	r3, [r3, #0]
 801f34c:	0021      	movs	r1, r4
 801f34e:	0018      	movs	r0, r3
 801f350:	f7fc f8dc 	bl	801b50c <send>
		// printf("HTTP Response = %s\r\n",(char *)http_response);
	}
}
 801f354:	46c0      	nop			; (mov r8, r8)
 801f356:	46bd      	mov	sp, r7
 801f358:	b003      	add	sp, #12
 801f35a:	bd90      	pop	{r4, r7, pc}
 801f35c:	20007de0 	.word	0x20007de0
 801f360:	0803201c 	.word	0x0803201c
 801f364:	08031f80 	.word	0x08031f80

0801f368 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t *uri_name, uint8_t *buf, uint32_t start_addr, uint32_t file_len)
{
 801f368:	b5b0      	push	{r4, r5, r7, lr}
 801f36a:	b086      	sub	sp, #24
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	60b9      	str	r1, [r7, #8]
 801f370:	607a      	str	r2, [r7, #4]
 801f372:	603b      	str	r3, [r7, #0]
 801f374:	210f      	movs	r1, #15
 801f376:	187b      	adds	r3, r7, r1
 801f378:	1c02      	adds	r2, r0, #0
 801f37a:	701a      	strb	r2, [r3, #0]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801f37c:	2313      	movs	r3, #19
 801f37e:	18fb      	adds	r3, r7, r3
 801f380:	2200      	movs	r2, #0
 801f382:	701a      	strb	r2, [r3, #0]
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if ((get_seqnum = getHTTPSequenceNum(s)) == -1)
 801f384:	2512      	movs	r5, #18
 801f386:	197c      	adds	r4, r7, r5
 801f388:	187b      	adds	r3, r7, r1
 801f38a:	781b      	ldrb	r3, [r3, #0]
 801f38c:	0018      	movs	r0, r3
 801f38e:	f7ff fd71 	bl	801ee74 <getHTTPSequenceNum>
 801f392:	0003      	movs	r3, r0
 801f394:	7023      	strb	r3, [r4, #0]
 801f396:	002c      	movs	r4, r5
 801f398:	193b      	adds	r3, r7, r4
 801f39a:	781b      	ldrb	r3, [r3, #0]
 801f39c:	b25b      	sxtb	r3, r3
 801f39e:	3301      	adds	r3, #1
 801f3a0:	d100      	bne.n	801f3a4 <send_http_response_body+0x3c>
 801f3a2:	e0f6      	b.n	801f592 <send_http_response_body+0x22a>
		return; // exception handling; invalid number

	// Send the HTTP Response 'body'; requested file
	if (!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801f3a4:	193b      	adds	r3, r7, r4
 801f3a6:	781b      	ldrb	r3, [r3, #0]
 801f3a8:	b25b      	sxtb	r3, r3
 801f3aa:	4a7c      	ldr	r2, [pc, #496]	; (801f59c <send_http_response_body+0x234>)
 801f3ac:	2188      	movs	r1, #136	; 0x88
 801f3ae:	2094      	movs	r0, #148	; 0x94
 801f3b0:	4343      	muls	r3, r0
 801f3b2:	18d3      	adds	r3, r2, r3
 801f3b4:	185b      	adds	r3, r3, r1
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d13a      	bne.n	801f432 <send_http_response_body+0xca>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801f3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f3be:	2380      	movs	r3, #128	; 0x80
 801f3c0:	011b      	lsls	r3, r3, #4
 801f3c2:	429a      	cmp	r2, r3
 801f3c4:	d332      	bcc.n	801f42c <send_http_response_body+0xc4>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801f3c6:	193b      	adds	r3, r7, r4
 801f3c8:	781b      	ldrb	r3, [r3, #0]
 801f3ca:	b25b      	sxtb	r3, r3
 801f3cc:	4a73      	ldr	r2, [pc, #460]	; (801f59c <send_http_response_body+0x234>)
 801f3ce:	2184      	movs	r1, #132	; 0x84
 801f3d0:	2094      	movs	r0, #148	; 0x94
 801f3d2:	4343      	muls	r3, r0
 801f3d4:	18d3      	adds	r3, r2, r3
 801f3d6:	185b      	adds	r3, r3, r1
 801f3d8:	683a      	ldr	r2, [r7, #0]
 801f3da:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801f3dc:	193b      	adds	r3, r7, r4
 801f3de:	781b      	ldrb	r3, [r3, #0]
 801f3e0:	b25b      	sxtb	r3, r3
 801f3e2:	4a6e      	ldr	r2, [pc, #440]	; (801f59c <send_http_response_body+0x234>)
 801f3e4:	2188      	movs	r1, #136	; 0x88
 801f3e6:	2094      	movs	r0, #148	; 0x94
 801f3e8:	4343      	muls	r3, r0
 801f3ea:	18d3      	adds	r3, r2, r3
 801f3ec:	185b      	adds	r3, r3, r1
 801f3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f3f0:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801f3f2:	4b6b      	ldr	r3, [pc, #428]	; (801f5a0 <send_http_response_body+0x238>)
 801f3f4:	617b      	str	r3, [r7, #20]

			/////////////////////////////////////////////////////////////////////////////////////////////////
			// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801f3f6:	193b      	adds	r3, r7, r4
 801f3f8:	781b      	ldrb	r3, [r3, #0]
 801f3fa:	b25b      	sxtb	r3, r3
 801f3fc:	2294      	movs	r2, #148	; 0x94
 801f3fe:	435a      	muls	r2, r3
 801f400:	4b66      	ldr	r3, [pc, #408]	; (801f59c <send_http_response_body+0x234>)
 801f402:	18d3      	adds	r3, r2, r3
 801f404:	3301      	adds	r3, #1
 801f406:	2280      	movs	r2, #128	; 0x80
 801f408:	2100      	movs	r1, #0
 801f40a:	0018      	movs	r0, r3
 801f40c:	f003 fbc4 	bl	8022b98 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801f410:	193b      	adds	r3, r7, r4
 801f412:	781b      	ldrb	r3, [r3, #0]
 801f414:	b25b      	sxtb	r3, r3
 801f416:	2294      	movs	r2, #148	; 0x94
 801f418:	435a      	muls	r2, r3
 801f41a:	4b60      	ldr	r3, [pc, #384]	; (801f59c <send_http_response_body+0x234>)
 801f41c:	18d3      	adds	r3, r2, r3
 801f41e:	3301      	adds	r3, #1
 801f420:	68ba      	ldr	r2, [r7, #8]
 801f422:	0011      	movs	r1, r2
 801f424:	0018      	movs	r0, r3
 801f426:	f004 fa97 	bl	8023958 <strcpy>
 801f42a:	e025      	b.n	801f478 <send_http_response_body+0x110>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f42e:	617b      	str	r3, [r7, #20]
 801f430:	e022      	b.n	801f478 <send_http_response_body+0x110>
		if (HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801f432:	2412      	movs	r4, #18
 801f434:	193b      	adds	r3, r7, r4
 801f436:	781b      	ldrb	r3, [r3, #0]
 801f438:	b25b      	sxtb	r3, r3
 801f43a:	4a58      	ldr	r2, [pc, #352]	; (801f59c <send_http_response_body+0x234>)
 801f43c:	2188      	movs	r1, #136	; 0x88
 801f43e:	2094      	movs	r0, #148	; 0x94
 801f440:	4343      	muls	r3, r0
 801f442:	18d3      	adds	r3, r2, r3
 801f444:	185b      	adds	r3, r3, r1
 801f446:	681a      	ldr	r2, [r3, #0]
 801f448:	193b      	adds	r3, r7, r4
 801f44a:	781b      	ldrb	r3, [r3, #0]
 801f44c:	b25b      	sxtb	r3, r3
 801f44e:	4953      	ldr	r1, [pc, #332]	; (801f59c <send_http_response_body+0x234>)
 801f450:	208c      	movs	r0, #140	; 0x8c
 801f452:	2494      	movs	r4, #148	; 0x94
 801f454:	4363      	muls	r3, r4
 801f456:	18cb      	adds	r3, r1, r3
 801f458:	181b      	adds	r3, r3, r0
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	1ad3      	subs	r3, r2, r3
 801f45e:	617b      	str	r3, [r7, #20]

		if (send_len > DATA_BUF_SIZE - 1)
 801f460:	697a      	ldr	r2, [r7, #20]
 801f462:	2380      	movs	r3, #128	; 0x80
 801f464:	011b      	lsls	r3, r3, #4
 801f466:	429a      	cmp	r2, r3
 801f468:	d302      	bcc.n	801f470 <send_http_response_body+0x108>
		{
			send_len = DATA_BUF_SIZE - 1;
 801f46a:	4b4d      	ldr	r3, [pc, #308]	; (801f5a0 <send_http_response_body+0x238>)
 801f46c:	617b      	str	r3, [r7, #20]
 801f46e:	e003      	b.n	801f478 <send_http_response_body+0x110>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801f470:	2313      	movs	r3, #19
 801f472:	18fb      	adds	r3, r7, r3
 801f474:	2201      	movs	r2, #1
 801f476:	701a      	strb	r2, [r3, #0]
	// HTTPSock_Status[get_seqnum]->storage_type == CODEFLASH
	// HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	// HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	/*****************************************************/

	if (HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801f478:	2412      	movs	r4, #18
 801f47a:	193b      	adds	r3, r7, r4
 801f47c:	781b      	ldrb	r3, [r3, #0]
 801f47e:	b25b      	sxtb	r3, r3
 801f480:	4a46      	ldr	r2, [pc, #280]	; (801f59c <send_http_response_body+0x234>)
 801f482:	2190      	movs	r1, #144	; 0x90
 801f484:	2094      	movs	r0, #148	; 0x94
 801f486:	4343      	muls	r3, r0
 801f488:	18d3      	adds	r3, r2, r3
 801f48a:	185b      	adds	r3, r3, r1
 801f48c:	781b      	ldrb	r3, [r3, #0]
 801f48e:	2b01      	cmp	r3, #1
 801f490:	d129      	bne.n	801f4e6 <send_http_response_body+0x17e>
	{
		if (HTTPSock_Status[get_seqnum].file_len)
 801f492:	193b      	adds	r3, r7, r4
 801f494:	781b      	ldrb	r3, [r3, #0]
 801f496:	b25b      	sxtb	r3, r3
 801f498:	4a40      	ldr	r2, [pc, #256]	; (801f59c <send_http_response_body+0x234>)
 801f49a:	2188      	movs	r1, #136	; 0x88
 801f49c:	2094      	movs	r0, #148	; 0x94
 801f49e:	4343      	muls	r3, r0
 801f4a0:	18d3      	adds	r3, r2, r3
 801f4a2:	185b      	adds	r3, r3, r1
 801f4a4:	681b      	ldr	r3, [r3, #0]
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d00a      	beq.n	801f4c0 <send_http_response_body+0x158>
			start_addr = HTTPSock_Status[get_seqnum].file_start;
 801f4aa:	193b      	adds	r3, r7, r4
 801f4ac:	781b      	ldrb	r3, [r3, #0]
 801f4ae:	b25b      	sxtb	r3, r3
 801f4b0:	4a3a      	ldr	r2, [pc, #232]	; (801f59c <send_http_response_body+0x234>)
 801f4b2:	2184      	movs	r1, #132	; 0x84
 801f4b4:	2094      	movs	r0, #148	; 0x94
 801f4b6:	4343      	muls	r3, r0
 801f4b8:	18d3      	adds	r3, r2, r3
 801f4ba:	185b      	adds	r3, r3, r1
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f4c0:	683b      	ldr	r3, [r7, #0]
 801f4c2:	b298      	uxth	r0, r3
 801f4c4:	2312      	movs	r3, #18
 801f4c6:	18fb      	adds	r3, r7, r3
 801f4c8:	781b      	ldrb	r3, [r3, #0]
 801f4ca:	b25b      	sxtb	r3, r3
 801f4cc:	4a33      	ldr	r2, [pc, #204]	; (801f59c <send_http_response_body+0x234>)
 801f4ce:	218c      	movs	r1, #140	; 0x8c
 801f4d0:	2494      	movs	r4, #148	; 0x94
 801f4d2:	4363      	muls	r3, r4
 801f4d4:	18d3      	adds	r3, r2, r3
 801f4d6:	185b      	adds	r3, r3, r1
 801f4d8:	681a      	ldr	r2, [r3, #0]
 801f4da:	697b      	ldr	r3, [r7, #20]
 801f4dc:	b29b      	uxth	r3, r3
 801f4de:	6879      	ldr	r1, [r7, #4]
 801f4e0:	f002 fe1c 	bl	802211c <read_userReg_webContent>
 801f4e4:	e001      	b.n	801f4ea <send_http_response_body+0x182>
		*(buf + send_len + 1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	617b      	str	r3, [r7, #20]
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if (send_len)
 801f4ea:	697b      	ldr	r3, [r7, #20]
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d009      	beq.n	801f504 <send_http_response_body+0x19c>
		send(s, buf, send_len);
 801f4f0:	697b      	ldr	r3, [r7, #20]
 801f4f2:	b29a      	uxth	r2, r3
 801f4f4:	6879      	ldr	r1, [r7, #4]
 801f4f6:	230f      	movs	r3, #15
 801f4f8:	18fb      	adds	r3, r7, r3
 801f4fa:	781b      	ldrb	r3, [r3, #0]
 801f4fc:	0018      	movs	r0, r3
 801f4fe:	f7fc f805 	bl	801b50c <send>
 801f502:	e003      	b.n	801f50c <send_http_response_body+0x1a4>
	else
		flag_datasend_end = 1;
 801f504:	2313      	movs	r3, #19
 801f506:	18fb      	adds	r3, r7, r3
 801f508:	2201      	movs	r2, #1
 801f50a:	701a      	strb	r2, [r3, #0]

	if (flag_datasend_end)
 801f50c:	2513      	movs	r5, #19
 801f50e:	197b      	adds	r3, r7, r5
 801f510:	781b      	ldrb	r3, [r3, #0]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d025      	beq.n	801f562 <send_http_response_body+0x1fa>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f516:	2412      	movs	r4, #18
 801f518:	193b      	adds	r3, r7, r4
 801f51a:	781b      	ldrb	r3, [r3, #0]
 801f51c:	b25b      	sxtb	r3, r3
 801f51e:	4a1f      	ldr	r2, [pc, #124]	; (801f59c <send_http_response_body+0x234>)
 801f520:	2184      	movs	r1, #132	; 0x84
 801f522:	2094      	movs	r0, #148	; 0x94
 801f524:	4343      	muls	r3, r0
 801f526:	18d3      	adds	r3, r2, r3
 801f528:	185b      	adds	r3, r3, r1
 801f52a:	2200      	movs	r2, #0
 801f52c:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f52e:	193b      	adds	r3, r7, r4
 801f530:	781b      	ldrb	r3, [r3, #0]
 801f532:	b25b      	sxtb	r3, r3
 801f534:	4a19      	ldr	r2, [pc, #100]	; (801f59c <send_http_response_body+0x234>)
 801f536:	2188      	movs	r1, #136	; 0x88
 801f538:	2094      	movs	r0, #148	; 0x94
 801f53a:	4343      	muls	r3, r0
 801f53c:	18d3      	adds	r3, r2, r3
 801f53e:	185b      	adds	r3, r3, r1
 801f540:	2200      	movs	r2, #0
 801f542:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f544:	193b      	adds	r3, r7, r4
 801f546:	781b      	ldrb	r3, [r3, #0]
 801f548:	b25b      	sxtb	r3, r3
 801f54a:	4a14      	ldr	r2, [pc, #80]	; (801f59c <send_http_response_body+0x234>)
 801f54c:	218c      	movs	r1, #140	; 0x8c
 801f54e:	2094      	movs	r0, #148	; 0x94
 801f550:	4343      	muls	r3, r0
 801f552:	18d3      	adds	r3, r2, r3
 801f554:	185b      	adds	r3, r3, r1
 801f556:	2200      	movs	r2, #0
 801f558:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f55a:	197b      	adds	r3, r7, r5
 801f55c:	2200      	movs	r2, #0
 801f55e:	701a      	strb	r2, [r3, #0]
 801f560:	e018      	b.n	801f594 <send_http_response_body+0x22c>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f562:	2412      	movs	r4, #18
 801f564:	193b      	adds	r3, r7, r4
 801f566:	781b      	ldrb	r3, [r3, #0]
 801f568:	b25b      	sxtb	r3, r3
 801f56a:	4a0c      	ldr	r2, [pc, #48]	; (801f59c <send_http_response_body+0x234>)
 801f56c:	218c      	movs	r1, #140	; 0x8c
 801f56e:	2094      	movs	r0, #148	; 0x94
 801f570:	4343      	muls	r3, r0
 801f572:	18d3      	adds	r3, r2, r3
 801f574:	185b      	adds	r3, r3, r1
 801f576:	6819      	ldr	r1, [r3, #0]
 801f578:	193b      	adds	r3, r7, r4
 801f57a:	781b      	ldrb	r3, [r3, #0]
 801f57c:	b25b      	sxtb	r3, r3
 801f57e:	697a      	ldr	r2, [r7, #20]
 801f580:	188a      	adds	r2, r1, r2
 801f582:	4906      	ldr	r1, [pc, #24]	; (801f59c <send_http_response_body+0x234>)
 801f584:	208c      	movs	r0, #140	; 0x8c
 801f586:	2494      	movs	r4, #148	; 0x94
 801f588:	4363      	muls	r3, r4
 801f58a:	18cb      	adds	r3, r1, r3
 801f58c:	181b      	adds	r3, r3, r0
 801f58e:	601a      	str	r2, [r3, #0]
 801f590:	e000      	b.n	801f594 <send_http_response_body+0x22c>
		return; // exception handling; invalid number
 801f592:	46c0      	nop			; (mov r8, r8)
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
	// ## 20141219 added end
}
 801f594:	46bd      	mov	sp, r7
 801f596:	b006      	add	sp, #24
 801f598:	bdb0      	pop	{r4, r5, r7, pc}
 801f59a:	46c0      	nop			; (mov r8, r8)
 801f59c:	20007e24 	.word	0x20007e24
 801f5a0:	000007ff 	.word	0x000007ff

0801f5a4 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t *buf, uint8_t *http_body, uint16_t file_len)
{
 801f5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f5a6:	b089      	sub	sp, #36	; 0x24
 801f5a8:	af02      	add	r7, sp, #8
 801f5aa:	60b9      	str	r1, [r7, #8]
 801f5ac:	607a      	str	r2, [r7, #4]
 801f5ae:	0019      	movs	r1, r3
 801f5b0:	260f      	movs	r6, #15
 801f5b2:	19bb      	adds	r3, r7, r6
 801f5b4:	1c02      	adds	r2, r0, #0
 801f5b6:	701a      	strb	r2, [r3, #0]
 801f5b8:	200c      	movs	r0, #12
 801f5ba:	183b      	adds	r3, r7, r0
 801f5bc:	1c0a      	adds	r2, r1, #0
 801f5be:	801a      	strh	r2, [r3, #0]
	uint16_t send_len = 0;
 801f5c0:	2516      	movs	r5, #22
 801f5c2:	197b      	adds	r3, r7, r5
 801f5c4:	2200      	movs	r2, #0
 801f5c6:	801a      	strh	r2, [r3, #0]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK, file_len, http_body);
 801f5c8:	183b      	adds	r3, r7, r0
 801f5ca:	881c      	ldrh	r4, [r3, #0]
 801f5cc:	4a0b      	ldr	r2, [pc, #44]	; (801f5fc <send_http_response_cgi+0x58>)
 801f5ce:	490c      	ldr	r1, [pc, #48]	; (801f600 <send_http_response_cgi+0x5c>)
 801f5d0:	68b8      	ldr	r0, [r7, #8]
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	9300      	str	r3, [sp, #0]
 801f5d6:	0023      	movs	r3, r4
 801f5d8:	f003 f9ca 	bl	8022970 <siprintf>
 801f5dc:	0002      	movs	r2, r0
 801f5de:	197b      	adds	r3, r7, r5
 801f5e0:	801a      	strh	r2, [r3, #0]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f5e2:	197b      	adds	r3, r7, r5
 801f5e4:	881a      	ldrh	r2, [r3, #0]
 801f5e6:	68b9      	ldr	r1, [r7, #8]
 801f5e8:	19bb      	adds	r3, r7, r6
 801f5ea:	781b      	ldrb	r3, [r3, #0]
 801f5ec:	0018      	movs	r0, r3
 801f5ee:	f7fb ff8d 	bl	801b50c <send>
}
 801f5f2:	46c0      	nop			; (mov r8, r8)
 801f5f4:	46bd      	mov	sp, r7
 801f5f6:	b007      	add	sp, #28
 801f5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f5fa:	46c0      	nop			; (mov r8, r8)
 801f5fc:	0803170c 	.word	0x0803170c
 801f600:	08031748 	.word	0x08031748

0801f604 <http_disconnect>:

static int8_t http_disconnect(uint8_t sn)
{
 801f604:	b580      	push	{r7, lr}
 801f606:	b082      	sub	sp, #8
 801f608:	af00      	add	r7, sp, #0
 801f60a:	0002      	movs	r2, r0
 801f60c:	1dfb      	adds	r3, r7, #7
 801f60e:	701a      	strb	r2, [r3, #0]
	setSn_CR(sn, Sn_CR_DISCON);
 801f610:	1dfb      	adds	r3, r7, #7
 801f612:	781b      	ldrb	r3, [r3, #0]
 801f614:	009b      	lsls	r3, r3, #2
 801f616:	3301      	adds	r3, #1
 801f618:	00db      	lsls	r3, r3, #3
 801f61a:	3301      	adds	r3, #1
 801f61c:	33ff      	adds	r3, #255	; 0xff
 801f61e:	2108      	movs	r1, #8
 801f620:	0018      	movs	r0, r3
 801f622:	f7f9 fc9d 	bl	8018f60 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while (getSn_CR(sn))
 801f626:	46c0      	nop			; (mov r8, r8)
 801f628:	1dfb      	adds	r3, r7, #7
 801f62a:	781b      	ldrb	r3, [r3, #0]
 801f62c:	009b      	lsls	r3, r3, #2
 801f62e:	3301      	adds	r3, #1
 801f630:	00db      	lsls	r3, r3, #3
 801f632:	3301      	adds	r3, #1
 801f634:	33ff      	adds	r3, #255	; 0xff
 801f636:	0018      	movs	r0, r3
 801f638:	f7f9 fc40 	bl	8018ebc <WIZCHIP_READ>
 801f63c:	1e03      	subs	r3, r0, #0
 801f63e:	d1f3      	bne.n	801f628 <http_disconnect+0x24>
		;

	return SOCK_OK;
 801f640:	2301      	movs	r3, #1
}
 801f642:	0018      	movs	r0, r3
 801f644:	46bd      	mov	sp, r7
 801f646:	b002      	add	sp, #8
 801f648:	bd80      	pop	{r7, pc}
	...

0801f64c <parseIPAddress>:

int parseIPAddress(const char *str, uint8_t *ipAddress)
{
 801f64c:	b590      	push	{r4, r7, lr}
 801f64e:	b089      	sub	sp, #36	; 0x24
 801f650:	af00      	add	r7, sp, #0
 801f652:	6078      	str	r0, [r7, #4]
 801f654:	6039      	str	r1, [r7, #0]
	char *token;
	char strCopy[16]; // IP adresi için maksimum 15 karakter + null byte

	// Giriş dizesini kopyala
	strncpy(strCopy, str, sizeof(strCopy) - 1);
 801f656:	6879      	ldr	r1, [r7, #4]
 801f658:	2408      	movs	r4, #8
 801f65a:	193b      	adds	r3, r7, r4
 801f65c:	220f      	movs	r2, #15
 801f65e:	0018      	movs	r0, r3
 801f660:	f003 face 	bl	8022c00 <strncpy>
	strCopy[sizeof(strCopy) - 1] = '\0';
 801f664:	0021      	movs	r1, r4
 801f666:	187b      	adds	r3, r7, r1
 801f668:	2200      	movs	r2, #0
 801f66a:	73da      	strb	r2, [r3, #15]

	// İlk üç bölümü ayır
	token = strtok(strCopy, ".");
 801f66c:	4a23      	ldr	r2, [pc, #140]	; (801f6fc <parseIPAddress+0xb0>)
 801f66e:	187b      	adds	r3, r7, r1
 801f670:	0011      	movs	r1, r2
 801f672:	0018      	movs	r0, r3
 801f674:	f003 fad8 	bl	8022c28 <strtok>
 801f678:	0003      	movs	r3, r0
 801f67a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 3; ++i)
 801f67c:	2300      	movs	r3, #0
 801f67e:	61bb      	str	r3, [r7, #24]
 801f680:	e018      	b.n	801f6b4 <parseIPAddress+0x68>
	{
		if (token == NULL)
 801f682:	69fb      	ldr	r3, [r7, #28]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d101      	bne.n	801f68c <parseIPAddress+0x40>
		{
			return 0; // Geçersiz IP adresi
 801f688:	2300      	movs	r3, #0
 801f68a:	e032      	b.n	801f6f2 <parseIPAddress+0xa6>
		}
		ipAddress[i] = atoi(token);
 801f68c:	69fb      	ldr	r3, [r7, #28]
 801f68e:	0018      	movs	r0, r3
 801f690:	f002 feaa 	bl	80223e8 <atoi>
 801f694:	0001      	movs	r1, r0
 801f696:	69bb      	ldr	r3, [r7, #24]
 801f698:	683a      	ldr	r2, [r7, #0]
 801f69a:	18d3      	adds	r3, r2, r3
 801f69c:	b2ca      	uxtb	r2, r1
 801f69e:	701a      	strb	r2, [r3, #0]
		token = strtok(NULL, ".");
 801f6a0:	4b16      	ldr	r3, [pc, #88]	; (801f6fc <parseIPAddress+0xb0>)
 801f6a2:	0019      	movs	r1, r3
 801f6a4:	2000      	movs	r0, #0
 801f6a6:	f003 fabf 	bl	8022c28 <strtok>
 801f6aa:	0003      	movs	r3, r0
 801f6ac:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 3; ++i)
 801f6ae:	69bb      	ldr	r3, [r7, #24]
 801f6b0:	3301      	adds	r3, #1
 801f6b2:	61bb      	str	r3, [r7, #24]
 801f6b4:	69bb      	ldr	r3, [r7, #24]
 801f6b6:	2b02      	cmp	r3, #2
 801f6b8:	dde3      	ble.n	801f682 <parseIPAddress+0x36>
	}

	// Sonuncu bölümü al, diğerlerini kontrol et
	if (token == NULL || atoi(token) < 0 || atoi(token) > 255)
 801f6ba:	69fb      	ldr	r3, [r7, #28]
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d00c      	beq.n	801f6da <parseIPAddress+0x8e>
 801f6c0:	69fb      	ldr	r3, [r7, #28]
 801f6c2:	0018      	movs	r0, r3
 801f6c4:	f002 fe90 	bl	80223e8 <atoi>
 801f6c8:	1e03      	subs	r3, r0, #0
 801f6ca:	db06      	blt.n	801f6da <parseIPAddress+0x8e>
 801f6cc:	69fb      	ldr	r3, [r7, #28]
 801f6ce:	0018      	movs	r0, r3
 801f6d0:	f002 fe8a 	bl	80223e8 <atoi>
 801f6d4:	0003      	movs	r3, r0
 801f6d6:	2bff      	cmp	r3, #255	; 0xff
 801f6d8:	dd01      	ble.n	801f6de <parseIPAddress+0x92>
	{
		return 0; // Geçersiz IP adresi
 801f6da:	2300      	movs	r3, #0
 801f6dc:	e009      	b.n	801f6f2 <parseIPAddress+0xa6>
	}
	ipAddress[3] = atoi(token);
 801f6de:	69fb      	ldr	r3, [r7, #28]
 801f6e0:	0018      	movs	r0, r3
 801f6e2:	f002 fe81 	bl	80223e8 <atoi>
 801f6e6:	0002      	movs	r2, r0
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	3303      	adds	r3, #3
 801f6ec:	b2d2      	uxtb	r2, r2
 801f6ee:	701a      	strb	r2, [r3, #0]

	return 1;
 801f6f0:	2301      	movs	r3, #1
}
 801f6f2:	0018      	movs	r0, r3
 801f6f4:	46bd      	mov	sp, r7
 801f6f6:	b009      	add	sp, #36	; 0x24
 801f6f8:	bd90      	pop	{r4, r7, pc}
 801f6fa:	46c0      	nop			; (mov r8, r8)
 801f6fc:	08031754 	.word	0x08031754

0801f700 <getValues>:

void getValues(const char *url)
{
 801f700:	b5b0      	push	{r4, r5, r7, lr}
 801f702:	b0a0      	sub	sp, #128	; 0x80
 801f704:	af00      	add	r7, sp, #0
 801f706:	6078      	str	r0, [r7, #4]
	char *queryString = strchr(url, '?');
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	213f      	movs	r1, #63	; 0x3f
 801f70c:	0018      	movs	r0, r3
 801f70e:	f003 fa58 	bl	8022bc2 <strchr>
 801f712:	0003      	movs	r3, r0
 801f714:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (queryString != NULL)
 801f716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d100      	bne.n	801f71e <getValues+0x1e>
 801f71c:	e0f1      	b.n	801f902 <getValues+0x202>
	{
		queryString++;
 801f71e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f720:	3301      	adds	r3, #1
 801f722:	67fb      	str	r3, [r7, #124]	; 0x7c

		while (*queryString != '\0')
 801f724:	e0e8      	b.n	801f8f8 <getValues+0x1f8>
		{
			char key[50];
			char value[50];
			int keyIndex = 0;
 801f726:	2300      	movs	r3, #0
 801f728:	67bb      	str	r3, [r7, #120]	; 0x78
			int valueIndex = 0;
 801f72a:	2300      	movs	r3, #0
 801f72c:	677b      	str	r3, [r7, #116]	; 0x74

			// Skip the key
			while (*queryString != '=' && *queryString != '\0')
 801f72e:	e009      	b.n	801f744 <getValues+0x44>
			{
				key[keyIndex++] = *queryString++;
 801f730:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801f732:	1c53      	adds	r3, r2, #1
 801f734:	67fb      	str	r3, [r7, #124]	; 0x7c
 801f736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f738:	1c59      	adds	r1, r3, #1
 801f73a:	67b9      	str	r1, [r7, #120]	; 0x78
 801f73c:	7811      	ldrb	r1, [r2, #0]
 801f73e:	2208      	movs	r2, #8
 801f740:	18ba      	adds	r2, r7, r2
 801f742:	54d1      	strb	r1, [r2, r3]
			while (*queryString != '=' && *queryString != '\0')
 801f744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f746:	781b      	ldrb	r3, [r3, #0]
 801f748:	2b3d      	cmp	r3, #61	; 0x3d
 801f74a:	d003      	beq.n	801f754 <getValues+0x54>
 801f74c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f74e:	781b      	ldrb	r3, [r3, #0]
 801f750:	2b00      	cmp	r3, #0
 801f752:	d1ed      	bne.n	801f730 <getValues+0x30>
			}
			key[keyIndex] = '\0';
 801f754:	2308      	movs	r3, #8
 801f756:	18fa      	adds	r2, r7, r3
 801f758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f75a:	18d3      	adds	r3, r2, r3
 801f75c:	2200      	movs	r2, #0
 801f75e:	701a      	strb	r2, [r3, #0]

			// Skip '='
			if (*queryString == '=')
 801f760:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f762:	781b      	ldrb	r3, [r3, #0]
 801f764:	2b3d      	cmp	r3, #61	; 0x3d
 801f766:	d000      	beq.n	801f76a <getValues+0x6a>
 801f768:	e0c6      	b.n	801f8f8 <getValues+0x1f8>
			{
				queryString++;
 801f76a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f76c:	3301      	adds	r3, #1
 801f76e:	67fb      	str	r3, [r7, #124]	; 0x7c

				// Read the value until '&' or end of string
				while (*queryString != '&' && *queryString != '\0')
 801f770:	e022      	b.n	801f7b8 <getValues+0xb8>
				{
					// Handle escape characters
					if (*queryString == '\\' && *(queryString + 1) == '0')
 801f772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f774:	781b      	ldrb	r3, [r3, #0]
 801f776:	2b5c      	cmp	r3, #92	; 0x5c
 801f778:	d108      	bne.n	801f78c <getValues+0x8c>
 801f77a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f77c:	3301      	adds	r3, #1
 801f77e:	781b      	ldrb	r3, [r3, #0]
 801f780:	2b30      	cmp	r3, #48	; 0x30
 801f782:	d103      	bne.n	801f78c <getValues+0x8c>
					{
						queryString += 2;
 801f784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f786:	3302      	adds	r3, #2
 801f788:	67fb      	str	r3, [r7, #124]	; 0x7c
 801f78a:	e00b      	b.n	801f7a4 <getValues+0xa4>
					}
					else if (*queryString == '\\' && *(queryString + 1) != '\0')
 801f78c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f78e:	781b      	ldrb	r3, [r3, #0]
 801f790:	2b5c      	cmp	r3, #92	; 0x5c
 801f792:	d107      	bne.n	801f7a4 <getValues+0xa4>
 801f794:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f796:	3301      	adds	r3, #1
 801f798:	781b      	ldrb	r3, [r3, #0]
 801f79a:	2b00      	cmp	r3, #0
 801f79c:	d002      	beq.n	801f7a4 <getValues+0xa4>
					{
						queryString++;
 801f79e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f7a0:	3301      	adds	r3, #1
 801f7a2:	67fb      	str	r3, [r7, #124]	; 0x7c
					}

					value[valueIndex++] = *queryString++;
 801f7a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801f7a6:	1c53      	adds	r3, r2, #1
 801f7a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 801f7aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f7ac:	1c59      	adds	r1, r3, #1
 801f7ae:	6779      	str	r1, [r7, #116]	; 0x74
 801f7b0:	7811      	ldrb	r1, [r2, #0]
 801f7b2:	223c      	movs	r2, #60	; 0x3c
 801f7b4:	18ba      	adds	r2, r7, r2
 801f7b6:	54d1      	strb	r1, [r2, r3]
				while (*queryString != '&' && *queryString != '\0')
 801f7b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f7ba:	781b      	ldrb	r3, [r3, #0]
 801f7bc:	2b26      	cmp	r3, #38	; 0x26
 801f7be:	d003      	beq.n	801f7c8 <getValues+0xc8>
 801f7c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f7c2:	781b      	ldrb	r3, [r3, #0]
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	d1d4      	bne.n	801f772 <getValues+0x72>
				}
				value[valueIndex] = '\0';
 801f7c8:	213c      	movs	r1, #60	; 0x3c
 801f7ca:	187a      	adds	r2, r7, r1
 801f7cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f7ce:	18d3      	adds	r3, r2, r3
 801f7d0:	2200      	movs	r2, #0
 801f7d2:	701a      	strb	r2, [r3, #0]

				// Remove the extra null character if it exists
				int lastIdx = valueIndex - 1;
 801f7d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f7d6:	3b01      	subs	r3, #1
 801f7d8:	673b      	str	r3, [r7, #112]	; 0x70
				if (valueIndex > 0 && value[lastIdx] == '\\' && (lastIdx == 0 || value[lastIdx - 1] != '\\'))
 801f7da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	dd14      	ble.n	801f80a <getValues+0x10a>
 801f7e0:	187a      	adds	r2, r7, r1
 801f7e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f7e4:	18d3      	adds	r3, r2, r3
 801f7e6:	781b      	ldrb	r3, [r3, #0]
 801f7e8:	2b5c      	cmp	r3, #92	; 0x5c
 801f7ea:	d10e      	bne.n	801f80a <getValues+0x10a>
 801f7ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d005      	beq.n	801f7fe <getValues+0xfe>
 801f7f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f7f4:	3b01      	subs	r3, #1
 801f7f6:	187a      	adds	r2, r7, r1
 801f7f8:	5cd3      	ldrb	r3, [r2, r3]
 801f7fa:	2b5c      	cmp	r3, #92	; 0x5c
 801f7fc:	d005      	beq.n	801f80a <getValues+0x10a>
				{
					value[lastIdx] = '\0';
 801f7fe:	233c      	movs	r3, #60	; 0x3c
 801f800:	18fa      	adds	r2, r7, r3
 801f802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f804:	18d3      	adds	r3, r2, r3
 801f806:	2200      	movs	r2, #0
 801f808:	701a      	strb	r2, [r3, #0]
				}

				// Print the value only if it's not equal to "\\0"
				if (strcmp(value, "\\0") != 0)
 801f80a:	4a40      	ldr	r2, [pc, #256]	; (801f90c <getValues+0x20c>)
 801f80c:	243c      	movs	r4, #60	; 0x3c
 801f80e:	193b      	adds	r3, r7, r4
 801f810:	0011      	movs	r1, r2
 801f812:	0018      	movs	r0, r3
 801f814:	f7e2 fc74 	bl	8002100 <strcmp>
 801f818:	1e03      	subs	r3, r0, #0
 801f81a:	d066      	beq.n	801f8ea <getValues+0x1ea>
				{
					printf("%s=%s\n", key, value);
 801f81c:	193a      	adds	r2, r7, r4
 801f81e:	2508      	movs	r5, #8
 801f820:	1979      	adds	r1, r7, r5
 801f822:	4b3b      	ldr	r3, [pc, #236]	; (801f910 <getValues+0x210>)
 801f824:	0018      	movs	r0, r3
 801f826:	f002 fff5 	bl	8022814 <iprintf>

					// Check if dhcpOrStatic is STATIC
					if (strcmp(key, "dhcpOrStatic") == 0)
 801f82a:	4a3a      	ldr	r2, [pc, #232]	; (801f914 <getValues+0x214>)
 801f82c:	197b      	adds	r3, r7, r5
 801f82e:	0011      	movs	r1, r2
 801f830:	0018      	movs	r0, r3
 801f832:	f7e2 fc65 	bl	8002100 <strcmp>
 801f836:	1e03      	subs	r3, r0, #0
 801f838:	d117      	bne.n	801f86a <getValues+0x16a>
					{
						if (strcmp(value, "STATIC") == 0)
 801f83a:	4a37      	ldr	r2, [pc, #220]	; (801f918 <getValues+0x218>)
 801f83c:	193b      	adds	r3, r7, r4
 801f83e:	0011      	movs	r1, r2
 801f840:	0018      	movs	r0, r3
 801f842:	f7e2 fc5d 	bl	8002100 <strcmp>
 801f846:	1e03      	subs	r3, r0, #0
 801f848:	d103      	bne.n	801f852 <getValues+0x152>
						{
							gWIZNETINFO.dhcp = NETINFO_STATIC;
 801f84a:	4b34      	ldr	r3, [pc, #208]	; (801f91c <getValues+0x21c>)
 801f84c:	2201      	movs	r2, #1
 801f84e:	759a      	strb	r2, [r3, #22]
 801f850:	e00b      	b.n	801f86a <getValues+0x16a>
						}
						else if (strcmp(value, "DHCP") == 0)
 801f852:	4a33      	ldr	r2, [pc, #204]	; (801f920 <getValues+0x220>)
 801f854:	233c      	movs	r3, #60	; 0x3c
 801f856:	18fb      	adds	r3, r7, r3
 801f858:	0011      	movs	r1, r2
 801f85a:	0018      	movs	r0, r3
 801f85c:	f7e2 fc50 	bl	8002100 <strcmp>
 801f860:	1e03      	subs	r3, r0, #0
 801f862:	d102      	bne.n	801f86a <getValues+0x16a>
						{
							gWIZNETINFO.dhcp = NETINFO_DHCP;
 801f864:	4b2d      	ldr	r3, [pc, #180]	; (801f91c <getValues+0x21c>)
 801f866:	2202      	movs	r2, #2
 801f868:	759a      	strb	r2, [r3, #22]
						}
					}

					// Check if key is ipAddress
					if (strcmp(key, "ipAddress") == 0)
 801f86a:	4a2e      	ldr	r2, [pc, #184]	; (801f924 <getValues+0x224>)
 801f86c:	2308      	movs	r3, #8
 801f86e:	18fb      	adds	r3, r7, r3
 801f870:	0011      	movs	r1, r2
 801f872:	0018      	movs	r0, r3
 801f874:	f7e2 fc44 	bl	8002100 <strcmp>
 801f878:	1e03      	subs	r3, r0, #0
 801f87a:	d106      	bne.n	801f88a <getValues+0x18a>
					{
						parseIPAddress(value, gWIZNETINFO.ip);
 801f87c:	4a2a      	ldr	r2, [pc, #168]	; (801f928 <getValues+0x228>)
 801f87e:	233c      	movs	r3, #60	; 0x3c
 801f880:	18fb      	adds	r3, r7, r3
 801f882:	0011      	movs	r1, r2
 801f884:	0018      	movs	r0, r3
 801f886:	f7ff fee1 	bl	801f64c <parseIPAddress>
					}

					// Check if key is subnetMask
					if (strcmp(key, "subnetMask") == 0)
 801f88a:	4a28      	ldr	r2, [pc, #160]	; (801f92c <getValues+0x22c>)
 801f88c:	2308      	movs	r3, #8
 801f88e:	18fb      	adds	r3, r7, r3
 801f890:	0011      	movs	r1, r2
 801f892:	0018      	movs	r0, r3
 801f894:	f7e2 fc34 	bl	8002100 <strcmp>
 801f898:	1e03      	subs	r3, r0, #0
 801f89a:	d106      	bne.n	801f8aa <getValues+0x1aa>
					{
						parseIPAddress(value, gWIZNETINFO.sn);
 801f89c:	4a24      	ldr	r2, [pc, #144]	; (801f930 <getValues+0x230>)
 801f89e:	233c      	movs	r3, #60	; 0x3c
 801f8a0:	18fb      	adds	r3, r7, r3
 801f8a2:	0011      	movs	r1, r2
 801f8a4:	0018      	movs	r0, r3
 801f8a6:	f7ff fed1 	bl	801f64c <parseIPAddress>
					}

					// Check if key is gateway
					if (strcmp(key, "gateway") == 0)
 801f8aa:	4a22      	ldr	r2, [pc, #136]	; (801f934 <getValues+0x234>)
 801f8ac:	2308      	movs	r3, #8
 801f8ae:	18fb      	adds	r3, r7, r3
 801f8b0:	0011      	movs	r1, r2
 801f8b2:	0018      	movs	r0, r3
 801f8b4:	f7e2 fc24 	bl	8002100 <strcmp>
 801f8b8:	1e03      	subs	r3, r0, #0
 801f8ba:	d106      	bne.n	801f8ca <getValues+0x1ca>
					{
						parseIPAddress(value, gWIZNETINFO.gw);
 801f8bc:	4a1e      	ldr	r2, [pc, #120]	; (801f938 <getValues+0x238>)
 801f8be:	233c      	movs	r3, #60	; 0x3c
 801f8c0:	18fb      	adds	r3, r7, r3
 801f8c2:	0011      	movs	r1, r2
 801f8c4:	0018      	movs	r0, r3
 801f8c6:	f7ff fec1 	bl	801f64c <parseIPAddress>
					}

					// Check if key is dns1
					if (strcmp(key, "dns1") == 0)
 801f8ca:	4a1c      	ldr	r2, [pc, #112]	; (801f93c <getValues+0x23c>)
 801f8cc:	2308      	movs	r3, #8
 801f8ce:	18fb      	adds	r3, r7, r3
 801f8d0:	0011      	movs	r1, r2
 801f8d2:	0018      	movs	r0, r3
 801f8d4:	f7e2 fc14 	bl	8002100 <strcmp>
 801f8d8:	1e03      	subs	r3, r0, #0
 801f8da:	d106      	bne.n	801f8ea <getValues+0x1ea>
					{
						parseIPAddress(value, gWIZNETINFO.dns);
 801f8dc:	4a18      	ldr	r2, [pc, #96]	; (801f940 <getValues+0x240>)
 801f8de:	233c      	movs	r3, #60	; 0x3c
 801f8e0:	18fb      	adds	r3, r7, r3
 801f8e2:	0011      	movs	r1, r2
 801f8e4:	0018      	movs	r0, r3
 801f8e6:	f7ff feb1 	bl	801f64c <parseIPAddress>
                    }
#endif
				}

				// Skip '&'
				if (*queryString == '&')
 801f8ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f8ec:	781b      	ldrb	r3, [r3, #0]
 801f8ee:	2b26      	cmp	r3, #38	; 0x26
 801f8f0:	d102      	bne.n	801f8f8 <getValues+0x1f8>
				{
					queryString++;
 801f8f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f8f4:	3301      	adds	r3, #1
 801f8f6:	67fb      	str	r3, [r7, #124]	; 0x7c
		while (*queryString != '\0')
 801f8f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f8fa:	781b      	ldrb	r3, [r3, #0]
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d000      	beq.n	801f902 <getValues+0x202>
 801f900:	e711      	b.n	801f726 <getValues+0x26>
				}
			}
		}
	}
}
 801f902:	46c0      	nop			; (mov r8, r8)
 801f904:	46bd      	mov	sp, r7
 801f906:	b020      	add	sp, #128	; 0x80
 801f908:	bdb0      	pop	{r4, r5, r7, pc}
 801f90a:	46c0      	nop			; (mov r8, r8)
 801f90c:	08031758 	.word	0x08031758
 801f910:	0803175c 	.word	0x0803175c
 801f914:	08031764 	.word	0x08031764
 801f918:	08031774 	.word	0x08031774
 801f91c:	2000627c 	.word	0x2000627c
 801f920:	0803177c 	.word	0x0803177c
 801f924:	08031784 	.word	0x08031784
 801f928:	20006282 	.word	0x20006282
 801f92c:	08031790 	.word	0x08031790
 801f930:	20006286 	.word	0x20006286
 801f934:	0803179c 	.word	0x0803179c
 801f938:	2000628a 	.word	0x2000628a
 801f93c:	080317a4 	.word	0x080317a4
 801f940:	2000628e 	.word	0x2000628e

0801f944 <changeIP>:

void changeIP(void)
{
 801f944:	b580      	push	{r7, lr}
 801f946:	af00      	add	r7, sp, #0
	// Net_Conf(gWIZNETINFO);
	Init_WebAPP();
 801f948:	f7e5 fc0c 	bl	8005164 <Init_WebAPP>
	Task_WebAPP();
 801f94c:	f7e5 fce2 	bl	8005314 <Task_WebAPP>
}
 801f950:	46c0      	nop			; (mov r8, r8)
 801f952:	46bd      	mov	sp, r7
 801f954:	bd80      	pop	{r7, pc}
	...

0801f958 <http_process_handler>:

static void http_process_handler(uint8_t s, st_http_request *p_http_request)
{
 801f958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f95a:	46de      	mov	lr, fp
 801f95c:	4657      	mov	r7, sl
 801f95e:	464e      	mov	r6, r9
 801f960:	4645      	mov	r5, r8
 801f962:	b5e0      	push	{r5, r6, r7, lr}
 801f964:	4cb1      	ldr	r4, [pc, #708]	; (801fc2c <http_process_handler+0x2d4>)
 801f966:	44a5      	add	sp, r4
 801f968:	af1e      	add	r7, sp, #120	; 0x78
 801f96a:	0002      	movs	r2, r0
 801f96c:	6439      	str	r1, [r7, #64]	; 0x40
 801f96e:	4bb0      	ldr	r3, [pc, #704]	; (801fc30 <http_process_handler+0x2d8>)
 801f970:	2190      	movs	r1, #144	; 0x90
 801f972:	0109      	lsls	r1, r1, #4
 801f974:	185b      	adds	r3, r3, r1
 801f976:	2030      	movs	r0, #48	; 0x30
 801f978:	4684      	mov	ip, r0
 801f97a:	2008      	movs	r0, #8
 801f97c:	4680      	mov	r8, r0
 801f97e:	2008      	movs	r0, #8
 801f980:	4681      	mov	r9, r0
 801f982:	44b9      	add	r9, r7
 801f984:	44c8      	add	r8, r9
 801f986:	44c4      	add	ip, r8
 801f988:	4463      	add	r3, ip
 801f98a:	701a      	strb	r2, [r3, #0]
	uint8_t *uri_name;
	uint32_t content_addr = 0;
 801f98c:	2300      	movs	r3, #0
 801f98e:	4aa9      	ldr	r2, [pc, #676]	; (801fc34 <http_process_handler+0x2dc>)
 801f990:	2430      	movs	r4, #48	; 0x30
 801f992:	1912      	adds	r2, r2, r4
 801f994:	2008      	movs	r0, #8
 801f996:	4684      	mov	ip, r0
 801f998:	2008      	movs	r0, #8
 801f99a:	4680      	mov	r8, r0
 801f99c:	44b8      	add	r8, r7
 801f99e:	44c4      	add	ip, r8
 801f9a0:	4462      	add	r2, ip
 801f9a2:	6013      	str	r3, [r2, #0]
	uint16_t content_num = 0;
 801f9a4:	4ba4      	ldr	r3, [pc, #656]	; (801fc38 <http_process_handler+0x2e0>)
 801f9a6:	191b      	adds	r3, r3, r4
 801f9a8:	2208      	movs	r2, #8
 801f9aa:	4694      	mov	ip, r2
 801f9ac:	2208      	movs	r2, #8
 801f9ae:	4690      	mov	r8, r2
 801f9b0:	44b8      	add	r8, r7
 801f9b2:	44c4      	add	ip, r8
 801f9b4:	4463      	add	r3, ip
 801f9b6:	2200      	movs	r2, #0
 801f9b8:	801a      	strh	r2, [r3, #0]
	uint32_t file_len = 0;
 801f9ba:	2300      	movs	r3, #0
 801f9bc:	4e9f      	ldr	r6, [pc, #636]	; (801fc3c <http_process_handler+0x2e4>)
 801f9be:	1932      	adds	r2, r6, r4
 801f9c0:	2008      	movs	r0, #8
 801f9c2:	4684      	mov	ip, r0
 801f9c4:	2008      	movs	r0, #8
 801f9c6:	4680      	mov	r8, r0
 801f9c8:	44b8      	add	r8, r7
 801f9ca:	44c4      	add	ip, r8
 801f9cc:	4462      	add	r2, ip
 801f9ce:	6013      	str	r3, [r2, #0]

	uint8_t uri_buf[MAX_URI_SIZE] = {
 801f9d0:	4b9b      	ldr	r3, [pc, #620]	; (801fc40 <http_process_handler+0x2e8>)
 801f9d2:	000d      	movs	r5, r1
 801f9d4:	185b      	adds	r3, r3, r1
 801f9d6:	2230      	movs	r2, #48	; 0x30
 801f9d8:	4694      	mov	ip, r2
 801f9da:	2208      	movs	r2, #8
 801f9dc:	4690      	mov	r8, r2
 801f9de:	2208      	movs	r2, #8
 801f9e0:	4691      	mov	r9, r2
 801f9e2:	44b9      	add	r9, r7
 801f9e4:	44c8      	add	r8, r9
 801f9e6:	44c4      	add	ip, r8
 801f9e8:	4463      	add	r3, ip
 801f9ea:	2200      	movs	r2, #0
 801f9ec:	601a      	str	r2, [r3, #0]
 801f9ee:	3304      	adds	r3, #4
 801f9f0:	4a94      	ldr	r2, [pc, #592]	; (801fc44 <http_process_handler+0x2ec>)
 801f9f2:	2100      	movs	r1, #0
 801f9f4:	0018      	movs	r0, r3
 801f9f6:	f003 f8cf 	bl	8022b98 <memset>

	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

	if ((get_seqnum = getHTTPSequenceNum(s)) == -1)
 801f9fa:	4b93      	ldr	r3, [pc, #588]	; (801fc48 <http_process_handler+0x2f0>)
 801f9fc:	0021      	movs	r1, r4
 801f9fe:	185b      	adds	r3, r3, r1
 801fa00:	2208      	movs	r2, #8
 801fa02:	2008      	movs	r0, #8
 801fa04:	1812      	adds	r2, r2, r0
 801fa06:	19d2      	adds	r2, r2, r7
 801fa08:	189c      	adds	r4, r3, r2
 801fa0a:	4b89      	ldr	r3, [pc, #548]	; (801fc30 <http_process_handler+0x2d8>)
 801fa0c:	195a      	adds	r2, r3, r5
 801fa0e:	000d      	movs	r5, r1
 801fa10:	2308      	movs	r3, #8
 801fa12:	18cb      	adds	r3, r1, r3
 801fa14:	2108      	movs	r1, #8
 801fa16:	468c      	mov	ip, r1
 801fa18:	44bc      	add	ip, r7
 801fa1a:	4463      	add	r3, ip
 801fa1c:	18d3      	adds	r3, r2, r3
 801fa1e:	781b      	ldrb	r3, [r3, #0]
 801fa20:	0018      	movs	r0, r3
 801fa22:	f7ff fa27 	bl	801ee74 <getHTTPSequenceNum>
 801fa26:	0003      	movs	r3, r0
 801fa28:	7023      	strb	r3, [r4, #0]
 801fa2a:	4b87      	ldr	r3, [pc, #540]	; (801fc48 <http_process_handler+0x2f0>)
 801fa2c:	0029      	movs	r1, r5
 801fa2e:	185b      	adds	r3, r3, r1
 801fa30:	2208      	movs	r2, #8
 801fa32:	4694      	mov	ip, r2
 801fa34:	2208      	movs	r2, #8
 801fa36:	4690      	mov	r8, r2
 801fa38:	44b8      	add	r8, r7
 801fa3a:	44c4      	add	ip, r8
 801fa3c:	4463      	add	r3, ip
 801fa3e:	781b      	ldrb	r3, [r3, #0]
 801fa40:	b25b      	sxtb	r3, r3
 801fa42:	3301      	adds	r3, #1
 801fa44:	d101      	bne.n	801fa4a <http_process_handler+0xf2>
 801fa46:	f002 f9c6 	bl	8021dd6 <http_process_handler+0x247e>
		return; // exception handling; invalid number

	http_status = 0;
 801fa4a:	4b80      	ldr	r3, [pc, #512]	; (801fc4c <http_process_handler+0x2f4>)
 801fa4c:	185b      	adds	r3, r3, r1
 801fa4e:	2208      	movs	r2, #8
 801fa50:	4694      	mov	ip, r2
 801fa52:	2208      	movs	r2, #8
 801fa54:	4690      	mov	r8, r2
 801fa56:	44b8      	add	r8, r7
 801fa58:	44c4      	add	ip, r8
 801fa5a:	4463      	add	r3, ip
 801fa5c:	2200      	movs	r2, #0
 801fa5e:	801a      	strh	r2, [r3, #0]
	http_response = pHTTP_RX;
 801fa60:	4b7b      	ldr	r3, [pc, #492]	; (801fc50 <http_process_handler+0x2f8>)
 801fa62:	681a      	ldr	r2, [r3, #0]
 801fa64:	4b7b      	ldr	r3, [pc, #492]	; (801fc54 <http_process_handler+0x2fc>)
 801fa66:	601a      	str	r2, [r3, #0]
	file_len = 0;
 801fa68:	2300      	movs	r3, #0
 801fa6a:	1872      	adds	r2, r6, r1
 801fa6c:	2108      	movs	r1, #8
 801fa6e:	468c      	mov	ip, r1
 801fa70:	2108      	movs	r1, #8
 801fa72:	4688      	mov	r8, r1
 801fa74:	44b8      	add	r8, r7
 801fa76:	44c4      	add	ip, r8
 801fa78:	4462      	add	r2, ip
 801fa7a:	6013      	str	r3, [r2, #0]

	// method Analyze
	switch (p_http_request->METHOD)
 801fa7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fa7e:	781b      	ldrb	r3, [r3, #0]
 801fa80:	2b03      	cmp	r3, #3
 801fa82:	d101      	bne.n	801fa88 <http_process_handler+0x130>
 801fa84:	f002 f880 	bl	8021b88 <http_process_handler+0x2230>
 801fa88:	dd01      	ble.n	801fa8e <http_process_handler+0x136>
 801fa8a:	f002 f979 	bl	8021d80 <http_process_handler+0x2428>
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	d008      	beq.n	801faa4 <http_process_handler+0x14c>
 801fa92:	da01      	bge.n	801fa98 <http_process_handler+0x140>
 801fa94:	f002 f974 	bl	8021d80 <http_process_handler+0x2428>
 801fa98:	3b01      	subs	r3, #1
 801fa9a:	2b01      	cmp	r3, #1
 801fa9c:	d901      	bls.n	801faa2 <http_process_handler+0x14a>
 801fa9e:	f002 f96f 	bl	8021d80 <http_process_handler+0x2428>
 801faa2:	e02b      	b.n	801fafc <http_process_handler+0x1a4>
	{
	case METHOD_ERR:
		http_status = STATUS_BAD_REQ;
 801faa4:	4969      	ldr	r1, [pc, #420]	; (801fc4c <http_process_handler+0x2f4>)
 801faa6:	2030      	movs	r0, #48	; 0x30
 801faa8:	180b      	adds	r3, r1, r0
 801faaa:	2208      	movs	r2, #8
 801faac:	4694      	mov	ip, r2
 801faae:	2208      	movs	r2, #8
 801fab0:	4690      	mov	r8, r2
 801fab2:	44b8      	add	r8, r7
 801fab4:	44c4      	add	ip, r8
 801fab6:	4463      	add	r3, ip
 801fab8:	22c8      	movs	r2, #200	; 0xc8
 801faba:	0052      	lsls	r2, r2, #1
 801fabc:	801a      	strh	r2, [r3, #0]
		send_http_response_header(s, 0, 0, http_status);
 801fabe:	180b      	adds	r3, r1, r0
 801fac0:	2208      	movs	r2, #8
 801fac2:	4694      	mov	ip, r2
 801fac4:	2208      	movs	r2, #8
 801fac6:	4690      	mov	r8, r2
 801fac8:	44b8      	add	r8, r7
 801faca:	44c4      	add	ip, r8
 801facc:	4463      	add	r3, ip
 801face:	881a      	ldrh	r2, [r3, #0]
 801fad0:	4b57      	ldr	r3, [pc, #348]	; (801fc30 <http_process_handler+0x2d8>)
 801fad2:	2190      	movs	r1, #144	; 0x90
 801fad4:	0109      	lsls	r1, r1, #4
 801fad6:	185b      	adds	r3, r3, r1
 801fad8:	2130      	movs	r1, #48	; 0x30
 801fada:	468c      	mov	ip, r1
 801fadc:	2108      	movs	r1, #8
 801fade:	4688      	mov	r8, r1
 801fae0:	2108      	movs	r1, #8
 801fae2:	4689      	mov	r9, r1
 801fae4:	44b9      	add	r9, r7
 801fae6:	44c8      	add	r8, r9
 801fae8:	44c4      	add	ip, r8
 801faea:	4463      	add	r3, ip
 801faec:	7818      	ldrb	r0, [r3, #0]
 801faee:	0013      	movs	r3, r2
 801faf0:	2200      	movs	r2, #0
 801faf2:	2100      	movs	r1, #0
 801faf4:	f7ff fbd0 	bl	801f298 <send_http_response_header>
		break;
 801faf8:	f002 f970 	bl	8021ddc <http_process_handler+0x2484>

	case METHOD_HEAD:
	case METHOD_GET:
		get_http_uri_name(p_http_request->URI, uri_buf);
 801fafc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fafe:	3302      	adds	r3, #2
 801fb00:	24a4      	movs	r4, #164	; 0xa4
 801fb02:	2530      	movs	r5, #48	; 0x30
 801fb04:	1962      	adds	r2, r4, r5
 801fb06:	2108      	movs	r1, #8
 801fb08:	468c      	mov	ip, r1
 801fb0a:	2108      	movs	r1, #8
 801fb0c:	4688      	mov	r8, r1
 801fb0e:	44b8      	add	r8, r7
 801fb10:	44c4      	add	ip, r8
 801fb12:	4462      	add	r2, ip
 801fb14:	0011      	movs	r1, r2
 801fb16:	0018      	movs	r0, r3
 801fb18:	f7fe fb24 	bl	801e164 <get_http_uri_name>
		uri_name = uri_buf;
 801fb1c:	0028      	movs	r0, r5
 801fb1e:	1823      	adds	r3, r4, r0
 801fb20:	2208      	movs	r2, #8
 801fb22:	4694      	mov	ip, r2
 801fb24:	2208      	movs	r2, #8
 801fb26:	4690      	mov	r8, r2
 801fb28:	44b8      	add	r8, r7
 801fb2a:	44c4      	add	ip, r8
 801fb2c:	4463      	add	r3, ip
 801fb2e:	218b      	movs	r1, #139	; 0x8b
 801fb30:	0109      	lsls	r1, r1, #4
 801fb32:	180a      	adds	r2, r1, r0
 801fb34:	2408      	movs	r4, #8
 801fb36:	46a4      	mov	ip, r4
 801fb38:	2408      	movs	r4, #8
 801fb3a:	46a0      	mov	r8, r4
 801fb3c:	44b8      	add	r8, r7
 801fb3e:	44c4      	add	ip, r8
 801fb40:	4462      	add	r2, ip
 801fb42:	6013      	str	r3, [r2, #0]
		if (!strcmp((char *)uri_name, "networksettings.html"))
 801fb44:	4a44      	ldr	r2, [pc, #272]	; (801fc58 <http_process_handler+0x300>)
 801fb46:	180b      	adds	r3, r1, r0
 801fb48:	2108      	movs	r1, #8
 801fb4a:	468c      	mov	ip, r1
 801fb4c:	2108      	movs	r1, #8
 801fb4e:	4688      	mov	r8, r1
 801fb50:	44b8      	add	r8, r7
 801fb52:	44c4      	add	ip, r8
 801fb54:	4463      	add	r3, ip
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	0011      	movs	r1, r2
 801fb5a:	0018      	movs	r0, r3
 801fb5c:	f7e2 fad0 	bl	8002100 <strcmp>
 801fb60:	1e03      	subs	r3, r0, #0
 801fb62:	d000      	beq.n	801fb66 <http_process_handler+0x20e>
 801fb64:	e164      	b.n	801fe30 <http_process_handler+0x4d8>
		{
			if (p_http_request->URI[21] == '?')
 801fb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb68:	7ddb      	ldrb	r3, [r3, #23]
 801fb6a:	2b3f      	cmp	r3, #63	; 0x3f
 801fb6c:	d147      	bne.n	801fbfe <http_process_handler+0x2a6>
			{
				getValues((char*)p_http_request->URI);
 801fb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb70:	3302      	adds	r3, #2
 801fb72:	0018      	movs	r0, r3
 801fb74:	f7ff fdc4 	bl	801f700 <getValues>
				changeIP();
 801fb78:	f7ff fee4 	bl	801f944 <changeIP>
				memcpy(&pcb_config.mac, &gWIZNETINFO.mac, 6);
 801fb7c:	4a37      	ldr	r2, [pc, #220]	; (801fc5c <http_process_handler+0x304>)
 801fb7e:	2306      	movs	r3, #6
 801fb80:	33ff      	adds	r3, #255	; 0xff
 801fb82:	4937      	ldr	r1, [pc, #220]	; (801fc60 <http_process_handler+0x308>)
 801fb84:	18d3      	adds	r3, r2, r3
 801fb86:	2206      	movs	r2, #6
 801fb88:	0018      	movs	r0, r3
 801fb8a:	f003 feed 	bl	8023968 <memcpy>
				memcpy(&pcb_config.dns, &gWIZNETINFO.dns, 4);
 801fb8e:	4933      	ldr	r1, [pc, #204]	; (801fc5c <http_process_handler+0x304>)
 801fb90:	2318      	movs	r3, #24
 801fb92:	33ff      	adds	r3, #255	; 0xff
 801fb94:	001a      	movs	r2, r3
 801fb96:	4b32      	ldr	r3, [pc, #200]	; (801fc60 <http_process_handler+0x308>)
 801fb98:	2412      	movs	r4, #18
 801fb9a:	1888      	adds	r0, r1, r2
 801fb9c:	191b      	adds	r3, r3, r4
 801fb9e:	2204      	movs	r2, #4
 801fba0:	0019      	movs	r1, r3
 801fba2:	f003 fee1 	bl	8023968 <memcpy>
				memcpy(&pcb_config.gw, &gWIZNETINFO.gw, 4);
 801fba6:	492d      	ldr	r1, [pc, #180]	; (801fc5c <http_process_handler+0x304>)
 801fba8:	2314      	movs	r3, #20
 801fbaa:	33ff      	adds	r3, #255	; 0xff
 801fbac:	001a      	movs	r2, r3
 801fbae:	4b2c      	ldr	r3, [pc, #176]	; (801fc60 <http_process_handler+0x308>)
 801fbb0:	240e      	movs	r4, #14
 801fbb2:	1888      	adds	r0, r1, r2
 801fbb4:	191b      	adds	r3, r3, r4
 801fbb6:	2204      	movs	r2, #4
 801fbb8:	0019      	movs	r1, r3
 801fbba:	f003 fed5 	bl	8023968 <memcpy>
				memcpy(&pcb_config.ip, &gWIZNETINFO.ip, 4);
 801fbbe:	4927      	ldr	r1, [pc, #156]	; (801fc5c <http_process_handler+0x304>)
 801fbc0:	230c      	movs	r3, #12
 801fbc2:	33ff      	adds	r3, #255	; 0xff
 801fbc4:	001a      	movs	r2, r3
 801fbc6:	4b26      	ldr	r3, [pc, #152]	; (801fc60 <http_process_handler+0x308>)
 801fbc8:	2406      	movs	r4, #6
 801fbca:	1888      	adds	r0, r1, r2
 801fbcc:	191b      	adds	r3, r3, r4
 801fbce:	2204      	movs	r2, #4
 801fbd0:	0019      	movs	r1, r3
 801fbd2:	f003 fec9 	bl	8023968 <memcpy>
				memcpy(&pcb_config.sn, &gWIZNETINFO.sn, 4);
 801fbd6:	4921      	ldr	r1, [pc, #132]	; (801fc5c <http_process_handler+0x304>)
 801fbd8:	2310      	movs	r3, #16
 801fbda:	33ff      	adds	r3, #255	; 0xff
 801fbdc:	001a      	movs	r2, r3
 801fbde:	4b20      	ldr	r3, [pc, #128]	; (801fc60 <http_process_handler+0x308>)
 801fbe0:	240a      	movs	r4, #10
 801fbe2:	1888      	adds	r0, r1, r2
 801fbe4:	191b      	adds	r3, r3, r4
 801fbe6:	2204      	movs	r2, #4
 801fbe8:	0019      	movs	r1, r3
 801fbea:	f003 febd 	bl	8023968 <memcpy>
 801fbee:	4b1c      	ldr	r3, [pc, #112]	; (801fc60 <http_process_handler+0x308>)
 801fbf0:	7d99      	ldrb	r1, [r3, #22]
				memcpy(&pcb_config.dhcp, &gWIZNETINFO.dhcp, 1);
 801fbf2:	4a1a      	ldr	r2, [pc, #104]	; (801fc5c <http_process_handler+0x304>)
 801fbf4:	231c      	movs	r3, #28
 801fbf6:	33ff      	adds	r3, #255	; 0xff
 801fbf8:	54d1      	strb	r1, [r2, r3]

				WriteToEeprom();
 801fbfa:	f7ea f803 	bl	8009c04 <WriteToEeprom>
				// reg_httpServer_webContent((uint8_t*) "index.html", (uint8_t*) index_page);
			}

			// uint8_t *settings_str = NULL;
			// settings_str = calloc(5000, sizeof(uint8_t));
			memset(settings_str, 0, sizeof(settings_str));
 801fbfe:	4a19      	ldr	r2, [pc, #100]	; (801fc64 <http_process_handler+0x30c>)
 801fc00:	4b19      	ldr	r3, [pc, #100]	; (801fc68 <http_process_handler+0x310>)
 801fc02:	2100      	movs	r1, #0
 801fc04:	0018      	movs	r0, r3
 801fc06:	f002 ffc7 	bl	8022b98 <memset>
			if (settings_str == NULL)
			{
				return;
			}

			sprintf((char*)settings_str,setting_page,
 801fc0a:	4b18      	ldr	r3, [pc, #96]	; (801fc6c <http_process_handler+0x314>)
 801fc0c:	681b      	ldr	r3, [r3, #0]
 801fc0e:	469a      	mov	sl, r3
					gWIZNETINFO.dhcp == NETINFO_STATIC ? "selected" : "",
 801fc10:	4b13      	ldr	r3, [pc, #76]	; (801fc60 <http_process_handler+0x308>)
 801fc12:	7d9b      	ldrb	r3, [r3, #22]
			sprintf((char*)settings_str,setting_page,
 801fc14:	2b01      	cmp	r3, #1
 801fc16:	d101      	bne.n	801fc1c <http_process_handler+0x2c4>
 801fc18:	4e15      	ldr	r6, [pc, #84]	; (801fc70 <http_process_handler+0x318>)
 801fc1a:	e000      	b.n	801fc1e <http_process_handler+0x2c6>
 801fc1c:	4e15      	ldr	r6, [pc, #84]	; (801fc74 <http_process_handler+0x31c>)
					gWIZNETINFO.dhcp == NETINFO_DHCP ? "selected" : "",
 801fc1e:	4b10      	ldr	r3, [pc, #64]	; (801fc60 <http_process_handler+0x308>)
 801fc20:	7d9b      	ldrb	r3, [r3, #22]
			sprintf((char*)settings_str,setting_page,
 801fc22:	2b02      	cmp	r3, #2
 801fc24:	d128      	bne.n	801fc78 <http_process_handler+0x320>
 801fc26:	4b12      	ldr	r3, [pc, #72]	; (801fc70 <http_process_handler+0x318>)
 801fc28:	469c      	mov	ip, r3
 801fc2a:	e027      	b.n	801fc7c <http_process_handler+0x324>
 801fc2c:	fffff644 	.word	0xfffff644
 801fc30:	fffff707 	.word	0xfffff707
 801fc34:	000008fc 	.word	0x000008fc
 801fc38:	000008aa 	.word	0x000008aa
 801fc3c:	000008a4 	.word	0x000008a4
 801fc40:	fffff7a4 	.word	0xfffff7a4
 801fc44:	000007fc 	.word	0x000007fc
 801fc48:	000008b7 	.word	0x000008b7
 801fc4c:	000008fa 	.word	0x000008fa
 801fc50:	20007e1c 	.word	0x20007e1c
 801fc54:	20007de0 	.word	0x20007de0
 801fc58:	080317ac 	.word	0x080317ac
 801fc5c:	20006db4 	.word	0x20006db4
 801fc60:	2000627c 	.word	0x2000627c
 801fc64:	00001770 	.word	0x00001770
 801fc68:	200083b4 	.word	0x200083b4
 801fc6c:	20005050 	.word	0x20005050
 801fc70:	080317c4 	.word	0x080317c4
 801fc74:	080317d0 	.word	0x080317d0
 801fc78:	4b66      	ldr	r3, [pc, #408]	; (801fe14 <http_process_handler+0x4bc>)
 801fc7a:	469c      	mov	ip, r3
					gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3],
 801fc7c:	4b66      	ldr	r3, [pc, #408]	; (801fe18 <http_process_handler+0x4c0>)
 801fc7e:	799b      	ldrb	r3, [r3, #6]
			sprintf((char*)settings_str,setting_page,
 801fc80:	63fb      	str	r3, [r7, #60]	; 0x3c
					gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3],
 801fc82:	4b65      	ldr	r3, [pc, #404]	; (801fe18 <http_process_handler+0x4c0>)
 801fc84:	79db      	ldrb	r3, [r3, #7]
			sprintf((char*)settings_str,setting_page,
 801fc86:	63bb      	str	r3, [r7, #56]	; 0x38
					gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3],
 801fc88:	4b63      	ldr	r3, [pc, #396]	; (801fe18 <http_process_handler+0x4c0>)
 801fc8a:	7a1b      	ldrb	r3, [r3, #8]
			sprintf((char*)settings_str,setting_page,
 801fc8c:	637b      	str	r3, [r7, #52]	; 0x34
					gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3],
 801fc8e:	4b62      	ldr	r3, [pc, #392]	; (801fe18 <http_process_handler+0x4c0>)
 801fc90:	7a5b      	ldrb	r3, [r3, #9]
			sprintf((char*)settings_str,setting_page,
 801fc92:	633b      	str	r3, [r7, #48]	; 0x30
					gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3],
 801fc94:	4b60      	ldr	r3, [pc, #384]	; (801fe18 <http_process_handler+0x4c0>)
 801fc96:	7a9b      	ldrb	r3, [r3, #10]
			sprintf((char*)settings_str,setting_page,
 801fc98:	62fb      	str	r3, [r7, #44]	; 0x2c
					gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3],
 801fc9a:	4b5f      	ldr	r3, [pc, #380]	; (801fe18 <http_process_handler+0x4c0>)
 801fc9c:	7adb      	ldrb	r3, [r3, #11]
			sprintf((char*)settings_str,setting_page,
 801fc9e:	62bb      	str	r3, [r7, #40]	; 0x28
					gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3],
 801fca0:	4b5d      	ldr	r3, [pc, #372]	; (801fe18 <http_process_handler+0x4c0>)
 801fca2:	7b1b      	ldrb	r3, [r3, #12]
			sprintf((char*)settings_str,setting_page,
 801fca4:	627b      	str	r3, [r7, #36]	; 0x24
					gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3],
 801fca6:	4b5c      	ldr	r3, [pc, #368]	; (801fe18 <http_process_handler+0x4c0>)
 801fca8:	7b5b      	ldrb	r3, [r3, #13]
			sprintf((char*)settings_str,setting_page,
 801fcaa:	623b      	str	r3, [r7, #32]
					gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3],
 801fcac:	4b5a      	ldr	r3, [pc, #360]	; (801fe18 <http_process_handler+0x4c0>)
 801fcae:	7b9b      	ldrb	r3, [r3, #14]
			sprintf((char*)settings_str,setting_page,
 801fcb0:	61fb      	str	r3, [r7, #28]
					gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3],
 801fcb2:	4b59      	ldr	r3, [pc, #356]	; (801fe18 <http_process_handler+0x4c0>)
 801fcb4:	7bdb      	ldrb	r3, [r3, #15]
			sprintf((char*)settings_str,setting_page,
 801fcb6:	61bb      	str	r3, [r7, #24]
					gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3],
 801fcb8:	4b57      	ldr	r3, [pc, #348]	; (801fe18 <http_process_handler+0x4c0>)
 801fcba:	7c1b      	ldrb	r3, [r3, #16]
			sprintf((char*)settings_str,setting_page,
 801fcbc:	617b      	str	r3, [r7, #20]
					gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3],
 801fcbe:	4b56      	ldr	r3, [pc, #344]	; (801fe18 <http_process_handler+0x4c0>)
 801fcc0:	7c5b      	ldrb	r3, [r3, #17]
			sprintf((char*)settings_str,setting_page,
 801fcc2:	613b      	str	r3, [r7, #16]
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2], gWIZNETINFO.dns[3],
 801fcc4:	4b54      	ldr	r3, [pc, #336]	; (801fe18 <http_process_handler+0x4c0>)
 801fcc6:	7c9b      	ldrb	r3, [r3, #18]
			sprintf((char*)settings_str,setting_page,
 801fcc8:	469b      	mov	fp, r3
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2], gWIZNETINFO.dns[3],
 801fcca:	4b53      	ldr	r3, [pc, #332]	; (801fe18 <http_process_handler+0x4c0>)
 801fccc:	7cdb      	ldrb	r3, [r3, #19]
			sprintf((char*)settings_str,setting_page,
 801fcce:	4699      	mov	r9, r3
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2], gWIZNETINFO.dns[3],
 801fcd0:	4b51      	ldr	r3, [pc, #324]	; (801fe18 <http_process_handler+0x4c0>)
 801fcd2:	7d1b      	ldrb	r3, [r3, #20]
			sprintf((char*)settings_str,setting_page,
 801fcd4:	4698      	mov	r8, r3
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2], gWIZNETINFO.dns[3],
 801fcd6:	4b50      	ldr	r3, [pc, #320]	; (801fe18 <http_process_handler+0x4c0>)
 801fcd8:	7d5b      	ldrb	r3, [r3, #21]
			sprintf((char*)settings_str,setting_page,
 801fcda:	001d      	movs	r5, r3
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2],	gWIZNETINFO.dns[3]);
 801fcdc:	4b4e      	ldr	r3, [pc, #312]	; (801fe18 <http_process_handler+0x4c0>)
 801fcde:	7c9b      	ldrb	r3, [r3, #18]
			sprintf((char*)settings_str,setting_page,
 801fce0:	001c      	movs	r4, r3
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2],	gWIZNETINFO.dns[3]);
 801fce2:	4b4d      	ldr	r3, [pc, #308]	; (801fe18 <http_process_handler+0x4c0>)
 801fce4:	7cdb      	ldrb	r3, [r3, #19]
			sprintf((char*)settings_str,setting_page,
 801fce6:	0019      	movs	r1, r3
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2],	gWIZNETINFO.dns[3]);
 801fce8:	4b4b      	ldr	r3, [pc, #300]	; (801fe18 <http_process_handler+0x4c0>)
 801fcea:	7d1b      	ldrb	r3, [r3, #20]
			sprintf((char*)settings_str,setting_page,
 801fcec:	001a      	movs	r2, r3
					gWIZNETINFO.dns[0],	gWIZNETINFO.dns[1],	gWIZNETINFO.dns[2],	gWIZNETINFO.dns[3]);
 801fcee:	4b4a      	ldr	r3, [pc, #296]	; (801fe18 <http_process_handler+0x4c0>)
 801fcf0:	7d5b      	ldrb	r3, [r3, #21]
			sprintf((char*)settings_str,setting_page,
 801fcf2:	484a      	ldr	r0, [pc, #296]	; (801fe1c <http_process_handler+0x4c4>)
 801fcf4:	9313      	str	r3, [sp, #76]	; 0x4c
 801fcf6:	9212      	str	r2, [sp, #72]	; 0x48
 801fcf8:	9111      	str	r1, [sp, #68]	; 0x44
 801fcfa:	9410      	str	r4, [sp, #64]	; 0x40
 801fcfc:	950f      	str	r5, [sp, #60]	; 0x3c
 801fcfe:	4642      	mov	r2, r8
 801fd00:	920e      	str	r2, [sp, #56]	; 0x38
 801fd02:	464a      	mov	r2, r9
 801fd04:	920d      	str	r2, [sp, #52]	; 0x34
 801fd06:	465a      	mov	r2, fp
 801fd08:	920c      	str	r2, [sp, #48]	; 0x30
 801fd0a:	693a      	ldr	r2, [r7, #16]
 801fd0c:	920b      	str	r2, [sp, #44]	; 0x2c
 801fd0e:	697a      	ldr	r2, [r7, #20]
 801fd10:	920a      	str	r2, [sp, #40]	; 0x28
 801fd12:	69ba      	ldr	r2, [r7, #24]
 801fd14:	9209      	str	r2, [sp, #36]	; 0x24
 801fd16:	69fa      	ldr	r2, [r7, #28]
 801fd18:	9208      	str	r2, [sp, #32]
 801fd1a:	6a3a      	ldr	r2, [r7, #32]
 801fd1c:	9207      	str	r2, [sp, #28]
 801fd1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd20:	9206      	str	r2, [sp, #24]
 801fd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd24:	9205      	str	r2, [sp, #20]
 801fd26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fd28:	9204      	str	r2, [sp, #16]
 801fd2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd2c:	9203      	str	r2, [sp, #12]
 801fd2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fd30:	9202      	str	r2, [sp, #8]
 801fd32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fd34:	9201      	str	r2, [sp, #4]
 801fd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd38:	9300      	str	r3, [sp, #0]
 801fd3a:	4663      	mov	r3, ip
 801fd3c:	0032      	movs	r2, r6
 801fd3e:	4651      	mov	r1, sl
 801fd40:	f002 fe16 	bl	8022970 <siprintf>

			uint16_t content_num = 0;
 801fd44:	4b36      	ldr	r3, [pc, #216]	; (801fe20 <http_process_handler+0x4c8>)
 801fd46:	2490      	movs	r4, #144	; 0x90
 801fd48:	0124      	lsls	r4, r4, #4
 801fd4a:	191b      	adds	r3, r3, r4
 801fd4c:	2230      	movs	r2, #48	; 0x30
 801fd4e:	4694      	mov	ip, r2
 801fd50:	2208      	movs	r2, #8
 801fd52:	4690      	mov	r8, r2
 801fd54:	2208      	movs	r2, #8
 801fd56:	4691      	mov	r9, r2
 801fd58:	44b9      	add	r9, r7
 801fd5a:	44c8      	add	r8, r9
 801fd5c:	44c4      	add	ip, r8
 801fd5e:	4463      	add	r3, ip
 801fd60:	2200      	movs	r2, #0
 801fd62:	801a      	strh	r2, [r3, #0]
			uint32_t file_len = 0;
 801fd64:	2300      	movs	r3, #0
 801fd66:	229c      	movs	r2, #156	; 0x9c
 801fd68:	2030      	movs	r0, #48	; 0x30
 801fd6a:	1811      	adds	r1, r2, r0
 801fd6c:	2508      	movs	r5, #8
 801fd6e:	46ac      	mov	ip, r5
 801fd70:	2508      	movs	r5, #8
 801fd72:	46a8      	mov	r8, r5
 801fd74:	44b8      	add	r8, r7
 801fd76:	44c4      	add	ip, r8
 801fd78:	4461      	add	r1, ip
 801fd7a:	600b      	str	r3, [r1, #0]
			if (find_userReg_webContent((uint8_t *)"networksettings.html", &content_num, &file_len))
 801fd7c:	1813      	adds	r3, r2, r0
 801fd7e:	2208      	movs	r2, #8
 801fd80:	2108      	movs	r1, #8
 801fd82:	1852      	adds	r2, r2, r1
 801fd84:	19d2      	adds	r2, r2, r7
 801fd86:	189a      	adds	r2, r3, r2
 801fd88:	23a2      	movs	r3, #162	; 0xa2
 801fd8a:	181b      	adds	r3, r3, r0
 801fd8c:	2108      	movs	r1, #8
 801fd8e:	2008      	movs	r0, #8
 801fd90:	1809      	adds	r1, r1, r0
 801fd92:	19c9      	adds	r1, r1, r7
 801fd94:	1859      	adds	r1, r3, r1
 801fd96:	4b23      	ldr	r3, [pc, #140]	; (801fe24 <http_process_handler+0x4cc>)
 801fd98:	0018      	movs	r0, r3
 801fd9a:	f002 f971 	bl	8022080 <find_userReg_webContent>
 801fd9e:	1e03      	subs	r3, r0, #0
 801fda0:	d02f      	beq.n	801fe02 <http_process_handler+0x4aa>
			{
				web_content[content_num].content_len = sizeof(settings_str);
 801fda2:	4b1f      	ldr	r3, [pc, #124]	; (801fe20 <http_process_handler+0x4c8>)
 801fda4:	191b      	adds	r3, r3, r4
 801fda6:	2230      	movs	r2, #48	; 0x30
 801fda8:	4694      	mov	ip, r2
 801fdaa:	2208      	movs	r2, #8
 801fdac:	4690      	mov	r8, r2
 801fdae:	2208      	movs	r2, #8
 801fdb0:	4691      	mov	r9, r2
 801fdb2:	44b9      	add	r9, r7
 801fdb4:	44c8      	add	r8, r9
 801fdb6:	44c4      	add	ip, r8
 801fdb8:	4463      	add	r3, ip
 801fdba:	881b      	ldrh	r3, [r3, #0]
 801fdbc:	0019      	movs	r1, r3
 801fdbe:	4a1a      	ldr	r2, [pc, #104]	; (801fe28 <http_process_handler+0x4d0>)
 801fdc0:	000b      	movs	r3, r1
 801fdc2:	005b      	lsls	r3, r3, #1
 801fdc4:	185b      	adds	r3, r3, r1
 801fdc6:	009b      	lsls	r3, r3, #2
 801fdc8:	18d3      	adds	r3, r2, r3
 801fdca:	3304      	adds	r3, #4
 801fdcc:	4a17      	ldr	r2, [pc, #92]	; (801fe2c <http_process_handler+0x4d4>)
 801fdce:	601a      	str	r2, [r3, #0]
				web_content[content_num].content = (uint8_t *)settings_str;
 801fdd0:	4b13      	ldr	r3, [pc, #76]	; (801fe20 <http_process_handler+0x4c8>)
 801fdd2:	191b      	adds	r3, r3, r4
 801fdd4:	2230      	movs	r2, #48	; 0x30
 801fdd6:	4694      	mov	ip, r2
 801fdd8:	2208      	movs	r2, #8
 801fdda:	4690      	mov	r8, r2
 801fddc:	2208      	movs	r2, #8
 801fdde:	4691      	mov	r9, r2
 801fde0:	44b9      	add	r9, r7
 801fde2:	44c8      	add	r8, r9
 801fde4:	44c4      	add	ip, r8
 801fde6:	4463      	add	r3, ip
 801fde8:	881b      	ldrh	r3, [r3, #0]
 801fdea:	0019      	movs	r1, r3
 801fdec:	4a0e      	ldr	r2, [pc, #56]	; (801fe28 <http_process_handler+0x4d0>)
 801fdee:	000b      	movs	r3, r1
 801fdf0:	005b      	lsls	r3, r3, #1
 801fdf2:	185b      	adds	r3, r3, r1
 801fdf4:	009b      	lsls	r3, r3, #2
 801fdf6:	18d3      	adds	r3, r2, r3
 801fdf8:	3308      	adds	r3, #8
 801fdfa:	4a08      	ldr	r2, [pc, #32]	; (801fe1c <http_process_handler+0x4c4>)
 801fdfc:	601a      	str	r2, [r3, #0]
 801fdfe:	f001 fb16 	bl	802142e <http_process_handler+0x1ad6>
			}
			else
			{
				reg_httpServer_webContent((uint8_t *)"networksettings.html", (uint8_t *)settings_str);
 801fe02:	4a06      	ldr	r2, [pc, #24]	; (801fe1c <http_process_handler+0x4c4>)
 801fe04:	4b07      	ldr	r3, [pc, #28]	; (801fe24 <http_process_handler+0x4cc>)
 801fe06:	0011      	movs	r1, r2
 801fe08:	0018      	movs	r0, r3
 801fe0a:	f002 f825 	bl	8021e58 <reg_httpServer_webContent>
 801fe0e:	f001 fb0e 	bl	802142e <http_process_handler+0x1ad6>
 801fe12:	46c0      	nop			; (mov r8, r8)
 801fe14:	080317d0 	.word	0x080317d0
 801fe18:	2000627c 	.word	0x2000627c
 801fe1c:	200083b4 	.word	0x200083b4
 801fe20:	fffff7a2 	.word	0xfffff7a2
 801fe24:	080317ac 	.word	0x080317ac
 801fe28:	200082c4 	.word	0x200082c4
 801fe2c:	00001770 	.word	0x00001770
			}

			// free(settings_str);
		}
		else if (!strcmp((char *)uri_name, "load") || !strcmp((char *)uri_name, "IP") || !strcmp((char *)uri_name, "CONTROL") || !strcmp((char *)uri_name, "main.html"))
 801fe30:	4af1      	ldr	r2, [pc, #964]	; (80201f8 <http_process_handler+0x8a0>)
 801fe32:	248b      	movs	r4, #139	; 0x8b
 801fe34:	0124      	lsls	r4, r4, #4
 801fe36:	2530      	movs	r5, #48	; 0x30
 801fe38:	1963      	adds	r3, r4, r5
 801fe3a:	2108      	movs	r1, #8
 801fe3c:	468c      	mov	ip, r1
 801fe3e:	2108      	movs	r1, #8
 801fe40:	4688      	mov	r8, r1
 801fe42:	44b8      	add	r8, r7
 801fe44:	44c4      	add	ip, r8
 801fe46:	4463      	add	r3, ip
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	0011      	movs	r1, r2
 801fe4c:	0018      	movs	r0, r3
 801fe4e:	f7e2 f957 	bl	8002100 <strcmp>
 801fe52:	1e03      	subs	r3, r0, #0
 801fe54:	d031      	beq.n	801feba <http_process_handler+0x562>
 801fe56:	4ae9      	ldr	r2, [pc, #932]	; (80201fc <http_process_handler+0x8a4>)
 801fe58:	1963      	adds	r3, r4, r5
 801fe5a:	2108      	movs	r1, #8
 801fe5c:	468c      	mov	ip, r1
 801fe5e:	2108      	movs	r1, #8
 801fe60:	4688      	mov	r8, r1
 801fe62:	44b8      	add	r8, r7
 801fe64:	44c4      	add	ip, r8
 801fe66:	4463      	add	r3, ip
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	0011      	movs	r1, r2
 801fe6c:	0018      	movs	r0, r3
 801fe6e:	f7e2 f947 	bl	8002100 <strcmp>
 801fe72:	1e03      	subs	r3, r0, #0
 801fe74:	d021      	beq.n	801feba <http_process_handler+0x562>
 801fe76:	4ae2      	ldr	r2, [pc, #904]	; (8020200 <http_process_handler+0x8a8>)
 801fe78:	1963      	adds	r3, r4, r5
 801fe7a:	2108      	movs	r1, #8
 801fe7c:	468c      	mov	ip, r1
 801fe7e:	2108      	movs	r1, #8
 801fe80:	4688      	mov	r8, r1
 801fe82:	44b8      	add	r8, r7
 801fe84:	44c4      	add	ip, r8
 801fe86:	4463      	add	r3, ip
 801fe88:	681b      	ldr	r3, [r3, #0]
 801fe8a:	0011      	movs	r1, r2
 801fe8c:	0018      	movs	r0, r3
 801fe8e:	f7e2 f937 	bl	8002100 <strcmp>
 801fe92:	1e03      	subs	r3, r0, #0
 801fe94:	d011      	beq.n	801feba <http_process_handler+0x562>
 801fe96:	4adb      	ldr	r2, [pc, #876]	; (8020204 <http_process_handler+0x8ac>)
 801fe98:	1963      	adds	r3, r4, r5
 801fe9a:	2108      	movs	r1, #8
 801fe9c:	468c      	mov	ip, r1
 801fe9e:	2108      	movs	r1, #8
 801fea0:	4688      	mov	r8, r1
 801fea2:	44b8      	add	r8, r7
 801fea4:	44c4      	add	ip, r8
 801fea6:	4463      	add	r3, ip
 801fea8:	681b      	ldr	r3, [r3, #0]
 801feaa:	0011      	movs	r1, r2
 801feac:	0018      	movs	r0, r3
 801feae:	f7e2 f927 	bl	8002100 <strcmp>
 801feb2:	1e03      	subs	r3, r0, #0
 801feb4:	d001      	beq.n	801feba <http_process_handler+0x562>
 801feb6:	f001 f9f8 	bl	80212aa <http_process_handler+0x1952>
		{
			// IF SAVE BUTTON IS PRESSED
			if (!strcmp((char *)uri_name, "IP"))
 801feba:	4ad0      	ldr	r2, [pc, #832]	; (80201fc <http_process_handler+0x8a4>)
 801febc:	238b      	movs	r3, #139	; 0x8b
 801febe:	011b      	lsls	r3, r3, #4
 801fec0:	2130      	movs	r1, #48	; 0x30
 801fec2:	185b      	adds	r3, r3, r1
 801fec4:	2108      	movs	r1, #8
 801fec6:	468c      	mov	ip, r1
 801fec8:	2108      	movs	r1, #8
 801feca:	4688      	mov	r8, r1
 801fecc:	44b8      	add	r8, r7
 801fece:	44c4      	add	ip, r8
 801fed0:	4463      	add	r3, ip
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	0011      	movs	r1, r2
 801fed6:	0018      	movs	r0, r3
 801fed8:	f7e2 f912 	bl	8002100 <strcmp>
 801fedc:	1e03      	subs	r3, r0, #0
 801fede:	d000      	beq.n	801fee2 <http_process_handler+0x58a>
 801fee0:	e165      	b.n	80201ae <http_process_handler+0x856>
			{
				memset(&pcb_config, 0, sizeof(pcb_config));
 801fee2:	23b6      	movs	r3, #182	; 0xb6
 801fee4:	005a      	lsls	r2, r3, #1
 801fee6:	4bc8      	ldr	r3, [pc, #800]	; (8020208 <http_process_handler+0x8b0>)
 801fee8:	2100      	movs	r1, #0
 801feea:	0018      	movs	r0, r3
 801feec:	f002 fe54 	bl	8022b98 <memset>
				pcb_config.MagicNumber[0] = 0xDD;
 801fef0:	4bc5      	ldr	r3, [pc, #788]	; (8020208 <http_process_handler+0x8b0>)
 801fef2:	22dd      	movs	r2, #221	; 0xdd
 801fef4:	701a      	strb	r2, [r3, #0]
				pcb_config.MagicNumber[1] = 0x55;
 801fef6:	4bc4      	ldr	r3, [pc, #784]	; (8020208 <http_process_handler+0x8b0>)
 801fef8:	2255      	movs	r2, #85	; 0x55
 801fefa:	705a      	strb	r2, [r3, #1]
				pcb_config.MagicNumber[2] = MAGIC;
 801fefc:	4bc2      	ldr	r3, [pc, #776]	; (8020208 <http_process_handler+0x8b0>)
 801fefe:	22dc      	movs	r2, #220	; 0xdc
 801ff00:	709a      	strb	r2, [r3, #2]
				pcb_config.MagicNumber[3] = 0x11;
 801ff02:	4bc1      	ldr	r3, [pc, #772]	; (8020208 <http_process_handler+0x8b0>)
 801ff04:	2211      	movs	r2, #17
 801ff06:	70da      	strb	r2, [r3, #3]
				pcb_config.rs232nbcharsON[0] = (char)(strlen(sSetRS232ON) / 2);	  // NB chars on
 801ff08:	4bc0      	ldr	r3, [pc, #768]	; (802020c <http_process_handler+0x8b4>)
 801ff0a:	0018      	movs	r0, r3
 801ff0c:	f7e2 f902 	bl	8002114 <strlen>
 801ff10:	0003      	movs	r3, r0
 801ff12:	085b      	lsrs	r3, r3, #1
 801ff14:	b2d9      	uxtb	r1, r3
 801ff16:	4bbc      	ldr	r3, [pc, #752]	; (8020208 <http_process_handler+0x8b0>)
 801ff18:	22f4      	movs	r2, #244	; 0xf4
 801ff1a:	5499      	strb	r1, [r3, r2]
				pcb_config.rs232nbcharsOFF[0] = (char)(strlen(sSetRS232OFF) / 2); // NB chars off
 801ff1c:	4bbc      	ldr	r3, [pc, #752]	; (8020210 <http_process_handler+0x8b8>)
 801ff1e:	0018      	movs	r0, r3
 801ff20:	f7e2 f8f8 	bl	8002114 <strlen>
 801ff24:	0003      	movs	r3, r0
 801ff26:	085b      	lsrs	r3, r3, #1
 801ff28:	b2d9      	uxtb	r1, r3
 801ff2a:	4bb7      	ldr	r3, [pc, #732]	; (8020208 <http_process_handler+0x8b0>)
 801ff2c:	22f6      	movs	r2, #246	; 0xf6
 801ff2e:	5499      	strb	r1, [r3, r2]

				memcpy(pcb_config.sSetIR, sSetIRON, sizeof(sSetIRON));							 // IR ON COMMAND
 801ff30:	4bb5      	ldr	r3, [pc, #724]	; (8020208 <http_process_handler+0x8b0>)
 801ff32:	4ab8      	ldr	r2, [pc, #736]	; (8020214 <http_process_handler+0x8bc>)
 801ff34:	3304      	adds	r3, #4
 801ff36:	0011      	movs	r1, r2
 801ff38:	220f      	movs	r2, #15
 801ff3a:	0018      	movs	r0, r3
 801ff3c:	f003 fd14 	bl	8023968 <memcpy>
				memcpy(pcb_config.sSetIROFF, sSetIROFF, sizeof(sSetIROFF));						 // IR OFF COMMAND
 801ff40:	4bb1      	ldr	r3, [pc, #708]	; (8020208 <http_process_handler+0x8b0>)
 801ff42:	2213      	movs	r2, #19
 801ff44:	49b4      	ldr	r1, [pc, #720]	; (8020218 <http_process_handler+0x8c0>)
 801ff46:	189b      	adds	r3, r3, r2
 801ff48:	220f      	movs	r2, #15
 801ff4a:	0018      	movs	r0, r3
 801ff4c:	f003 fd0c 	bl	8023968 <memcpy>
				memcpy(pcb_config.sSetTempTreshMin, sSetTempTreshMin, sizeof(sSetTempTreshMin)); // TEMP Min TRESHOLD
 801ff50:	4bad      	ldr	r3, [pc, #692]	; (8020208 <http_process_handler+0x8b0>)
 801ff52:	22a2      	movs	r2, #162	; 0xa2
 801ff54:	49b1      	ldr	r1, [pc, #708]	; (802021c <http_process_handler+0x8c4>)
 801ff56:	189b      	adds	r3, r3, r2
 801ff58:	2207      	movs	r2, #7
 801ff5a:	0018      	movs	r0, r3
 801ff5c:	f003 fd04 	bl	8023968 <memcpy>
				memcpy(pcb_config.sSetTempTreshMax, sSetTempTreshMax, sizeof(sSetTempTreshMax)); // TEMP Max TRESHOLD
 801ff60:	4ba9      	ldr	r3, [pc, #676]	; (8020208 <http_process_handler+0x8b0>)
 801ff62:	22ac      	movs	r2, #172	; 0xac
 801ff64:	49ae      	ldr	r1, [pc, #696]	; (8020220 <http_process_handler+0x8c8>)
 801ff66:	189b      	adds	r3, r3, r2
 801ff68:	2207      	movs	r2, #7
 801ff6a:	0018      	movs	r0, r3
 801ff6c:	f003 fcfc 	bl	8023968 <memcpy>
				memcpy(pcb_config.sSetR2S9COFF, sSetRS232OFF, sizeof(sSetRS232OFF));			 // RS232 OFF COMMAND
 801ff70:	4ba5      	ldr	r3, [pc, #660]	; (8020208 <http_process_handler+0x8b0>)
 801ff72:	2262      	movs	r2, #98	; 0x62
 801ff74:	49a6      	ldr	r1, [pc, #664]	; (8020210 <http_process_handler+0x8b8>)
 801ff76:	189b      	adds	r3, r3, r2
 801ff78:	2240      	movs	r2, #64	; 0x40
 801ff7a:	0018      	movs	r0, r3
 801ff7c:	f003 fcf4 	bl	8023968 <memcpy>
				memcpy(pcb_config.sSetR2S9C, sSetRS232ON, sizeof(sSetRS232ON));					 // RS232 COMMAND
 801ff80:	4ba1      	ldr	r3, [pc, #644]	; (8020208 <http_process_handler+0x8b0>)
 801ff82:	2222      	movs	r2, #34	; 0x22
 801ff84:	49a1      	ldr	r1, [pc, #644]	; (802020c <http_process_handler+0x8b4>)
 801ff86:	189b      	adds	r3, r3, r2
 801ff88:	2240      	movs	r2, #64	; 0x40
 801ff8a:	0018      	movs	r0, r3
 801ff8c:	f003 fcec 	bl	8023968 <memcpy>

				pcb_config.sSetTempON[0] = sSetTempON[0];
 801ff90:	4ba4      	ldr	r3, [pc, #656]	; (8020224 <http_process_handler+0x8cc>)
 801ff92:	7819      	ldrb	r1, [r3, #0]
 801ff94:	4b9c      	ldr	r3, [pc, #624]	; (8020208 <http_process_handler+0x8b0>)
 801ff96:	22b6      	movs	r2, #182	; 0xb6
 801ff98:	5499      	strb	r1, [r3, r2]
				pcb_config.sSetIRON[0] = sSetPIRON[0];
 801ff9a:	4ba3      	ldr	r3, [pc, #652]	; (8020228 <http_process_handler+0x8d0>)
 801ff9c:	7819      	ldrb	r1, [r3, #0]
 801ff9e:	4b9a      	ldr	r3, [pc, #616]	; (8020208 <http_process_handler+0x8b0>)
 801ffa0:	22de      	movs	r2, #222	; 0xde
 801ffa2:	5499      	strb	r1, [r3, r2]
				pcb_config.sSetPIRON[0] = sSetPIRON[0];
 801ffa4:	4ba0      	ldr	r3, [pc, #640]	; (8020228 <http_process_handler+0x8d0>)
 801ffa6:	7819      	ldrb	r1, [r3, #0]
 801ffa8:	4b97      	ldr	r3, [pc, #604]	; (8020208 <http_process_handler+0x8b0>)
 801ffaa:	22c0      	movs	r2, #192	; 0xc0
 801ffac:	5499      	strb	r1, [r3, r2]

				if (sPIRDelayON[0] == '0' && sPIRDelayON[1] == '0' && sPIRDelayON[2] == '0')
 801ffae:	4b9f      	ldr	r3, [pc, #636]	; (802022c <http_process_handler+0x8d4>)
 801ffb0:	781b      	ldrb	r3, [r3, #0]
 801ffb2:	2b30      	cmp	r3, #48	; 0x30
 801ffb4:	d10d      	bne.n	801ffd2 <http_process_handler+0x67a>
 801ffb6:	4b9d      	ldr	r3, [pc, #628]	; (802022c <http_process_handler+0x8d4>)
 801ffb8:	785b      	ldrb	r3, [r3, #1]
 801ffba:	2b30      	cmp	r3, #48	; 0x30
 801ffbc:	d109      	bne.n	801ffd2 <http_process_handler+0x67a>
 801ffbe:	4b9b      	ldr	r3, [pc, #620]	; (802022c <http_process_handler+0x8d4>)
 801ffc0:	789b      	ldrb	r3, [r3, #2]
 801ffc2:	2b30      	cmp	r3, #48	; 0x30
 801ffc4:	d105      	bne.n	801ffd2 <http_process_handler+0x67a>
				{
					sPIRDelayON[2] = '1';
 801ffc6:	4b99      	ldr	r3, [pc, #612]	; (802022c <http_process_handler+0x8d4>)
 801ffc8:	2231      	movs	r2, #49	; 0x31
 801ffca:	709a      	strb	r2, [r3, #2]
					sPIRDelayON[3] = '0';
 801ffcc:	4b97      	ldr	r3, [pc, #604]	; (802022c <http_process_handler+0x8d4>)
 801ffce:	2230      	movs	r2, #48	; 0x30
 801ffd0:	70da      	strb	r2, [r3, #3]
				}
				if (sPIRDelayOFF[0] == '0' && sPIRDelayOFF[1] == '0' && sPIRDelayOFF[2] == '0')
 801ffd2:	4b97      	ldr	r3, [pc, #604]	; (8020230 <http_process_handler+0x8d8>)
 801ffd4:	781b      	ldrb	r3, [r3, #0]
 801ffd6:	2b30      	cmp	r3, #48	; 0x30
 801ffd8:	d10d      	bne.n	801fff6 <http_process_handler+0x69e>
 801ffda:	4b95      	ldr	r3, [pc, #596]	; (8020230 <http_process_handler+0x8d8>)
 801ffdc:	785b      	ldrb	r3, [r3, #1]
 801ffde:	2b30      	cmp	r3, #48	; 0x30
 801ffe0:	d109      	bne.n	801fff6 <http_process_handler+0x69e>
 801ffe2:	4b93      	ldr	r3, [pc, #588]	; (8020230 <http_process_handler+0x8d8>)
 801ffe4:	789b      	ldrb	r3, [r3, #2]
 801ffe6:	2b30      	cmp	r3, #48	; 0x30
 801ffe8:	d105      	bne.n	801fff6 <http_process_handler+0x69e>
				{
					sPIRDelayOFF[2] = '1';
 801ffea:	4b91      	ldr	r3, [pc, #580]	; (8020230 <http_process_handler+0x8d8>)
 801ffec:	2231      	movs	r2, #49	; 0x31
 801ffee:	709a      	strb	r2, [r3, #2]
					sPIRDelayOFF[3] = '0';
 801fff0:	4b8f      	ldr	r3, [pc, #572]	; (8020230 <http_process_handler+0x8d8>)
 801fff2:	2230      	movs	r2, #48	; 0x30
 801fff4:	70da      	strb	r2, [r3, #3]
				}
				memcpy(pcb_config.sPIRDelayON, sPIRDelayON, sizeof(sPIRDelayON));	 // PIR delay ON
 801fff6:	4b84      	ldr	r3, [pc, #528]	; (8020208 <http_process_handler+0x8b0>)
 801fff8:	22ca      	movs	r2, #202	; 0xca
 801fffa:	498c      	ldr	r1, [pc, #560]	; (802022c <http_process_handler+0x8d4>)
 801fffc:	189b      	adds	r3, r3, r2
 801fffe:	220a      	movs	r2, #10
 8020000:	0018      	movs	r0, r3
 8020002:	f003 fcb1 	bl	8023968 <memcpy>
				memcpy(pcb_config.sPIRDelayOFF, sPIRDelayOFF, sizeof(sPIRDelayOFF)); // PIR delay OFF
 8020006:	4b80      	ldr	r3, [pc, #512]	; (8020208 <http_process_handler+0x8b0>)
 8020008:	22d4      	movs	r2, #212	; 0xd4
 802000a:	4989      	ldr	r1, [pc, #548]	; (8020230 <http_process_handler+0x8d8>)
 802000c:	189b      	adds	r3, r3, r2
 802000e:	2206      	movs	r2, #6
 8020010:	0018      	movs	r0, r3
 8020012:	f003 fca9 	bl	8023968 <memcpy>

				tvtype[0] = tv + '0';
 8020016:	4b87      	ldr	r3, [pc, #540]	; (8020234 <http_process_handler+0x8dc>)
 8020018:	781b      	ldrb	r3, [r3, #0]
 802001a:	3330      	adds	r3, #48	; 0x30
 802001c:	b2da      	uxtb	r2, r3
 802001e:	4b86      	ldr	r3, [pc, #536]	; (8020238 <http_process_handler+0x8e0>)
 8020020:	701a      	strb	r2, [r3, #0]
				memcpy(pcb_config.tvtype, tvtype, 2); // tv type = samsung, lg etc
 8020022:	4b79      	ldr	r3, [pc, #484]	; (8020208 <http_process_handler+0x8b0>)
 8020024:	22f2      	movs	r2, #242	; 0xf2
 8020026:	4984      	ldr	r1, [pc, #528]	; (8020238 <http_process_handler+0x8e0>)
 8020028:	189b      	adds	r3, r3, r2
 802002a:	2202      	movs	r2, #2
 802002c:	0018      	movs	r0, r3
 802002e:	f003 fc9b 	bl	8023968 <memcpy>

				memcpy(pcb_config.rs1, rs1, 6); // Baudrate setting 1
 8020032:	4b75      	ldr	r3, [pc, #468]	; (8020208 <http_process_handler+0x8b0>)
 8020034:	22f8      	movs	r2, #248	; 0xf8
 8020036:	4981      	ldr	r1, [pc, #516]	; (802023c <http_process_handler+0x8e4>)
 8020038:	189b      	adds	r3, r3, r2
 802003a:	2206      	movs	r2, #6
 802003c:	0018      	movs	r0, r3
 802003e:	f003 fc93 	bl	8023968 <memcpy>
				memcpy(pcb_config.rs2, rs2, 2); // Baudrate setting 2
 8020042:	4b71      	ldr	r3, [pc, #452]	; (8020208 <http_process_handler+0x8b0>)
 8020044:	22fe      	movs	r2, #254	; 0xfe
 8020046:	497e      	ldr	r1, [pc, #504]	; (8020240 <http_process_handler+0x8e8>)
 8020048:	189b      	adds	r3, r3, r2
 802004a:	2202      	movs	r2, #2
 802004c:	0018      	movs	r0, r3
 802004e:	f003 fc8b 	bl	8023968 <memcpy>
				memcpy(pcb_config.rs3, rs3, 2); // Baudrate setting 3
 8020052:	4a6d      	ldr	r2, [pc, #436]	; (8020208 <http_process_handler+0x8b0>)
 8020054:	2380      	movs	r3, #128	; 0x80
 8020056:	005b      	lsls	r3, r3, #1
 8020058:	497a      	ldr	r1, [pc, #488]	; (8020244 <http_process_handler+0x8ec>)
 802005a:	18d3      	adds	r3, r2, r3
 802005c:	2202      	movs	r2, #2
 802005e:	0018      	movs	r0, r3
 8020060:	f003 fc82 	bl	8023968 <memcpy>

				pcb_config.loopon = loopon;
 8020064:	4b78      	ldr	r3, [pc, #480]	; (8020248 <http_process_handler+0x8f0>)
 8020066:	7819      	ldrb	r1, [r3, #0]
 8020068:	4a67      	ldr	r2, [pc, #412]	; (8020208 <http_process_handler+0x8b0>)
 802006a:	2381      	movs	r3, #129	; 0x81
 802006c:	005b      	lsls	r3, r3, #1
 802006e:	54d1      	strb	r1, [r2, r3]
				pcb_config.loopoff = loopoff;
 8020070:	4b76      	ldr	r3, [pc, #472]	; (802024c <http_process_handler+0x8f4>)
 8020072:	7819      	ldrb	r1, [r3, #0]
 8020074:	4a64      	ldr	r2, [pc, #400]	; (8020208 <http_process_handler+0x8b0>)
 8020076:	2304      	movs	r3, #4
 8020078:	33ff      	adds	r3, #255	; 0xff
 802007a:	54d1      	strb	r1, [r2, r3]
				pcb_config.looptime = looptime;
 802007c:	4b74      	ldr	r3, [pc, #464]	; (8020250 <http_process_handler+0x8f8>)
 802007e:	7819      	ldrb	r1, [r3, #0]
 8020080:	4a61      	ldr	r2, [pc, #388]	; (8020208 <http_process_handler+0x8b0>)
 8020082:	2382      	movs	r3, #130	; 0x82
 8020084:	005b      	lsls	r3, r3, #1
 8020086:	54d1      	strb	r1, [r2, r3]

				memcpy(&pcb_config.mac, &gWIZNETINFO.mac, 6);
 8020088:	4a5f      	ldr	r2, [pc, #380]	; (8020208 <http_process_handler+0x8b0>)
 802008a:	2306      	movs	r3, #6
 802008c:	33ff      	adds	r3, #255	; 0xff
 802008e:	4971      	ldr	r1, [pc, #452]	; (8020254 <http_process_handler+0x8fc>)
 8020090:	18d3      	adds	r3, r2, r3
 8020092:	2206      	movs	r2, #6
 8020094:	0018      	movs	r0, r3
 8020096:	f003 fc67 	bl	8023968 <memcpy>
				memcpy(&pcb_config.dns, &gWIZNETINFO.dns, 4);
 802009a:	495b      	ldr	r1, [pc, #364]	; (8020208 <http_process_handler+0x8b0>)
 802009c:	2318      	movs	r3, #24
 802009e:	33ff      	adds	r3, #255	; 0xff
 80200a0:	001a      	movs	r2, r3
 80200a2:	4b6c      	ldr	r3, [pc, #432]	; (8020254 <http_process_handler+0x8fc>)
 80200a4:	2412      	movs	r4, #18
 80200a6:	1888      	adds	r0, r1, r2
 80200a8:	191b      	adds	r3, r3, r4
 80200aa:	2204      	movs	r2, #4
 80200ac:	0019      	movs	r1, r3
 80200ae:	f003 fc5b 	bl	8023968 <memcpy>
				memcpy(&pcb_config.gw, &gWIZNETINFO.gw, 4);
 80200b2:	4955      	ldr	r1, [pc, #340]	; (8020208 <http_process_handler+0x8b0>)
 80200b4:	2314      	movs	r3, #20
 80200b6:	33ff      	adds	r3, #255	; 0xff
 80200b8:	001a      	movs	r2, r3
 80200ba:	4b66      	ldr	r3, [pc, #408]	; (8020254 <http_process_handler+0x8fc>)
 80200bc:	240e      	movs	r4, #14
 80200be:	1888      	adds	r0, r1, r2
 80200c0:	191b      	adds	r3, r3, r4
 80200c2:	2204      	movs	r2, #4
 80200c4:	0019      	movs	r1, r3
 80200c6:	f003 fc4f 	bl	8023968 <memcpy>
				memcpy(&pcb_config.ip, &gWIZNETINFO.ip, 4);
 80200ca:	494f      	ldr	r1, [pc, #316]	; (8020208 <http_process_handler+0x8b0>)
 80200cc:	230c      	movs	r3, #12
 80200ce:	33ff      	adds	r3, #255	; 0xff
 80200d0:	001a      	movs	r2, r3
 80200d2:	4b60      	ldr	r3, [pc, #384]	; (8020254 <http_process_handler+0x8fc>)
 80200d4:	2406      	movs	r4, #6
 80200d6:	1888      	adds	r0, r1, r2
 80200d8:	191b      	adds	r3, r3, r4
 80200da:	2204      	movs	r2, #4
 80200dc:	0019      	movs	r1, r3
 80200de:	f003 fc43 	bl	8023968 <memcpy>
				memcpy(&pcb_config.sn, &gWIZNETINFO.sn, 4);
 80200e2:	4949      	ldr	r1, [pc, #292]	; (8020208 <http_process_handler+0x8b0>)
 80200e4:	2310      	movs	r3, #16
 80200e6:	33ff      	adds	r3, #255	; 0xff
 80200e8:	001a      	movs	r2, r3
 80200ea:	4b5a      	ldr	r3, [pc, #360]	; (8020254 <http_process_handler+0x8fc>)
 80200ec:	240a      	movs	r4, #10
 80200ee:	1888      	adds	r0, r1, r2
 80200f0:	191b      	adds	r3, r3, r4
 80200f2:	2204      	movs	r2, #4
 80200f4:	0019      	movs	r1, r3
 80200f6:	f003 fc37 	bl	8023968 <memcpy>
 80200fa:	4b56      	ldr	r3, [pc, #344]	; (8020254 <http_process_handler+0x8fc>)
 80200fc:	7d99      	ldrb	r1, [r3, #22]
				memcpy(&pcb_config.dhcp, &gWIZNETINFO.dhcp, 1);
 80200fe:	4a42      	ldr	r2, [pc, #264]	; (8020208 <http_process_handler+0x8b0>)
 8020100:	231c      	movs	r3, #28
 8020102:	33ff      	adds	r3, #255	; 0xff
 8020104:	54d1      	strb	r1, [r2, r3]

				pcb_config.pcb_config_onSwitch = onSwitch;
 8020106:	4b54      	ldr	r3, [pc, #336]	; (8020258 <http_process_handler+0x900>)
 8020108:	7819      	ldrb	r1, [r3, #0]
 802010a:	4a3f      	ldr	r2, [pc, #252]	; (8020208 <http_process_handler+0x8b0>)
 802010c:	238e      	movs	r3, #142	; 0x8e
 802010e:	005b      	lsls	r3, r3, #1
 8020110:	54d1      	strb	r1, [r2, r3]
				pcb_config.pcb_config_onDateTime = onDateTime;
 8020112:	4b52      	ldr	r3, [pc, #328]	; (802025c <http_process_handler+0x904>)
 8020114:	6819      	ldr	r1, [r3, #0]
 8020116:	4a3c      	ldr	r2, [pc, #240]	; (8020208 <http_process_handler+0x8b0>)
 8020118:	2390      	movs	r3, #144	; 0x90
 802011a:	005b      	lsls	r3, r3, #1
 802011c:	50d1      	str	r1, [r2, r3]
				pcb_config.pcb_config_offSwitch = offSwitch;
 802011e:	4b50      	ldr	r3, [pc, #320]	; (8020260 <http_process_handler+0x908>)
 8020120:	7819      	ldrb	r1, [r3, #0]
 8020122:	4a39      	ldr	r2, [pc, #228]	; (8020208 <http_process_handler+0x8b0>)
 8020124:	2392      	movs	r3, #146	; 0x92
 8020126:	005b      	lsls	r3, r3, #1
 8020128:	54d1      	strb	r1, [r2, r3]
				pcb_config.pcb_config_offDateTime = offDateTime;
 802012a:	4b4e      	ldr	r3, [pc, #312]	; (8020264 <http_process_handler+0x90c>)
 802012c:	6819      	ldr	r1, [r3, #0]
 802012e:	4a36      	ldr	r2, [pc, #216]	; (8020208 <http_process_handler+0x8b0>)
 8020130:	2394      	movs	r3, #148	; 0x94
 8020132:	005b      	lsls	r3, r3, #1
 8020134:	50d1      	str	r1, [r2, r3]
				pcb_config.pcb_config_timezone = timezone;
 8020136:	4b4c      	ldr	r3, [pc, #304]	; (8020268 <http_process_handler+0x910>)
 8020138:	7819      	ldrb	r1, [r3, #0]
 802013a:	4a33      	ldr	r2, [pc, #204]	; (8020208 <http_process_handler+0x8b0>)
 802013c:	2396      	movs	r3, #150	; 0x96
 802013e:	005b      	lsls	r3, r3, #1
 8020140:	54d1      	strb	r1, [r2, r3]
				pcb_config.pcb_config_time_alarm_on_hh = time_alarm_on_hh;
 8020142:	4b4a      	ldr	r3, [pc, #296]	; (802026c <http_process_handler+0x914>)
 8020144:	7819      	ldrb	r1, [r3, #0]
 8020146:	4a30      	ldr	r2, [pc, #192]	; (8020208 <http_process_handler+0x8b0>)
 8020148:	23b4      	movs	r3, #180	; 0xb4
 802014a:	005b      	lsls	r3, r3, #1
 802014c:	54d1      	strb	r1, [r2, r3]
				pcb_config.pcb_config_time_alarm_on_mm = time_alarm_on_mm;
 802014e:	4b48      	ldr	r3, [pc, #288]	; (8020270 <http_process_handler+0x918>)
 8020150:	7819      	ldrb	r1, [r3, #0]
 8020152:	4a2d      	ldr	r2, [pc, #180]	; (8020208 <http_process_handler+0x8b0>)
 8020154:	236a      	movs	r3, #106	; 0x6a
 8020156:	33ff      	adds	r3, #255	; 0xff
 8020158:	54d1      	strb	r1, [r2, r3]
				pcb_config.pcb_config_time_alarm_off_hh = time_alarm_off_hh;
 802015a:	4b46      	ldr	r3, [pc, #280]	; (8020274 <http_process_handler+0x91c>)
 802015c:	7819      	ldrb	r1, [r3, #0]
 802015e:	4a2a      	ldr	r2, [pc, #168]	; (8020208 <http_process_handler+0x8b0>)
 8020160:	23b5      	movs	r3, #181	; 0xb5
 8020162:	005b      	lsls	r3, r3, #1
 8020164:	54d1      	strb	r1, [r2, r3]
				pcb_config.pcb_config_time_alarm_off_mm = time_alarm_off_mm;
 8020166:	4b44      	ldr	r3, [pc, #272]	; (8020278 <http_process_handler+0x920>)
 8020168:	7819      	ldrb	r1, [r3, #0]
 802016a:	4a27      	ldr	r2, [pc, #156]	; (8020208 <http_process_handler+0x8b0>)
 802016c:	236c      	movs	r3, #108	; 0x6c
 802016e:	33ff      	adds	r3, #255	; 0xff
 8020170:	54d1      	strb	r1, [r2, r3]
				memcpy(pcb_config.pcb_config_Recursion_Alarm_ON, Recursion_Alarm_ON, sizeof(pcb_config.pcb_config_Recursion_Alarm_ON));
 8020172:	4a25      	ldr	r2, [pc, #148]	; (8020208 <http_process_handler+0x8b0>)
 8020174:	2398      	movs	r3, #152	; 0x98
 8020176:	005b      	lsls	r3, r3, #1
 8020178:	4940      	ldr	r1, [pc, #256]	; (802027c <http_process_handler+0x924>)
 802017a:	18d3      	adds	r3, r2, r3
 802017c:	000a      	movs	r2, r1
 802017e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020180:	c313      	stmia	r3!, {r0, r1, r4}
 8020182:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020184:	c313      	stmia	r3!, {r0, r1, r4}
 8020186:	6812      	ldr	r2, [r2, #0]
 8020188:	601a      	str	r2, [r3, #0]
				memcpy(pcb_config.pcb_config_Recursion_Alarm_OFF, Recursion_Alarm_OFF, sizeof(pcb_config.pcb_config_Recursion_Alarm_OFF));
 802018a:	4a1f      	ldr	r2, [pc, #124]	; (8020208 <http_process_handler+0x8b0>)
 802018c:	23a6      	movs	r3, #166	; 0xa6
 802018e:	005b      	lsls	r3, r3, #1
 8020190:	493b      	ldr	r1, [pc, #236]	; (8020280 <http_process_handler+0x928>)
 8020192:	18d3      	adds	r3, r2, r3
 8020194:	000a      	movs	r2, r1
 8020196:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020198:	c313      	stmia	r3!, {r0, r1, r4}
 802019a:	ca13      	ldmia	r2!, {r0, r1, r4}
 802019c:	c313      	stmia	r3!, {r0, r1, r4}
 802019e:	6812      	ldr	r2, [r2, #0]
 80201a0:	601a      	str	r2, [r3, #0]

				WriteToEeprom();
 80201a2:	f7e9 fd2f 	bl	8009c04 <WriteToEeprom>
				Calculate_Temperatures_Offsets();
 80201a6:	f7e9 fc9f 	bl	8009ae8 <Calculate_Temperatures_Offsets>
				ResetLoopProcess();
 80201aa:	f7e8 fdd3 	bl	8008d54 <ResetLoopProcess>
			}

			uint8_t result[100];
			int dVal, dec, i;
			temperature_farenheit += 0.005; // added after a comment from Matt McNabb, see below.
 80201ae:	4b35      	ldr	r3, [pc, #212]	; (8020284 <http_process_handler+0x92c>)
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	1c18      	adds	r0, r3, #0
 80201b4:	f7e4 fca4 	bl	8004b00 <__aeabi_f2d>
 80201b8:	4a33      	ldr	r2, [pc, #204]	; (8020288 <http_process_handler+0x930>)
 80201ba:	4b34      	ldr	r3, [pc, #208]	; (802028c <http_process_handler+0x934>)
 80201bc:	f7e2 ffe8 	bl	8003190 <__aeabi_dadd>
 80201c0:	0002      	movs	r2, r0
 80201c2:	000b      	movs	r3, r1
 80201c4:	0010      	movs	r0, r2
 80201c6:	0019      	movs	r1, r3
 80201c8:	f7e4 fce2 	bl	8004b90 <__aeabi_d2f>
 80201cc:	1c02      	adds	r2, r0, #0
 80201ce:	4b2d      	ldr	r3, [pc, #180]	; (8020284 <http_process_handler+0x92c>)
 80201d0:	601a      	str	r2, [r3, #0]

			dVal = temperature_farenheit;
 80201d2:	4b2c      	ldr	r3, [pc, #176]	; (8020284 <http_process_handler+0x92c>)
 80201d4:	681b      	ldr	r3, [r3, #0]
 80201d6:	1c18      	adds	r0, r3, #0
 80201d8:	f7e2 ff72 	bl	80030c0 <__aeabi_f2iz>
 80201dc:	0003      	movs	r3, r0
 80201de:	4a2c      	ldr	r2, [pc, #176]	; (8020290 <http_process_handler+0x938>)
 80201e0:	2630      	movs	r6, #48	; 0x30
 80201e2:	1992      	adds	r2, r2, r6
 80201e4:	2108      	movs	r1, #8
 80201e6:	468c      	mov	ip, r1
 80201e8:	2108      	movs	r1, #8
 80201ea:	4688      	mov	r8, r1
 80201ec:	44b8      	add	r8, r7
 80201ee:	44c4      	add	ip, r8
 80201f0:	4462      	add	r2, ip
 80201f2:	6013      	str	r3, [r2, #0]
 80201f4:	e04e      	b.n	8020294 <http_process_handler+0x93c>
 80201f6:	46c0      	nop			; (mov r8, r8)
 80201f8:	080317d4 	.word	0x080317d4
 80201fc:	080317dc 	.word	0x080317dc
 8020200:	080317e0 	.word	0x080317e0
 8020204:	080317e8 	.word	0x080317e8
 8020208:	20006db4 	.word	0x20006db4
 802020c:	20007d34 	.word	0x20007d34
 8020210:	20007cb0 	.word	0x20007cb0
 8020214:	20007d24 	.word	0x20007d24
 8020218:	20007ca0 	.word	0x20007ca0
 802021c:	20007cf0 	.word	0x20007cf0
 8020220:	20007cf8 	.word	0x20007cf8
 8020224:	20007d00 	.word	0x20007d00
 8020228:	20007d08 	.word	0x20007d08
 802022c:	20007d10 	.word	0x20007d10
 8020230:	20007d1c 	.word	0x20007d1c
 8020234:	20007da3 	.word	0x20007da3
 8020238:	20007d74 	.word	0x20007d74
 802023c:	20007d8c 	.word	0x20007d8c
 8020240:	20007d94 	.word	0x20007d94
 8020244:	20007d9c 	.word	0x20007d9c
 8020248:	20007e10 	.word	0x20007e10
 802024c:	20007e11 	.word	0x20007e11
 8020250:	20007e12 	.word	0x20007e12
 8020254:	2000627c 	.word	0x2000627c
 8020258:	2000522c 	.word	0x2000522c
 802025c:	20005230 	.word	0x20005230
 8020260:	20005234 	.word	0x20005234
 8020264:	20005238 	.word	0x20005238
 8020268:	2000523c 	.word	0x2000523c
 802026c:	20006700 	.word	0x20006700
 8020270:	20006701 	.word	0x20006701
 8020274:	20006702 	.word	0x20006702
 8020278:	20006703 	.word	0x20006703
 802027c:	20005240 	.word	0x20005240
 8020280:	2000525c 	.word	0x2000525c
 8020284:	20006d58 	.word	0x20006d58
 8020288:	47ae147b 	.word	0x47ae147b
 802028c:	3f747ae1 	.word	0x3f747ae1
 8020290:	000008f4 	.word	0x000008f4
			dec = (int)(temperature_farenheit * 100) % 100;
 8020294:	4be7      	ldr	r3, [pc, #924]	; (8020634 <http_process_handler+0xcdc>)
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	49e7      	ldr	r1, [pc, #924]	; (8020638 <http_process_handler+0xce0>)
 802029a:	1c18      	adds	r0, r3, #0
 802029c:	f7e2 fdc2 	bl	8002e24 <__aeabi_fmul>
 80202a0:	1c03      	adds	r3, r0, #0
 80202a2:	1c18      	adds	r0, r3, #0
 80202a4:	f7e2 ff0c 	bl	80030c0 <__aeabi_f2iz>
 80202a8:	0003      	movs	r3, r0
 80202aa:	2164      	movs	r1, #100	; 0x64
 80202ac:	0018      	movs	r0, r3
 80202ae:	f7e2 f8b3 	bl	8002418 <__aeabi_idivmod>
 80202b2:	000b      	movs	r3, r1
 80202b4:	4ce1      	ldr	r4, [pc, #900]	; (802063c <http_process_handler+0xce4>)
 80202b6:	19a2      	adds	r2, r4, r6
 80202b8:	2108      	movs	r1, #8
 80202ba:	468c      	mov	ip, r1
 80202bc:	2108      	movs	r1, #8
 80202be:	4688      	mov	r8, r1
 80202c0:	44b8      	add	r8, r7
 80202c2:	44c4      	add	ip, r8
 80202c4:	4462      	add	r2, ip
 80202c6:	6013      	str	r3, [r2, #0]

			memset(result, 0, 100);
 80202c8:	2308      	movs	r3, #8
 80202ca:	199b      	adds	r3, r3, r6
 80202cc:	2208      	movs	r2, #8
 80202ce:	4694      	mov	ip, r2
 80202d0:	2208      	movs	r2, #8
 80202d2:	4690      	mov	r8, r2
 80202d4:	44b8      	add	r8, r7
 80202d6:	44c4      	add	ip, r8
 80202d8:	4463      	add	r3, ip
 80202da:	2264      	movs	r2, #100	; 0x64
 80202dc:	2100      	movs	r1, #0
 80202de:	0018      	movs	r0, r3
 80202e0:	f002 fc5a 	bl	8022b98 <memset>
			result[4] = (dec % 10) + '0';
 80202e4:	19a3      	adds	r3, r4, r6
 80202e6:	2208      	movs	r2, #8
 80202e8:	4694      	mov	ip, r2
 80202ea:	2208      	movs	r2, #8
 80202ec:	4690      	mov	r8, r2
 80202ee:	44b8      	add	r8, r7
 80202f0:	44c4      	add	ip, r8
 80202f2:	4463      	add	r3, ip
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	210a      	movs	r1, #10
 80202f8:	0018      	movs	r0, r3
 80202fa:	f7e2 f88d 	bl	8002418 <__aeabi_idivmod>
 80202fe:	000b      	movs	r3, r1
 8020300:	b2db      	uxtb	r3, r3
 8020302:	3330      	adds	r3, #48	; 0x30
 8020304:	b2da      	uxtb	r2, r3
 8020306:	4bce      	ldr	r3, [pc, #824]	; (8020640 <http_process_handler+0xce8>)
 8020308:	2590      	movs	r5, #144	; 0x90
 802030a:	012d      	lsls	r5, r5, #4
 802030c:	195b      	adds	r3, r3, r5
 802030e:	2130      	movs	r1, #48	; 0x30
 8020310:	468c      	mov	ip, r1
 8020312:	2108      	movs	r1, #8
 8020314:	4688      	mov	r8, r1
 8020316:	2108      	movs	r1, #8
 8020318:	4689      	mov	r9, r1
 802031a:	44b9      	add	r9, r7
 802031c:	44c8      	add	r8, r9
 802031e:	44c4      	add	ip, r8
 8020320:	4463      	add	r3, ip
 8020322:	711a      	strb	r2, [r3, #4]
			result[3] = (dec / 10) + '0';
 8020324:	19a3      	adds	r3, r4, r6
 8020326:	2208      	movs	r2, #8
 8020328:	4694      	mov	ip, r2
 802032a:	2208      	movs	r2, #8
 802032c:	4690      	mov	r8, r2
 802032e:	44b8      	add	r8, r7
 8020330:	44c4      	add	ip, r8
 8020332:	4463      	add	r3, ip
 8020334:	681b      	ldr	r3, [r3, #0]
 8020336:	210a      	movs	r1, #10
 8020338:	0018      	movs	r0, r3
 802033a:	f7e1 ff87 	bl	800224c <__divsi3>
 802033e:	0003      	movs	r3, r0
 8020340:	b2db      	uxtb	r3, r3
 8020342:	3330      	adds	r3, #48	; 0x30
 8020344:	b2da      	uxtb	r2, r3
 8020346:	4bbe      	ldr	r3, [pc, #760]	; (8020640 <http_process_handler+0xce8>)
 8020348:	195b      	adds	r3, r3, r5
 802034a:	2130      	movs	r1, #48	; 0x30
 802034c:	468c      	mov	ip, r1
 802034e:	2108      	movs	r1, #8
 8020350:	4688      	mov	r8, r1
 8020352:	2108      	movs	r1, #8
 8020354:	4689      	mov	r9, r1
 8020356:	44b9      	add	r9, r7
 8020358:	44c8      	add	r8, r9
 802035a:	44c4      	add	ip, r8
 802035c:	4463      	add	r3, ip
 802035e:	70da      	strb	r2, [r3, #3]
			result[2] = '.';
 8020360:	4bb7      	ldr	r3, [pc, #732]	; (8020640 <http_process_handler+0xce8>)
 8020362:	195b      	adds	r3, r3, r5
 8020364:	2230      	movs	r2, #48	; 0x30
 8020366:	4694      	mov	ip, r2
 8020368:	2208      	movs	r2, #8
 802036a:	4690      	mov	r8, r2
 802036c:	2208      	movs	r2, #8
 802036e:	4691      	mov	r9, r2
 8020370:	44b9      	add	r9, r7
 8020372:	44c8      	add	r8, r9
 8020374:	44c4      	add	ip, r8
 8020376:	4463      	add	r3, ip
 8020378:	222e      	movs	r2, #46	; 0x2e
 802037a:	709a      	strb	r2, [r3, #2]

			i = 1;
 802037c:	2301      	movs	r3, #1
 802037e:	228f      	movs	r2, #143	; 0x8f
 8020380:	0112      	lsls	r2, r2, #4
 8020382:	1992      	adds	r2, r2, r6
 8020384:	2108      	movs	r1, #8
 8020386:	468c      	mov	ip, r1
 8020388:	2108      	movs	r1, #8
 802038a:	4688      	mov	r8, r1
 802038c:	44b8      	add	r8, r7
 802038e:	44c4      	add	ip, r8
 8020390:	4462      	add	r2, ip
 8020392:	6013      	str	r3, [r2, #0]
			while (dVal > 0)
 8020394:	e058      	b.n	8020448 <http_process_handler+0xaf0>
			{
				result[i] = (dVal % 10) + '0';
 8020396:	4cab      	ldr	r4, [pc, #684]	; (8020644 <http_process_handler+0xcec>)
 8020398:	2530      	movs	r5, #48	; 0x30
 802039a:	1963      	adds	r3, r4, r5
 802039c:	2208      	movs	r2, #8
 802039e:	4694      	mov	ip, r2
 80203a0:	2208      	movs	r2, #8
 80203a2:	4690      	mov	r8, r2
 80203a4:	44b8      	add	r8, r7
 80203a6:	44c4      	add	ip, r8
 80203a8:	4463      	add	r3, ip
 80203aa:	681b      	ldr	r3, [r3, #0]
 80203ac:	210a      	movs	r1, #10
 80203ae:	0018      	movs	r0, r3
 80203b0:	f7e2 f832 	bl	8002418 <__aeabi_idivmod>
 80203b4:	000b      	movs	r3, r1
 80203b6:	b2db      	uxtb	r3, r3
 80203b8:	3330      	adds	r3, #48	; 0x30
 80203ba:	b2d9      	uxtb	r1, r3
 80203bc:	4ba0      	ldr	r3, [pc, #640]	; (8020640 <http_process_handler+0xce8>)
 80203be:	2290      	movs	r2, #144	; 0x90
 80203c0:	0112      	lsls	r2, r2, #4
 80203c2:	189b      	adds	r3, r3, r2
 80203c4:	0028      	movs	r0, r5
 80203c6:	2208      	movs	r2, #8
 80203c8:	1882      	adds	r2, r0, r2
 80203ca:	2508      	movs	r5, #8
 80203cc:	46ac      	mov	ip, r5
 80203ce:	44bc      	add	ip, r7
 80203d0:	4462      	add	r2, ip
 80203d2:	189a      	adds	r2, r3, r2
 80203d4:	258f      	movs	r5, #143	; 0x8f
 80203d6:	012d      	lsls	r5, r5, #4
 80203d8:	182b      	adds	r3, r5, r0
 80203da:	2608      	movs	r6, #8
 80203dc:	46b4      	mov	ip, r6
 80203de:	2608      	movs	r6, #8
 80203e0:	46b0      	mov	r8, r6
 80203e2:	44b8      	add	r8, r7
 80203e4:	44c4      	add	ip, r8
 80203e6:	4463      	add	r3, ip
 80203e8:	681b      	ldr	r3, [r3, #0]
 80203ea:	18d3      	adds	r3, r2, r3
 80203ec:	1c0a      	adds	r2, r1, #0
 80203ee:	701a      	strb	r2, [r3, #0]
				dVal /= 10;
 80203f0:	0006      	movs	r6, r0
 80203f2:	1823      	adds	r3, r4, r0
 80203f4:	2208      	movs	r2, #8
 80203f6:	4694      	mov	ip, r2
 80203f8:	2208      	movs	r2, #8
 80203fa:	4690      	mov	r8, r2
 80203fc:	44b8      	add	r8, r7
 80203fe:	44c4      	add	ip, r8
 8020400:	4463      	add	r3, ip
 8020402:	681b      	ldr	r3, [r3, #0]
 8020404:	210a      	movs	r1, #10
 8020406:	0018      	movs	r0, r3
 8020408:	f7e1 ff20 	bl	800224c <__divsi3>
 802040c:	0003      	movs	r3, r0
 802040e:	0030      	movs	r0, r6
 8020410:	1822      	adds	r2, r4, r0
 8020412:	2108      	movs	r1, #8
 8020414:	468c      	mov	ip, r1
 8020416:	2108      	movs	r1, #8
 8020418:	4688      	mov	r8, r1
 802041a:	44b8      	add	r8, r7
 802041c:	44c4      	add	ip, r8
 802041e:	4462      	add	r2, ip
 8020420:	6013      	str	r3, [r2, #0]
				i--;
 8020422:	182b      	adds	r3, r5, r0
 8020424:	2208      	movs	r2, #8
 8020426:	4694      	mov	ip, r2
 8020428:	2208      	movs	r2, #8
 802042a:	4690      	mov	r8, r2
 802042c:	44b8      	add	r8, r7
 802042e:	44c4      	add	ip, r8
 8020430:	4463      	add	r3, ip
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	3b01      	subs	r3, #1
 8020436:	182a      	adds	r2, r5, r0
 8020438:	2108      	movs	r1, #8
 802043a:	468c      	mov	ip, r1
 802043c:	2108      	movs	r1, #8
 802043e:	4688      	mov	r8, r1
 8020440:	44b8      	add	r8, r7
 8020442:	44c4      	add	ip, r8
 8020444:	4462      	add	r2, ip
 8020446:	6013      	str	r3, [r2, #0]
			while (dVal > 0)
 8020448:	4b7e      	ldr	r3, [pc, #504]	; (8020644 <http_process_handler+0xcec>)
 802044a:	2130      	movs	r1, #48	; 0x30
 802044c:	185b      	adds	r3, r3, r1
 802044e:	2208      	movs	r2, #8
 8020450:	4694      	mov	ip, r2
 8020452:	2208      	movs	r2, #8
 8020454:	4690      	mov	r8, r2
 8020456:	44b8      	add	r8, r7
 8020458:	44c4      	add	ip, r8
 802045a:	4463      	add	r3, ip
 802045c:	681b      	ldr	r3, [r3, #0]
 802045e:	2b00      	cmp	r3, #0
 8020460:	dc99      	bgt.n	8020396 <http_process_handler+0xa3e>
			}

			for (int i = 0; i < NB_CHARS_RS232; i++)
 8020462:	2300      	movs	r3, #0
 8020464:	4a78      	ldr	r2, [pc, #480]	; (8020648 <http_process_handler+0xcf0>)
 8020466:	1852      	adds	r2, r2, r1
 8020468:	2108      	movs	r1, #8
 802046a:	468c      	mov	ip, r1
 802046c:	2108      	movs	r1, #8
 802046e:	4688      	mov	r8, r1
 8020470:	44b8      	add	r8, r7
 8020472:	44c4      	add	ip, r8
 8020474:	4462      	add	r2, ip
 8020476:	6013      	str	r3, [r2, #0]
 8020478:	e02f      	b.n	80204da <http_process_handler+0xb82>
				sSetRS232ON[i] = pcb_config.sSetR2S9C[i];
 802047a:	4a74      	ldr	r2, [pc, #464]	; (802064c <http_process_handler+0xcf4>)
 802047c:	2122      	movs	r1, #34	; 0x22
 802047e:	4872      	ldr	r0, [pc, #456]	; (8020648 <http_process_handler+0xcf0>)
 8020480:	2430      	movs	r4, #48	; 0x30
 8020482:	1903      	adds	r3, r0, r4
 8020484:	2508      	movs	r5, #8
 8020486:	46ac      	mov	ip, r5
 8020488:	2508      	movs	r5, #8
 802048a:	46a8      	mov	r8, r5
 802048c:	44b8      	add	r8, r7
 802048e:	44c4      	add	ip, r8
 8020490:	4463      	add	r3, ip
 8020492:	681b      	ldr	r3, [r3, #0]
 8020494:	18d3      	adds	r3, r2, r3
 8020496:	185b      	adds	r3, r3, r1
 8020498:	7819      	ldrb	r1, [r3, #0]
 802049a:	4a6d      	ldr	r2, [pc, #436]	; (8020650 <http_process_handler+0xcf8>)
 802049c:	1903      	adds	r3, r0, r4
 802049e:	2508      	movs	r5, #8
 80204a0:	46ac      	mov	ip, r5
 80204a2:	2508      	movs	r5, #8
 80204a4:	46a8      	mov	r8, r5
 80204a6:	44b8      	add	r8, r7
 80204a8:	44c4      	add	ip, r8
 80204aa:	4463      	add	r3, ip
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	18d3      	adds	r3, r2, r3
 80204b0:	1c0a      	adds	r2, r1, #0
 80204b2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < NB_CHARS_RS232; i++)
 80204b4:	1903      	adds	r3, r0, r4
 80204b6:	2208      	movs	r2, #8
 80204b8:	4694      	mov	ip, r2
 80204ba:	2208      	movs	r2, #8
 80204bc:	4690      	mov	r8, r2
 80204be:	44b8      	add	r8, r7
 80204c0:	44c4      	add	ip, r8
 80204c2:	4463      	add	r3, ip
 80204c4:	681b      	ldr	r3, [r3, #0]
 80204c6:	3301      	adds	r3, #1
 80204c8:	1902      	adds	r2, r0, r4
 80204ca:	2108      	movs	r1, #8
 80204cc:	468c      	mov	ip, r1
 80204ce:	2108      	movs	r1, #8
 80204d0:	4688      	mov	r8, r1
 80204d2:	44b8      	add	r8, r7
 80204d4:	44c4      	add	ip, r8
 80204d6:	4462      	add	r2, ip
 80204d8:	6013      	str	r3, [r2, #0]
 80204da:	4b5b      	ldr	r3, [pc, #364]	; (8020648 <http_process_handler+0xcf0>)
 80204dc:	2130      	movs	r1, #48	; 0x30
 80204de:	185b      	adds	r3, r3, r1
 80204e0:	2208      	movs	r2, #8
 80204e2:	4694      	mov	ip, r2
 80204e4:	2208      	movs	r2, #8
 80204e6:	4690      	mov	r8, r2
 80204e8:	44b8      	add	r8, r7
 80204ea:	44c4      	add	ip, r8
 80204ec:	4463      	add	r3, ip
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	2b3f      	cmp	r3, #63	; 0x3f
 80204f2:	ddc2      	ble.n	802047a <http_process_handler+0xb22>
			for (int i = 0; i < NB_CHARS_RS232; i++)
 80204f4:	2300      	movs	r3, #0
 80204f6:	4a57      	ldr	r2, [pc, #348]	; (8020654 <http_process_handler+0xcfc>)
 80204f8:	1852      	adds	r2, r2, r1
 80204fa:	2108      	movs	r1, #8
 80204fc:	468c      	mov	ip, r1
 80204fe:	2108      	movs	r1, #8
 8020500:	4688      	mov	r8, r1
 8020502:	44b8      	add	r8, r7
 8020504:	44c4      	add	ip, r8
 8020506:	4462      	add	r2, ip
 8020508:	6013      	str	r3, [r2, #0]
 802050a:	e02f      	b.n	802056c <http_process_handler+0xc14>
				sSetRS232OFF[i] = pcb_config.sSetR2S9COFF[i];
 802050c:	4a4f      	ldr	r2, [pc, #316]	; (802064c <http_process_handler+0xcf4>)
 802050e:	2162      	movs	r1, #98	; 0x62
 8020510:	4850      	ldr	r0, [pc, #320]	; (8020654 <http_process_handler+0xcfc>)
 8020512:	2430      	movs	r4, #48	; 0x30
 8020514:	1903      	adds	r3, r0, r4
 8020516:	2508      	movs	r5, #8
 8020518:	46ac      	mov	ip, r5
 802051a:	2508      	movs	r5, #8
 802051c:	46a8      	mov	r8, r5
 802051e:	44b8      	add	r8, r7
 8020520:	44c4      	add	ip, r8
 8020522:	4463      	add	r3, ip
 8020524:	681b      	ldr	r3, [r3, #0]
 8020526:	18d3      	adds	r3, r2, r3
 8020528:	185b      	adds	r3, r3, r1
 802052a:	7819      	ldrb	r1, [r3, #0]
 802052c:	4a4a      	ldr	r2, [pc, #296]	; (8020658 <http_process_handler+0xd00>)
 802052e:	1903      	adds	r3, r0, r4
 8020530:	2508      	movs	r5, #8
 8020532:	46ac      	mov	ip, r5
 8020534:	2508      	movs	r5, #8
 8020536:	46a8      	mov	r8, r5
 8020538:	44b8      	add	r8, r7
 802053a:	44c4      	add	ip, r8
 802053c:	4463      	add	r3, ip
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	18d3      	adds	r3, r2, r3
 8020542:	1c0a      	adds	r2, r1, #0
 8020544:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < NB_CHARS_RS232; i++)
 8020546:	1903      	adds	r3, r0, r4
 8020548:	2208      	movs	r2, #8
 802054a:	4694      	mov	ip, r2
 802054c:	2208      	movs	r2, #8
 802054e:	4690      	mov	r8, r2
 8020550:	44b8      	add	r8, r7
 8020552:	44c4      	add	ip, r8
 8020554:	4463      	add	r3, ip
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	3301      	adds	r3, #1
 802055a:	1902      	adds	r2, r0, r4
 802055c:	2108      	movs	r1, #8
 802055e:	468c      	mov	ip, r1
 8020560:	2108      	movs	r1, #8
 8020562:	4688      	mov	r8, r1
 8020564:	44b8      	add	r8, r7
 8020566:	44c4      	add	ip, r8
 8020568:	4462      	add	r2, ip
 802056a:	6013      	str	r3, [r2, #0]
 802056c:	4b39      	ldr	r3, [pc, #228]	; (8020654 <http_process_handler+0xcfc>)
 802056e:	2130      	movs	r1, #48	; 0x30
 8020570:	185b      	adds	r3, r3, r1
 8020572:	2208      	movs	r2, #8
 8020574:	4694      	mov	ip, r2
 8020576:	2208      	movs	r2, #8
 8020578:	4690      	mov	r8, r2
 802057a:	44b8      	add	r8, r7
 802057c:	44c4      	add	ip, r8
 802057e:	4463      	add	r3, ip
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	2b3f      	cmp	r3, #63	; 0x3f
 8020584:	ddc2      	ble.n	802050c <http_process_handler+0xbb4>

			for (int i = 0; i < 7; i++)
 8020586:	2300      	movs	r3, #0
 8020588:	4a34      	ldr	r2, [pc, #208]	; (802065c <http_process_handler+0xd04>)
 802058a:	1852      	adds	r2, r2, r1
 802058c:	2108      	movs	r1, #8
 802058e:	468c      	mov	ip, r1
 8020590:	2108      	movs	r1, #8
 8020592:	4688      	mov	r8, r1
 8020594:	44b8      	add	r8, r7
 8020596:	44c4      	add	ip, r8
 8020598:	4462      	add	r2, ip
 802059a:	6013      	str	r3, [r2, #0]
 802059c:	e02f      	b.n	80205fe <http_process_handler+0xca6>
				sSetTempTreshMin[i] = pcb_config.sSetTempTreshMin[i];
 802059e:	4a2b      	ldr	r2, [pc, #172]	; (802064c <http_process_handler+0xcf4>)
 80205a0:	21a2      	movs	r1, #162	; 0xa2
 80205a2:	482e      	ldr	r0, [pc, #184]	; (802065c <http_process_handler+0xd04>)
 80205a4:	2430      	movs	r4, #48	; 0x30
 80205a6:	1903      	adds	r3, r0, r4
 80205a8:	2508      	movs	r5, #8
 80205aa:	46ac      	mov	ip, r5
 80205ac:	2508      	movs	r5, #8
 80205ae:	46a8      	mov	r8, r5
 80205b0:	44b8      	add	r8, r7
 80205b2:	44c4      	add	ip, r8
 80205b4:	4463      	add	r3, ip
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	18d3      	adds	r3, r2, r3
 80205ba:	185b      	adds	r3, r3, r1
 80205bc:	7819      	ldrb	r1, [r3, #0]
 80205be:	4a28      	ldr	r2, [pc, #160]	; (8020660 <http_process_handler+0xd08>)
 80205c0:	1903      	adds	r3, r0, r4
 80205c2:	2508      	movs	r5, #8
 80205c4:	46ac      	mov	ip, r5
 80205c6:	2508      	movs	r5, #8
 80205c8:	46a8      	mov	r8, r5
 80205ca:	44b8      	add	r8, r7
 80205cc:	44c4      	add	ip, r8
 80205ce:	4463      	add	r3, ip
 80205d0:	681b      	ldr	r3, [r3, #0]
 80205d2:	18d3      	adds	r3, r2, r3
 80205d4:	1c0a      	adds	r2, r1, #0
 80205d6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++)
 80205d8:	1903      	adds	r3, r0, r4
 80205da:	2208      	movs	r2, #8
 80205dc:	4694      	mov	ip, r2
 80205de:	2208      	movs	r2, #8
 80205e0:	4690      	mov	r8, r2
 80205e2:	44b8      	add	r8, r7
 80205e4:	44c4      	add	ip, r8
 80205e6:	4463      	add	r3, ip
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	3301      	adds	r3, #1
 80205ec:	1902      	adds	r2, r0, r4
 80205ee:	2108      	movs	r1, #8
 80205f0:	468c      	mov	ip, r1
 80205f2:	2108      	movs	r1, #8
 80205f4:	4688      	mov	r8, r1
 80205f6:	44b8      	add	r8, r7
 80205f8:	44c4      	add	ip, r8
 80205fa:	4462      	add	r2, ip
 80205fc:	6013      	str	r3, [r2, #0]
 80205fe:	4b17      	ldr	r3, [pc, #92]	; (802065c <http_process_handler+0xd04>)
 8020600:	2130      	movs	r1, #48	; 0x30
 8020602:	185b      	adds	r3, r3, r1
 8020604:	2208      	movs	r2, #8
 8020606:	4694      	mov	ip, r2
 8020608:	2208      	movs	r2, #8
 802060a:	4690      	mov	r8, r2
 802060c:	44b8      	add	r8, r7
 802060e:	44c4      	add	ip, r8
 8020610:	4463      	add	r3, ip
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	2b06      	cmp	r3, #6
 8020616:	ddc2      	ble.n	802059e <http_process_handler+0xc46>
			for (int i = 0; i < 7; i++)
 8020618:	2300      	movs	r3, #0
 802061a:	228e      	movs	r2, #142	; 0x8e
 802061c:	0112      	lsls	r2, r2, #4
 802061e:	1852      	adds	r2, r2, r1
 8020620:	2108      	movs	r1, #8
 8020622:	468c      	mov	ip, r1
 8020624:	2108      	movs	r1, #8
 8020626:	4688      	mov	r8, r1
 8020628:	44b8      	add	r8, r7
 802062a:	44c4      	add	ip, r8
 802062c:	4462      	add	r2, ip
 802062e:	6013      	str	r3, [r2, #0]
 8020630:	e049      	b.n	80206c6 <http_process_handler+0xd6e>
 8020632:	46c0      	nop			; (mov r8, r8)
 8020634:	20006d58 	.word	0x20006d58
 8020638:	42c80000 	.word	0x42c80000
 802063c:	000008ac 	.word	0x000008ac
 8020640:	fffff708 	.word	0xfffff708
 8020644:	000008f4 	.word	0x000008f4
 8020648:	000008ec 	.word	0x000008ec
 802064c:	20006db4 	.word	0x20006db4
 8020650:	20007d34 	.word	0x20007d34
 8020654:	000008e8 	.word	0x000008e8
 8020658:	20007cb0 	.word	0x20007cb0
 802065c:	000008e4 	.word	0x000008e4
 8020660:	20007cf0 	.word	0x20007cf0
				sSetTempTreshMax[i] = pcb_config.sSetTempTreshMax[i];
 8020664:	4adc      	ldr	r2, [pc, #880]	; (80209d8 <http_process_handler+0x1080>)
 8020666:	21ac      	movs	r1, #172	; 0xac
 8020668:	208e      	movs	r0, #142	; 0x8e
 802066a:	0100      	lsls	r0, r0, #4
 802066c:	2430      	movs	r4, #48	; 0x30
 802066e:	1903      	adds	r3, r0, r4
 8020670:	2508      	movs	r5, #8
 8020672:	46ac      	mov	ip, r5
 8020674:	2508      	movs	r5, #8
 8020676:	46a8      	mov	r8, r5
 8020678:	44b8      	add	r8, r7
 802067a:	44c4      	add	ip, r8
 802067c:	4463      	add	r3, ip
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	18d3      	adds	r3, r2, r3
 8020682:	185b      	adds	r3, r3, r1
 8020684:	7819      	ldrb	r1, [r3, #0]
 8020686:	4ad5      	ldr	r2, [pc, #852]	; (80209dc <http_process_handler+0x1084>)
 8020688:	1903      	adds	r3, r0, r4
 802068a:	2508      	movs	r5, #8
 802068c:	46ac      	mov	ip, r5
 802068e:	2508      	movs	r5, #8
 8020690:	46a8      	mov	r8, r5
 8020692:	44b8      	add	r8, r7
 8020694:	44c4      	add	ip, r8
 8020696:	4463      	add	r3, ip
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	18d3      	adds	r3, r2, r3
 802069c:	1c0a      	adds	r2, r1, #0
 802069e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++)
 80206a0:	1903      	adds	r3, r0, r4
 80206a2:	2208      	movs	r2, #8
 80206a4:	4694      	mov	ip, r2
 80206a6:	2208      	movs	r2, #8
 80206a8:	4690      	mov	r8, r2
 80206aa:	44b8      	add	r8, r7
 80206ac:	44c4      	add	ip, r8
 80206ae:	4463      	add	r3, ip
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	3301      	adds	r3, #1
 80206b4:	1902      	adds	r2, r0, r4
 80206b6:	2108      	movs	r1, #8
 80206b8:	468c      	mov	ip, r1
 80206ba:	2108      	movs	r1, #8
 80206bc:	4688      	mov	r8, r1
 80206be:	44b8      	add	r8, r7
 80206c0:	44c4      	add	ip, r8
 80206c2:	4462      	add	r2, ip
 80206c4:	6013      	str	r3, [r2, #0]
 80206c6:	238e      	movs	r3, #142	; 0x8e
 80206c8:	011b      	lsls	r3, r3, #4
 80206ca:	2130      	movs	r1, #48	; 0x30
 80206cc:	185b      	adds	r3, r3, r1
 80206ce:	2208      	movs	r2, #8
 80206d0:	4694      	mov	ip, r2
 80206d2:	2208      	movs	r2, #8
 80206d4:	4690      	mov	r8, r2
 80206d6:	44b8      	add	r8, r7
 80206d8:	44c4      	add	ip, r8
 80206da:	4463      	add	r3, ip
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	2b06      	cmp	r3, #6
 80206e0:	ddc0      	ble.n	8020664 <http_process_handler+0xd0c>

			for (int i = 0; i < 7; i++)
 80206e2:	2300      	movs	r3, #0
 80206e4:	4abe      	ldr	r2, [pc, #760]	; (80209e0 <http_process_handler+0x1088>)
 80206e6:	1852      	adds	r2, r2, r1
 80206e8:	2108      	movs	r1, #8
 80206ea:	468c      	mov	ip, r1
 80206ec:	2108      	movs	r1, #8
 80206ee:	4688      	mov	r8, r1
 80206f0:	44b8      	add	r8, r7
 80206f2:	44c4      	add	ip, r8
 80206f4:	4462      	add	r2, ip
 80206f6:	6013      	str	r3, [r2, #0]
 80206f8:	e02f      	b.n	802075a <http_process_handler+0xe02>
				sSetTempON[i] = pcb_config.sSetTempON[i];
 80206fa:	4ab7      	ldr	r2, [pc, #732]	; (80209d8 <http_process_handler+0x1080>)
 80206fc:	21b6      	movs	r1, #182	; 0xb6
 80206fe:	48b8      	ldr	r0, [pc, #736]	; (80209e0 <http_process_handler+0x1088>)
 8020700:	2430      	movs	r4, #48	; 0x30
 8020702:	1903      	adds	r3, r0, r4
 8020704:	2508      	movs	r5, #8
 8020706:	46ac      	mov	ip, r5
 8020708:	2508      	movs	r5, #8
 802070a:	46a8      	mov	r8, r5
 802070c:	44b8      	add	r8, r7
 802070e:	44c4      	add	ip, r8
 8020710:	4463      	add	r3, ip
 8020712:	681b      	ldr	r3, [r3, #0]
 8020714:	18d3      	adds	r3, r2, r3
 8020716:	185b      	adds	r3, r3, r1
 8020718:	7819      	ldrb	r1, [r3, #0]
 802071a:	4ab2      	ldr	r2, [pc, #712]	; (80209e4 <http_process_handler+0x108c>)
 802071c:	1903      	adds	r3, r0, r4
 802071e:	2508      	movs	r5, #8
 8020720:	46ac      	mov	ip, r5
 8020722:	2508      	movs	r5, #8
 8020724:	46a8      	mov	r8, r5
 8020726:	44b8      	add	r8, r7
 8020728:	44c4      	add	ip, r8
 802072a:	4463      	add	r3, ip
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	18d3      	adds	r3, r2, r3
 8020730:	1c0a      	adds	r2, r1, #0
 8020732:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++)
 8020734:	1903      	adds	r3, r0, r4
 8020736:	2208      	movs	r2, #8
 8020738:	4694      	mov	ip, r2
 802073a:	2208      	movs	r2, #8
 802073c:	4690      	mov	r8, r2
 802073e:	44b8      	add	r8, r7
 8020740:	44c4      	add	ip, r8
 8020742:	4463      	add	r3, ip
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	3301      	adds	r3, #1
 8020748:	1902      	adds	r2, r0, r4
 802074a:	2108      	movs	r1, #8
 802074c:	468c      	mov	ip, r1
 802074e:	2108      	movs	r1, #8
 8020750:	4688      	mov	r8, r1
 8020752:	44b8      	add	r8, r7
 8020754:	44c4      	add	ip, r8
 8020756:	4462      	add	r2, ip
 8020758:	6013      	str	r3, [r2, #0]
 802075a:	4ba1      	ldr	r3, [pc, #644]	; (80209e0 <http_process_handler+0x1088>)
 802075c:	2130      	movs	r1, #48	; 0x30
 802075e:	185b      	adds	r3, r3, r1
 8020760:	2208      	movs	r2, #8
 8020762:	4694      	mov	ip, r2
 8020764:	2208      	movs	r2, #8
 8020766:	4690      	mov	r8, r2
 8020768:	44b8      	add	r8, r7
 802076a:	44c4      	add	ip, r8
 802076c:	4463      	add	r3, ip
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	2b06      	cmp	r3, #6
 8020772:	ddc2      	ble.n	80206fa <http_process_handler+0xda2>
			for (int i = 0; i < 7; i++)
 8020774:	2300      	movs	r3, #0
 8020776:	4a9c      	ldr	r2, [pc, #624]	; (80209e8 <http_process_handler+0x1090>)
 8020778:	1852      	adds	r2, r2, r1
 802077a:	2108      	movs	r1, #8
 802077c:	468c      	mov	ip, r1
 802077e:	2108      	movs	r1, #8
 8020780:	4688      	mov	r8, r1
 8020782:	44b8      	add	r8, r7
 8020784:	44c4      	add	ip, r8
 8020786:	4462      	add	r2, ip
 8020788:	6013      	str	r3, [r2, #0]
 802078a:	e02f      	b.n	80207ec <http_process_handler+0xe94>
				sSetPIRON[i] = pcb_config.sSetPIRON[i];
 802078c:	4a92      	ldr	r2, [pc, #584]	; (80209d8 <http_process_handler+0x1080>)
 802078e:	21c0      	movs	r1, #192	; 0xc0
 8020790:	4895      	ldr	r0, [pc, #596]	; (80209e8 <http_process_handler+0x1090>)
 8020792:	2430      	movs	r4, #48	; 0x30
 8020794:	1903      	adds	r3, r0, r4
 8020796:	2508      	movs	r5, #8
 8020798:	46ac      	mov	ip, r5
 802079a:	2508      	movs	r5, #8
 802079c:	46a8      	mov	r8, r5
 802079e:	44b8      	add	r8, r7
 80207a0:	44c4      	add	ip, r8
 80207a2:	4463      	add	r3, ip
 80207a4:	681b      	ldr	r3, [r3, #0]
 80207a6:	18d3      	adds	r3, r2, r3
 80207a8:	185b      	adds	r3, r3, r1
 80207aa:	7819      	ldrb	r1, [r3, #0]
 80207ac:	4a8f      	ldr	r2, [pc, #572]	; (80209ec <http_process_handler+0x1094>)
 80207ae:	1903      	adds	r3, r0, r4
 80207b0:	2508      	movs	r5, #8
 80207b2:	46ac      	mov	ip, r5
 80207b4:	2508      	movs	r5, #8
 80207b6:	46a8      	mov	r8, r5
 80207b8:	44b8      	add	r8, r7
 80207ba:	44c4      	add	ip, r8
 80207bc:	4463      	add	r3, ip
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	18d3      	adds	r3, r2, r3
 80207c2:	1c0a      	adds	r2, r1, #0
 80207c4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++)
 80207c6:	1903      	adds	r3, r0, r4
 80207c8:	2208      	movs	r2, #8
 80207ca:	4694      	mov	ip, r2
 80207cc:	2208      	movs	r2, #8
 80207ce:	4690      	mov	r8, r2
 80207d0:	44b8      	add	r8, r7
 80207d2:	44c4      	add	ip, r8
 80207d4:	4463      	add	r3, ip
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	3301      	adds	r3, #1
 80207da:	1902      	adds	r2, r0, r4
 80207dc:	2108      	movs	r1, #8
 80207de:	468c      	mov	ip, r1
 80207e0:	2108      	movs	r1, #8
 80207e2:	4688      	mov	r8, r1
 80207e4:	44b8      	add	r8, r7
 80207e6:	44c4      	add	ip, r8
 80207e8:	4462      	add	r2, ip
 80207ea:	6013      	str	r3, [r2, #0]
 80207ec:	4b7e      	ldr	r3, [pc, #504]	; (80209e8 <http_process_handler+0x1090>)
 80207ee:	2130      	movs	r1, #48	; 0x30
 80207f0:	185b      	adds	r3, r3, r1
 80207f2:	2208      	movs	r2, #8
 80207f4:	4694      	mov	ip, r2
 80207f6:	2208      	movs	r2, #8
 80207f8:	4690      	mov	r8, r2
 80207fa:	44b8      	add	r8, r7
 80207fc:	44c4      	add	ip, r8
 80207fe:	4463      	add	r3, ip
 8020800:	681b      	ldr	r3, [r3, #0]
 8020802:	2b06      	cmp	r3, #6
 8020804:	ddc2      	ble.n	802078c <http_process_handler+0xe34>

			for (int i = 0; i < 10; i++)
 8020806:	2300      	movs	r3, #0
 8020808:	4a79      	ldr	r2, [pc, #484]	; (80209f0 <http_process_handler+0x1098>)
 802080a:	1852      	adds	r2, r2, r1
 802080c:	2108      	movs	r1, #8
 802080e:	468c      	mov	ip, r1
 8020810:	2108      	movs	r1, #8
 8020812:	4688      	mov	r8, r1
 8020814:	44b8      	add	r8, r7
 8020816:	44c4      	add	ip, r8
 8020818:	4462      	add	r2, ip
 802081a:	6013      	str	r3, [r2, #0]
 802081c:	e02f      	b.n	802087e <http_process_handler+0xf26>
				sPIRDelayON[i] = pcb_config.sPIRDelayON[i];
 802081e:	4a6e      	ldr	r2, [pc, #440]	; (80209d8 <http_process_handler+0x1080>)
 8020820:	21ca      	movs	r1, #202	; 0xca
 8020822:	4873      	ldr	r0, [pc, #460]	; (80209f0 <http_process_handler+0x1098>)
 8020824:	2430      	movs	r4, #48	; 0x30
 8020826:	1903      	adds	r3, r0, r4
 8020828:	2508      	movs	r5, #8
 802082a:	46ac      	mov	ip, r5
 802082c:	2508      	movs	r5, #8
 802082e:	46a8      	mov	r8, r5
 8020830:	44b8      	add	r8, r7
 8020832:	44c4      	add	ip, r8
 8020834:	4463      	add	r3, ip
 8020836:	681b      	ldr	r3, [r3, #0]
 8020838:	18d3      	adds	r3, r2, r3
 802083a:	185b      	adds	r3, r3, r1
 802083c:	7819      	ldrb	r1, [r3, #0]
 802083e:	4a6d      	ldr	r2, [pc, #436]	; (80209f4 <http_process_handler+0x109c>)
 8020840:	1903      	adds	r3, r0, r4
 8020842:	2508      	movs	r5, #8
 8020844:	46ac      	mov	ip, r5
 8020846:	2508      	movs	r5, #8
 8020848:	46a8      	mov	r8, r5
 802084a:	44b8      	add	r8, r7
 802084c:	44c4      	add	ip, r8
 802084e:	4463      	add	r3, ip
 8020850:	681b      	ldr	r3, [r3, #0]
 8020852:	18d3      	adds	r3, r2, r3
 8020854:	1c0a      	adds	r2, r1, #0
 8020856:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 10; i++)
 8020858:	1903      	adds	r3, r0, r4
 802085a:	2208      	movs	r2, #8
 802085c:	4694      	mov	ip, r2
 802085e:	2208      	movs	r2, #8
 8020860:	4690      	mov	r8, r2
 8020862:	44b8      	add	r8, r7
 8020864:	44c4      	add	ip, r8
 8020866:	4463      	add	r3, ip
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	3301      	adds	r3, #1
 802086c:	1902      	adds	r2, r0, r4
 802086e:	2108      	movs	r1, #8
 8020870:	468c      	mov	ip, r1
 8020872:	2108      	movs	r1, #8
 8020874:	4688      	mov	r8, r1
 8020876:	44b8      	add	r8, r7
 8020878:	44c4      	add	ip, r8
 802087a:	4462      	add	r2, ip
 802087c:	6013      	str	r3, [r2, #0]
 802087e:	4b5c      	ldr	r3, [pc, #368]	; (80209f0 <http_process_handler+0x1098>)
 8020880:	2130      	movs	r1, #48	; 0x30
 8020882:	185b      	adds	r3, r3, r1
 8020884:	2208      	movs	r2, #8
 8020886:	4694      	mov	ip, r2
 8020888:	2208      	movs	r2, #8
 802088a:	4690      	mov	r8, r2
 802088c:	44b8      	add	r8, r7
 802088e:	44c4      	add	ip, r8
 8020890:	4463      	add	r3, ip
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	2b09      	cmp	r3, #9
 8020896:	ddc2      	ble.n	802081e <http_process_handler+0xec6>
			for (int i = 0; i < 6; i++)
 8020898:	2300      	movs	r3, #0
 802089a:	228d      	movs	r2, #141	; 0x8d
 802089c:	0112      	lsls	r2, r2, #4
 802089e:	1852      	adds	r2, r2, r1
 80208a0:	2108      	movs	r1, #8
 80208a2:	468c      	mov	ip, r1
 80208a4:	2108      	movs	r1, #8
 80208a6:	4688      	mov	r8, r1
 80208a8:	44b8      	add	r8, r7
 80208aa:	44c4      	add	ip, r8
 80208ac:	4462      	add	r2, ip
 80208ae:	6013      	str	r3, [r2, #0]
 80208b0:	e030      	b.n	8020914 <http_process_handler+0xfbc>
				sPIRDelayOFF[i] = pcb_config.sPIRDelayOFF[i];
 80208b2:	4a49      	ldr	r2, [pc, #292]	; (80209d8 <http_process_handler+0x1080>)
 80208b4:	21d4      	movs	r1, #212	; 0xd4
 80208b6:	208d      	movs	r0, #141	; 0x8d
 80208b8:	0100      	lsls	r0, r0, #4
 80208ba:	2430      	movs	r4, #48	; 0x30
 80208bc:	1903      	adds	r3, r0, r4
 80208be:	2508      	movs	r5, #8
 80208c0:	46ac      	mov	ip, r5
 80208c2:	2508      	movs	r5, #8
 80208c4:	46a8      	mov	r8, r5
 80208c6:	44b8      	add	r8, r7
 80208c8:	44c4      	add	ip, r8
 80208ca:	4463      	add	r3, ip
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	18d3      	adds	r3, r2, r3
 80208d0:	185b      	adds	r3, r3, r1
 80208d2:	7819      	ldrb	r1, [r3, #0]
 80208d4:	4a48      	ldr	r2, [pc, #288]	; (80209f8 <http_process_handler+0x10a0>)
 80208d6:	1903      	adds	r3, r0, r4
 80208d8:	2508      	movs	r5, #8
 80208da:	46ac      	mov	ip, r5
 80208dc:	2508      	movs	r5, #8
 80208de:	46a8      	mov	r8, r5
 80208e0:	44b8      	add	r8, r7
 80208e2:	44c4      	add	ip, r8
 80208e4:	4463      	add	r3, ip
 80208e6:	681b      	ldr	r3, [r3, #0]
 80208e8:	18d3      	adds	r3, r2, r3
 80208ea:	1c0a      	adds	r2, r1, #0
 80208ec:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; i++)
 80208ee:	1903      	adds	r3, r0, r4
 80208f0:	2208      	movs	r2, #8
 80208f2:	4694      	mov	ip, r2
 80208f4:	2208      	movs	r2, #8
 80208f6:	4690      	mov	r8, r2
 80208f8:	44b8      	add	r8, r7
 80208fa:	44c4      	add	ip, r8
 80208fc:	4463      	add	r3, ip
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	3301      	adds	r3, #1
 8020902:	1902      	adds	r2, r0, r4
 8020904:	2108      	movs	r1, #8
 8020906:	468c      	mov	ip, r1
 8020908:	2108      	movs	r1, #8
 802090a:	4688      	mov	r8, r1
 802090c:	44b8      	add	r8, r7
 802090e:	44c4      	add	ip, r8
 8020910:	4462      	add	r2, ip
 8020912:	6013      	str	r3, [r2, #0]
 8020914:	238d      	movs	r3, #141	; 0x8d
 8020916:	011b      	lsls	r3, r3, #4
 8020918:	2130      	movs	r1, #48	; 0x30
 802091a:	185b      	adds	r3, r3, r1
 802091c:	2208      	movs	r2, #8
 802091e:	4694      	mov	ip, r2
 8020920:	2208      	movs	r2, #8
 8020922:	4690      	mov	r8, r2
 8020924:	44b8      	add	r8, r7
 8020926:	44c4      	add	ip, r8
 8020928:	4463      	add	r3, ip
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	2b05      	cmp	r3, #5
 802092e:	ddc0      	ble.n	80208b2 <http_process_handler+0xf5a>

			for (int i = 0; i < 15; i++)
 8020930:	2300      	movs	r3, #0
 8020932:	4a32      	ldr	r2, [pc, #200]	; (80209fc <http_process_handler+0x10a4>)
 8020934:	1852      	adds	r2, r2, r1
 8020936:	2108      	movs	r1, #8
 8020938:	468c      	mov	ip, r1
 802093a:	2108      	movs	r1, #8
 802093c:	4688      	mov	r8, r1
 802093e:	44b8      	add	r8, r7
 8020940:	44c4      	add	ip, r8
 8020942:	4462      	add	r2, ip
 8020944:	6013      	str	r3, [r2, #0]
 8020946:	e02e      	b.n	80209a6 <http_process_handler+0x104e>
				sSetIRON[i] = pcb_config.sSetIR[i];
 8020948:	4a23      	ldr	r2, [pc, #140]	; (80209d8 <http_process_handler+0x1080>)
 802094a:	482c      	ldr	r0, [pc, #176]	; (80209fc <http_process_handler+0x10a4>)
 802094c:	2430      	movs	r4, #48	; 0x30
 802094e:	1903      	adds	r3, r0, r4
 8020950:	2108      	movs	r1, #8
 8020952:	468c      	mov	ip, r1
 8020954:	2108      	movs	r1, #8
 8020956:	4688      	mov	r8, r1
 8020958:	44b8      	add	r8, r7
 802095a:	44c4      	add	ip, r8
 802095c:	4463      	add	r3, ip
 802095e:	681b      	ldr	r3, [r3, #0]
 8020960:	18d3      	adds	r3, r2, r3
 8020962:	3304      	adds	r3, #4
 8020964:	7819      	ldrb	r1, [r3, #0]
 8020966:	4a26      	ldr	r2, [pc, #152]	; (8020a00 <http_process_handler+0x10a8>)
 8020968:	1903      	adds	r3, r0, r4
 802096a:	2508      	movs	r5, #8
 802096c:	46ac      	mov	ip, r5
 802096e:	2508      	movs	r5, #8
 8020970:	46a8      	mov	r8, r5
 8020972:	44b8      	add	r8, r7
 8020974:	44c4      	add	ip, r8
 8020976:	4463      	add	r3, ip
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	18d3      	adds	r3, r2, r3
 802097c:	1c0a      	adds	r2, r1, #0
 802097e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 15; i++)
 8020980:	1903      	adds	r3, r0, r4
 8020982:	2208      	movs	r2, #8
 8020984:	4694      	mov	ip, r2
 8020986:	2208      	movs	r2, #8
 8020988:	4690      	mov	r8, r2
 802098a:	44b8      	add	r8, r7
 802098c:	44c4      	add	ip, r8
 802098e:	4463      	add	r3, ip
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	3301      	adds	r3, #1
 8020994:	1902      	adds	r2, r0, r4
 8020996:	2108      	movs	r1, #8
 8020998:	468c      	mov	ip, r1
 802099a:	2108      	movs	r1, #8
 802099c:	4688      	mov	r8, r1
 802099e:	44b8      	add	r8, r7
 80209a0:	44c4      	add	ip, r8
 80209a2:	4462      	add	r2, ip
 80209a4:	6013      	str	r3, [r2, #0]
 80209a6:	4b15      	ldr	r3, [pc, #84]	; (80209fc <http_process_handler+0x10a4>)
 80209a8:	2130      	movs	r1, #48	; 0x30
 80209aa:	185b      	adds	r3, r3, r1
 80209ac:	2208      	movs	r2, #8
 80209ae:	4694      	mov	ip, r2
 80209b0:	2208      	movs	r2, #8
 80209b2:	4690      	mov	r8, r2
 80209b4:	44b8      	add	r8, r7
 80209b6:	44c4      	add	ip, r8
 80209b8:	4463      	add	r3, ip
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	2b0e      	cmp	r3, #14
 80209be:	ddc3      	ble.n	8020948 <http_process_handler+0xff0>
			for (int i = 0; i < 15; i++)
 80209c0:	2300      	movs	r3, #0
 80209c2:	4a10      	ldr	r2, [pc, #64]	; (8020a04 <http_process_handler+0x10ac>)
 80209c4:	1852      	adds	r2, r2, r1
 80209c6:	2108      	movs	r1, #8
 80209c8:	468c      	mov	ip, r1
 80209ca:	2108      	movs	r1, #8
 80209cc:	4688      	mov	r8, r1
 80209ce:	44b8      	add	r8, r7
 80209d0:	44c4      	add	ip, r8
 80209d2:	4462      	add	r2, ip
 80209d4:	6013      	str	r3, [r2, #0]
 80209d6:	e046      	b.n	8020a66 <http_process_handler+0x110e>
 80209d8:	20006db4 	.word	0x20006db4
 80209dc:	20007cf8 	.word	0x20007cf8
 80209e0:	000008dc 	.word	0x000008dc
 80209e4:	20007d00 	.word	0x20007d00
 80209e8:	000008d8 	.word	0x000008d8
 80209ec:	20007d08 	.word	0x20007d08
 80209f0:	000008d4 	.word	0x000008d4
 80209f4:	20007d10 	.word	0x20007d10
 80209f8:	20007d1c 	.word	0x20007d1c
 80209fc:	000008cc 	.word	0x000008cc
 8020a00:	20007d24 	.word	0x20007d24
 8020a04:	000008c8 	.word	0x000008c8
				sSetIROFF[i] = pcb_config.sSetIROFF[i];
 8020a08:	4aec      	ldr	r2, [pc, #944]	; (8020dbc <http_process_handler+0x1464>)
 8020a0a:	48ed      	ldr	r0, [pc, #948]	; (8020dc0 <http_process_handler+0x1468>)
 8020a0c:	2430      	movs	r4, #48	; 0x30
 8020a0e:	1903      	adds	r3, r0, r4
 8020a10:	2108      	movs	r1, #8
 8020a12:	468c      	mov	ip, r1
 8020a14:	2108      	movs	r1, #8
 8020a16:	4688      	mov	r8, r1
 8020a18:	44b8      	add	r8, r7
 8020a1a:	44c4      	add	ip, r8
 8020a1c:	4463      	add	r3, ip
 8020a1e:	681b      	ldr	r3, [r3, #0]
 8020a20:	18d3      	adds	r3, r2, r3
 8020a22:	3313      	adds	r3, #19
 8020a24:	7819      	ldrb	r1, [r3, #0]
 8020a26:	4ae7      	ldr	r2, [pc, #924]	; (8020dc4 <http_process_handler+0x146c>)
 8020a28:	1903      	adds	r3, r0, r4
 8020a2a:	2508      	movs	r5, #8
 8020a2c:	46ac      	mov	ip, r5
 8020a2e:	2508      	movs	r5, #8
 8020a30:	46a8      	mov	r8, r5
 8020a32:	44b8      	add	r8, r7
 8020a34:	44c4      	add	ip, r8
 8020a36:	4463      	add	r3, ip
 8020a38:	681b      	ldr	r3, [r3, #0]
 8020a3a:	18d3      	adds	r3, r2, r3
 8020a3c:	1c0a      	adds	r2, r1, #0
 8020a3e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 15; i++)
 8020a40:	1903      	adds	r3, r0, r4
 8020a42:	2208      	movs	r2, #8
 8020a44:	4694      	mov	ip, r2
 8020a46:	2208      	movs	r2, #8
 8020a48:	4690      	mov	r8, r2
 8020a4a:	44b8      	add	r8, r7
 8020a4c:	44c4      	add	ip, r8
 8020a4e:	4463      	add	r3, ip
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	3301      	adds	r3, #1
 8020a54:	1902      	adds	r2, r0, r4
 8020a56:	2108      	movs	r1, #8
 8020a58:	468c      	mov	ip, r1
 8020a5a:	2108      	movs	r1, #8
 8020a5c:	4688      	mov	r8, r1
 8020a5e:	44b8      	add	r8, r7
 8020a60:	44c4      	add	ip, r8
 8020a62:	4462      	add	r2, ip
 8020a64:	6013      	str	r3, [r2, #0]
 8020a66:	4bd6      	ldr	r3, [pc, #856]	; (8020dc0 <http_process_handler+0x1468>)
 8020a68:	2130      	movs	r1, #48	; 0x30
 8020a6a:	185b      	adds	r3, r3, r1
 8020a6c:	2208      	movs	r2, #8
 8020a6e:	4694      	mov	ip, r2
 8020a70:	2208      	movs	r2, #8
 8020a72:	4690      	mov	r8, r2
 8020a74:	44b8      	add	r8, r7
 8020a76:	44c4      	add	ip, r8
 8020a78:	4463      	add	r3, ip
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	2b0e      	cmp	r3, #14
 8020a7e:	ddc3      	ble.n	8020a08 <http_process_handler+0x10b0>

			for (int i = 0; i < 2; i++)
 8020a80:	2300      	movs	r3, #0
 8020a82:	4ad1      	ldr	r2, [pc, #836]	; (8020dc8 <http_process_handler+0x1470>)
 8020a84:	1852      	adds	r2, r2, r1
 8020a86:	2108      	movs	r1, #8
 8020a88:	468c      	mov	ip, r1
 8020a8a:	2108      	movs	r1, #8
 8020a8c:	4688      	mov	r8, r1
 8020a8e:	44b8      	add	r8, r7
 8020a90:	44c4      	add	ip, r8
 8020a92:	4462      	add	r2, ip
 8020a94:	6013      	str	r3, [r2, #0]
 8020a96:	e02f      	b.n	8020af8 <http_process_handler+0x11a0>
				tvtype[i] = pcb_config.tvtype[i];
 8020a98:	4ac8      	ldr	r2, [pc, #800]	; (8020dbc <http_process_handler+0x1464>)
 8020a9a:	21f2      	movs	r1, #242	; 0xf2
 8020a9c:	48ca      	ldr	r0, [pc, #808]	; (8020dc8 <http_process_handler+0x1470>)
 8020a9e:	2430      	movs	r4, #48	; 0x30
 8020aa0:	1903      	adds	r3, r0, r4
 8020aa2:	2508      	movs	r5, #8
 8020aa4:	46ac      	mov	ip, r5
 8020aa6:	2508      	movs	r5, #8
 8020aa8:	46a8      	mov	r8, r5
 8020aaa:	44b8      	add	r8, r7
 8020aac:	44c4      	add	ip, r8
 8020aae:	4463      	add	r3, ip
 8020ab0:	681b      	ldr	r3, [r3, #0]
 8020ab2:	18d3      	adds	r3, r2, r3
 8020ab4:	185b      	adds	r3, r3, r1
 8020ab6:	7819      	ldrb	r1, [r3, #0]
 8020ab8:	4ac4      	ldr	r2, [pc, #784]	; (8020dcc <http_process_handler+0x1474>)
 8020aba:	1903      	adds	r3, r0, r4
 8020abc:	2508      	movs	r5, #8
 8020abe:	46ac      	mov	ip, r5
 8020ac0:	2508      	movs	r5, #8
 8020ac2:	46a8      	mov	r8, r5
 8020ac4:	44b8      	add	r8, r7
 8020ac6:	44c4      	add	ip, r8
 8020ac8:	4463      	add	r3, ip
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	18d3      	adds	r3, r2, r3
 8020ace:	1c0a      	adds	r2, r1, #0
 8020ad0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 2; i++)
 8020ad2:	1903      	adds	r3, r0, r4
 8020ad4:	2208      	movs	r2, #8
 8020ad6:	4694      	mov	ip, r2
 8020ad8:	2208      	movs	r2, #8
 8020ada:	4690      	mov	r8, r2
 8020adc:	44b8      	add	r8, r7
 8020ade:	44c4      	add	ip, r8
 8020ae0:	4463      	add	r3, ip
 8020ae2:	681b      	ldr	r3, [r3, #0]
 8020ae4:	3301      	adds	r3, #1
 8020ae6:	1902      	adds	r2, r0, r4
 8020ae8:	2108      	movs	r1, #8
 8020aea:	468c      	mov	ip, r1
 8020aec:	2108      	movs	r1, #8
 8020aee:	4688      	mov	r8, r1
 8020af0:	44b8      	add	r8, r7
 8020af2:	44c4      	add	ip, r8
 8020af4:	4462      	add	r2, ip
 8020af6:	6013      	str	r3, [r2, #0]
 8020af8:	4bb3      	ldr	r3, [pc, #716]	; (8020dc8 <http_process_handler+0x1470>)
 8020afa:	2130      	movs	r1, #48	; 0x30
 8020afc:	185b      	adds	r3, r3, r1
 8020afe:	2208      	movs	r2, #8
 8020b00:	4694      	mov	ip, r2
 8020b02:	2208      	movs	r2, #8
 8020b04:	4690      	mov	r8, r2
 8020b06:	44b8      	add	r8, r7
 8020b08:	44c4      	add	ip, r8
 8020b0a:	4463      	add	r3, ip
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	2b01      	cmp	r3, #1
 8020b10:	ddc2      	ble.n	8020a98 <http_process_handler+0x1140>

			for (int i = 0; i < 6; i++)
 8020b12:	2300      	movs	r3, #0
 8020b14:	228c      	movs	r2, #140	; 0x8c
 8020b16:	0112      	lsls	r2, r2, #4
 8020b18:	1852      	adds	r2, r2, r1
 8020b1a:	2108      	movs	r1, #8
 8020b1c:	468c      	mov	ip, r1
 8020b1e:	2108      	movs	r1, #8
 8020b20:	4688      	mov	r8, r1
 8020b22:	44b8      	add	r8, r7
 8020b24:	44c4      	add	ip, r8
 8020b26:	4462      	add	r2, ip
 8020b28:	6013      	str	r3, [r2, #0]
 8020b2a:	e030      	b.n	8020b8e <http_process_handler+0x1236>
				rs1[i] = pcb_config.rs1[i];
 8020b2c:	4aa3      	ldr	r2, [pc, #652]	; (8020dbc <http_process_handler+0x1464>)
 8020b2e:	21f8      	movs	r1, #248	; 0xf8
 8020b30:	208c      	movs	r0, #140	; 0x8c
 8020b32:	0100      	lsls	r0, r0, #4
 8020b34:	2430      	movs	r4, #48	; 0x30
 8020b36:	1903      	adds	r3, r0, r4
 8020b38:	2508      	movs	r5, #8
 8020b3a:	46ac      	mov	ip, r5
 8020b3c:	2508      	movs	r5, #8
 8020b3e:	46a8      	mov	r8, r5
 8020b40:	44b8      	add	r8, r7
 8020b42:	44c4      	add	ip, r8
 8020b44:	4463      	add	r3, ip
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	18d3      	adds	r3, r2, r3
 8020b4a:	185b      	adds	r3, r3, r1
 8020b4c:	7819      	ldrb	r1, [r3, #0]
 8020b4e:	4aa0      	ldr	r2, [pc, #640]	; (8020dd0 <http_process_handler+0x1478>)
 8020b50:	1903      	adds	r3, r0, r4
 8020b52:	2508      	movs	r5, #8
 8020b54:	46ac      	mov	ip, r5
 8020b56:	2508      	movs	r5, #8
 8020b58:	46a8      	mov	r8, r5
 8020b5a:	44b8      	add	r8, r7
 8020b5c:	44c4      	add	ip, r8
 8020b5e:	4463      	add	r3, ip
 8020b60:	681b      	ldr	r3, [r3, #0]
 8020b62:	18d3      	adds	r3, r2, r3
 8020b64:	1c0a      	adds	r2, r1, #0
 8020b66:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; i++)
 8020b68:	1903      	adds	r3, r0, r4
 8020b6a:	2208      	movs	r2, #8
 8020b6c:	4694      	mov	ip, r2
 8020b6e:	2208      	movs	r2, #8
 8020b70:	4690      	mov	r8, r2
 8020b72:	44b8      	add	r8, r7
 8020b74:	44c4      	add	ip, r8
 8020b76:	4463      	add	r3, ip
 8020b78:	681b      	ldr	r3, [r3, #0]
 8020b7a:	3301      	adds	r3, #1
 8020b7c:	1902      	adds	r2, r0, r4
 8020b7e:	2108      	movs	r1, #8
 8020b80:	468c      	mov	ip, r1
 8020b82:	2108      	movs	r1, #8
 8020b84:	4688      	mov	r8, r1
 8020b86:	44b8      	add	r8, r7
 8020b88:	44c4      	add	ip, r8
 8020b8a:	4462      	add	r2, ip
 8020b8c:	6013      	str	r3, [r2, #0]
 8020b8e:	238c      	movs	r3, #140	; 0x8c
 8020b90:	011b      	lsls	r3, r3, #4
 8020b92:	2130      	movs	r1, #48	; 0x30
 8020b94:	185b      	adds	r3, r3, r1
 8020b96:	2208      	movs	r2, #8
 8020b98:	4694      	mov	ip, r2
 8020b9a:	2208      	movs	r2, #8
 8020b9c:	4690      	mov	r8, r2
 8020b9e:	44b8      	add	r8, r7
 8020ba0:	44c4      	add	ip, r8
 8020ba2:	4463      	add	r3, ip
 8020ba4:	681b      	ldr	r3, [r3, #0]
 8020ba6:	2b05      	cmp	r3, #5
 8020ba8:	ddc0      	ble.n	8020b2c <http_process_handler+0x11d4>
			for (int i = 0; i < 2; i++)
 8020baa:	2300      	movs	r3, #0
 8020bac:	4a89      	ldr	r2, [pc, #548]	; (8020dd4 <http_process_handler+0x147c>)
 8020bae:	1852      	adds	r2, r2, r1
 8020bb0:	2108      	movs	r1, #8
 8020bb2:	468c      	mov	ip, r1
 8020bb4:	2108      	movs	r1, #8
 8020bb6:	4688      	mov	r8, r1
 8020bb8:	44b8      	add	r8, r7
 8020bba:	44c4      	add	ip, r8
 8020bbc:	4462      	add	r2, ip
 8020bbe:	6013      	str	r3, [r2, #0]
 8020bc0:	e02f      	b.n	8020c22 <http_process_handler+0x12ca>
				rs2[i] = pcb_config.rs2[i];
 8020bc2:	4a7e      	ldr	r2, [pc, #504]	; (8020dbc <http_process_handler+0x1464>)
 8020bc4:	21fe      	movs	r1, #254	; 0xfe
 8020bc6:	4883      	ldr	r0, [pc, #524]	; (8020dd4 <http_process_handler+0x147c>)
 8020bc8:	2430      	movs	r4, #48	; 0x30
 8020bca:	1903      	adds	r3, r0, r4
 8020bcc:	2508      	movs	r5, #8
 8020bce:	46ac      	mov	ip, r5
 8020bd0:	2508      	movs	r5, #8
 8020bd2:	46a8      	mov	r8, r5
 8020bd4:	44b8      	add	r8, r7
 8020bd6:	44c4      	add	ip, r8
 8020bd8:	4463      	add	r3, ip
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	18d3      	adds	r3, r2, r3
 8020bde:	185b      	adds	r3, r3, r1
 8020be0:	7819      	ldrb	r1, [r3, #0]
 8020be2:	4a7d      	ldr	r2, [pc, #500]	; (8020dd8 <http_process_handler+0x1480>)
 8020be4:	1903      	adds	r3, r0, r4
 8020be6:	2508      	movs	r5, #8
 8020be8:	46ac      	mov	ip, r5
 8020bea:	2508      	movs	r5, #8
 8020bec:	46a8      	mov	r8, r5
 8020bee:	44b8      	add	r8, r7
 8020bf0:	44c4      	add	ip, r8
 8020bf2:	4463      	add	r3, ip
 8020bf4:	681b      	ldr	r3, [r3, #0]
 8020bf6:	18d3      	adds	r3, r2, r3
 8020bf8:	1c0a      	adds	r2, r1, #0
 8020bfa:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 2; i++)
 8020bfc:	1903      	adds	r3, r0, r4
 8020bfe:	2208      	movs	r2, #8
 8020c00:	4694      	mov	ip, r2
 8020c02:	2208      	movs	r2, #8
 8020c04:	4690      	mov	r8, r2
 8020c06:	44b8      	add	r8, r7
 8020c08:	44c4      	add	ip, r8
 8020c0a:	4463      	add	r3, ip
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	3301      	adds	r3, #1
 8020c10:	1902      	adds	r2, r0, r4
 8020c12:	2108      	movs	r1, #8
 8020c14:	468c      	mov	ip, r1
 8020c16:	2108      	movs	r1, #8
 8020c18:	4688      	mov	r8, r1
 8020c1a:	44b8      	add	r8, r7
 8020c1c:	44c4      	add	ip, r8
 8020c1e:	4462      	add	r2, ip
 8020c20:	6013      	str	r3, [r2, #0]
 8020c22:	4b6c      	ldr	r3, [pc, #432]	; (8020dd4 <http_process_handler+0x147c>)
 8020c24:	2130      	movs	r1, #48	; 0x30
 8020c26:	185b      	adds	r3, r3, r1
 8020c28:	2208      	movs	r2, #8
 8020c2a:	4694      	mov	ip, r2
 8020c2c:	2208      	movs	r2, #8
 8020c2e:	4690      	mov	r8, r2
 8020c30:	44b8      	add	r8, r7
 8020c32:	44c4      	add	ip, r8
 8020c34:	4463      	add	r3, ip
 8020c36:	681b      	ldr	r3, [r3, #0]
 8020c38:	2b01      	cmp	r3, #1
 8020c3a:	ddc2      	ble.n	8020bc2 <http_process_handler+0x126a>
			for (int i = 0; i < 2; i++)
 8020c3c:	2300      	movs	r3, #0
 8020c3e:	4a67      	ldr	r2, [pc, #412]	; (8020ddc <http_process_handler+0x1484>)
 8020c40:	1852      	adds	r2, r2, r1
 8020c42:	2108      	movs	r1, #8
 8020c44:	468c      	mov	ip, r1
 8020c46:	2108      	movs	r1, #8
 8020c48:	4688      	mov	r8, r1
 8020c4a:	44b8      	add	r8, r7
 8020c4c:	44c4      	add	ip, r8
 8020c4e:	4462      	add	r2, ip
 8020c50:	6013      	str	r3, [r2, #0]
 8020c52:	e030      	b.n	8020cb6 <http_process_handler+0x135e>
				rs3[i] = pcb_config.rs3[i];
 8020c54:	4959      	ldr	r1, [pc, #356]	; (8020dbc <http_process_handler+0x1464>)
 8020c56:	2380      	movs	r3, #128	; 0x80
 8020c58:	005b      	lsls	r3, r3, #1
 8020c5a:	4860      	ldr	r0, [pc, #384]	; (8020ddc <http_process_handler+0x1484>)
 8020c5c:	2430      	movs	r4, #48	; 0x30
 8020c5e:	1902      	adds	r2, r0, r4
 8020c60:	2508      	movs	r5, #8
 8020c62:	46ac      	mov	ip, r5
 8020c64:	2508      	movs	r5, #8
 8020c66:	46a8      	mov	r8, r5
 8020c68:	44b8      	add	r8, r7
 8020c6a:	44c4      	add	ip, r8
 8020c6c:	4462      	add	r2, ip
 8020c6e:	6812      	ldr	r2, [r2, #0]
 8020c70:	188a      	adds	r2, r1, r2
 8020c72:	18d3      	adds	r3, r2, r3
 8020c74:	7819      	ldrb	r1, [r3, #0]
 8020c76:	4a5a      	ldr	r2, [pc, #360]	; (8020de0 <http_process_handler+0x1488>)
 8020c78:	1903      	adds	r3, r0, r4
 8020c7a:	2508      	movs	r5, #8
 8020c7c:	46ac      	mov	ip, r5
 8020c7e:	2508      	movs	r5, #8
 8020c80:	46a8      	mov	r8, r5
 8020c82:	44b8      	add	r8, r7
 8020c84:	44c4      	add	ip, r8
 8020c86:	4463      	add	r3, ip
 8020c88:	681b      	ldr	r3, [r3, #0]
 8020c8a:	18d3      	adds	r3, r2, r3
 8020c8c:	1c0a      	adds	r2, r1, #0
 8020c8e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 2; i++)
 8020c90:	1903      	adds	r3, r0, r4
 8020c92:	2208      	movs	r2, #8
 8020c94:	4694      	mov	ip, r2
 8020c96:	2208      	movs	r2, #8
 8020c98:	4690      	mov	r8, r2
 8020c9a:	44b8      	add	r8, r7
 8020c9c:	44c4      	add	ip, r8
 8020c9e:	4463      	add	r3, ip
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	3301      	adds	r3, #1
 8020ca4:	1902      	adds	r2, r0, r4
 8020ca6:	2108      	movs	r1, #8
 8020ca8:	468c      	mov	ip, r1
 8020caa:	2108      	movs	r1, #8
 8020cac:	4688      	mov	r8, r1
 8020cae:	44b8      	add	r8, r7
 8020cb0:	44c4      	add	ip, r8
 8020cb2:	4462      	add	r2, ip
 8020cb4:	6013      	str	r3, [r2, #0]
 8020cb6:	4b49      	ldr	r3, [pc, #292]	; (8020ddc <http_process_handler+0x1484>)
 8020cb8:	2230      	movs	r2, #48	; 0x30
 8020cba:	189b      	adds	r3, r3, r2
 8020cbc:	2208      	movs	r2, #8
 8020cbe:	4694      	mov	ip, r2
 8020cc0:	2208      	movs	r2, #8
 8020cc2:	4690      	mov	r8, r2
 8020cc4:	44b8      	add	r8, r7
 8020cc6:	44c4      	add	ip, r8
 8020cc8:	4463      	add	r3, ip
 8020cca:	681b      	ldr	r3, [r3, #0]
 8020ccc:	2b01      	cmp	r3, #1
 8020cce:	ddc1      	ble.n	8020c54 <http_process_handler+0x12fc>

			rs232nbcharsON[0] = (char)(strlen(sSetRS232ON) / 2);   // Numbers of RS232 chars configured
 8020cd0:	4b44      	ldr	r3, [pc, #272]	; (8020de4 <http_process_handler+0x148c>)
 8020cd2:	0018      	movs	r0, r3
 8020cd4:	f7e1 fa1e 	bl	8002114 <strlen>
 8020cd8:	0003      	movs	r3, r0
 8020cda:	085b      	lsrs	r3, r3, #1
 8020cdc:	b2da      	uxtb	r2, r3
 8020cde:	4b42      	ldr	r3, [pc, #264]	; (8020de8 <http_process_handler+0x1490>)
 8020ce0:	701a      	strb	r2, [r3, #0]
			rs232nbcharsOFF[0] = (char)(strlen(sSetRS232OFF) / 2); // Numbers of RS232 chars configured
 8020ce2:	4b42      	ldr	r3, [pc, #264]	; (8020dec <http_process_handler+0x1494>)
 8020ce4:	0018      	movs	r0, r3
 8020ce6:	f7e1 fa15 	bl	8002114 <strlen>
 8020cea:	0003      	movs	r3, r0
 8020cec:	085b      	lsrs	r3, r3, #1
 8020cee:	b2da      	uxtb	r2, r3
 8020cf0:	4b3f      	ldr	r3, [pc, #252]	; (8020df0 <http_process_handler+0x1498>)
 8020cf2:	701a      	strb	r2, [r3, #0]

			tv = tvtype[0] - '0';
 8020cf4:	4b35      	ldr	r3, [pc, #212]	; (8020dcc <http_process_handler+0x1474>)
 8020cf6:	781b      	ldrb	r3, [r3, #0]
 8020cf8:	3b30      	subs	r3, #48	; 0x30
 8020cfa:	b2da      	uxtb	r2, r3
 8020cfc:	4b3d      	ldr	r3, [pc, #244]	; (8020df4 <http_process_handler+0x149c>)
 8020cfe:	701a      	strb	r2, [r3, #0]
			tv_type = tv;
 8020d00:	4b3c      	ldr	r3, [pc, #240]	; (8020df4 <http_process_handler+0x149c>)
 8020d02:	781b      	ldrb	r3, [r3, #0]
 8020d04:	001a      	movs	r2, r3
 8020d06:	4b3c      	ldr	r3, [pc, #240]	; (8020df8 <http_process_handler+0x14a0>)
 8020d08:	601a      	str	r2, [r3, #0]
			if ((pcb_config.sSetPIRON[0] - '0'))
 8020d0a:	4b2c      	ldr	r3, [pc, #176]	; (8020dbc <http_process_handler+0x1464>)
 8020d0c:	22c0      	movs	r2, #192	; 0xc0
 8020d0e:	5c9b      	ldrb	r3, [r3, r2]
 8020d10:	2b30      	cmp	r3, #48	; 0x30
 8020d12:	d006      	beq.n	8020d22 <http_process_handler+0x13ca>
			{
				PIRon = "selected";
 8020d14:	4b39      	ldr	r3, [pc, #228]	; (8020dfc <http_process_handler+0x14a4>)
 8020d16:	4a3a      	ldr	r2, [pc, #232]	; (8020e00 <http_process_handler+0x14a8>)
 8020d18:	601a      	str	r2, [r3, #0]
				PIRoff = "";
 8020d1a:	4b3a      	ldr	r3, [pc, #232]	; (8020e04 <http_process_handler+0x14ac>)
 8020d1c:	4a3a      	ldr	r2, [pc, #232]	; (8020e08 <http_process_handler+0x14b0>)
 8020d1e:	601a      	str	r2, [r3, #0]
 8020d20:	e005      	b.n	8020d2e <http_process_handler+0x13d6>
			}
			else
			{
				PIRon = "";
 8020d22:	4b36      	ldr	r3, [pc, #216]	; (8020dfc <http_process_handler+0x14a4>)
 8020d24:	4a38      	ldr	r2, [pc, #224]	; (8020e08 <http_process_handler+0x14b0>)
 8020d26:	601a      	str	r2, [r3, #0]
				PIRoff = "selected";
 8020d28:	4b36      	ldr	r3, [pc, #216]	; (8020e04 <http_process_handler+0x14ac>)
 8020d2a:	4a35      	ldr	r2, [pc, #212]	; (8020e00 <http_process_handler+0x14a8>)
 8020d2c:	601a      	str	r2, [r3, #0]
			}
			if ((pcb_config.sSetTempON[0] - '0'))
 8020d2e:	4b23      	ldr	r3, [pc, #140]	; (8020dbc <http_process_handler+0x1464>)
 8020d30:	22b6      	movs	r2, #182	; 0xb6
 8020d32:	5c9b      	ldrb	r3, [r3, r2]
 8020d34:	2b30      	cmp	r3, #48	; 0x30
 8020d36:	d006      	beq.n	8020d46 <http_process_handler+0x13ee>
			{
				TEMPon = "selected";
 8020d38:	4b34      	ldr	r3, [pc, #208]	; (8020e0c <http_process_handler+0x14b4>)
 8020d3a:	4a31      	ldr	r2, [pc, #196]	; (8020e00 <http_process_handler+0x14a8>)
 8020d3c:	601a      	str	r2, [r3, #0]
				TEMPoff = "";
 8020d3e:	4b34      	ldr	r3, [pc, #208]	; (8020e10 <http_process_handler+0x14b8>)
 8020d40:	4a31      	ldr	r2, [pc, #196]	; (8020e08 <http_process_handler+0x14b0>)
 8020d42:	601a      	str	r2, [r3, #0]
 8020d44:	e005      	b.n	8020d52 <http_process_handler+0x13fa>
			}
			else
			{
				TEMPon = "";
 8020d46:	4b31      	ldr	r3, [pc, #196]	; (8020e0c <http_process_handler+0x14b4>)
 8020d48:	4a2f      	ldr	r2, [pc, #188]	; (8020e08 <http_process_handler+0x14b0>)
 8020d4a:	601a      	str	r2, [r3, #0]
				TEMPoff = "selected";
 8020d4c:	4b30      	ldr	r3, [pc, #192]	; (8020e10 <http_process_handler+0x14b8>)
 8020d4e:	4a2c      	ldr	r2, [pc, #176]	; (8020e00 <http_process_handler+0x14a8>)
 8020d50:	601a      	str	r2, [r3, #0]
			}
			if (tv == 1)
 8020d52:	4b28      	ldr	r3, [pc, #160]	; (8020df4 <http_process_handler+0x149c>)
 8020d54:	781b      	ldrb	r3, [r3, #0]
 8020d56:	2b01      	cmp	r3, #1
 8020d58:	d115      	bne.n	8020d86 <http_process_handler+0x142e>
			{
				samsung = "selected";
 8020d5a:	4b2e      	ldr	r3, [pc, #184]	; (8020e14 <http_process_handler+0x14bc>)
 8020d5c:	4a28      	ldr	r2, [pc, #160]	; (8020e00 <http_process_handler+0x14a8>)
 8020d5e:	601a      	str	r2, [r3, #0]
				LG = "";
 8020d60:	4b2d      	ldr	r3, [pc, #180]	; (8020e18 <http_process_handler+0x14c0>)
 8020d62:	4a29      	ldr	r2, [pc, #164]	; (8020e08 <http_process_handler+0x14b0>)
 8020d64:	601a      	str	r2, [r3, #0]
				Panasonic = "";
 8020d66:	4b2d      	ldr	r3, [pc, #180]	; (8020e1c <http_process_handler+0x14c4>)
 8020d68:	4a27      	ldr	r2, [pc, #156]	; (8020e08 <http_process_handler+0x14b0>)
 8020d6a:	601a      	str	r2, [r3, #0]
				Sony = "";
 8020d6c:	4b2c      	ldr	r3, [pc, #176]	; (8020e20 <http_process_handler+0x14c8>)
 8020d6e:	4a26      	ldr	r2, [pc, #152]	; (8020e08 <http_process_handler+0x14b0>)
 8020d70:	601a      	str	r2, [r3, #0]
				RC5 = "";
 8020d72:	4b2c      	ldr	r3, [pc, #176]	; (8020e24 <http_process_handler+0x14cc>)
 8020d74:	4a24      	ldr	r2, [pc, #144]	; (8020e08 <http_process_handler+0x14b0>)
 8020d76:	601a      	str	r2, [r3, #0]
				RC6 = "";
 8020d78:	4b2b      	ldr	r3, [pc, #172]	; (8020e28 <http_process_handler+0x14d0>)
 8020d7a:	4a23      	ldr	r2, [pc, #140]	; (8020e08 <http_process_handler+0x14b0>)
 8020d7c:	601a      	str	r2, [r3, #0]
				Sharp = "";
 8020d7e:	4b2b      	ldr	r3, [pc, #172]	; (8020e2c <http_process_handler+0x14d4>)
 8020d80:	4a21      	ldr	r2, [pc, #132]	; (8020e08 <http_process_handler+0x14b0>)
 8020d82:	601a      	str	r2, [r3, #0]
 8020d84:	e0d5      	b.n	8020f32 <http_process_handler+0x15da>
			}
			else if (!tv)
 8020d86:	4b1b      	ldr	r3, [pc, #108]	; (8020df4 <http_process_handler+0x149c>)
 8020d88:	781b      	ldrb	r3, [r3, #0]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	d150      	bne.n	8020e30 <http_process_handler+0x14d8>
			{
				LG = "selected";
 8020d8e:	4b22      	ldr	r3, [pc, #136]	; (8020e18 <http_process_handler+0x14c0>)
 8020d90:	4a1b      	ldr	r2, [pc, #108]	; (8020e00 <http_process_handler+0x14a8>)
 8020d92:	601a      	str	r2, [r3, #0]
				samsung = "";
 8020d94:	4b1f      	ldr	r3, [pc, #124]	; (8020e14 <http_process_handler+0x14bc>)
 8020d96:	4a1c      	ldr	r2, [pc, #112]	; (8020e08 <http_process_handler+0x14b0>)
 8020d98:	601a      	str	r2, [r3, #0]
				Panasonic = "";
 8020d9a:	4b20      	ldr	r3, [pc, #128]	; (8020e1c <http_process_handler+0x14c4>)
 8020d9c:	4a1a      	ldr	r2, [pc, #104]	; (8020e08 <http_process_handler+0x14b0>)
 8020d9e:	601a      	str	r2, [r3, #0]
				Sony = "";
 8020da0:	4b1f      	ldr	r3, [pc, #124]	; (8020e20 <http_process_handler+0x14c8>)
 8020da2:	4a19      	ldr	r2, [pc, #100]	; (8020e08 <http_process_handler+0x14b0>)
 8020da4:	601a      	str	r2, [r3, #0]
				RC5 = "";
 8020da6:	4b1f      	ldr	r3, [pc, #124]	; (8020e24 <http_process_handler+0x14cc>)
 8020da8:	4a17      	ldr	r2, [pc, #92]	; (8020e08 <http_process_handler+0x14b0>)
 8020daa:	601a      	str	r2, [r3, #0]
				RC6 = "";
 8020dac:	4b1e      	ldr	r3, [pc, #120]	; (8020e28 <http_process_handler+0x14d0>)
 8020dae:	4a16      	ldr	r2, [pc, #88]	; (8020e08 <http_process_handler+0x14b0>)
 8020db0:	601a      	str	r2, [r3, #0]
				Sharp = "";
 8020db2:	4b1e      	ldr	r3, [pc, #120]	; (8020e2c <http_process_handler+0x14d4>)
 8020db4:	4a14      	ldr	r2, [pc, #80]	; (8020e08 <http_process_handler+0x14b0>)
 8020db6:	601a      	str	r2, [r3, #0]
 8020db8:	e0bb      	b.n	8020f32 <http_process_handler+0x15da>
 8020dba:	46c0      	nop			; (mov r8, r8)
 8020dbc:	20006db4 	.word	0x20006db4
 8020dc0:	000008c8 	.word	0x000008c8
 8020dc4:	20007ca0 	.word	0x20007ca0
 8020dc8:	000008c4 	.word	0x000008c4
 8020dcc:	20007d74 	.word	0x20007d74
 8020dd0:	20007d8c 	.word	0x20007d8c
 8020dd4:	000008bc 	.word	0x000008bc
 8020dd8:	20007d94 	.word	0x20007d94
 8020ddc:	000008b8 	.word	0x000008b8
 8020de0:	20007d9c 	.word	0x20007d9c
 8020de4:	20007d34 	.word	0x20007d34
 8020de8:	20007d7c 	.word	0x20007d7c
 8020dec:	20007cb0 	.word	0x20007cb0
 8020df0:	20007d84 	.word	0x20007d84
 8020df4:	20007da3 	.word	0x20007da3
 8020df8:	20005018 	.word	0x20005018
 8020dfc:	20007de4 	.word	0x20007de4
 8020e00:	080317c4 	.word	0x080317c4
 8020e04:	20007de8 	.word	0x20007de8
 8020e08:	080317d0 	.word	0x080317d0
 8020e0c:	20007dec 	.word	0x20007dec
 8020e10:	20007df0 	.word	0x20007df0
 8020e14:	20007df4 	.word	0x20007df4
 8020e18:	20007df8 	.word	0x20007df8
 8020e1c:	20007dfc 	.word	0x20007dfc
 8020e20:	20007e00 	.word	0x20007e00
 8020e24:	20007e04 	.word	0x20007e04
 8020e28:	20007e08 	.word	0x20007e08
 8020e2c:	20007e0c 	.word	0x20007e0c
			}
			else if (tv == 2)
 8020e30:	4b7d      	ldr	r3, [pc, #500]	; (8021028 <http_process_handler+0x16d0>)
 8020e32:	781b      	ldrb	r3, [r3, #0]
 8020e34:	2b02      	cmp	r3, #2
 8020e36:	d115      	bne.n	8020e64 <http_process_handler+0x150c>
			{
				LG = "";
 8020e38:	4b7c      	ldr	r3, [pc, #496]	; (802102c <http_process_handler+0x16d4>)
 8020e3a:	4a7d      	ldr	r2, [pc, #500]	; (8021030 <http_process_handler+0x16d8>)
 8020e3c:	601a      	str	r2, [r3, #0]
				samsung = "";
 8020e3e:	4b7d      	ldr	r3, [pc, #500]	; (8021034 <http_process_handler+0x16dc>)
 8020e40:	4a7b      	ldr	r2, [pc, #492]	; (8021030 <http_process_handler+0x16d8>)
 8020e42:	601a      	str	r2, [r3, #0]
				Panasonic = "selected";
 8020e44:	4b7c      	ldr	r3, [pc, #496]	; (8021038 <http_process_handler+0x16e0>)
 8020e46:	4a7d      	ldr	r2, [pc, #500]	; (802103c <http_process_handler+0x16e4>)
 8020e48:	601a      	str	r2, [r3, #0]
				Sony = "";
 8020e4a:	4b7d      	ldr	r3, [pc, #500]	; (8021040 <http_process_handler+0x16e8>)
 8020e4c:	4a78      	ldr	r2, [pc, #480]	; (8021030 <http_process_handler+0x16d8>)
 8020e4e:	601a      	str	r2, [r3, #0]
				RC5 = "";
 8020e50:	4b7c      	ldr	r3, [pc, #496]	; (8021044 <http_process_handler+0x16ec>)
 8020e52:	4a77      	ldr	r2, [pc, #476]	; (8021030 <http_process_handler+0x16d8>)
 8020e54:	601a      	str	r2, [r3, #0]
				RC6 = "";
 8020e56:	4b7c      	ldr	r3, [pc, #496]	; (8021048 <http_process_handler+0x16f0>)
 8020e58:	4a75      	ldr	r2, [pc, #468]	; (8021030 <http_process_handler+0x16d8>)
 8020e5a:	601a      	str	r2, [r3, #0]
				Sharp = "";
 8020e5c:	4b7b      	ldr	r3, [pc, #492]	; (802104c <http_process_handler+0x16f4>)
 8020e5e:	4a74      	ldr	r2, [pc, #464]	; (8021030 <http_process_handler+0x16d8>)
 8020e60:	601a      	str	r2, [r3, #0]
 8020e62:	e066      	b.n	8020f32 <http_process_handler+0x15da>
			}
			else if (tv == 3)
 8020e64:	4b70      	ldr	r3, [pc, #448]	; (8021028 <http_process_handler+0x16d0>)
 8020e66:	781b      	ldrb	r3, [r3, #0]
 8020e68:	2b03      	cmp	r3, #3
 8020e6a:	d115      	bne.n	8020e98 <http_process_handler+0x1540>
			{
				LG = "";
 8020e6c:	4b6f      	ldr	r3, [pc, #444]	; (802102c <http_process_handler+0x16d4>)
 8020e6e:	4a70      	ldr	r2, [pc, #448]	; (8021030 <http_process_handler+0x16d8>)
 8020e70:	601a      	str	r2, [r3, #0]
				samsung = "";
 8020e72:	4b70      	ldr	r3, [pc, #448]	; (8021034 <http_process_handler+0x16dc>)
 8020e74:	4a6e      	ldr	r2, [pc, #440]	; (8021030 <http_process_handler+0x16d8>)
 8020e76:	601a      	str	r2, [r3, #0]
				Panasonic = "";
 8020e78:	4b6f      	ldr	r3, [pc, #444]	; (8021038 <http_process_handler+0x16e0>)
 8020e7a:	4a6d      	ldr	r2, [pc, #436]	; (8021030 <http_process_handler+0x16d8>)
 8020e7c:	601a      	str	r2, [r3, #0]
				Sony = "selected";
 8020e7e:	4b70      	ldr	r3, [pc, #448]	; (8021040 <http_process_handler+0x16e8>)
 8020e80:	4a6e      	ldr	r2, [pc, #440]	; (802103c <http_process_handler+0x16e4>)
 8020e82:	601a      	str	r2, [r3, #0]
				RC5 = "";
 8020e84:	4b6f      	ldr	r3, [pc, #444]	; (8021044 <http_process_handler+0x16ec>)
 8020e86:	4a6a      	ldr	r2, [pc, #424]	; (8021030 <http_process_handler+0x16d8>)
 8020e88:	601a      	str	r2, [r3, #0]
				RC6 = "";
 8020e8a:	4b6f      	ldr	r3, [pc, #444]	; (8021048 <http_process_handler+0x16f0>)
 8020e8c:	4a68      	ldr	r2, [pc, #416]	; (8021030 <http_process_handler+0x16d8>)
 8020e8e:	601a      	str	r2, [r3, #0]
				Sharp = "";
 8020e90:	4b6e      	ldr	r3, [pc, #440]	; (802104c <http_process_handler+0x16f4>)
 8020e92:	4a67      	ldr	r2, [pc, #412]	; (8021030 <http_process_handler+0x16d8>)
 8020e94:	601a      	str	r2, [r3, #0]
 8020e96:	e04c      	b.n	8020f32 <http_process_handler+0x15da>
			}
			else if (tv == 4)
 8020e98:	4b63      	ldr	r3, [pc, #396]	; (8021028 <http_process_handler+0x16d0>)
 8020e9a:	781b      	ldrb	r3, [r3, #0]
 8020e9c:	2b04      	cmp	r3, #4
 8020e9e:	d115      	bne.n	8020ecc <http_process_handler+0x1574>
			{
				LG = "";
 8020ea0:	4b62      	ldr	r3, [pc, #392]	; (802102c <http_process_handler+0x16d4>)
 8020ea2:	4a63      	ldr	r2, [pc, #396]	; (8021030 <http_process_handler+0x16d8>)
 8020ea4:	601a      	str	r2, [r3, #0]
				samsung = "";
 8020ea6:	4b63      	ldr	r3, [pc, #396]	; (8021034 <http_process_handler+0x16dc>)
 8020ea8:	4a61      	ldr	r2, [pc, #388]	; (8021030 <http_process_handler+0x16d8>)
 8020eaa:	601a      	str	r2, [r3, #0]
				Panasonic = "";
 8020eac:	4b62      	ldr	r3, [pc, #392]	; (8021038 <http_process_handler+0x16e0>)
 8020eae:	4a60      	ldr	r2, [pc, #384]	; (8021030 <http_process_handler+0x16d8>)
 8020eb0:	601a      	str	r2, [r3, #0]
				Sony = "";
 8020eb2:	4b63      	ldr	r3, [pc, #396]	; (8021040 <http_process_handler+0x16e8>)
 8020eb4:	4a5e      	ldr	r2, [pc, #376]	; (8021030 <http_process_handler+0x16d8>)
 8020eb6:	601a      	str	r2, [r3, #0]
				RC5 = "selected";
 8020eb8:	4b62      	ldr	r3, [pc, #392]	; (8021044 <http_process_handler+0x16ec>)
 8020eba:	4a60      	ldr	r2, [pc, #384]	; (802103c <http_process_handler+0x16e4>)
 8020ebc:	601a      	str	r2, [r3, #0]
				RC6 = "";
 8020ebe:	4b62      	ldr	r3, [pc, #392]	; (8021048 <http_process_handler+0x16f0>)
 8020ec0:	4a5b      	ldr	r2, [pc, #364]	; (8021030 <http_process_handler+0x16d8>)
 8020ec2:	601a      	str	r2, [r3, #0]
				Sharp = "";
 8020ec4:	4b61      	ldr	r3, [pc, #388]	; (802104c <http_process_handler+0x16f4>)
 8020ec6:	4a5a      	ldr	r2, [pc, #360]	; (8021030 <http_process_handler+0x16d8>)
 8020ec8:	601a      	str	r2, [r3, #0]
 8020eca:	e032      	b.n	8020f32 <http_process_handler+0x15da>
			}
			else if (tv == 5)
 8020ecc:	4b56      	ldr	r3, [pc, #344]	; (8021028 <http_process_handler+0x16d0>)
 8020ece:	781b      	ldrb	r3, [r3, #0]
 8020ed0:	2b05      	cmp	r3, #5
 8020ed2:	d115      	bne.n	8020f00 <http_process_handler+0x15a8>
			{
				LG = "";
 8020ed4:	4b55      	ldr	r3, [pc, #340]	; (802102c <http_process_handler+0x16d4>)
 8020ed6:	4a56      	ldr	r2, [pc, #344]	; (8021030 <http_process_handler+0x16d8>)
 8020ed8:	601a      	str	r2, [r3, #0]
				samsung = "";
 8020eda:	4b56      	ldr	r3, [pc, #344]	; (8021034 <http_process_handler+0x16dc>)
 8020edc:	4a54      	ldr	r2, [pc, #336]	; (8021030 <http_process_handler+0x16d8>)
 8020ede:	601a      	str	r2, [r3, #0]
				Panasonic = "";
 8020ee0:	4b55      	ldr	r3, [pc, #340]	; (8021038 <http_process_handler+0x16e0>)
 8020ee2:	4a53      	ldr	r2, [pc, #332]	; (8021030 <http_process_handler+0x16d8>)
 8020ee4:	601a      	str	r2, [r3, #0]
				Sony = "";
 8020ee6:	4b56      	ldr	r3, [pc, #344]	; (8021040 <http_process_handler+0x16e8>)
 8020ee8:	4a51      	ldr	r2, [pc, #324]	; (8021030 <http_process_handler+0x16d8>)
 8020eea:	601a      	str	r2, [r3, #0]
				RC5 = "";
 8020eec:	4b55      	ldr	r3, [pc, #340]	; (8021044 <http_process_handler+0x16ec>)
 8020eee:	4a50      	ldr	r2, [pc, #320]	; (8021030 <http_process_handler+0x16d8>)
 8020ef0:	601a      	str	r2, [r3, #0]
				RC6 = "selected";
 8020ef2:	4b55      	ldr	r3, [pc, #340]	; (8021048 <http_process_handler+0x16f0>)
 8020ef4:	4a51      	ldr	r2, [pc, #324]	; (802103c <http_process_handler+0x16e4>)
 8020ef6:	601a      	str	r2, [r3, #0]
				Sharp = "";
 8020ef8:	4b54      	ldr	r3, [pc, #336]	; (802104c <http_process_handler+0x16f4>)
 8020efa:	4a4d      	ldr	r2, [pc, #308]	; (8021030 <http_process_handler+0x16d8>)
 8020efc:	601a      	str	r2, [r3, #0]
 8020efe:	e018      	b.n	8020f32 <http_process_handler+0x15da>
			}
			else if (tv == 6)
 8020f00:	4b49      	ldr	r3, [pc, #292]	; (8021028 <http_process_handler+0x16d0>)
 8020f02:	781b      	ldrb	r3, [r3, #0]
 8020f04:	2b06      	cmp	r3, #6
 8020f06:	d114      	bne.n	8020f32 <http_process_handler+0x15da>
			{
				LG = "";
 8020f08:	4b48      	ldr	r3, [pc, #288]	; (802102c <http_process_handler+0x16d4>)
 8020f0a:	4a49      	ldr	r2, [pc, #292]	; (8021030 <http_process_handler+0x16d8>)
 8020f0c:	601a      	str	r2, [r3, #0]
				samsung = "";
 8020f0e:	4b49      	ldr	r3, [pc, #292]	; (8021034 <http_process_handler+0x16dc>)
 8020f10:	4a47      	ldr	r2, [pc, #284]	; (8021030 <http_process_handler+0x16d8>)
 8020f12:	601a      	str	r2, [r3, #0]
				Panasonic = "";
 8020f14:	4b48      	ldr	r3, [pc, #288]	; (8021038 <http_process_handler+0x16e0>)
 8020f16:	4a46      	ldr	r2, [pc, #280]	; (8021030 <http_process_handler+0x16d8>)
 8020f18:	601a      	str	r2, [r3, #0]
				Sony = "";
 8020f1a:	4b49      	ldr	r3, [pc, #292]	; (8021040 <http_process_handler+0x16e8>)
 8020f1c:	4a44      	ldr	r2, [pc, #272]	; (8021030 <http_process_handler+0x16d8>)
 8020f1e:	601a      	str	r2, [r3, #0]
				RC5 = "";
 8020f20:	4b48      	ldr	r3, [pc, #288]	; (8021044 <http_process_handler+0x16ec>)
 8020f22:	4a43      	ldr	r2, [pc, #268]	; (8021030 <http_process_handler+0x16d8>)
 8020f24:	601a      	str	r2, [r3, #0]
				RC6 = "";
 8020f26:	4b48      	ldr	r3, [pc, #288]	; (8021048 <http_process_handler+0x16f0>)
 8020f28:	4a41      	ldr	r2, [pc, #260]	; (8021030 <http_process_handler+0x16d8>)
 8020f2a:	601a      	str	r2, [r3, #0]
				Sharp = "selected";
 8020f2c:	4b47      	ldr	r3, [pc, #284]	; (802104c <http_process_handler+0x16f4>)
 8020f2e:	4a43      	ldr	r2, [pc, #268]	; (802103c <http_process_handler+0x16e4>)
 8020f30:	601a      	str	r2, [r3, #0]
			}

			temp = (char*)result;
 8020f32:	4b47      	ldr	r3, [pc, #284]	; (8021050 <http_process_handler+0x16f8>)
 8020f34:	2208      	movs	r2, #8
 8020f36:	2130      	movs	r1, #48	; 0x30
 8020f38:	1852      	adds	r2, r2, r1
 8020f3a:	2108      	movs	r1, #8
 8020f3c:	468c      	mov	ip, r1
 8020f3e:	2108      	movs	r1, #8
 8020f40:	4688      	mov	r8, r1
 8020f42:	44b8      	add	r8, r7
 8020f44:	44c4      	add	ip, r8
 8020f46:	4462      	add	r2, ip
 8020f48:	601a      	str	r2, [r3, #0]
			firmware = FIRMWARE_VERSION;
 8020f4a:	4b42      	ldr	r3, [pc, #264]	; (8021054 <http_process_handler+0x16fc>)
 8020f4c:	4a42      	ldr	r2, [pc, #264]	; (8021058 <http_process_handler+0x1700>)
 8020f4e:	601a      	str	r2, [r3, #0]

			if (Motion_Is_Detected())
 8020f50:	f7eb fcc0 	bl	800c8d4 <Motion_Is_Detected>
 8020f54:	1e03      	subs	r3, r0, #0
 8020f56:	d003      	beq.n	8020f60 <http_process_handler+0x1608>
				PIRState = "pr01";
 8020f58:	4b40      	ldr	r3, [pc, #256]	; (802105c <http_process_handler+0x1704>)
 8020f5a:	4a41      	ldr	r2, [pc, #260]	; (8021060 <http_process_handler+0x1708>)
 8020f5c:	601a      	str	r2, [r3, #0]
 8020f5e:	e002      	b.n	8020f66 <http_process_handler+0x160e>
			else
				PIRState = "pr00";
 8020f60:	4b3e      	ldr	r3, [pc, #248]	; (802105c <http_process_handler+0x1704>)
 8020f62:	4a40      	ldr	r2, [pc, #256]	; (8021064 <http_process_handler+0x170c>)
 8020f64:	601a      	str	r2, [r3, #0]

			char looptime_stringValue[30];
			sprintf(looptime_stringValue, "%d", looptime);
 8020f66:	4b40      	ldr	r3, [pc, #256]	; (8021068 <http_process_handler+0x1710>)
 8020f68:	781b      	ldrb	r3, [r3, #0]
 8020f6a:	001a      	movs	r2, r3
 8020f6c:	493f      	ldr	r1, [pc, #252]	; (802106c <http_process_handler+0x1714>)
 8020f6e:	237c      	movs	r3, #124	; 0x7c
 8020f70:	2030      	movs	r0, #48	; 0x30
 8020f72:	181b      	adds	r3, r3, r0
 8020f74:	2008      	movs	r0, #8
 8020f76:	4684      	mov	ip, r0
 8020f78:	2008      	movs	r0, #8
 8020f7a:	4680      	mov	r8, r0
 8020f7c:	44b8      	add	r8, r7
 8020f7e:	44c4      	add	ip, r8
 8020f80:	4463      	add	r3, ip
 8020f82:	0018      	movs	r0, r3
 8020f84:	f001 fcf4 	bl	8022970 <siprintf>

			memset(str, 0, sizeof(str));
 8020f88:	4a39      	ldr	r2, [pc, #228]	; (8021070 <http_process_handler+0x1718>)
 8020f8a:	4b3a      	ldr	r3, [pc, #232]	; (8021074 <http_process_handler+0x171c>)
 8020f8c:	2100      	movs	r1, #0
 8020f8e:	0018      	movs	r0, r3
 8020f90:	f001 fe02 	bl	8022b98 <memset>
			if (str == NULL)
			{
				return;
			}

			sprintf((char*)str,
 8020f94:	4b38      	ldr	r3, [pc, #224]	; (8021078 <http_process_handler+0x1720>)
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020f9a:	4b2e      	ldr	r3, [pc, #184]	; (8021054 <http_process_handler+0x16fc>)
 8020f9c:	681b      	ldr	r3, [r3, #0]
 8020f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8020fa0:	4b2b      	ldr	r3, [pc, #172]	; (8021050 <http_process_handler+0x16f8>)
 8020fa2:	681b      	ldr	r3, [r3, #0]
 8020fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8020fa6:	4b2d      	ldr	r3, [pc, #180]	; (802105c <http_process_handler+0x1704>)
 8020fa8:	681b      	ldr	r3, [r3, #0]
 8020faa:	469a      	mov	sl, r3
 8020fac:	4b33      	ldr	r3, [pc, #204]	; (802107c <http_process_handler+0x1724>)
 8020fae:	681b      	ldr	r3, [r3, #0]
 8020fb0:	469b      	mov	fp, r3
 8020fb2:	4b33      	ldr	r3, [pc, #204]	; (8021080 <http_process_handler+0x1728>)
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8020fb8:	4b32      	ldr	r3, [pc, #200]	; (8021084 <http_process_handler+0x172c>)
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020fbe:	4b32      	ldr	r3, [pc, #200]	; (8021088 <http_process_handler+0x1730>)
 8020fc0:	681b      	ldr	r3, [r3, #0]
 8020fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8020fc4:	4b31      	ldr	r3, [pc, #196]	; (802108c <http_process_handler+0x1734>)
 8020fc6:	681b      	ldr	r3, [r3, #0]
 8020fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8020fca:	4b1a      	ldr	r3, [pc, #104]	; (8021034 <http_process_handler+0x16dc>)
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	623b      	str	r3, [r7, #32]
 8020fd0:	4b16      	ldr	r3, [pc, #88]	; (802102c <http_process_handler+0x16d4>)
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	61fb      	str	r3, [r7, #28]
 8020fd6:	4b18      	ldr	r3, [pc, #96]	; (8021038 <http_process_handler+0x16e0>)
 8020fd8:	681b      	ldr	r3, [r3, #0]
 8020fda:	61bb      	str	r3, [r7, #24]
 8020fdc:	4b18      	ldr	r3, [pc, #96]	; (8021040 <http_process_handler+0x16e8>)
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	4699      	mov	r9, r3
 8020fe2:	4b18      	ldr	r3, [pc, #96]	; (8021044 <http_process_handler+0x16ec>)
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	603b      	str	r3, [r7, #0]
 8020fe8:	4b17      	ldr	r3, [pc, #92]	; (8021048 <http_process_handler+0x16f0>)
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	60bb      	str	r3, [r7, #8]
 8020fee:	4b17      	ldr	r3, [pc, #92]	; (802104c <http_process_handler+0x16f4>)
 8020ff0:	681e      	ldr	r6, [r3, #0]
					option_str,
					firmware, temp, PIRState, IRcommand,
					PIRon, PIRoff, TEMPon, TEMPoff, samsung, LG, Panasonic,
					Sony, RC5, RC6, Sharp,
					loopon == 1 ? "" : "selected",
 8020ff2:	4b27      	ldr	r3, [pc, #156]	; (8021090 <http_process_handler+0x1738>)
 8020ff4:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)str,
 8020ff6:	2b01      	cmp	r3, #1
 8020ff8:	d101      	bne.n	8020ffe <http_process_handler+0x16a6>
 8020ffa:	4c0d      	ldr	r4, [pc, #52]	; (8021030 <http_process_handler+0x16d8>)
 8020ffc:	e000      	b.n	8021000 <http_process_handler+0x16a8>
 8020ffe:	4c0f      	ldr	r4, [pc, #60]	; (802103c <http_process_handler+0x16e4>)
					loopon == 2 ? "selected" : "",
 8021000:	4b23      	ldr	r3, [pc, #140]	; (8021090 <http_process_handler+0x1738>)
 8021002:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)str,
 8021004:	2b02      	cmp	r3, #2
 8021006:	d101      	bne.n	802100c <http_process_handler+0x16b4>
 8021008:	480c      	ldr	r0, [pc, #48]	; (802103c <http_process_handler+0x16e4>)
 802100a:	e000      	b.n	802100e <http_process_handler+0x16b6>
 802100c:	4808      	ldr	r0, [pc, #32]	; (8021030 <http_process_handler+0x16d8>)
					loopoff == 1 ? "" : "selected",
 802100e:	4b21      	ldr	r3, [pc, #132]	; (8021094 <http_process_handler+0x173c>)
 8021010:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)str,
 8021012:	2b01      	cmp	r3, #1
 8021014:	d101      	bne.n	802101a <http_process_handler+0x16c2>
 8021016:	4906      	ldr	r1, [pc, #24]	; (8021030 <http_process_handler+0x16d8>)
 8021018:	e000      	b.n	802101c <http_process_handler+0x16c4>
 802101a:	4908      	ldr	r1, [pc, #32]	; (802103c <http_process_handler+0x16e4>)
					loopoff == 2 ? "selected" : "",
 802101c:	4b1d      	ldr	r3, [pc, #116]	; (8021094 <http_process_handler+0x173c>)
 802101e:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)str,
 8021020:	2b02      	cmp	r3, #2
 8021022:	d139      	bne.n	8021098 <http_process_handler+0x1740>
 8021024:	4a05      	ldr	r2, [pc, #20]	; (802103c <http_process_handler+0x16e4>)
 8021026:	e038      	b.n	802109a <http_process_handler+0x1742>
 8021028:	20007da3 	.word	0x20007da3
 802102c:	20007df8 	.word	0x20007df8
 8021030:	080317d0 	.word	0x080317d0
 8021034:	20007df4 	.word	0x20007df4
 8021038:	20007dfc 	.word	0x20007dfc
 802103c:	080317c4 	.word	0x080317c4
 8021040:	20007e00 	.word	0x20007e00
 8021044:	20007e04 	.word	0x20007e04
 8021048:	20007e08 	.word	0x20007e08
 802104c:	20007e0c 	.word	0x20007e0c
 8021050:	200050b4 	.word	0x200050b4
 8021054:	200050b0 	.word	0x200050b0
 8021058:	080317f4 	.word	0x080317f4
 802105c:	200050b8 	.word	0x200050b8
 8021060:	080317fc 	.word	0x080317fc
 8021064:	08031804 	.word	0x08031804
 8021068:	20007e12 	.word	0x20007e12
 802106c:	0803180c 	.word	0x0803180c
 8021070:	00003a98 	.word	0x00003a98
 8021074:	20009b24 	.word	0x20009b24
 8021078:	20005058 	.word	0x20005058
 802107c:	200050bc 	.word	0x200050bc
 8021080:	20007de4 	.word	0x20007de4
 8021084:	20007de8 	.word	0x20007de8
 8021088:	20007dec 	.word	0x20007dec
 802108c:	20007df0 	.word	0x20007df0
 8021090:	20007e10 	.word	0x20007e10
 8021094:	20007e11 	.word	0x20007e11
 8021098:	4aa8      	ldr	r2, [pc, #672]	; (802133c <http_process_handler+0x19e4>)
 802109a:	4ba9      	ldr	r3, [pc, #676]	; (8021340 <http_process_handler+0x19e8>)
 802109c:	60fb      	str	r3, [r7, #12]
 802109e:	4ba9      	ldr	r3, [pc, #676]	; (8021344 <http_process_handler+0x19ec>)
 80210a0:	931c      	str	r3, [sp, #112]	; 0x70
 80210a2:	4ba9      	ldr	r3, [pc, #676]	; (8021348 <http_process_handler+0x19f0>)
 80210a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80210a6:	4ba9      	ldr	r3, [pc, #676]	; (802134c <http_process_handler+0x19f4>)
 80210a8:	931a      	str	r3, [sp, #104]	; 0x68
 80210aa:	4ba9      	ldr	r3, [pc, #676]	; (8021350 <http_process_handler+0x19f8>)
 80210ac:	9319      	str	r3, [sp, #100]	; 0x64
 80210ae:	4ba9      	ldr	r3, [pc, #676]	; (8021354 <http_process_handler+0x19fc>)
 80210b0:	9318      	str	r3, [sp, #96]	; 0x60
 80210b2:	4ba9      	ldr	r3, [pc, #676]	; (8021358 <http_process_handler+0x1a00>)
 80210b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80210b6:	4ba9      	ldr	r3, [pc, #676]	; (802135c <http_process_handler+0x1a04>)
 80210b8:	9316      	str	r3, [sp, #88]	; 0x58
 80210ba:	4ba9      	ldr	r3, [pc, #676]	; (8021360 <http_process_handler+0x1a08>)
 80210bc:	9315      	str	r3, [sp, #84]	; 0x54
 80210be:	4ba9      	ldr	r3, [pc, #676]	; (8021364 <http_process_handler+0x1a0c>)
 80210c0:	9314      	str	r3, [sp, #80]	; 0x50
 80210c2:	4ba9      	ldr	r3, [pc, #676]	; (8021368 <http_process_handler+0x1a10>)
 80210c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80210c6:	4ba9      	ldr	r3, [pc, #676]	; (802136c <http_process_handler+0x1a14>)
 80210c8:	9312      	str	r3, [sp, #72]	; 0x48
 80210ca:	237c      	movs	r3, #124	; 0x7c
 80210cc:	2530      	movs	r5, #48	; 0x30
 80210ce:	195b      	adds	r3, r3, r5
 80210d0:	607b      	str	r3, [r7, #4]
 80210d2:	2308      	movs	r3, #8
 80210d4:	469c      	mov	ip, r3
 80210d6:	2308      	movs	r3, #8
 80210d8:	4698      	mov	r8, r3
 80210da:	44b8      	add	r8, r7
 80210dc:	44c4      	add	ip, r8
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	4463      	add	r3, ip
 80210e2:	9311      	str	r3, [sp, #68]	; 0x44
 80210e4:	9210      	str	r2, [sp, #64]	; 0x40
 80210e6:	910f      	str	r1, [sp, #60]	; 0x3c
 80210e8:	900e      	str	r0, [sp, #56]	; 0x38
 80210ea:	940d      	str	r4, [sp, #52]	; 0x34
 80210ec:	960c      	str	r6, [sp, #48]	; 0x30
 80210ee:	68bb      	ldr	r3, [r7, #8]
 80210f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80210f2:	683b      	ldr	r3, [r7, #0]
 80210f4:	930a      	str	r3, [sp, #40]	; 0x28
 80210f6:	464b      	mov	r3, r9
 80210f8:	9309      	str	r3, [sp, #36]	; 0x24
 80210fa:	69bb      	ldr	r3, [r7, #24]
 80210fc:	9308      	str	r3, [sp, #32]
 80210fe:	69fb      	ldr	r3, [r7, #28]
 8021100:	9307      	str	r3, [sp, #28]
 8021102:	6a3b      	ldr	r3, [r7, #32]
 8021104:	9306      	str	r3, [sp, #24]
 8021106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021108:	9305      	str	r3, [sp, #20]
 802110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802110c:	9304      	str	r3, [sp, #16]
 802110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021110:	9303      	str	r3, [sp, #12]
 8021112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021114:	9302      	str	r3, [sp, #8]
 8021116:	465b      	mov	r3, fp
 8021118:	9301      	str	r3, [sp, #4]
 802111a:	4653      	mov	r3, sl
 802111c:	9300      	str	r3, [sp, #0]
 802111e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8021124:	68f8      	ldr	r0, [r7, #12]
 8021126:	f001 fc23 	bl	8022970 <siprintf>
					looptime_stringValue,
					sPIRDelayON, sPIRDelayOFF,
					sSetTempTreshMin, sSetTempTreshMax, sSetIRON,
					sSetIROFF, sSetRS232ON, sSetRS232OFF, rs1, rs2, rs3);

			test2 = strlen((char *)str);
 802112a:	4b85      	ldr	r3, [pc, #532]	; (8021340 <http_process_handler+0x19e8>)
 802112c:	0018      	movs	r0, r3
 802112e:	f7e0 fff1 	bl	8002114 <strlen>
 8021132:	0003      	movs	r3, r0
 8021134:	001a      	movs	r2, r3
 8021136:	4b8e      	ldr	r3, [pc, #568]	; (8021370 <http_process_handler+0x1a18>)
 8021138:	601a      	str	r2, [r3, #0]
			test2 = strlen((char *)index_page);
 802113a:	4b8e      	ldr	r3, [pc, #568]	; (8021374 <http_process_handler+0x1a1c>)
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	0018      	movs	r0, r3
 8021140:	f7e0 ffe8 	bl	8002114 <strlen>
 8021144:	0003      	movs	r3, r0
 8021146:	001a      	movs	r2, r3
 8021148:	4b89      	ldr	r3, [pc, #548]	; (8021370 <http_process_handler+0x1a18>)
 802114a:	601a      	str	r2, [r3, #0]

			memset(index_str, 0, sizeof(index_str));
 802114c:	4a8a      	ldr	r2, [pc, #552]	; (8021378 <http_process_handler+0x1a20>)
 802114e:	4b8b      	ldr	r3, [pc, #556]	; (802137c <http_process_handler+0x1a24>)
 8021150:	2100      	movs	r1, #0
 8021152:	0018      	movs	r0, r3
 8021154:	f001 fd20 	bl	8022b98 <memset>
			if (index_str == NULL)
			{
				return;
			}
			strcpy((char *)index_str, main_page);
 8021158:	4b89      	ldr	r3, [pc, #548]	; (8021380 <http_process_handler+0x1a28>)
 802115a:	681a      	ldr	r2, [r3, #0]
 802115c:	4b87      	ldr	r3, [pc, #540]	; (802137c <http_process_handler+0x1a24>)
 802115e:	0011      	movs	r1, r2
 8021160:	0018      	movs	r0, r3
 8021162:	f002 fbf9 	bl	8023958 <strcpy>
				strcat((char*) index_str, str);
 8021166:	4a76      	ldr	r2, [pc, #472]	; (8021340 <http_process_handler+0x19e8>)
 8021168:	4b84      	ldr	r3, [pc, #528]	; (802137c <http_process_handler+0x1a24>)
 802116a:	0011      	movs	r1, r2
 802116c:	0018      	movs	r0, r3
 802116e:	f001 fd1b 	bl	8022ba8 <strcat>

			memset(&sSetRS232ON, 0, sizeof(sSetRS232ON));
 8021172:	4b78      	ldr	r3, [pc, #480]	; (8021354 <http_process_handler+0x19fc>)
 8021174:	2240      	movs	r2, #64	; 0x40
 8021176:	2100      	movs	r1, #0
 8021178:	0018      	movs	r0, r3
 802117a:	f001 fd0d 	bl	8022b98 <memset>
			memset(&sSetRS232OFF, 0, sizeof(sSetRS232OFF));
 802117e:	4b74      	ldr	r3, [pc, #464]	; (8021350 <http_process_handler+0x19f8>)
 8021180:	2240      	movs	r2, #64	; 0x40
 8021182:	2100      	movs	r1, #0
 8021184:	0018      	movs	r0, r3
 8021186:	f001 fd07 	bl	8022b98 <memset>
			memset(&sSetTempTreshMax, 0, sizeof(sSetTempTreshMax));
 802118a:	4b75      	ldr	r3, [pc, #468]	; (8021360 <http_process_handler+0x1a08>)
 802118c:	2207      	movs	r2, #7
 802118e:	2100      	movs	r1, #0
 8021190:	0018      	movs	r0, r3
 8021192:	f001 fd01 	bl	8022b98 <memset>
			memset(&sSetTempTreshMin, 0, sizeof(sSetTempTreshMin));
 8021196:	4b73      	ldr	r3, [pc, #460]	; (8021364 <http_process_handler+0x1a0c>)
 8021198:	2207      	movs	r2, #7
 802119a:	2100      	movs	r1, #0
 802119c:	0018      	movs	r0, r3
 802119e:	f001 fcfb 	bl	8022b98 <memset>
			memset(&sSetIROFF, 0, sizeof(sSetIROFF));
 80211a2:	4b6d      	ldr	r3, [pc, #436]	; (8021358 <http_process_handler+0x1a00>)
 80211a4:	220f      	movs	r2, #15
 80211a6:	2100      	movs	r1, #0
 80211a8:	0018      	movs	r0, r3
 80211aa:	f001 fcf5 	bl	8022b98 <memset>
			memset(&sSetIRON, 0, sizeof(sSetIRON));
 80211ae:	4b6b      	ldr	r3, [pc, #428]	; (802135c <http_process_handler+0x1a04>)
 80211b0:	220f      	movs	r2, #15
 80211b2:	2100      	movs	r1, #0
 80211b4:	0018      	movs	r0, r3
 80211b6:	f001 fcef 	bl	8022b98 <memset>
			memset(&sPIRDelayOFF, 0, sizeof(sPIRDelayOFF));
 80211ba:	4b6b      	ldr	r3, [pc, #428]	; (8021368 <http_process_handler+0x1a10>)
 80211bc:	2206      	movs	r2, #6
 80211be:	2100      	movs	r1, #0
 80211c0:	0018      	movs	r0, r3
 80211c2:	f001 fce9 	bl	8022b98 <memset>
			memset(&rs1, 0, sizeof(rs1));
 80211c6:	4b61      	ldr	r3, [pc, #388]	; (802134c <http_process_handler+0x19f4>)
 80211c8:	2207      	movs	r2, #7
 80211ca:	2100      	movs	r1, #0
 80211cc:	0018      	movs	r0, r3
 80211ce:	f001 fce3 	bl	8022b98 <memset>
			memset(&rs2, 0, sizeof(rs2));
 80211d2:	4b5d      	ldr	r3, [pc, #372]	; (8021348 <http_process_handler+0x19f0>)
 80211d4:	2207      	movs	r2, #7
 80211d6:	2100      	movs	r1, #0
 80211d8:	0018      	movs	r0, r3
 80211da:	f001 fcdd 	bl	8022b98 <memset>
			memset(&rs3, 0, sizeof(rs3));
 80211de:	4b59      	ldr	r3, [pc, #356]	; (8021344 <http_process_handler+0x19ec>)
 80211e0:	2207      	movs	r2, #7
 80211e2:	2100      	movs	r1, #0
 80211e4:	0018      	movs	r0, r3
 80211e6:	f001 fcd7 	bl	8022b98 <memset>

			uint16_t content_num = 0;
 80211ea:	4b66      	ldr	r3, [pc, #408]	; (8021384 <http_process_handler+0x1a2c>)
 80211ec:	2490      	movs	r4, #144	; 0x90
 80211ee:	0124      	lsls	r4, r4, #4
 80211f0:	191b      	adds	r3, r3, r4
 80211f2:	2230      	movs	r2, #48	; 0x30
 80211f4:	4694      	mov	ip, r2
 80211f6:	2208      	movs	r2, #8
 80211f8:	4690      	mov	r8, r2
 80211fa:	2208      	movs	r2, #8
 80211fc:	4691      	mov	r9, r2
 80211fe:	44b9      	add	r9, r7
 8021200:	44c8      	add	r8, r9
 8021202:	44c4      	add	ip, r8
 8021204:	4463      	add	r3, ip
 8021206:	2200      	movs	r2, #0
 8021208:	801a      	strh	r2, [r3, #0]
			uint32_t file_len = 0;
 802120a:	2300      	movs	r3, #0
 802120c:	22a4      	movs	r2, #164	; 0xa4
 802120e:	2108      	movs	r1, #8
 8021210:	1852      	adds	r2, r2, r1
 8021212:	2108      	movs	r1, #8
 8021214:	468c      	mov	ip, r1
 8021216:	44bc      	add	ip, r7
 8021218:	4462      	add	r2, ip
 802121a:	6013      	str	r3, [r2, #0]
			if (find_userReg_webContent((uint8_t *)"main.html", &content_num, &file_len))
 802121c:	2374      	movs	r3, #116	; 0x74
 802121e:	0029      	movs	r1, r5
 8021220:	185b      	adds	r3, r3, r1
 8021222:	2208      	movs	r2, #8
 8021224:	2008      	movs	r0, #8
 8021226:	1812      	adds	r2, r2, r0
 8021228:	19d2      	adds	r2, r2, r7
 802122a:	189a      	adds	r2, r3, r2
 802122c:	237a      	movs	r3, #122	; 0x7a
 802122e:	185b      	adds	r3, r3, r1
 8021230:	2108      	movs	r1, #8
 8021232:	2008      	movs	r0, #8
 8021234:	1809      	adds	r1, r1, r0
 8021236:	19c9      	adds	r1, r1, r7
 8021238:	1859      	adds	r1, r3, r1
 802123a:	4b53      	ldr	r3, [pc, #332]	; (8021388 <http_process_handler+0x1a30>)
 802123c:	0018      	movs	r0, r3
 802123e:	f000 ff1f 	bl	8022080 <find_userReg_webContent>
 8021242:	1e03      	subs	r3, r0, #0
 8021244:	d017      	beq.n	8021276 <http_process_handler+0x191e>
			{
				web_content[content_num].content = (uint8_t *)index_str;
 8021246:	4b4f      	ldr	r3, [pc, #316]	; (8021384 <http_process_handler+0x1a2c>)
 8021248:	191b      	adds	r3, r3, r4
 802124a:	2230      	movs	r2, #48	; 0x30
 802124c:	4694      	mov	ip, r2
 802124e:	2208      	movs	r2, #8
 8021250:	4690      	mov	r8, r2
 8021252:	2208      	movs	r2, #8
 8021254:	4691      	mov	r9, r2
 8021256:	44b9      	add	r9, r7
 8021258:	44c8      	add	r8, r9
 802125a:	44c4      	add	ip, r8
 802125c:	4463      	add	r3, ip
 802125e:	881b      	ldrh	r3, [r3, #0]
 8021260:	0019      	movs	r1, r3
 8021262:	4a4a      	ldr	r2, [pc, #296]	; (802138c <http_process_handler+0x1a34>)
 8021264:	000b      	movs	r3, r1
 8021266:	005b      	lsls	r3, r3, #1
 8021268:	185b      	adds	r3, r3, r1
 802126a:	009b      	lsls	r3, r3, #2
 802126c:	18d3      	adds	r3, r2, r3
 802126e:	3308      	adds	r3, #8
 8021270:	4a42      	ldr	r2, [pc, #264]	; (802137c <http_process_handler+0x1a24>)
 8021272:	601a      	str	r2, [r3, #0]
 8021274:	e005      	b.n	8021282 <http_process_handler+0x192a>
			}
			else
			{
				reg_httpServer_webContent((uint8_t *)"main.html", index_str);
 8021276:	4a41      	ldr	r2, [pc, #260]	; (802137c <http_process_handler+0x1a24>)
 8021278:	4b43      	ldr	r3, [pc, #268]	; (8021388 <http_process_handler+0x1a30>)
 802127a:	0011      	movs	r1, r2
 802127c:	0018      	movs	r0, r3
 802127e:	f000 fdeb 	bl	8021e58 <reg_httpServer_webContent>
			}

			strcpy((char *)uri_name, INITIAL_WEBPAGE);
 8021282:	238b      	movs	r3, #139	; 0x8b
 8021284:	011b      	lsls	r3, r3, #4
 8021286:	2230      	movs	r2, #48	; 0x30
 8021288:	189b      	adds	r3, r3, r2
 802128a:	2208      	movs	r2, #8
 802128c:	4694      	mov	ip, r2
 802128e:	2208      	movs	r2, #8
 8021290:	4690      	mov	r8, r2
 8021292:	44b8      	add	r8, r7
 8021294:	44c4      	add	ip, r8
 8021296:	4463      	add	r3, ip
 8021298:	681a      	ldr	r2, [r3, #0]
 802129a:	4b3b      	ldr	r3, [pc, #236]	; (8021388 <http_process_handler+0x1a30>)
 802129c:	0010      	movs	r0, r2
 802129e:	0019      	movs	r1, r3
 80212a0:	230a      	movs	r3, #10
 80212a2:	001a      	movs	r2, r3
 80212a4:	f002 fb60 	bl	8023968 <memcpy>
		{
 80212a8:	e0c1      	b.n	802142e <http_process_handler+0x1ad6>
		}
		else if (!strcmp((char *)uri_name, "/"))
 80212aa:	4a39      	ldr	r2, [pc, #228]	; (8021390 <http_process_handler+0x1a38>)
 80212ac:	248b      	movs	r4, #139	; 0x8b
 80212ae:	0124      	lsls	r4, r4, #4
 80212b0:	2530      	movs	r5, #48	; 0x30
 80212b2:	1963      	adds	r3, r4, r5
 80212b4:	2108      	movs	r1, #8
 80212b6:	468c      	mov	ip, r1
 80212b8:	2108      	movs	r1, #8
 80212ba:	4688      	mov	r8, r1
 80212bc:	44b8      	add	r8, r7
 80212be:	44c4      	add	ip, r8
 80212c0:	4463      	add	r3, ip
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	0011      	movs	r1, r2
 80212c6:	0018      	movs	r0, r3
 80212c8:	f7e0 ff1a 	bl	8002100 <strcmp>
 80212cc:	1e03      	subs	r3, r0, #0
 80212ce:	d110      	bne.n	80212f2 <http_process_handler+0x199a>
			strcpy((char *)uri_name, "index.html"); // If URI is "/", respond by index.html
 80212d0:	1963      	adds	r3, r4, r5
 80212d2:	2208      	movs	r2, #8
 80212d4:	4694      	mov	ip, r2
 80212d6:	2208      	movs	r2, #8
 80212d8:	4690      	mov	r8, r2
 80212da:	44b8      	add	r8, r7
 80212dc:	44c4      	add	ip, r8
 80212de:	4463      	add	r3, ip
 80212e0:	681a      	ldr	r2, [r3, #0]
 80212e2:	4b2c      	ldr	r3, [pc, #176]	; (8021394 <http_process_handler+0x1a3c>)
 80212e4:	0010      	movs	r0, r2
 80212e6:	0019      	movs	r1, r3
 80212e8:	230b      	movs	r3, #11
 80212ea:	001a      	movs	r2, r3
 80212ec:	f002 fb3c 	bl	8023968 <memcpy>
 80212f0:	e09d      	b.n	802142e <http_process_handler+0x1ad6>
		else if (!strcmp((char *)uri_name, "m"))
 80212f2:	4a29      	ldr	r2, [pc, #164]	; (8021398 <http_process_handler+0x1a40>)
 80212f4:	248b      	movs	r4, #139	; 0x8b
 80212f6:	0124      	lsls	r4, r4, #4
 80212f8:	2530      	movs	r5, #48	; 0x30
 80212fa:	1963      	adds	r3, r4, r5
 80212fc:	2108      	movs	r1, #8
 80212fe:	468c      	mov	ip, r1
 8021300:	2108      	movs	r1, #8
 8021302:	4688      	mov	r8, r1
 8021304:	44b8      	add	r8, r7
 8021306:	44c4      	add	ip, r8
 8021308:	4463      	add	r3, ip
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	0011      	movs	r1, r2
 802130e:	0018      	movs	r0, r3
 8021310:	f7e0 fef6 	bl	8002100 <strcmp>
 8021314:	1e03      	subs	r3, r0, #0
 8021316:	d143      	bne.n	80213a0 <http_process_handler+0x1a48>
			strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 8021318:	1963      	adds	r3, r4, r5
 802131a:	2208      	movs	r2, #8
 802131c:	4694      	mov	ip, r2
 802131e:	2208      	movs	r2, #8
 8021320:	4690      	mov	r8, r2
 8021322:	44b8      	add	r8, r7
 8021324:	44c4      	add	ip, r8
 8021326:	4463      	add	r3, ip
 8021328:	681a      	ldr	r2, [r3, #0]
 802132a:	4b1c      	ldr	r3, [pc, #112]	; (802139c <http_process_handler+0x1a44>)
 802132c:	0010      	movs	r0, r2
 802132e:	0019      	movs	r1, r3
 8021330:	230c      	movs	r3, #12
 8021332:	001a      	movs	r2, r3
 8021334:	f002 fb18 	bl	8023968 <memcpy>
 8021338:	e079      	b.n	802142e <http_process_handler+0x1ad6>
 802133a:	46c0      	nop			; (mov r8, r8)
 802133c:	080317d0 	.word	0x080317d0
 8021340:	20009b24 	.word	0x20009b24
 8021344:	20007d9c 	.word	0x20007d9c
 8021348:	20007d94 	.word	0x20007d94
 802134c:	20007d8c 	.word	0x20007d8c
 8021350:	20007cb0 	.word	0x20007cb0
 8021354:	20007d34 	.word	0x20007d34
 8021358:	20007ca0 	.word	0x20007ca0
 802135c:	20007d24 	.word	0x20007d24
 8021360:	20007cf8 	.word	0x20007cf8
 8021364:	20007cf0 	.word	0x20007cf0
 8021368:	20007d1c 	.word	0x20007d1c
 802136c:	20007d10 	.word	0x20007d10
 8021370:	20007dcc 	.word	0x20007dcc
 8021374:	20005044 	.word	0x20005044
 8021378:	0000ec54 	.word	0x0000ec54
 802137c:	2000d5bc 	.word	0x2000d5bc
 8021380:	20005048 	.word	0x20005048
 8021384:	fffff77a 	.word	0xfffff77a
 8021388:	080317e8 	.word	0x080317e8
 802138c:	200082c4 	.word	0x200082c4
 8021390:	08031810 	.word	0x08031810
 8021394:	08031814 	.word	0x08031814
 8021398:	08031820 	.word	0x08031820
 802139c:	08031824 	.word	0x08031824
		else if (!strcmp((char *)uri_name, "update_firmware.html"))
 80213a0:	4ad5      	ldr	r2, [pc, #852]	; (80216f8 <http_process_handler+0x1da0>)
 80213a2:	238b      	movs	r3, #139	; 0x8b
 80213a4:	011b      	lsls	r3, r3, #4
 80213a6:	2430      	movs	r4, #48	; 0x30
 80213a8:	191b      	adds	r3, r3, r4
 80213aa:	2108      	movs	r1, #8
 80213ac:	468c      	mov	ip, r1
 80213ae:	2108      	movs	r1, #8
 80213b0:	4688      	mov	r8, r1
 80213b2:	44b8      	add	r8, r7
 80213b4:	44c4      	add	ip, r8
 80213b6:	4463      	add	r3, ip
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	0011      	movs	r1, r2
 80213bc:	0018      	movs	r0, r3
 80213be:	f7e0 fe9f 	bl	8002100 <strcmp>
 80213c2:	1e03      	subs	r3, r0, #0
 80213c4:	d133      	bne.n	802142e <http_process_handler+0x1ad6>
		{
			uint16_t content_num = 0;
 80213c6:	4bcd      	ldr	r3, [pc, #820]	; (80216fc <http_process_handler+0x1da4>)
 80213c8:	2290      	movs	r2, #144	; 0x90
 80213ca:	0112      	lsls	r2, r2, #4
 80213cc:	189b      	adds	r3, r3, r2
 80213ce:	2230      	movs	r2, #48	; 0x30
 80213d0:	4694      	mov	ip, r2
 80213d2:	2208      	movs	r2, #8
 80213d4:	4690      	mov	r8, r2
 80213d6:	2208      	movs	r2, #8
 80213d8:	4691      	mov	r9, r2
 80213da:	44b9      	add	r9, r7
 80213dc:	44c8      	add	r8, r9
 80213de:	44c4      	add	ip, r8
 80213e0:	4463      	add	r3, ip
 80213e2:	2200      	movs	r2, #0
 80213e4:	801a      	strh	r2, [r3, #0]
			uint32_t file_len = 0;
 80213e6:	2300      	movs	r3, #0
 80213e8:	229c      	movs	r2, #156	; 0x9c
 80213ea:	2108      	movs	r1, #8
 80213ec:	1852      	adds	r2, r2, r1
 80213ee:	2108      	movs	r1, #8
 80213f0:	468c      	mov	ip, r1
 80213f2:	44bc      	add	ip, r7
 80213f4:	4462      	add	r2, ip
 80213f6:	6013      	str	r3, [r2, #0]
			if (find_userReg_webContent((uint8_t *)"update_firmware.html", &content_num, &file_len))
 80213f8:	236c      	movs	r3, #108	; 0x6c
 80213fa:	191b      	adds	r3, r3, r4
 80213fc:	2208      	movs	r2, #8
 80213fe:	2108      	movs	r1, #8
 8021400:	1852      	adds	r2, r2, r1
 8021402:	19d2      	adds	r2, r2, r7
 8021404:	189a      	adds	r2, r3, r2
 8021406:	2372      	movs	r3, #114	; 0x72
 8021408:	191b      	adds	r3, r3, r4
 802140a:	2108      	movs	r1, #8
 802140c:	2008      	movs	r0, #8
 802140e:	1809      	adds	r1, r1, r0
 8021410:	19c9      	adds	r1, r1, r7
 8021412:	1859      	adds	r1, r3, r1
 8021414:	4bb8      	ldr	r3, [pc, #736]	; (80216f8 <http_process_handler+0x1da0>)
 8021416:	0018      	movs	r0, r3
 8021418:	f000 fe32 	bl	8022080 <find_userReg_webContent>
 802141c:	1e03      	subs	r3, r0, #0
 802141e:	d106      	bne.n	802142e <http_process_handler+0x1ad6>
			{
			}
			else
			{
				reg_httpServer_webContent((uint8_t *)"update_firmware.html", (uint8_t *)firmware_page);
 8021420:	4bb7      	ldr	r3, [pc, #732]	; (8021700 <http_process_handler+0x1da8>)
 8021422:	681a      	ldr	r2, [r3, #0]
 8021424:	4bb4      	ldr	r3, [pc, #720]	; (80216f8 <http_process_handler+0x1da0>)
 8021426:	0011      	movs	r1, r2
 8021428:	0018      	movs	r0, r3
 802142a:	f000 fd15 	bl	8021e58 <reg_httpServer_webContent>
			}
		}
		//			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
		find_http_uri_type(&p_http_request->TYPE, uri_name); // Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 802142e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021430:	3301      	adds	r3, #1
 8021432:	268b      	movs	r6, #139	; 0x8b
 8021434:	0136      	lsls	r6, r6, #4
 8021436:	2430      	movs	r4, #48	; 0x30
 8021438:	1932      	adds	r2, r6, r4
 802143a:	2108      	movs	r1, #8
 802143c:	468c      	mov	ip, r1
 802143e:	2108      	movs	r1, #8
 8021440:	4688      	mov	r8, r1
 8021442:	44b8      	add	r8, r7
 8021444:	44c4      	add	ip, r8
 8021446:	4462      	add	r2, ip
 8021448:	6812      	ldr	r2, [r2, #0]
 802144a:	0011      	movs	r1, r2
 802144c:	0018      	movs	r0, r3
 802144e:	f7fc fb99 	bl	801db84 <find_http_uri_type>
		printf("> HTTPSocket[%d] : Request Type = %d\r\n", s,
			   p_http_request->TYPE);
		printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

		if (p_http_request->TYPE == PTYPE_CGI)
 8021452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021454:	785b      	ldrb	r3, [r3, #1]
 8021456:	2b08      	cmp	r3, #8
 8021458:	d172      	bne.n	8021540 <http_process_handler+0x1be8>
		{
			content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 802145a:	4baa      	ldr	r3, [pc, #680]	; (8021704 <http_process_handler+0x1dac>)
 802145c:	6819      	ldr	r1, [r3, #0]
 802145e:	4baa      	ldr	r3, [pc, #680]	; (8021708 <http_process_handler+0x1db0>)
 8021460:	0020      	movs	r0, r4
 8021462:	181b      	adds	r3, r3, r0
 8021464:	2208      	movs	r2, #8
 8021466:	2408      	movs	r4, #8
 8021468:	1912      	adds	r2, r2, r4
 802146a:	19d2      	adds	r2, r2, r7
 802146c:	189c      	adds	r4, r3, r2
 802146e:	4da7      	ldr	r5, [pc, #668]	; (802170c <http_process_handler+0x1db4>)
 8021470:	182b      	adds	r3, r5, r0
 8021472:	603b      	str	r3, [r7, #0]
 8021474:	2208      	movs	r2, #8
 8021476:	2308      	movs	r3, #8
 8021478:	18d2      	adds	r2, r2, r3
 802147a:	19d2      	adds	r2, r2, r7
 802147c:	683b      	ldr	r3, [r7, #0]
 802147e:	469c      	mov	ip, r3
 8021480:	4462      	add	r2, ip
 8021482:	1833      	adds	r3, r6, r0
 8021484:	2008      	movs	r0, #8
 8021486:	2608      	movs	r6, #8
 8021488:	1980      	adds	r0, r0, r6
 802148a:	19c0      	adds	r0, r0, r7
 802148c:	1818      	adds	r0, r3, r0
 802148e:	6803      	ldr	r3, [r0, #0]
 8021490:	0018      	movs	r0, r3
 8021492:	f000 fe91 	bl	80221b8 <http_get_cgi_handler>
 8021496:	0003      	movs	r3, r0
 8021498:	7023      	strb	r3, [r4, #0]
			if (content_found && (file_len <= (DATA_BUF_SIZE - (strlen(RES_CGIHEAD_OK) + 8))))
 802149a:	4b9b      	ldr	r3, [pc, #620]	; (8021708 <http_process_handler+0x1db0>)
 802149c:	2030      	movs	r0, #48	; 0x30
 802149e:	181b      	adds	r3, r3, r0
 80214a0:	2208      	movs	r2, #8
 80214a2:	4694      	mov	ip, r2
 80214a4:	2208      	movs	r2, #8
 80214a6:	4690      	mov	r8, r2
 80214a8:	44b8      	add	r8, r7
 80214aa:	44c4      	add	ip, r8
 80214ac:	4463      	add	r3, ip
 80214ae:	781b      	ldrb	r3, [r3, #0]
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d02d      	beq.n	8021510 <http_process_handler+0x1bb8>
 80214b4:	182b      	adds	r3, r5, r0
 80214b6:	2208      	movs	r2, #8
 80214b8:	4694      	mov	ip, r2
 80214ba:	2208      	movs	r2, #8
 80214bc:	4690      	mov	r8, r2
 80214be:	44b8      	add	r8, r7
 80214c0:	44c4      	add	ip, r8
 80214c2:	4463      	add	r3, ip
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	4a92      	ldr	r2, [pc, #584]	; (8021710 <http_process_handler+0x1db8>)
 80214c8:	4293      	cmp	r3, r2
 80214ca:	d821      	bhi.n	8021510 <http_process_handler+0x1bb8>
			{
				// printf("http response = %s\r\n", http_response);
				// printf("pHTTP_TX = %s\r\n", pHTTP_TX);
				send_http_response_cgi(s, http_response, pHTTP_TX,
 80214cc:	4b91      	ldr	r3, [pc, #580]	; (8021714 <http_process_handler+0x1dbc>)
 80214ce:	6819      	ldr	r1, [r3, #0]
 80214d0:	4b8c      	ldr	r3, [pc, #560]	; (8021704 <http_process_handler+0x1dac>)
 80214d2:	681a      	ldr	r2, [r3, #0]
 80214d4:	182b      	adds	r3, r5, r0
 80214d6:	2008      	movs	r0, #8
 80214d8:	4684      	mov	ip, r0
 80214da:	2008      	movs	r0, #8
 80214dc:	4680      	mov	r8, r0
 80214de:	44b8      	add	r8, r7
 80214e0:	44c4      	add	ip, r8
 80214e2:	4463      	add	r3, ip
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	b29c      	uxth	r4, r3
 80214e8:	4b8b      	ldr	r3, [pc, #556]	; (8021718 <http_process_handler+0x1dc0>)
 80214ea:	2090      	movs	r0, #144	; 0x90
 80214ec:	0100      	lsls	r0, r0, #4
 80214ee:	181b      	adds	r3, r3, r0
 80214f0:	2030      	movs	r0, #48	; 0x30
 80214f2:	4684      	mov	ip, r0
 80214f4:	2008      	movs	r0, #8
 80214f6:	4680      	mov	r8, r0
 80214f8:	2008      	movs	r0, #8
 80214fa:	4681      	mov	r9, r0
 80214fc:	44b9      	add	r9, r7
 80214fe:	44c8      	add	r8, r9
 8021500:	44c4      	add	ip, r8
 8021502:	4463      	add	r3, ip
 8021504:	7818      	ldrb	r0, [r3, #0]
 8021506:	0023      	movs	r3, r4
 8021508:	f7fe f84c 	bl	801f5a4 <send_http_response_cgi>
				send_http_response_body(s, uri_name, http_response, content_addr, file_len);
			}
		}

		// total_content_cnt = 2;
		break;
 802150c:	f000 fc65 	bl	8021dda <http_process_handler+0x2482>
				send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8021510:	23ca      	movs	r3, #202	; 0xca
 8021512:	005a      	lsls	r2, r3, #1
 8021514:	4b80      	ldr	r3, [pc, #512]	; (8021718 <http_process_handler+0x1dc0>)
 8021516:	2190      	movs	r1, #144	; 0x90
 8021518:	0109      	lsls	r1, r1, #4
 802151a:	185b      	adds	r3, r3, r1
 802151c:	2130      	movs	r1, #48	; 0x30
 802151e:	468c      	mov	ip, r1
 8021520:	2108      	movs	r1, #8
 8021522:	4688      	mov	r8, r1
 8021524:	2108      	movs	r1, #8
 8021526:	4689      	mov	r9, r1
 8021528:	44b9      	add	r9, r7
 802152a:	44c8      	add	r8, r9
 802152c:	44c4      	add	ip, r8
 802152e:	4463      	add	r3, ip
 8021530:	7818      	ldrb	r0, [r3, #0]
 8021532:	0013      	movs	r3, r2
 8021534:	2200      	movs	r2, #0
 8021536:	2108      	movs	r1, #8
 8021538:	f7fd feae 	bl	801f298 <send_http_response_header>
		break;
 802153c:	f000 fc4d 	bl	8021dda <http_process_handler+0x2482>
			if (find_userReg_webContent(uri_buf, &content_num, &file_len))
 8021540:	4d72      	ldr	r5, [pc, #456]	; (802170c <http_process_handler+0x1db4>)
 8021542:	2630      	movs	r6, #48	; 0x30
 8021544:	19ab      	adds	r3, r5, r6
 8021546:	2208      	movs	r2, #8
 8021548:	2108      	movs	r1, #8
 802154a:	1852      	adds	r2, r2, r1
 802154c:	19d2      	adds	r2, r2, r7
 802154e:	189a      	adds	r2, r3, r2
 8021550:	4c72      	ldr	r4, [pc, #456]	; (802171c <http_process_handler+0x1dc4>)
 8021552:	19a3      	adds	r3, r4, r6
 8021554:	2108      	movs	r1, #8
 8021556:	2008      	movs	r0, #8
 8021558:	1809      	adds	r1, r1, r0
 802155a:	19c9      	adds	r1, r1, r7
 802155c:	1859      	adds	r1, r3, r1
 802155e:	23a4      	movs	r3, #164	; 0xa4
 8021560:	199b      	adds	r3, r3, r6
 8021562:	2008      	movs	r0, #8
 8021564:	4684      	mov	ip, r0
 8021566:	2008      	movs	r0, #8
 8021568:	4680      	mov	r8, r0
 802156a:	44b8      	add	r8, r7
 802156c:	44c4      	add	ip, r8
 802156e:	4463      	add	r3, ip
 8021570:	0018      	movs	r0, r3
 8021572:	f000 fd85 	bl	8022080 <find_userReg_webContent>
 8021576:	1e03      	subs	r3, r0, #0
 8021578:	d100      	bne.n	802157c <http_process_handler+0x1c24>
 802157a:	e245      	b.n	8021a08 <http_process_handler+0x20b0>
				content_found = 1; // Web content found in code flash memory
 802157c:	4b62      	ldr	r3, [pc, #392]	; (8021708 <http_process_handler+0x1db0>)
 802157e:	199b      	adds	r3, r3, r6
 8021580:	2208      	movs	r2, #8
 8021582:	4694      	mov	ip, r2
 8021584:	2208      	movs	r2, #8
 8021586:	4690      	mov	r8, r2
 8021588:	44b8      	add	r8, r7
 802158a:	44c4      	add	ip, r8
 802158c:	4463      	add	r3, ip
 802158e:	2201      	movs	r2, #1
 8021590:	701a      	strb	r2, [r3, #0]
				content_addr = (uint32_t)content_num;
 8021592:	19a3      	adds	r3, r4, r6
 8021594:	2208      	movs	r2, #8
 8021596:	4694      	mov	ip, r2
 8021598:	2208      	movs	r2, #8
 802159a:	4690      	mov	r8, r2
 802159c:	44b8      	add	r8, r7
 802159e:	44c4      	add	ip, r8
 80215a0:	4463      	add	r3, ip
 80215a2:	881b      	ldrh	r3, [r3, #0]
 80215a4:	4a5e      	ldr	r2, [pc, #376]	; (8021720 <http_process_handler+0x1dc8>)
 80215a6:	1992      	adds	r2, r2, r6
 80215a8:	2108      	movs	r1, #8
 80215aa:	468c      	mov	ip, r1
 80215ac:	2108      	movs	r1, #8
 80215ae:	4688      	mov	r8, r1
 80215b0:	44b8      	add	r8, r7
 80215b2:	44c4      	add	ip, r8
 80215b4:	4462      	add	r2, ip
 80215b6:	6013      	str	r3, [r2, #0]
				HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 80215b8:	4b5a      	ldr	r3, [pc, #360]	; (8021724 <http_process_handler+0x1dcc>)
 80215ba:	199b      	adds	r3, r3, r6
 80215bc:	2208      	movs	r2, #8
 80215be:	4694      	mov	ip, r2
 80215c0:	2208      	movs	r2, #8
 80215c2:	4690      	mov	r8, r2
 80215c4:	44b8      	add	r8, r7
 80215c6:	44c4      	add	ip, r8
 80215c8:	4463      	add	r3, ip
 80215ca:	781b      	ldrb	r3, [r3, #0]
 80215cc:	b25b      	sxtb	r3, r3
 80215ce:	4a56      	ldr	r2, [pc, #344]	; (8021728 <http_process_handler+0x1dd0>)
 80215d0:	2190      	movs	r1, #144	; 0x90
 80215d2:	2094      	movs	r0, #148	; 0x94
 80215d4:	4343      	muls	r3, r0
 80215d6:	18d3      	adds	r3, r2, r3
 80215d8:	185b      	adds	r3, r3, r1
 80215da:	2201      	movs	r2, #1
 80215dc:	701a      	strb	r2, [r3, #0]
				if (0 == strcmp((char *)uri_name, "set_file"))
 80215de:	4a53      	ldr	r2, [pc, #332]	; (802172c <http_process_handler+0x1dd4>)
 80215e0:	238b      	movs	r3, #139	; 0x8b
 80215e2:	011b      	lsls	r3, r3, #4
 80215e4:	199b      	adds	r3, r3, r6
 80215e6:	2108      	movs	r1, #8
 80215e8:	468c      	mov	ip, r1
 80215ea:	2108      	movs	r1, #8
 80215ec:	4688      	mov	r8, r1
 80215ee:	44b8      	add	r8, r7
 80215f0:	44c4      	add	ip, r8
 80215f2:	4463      	add	r3, ip
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	0011      	movs	r1, r2
 80215f8:	0018      	movs	r0, r3
 80215fa:	f7e0 fd81 	bl	8002100 <strcmp>
 80215fe:	1e03      	subs	r3, r0, #0
 8021600:	d131      	bne.n	8021666 <http_process_handler+0x1d0e>
					set_file_callback(web_content + content_num, p_http_request);
 8021602:	19a3      	adds	r3, r4, r6
 8021604:	2208      	movs	r2, #8
 8021606:	4694      	mov	ip, r2
 8021608:	2208      	movs	r2, #8
 802160a:	4690      	mov	r8, r2
 802160c:	44b8      	add	r8, r7
 802160e:	44c4      	add	ip, r8
 8021610:	4463      	add	r3, ip
 8021612:	881b      	ldrh	r3, [r3, #0]
 8021614:	001a      	movs	r2, r3
 8021616:	0013      	movs	r3, r2
 8021618:	005b      	lsls	r3, r3, #1
 802161a:	189b      	adds	r3, r3, r2
 802161c:	009b      	lsls	r3, r3, #2
 802161e:	001a      	movs	r2, r3
 8021620:	4b43      	ldr	r3, [pc, #268]	; (8021730 <http_process_handler+0x1dd8>)
 8021622:	18d3      	adds	r3, r2, r3
 8021624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021626:	0011      	movs	r1, r2
 8021628:	0018      	movs	r0, r3
 802162a:	f7e4 fbd5 	bl	8005dd8 <set_file_callback>
					file_len = web_content[content_num].content_len;
 802162e:	0030      	movs	r0, r6
 8021630:	1823      	adds	r3, r4, r0
 8021632:	2208      	movs	r2, #8
 8021634:	4694      	mov	ip, r2
 8021636:	2208      	movs	r2, #8
 8021638:	4690      	mov	r8, r2
 802163a:	44b8      	add	r8, r7
 802163c:	44c4      	add	ip, r8
 802163e:	4463      	add	r3, ip
 8021640:	881b      	ldrh	r3, [r3, #0]
 8021642:	0019      	movs	r1, r3
 8021644:	4a3a      	ldr	r2, [pc, #232]	; (8021730 <http_process_handler+0x1dd8>)
 8021646:	000b      	movs	r3, r1
 8021648:	005b      	lsls	r3, r3, #1
 802164a:	185b      	adds	r3, r3, r1
 802164c:	009b      	lsls	r3, r3, #2
 802164e:	18d3      	adds	r3, r2, r3
 8021650:	3304      	adds	r3, #4
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	182a      	adds	r2, r5, r0
 8021656:	2108      	movs	r1, #8
 8021658:	468c      	mov	ip, r1
 802165a:	2108      	movs	r1, #8
 802165c:	4688      	mov	r8, r1
 802165e:	44b8      	add	r8, r7
 8021660:	44c4      	add	ip, r8
 8021662:	4462      	add	r2, ip
 8021664:	6013      	str	r3, [r2, #0]
				if (0 == strcmp((char *)uri_name, "timesyncpage"))
 8021666:	4a33      	ldr	r2, [pc, #204]	; (8021734 <http_process_handler+0x1ddc>)
 8021668:	238b      	movs	r3, #139	; 0x8b
 802166a:	011b      	lsls	r3, r3, #4
 802166c:	2530      	movs	r5, #48	; 0x30
 802166e:	195b      	adds	r3, r3, r5
 8021670:	2108      	movs	r1, #8
 8021672:	468c      	mov	ip, r1
 8021674:	2108      	movs	r1, #8
 8021676:	4688      	mov	r8, r1
 8021678:	44b8      	add	r8, r7
 802167a:	44c4      	add	ip, r8
 802167c:	4463      	add	r3, ip
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	0011      	movs	r1, r2
 8021682:	0018      	movs	r0, r3
 8021684:	f7e0 fd3c 	bl	8002100 <strcmp>
 8021688:	1e03      	subs	r3, r0, #0
 802168a:	d155      	bne.n	8021738 <http_process_handler+0x1de0>
					time_sync_page_callback(web_content + content_num, p_http_request);
 802168c:	4c23      	ldr	r4, [pc, #140]	; (802171c <http_process_handler+0x1dc4>)
 802168e:	1963      	adds	r3, r4, r5
 8021690:	2208      	movs	r2, #8
 8021692:	4694      	mov	ip, r2
 8021694:	2208      	movs	r2, #8
 8021696:	4690      	mov	r8, r2
 8021698:	44b8      	add	r8, r7
 802169a:	44c4      	add	ip, r8
 802169c:	4463      	add	r3, ip
 802169e:	881b      	ldrh	r3, [r3, #0]
 80216a0:	001a      	movs	r2, r3
 80216a2:	0013      	movs	r3, r2
 80216a4:	005b      	lsls	r3, r3, #1
 80216a6:	189b      	adds	r3, r3, r2
 80216a8:	009b      	lsls	r3, r3, #2
 80216aa:	001a      	movs	r2, r3
 80216ac:	4b20      	ldr	r3, [pc, #128]	; (8021730 <http_process_handler+0x1dd8>)
 80216ae:	18d3      	adds	r3, r2, r3
 80216b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80216b2:	0011      	movs	r1, r2
 80216b4:	0018      	movs	r0, r3
 80216b6:	f7e3 ff67 	bl	8005588 <time_sync_page_callback>
					file_len = web_content[content_num].content_len;
 80216ba:	0028      	movs	r0, r5
 80216bc:	1823      	adds	r3, r4, r0
 80216be:	2208      	movs	r2, #8
 80216c0:	4694      	mov	ip, r2
 80216c2:	2208      	movs	r2, #8
 80216c4:	4690      	mov	r8, r2
 80216c6:	44b8      	add	r8, r7
 80216c8:	44c4      	add	ip, r8
 80216ca:	4463      	add	r3, ip
 80216cc:	881b      	ldrh	r3, [r3, #0]
 80216ce:	0019      	movs	r1, r3
 80216d0:	4a17      	ldr	r2, [pc, #92]	; (8021730 <http_process_handler+0x1dd8>)
 80216d2:	000b      	movs	r3, r1
 80216d4:	005b      	lsls	r3, r3, #1
 80216d6:	185b      	adds	r3, r3, r1
 80216d8:	009b      	lsls	r3, r3, #2
 80216da:	18d3      	adds	r3, r2, r3
 80216dc:	3304      	adds	r3, #4
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	4a0a      	ldr	r2, [pc, #40]	; (802170c <http_process_handler+0x1db4>)
 80216e2:	1812      	adds	r2, r2, r0
 80216e4:	2108      	movs	r1, #8
 80216e6:	468c      	mov	ip, r1
 80216e8:	2108      	movs	r1, #8
 80216ea:	4688      	mov	r8, r1
 80216ec:	44b8      	add	r8, r7
 80216ee:	44c4      	add	ip, r8
 80216f0:	4462      	add	r2, ip
 80216f2:	6013      	str	r3, [r2, #0]
 80216f4:	e194      	b.n	8021a20 <http_process_handler+0x20c8>
 80216f6:	46c0      	nop			; (mov r8, r8)
 80216f8:	08031830 	.word	0x08031830
 80216fc:	fffff772 	.word	0xfffff772
 8021700:	2000504c 	.word	0x2000504c
 8021704:	20007e18 	.word	0x20007e18
 8021708:	000008f9 	.word	0x000008f9
 802170c:	000008a4 	.word	0x000008a4
 8021710:	000007be 	.word	0x000007be
 8021714:	20007de0 	.word	0x20007de0
 8021718:	fffff707 	.word	0xfffff707
 802171c:	000008aa 	.word	0x000008aa
 8021720:	000008fc 	.word	0x000008fc
 8021724:	000008b7 	.word	0x000008b7
 8021728:	20007e24 	.word	0x20007e24
 802172c:	08031848 	.word	0x08031848
 8021730:	200082c4 	.word	0x200082c4
 8021734:	08031854 	.word	0x08031854
				else if (0 == strcmp((char *)uri_name, "timesync"))
 8021738:	4ac6      	ldr	r2, [pc, #792]	; (8021a54 <http_process_handler+0x20fc>)
 802173a:	238b      	movs	r3, #139	; 0x8b
 802173c:	011b      	lsls	r3, r3, #4
 802173e:	2530      	movs	r5, #48	; 0x30
 8021740:	195b      	adds	r3, r3, r5
 8021742:	2108      	movs	r1, #8
 8021744:	468c      	mov	ip, r1
 8021746:	2108      	movs	r1, #8
 8021748:	4688      	mov	r8, r1
 802174a:	44b8      	add	r8, r7
 802174c:	44c4      	add	ip, r8
 802174e:	4463      	add	r3, ip
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	0011      	movs	r1, r2
 8021754:	0018      	movs	r0, r3
 8021756:	f7e0 fcd3 	bl	8002100 <strcmp>
 802175a:	1e03      	subs	r3, r0, #0
 802175c:	d134      	bne.n	80217c8 <http_process_handler+0x1e70>
					set_time_sync_callback(web_content + content_num, p_http_request);
 802175e:	4cbe      	ldr	r4, [pc, #760]	; (8021a58 <http_process_handler+0x2100>)
 8021760:	1963      	adds	r3, r4, r5
 8021762:	2208      	movs	r2, #8
 8021764:	4694      	mov	ip, r2
 8021766:	2208      	movs	r2, #8
 8021768:	4690      	mov	r8, r2
 802176a:	44b8      	add	r8, r7
 802176c:	44c4      	add	ip, r8
 802176e:	4463      	add	r3, ip
 8021770:	881b      	ldrh	r3, [r3, #0]
 8021772:	001a      	movs	r2, r3
 8021774:	0013      	movs	r3, r2
 8021776:	005b      	lsls	r3, r3, #1
 8021778:	189b      	adds	r3, r3, r2
 802177a:	009b      	lsls	r3, r3, #2
 802177c:	001a      	movs	r2, r3
 802177e:	4bb7      	ldr	r3, [pc, #732]	; (8021a5c <http_process_handler+0x2104>)
 8021780:	18d3      	adds	r3, r2, r3
 8021782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021784:	0011      	movs	r1, r2
 8021786:	0018      	movs	r0, r3
 8021788:	f7e3 ff30 	bl	80055ec <set_time_sync_callback>
					file_len = web_content[content_num].content_len;
 802178c:	0028      	movs	r0, r5
 802178e:	1823      	adds	r3, r4, r0
 8021790:	2208      	movs	r2, #8
 8021792:	4694      	mov	ip, r2
 8021794:	2208      	movs	r2, #8
 8021796:	4690      	mov	r8, r2
 8021798:	44b8      	add	r8, r7
 802179a:	44c4      	add	ip, r8
 802179c:	4463      	add	r3, ip
 802179e:	881b      	ldrh	r3, [r3, #0]
 80217a0:	0019      	movs	r1, r3
 80217a2:	4aae      	ldr	r2, [pc, #696]	; (8021a5c <http_process_handler+0x2104>)
 80217a4:	000b      	movs	r3, r1
 80217a6:	005b      	lsls	r3, r3, #1
 80217a8:	185b      	adds	r3, r3, r1
 80217aa:	009b      	lsls	r3, r3, #2
 80217ac:	18d3      	adds	r3, r2, r3
 80217ae:	3304      	adds	r3, #4
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	4aab      	ldr	r2, [pc, #684]	; (8021a60 <http_process_handler+0x2108>)
 80217b4:	1812      	adds	r2, r2, r0
 80217b6:	2108      	movs	r1, #8
 80217b8:	468c      	mov	ip, r1
 80217ba:	2108      	movs	r1, #8
 80217bc:	4688      	mov	r8, r1
 80217be:	44b8      	add	r8, r7
 80217c0:	44c4      	add	ip, r8
 80217c2:	4462      	add	r2, ip
 80217c4:	6013      	str	r3, [r2, #0]
 80217c6:	e12b      	b.n	8021a20 <http_process_handler+0x20c8>
				else if (0 == strcmp((char *)uri_name, "gettimesync"))
 80217c8:	4aa6      	ldr	r2, [pc, #664]	; (8021a64 <http_process_handler+0x210c>)
 80217ca:	238b      	movs	r3, #139	; 0x8b
 80217cc:	011b      	lsls	r3, r3, #4
 80217ce:	2530      	movs	r5, #48	; 0x30
 80217d0:	195b      	adds	r3, r3, r5
 80217d2:	2108      	movs	r1, #8
 80217d4:	468c      	mov	ip, r1
 80217d6:	2108      	movs	r1, #8
 80217d8:	4688      	mov	r8, r1
 80217da:	44b8      	add	r8, r7
 80217dc:	44c4      	add	ip, r8
 80217de:	4463      	add	r3, ip
 80217e0:	681b      	ldr	r3, [r3, #0]
 80217e2:	0011      	movs	r1, r2
 80217e4:	0018      	movs	r0, r3
 80217e6:	f7e0 fc8b 	bl	8002100 <strcmp>
 80217ea:	1e03      	subs	r3, r0, #0
 80217ec:	d134      	bne.n	8021858 <http_process_handler+0x1f00>
					get_time_sync_callback(web_content + content_num, p_http_request);
 80217ee:	4c9a      	ldr	r4, [pc, #616]	; (8021a58 <http_process_handler+0x2100>)
 80217f0:	1963      	adds	r3, r4, r5
 80217f2:	2208      	movs	r2, #8
 80217f4:	4694      	mov	ip, r2
 80217f6:	2208      	movs	r2, #8
 80217f8:	4690      	mov	r8, r2
 80217fa:	44b8      	add	r8, r7
 80217fc:	44c4      	add	ip, r8
 80217fe:	4463      	add	r3, ip
 8021800:	881b      	ldrh	r3, [r3, #0]
 8021802:	001a      	movs	r2, r3
 8021804:	0013      	movs	r3, r2
 8021806:	005b      	lsls	r3, r3, #1
 8021808:	189b      	adds	r3, r3, r2
 802180a:	009b      	lsls	r3, r3, #2
 802180c:	001a      	movs	r2, r3
 802180e:	4b93      	ldr	r3, [pc, #588]	; (8021a5c <http_process_handler+0x2104>)
 8021810:	18d3      	adds	r3, r2, r3
 8021812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021814:	0011      	movs	r1, r2
 8021816:	0018      	movs	r0, r3
 8021818:	f7e4 f83a 	bl	8005890 <get_time_sync_callback>
					file_len = web_content[content_num].content_len;
 802181c:	0028      	movs	r0, r5
 802181e:	1823      	adds	r3, r4, r0
 8021820:	2208      	movs	r2, #8
 8021822:	4694      	mov	ip, r2
 8021824:	2208      	movs	r2, #8
 8021826:	4690      	mov	r8, r2
 8021828:	44b8      	add	r8, r7
 802182a:	44c4      	add	ip, r8
 802182c:	4463      	add	r3, ip
 802182e:	881b      	ldrh	r3, [r3, #0]
 8021830:	0019      	movs	r1, r3
 8021832:	4a8a      	ldr	r2, [pc, #552]	; (8021a5c <http_process_handler+0x2104>)
 8021834:	000b      	movs	r3, r1
 8021836:	005b      	lsls	r3, r3, #1
 8021838:	185b      	adds	r3, r3, r1
 802183a:	009b      	lsls	r3, r3, #2
 802183c:	18d3      	adds	r3, r2, r3
 802183e:	3304      	adds	r3, #4
 8021840:	681b      	ldr	r3, [r3, #0]
 8021842:	4a87      	ldr	r2, [pc, #540]	; (8021a60 <http_process_handler+0x2108>)
 8021844:	1812      	adds	r2, r2, r0
 8021846:	2108      	movs	r1, #8
 8021848:	468c      	mov	ip, r1
 802184a:	2108      	movs	r1, #8
 802184c:	4688      	mov	r8, r1
 802184e:	44b8      	add	r8, r7
 8021850:	44c4      	add	ip, r8
 8021852:	4462      	add	r2, ip
 8021854:	6013      	str	r3, [r2, #0]
 8021856:	e0e3      	b.n	8021a20 <http_process_handler+0x20c8>
				else if (0 == strcmp((char *)uri_name, "file_get"))
 8021858:	4a83      	ldr	r2, [pc, #524]	; (8021a68 <http_process_handler+0x2110>)
 802185a:	238b      	movs	r3, #139	; 0x8b
 802185c:	011b      	lsls	r3, r3, #4
 802185e:	2530      	movs	r5, #48	; 0x30
 8021860:	195b      	adds	r3, r3, r5
 8021862:	2108      	movs	r1, #8
 8021864:	468c      	mov	ip, r1
 8021866:	2108      	movs	r1, #8
 8021868:	4688      	mov	r8, r1
 802186a:	44b8      	add	r8, r7
 802186c:	44c4      	add	ip, r8
 802186e:	4463      	add	r3, ip
 8021870:	681b      	ldr	r3, [r3, #0]
 8021872:	0011      	movs	r1, r2
 8021874:	0018      	movs	r0, r3
 8021876:	f7e0 fc43 	bl	8002100 <strcmp>
 802187a:	1e03      	subs	r3, r0, #0
 802187c:	d134      	bne.n	80218e8 <http_process_handler+0x1f90>
					get_file_callback(web_content + content_num, p_http_request);
 802187e:	4c76      	ldr	r4, [pc, #472]	; (8021a58 <http_process_handler+0x2100>)
 8021880:	1963      	adds	r3, r4, r5
 8021882:	2208      	movs	r2, #8
 8021884:	4694      	mov	ip, r2
 8021886:	2208      	movs	r2, #8
 8021888:	4690      	mov	r8, r2
 802188a:	44b8      	add	r8, r7
 802188c:	44c4      	add	ip, r8
 802188e:	4463      	add	r3, ip
 8021890:	881b      	ldrh	r3, [r3, #0]
 8021892:	001a      	movs	r2, r3
 8021894:	0013      	movs	r3, r2
 8021896:	005b      	lsls	r3, r3, #1
 8021898:	189b      	adds	r3, r3, r2
 802189a:	009b      	lsls	r3, r3, #2
 802189c:	001a      	movs	r2, r3
 802189e:	4b6f      	ldr	r3, [pc, #444]	; (8021a5c <http_process_handler+0x2104>)
 80218a0:	18d3      	adds	r3, r2, r3
 80218a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80218a4:	0011      	movs	r1, r2
 80218a6:	0018      	movs	r0, r3
 80218a8:	f7e4 fad4 	bl	8005e54 <get_file_callback>
					file_len = web_content[content_num].content_len;
 80218ac:	0028      	movs	r0, r5
 80218ae:	1823      	adds	r3, r4, r0
 80218b0:	2208      	movs	r2, #8
 80218b2:	4694      	mov	ip, r2
 80218b4:	2208      	movs	r2, #8
 80218b6:	4690      	mov	r8, r2
 80218b8:	44b8      	add	r8, r7
 80218ba:	44c4      	add	ip, r8
 80218bc:	4463      	add	r3, ip
 80218be:	881b      	ldrh	r3, [r3, #0]
 80218c0:	0019      	movs	r1, r3
 80218c2:	4a66      	ldr	r2, [pc, #408]	; (8021a5c <http_process_handler+0x2104>)
 80218c4:	000b      	movs	r3, r1
 80218c6:	005b      	lsls	r3, r3, #1
 80218c8:	185b      	adds	r3, r3, r1
 80218ca:	009b      	lsls	r3, r3, #2
 80218cc:	18d3      	adds	r3, r2, r3
 80218ce:	3304      	adds	r3, #4
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	4a63      	ldr	r2, [pc, #396]	; (8021a60 <http_process_handler+0x2108>)
 80218d4:	1812      	adds	r2, r2, r0
 80218d6:	2108      	movs	r1, #8
 80218d8:	468c      	mov	ip, r1
 80218da:	2108      	movs	r1, #8
 80218dc:	4688      	mov	r8, r1
 80218de:	44b8      	add	r8, r7
 80218e0:	44c4      	add	ip, r8
 80218e2:	4462      	add	r2, ip
 80218e4:	6013      	str	r3, [r2, #0]
 80218e6:	e09b      	b.n	8021a20 <http_process_handler+0x20c8>
				else if (0 == strcmp((char *)uri_name, "get_alarm"))
 80218e8:	4a60      	ldr	r2, [pc, #384]	; (8021a6c <http_process_handler+0x2114>)
 80218ea:	238b      	movs	r3, #139	; 0x8b
 80218ec:	011b      	lsls	r3, r3, #4
 80218ee:	2530      	movs	r5, #48	; 0x30
 80218f0:	195b      	adds	r3, r3, r5
 80218f2:	2108      	movs	r1, #8
 80218f4:	468c      	mov	ip, r1
 80218f6:	2108      	movs	r1, #8
 80218f8:	4688      	mov	r8, r1
 80218fa:	44b8      	add	r8, r7
 80218fc:	44c4      	add	ip, r8
 80218fe:	4463      	add	r3, ip
 8021900:	681b      	ldr	r3, [r3, #0]
 8021902:	0011      	movs	r1, r2
 8021904:	0018      	movs	r0, r3
 8021906:	f7e0 fbfb 	bl	8002100 <strcmp>
 802190a:	1e03      	subs	r3, r0, #0
 802190c:	d134      	bne.n	8021978 <http_process_handler+0x2020>
					get_alarm_callback(web_content + content_num, p_http_request);
 802190e:	4c52      	ldr	r4, [pc, #328]	; (8021a58 <http_process_handler+0x2100>)
 8021910:	1963      	adds	r3, r4, r5
 8021912:	2208      	movs	r2, #8
 8021914:	4694      	mov	ip, r2
 8021916:	2208      	movs	r2, #8
 8021918:	4690      	mov	r8, r2
 802191a:	44b8      	add	r8, r7
 802191c:	44c4      	add	ip, r8
 802191e:	4463      	add	r3, ip
 8021920:	881b      	ldrh	r3, [r3, #0]
 8021922:	001a      	movs	r2, r3
 8021924:	0013      	movs	r3, r2
 8021926:	005b      	lsls	r3, r3, #1
 8021928:	189b      	adds	r3, r3, r2
 802192a:	009b      	lsls	r3, r3, #2
 802192c:	001a      	movs	r2, r3
 802192e:	4b4b      	ldr	r3, [pc, #300]	; (8021a5c <http_process_handler+0x2104>)
 8021930:	18d3      	adds	r3, r2, r3
 8021932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021934:	0011      	movs	r1, r2
 8021936:	0018      	movs	r0, r3
 8021938:	f7e4 fab0 	bl	8005e9c <get_alarm_callback>
					file_len = web_content[content_num].content_len;
 802193c:	0028      	movs	r0, r5
 802193e:	1823      	adds	r3, r4, r0
 8021940:	2208      	movs	r2, #8
 8021942:	4694      	mov	ip, r2
 8021944:	2208      	movs	r2, #8
 8021946:	4690      	mov	r8, r2
 8021948:	44b8      	add	r8, r7
 802194a:	44c4      	add	ip, r8
 802194c:	4463      	add	r3, ip
 802194e:	881b      	ldrh	r3, [r3, #0]
 8021950:	0019      	movs	r1, r3
 8021952:	4a42      	ldr	r2, [pc, #264]	; (8021a5c <http_process_handler+0x2104>)
 8021954:	000b      	movs	r3, r1
 8021956:	005b      	lsls	r3, r3, #1
 8021958:	185b      	adds	r3, r3, r1
 802195a:	009b      	lsls	r3, r3, #2
 802195c:	18d3      	adds	r3, r2, r3
 802195e:	3304      	adds	r3, #4
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	4a3f      	ldr	r2, [pc, #252]	; (8021a60 <http_process_handler+0x2108>)
 8021964:	1812      	adds	r2, r2, r0
 8021966:	2108      	movs	r1, #8
 8021968:	468c      	mov	ip, r1
 802196a:	2108      	movs	r1, #8
 802196c:	4688      	mov	r8, r1
 802196e:	44b8      	add	r8, r7
 8021970:	44c4      	add	ip, r8
 8021972:	4462      	add	r2, ip
 8021974:	6013      	str	r3, [r2, #0]
 8021976:	e053      	b.n	8021a20 <http_process_handler+0x20c8>
				else if (0 == strcmp((char *)uri_name, "set_alarm"))
 8021978:	4a3d      	ldr	r2, [pc, #244]	; (8021a70 <http_process_handler+0x2118>)
 802197a:	238b      	movs	r3, #139	; 0x8b
 802197c:	011b      	lsls	r3, r3, #4
 802197e:	2530      	movs	r5, #48	; 0x30
 8021980:	195b      	adds	r3, r3, r5
 8021982:	2108      	movs	r1, #8
 8021984:	468c      	mov	ip, r1
 8021986:	2108      	movs	r1, #8
 8021988:	4688      	mov	r8, r1
 802198a:	44b8      	add	r8, r7
 802198c:	44c4      	add	ip, r8
 802198e:	4463      	add	r3, ip
 8021990:	681b      	ldr	r3, [r3, #0]
 8021992:	0011      	movs	r1, r2
 8021994:	0018      	movs	r0, r3
 8021996:	f7e0 fbb3 	bl	8002100 <strcmp>
 802199a:	1e03      	subs	r3, r0, #0
 802199c:	d140      	bne.n	8021a20 <http_process_handler+0x20c8>
					set_alarm_callback(web_content + content_num, p_http_request);
 802199e:	4c2e      	ldr	r4, [pc, #184]	; (8021a58 <http_process_handler+0x2100>)
 80219a0:	1963      	adds	r3, r4, r5
 80219a2:	2208      	movs	r2, #8
 80219a4:	4694      	mov	ip, r2
 80219a6:	2208      	movs	r2, #8
 80219a8:	4690      	mov	r8, r2
 80219aa:	44b8      	add	r8, r7
 80219ac:	44c4      	add	ip, r8
 80219ae:	4463      	add	r3, ip
 80219b0:	881b      	ldrh	r3, [r3, #0]
 80219b2:	001a      	movs	r2, r3
 80219b4:	0013      	movs	r3, r2
 80219b6:	005b      	lsls	r3, r3, #1
 80219b8:	189b      	adds	r3, r3, r2
 80219ba:	009b      	lsls	r3, r3, #2
 80219bc:	001a      	movs	r2, r3
 80219be:	4b27      	ldr	r3, [pc, #156]	; (8021a5c <http_process_handler+0x2104>)
 80219c0:	18d3      	adds	r3, r2, r3
 80219c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80219c4:	0011      	movs	r1, r2
 80219c6:	0018      	movs	r0, r3
 80219c8:	f7e3 ffc0 	bl	800594c <set_alarm_callback>
					file_len = web_content[content_num].content_len;
 80219cc:	0028      	movs	r0, r5
 80219ce:	1823      	adds	r3, r4, r0
 80219d0:	2208      	movs	r2, #8
 80219d2:	4694      	mov	ip, r2
 80219d4:	2208      	movs	r2, #8
 80219d6:	4690      	mov	r8, r2
 80219d8:	44b8      	add	r8, r7
 80219da:	44c4      	add	ip, r8
 80219dc:	4463      	add	r3, ip
 80219de:	881b      	ldrh	r3, [r3, #0]
 80219e0:	0019      	movs	r1, r3
 80219e2:	4a1e      	ldr	r2, [pc, #120]	; (8021a5c <http_process_handler+0x2104>)
 80219e4:	000b      	movs	r3, r1
 80219e6:	005b      	lsls	r3, r3, #1
 80219e8:	185b      	adds	r3, r3, r1
 80219ea:	009b      	lsls	r3, r3, #2
 80219ec:	18d3      	adds	r3, r2, r3
 80219ee:	3304      	adds	r3, #4
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	4a1b      	ldr	r2, [pc, #108]	; (8021a60 <http_process_handler+0x2108>)
 80219f4:	1812      	adds	r2, r2, r0
 80219f6:	2108      	movs	r1, #8
 80219f8:	468c      	mov	ip, r1
 80219fa:	2108      	movs	r1, #8
 80219fc:	4688      	mov	r8, r1
 80219fe:	44b8      	add	r8, r7
 8021a00:	44c4      	add	ip, r8
 8021a02:	4462      	add	r2, ip
 8021a04:	6013      	str	r3, [r2, #0]
 8021a06:	e00b      	b.n	8021a20 <http_process_handler+0x20c8>
				content_found = 0; // fail to find content
 8021a08:	4b1a      	ldr	r3, [pc, #104]	; (8021a74 <http_process_handler+0x211c>)
 8021a0a:	2230      	movs	r2, #48	; 0x30
 8021a0c:	189b      	adds	r3, r3, r2
 8021a0e:	2208      	movs	r2, #8
 8021a10:	4694      	mov	ip, r2
 8021a12:	2208      	movs	r2, #8
 8021a14:	4690      	mov	r8, r2
 8021a16:	44b8      	add	r8, r7
 8021a18:	44c4      	add	ip, r8
 8021a1a:	4463      	add	r3, ip
 8021a1c:	2200      	movs	r2, #0
 8021a1e:	701a      	strb	r2, [r3, #0]
			if (!content_found)
 8021a20:	4b14      	ldr	r3, [pc, #80]	; (8021a74 <http_process_handler+0x211c>)
 8021a22:	2230      	movs	r2, #48	; 0x30
 8021a24:	189b      	adds	r3, r3, r2
 8021a26:	2108      	movs	r1, #8
 8021a28:	468c      	mov	ip, r1
 8021a2a:	2108      	movs	r1, #8
 8021a2c:	4688      	mov	r8, r1
 8021a2e:	44b8      	add	r8, r7
 8021a30:	44c4      	add	ip, r8
 8021a32:	4463      	add	r3, ip
 8021a34:	781b      	ldrb	r3, [r3, #0]
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d120      	bne.n	8021a7c <http_process_handler+0x2124>
				http_status = STATUS_NOT_FOUND;
 8021a3a:	4b0f      	ldr	r3, [pc, #60]	; (8021a78 <http_process_handler+0x2120>)
 8021a3c:	189b      	adds	r3, r3, r2
 8021a3e:	2208      	movs	r2, #8
 8021a40:	4694      	mov	ip, r2
 8021a42:	2208      	movs	r2, #8
 8021a44:	4690      	mov	r8, r2
 8021a46:	44b8      	add	r8, r7
 8021a48:	44c4      	add	ip, r8
 8021a4a:	4463      	add	r3, ip
 8021a4c:	22ca      	movs	r2, #202	; 0xca
 8021a4e:	0052      	lsls	r2, r2, #1
 8021a50:	801a      	strh	r2, [r3, #0]
 8021a52:	e01f      	b.n	8021a94 <http_process_handler+0x213c>
 8021a54:	08031864 	.word	0x08031864
 8021a58:	000008aa 	.word	0x000008aa
 8021a5c:	200082c4 	.word	0x200082c4
 8021a60:	000008a4 	.word	0x000008a4
 8021a64:	08031870 	.word	0x08031870
 8021a68:	0803187c 	.word	0x0803187c
 8021a6c:	08031888 	.word	0x08031888
 8021a70:	08031894 	.word	0x08031894
 8021a74:	000008f9 	.word	0x000008f9
 8021a78:	000008fa 	.word	0x000008fa
				http_status = STATUS_OK;
 8021a7c:	4bdc      	ldr	r3, [pc, #880]	; (8021df0 <http_process_handler+0x2498>)
 8021a7e:	2230      	movs	r2, #48	; 0x30
 8021a80:	189b      	adds	r3, r3, r2
 8021a82:	2208      	movs	r2, #8
 8021a84:	4694      	mov	ip, r2
 8021a86:	2208      	movs	r2, #8
 8021a88:	4690      	mov	r8, r2
 8021a8a:	44b8      	add	r8, r7
 8021a8c:	44c4      	add	ip, r8
 8021a8e:	4463      	add	r3, ip
 8021a90:	22c8      	movs	r2, #200	; 0xc8
 8021a92:	801a      	strh	r2, [r3, #0]
			if (http_status)
 8021a94:	48d6      	ldr	r0, [pc, #856]	; (8021df0 <http_process_handler+0x2498>)
 8021a96:	2230      	movs	r2, #48	; 0x30
 8021a98:	1883      	adds	r3, r0, r2
 8021a9a:	2108      	movs	r1, #8
 8021a9c:	468c      	mov	ip, r1
 8021a9e:	2108      	movs	r1, #8
 8021aa0:	4688      	mov	r8, r1
 8021aa2:	44b8      	add	r8, r7
 8021aa4:	44c4      	add	ip, r8
 8021aa6:	4463      	add	r3, ip
 8021aa8:	881b      	ldrh	r3, [r3, #0]
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d027      	beq.n	8021afe <http_process_handler+0x21a6>
				send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 8021aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021ab0:	7859      	ldrb	r1, [r3, #1]
 8021ab2:	4bd0      	ldr	r3, [pc, #832]	; (8021df4 <http_process_handler+0x249c>)
 8021ab4:	0014      	movs	r4, r2
 8021ab6:	189b      	adds	r3, r3, r2
 8021ab8:	2208      	movs	r2, #8
 8021aba:	4694      	mov	ip, r2
 8021abc:	2208      	movs	r2, #8
 8021abe:	4690      	mov	r8, r2
 8021ac0:	44b8      	add	r8, r7
 8021ac2:	44c4      	add	ip, r8
 8021ac4:	4463      	add	r3, ip
 8021ac6:	681a      	ldr	r2, [r3, #0]
 8021ac8:	1903      	adds	r3, r0, r4
 8021aca:	2008      	movs	r0, #8
 8021acc:	4684      	mov	ip, r0
 8021ace:	2008      	movs	r0, #8
 8021ad0:	4680      	mov	r8, r0
 8021ad2:	44b8      	add	r8, r7
 8021ad4:	44c4      	add	ip, r8
 8021ad6:	4463      	add	r3, ip
 8021ad8:	881c      	ldrh	r4, [r3, #0]
 8021ada:	4bc7      	ldr	r3, [pc, #796]	; (8021df8 <http_process_handler+0x24a0>)
 8021adc:	2090      	movs	r0, #144	; 0x90
 8021ade:	0100      	lsls	r0, r0, #4
 8021ae0:	181b      	adds	r3, r3, r0
 8021ae2:	2030      	movs	r0, #48	; 0x30
 8021ae4:	4684      	mov	ip, r0
 8021ae6:	2008      	movs	r0, #8
 8021ae8:	4680      	mov	r8, r0
 8021aea:	2008      	movs	r0, #8
 8021aec:	4681      	mov	r9, r0
 8021aee:	44b9      	add	r9, r7
 8021af0:	44c8      	add	r8, r9
 8021af2:	44c4      	add	ip, r8
 8021af4:	4463      	add	r3, ip
 8021af6:	7818      	ldrb	r0, [r3, #0]
 8021af8:	0023      	movs	r3, r4
 8021afa:	f7fd fbcd 	bl	801f298 <send_http_response_header>
			if (http_status == STATUS_OK)
 8021afe:	4bbc      	ldr	r3, [pc, #752]	; (8021df0 <http_process_handler+0x2498>)
 8021b00:	2230      	movs	r2, #48	; 0x30
 8021b02:	189b      	adds	r3, r3, r2
 8021b04:	2108      	movs	r1, #8
 8021b06:	468c      	mov	ip, r1
 8021b08:	2108      	movs	r1, #8
 8021b0a:	4688      	mov	r8, r1
 8021b0c:	44b8      	add	r8, r7
 8021b0e:	44c4      	add	ip, r8
 8021b10:	4463      	add	r3, ip
 8021b12:	881b      	ldrh	r3, [r3, #0]
 8021b14:	2bc8      	cmp	r3, #200	; 0xc8
 8021b16:	d000      	beq.n	8021b1a <http_process_handler+0x21c2>
 8021b18:	e15f      	b.n	8021dda <http_process_handler+0x2482>
				send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 8021b1a:	4bb8      	ldr	r3, [pc, #736]	; (8021dfc <http_process_handler+0x24a4>)
 8021b1c:	681c      	ldr	r4, [r3, #0]
 8021b1e:	4bb5      	ldr	r3, [pc, #724]	; (8021df4 <http_process_handler+0x249c>)
 8021b20:	0011      	movs	r1, r2
 8021b22:	185b      	adds	r3, r3, r1
 8021b24:	2208      	movs	r2, #8
 8021b26:	4694      	mov	ip, r2
 8021b28:	2208      	movs	r2, #8
 8021b2a:	4690      	mov	r8, r2
 8021b2c:	44b8      	add	r8, r7
 8021b2e:	44c4      	add	ip, r8
 8021b30:	4463      	add	r3, ip
 8021b32:	681b      	ldr	r3, [r3, #0]
 8021b34:	4ab2      	ldr	r2, [pc, #712]	; (8021e00 <http_process_handler+0x24a8>)
 8021b36:	1852      	adds	r2, r2, r1
 8021b38:	2008      	movs	r0, #8
 8021b3a:	4684      	mov	ip, r0
 8021b3c:	2008      	movs	r0, #8
 8021b3e:	4680      	mov	r8, r0
 8021b40:	44b8      	add	r8, r7
 8021b42:	44c4      	add	ip, r8
 8021b44:	4462      	add	r2, ip
 8021b46:	6815      	ldr	r5, [r2, #0]
 8021b48:	228b      	movs	r2, #139	; 0x8b
 8021b4a:	0112      	lsls	r2, r2, #4
 8021b4c:	1852      	adds	r2, r2, r1
 8021b4e:	2108      	movs	r1, #8
 8021b50:	468c      	mov	ip, r1
 8021b52:	2108      	movs	r1, #8
 8021b54:	4688      	mov	r8, r1
 8021b56:	44b8      	add	r8, r7
 8021b58:	44c4      	add	ip, r8
 8021b5a:	4462      	add	r2, ip
 8021b5c:	6811      	ldr	r1, [r2, #0]
 8021b5e:	4aa6      	ldr	r2, [pc, #664]	; (8021df8 <http_process_handler+0x24a0>)
 8021b60:	2090      	movs	r0, #144	; 0x90
 8021b62:	0100      	lsls	r0, r0, #4
 8021b64:	1812      	adds	r2, r2, r0
 8021b66:	2030      	movs	r0, #48	; 0x30
 8021b68:	4684      	mov	ip, r0
 8021b6a:	2008      	movs	r0, #8
 8021b6c:	4680      	mov	r8, r0
 8021b6e:	2008      	movs	r0, #8
 8021b70:	4681      	mov	r9, r0
 8021b72:	44b9      	add	r9, r7
 8021b74:	44c8      	add	r8, r9
 8021b76:	44c4      	add	ip, r8
 8021b78:	4462      	add	r2, ip
 8021b7a:	7810      	ldrb	r0, [r2, #0]
 8021b7c:	9300      	str	r3, [sp, #0]
 8021b7e:	002b      	movs	r3, r5
 8021b80:	0022      	movs	r2, r4
 8021b82:	f7fd fbf1 	bl	801f368 <send_http_response_body>
		break;
 8021b86:	e128      	b.n	8021dda <http_process_handler+0x2482>

	case METHOD_POST:
		mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 8021b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021b8a:	1c98      	adds	r0, r3, #2
 8021b8c:	24a4      	movs	r4, #164	; 0xa4
 8021b8e:	2530      	movs	r5, #48	; 0x30
 8021b90:	1963      	adds	r3, r4, r5
 8021b92:	2208      	movs	r2, #8
 8021b94:	4694      	mov	ip, r2
 8021b96:	2208      	movs	r2, #8
 8021b98:	4690      	mov	r8, r2
 8021b9a:	44b8      	add	r8, r7
 8021b9c:	44c4      	add	ip, r8
 8021b9e:	4463      	add	r3, ip
 8021ba0:	4a98      	ldr	r2, [pc, #608]	; (8021e04 <http_process_handler+0x24ac>)
 8021ba2:	4999      	ldr	r1, [pc, #612]	; (8021e08 <http_process_handler+0x24b0>)
 8021ba4:	f7fd f88e 	bl	801ecc4 <mid>
		uri_name = uri_buf;
 8021ba8:	002a      	movs	r2, r5
 8021baa:	18a3      	adds	r3, r4, r2
 8021bac:	2108      	movs	r1, #8
 8021bae:	468c      	mov	ip, r1
 8021bb0:	2108      	movs	r1, #8
 8021bb2:	4688      	mov	r8, r1
 8021bb4:	44b8      	add	r8, r7
 8021bb6:	44c4      	add	ip, r8
 8021bb8:	4463      	add	r3, ip
 8021bba:	258b      	movs	r5, #139	; 0x8b
 8021bbc:	012d      	lsls	r5, r5, #4
 8021bbe:	0014      	movs	r4, r2
 8021bc0:	192a      	adds	r2, r5, r4
 8021bc2:	2108      	movs	r1, #8
 8021bc4:	468c      	mov	ip, r1
 8021bc6:	2108      	movs	r1, #8
 8021bc8:	4688      	mov	r8, r1
 8021bca:	44b8      	add	r8, r7
 8021bcc:	44c4      	add	ip, r8
 8021bce:	4462      	add	r2, ip
 8021bd0:	6013      	str	r3, [r2, #0]
		find_http_uri_type(&p_http_request->TYPE, uri_name); // Check file type (HTML, TEXT, GIF, JPEG are included)
 8021bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021bd4:	3301      	adds	r3, #1
 8021bd6:	192a      	adds	r2, r5, r4
 8021bd8:	2108      	movs	r1, #8
 8021bda:	468c      	mov	ip, r1
 8021bdc:	2108      	movs	r1, #8
 8021bde:	4688      	mov	r8, r1
 8021be0:	44b8      	add	r8, r7
 8021be2:	44c4      	add	ip, r8
 8021be4:	4462      	add	r2, ip
 8021be6:	6812      	ldr	r2, [r2, #0]
 8021be8:	0011      	movs	r1, r2
 8021bea:	0018      	movs	r0, r3
 8021bec:	f7fb ffca 	bl	801db84 <find_http_uri_type>
		if (p_http_request->TYPE == PTYPE_CGI) // HTTP POST Method; CGI Process
 8021bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021bf2:	785b      	ldrb	r3, [r3, #1]
 8021bf4:	2b08      	cmp	r3, #8
 8021bf6:	d000      	beq.n	8021bfa <http_process_handler+0x22a2>
 8021bf8:	e0aa      	b.n	8021d50 <http_process_handler+0x23f8>
		{
			content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 8021bfa:	4b80      	ldr	r3, [pc, #512]	; (8021dfc <http_process_handler+0x24a4>)
 8021bfc:	681a      	ldr	r2, [r3, #0]
 8021bfe:	4e83      	ldr	r6, [pc, #524]	; (8021e0c <http_process_handler+0x24b4>)
 8021c00:	0020      	movs	r0, r4
 8021c02:	1833      	adds	r3, r6, r0
 8021c04:	2108      	movs	r1, #8
 8021c06:	2408      	movs	r4, #8
 8021c08:	1909      	adds	r1, r1, r4
 8021c0a:	19c9      	adds	r1, r1, r7
 8021c0c:	185c      	adds	r4, r3, r1
 8021c0e:	4b79      	ldr	r3, [pc, #484]	; (8021df4 <http_process_handler+0x249c>)
 8021c10:	181b      	adds	r3, r3, r0
 8021c12:	2108      	movs	r1, #8
 8021c14:	468c      	mov	ip, r1
 8021c16:	2108      	movs	r1, #8
 8021c18:	4688      	mov	r8, r1
 8021c1a:	44b8      	add	r8, r7
 8021c1c:	44c4      	add	ip, r8
 8021c1e:	449c      	add	ip, r3
 8021c20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021c22:	182d      	adds	r5, r5, r0
 8021c24:	2008      	movs	r0, #8
 8021c26:	2308      	movs	r3, #8
 8021c28:	18c0      	adds	r0, r0, r3
 8021c2a:	19c0      	adds	r0, r0, r7
 8021c2c:	1828      	adds	r0, r5, r0
 8021c2e:	6800      	ldr	r0, [r0, #0]
 8021c30:	4663      	mov	r3, ip
 8021c32:	f000 faf7 	bl	8022224 <http_post_cgi_handler>
 8021c36:	0003      	movs	r3, r0
 8021c38:	7023      	strb	r3, [r4, #0]

			printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found ? "Content found" : "Content not found", file_len);
 8021c3a:	4b6f      	ldr	r3, [pc, #444]	; (8021df8 <http_process_handler+0x24a0>)
 8021c3c:	2290      	movs	r2, #144	; 0x90
 8021c3e:	0112      	lsls	r2, r2, #4
 8021c40:	189b      	adds	r3, r3, r2
 8021c42:	2230      	movs	r2, #48	; 0x30
 8021c44:	4694      	mov	ip, r2
 8021c46:	2208      	movs	r2, #8
 8021c48:	4690      	mov	r8, r2
 8021c4a:	2208      	movs	r2, #8
 8021c4c:	4691      	mov	r9, r2
 8021c4e:	44b9      	add	r9, r7
 8021c50:	44c8      	add	r8, r9
 8021c52:	44c4      	add	ip, r8
 8021c54:	4463      	add	r3, ip
 8021c56:	7819      	ldrb	r1, [r3, #0]
 8021c58:	2030      	movs	r0, #48	; 0x30
 8021c5a:	1833      	adds	r3, r6, r0
 8021c5c:	2208      	movs	r2, #8
 8021c5e:	4694      	mov	ip, r2
 8021c60:	2208      	movs	r2, #8
 8021c62:	4690      	mov	r8, r2
 8021c64:	44b8      	add	r8, r7
 8021c66:	44c4      	add	ip, r8
 8021c68:	4463      	add	r3, ip
 8021c6a:	781b      	ldrb	r3, [r3, #0]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d001      	beq.n	8021c74 <http_process_handler+0x231c>
 8021c70:	4a67      	ldr	r2, [pc, #412]	; (8021e10 <http_process_handler+0x24b8>)
 8021c72:	e000      	b.n	8021c76 <http_process_handler+0x231e>
 8021c74:	4a67      	ldr	r2, [pc, #412]	; (8021e14 <http_process_handler+0x24bc>)
 8021c76:	4c5f      	ldr	r4, [pc, #380]	; (8021df4 <http_process_handler+0x249c>)
 8021c78:	2630      	movs	r6, #48	; 0x30
 8021c7a:	19a3      	adds	r3, r4, r6
 8021c7c:	2008      	movs	r0, #8
 8021c7e:	4684      	mov	ip, r0
 8021c80:	2008      	movs	r0, #8
 8021c82:	4680      	mov	r8, r0
 8021c84:	44b8      	add	r8, r7
 8021c86:	44c4      	add	ip, r8
 8021c88:	4463      	add	r3, ip
 8021c8a:	681b      	ldr	r3, [r3, #0]
 8021c8c:	4862      	ldr	r0, [pc, #392]	; (8021e18 <http_process_handler+0x24c0>)
 8021c8e:	f000 fdc1 	bl	8022814 <iprintf>

			if (content_found && (file_len <= (DATA_BUF_SIZE - (strlen(RES_CGIHEAD_OK) + 8))))
 8021c92:	4d5e      	ldr	r5, [pc, #376]	; (8021e0c <http_process_handler+0x24b4>)
 8021c94:	19ab      	adds	r3, r5, r6
 8021c96:	2208      	movs	r2, #8
 8021c98:	4694      	mov	ip, r2
 8021c9a:	2208      	movs	r2, #8
 8021c9c:	4690      	mov	r8, r2
 8021c9e:	44b8      	add	r8, r7
 8021ca0:	44c4      	add	ip, r8
 8021ca2:	4463      	add	r3, ip
 8021ca4:	781b      	ldrb	r3, [r3, #0]
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	d03b      	beq.n	8021d22 <http_process_handler+0x23ca>
 8021caa:	0020      	movs	r0, r4
 8021cac:	1983      	adds	r3, r0, r6
 8021cae:	2208      	movs	r2, #8
 8021cb0:	4694      	mov	ip, r2
 8021cb2:	2208      	movs	r2, #8
 8021cb4:	4690      	mov	r8, r2
 8021cb6:	44b8      	add	r8, r7
 8021cb8:	44c4      	add	ip, r8
 8021cba:	4463      	add	r3, ip
 8021cbc:	681b      	ldr	r3, [r3, #0]
 8021cbe:	4a57      	ldr	r2, [pc, #348]	; (8021e1c <http_process_handler+0x24c4>)
 8021cc0:	4293      	cmp	r3, r2
 8021cc2:	d82e      	bhi.n	8021d22 <http_process_handler+0x23ca>
			{

				send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 8021cc4:	4b56      	ldr	r3, [pc, #344]	; (8021e20 <http_process_handler+0x24c8>)
 8021cc6:	6819      	ldr	r1, [r3, #0]
 8021cc8:	4b4c      	ldr	r3, [pc, #304]	; (8021dfc <http_process_handler+0x24a4>)
 8021cca:	681a      	ldr	r2, [r3, #0]
 8021ccc:	1983      	adds	r3, r0, r6
 8021cce:	2008      	movs	r0, #8
 8021cd0:	4684      	mov	ip, r0
 8021cd2:	2008      	movs	r0, #8
 8021cd4:	4680      	mov	r8, r0
 8021cd6:	44b8      	add	r8, r7
 8021cd8:	44c4      	add	ip, r8
 8021cda:	4463      	add	r3, ip
 8021cdc:	681b      	ldr	r3, [r3, #0]
 8021cde:	b29c      	uxth	r4, r3
 8021ce0:	4b45      	ldr	r3, [pc, #276]	; (8021df8 <http_process_handler+0x24a0>)
 8021ce2:	2090      	movs	r0, #144	; 0x90
 8021ce4:	0100      	lsls	r0, r0, #4
 8021ce6:	181b      	adds	r3, r3, r0
 8021ce8:	2030      	movs	r0, #48	; 0x30
 8021cea:	4684      	mov	ip, r0
 8021cec:	2008      	movs	r0, #8
 8021cee:	4680      	mov	r8, r0
 8021cf0:	2008      	movs	r0, #8
 8021cf2:	4681      	mov	r9, r0
 8021cf4:	44b9      	add	r9, r7
 8021cf6:	44c8      	add	r8, r9
 8021cf8:	44c4      	add	ip, r8
 8021cfa:	4463      	add	r3, ip
 8021cfc:	7818      	ldrb	r0, [r3, #0]
 8021cfe:	0023      	movs	r3, r4
 8021d00:	f7fd fc50 	bl	801f5a4 <send_http_response_cgi>

				// Reset the H/W for apply to the change configuration information
				if (content_found == HTTP_RESET)
 8021d04:	19ab      	adds	r3, r5, r6
 8021d06:	2208      	movs	r2, #8
 8021d08:	4694      	mov	ip, r2
 8021d0a:	2208      	movs	r2, #8
 8021d0c:	4690      	mov	r8, r2
 8021d0e:	44b8      	add	r8, r7
 8021d10:	44c4      	add	ip, r8
 8021d12:	4463      	add	r3, ip
 8021d14:	781b      	ldrb	r3, [r3, #0]
 8021d16:	2b02      	cmp	r3, #2
 8021d18:	d131      	bne.n	8021d7e <http_process_handler+0x2426>
					HTTPServer_ReStart();
 8021d1a:	4b42      	ldr	r3, [pc, #264]	; (8021e24 <http_process_handler+0x24cc>)
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	4798      	blx	r3
				if (content_found == HTTP_RESET)
 8021d20:	e02d      	b.n	8021d7e <http_process_handler+0x2426>
			}
			else
			{
				send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8021d22:	23ca      	movs	r3, #202	; 0xca
 8021d24:	005a      	lsls	r2, r3, #1
 8021d26:	4b34      	ldr	r3, [pc, #208]	; (8021df8 <http_process_handler+0x24a0>)
 8021d28:	2190      	movs	r1, #144	; 0x90
 8021d2a:	0109      	lsls	r1, r1, #4
 8021d2c:	185b      	adds	r3, r3, r1
 8021d2e:	2130      	movs	r1, #48	; 0x30
 8021d30:	468c      	mov	ip, r1
 8021d32:	2108      	movs	r1, #8
 8021d34:	4688      	mov	r8, r1
 8021d36:	2108      	movs	r1, #8
 8021d38:	4689      	mov	r9, r1
 8021d3a:	44b9      	add	r9, r7
 8021d3c:	44c8      	add	r8, r9
 8021d3e:	44c4      	add	ip, r8
 8021d40:	4463      	add	r3, ip
 8021d42:	7818      	ldrb	r0, [r3, #0]
 8021d44:	0013      	movs	r3, r2
 8021d46:	2200      	movs	r2, #0
 8021d48:	2108      	movs	r1, #8
 8021d4a:	f7fd faa5 	bl	801f298 <send_http_response_header>
		}
		else // HTTP POST Method; Content not found
		{
			send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
		}
		break;
 8021d4e:	e045      	b.n	8021ddc <http_process_handler+0x2484>
			send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 8021d50:	23ca      	movs	r3, #202	; 0xca
 8021d52:	005a      	lsls	r2, r3, #1
 8021d54:	4b28      	ldr	r3, [pc, #160]	; (8021df8 <http_process_handler+0x24a0>)
 8021d56:	2190      	movs	r1, #144	; 0x90
 8021d58:	0109      	lsls	r1, r1, #4
 8021d5a:	185b      	adds	r3, r3, r1
 8021d5c:	2130      	movs	r1, #48	; 0x30
 8021d5e:	468c      	mov	ip, r1
 8021d60:	2108      	movs	r1, #8
 8021d62:	4688      	mov	r8, r1
 8021d64:	2108      	movs	r1, #8
 8021d66:	4689      	mov	r9, r1
 8021d68:	44b9      	add	r9, r7
 8021d6a:	44c8      	add	r8, r9
 8021d6c:	44c4      	add	ip, r8
 8021d6e:	4463      	add	r3, ip
 8021d70:	7818      	ldrb	r0, [r3, #0]
 8021d72:	0013      	movs	r3, r2
 8021d74:	2200      	movs	r2, #0
 8021d76:	2100      	movs	r1, #0
 8021d78:	f7fd fa8e 	bl	801f298 <send_http_response_header>
		break;
 8021d7c:	e02e      	b.n	8021ddc <http_process_handler+0x2484>
 8021d7e:	e02d      	b.n	8021ddc <http_process_handler+0x2484>

	default:
		http_status = STATUS_BAD_REQ;
 8021d80:	491b      	ldr	r1, [pc, #108]	; (8021df0 <http_process_handler+0x2498>)
 8021d82:	2030      	movs	r0, #48	; 0x30
 8021d84:	180b      	adds	r3, r1, r0
 8021d86:	2208      	movs	r2, #8
 8021d88:	4694      	mov	ip, r2
 8021d8a:	2208      	movs	r2, #8
 8021d8c:	4690      	mov	r8, r2
 8021d8e:	44b8      	add	r8, r7
 8021d90:	44c4      	add	ip, r8
 8021d92:	4463      	add	r3, ip
 8021d94:	22c8      	movs	r2, #200	; 0xc8
 8021d96:	0052      	lsls	r2, r2, #1
 8021d98:	801a      	strh	r2, [r3, #0]
		send_http_response_header(s, 0, 0, http_status);
 8021d9a:	180b      	adds	r3, r1, r0
 8021d9c:	2208      	movs	r2, #8
 8021d9e:	4694      	mov	ip, r2
 8021da0:	2208      	movs	r2, #8
 8021da2:	4690      	mov	r8, r2
 8021da4:	44b8      	add	r8, r7
 8021da6:	44c4      	add	ip, r8
 8021da8:	4463      	add	r3, ip
 8021daa:	881a      	ldrh	r2, [r3, #0]
 8021dac:	4b12      	ldr	r3, [pc, #72]	; (8021df8 <http_process_handler+0x24a0>)
 8021dae:	2190      	movs	r1, #144	; 0x90
 8021db0:	0109      	lsls	r1, r1, #4
 8021db2:	185b      	adds	r3, r3, r1
 8021db4:	2130      	movs	r1, #48	; 0x30
 8021db6:	468c      	mov	ip, r1
 8021db8:	2108      	movs	r1, #8
 8021dba:	4688      	mov	r8, r1
 8021dbc:	2108      	movs	r1, #8
 8021dbe:	4689      	mov	r9, r1
 8021dc0:	44b9      	add	r9, r7
 8021dc2:	44c8      	add	r8, r9
 8021dc4:	44c4      	add	ip, r8
 8021dc6:	4463      	add	r3, ip
 8021dc8:	7818      	ldrb	r0, [r3, #0]
 8021dca:	0013      	movs	r3, r2
 8021dcc:	2200      	movs	r2, #0
 8021dce:	2100      	movs	r1, #0
 8021dd0:	f7fd fa62 	bl	801f298 <send_http_response_header>
		break;
 8021dd4:	e002      	b.n	8021ddc <http_process_handler+0x2484>
		return; // exception handling; invalid number
 8021dd6:	46c0      	nop			; (mov r8, r8)
 8021dd8:	e000      	b.n	8021ddc <http_process_handler+0x2484>
		break;
 8021dda:	46c0      	nop			; (mov r8, r8)
	}
}
 8021ddc:	46bd      	mov	sp, r7
 8021dde:	4b12      	ldr	r3, [pc, #72]	; (8021e28 <http_process_handler+0x24d0>)
 8021de0:	449d      	add	sp, r3
 8021de2:	bcf0      	pop	{r4, r5, r6, r7}
 8021de4:	46bb      	mov	fp, r7
 8021de6:	46b2      	mov	sl, r6
 8021de8:	46a9      	mov	r9, r5
 8021dea:	46a0      	mov	r8, r4
 8021dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021dee:	46c0      	nop			; (mov r8, r8)
 8021df0:	000008fa 	.word	0x000008fa
 8021df4:	000008a4 	.word	0x000008a4
 8021df8:	fffff707 	.word	0xfffff707
 8021dfc:	20007de0 	.word	0x20007de0
 8021e00:	000008fc 	.word	0x000008fc
 8021e04:	080318a0 	.word	0x080318a0
 8021e08:	08031810 	.word	0x08031810
 8021e0c:	000008f9 	.word	0x000008f9
 8021e10:	080318a8 	.word	0x080318a8
 8021e14:	080318b8 	.word	0x080318b8
 8021e18:	080318cc 	.word	0x080318cc
 8021e1c:	000007be 	.word	0x000007be
 8021e20:	20007e18 	.word	0x20007e18
 8021e24:	200050c0 	.word	0x200050c0
 8021e28:	00000944 	.word	0x00000944

08021e2c <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 8021e2c:	b580      	push	{r7, lr}
 8021e2e:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 8021e30:	4b03      	ldr	r3, [pc, #12]	; (8021e40 <httpServer_time_handler+0x14>)
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	1c5a      	adds	r2, r3, #1
 8021e36:	4b02      	ldr	r3, [pc, #8]	; (8021e40 <httpServer_time_handler+0x14>)
 8021e38:	601a      	str	r2, [r3, #0]
}
 8021e3a:	46c0      	nop			; (mov r8, r8)
 8021e3c:	46bd      	mov	sp, r7
 8021e3e:	bd80      	pop	{r7, pc}
 8021e40:	20007e20 	.word	0x20007e20

08021e44 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 8021e44:	b580      	push	{r7, lr}
 8021e46:	af00      	add	r7, sp, #0
	return httpServer_tick_1s;
 8021e48:	4b02      	ldr	r3, [pc, #8]	; (8021e54 <get_httpServer_timecount+0x10>)
 8021e4a:	681b      	ldr	r3, [r3, #0]
}
 8021e4c:	0018      	movs	r0, r3
 8021e4e:	46bd      	mov	sp, r7
 8021e50:	bd80      	pop	{r7, pc}
 8021e52:	46c0      	nop			; (mov r8, r8)
 8021e54:	20007e20 	.word	0x20007e20

08021e58 <reg_httpServer_webContent>:

void reg_httpServer_webContent(uint8_t *content_name, uint8_t *content)
{
 8021e58:	b590      	push	{r4, r7, lr}
 8021e5a:	b085      	sub	sp, #20
 8021e5c:	af00      	add	r7, sp, #0
 8021e5e:	6078      	str	r0, [r7, #4]
 8021e60:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len = 0;
 8021e62:	2300      	movs	r3, #0
 8021e64:	60fb      	str	r3, [r7, #12]
	printf("total_content_cnt = %d\n\n", total_content_cnt);
 8021e66:	4b37      	ldr	r3, [pc, #220]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021e68:	881b      	ldrh	r3, [r3, #0]
 8021e6a:	001a      	movs	r2, r3
 8021e6c:	4b36      	ldr	r3, [pc, #216]	; (8021f48 <reg_httpServer_webContent+0xf0>)
 8021e6e:	0011      	movs	r1, r2
 8021e70:	0018      	movs	r0, r3
 8021e72:	f000 fccf 	bl	8022814 <iprintf>

	if (content_name == NULL)
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d10a      	bne.n	8021e92 <reg_httpServer_webContent+0x3a>
	{
		printf("content null\n");
 8021e7c:	4b33      	ldr	r3, [pc, #204]	; (8021f4c <reg_httpServer_webContent+0xf4>)
 8021e7e:	0018      	movs	r0, r3
 8021e80:	f000 fd38 	bl	80228f4 <puts>
		printf("content name :%s\n", content_name);
 8021e84:	687a      	ldr	r2, [r7, #4]
 8021e86:	4b32      	ldr	r3, [pc, #200]	; (8021f50 <reg_httpServer_webContent+0xf8>)
 8021e88:	0011      	movs	r1, r2
 8021e8a:	0018      	movs	r0, r3
 8021e8c:	f000 fcc2 	bl	8022814 <iprintf>
		// printf("content :%s\n",content);
		return;
 8021e90:	e055      	b.n	8021f3e <reg_httpServer_webContent+0xe6>
	}
	else if (total_content_cnt >= MAX_CONTENT_CALLBACK)
 8021e92:	4b2c      	ldr	r3, [pc, #176]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021e94:	881b      	ldrh	r3, [r3, #0]
 8021e96:	2b13      	cmp	r3, #19
 8021e98:	d850      	bhi.n	8021f3c <reg_httpServer_webContent+0xe4>
	{

		return;
	}

	name_len = strlen((char *)content_name);
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	0018      	movs	r0, r3
 8021e9e:	f7e0 f939 	bl	8002114 <strlen>
 8021ea2:	0002      	movs	r2, r0
 8021ea4:	230a      	movs	r3, #10
 8021ea6:	18fb      	adds	r3, r7, r3
 8021ea8:	801a      	strh	r2, [r3, #0]
	if (NULL != content)
 8021eaa:	683b      	ldr	r3, [r7, #0]
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	d005      	beq.n	8021ebc <reg_httpServer_webContent+0x64>
		content_len = strlen((char *)content);
 8021eb0:	683b      	ldr	r3, [r7, #0]
 8021eb2:	0018      	movs	r0, r3
 8021eb4:	f7e0 f92e 	bl	8002114 <strlen>
 8021eb8:	0003      	movs	r3, r0
 8021eba:	60fb      	str	r3, [r7, #12]
	// 	web_content[2].content_len = content_len;
	// 	//web_content[total_content_cnt].content = malloc(content_len+10);
	// 	web_content[2].content = content;
	// 	//printf("content : %s\n\n", content);
	// }else{
	web_content[total_content_cnt].content_name = malloc(name_len + 1);
 8021ebc:	230a      	movs	r3, #10
 8021ebe:	18fb      	adds	r3, r7, r3
 8021ec0:	881b      	ldrh	r3, [r3, #0]
 8021ec2:	3301      	adds	r3, #1
 8021ec4:	001a      	movs	r2, r3
 8021ec6:	4b1f      	ldr	r3, [pc, #124]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021ec8:	881b      	ldrh	r3, [r3, #0]
 8021eca:	001c      	movs	r4, r3
 8021ecc:	0010      	movs	r0, r2
 8021ece:	f000 fa91 	bl	80223f4 <malloc>
 8021ed2:	0003      	movs	r3, r0
 8021ed4:	0019      	movs	r1, r3
 8021ed6:	4a1f      	ldr	r2, [pc, #124]	; (8021f54 <reg_httpServer_webContent+0xfc>)
 8021ed8:	0023      	movs	r3, r4
 8021eda:	005b      	lsls	r3, r3, #1
 8021edc:	191b      	adds	r3, r3, r4
 8021ede:	009b      	lsls	r3, r3, #2
 8021ee0:	5099      	str	r1, [r3, r2]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 8021ee2:	4b18      	ldr	r3, [pc, #96]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021ee4:	881b      	ldrh	r3, [r3, #0]
 8021ee6:	0019      	movs	r1, r3
 8021ee8:	4a1a      	ldr	r2, [pc, #104]	; (8021f54 <reg_httpServer_webContent+0xfc>)
 8021eea:	000b      	movs	r3, r1
 8021eec:	005b      	lsls	r3, r3, #1
 8021eee:	185b      	adds	r3, r3, r1
 8021ef0:	009b      	lsls	r3, r3, #2
 8021ef2:	589b      	ldr	r3, [r3, r2]
 8021ef4:	687a      	ldr	r2, [r7, #4]
 8021ef6:	0011      	movs	r1, r2
 8021ef8:	0018      	movs	r0, r3
 8021efa:	f001 fd2d 	bl	8023958 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 8021efe:	4b11      	ldr	r3, [pc, #68]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021f00:	881b      	ldrh	r3, [r3, #0]
 8021f02:	0019      	movs	r1, r3
 8021f04:	4a13      	ldr	r2, [pc, #76]	; (8021f54 <reg_httpServer_webContent+0xfc>)
 8021f06:	000b      	movs	r3, r1
 8021f08:	005b      	lsls	r3, r3, #1
 8021f0a:	185b      	adds	r3, r3, r1
 8021f0c:	009b      	lsls	r3, r3, #2
 8021f0e:	18d3      	adds	r3, r2, r3
 8021f10:	3304      	adds	r3, #4
 8021f12:	68fa      	ldr	r2, [r7, #12]
 8021f14:	601a      	str	r2, [r3, #0]
	// web_content[total_content_cnt].content = malloc(content_len+10);
	web_content[total_content_cnt].content = content;
 8021f16:	4b0b      	ldr	r3, [pc, #44]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021f18:	881b      	ldrh	r3, [r3, #0]
 8021f1a:	0019      	movs	r1, r3
 8021f1c:	4a0d      	ldr	r2, [pc, #52]	; (8021f54 <reg_httpServer_webContent+0xfc>)
 8021f1e:	000b      	movs	r3, r1
 8021f20:	005b      	lsls	r3, r3, #1
 8021f22:	185b      	adds	r3, r3, r1
 8021f24:	009b      	lsls	r3, r3, #2
 8021f26:	18d3      	adds	r3, r2, r3
 8021f28:	3308      	adds	r3, #8
 8021f2a:	683a      	ldr	r2, [r7, #0]
 8021f2c:	601a      	str	r2, [r3, #0]
	// printf("content : %s\n\n", content);
	total_content_cnt++;
 8021f2e:	4b05      	ldr	r3, [pc, #20]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021f30:	881b      	ldrh	r3, [r3, #0]
 8021f32:	3301      	adds	r3, #1
 8021f34:	b29a      	uxth	r2, r3
 8021f36:	4b03      	ldr	r3, [pc, #12]	; (8021f44 <reg_httpServer_webContent+0xec>)
 8021f38:	801a      	strh	r2, [r3, #0]
 8021f3a:	e000      	b.n	8021f3e <reg_httpServer_webContent+0xe6>
		return;
 8021f3c:	46c0      	nop			; (mov r8, r8)
	// }
}
 8021f3e:	46bd      	mov	sp, r7
 8021f40:	b005      	add	sp, #20
 8021f42:	bd90      	pop	{r4, r7, pc}
 8021f44:	20007e14 	.word	0x20007e14
 8021f48:	08031908 	.word	0x08031908
 8021f4c:	08031924 	.word	0x08031924
 8021f50:	08031934 	.word	0x08031934
 8021f54:	200082c4 	.word	0x200082c4

08021f58 <display_reg_webContent_list>:

uint8_t display_reg_webContent_list(void)
{
 8021f58:	b580      	push	{r7, lr}
 8021f5a:	b082      	sub	sp, #8
 8021f5c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t ret;

	if (total_content_cnt == 0)
 8021f5e:	4b3e      	ldr	r3, [pc, #248]	; (8022058 <display_reg_webContent_list+0x100>)
 8021f60:	881b      	ldrh	r3, [r3, #0]
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	d107      	bne.n	8021f76 <display_reg_webContent_list+0x1e>
	{
		printf(">> Web content file not found\r\n");
 8021f66:	4b3d      	ldr	r3, [pc, #244]	; (802205c <display_reg_webContent_list+0x104>)
 8021f68:	0018      	movs	r0, r3
 8021f6a:	f000 fcc3 	bl	80228f4 <puts>
		ret = 0;
 8021f6e:	1d7b      	adds	r3, r7, #5
 8021f70:	2200      	movs	r2, #0
 8021f72:	701a      	strb	r2, [r3, #0]
 8021f74:	e069      	b.n	802204a <display_reg_webContent_list+0xf2>
	}
	else
	{
		printf("\r\n=== List of Web content in code flash ===\r\n");
 8021f76:	4b3a      	ldr	r3, [pc, #232]	; (8022060 <display_reg_webContent_list+0x108>)
 8021f78:	0018      	movs	r0, r3
 8021f7a:	f000 fcbb 	bl	80228f4 <puts>
		for (i = 0; i < total_content_cnt; i++)
 8021f7e:	1dbb      	adds	r3, r7, #6
 8021f80:	2200      	movs	r2, #0
 8021f82:	801a      	strh	r2, [r3, #0]
 8021f84:	e054      	b.n	8022030 <display_reg_webContent_list+0xd8>
		{
			printf(" [%d] ", i + 1);
 8021f86:	1dbb      	adds	r3, r7, #6
 8021f88:	881b      	ldrh	r3, [r3, #0]
 8021f8a:	1c5a      	adds	r2, r3, #1
 8021f8c:	4b35      	ldr	r3, [pc, #212]	; (8022064 <display_reg_webContent_list+0x10c>)
 8021f8e:	0011      	movs	r1, r2
 8021f90:	0018      	movs	r0, r3
 8021f92:	f000 fc3f 	bl	8022814 <iprintf>
			printf("%s, ", web_content[i].content_name);
 8021f96:	1dbb      	adds	r3, r7, #6
 8021f98:	881a      	ldrh	r2, [r3, #0]
 8021f9a:	4933      	ldr	r1, [pc, #204]	; (8022068 <display_reg_webContent_list+0x110>)
 8021f9c:	0013      	movs	r3, r2
 8021f9e:	005b      	lsls	r3, r3, #1
 8021fa0:	189b      	adds	r3, r3, r2
 8021fa2:	009b      	lsls	r3, r3, #2
 8021fa4:	585a      	ldr	r2, [r3, r1]
 8021fa6:	4b31      	ldr	r3, [pc, #196]	; (802206c <display_reg_webContent_list+0x114>)
 8021fa8:	0011      	movs	r1, r2
 8021faa:	0018      	movs	r0, r3
 8021fac:	f000 fc32 	bl	8022814 <iprintf>
			printf("%ld byte, ", web_content[i].content_len);
 8021fb0:	1dbb      	adds	r3, r7, #6
 8021fb2:	881a      	ldrh	r2, [r3, #0]
 8021fb4:	492c      	ldr	r1, [pc, #176]	; (8022068 <display_reg_webContent_list+0x110>)
 8021fb6:	0013      	movs	r3, r2
 8021fb8:	005b      	lsls	r3, r3, #1
 8021fba:	189b      	adds	r3, r3, r2
 8021fbc:	009b      	lsls	r3, r3, #2
 8021fbe:	18cb      	adds	r3, r1, r3
 8021fc0:	3304      	adds	r3, #4
 8021fc2:	681a      	ldr	r2, [r3, #0]
 8021fc4:	4b2a      	ldr	r3, [pc, #168]	; (8022070 <display_reg_webContent_list+0x118>)
 8021fc6:	0011      	movs	r1, r2
 8021fc8:	0018      	movs	r0, r3
 8021fca:	f000 fc23 	bl	8022814 <iprintf>

			if (web_content[i].content_len < 30){
 8021fce:	1dbb      	adds	r3, r7, #6
 8021fd0:	881a      	ldrh	r2, [r3, #0]
 8021fd2:	4925      	ldr	r1, [pc, #148]	; (8022068 <display_reg_webContent_list+0x110>)
 8021fd4:	0013      	movs	r3, r2
 8021fd6:	005b      	lsls	r3, r3, #1
 8021fd8:	189b      	adds	r3, r3, r2
 8021fda:	009b      	lsls	r3, r3, #2
 8021fdc:	18cb      	adds	r3, r1, r3
 8021fde:	3304      	adds	r3, #4
 8021fe0:	681b      	ldr	r3, [r3, #0]
 8021fe2:	2b1d      	cmp	r3, #29
 8021fe4:	d81b      	bhi.n	802201e <display_reg_webContent_list+0xc6>
				if(web_content[i].content)
 8021fe6:	1dbb      	adds	r3, r7, #6
 8021fe8:	881a      	ldrh	r2, [r3, #0]
 8021fea:	491f      	ldr	r1, [pc, #124]	; (8022068 <display_reg_webContent_list+0x110>)
 8021fec:	0013      	movs	r3, r2
 8021fee:	005b      	lsls	r3, r3, #1
 8021ff0:	189b      	adds	r3, r3, r2
 8021ff2:	009b      	lsls	r3, r3, #2
 8021ff4:	18cb      	adds	r3, r1, r3
 8021ff6:	3308      	adds	r3, #8
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	d013      	beq.n	8022026 <display_reg_webContent_list+0xce>
					printf("[%s]\r\n", web_content[i].content);
 8021ffe:	1dbb      	adds	r3, r7, #6
 8022000:	881a      	ldrh	r2, [r3, #0]
 8022002:	4919      	ldr	r1, [pc, #100]	; (8022068 <display_reg_webContent_list+0x110>)
 8022004:	0013      	movs	r3, r2
 8022006:	005b      	lsls	r3, r3, #1
 8022008:	189b      	adds	r3, r3, r2
 802200a:	009b      	lsls	r3, r3, #2
 802200c:	18cb      	adds	r3, r1, r3
 802200e:	3308      	adds	r3, #8
 8022010:	681a      	ldr	r2, [r3, #0]
 8022012:	4b18      	ldr	r3, [pc, #96]	; (8022074 <display_reg_webContent_list+0x11c>)
 8022014:	0011      	movs	r1, r2
 8022016:	0018      	movs	r0, r3
 8022018:	f000 fbfc 	bl	8022814 <iprintf>
 802201c:	e003      	b.n	8022026 <display_reg_webContent_list+0xce>
			}
			else
				printf("[ ... ]\r\n");
 802201e:	4b16      	ldr	r3, [pc, #88]	; (8022078 <display_reg_webContent_list+0x120>)
 8022020:	0018      	movs	r0, r3
 8022022:	f000 fc67 	bl	80228f4 <puts>
		for (i = 0; i < total_content_cnt; i++)
 8022026:	1dbb      	adds	r3, r7, #6
 8022028:	881a      	ldrh	r2, [r3, #0]
 802202a:	1dbb      	adds	r3, r7, #6
 802202c:	3201      	adds	r2, #1
 802202e:	801a      	strh	r2, [r3, #0]
 8022030:	4b09      	ldr	r3, [pc, #36]	; (8022058 <display_reg_webContent_list+0x100>)
 8022032:	881b      	ldrh	r3, [r3, #0]
 8022034:	1dba      	adds	r2, r7, #6
 8022036:	8812      	ldrh	r2, [r2, #0]
 8022038:	429a      	cmp	r2, r3
 802203a:	d3a4      	bcc.n	8021f86 <display_reg_webContent_list+0x2e>
		}
		printf("=========================================\r\n\r\n");
 802203c:	4b0f      	ldr	r3, [pc, #60]	; (802207c <display_reg_webContent_list+0x124>)
 802203e:	0018      	movs	r0, r3
 8022040:	f000 fc58 	bl	80228f4 <puts>
		ret = 1;
 8022044:	1d7b      	adds	r3, r7, #5
 8022046:	2201      	movs	r2, #1
 8022048:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 802204a:	1d7b      	adds	r3, r7, #5
 802204c:	781b      	ldrb	r3, [r3, #0]
}
 802204e:	0018      	movs	r0, r3
 8022050:	46bd      	mov	sp, r7
 8022052:	b002      	add	sp, #8
 8022054:	bd80      	pop	{r7, pc}
 8022056:	46c0      	nop			; (mov r8, r8)
 8022058:	20007e14 	.word	0x20007e14
 802205c:	08031948 	.word	0x08031948
 8022060:	08031968 	.word	0x08031968
 8022064:	08031998 	.word	0x08031998
 8022068:	200082c4 	.word	0x200082c4
 802206c:	080319a0 	.word	0x080319a0
 8022070:	080319a8 	.word	0x080319a8
 8022074:	080319b4 	.word	0x080319b4
 8022078:	080319bc 	.word	0x080319bc
 802207c:	080319c8 	.word	0x080319c8

08022080 <find_userReg_webContent>:

uint8_t find_userReg_webContent(uint8_t *content_name, uint16_t *content_num, uint32_t *file_len)
{
 8022080:	b590      	push	{r4, r7, lr}
 8022082:	b087      	sub	sp, #28
 8022084:	af00      	add	r7, sp, #0
 8022086:	60f8      	str	r0, [r7, #12]
 8022088:	60b9      	str	r1, [r7, #8]
 802208a:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 802208c:	2315      	movs	r3, #21
 802208e:	18fb      	adds	r3, r7, r3
 8022090:	2200      	movs	r2, #0
 8022092:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < total_content_cnt; i++)
 8022094:	2316      	movs	r3, #22
 8022096:	18fb      	adds	r3, r7, r3
 8022098:	2200      	movs	r2, #0
 802209a:	801a      	strh	r2, [r3, #0]
 802209c:	e02b      	b.n	80220f6 <find_userReg_webContent+0x76>
	{
		if (!strcmp((char *)content_name, (char *)web_content[i].content_name))
 802209e:	2416      	movs	r4, #22
 80220a0:	193b      	adds	r3, r7, r4
 80220a2:	881a      	ldrh	r2, [r3, #0]
 80220a4:	491b      	ldr	r1, [pc, #108]	; (8022114 <find_userReg_webContent+0x94>)
 80220a6:	0013      	movs	r3, r2
 80220a8:	005b      	lsls	r3, r3, #1
 80220aa:	189b      	adds	r3, r3, r2
 80220ac:	009b      	lsls	r3, r3, #2
 80220ae:	585a      	ldr	r2, [r3, r1]
 80220b0:	68fb      	ldr	r3, [r7, #12]
 80220b2:	0011      	movs	r1, r2
 80220b4:	0018      	movs	r0, r3
 80220b6:	f7e0 f823 	bl	8002100 <strcmp>
 80220ba:	1e03      	subs	r3, r0, #0
 80220bc:	d115      	bne.n	80220ea <find_userReg_webContent+0x6a>
		{
			*file_len = web_content[i].content_len;
 80220be:	0020      	movs	r0, r4
 80220c0:	183b      	adds	r3, r7, r0
 80220c2:	881a      	ldrh	r2, [r3, #0]
 80220c4:	4913      	ldr	r1, [pc, #76]	; (8022114 <find_userReg_webContent+0x94>)
 80220c6:	0013      	movs	r3, r2
 80220c8:	005b      	lsls	r3, r3, #1
 80220ca:	189b      	adds	r3, r3, r2
 80220cc:	009b      	lsls	r3, r3, #2
 80220ce:	18cb      	adds	r3, r1, r3
 80220d0:	3304      	adds	r3, #4
 80220d2:	681a      	ldr	r2, [r3, #0]
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	601a      	str	r2, [r3, #0]
			*content_num = i;
 80220d8:	68bb      	ldr	r3, [r7, #8]
 80220da:	183a      	adds	r2, r7, r0
 80220dc:	8812      	ldrh	r2, [r2, #0]
 80220de:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 80220e0:	2315      	movs	r3, #21
 80220e2:	18fb      	adds	r3, r7, r3
 80220e4:	2201      	movs	r2, #1
 80220e6:	701a      	strb	r2, [r3, #0]
			break;
 80220e8:	e00c      	b.n	8022104 <find_userReg_webContent+0x84>
	for (i = 0; i < total_content_cnt; i++)
 80220ea:	2116      	movs	r1, #22
 80220ec:	187b      	adds	r3, r7, r1
 80220ee:	881a      	ldrh	r2, [r3, #0]
 80220f0:	187b      	adds	r3, r7, r1
 80220f2:	3201      	adds	r2, #1
 80220f4:	801a      	strh	r2, [r3, #0]
 80220f6:	4b08      	ldr	r3, [pc, #32]	; (8022118 <find_userReg_webContent+0x98>)
 80220f8:	881b      	ldrh	r3, [r3, #0]
 80220fa:	2216      	movs	r2, #22
 80220fc:	18ba      	adds	r2, r7, r2
 80220fe:	8812      	ldrh	r2, [r2, #0]
 8022100:	429a      	cmp	r2, r3
 8022102:	d3cc      	bcc.n	802209e <find_userReg_webContent+0x1e>
		}
	}
	return ret;
 8022104:	2315      	movs	r3, #21
 8022106:	18fb      	adds	r3, r7, r3
 8022108:	781b      	ldrb	r3, [r3, #0]
}
 802210a:	0018      	movs	r0, r3
 802210c:	46bd      	mov	sp, r7
 802210e:	b007      	add	sp, #28
 8022110:	bd90      	pop	{r4, r7, pc}
 8022112:	46c0      	nop			; (mov r8, r8)
 8022114:	200082c4 	.word	0x200082c4
 8022118:	20007e14 	.word	0x20007e14

0802211c <read_userReg_webContent>:

uint16_t read_userReg_webContent(uint16_t content_num, uint8_t *buf, uint32_t offset, uint16_t size)
{
 802211c:	b590      	push	{r4, r7, lr}
 802211e:	b087      	sub	sp, #28
 8022120:	af00      	add	r7, sp, #0
 8022122:	60b9      	str	r1, [r7, #8]
 8022124:	607a      	str	r2, [r7, #4]
 8022126:	0019      	movs	r1, r3
 8022128:	240e      	movs	r4, #14
 802212a:	193b      	adds	r3, r7, r4
 802212c:	1c02      	adds	r2, r0, #0
 802212e:	801a      	strh	r2, [r3, #0]
 8022130:	230c      	movs	r3, #12
 8022132:	18fb      	adds	r3, r7, r3
 8022134:	1c0a      	adds	r2, r1, #0
 8022136:	801a      	strh	r2, [r3, #0]
	uint16_t ret = 0;
 8022138:	2312      	movs	r3, #18
 802213a:	18fb      	adds	r3, r7, r3
 802213c:	2200      	movs	r2, #0
 802213e:	801a      	strh	r2, [r3, #0]
	uint8_t *ptr;

	if (content_num > total_content_cnt)
 8022140:	4b1b      	ldr	r3, [pc, #108]	; (80221b0 <read_userReg_webContent+0x94>)
 8022142:	881b      	ldrh	r3, [r3, #0]
 8022144:	193a      	adds	r2, r7, r4
 8022146:	8812      	ldrh	r2, [r2, #0]
 8022148:	429a      	cmp	r2, r3
 802214a:	d901      	bls.n	8022150 <read_userReg_webContent+0x34>
		return 0;
 802214c:	2300      	movs	r3, #0
 802214e:	e02a      	b.n	80221a6 <read_userReg_webContent+0x8a>

	ptr = web_content[content_num].content;
 8022150:	230e      	movs	r3, #14
 8022152:	18fb      	adds	r3, r7, r3
 8022154:	881a      	ldrh	r2, [r3, #0]
 8022156:	4917      	ldr	r1, [pc, #92]	; (80221b4 <read_userReg_webContent+0x98>)
 8022158:	0013      	movs	r3, r2
 802215a:	005b      	lsls	r3, r3, #1
 802215c:	189b      	adds	r3, r3, r2
 802215e:	009b      	lsls	r3, r3, #2
 8022160:	18cb      	adds	r3, r1, r3
 8022162:	3308      	adds	r3, #8
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	617b      	str	r3, [r7, #20]
	if (offset)
 8022168:	687b      	ldr	r3, [r7, #4]
 802216a:	2b00      	cmp	r3, #0
 802216c:	d003      	beq.n	8022176 <read_userReg_webContent+0x5a>
		ptr += offset;
 802216e:	697a      	ldr	r2, [r7, #20]
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	18d3      	adds	r3, r2, r3
 8022174:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 8022176:	240c      	movs	r4, #12
 8022178:	193b      	adds	r3, r7, r4
 802217a:	881a      	ldrh	r2, [r3, #0]
 802217c:	6979      	ldr	r1, [r7, #20]
 802217e:	68bb      	ldr	r3, [r7, #8]
 8022180:	0018      	movs	r0, r3
 8022182:	f000 fd3d 	bl	8022c00 <strncpy>
	*(buf + size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 8022186:	193b      	adds	r3, r7, r4
 8022188:	881b      	ldrh	r3, [r3, #0]
 802218a:	68ba      	ldr	r2, [r7, #8]
 802218c:	18d3      	adds	r3, r2, r3
 802218e:	2200      	movs	r2, #0
 8022190:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 8022192:	68bb      	ldr	r3, [r7, #8]
 8022194:	0018      	movs	r0, r3
 8022196:	f7df ffbd 	bl	8002114 <strlen>
 802219a:	0002      	movs	r2, r0
 802219c:	2112      	movs	r1, #18
 802219e:	187b      	adds	r3, r7, r1
 80221a0:	801a      	strh	r2, [r3, #0]
	return ret;
 80221a2:	187b      	adds	r3, r7, r1
 80221a4:	881b      	ldrh	r3, [r3, #0]
}
 80221a6:	0018      	movs	r0, r3
 80221a8:	46bd      	mov	sp, r7
 80221aa:	b007      	add	sp, #28
 80221ac:	bd90      	pop	{r4, r7, pc}
 80221ae:	46c0      	nop			; (mov r8, r8)
 80221b0:	20007e14 	.word	0x20007e14
 80221b4:	200082c4 	.word	0x200082c4

080221b8 <http_get_cgi_handler>:
#include <string.h>
#include <stdlib.h>
#include "httpUtil.h"

uint8_t http_get_cgi_handler(uint8_t *uri_name, uint8_t *buf, uint32_t *file_len)
{
 80221b8:	b590      	push	{r4, r7, lr}
 80221ba:	b087      	sub	sp, #28
 80221bc:	af00      	add	r7, sp, #0
 80221be:	60f8      	str	r0, [r7, #12]
 80221c0:	60b9      	str	r1, [r7, #8]
 80221c2:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 80221c4:	2417      	movs	r4, #23
 80221c6:	193b      	adds	r3, r7, r4
 80221c8:	2201      	movs	r2, #1
 80221ca:	701a      	strb	r2, [r3, #0]
	uint16_t len = 0;
 80221cc:	2114      	movs	r1, #20
 80221ce:	187b      	adds	r3, r7, r1
 80221d0:	2200      	movs	r2, #0
 80221d2:	801a      	strh	r2, [r3, #0]

	if (predefined_get_cgi_processor(uri_name, buf, &len))
 80221d4:	187a      	adds	r2, r7, r1
 80221d6:	68b9      	ldr	r1, [r7, #8]
 80221d8:	68fb      	ldr	r3, [r7, #12]
 80221da:	0018      	movs	r0, r3
 80221dc:	f7ec f952 	bl	800e484 <predefined_get_cgi_processor>
 80221e0:	1e03      	subs	r3, r0, #0
 80221e2:	d10a      	bne.n	80221fa <http_get_cgi_handler+0x42>
	{
		;
	}
	else if (strcmp((const char *)uri_name, "example.cgi") == 0)
 80221e4:	4a0e      	ldr	r2, [pc, #56]	; (8022220 <http_get_cgi_handler+0x68>)
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	0011      	movs	r1, r2
 80221ea:	0018      	movs	r0, r3
 80221ec:	f7df ff88 	bl	8002100 <strcmp>
 80221f0:	1e03      	subs	r3, r0, #0
 80221f2:	d002      	beq.n	80221fa <http_get_cgi_handler+0x42>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 80221f4:	193b      	adds	r3, r7, r4
 80221f6:	2200      	movs	r2, #0
 80221f8:	701a      	strb	r2, [r3, #0]
	}

	if (ret)
 80221fa:	2317      	movs	r3, #23
 80221fc:	18fb      	adds	r3, r7, r3
 80221fe:	781b      	ldrb	r3, [r3, #0]
 8022200:	2b00      	cmp	r3, #0
 8022202:	d005      	beq.n	8022210 <http_get_cgi_handler+0x58>
		*file_len = len;
 8022204:	2314      	movs	r3, #20
 8022206:	18fb      	adds	r3, r7, r3
 8022208:	881b      	ldrh	r3, [r3, #0]
 802220a:	001a      	movs	r2, r3
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	601a      	str	r2, [r3, #0]
	return ret;
 8022210:	2317      	movs	r3, #23
 8022212:	18fb      	adds	r3, r7, r3
 8022214:	781b      	ldrb	r3, [r3, #0]
}
 8022216:	0018      	movs	r0, r3
 8022218:	46bd      	mov	sp, r7
 802221a:	b007      	add	sp, #28
 802221c:	bd90      	pop	{r4, r7, pc}
 802221e:	46c0      	nop			; (mov r8, r8)
 8022220:	080319f8 	.word	0x080319f8

08022224 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t *uri_name, st_http_request *p_http_request, uint8_t *buf, uint32_t *file_len)
{
 8022224:	b5b0      	push	{r4, r5, r7, lr}
 8022226:	b086      	sub	sp, #24
 8022228:	af00      	add	r7, sp, #0
 802222a:	60f8      	str	r0, [r7, #12]
 802222c:	60b9      	str	r1, [r7, #8]
 802222e:	607a      	str	r2, [r7, #4]
 8022230:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 8022232:	2317      	movs	r3, #23
 8022234:	18fb      	adds	r3, r7, r3
 8022236:	2201      	movs	r2, #1
 8022238:	701a      	strb	r2, [r3, #0]
	uint16_t len = 0;
 802223a:	2414      	movs	r4, #20
 802223c:	193b      	adds	r3, r7, r4
 802223e:	2200      	movs	r2, #0
 8022240:	801a      	strh	r2, [r3, #0]
	uint8_t val = 0;
 8022242:	2516      	movs	r5, #22
 8022244:	197b      	adds	r3, r7, r5
 8022246:	2200      	movs	r2, #0
 8022248:	701a      	strb	r2, [r3, #0]
	if (predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 802224a:	68bb      	ldr	r3, [r7, #8]
 802224c:	1c99      	adds	r1, r3, #2
 802224e:	193b      	adds	r3, r7, r4
 8022250:	687a      	ldr	r2, [r7, #4]
 8022252:	68f8      	ldr	r0, [r7, #12]
 8022254:	f7ec f9d4 	bl	800e600 <predefined_set_cgi_processor>
 8022258:	1e03      	subs	r3, r0, #0
 802225a:	d00e      	beq.n	802227a <http_post_cgi_handler+0x56>
	{
		val = 1;
 802225c:	197b      	adds	r3, r7, r5
 802225e:	2201      	movs	r2, #1
 8022260:	701a      	strb	r2, [r3, #0]
		len = sprintf((char *)buf, "%d", val);
 8022262:	197b      	adds	r3, r7, r5
 8022264:	781a      	ldrb	r2, [r3, #0]
 8022266:	491c      	ldr	r1, [pc, #112]	; (80222d8 <http_post_cgi_handler+0xb4>)
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	0018      	movs	r0, r3
 802226c:	f000 fb80 	bl	8022970 <siprintf>
 8022270:	0003      	movs	r3, r0
 8022272:	b29a      	uxth	r2, r3
 8022274:	193b      	adds	r3, r7, r4
 8022276:	801a      	strh	r2, [r3, #0]
 8022278:	e01c      	b.n	80222b4 <http_post_cgi_handler+0x90>
	}
	else if (strcmp((const char *)uri_name, "example.cgi") == 0)
 802227a:	4a18      	ldr	r2, [pc, #96]	; (80222dc <http_post_cgi_handler+0xb8>)
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	0011      	movs	r1, r2
 8022280:	0018      	movs	r0, r3
 8022282:	f7df ff3d 	bl	8002100 <strcmp>
 8022286:	1e03      	subs	r3, r0, #0
 8022288:	d110      	bne.n	80222ac <http_post_cgi_handler+0x88>
	{
		// To do
		val = 1;
 802228a:	2116      	movs	r1, #22
 802228c:	187b      	adds	r3, r7, r1
 802228e:	2201      	movs	r2, #1
 8022290:	701a      	strb	r2, [r3, #0]
		len = sprintf((char *)buf, "%d", val);
 8022292:	187b      	adds	r3, r7, r1
 8022294:	781a      	ldrb	r2, [r3, #0]
 8022296:	4910      	ldr	r1, [pc, #64]	; (80222d8 <http_post_cgi_handler+0xb4>)
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	0018      	movs	r0, r3
 802229c:	f000 fb68 	bl	8022970 <siprintf>
 80222a0:	0003      	movs	r3, r0
 80222a2:	b29a      	uxth	r2, r3
 80222a4:	2314      	movs	r3, #20
 80222a6:	18fb      	adds	r3, r7, r3
 80222a8:	801a      	strh	r2, [r3, #0]
 80222aa:	e003      	b.n	80222b4 <http_post_cgi_handler+0x90>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 80222ac:	2317      	movs	r3, #23
 80222ae:	18fb      	adds	r3, r7, r3
 80222b0:	2200      	movs	r2, #0
 80222b2:	701a      	strb	r2, [r3, #0]
	}

	if (ret)
 80222b4:	2317      	movs	r3, #23
 80222b6:	18fb      	adds	r3, r7, r3
 80222b8:	781b      	ldrb	r3, [r3, #0]
 80222ba:	2b00      	cmp	r3, #0
 80222bc:	d005      	beq.n	80222ca <http_post_cgi_handler+0xa6>
		*file_len = len;
 80222be:	2314      	movs	r3, #20
 80222c0:	18fb      	adds	r3, r7, r3
 80222c2:	881b      	ldrh	r3, [r3, #0]
 80222c4:	001a      	movs	r2, r3
 80222c6:	683b      	ldr	r3, [r7, #0]
 80222c8:	601a      	str	r2, [r3, #0]
	return ret;
 80222ca:	2317      	movs	r3, #23
 80222cc:	18fb      	adds	r3, r7, r3
 80222ce:	781b      	ldrb	r3, [r3, #0]
}
 80222d0:	0018      	movs	r0, r3
 80222d2:	46bd      	mov	sp, r7
 80222d4:	b006      	add	sp, #24
 80222d6:	bdb0      	pop	{r4, r5, r7, pc}
 80222d8:	08031a04 	.word	0x08031a04
 80222dc:	080319f8 	.word	0x080319f8

080222e0 <_ZdlPvj>:
 80222e0:	b510      	push	{r4, lr}
 80222e2:	f000 f801 	bl	80222e8 <_ZdlPv>
 80222e6:	bd10      	pop	{r4, pc}

080222e8 <_ZdlPv>:
 80222e8:	b510      	push	{r4, lr}
 80222ea:	f000 f88d 	bl	8022408 <free>
 80222ee:	bd10      	pop	{r4, pc}

080222f0 <ceilf>:
 80222f0:	b570      	push	{r4, r5, r6, lr}
 80222f2:	0045      	lsls	r5, r0, #1
 80222f4:	086e      	lsrs	r6, r5, #1
 80222f6:	0e2d      	lsrs	r5, r5, #24
 80222f8:	3d7f      	subs	r5, #127	; 0x7f
 80222fa:	0004      	movs	r4, r0
 80222fc:	2d16      	cmp	r5, #22
 80222fe:	dc25      	bgt.n	802234c <ceilf+0x5c>
 8022300:	2d00      	cmp	r5, #0
 8022302:	da0f      	bge.n	8022324 <ceilf+0x34>
 8022304:	4917      	ldr	r1, [pc, #92]	; (8022364 <ceilf+0x74>)
 8022306:	f7e0 fa23 	bl	8002750 <__aeabi_fadd>
 802230a:	2100      	movs	r1, #0
 802230c:	f7e0 f8b0 	bl	8002470 <__aeabi_fcmpgt>
 8022310:	2800      	cmp	r0, #0
 8022312:	d005      	beq.n	8022320 <ceilf+0x30>
 8022314:	2c00      	cmp	r4, #0
 8022316:	db21      	blt.n	802235c <ceilf+0x6c>
 8022318:	2e00      	cmp	r6, #0
 802231a:	d001      	beq.n	8022320 <ceilf+0x30>
 802231c:	24fe      	movs	r4, #254	; 0xfe
 802231e:	05a4      	lsls	r4, r4, #22
 8022320:	1c20      	adds	r0, r4, #0
 8022322:	e01a      	b.n	802235a <ceilf+0x6a>
 8022324:	4e10      	ldr	r6, [pc, #64]	; (8022368 <ceilf+0x78>)
 8022326:	412e      	asrs	r6, r5
 8022328:	4206      	tst	r6, r0
 802232a:	d016      	beq.n	802235a <ceilf+0x6a>
 802232c:	490d      	ldr	r1, [pc, #52]	; (8022364 <ceilf+0x74>)
 802232e:	f7e0 fa0f 	bl	8002750 <__aeabi_fadd>
 8022332:	2100      	movs	r1, #0
 8022334:	f7e0 f89c 	bl	8002470 <__aeabi_fcmpgt>
 8022338:	2800      	cmp	r0, #0
 802233a:	d0f1      	beq.n	8022320 <ceilf+0x30>
 802233c:	2c00      	cmp	r4, #0
 802233e:	dd03      	ble.n	8022348 <ceilf+0x58>
 8022340:	2380      	movs	r3, #128	; 0x80
 8022342:	041b      	lsls	r3, r3, #16
 8022344:	412b      	asrs	r3, r5
 8022346:	18e4      	adds	r4, r4, r3
 8022348:	43b4      	bics	r4, r6
 802234a:	e7e9      	b.n	8022320 <ceilf+0x30>
 802234c:	23ff      	movs	r3, #255	; 0xff
 802234e:	05db      	lsls	r3, r3, #23
 8022350:	429e      	cmp	r6, r3
 8022352:	d302      	bcc.n	802235a <ceilf+0x6a>
 8022354:	1c01      	adds	r1, r0, #0
 8022356:	f7e0 f9fb 	bl	8002750 <__aeabi_fadd>
 802235a:	bd70      	pop	{r4, r5, r6, pc}
 802235c:	2480      	movs	r4, #128	; 0x80
 802235e:	0624      	lsls	r4, r4, #24
 8022360:	e7de      	b.n	8022320 <ceilf+0x30>
 8022362:	46c0      	nop			; (mov r8, r8)
 8022364:	7149f2ca 	.word	0x7149f2ca
 8022368:	007fffff 	.word	0x007fffff

0802236c <floorf>:
 802236c:	b570      	push	{r4, r5, r6, lr}
 802236e:	0045      	lsls	r5, r0, #1
 8022370:	086e      	lsrs	r6, r5, #1
 8022372:	0e2d      	lsrs	r5, r5, #24
 8022374:	3d7f      	subs	r5, #127	; 0x7f
 8022376:	0004      	movs	r4, r0
 8022378:	2d16      	cmp	r5, #22
 802237a:	dc24      	bgt.n	80223c6 <floorf+0x5a>
 802237c:	2d00      	cmp	r5, #0
 802237e:	da0e      	bge.n	802239e <floorf+0x32>
 8022380:	4916      	ldr	r1, [pc, #88]	; (80223dc <floorf+0x70>)
 8022382:	f7e0 f9e5 	bl	8002750 <__aeabi_fadd>
 8022386:	2100      	movs	r1, #0
 8022388:	f7e0 f872 	bl	8002470 <__aeabi_fcmpgt>
 802238c:	2800      	cmp	r0, #0
 802238e:	d004      	beq.n	802239a <floorf+0x2e>
 8022390:	2c00      	cmp	r4, #0
 8022392:	da20      	bge.n	80223d6 <floorf+0x6a>
 8022394:	2e00      	cmp	r6, #0
 8022396:	d000      	beq.n	802239a <floorf+0x2e>
 8022398:	4c11      	ldr	r4, [pc, #68]	; (80223e0 <floorf+0x74>)
 802239a:	1c20      	adds	r0, r4, #0
 802239c:	e01a      	b.n	80223d4 <floorf+0x68>
 802239e:	4e11      	ldr	r6, [pc, #68]	; (80223e4 <floorf+0x78>)
 80223a0:	412e      	asrs	r6, r5
 80223a2:	4206      	tst	r6, r0
 80223a4:	d016      	beq.n	80223d4 <floorf+0x68>
 80223a6:	490d      	ldr	r1, [pc, #52]	; (80223dc <floorf+0x70>)
 80223a8:	f7e0 f9d2 	bl	8002750 <__aeabi_fadd>
 80223ac:	2100      	movs	r1, #0
 80223ae:	f7e0 f85f 	bl	8002470 <__aeabi_fcmpgt>
 80223b2:	2800      	cmp	r0, #0
 80223b4:	d0f1      	beq.n	802239a <floorf+0x2e>
 80223b6:	2c00      	cmp	r4, #0
 80223b8:	da03      	bge.n	80223c2 <floorf+0x56>
 80223ba:	2380      	movs	r3, #128	; 0x80
 80223bc:	041b      	lsls	r3, r3, #16
 80223be:	412b      	asrs	r3, r5
 80223c0:	18e4      	adds	r4, r4, r3
 80223c2:	43b4      	bics	r4, r6
 80223c4:	e7e9      	b.n	802239a <floorf+0x2e>
 80223c6:	23ff      	movs	r3, #255	; 0xff
 80223c8:	05db      	lsls	r3, r3, #23
 80223ca:	429e      	cmp	r6, r3
 80223cc:	d302      	bcc.n	80223d4 <floorf+0x68>
 80223ce:	1c01      	adds	r1, r0, #0
 80223d0:	f7e0 f9be 	bl	8002750 <__aeabi_fadd>
 80223d4:	bd70      	pop	{r4, r5, r6, pc}
 80223d6:	2400      	movs	r4, #0
 80223d8:	e7df      	b.n	802239a <floorf+0x2e>
 80223da:	46c0      	nop			; (mov r8, r8)
 80223dc:	7149f2ca 	.word	0x7149f2ca
 80223e0:	bf800000 	.word	0xbf800000
 80223e4:	007fffff 	.word	0x007fffff

080223e8 <atoi>:
 80223e8:	b510      	push	{r4, lr}
 80223ea:	220a      	movs	r2, #10
 80223ec:	2100      	movs	r1, #0
 80223ee:	f000 f953 	bl	8022698 <strtol>
 80223f2:	bd10      	pop	{r4, pc}

080223f4 <malloc>:
 80223f4:	b510      	push	{r4, lr}
 80223f6:	4b03      	ldr	r3, [pc, #12]	; (8022404 <malloc+0x10>)
 80223f8:	0001      	movs	r1, r0
 80223fa:	6818      	ldr	r0, [r3, #0]
 80223fc:	f000 f830 	bl	8022460 <_malloc_r>
 8022400:	bd10      	pop	{r4, pc}
 8022402:	46c0      	nop			; (mov r8, r8)
 8022404:	20005128 	.word	0x20005128

08022408 <free>:
 8022408:	b510      	push	{r4, lr}
 802240a:	4b03      	ldr	r3, [pc, #12]	; (8022418 <free+0x10>)
 802240c:	0001      	movs	r1, r0
 802240e:	6818      	ldr	r0, [r3, #0]
 8022410:	f001 faea 	bl	80239e8 <_free_r>
 8022414:	bd10      	pop	{r4, pc}
 8022416:	46c0      	nop			; (mov r8, r8)
 8022418:	20005128 	.word	0x20005128

0802241c <sbrk_aligned>:
 802241c:	b570      	push	{r4, r5, r6, lr}
 802241e:	4e0f      	ldr	r6, [pc, #60]	; (802245c <sbrk_aligned+0x40>)
 8022420:	000d      	movs	r5, r1
 8022422:	6831      	ldr	r1, [r6, #0]
 8022424:	0004      	movs	r4, r0
 8022426:	2900      	cmp	r1, #0
 8022428:	d102      	bne.n	8022430 <sbrk_aligned+0x14>
 802242a:	f001 fa41 	bl	80238b0 <_sbrk_r>
 802242e:	6030      	str	r0, [r6, #0]
 8022430:	0029      	movs	r1, r5
 8022432:	0020      	movs	r0, r4
 8022434:	f001 fa3c 	bl	80238b0 <_sbrk_r>
 8022438:	1c43      	adds	r3, r0, #1
 802243a:	d00a      	beq.n	8022452 <sbrk_aligned+0x36>
 802243c:	2303      	movs	r3, #3
 802243e:	1cc5      	adds	r5, r0, #3
 8022440:	439d      	bics	r5, r3
 8022442:	42a8      	cmp	r0, r5
 8022444:	d007      	beq.n	8022456 <sbrk_aligned+0x3a>
 8022446:	1a29      	subs	r1, r5, r0
 8022448:	0020      	movs	r0, r4
 802244a:	f001 fa31 	bl	80238b0 <_sbrk_r>
 802244e:	3001      	adds	r0, #1
 8022450:	d101      	bne.n	8022456 <sbrk_aligned+0x3a>
 8022452:	2501      	movs	r5, #1
 8022454:	426d      	negs	r5, r5
 8022456:	0028      	movs	r0, r5
 8022458:	bd70      	pop	{r4, r5, r6, pc}
 802245a:	46c0      	nop			; (mov r8, r8)
 802245c:	2001c214 	.word	0x2001c214

08022460 <_malloc_r>:
 8022460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022462:	2203      	movs	r2, #3
 8022464:	1ccb      	adds	r3, r1, #3
 8022466:	4393      	bics	r3, r2
 8022468:	3308      	adds	r3, #8
 802246a:	0006      	movs	r6, r0
 802246c:	001f      	movs	r7, r3
 802246e:	2b0c      	cmp	r3, #12
 8022470:	d238      	bcs.n	80224e4 <_malloc_r+0x84>
 8022472:	270c      	movs	r7, #12
 8022474:	42b9      	cmp	r1, r7
 8022476:	d837      	bhi.n	80224e8 <_malloc_r+0x88>
 8022478:	0030      	movs	r0, r6
 802247a:	f000 f873 	bl	8022564 <__malloc_lock>
 802247e:	4b38      	ldr	r3, [pc, #224]	; (8022560 <_malloc_r+0x100>)
 8022480:	9300      	str	r3, [sp, #0]
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	001c      	movs	r4, r3
 8022486:	2c00      	cmp	r4, #0
 8022488:	d133      	bne.n	80224f2 <_malloc_r+0x92>
 802248a:	0039      	movs	r1, r7
 802248c:	0030      	movs	r0, r6
 802248e:	f7ff ffc5 	bl	802241c <sbrk_aligned>
 8022492:	0004      	movs	r4, r0
 8022494:	1c43      	adds	r3, r0, #1
 8022496:	d15e      	bne.n	8022556 <_malloc_r+0xf6>
 8022498:	9b00      	ldr	r3, [sp, #0]
 802249a:	681c      	ldr	r4, [r3, #0]
 802249c:	0025      	movs	r5, r4
 802249e:	2d00      	cmp	r5, #0
 80224a0:	d14e      	bne.n	8022540 <_malloc_r+0xe0>
 80224a2:	2c00      	cmp	r4, #0
 80224a4:	d051      	beq.n	802254a <_malloc_r+0xea>
 80224a6:	6823      	ldr	r3, [r4, #0]
 80224a8:	0029      	movs	r1, r5
 80224aa:	18e3      	adds	r3, r4, r3
 80224ac:	0030      	movs	r0, r6
 80224ae:	9301      	str	r3, [sp, #4]
 80224b0:	f001 f9fe 	bl	80238b0 <_sbrk_r>
 80224b4:	9b01      	ldr	r3, [sp, #4]
 80224b6:	4283      	cmp	r3, r0
 80224b8:	d147      	bne.n	802254a <_malloc_r+0xea>
 80224ba:	6823      	ldr	r3, [r4, #0]
 80224bc:	0030      	movs	r0, r6
 80224be:	1aff      	subs	r7, r7, r3
 80224c0:	0039      	movs	r1, r7
 80224c2:	f7ff ffab 	bl	802241c <sbrk_aligned>
 80224c6:	3001      	adds	r0, #1
 80224c8:	d03f      	beq.n	802254a <_malloc_r+0xea>
 80224ca:	6823      	ldr	r3, [r4, #0]
 80224cc:	19db      	adds	r3, r3, r7
 80224ce:	6023      	str	r3, [r4, #0]
 80224d0:	9b00      	ldr	r3, [sp, #0]
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	2b00      	cmp	r3, #0
 80224d6:	d040      	beq.n	802255a <_malloc_r+0xfa>
 80224d8:	685a      	ldr	r2, [r3, #4]
 80224da:	42a2      	cmp	r2, r4
 80224dc:	d133      	bne.n	8022546 <_malloc_r+0xe6>
 80224de:	2200      	movs	r2, #0
 80224e0:	605a      	str	r2, [r3, #4]
 80224e2:	e014      	b.n	802250e <_malloc_r+0xae>
 80224e4:	2b00      	cmp	r3, #0
 80224e6:	dac5      	bge.n	8022474 <_malloc_r+0x14>
 80224e8:	230c      	movs	r3, #12
 80224ea:	2500      	movs	r5, #0
 80224ec:	6033      	str	r3, [r6, #0]
 80224ee:	0028      	movs	r0, r5
 80224f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80224f2:	6821      	ldr	r1, [r4, #0]
 80224f4:	1bc9      	subs	r1, r1, r7
 80224f6:	d420      	bmi.n	802253a <_malloc_r+0xda>
 80224f8:	290b      	cmp	r1, #11
 80224fa:	d918      	bls.n	802252e <_malloc_r+0xce>
 80224fc:	19e2      	adds	r2, r4, r7
 80224fe:	6027      	str	r7, [r4, #0]
 8022500:	42a3      	cmp	r3, r4
 8022502:	d112      	bne.n	802252a <_malloc_r+0xca>
 8022504:	9b00      	ldr	r3, [sp, #0]
 8022506:	601a      	str	r2, [r3, #0]
 8022508:	6863      	ldr	r3, [r4, #4]
 802250a:	6011      	str	r1, [r2, #0]
 802250c:	6053      	str	r3, [r2, #4]
 802250e:	0030      	movs	r0, r6
 8022510:	0025      	movs	r5, r4
 8022512:	f000 f82f 	bl	8022574 <__malloc_unlock>
 8022516:	2207      	movs	r2, #7
 8022518:	350b      	adds	r5, #11
 802251a:	1d23      	adds	r3, r4, #4
 802251c:	4395      	bics	r5, r2
 802251e:	1aea      	subs	r2, r5, r3
 8022520:	429d      	cmp	r5, r3
 8022522:	d0e4      	beq.n	80224ee <_malloc_r+0x8e>
 8022524:	1b5b      	subs	r3, r3, r5
 8022526:	50a3      	str	r3, [r4, r2]
 8022528:	e7e1      	b.n	80224ee <_malloc_r+0x8e>
 802252a:	605a      	str	r2, [r3, #4]
 802252c:	e7ec      	b.n	8022508 <_malloc_r+0xa8>
 802252e:	6862      	ldr	r2, [r4, #4]
 8022530:	42a3      	cmp	r3, r4
 8022532:	d1d5      	bne.n	80224e0 <_malloc_r+0x80>
 8022534:	9b00      	ldr	r3, [sp, #0]
 8022536:	601a      	str	r2, [r3, #0]
 8022538:	e7e9      	b.n	802250e <_malloc_r+0xae>
 802253a:	0023      	movs	r3, r4
 802253c:	6864      	ldr	r4, [r4, #4]
 802253e:	e7a2      	b.n	8022486 <_malloc_r+0x26>
 8022540:	002c      	movs	r4, r5
 8022542:	686d      	ldr	r5, [r5, #4]
 8022544:	e7ab      	b.n	802249e <_malloc_r+0x3e>
 8022546:	0013      	movs	r3, r2
 8022548:	e7c4      	b.n	80224d4 <_malloc_r+0x74>
 802254a:	230c      	movs	r3, #12
 802254c:	0030      	movs	r0, r6
 802254e:	6033      	str	r3, [r6, #0]
 8022550:	f000 f810 	bl	8022574 <__malloc_unlock>
 8022554:	e7cb      	b.n	80224ee <_malloc_r+0x8e>
 8022556:	6027      	str	r7, [r4, #0]
 8022558:	e7d9      	b.n	802250e <_malloc_r+0xae>
 802255a:	605b      	str	r3, [r3, #4]
 802255c:	deff      	udf	#255	; 0xff
 802255e:	46c0      	nop			; (mov r8, r8)
 8022560:	2001c210 	.word	0x2001c210

08022564 <__malloc_lock>:
 8022564:	b510      	push	{r4, lr}
 8022566:	4802      	ldr	r0, [pc, #8]	; (8022570 <__malloc_lock+0xc>)
 8022568:	f001 f9f3 	bl	8023952 <__retarget_lock_acquire_recursive>
 802256c:	bd10      	pop	{r4, pc}
 802256e:	46c0      	nop			; (mov r8, r8)
 8022570:	2001c37d 	.word	0x2001c37d

08022574 <__malloc_unlock>:
 8022574:	b510      	push	{r4, lr}
 8022576:	4802      	ldr	r0, [pc, #8]	; (8022580 <__malloc_unlock+0xc>)
 8022578:	f001 f9ed 	bl	8023956 <__retarget_lock_release_recursive>
 802257c:	bd10      	pop	{r4, pc}
 802257e:	46c0      	nop			; (mov r8, r8)
 8022580:	2001c37d 	.word	0x2001c37d

08022584 <_strtol_l.constprop.0>:
 8022584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022586:	b087      	sub	sp, #28
 8022588:	001e      	movs	r6, r3
 802258a:	9005      	str	r0, [sp, #20]
 802258c:	9101      	str	r1, [sp, #4]
 802258e:	9202      	str	r2, [sp, #8]
 8022590:	2b01      	cmp	r3, #1
 8022592:	d048      	beq.n	8022626 <_strtol_l.constprop.0+0xa2>
 8022594:	000b      	movs	r3, r1
 8022596:	2e24      	cmp	r6, #36	; 0x24
 8022598:	d845      	bhi.n	8022626 <_strtol_l.constprop.0+0xa2>
 802259a:	4a3b      	ldr	r2, [pc, #236]	; (8022688 <_strtol_l.constprop.0+0x104>)
 802259c:	2108      	movs	r1, #8
 802259e:	4694      	mov	ip, r2
 80225a0:	001a      	movs	r2, r3
 80225a2:	4660      	mov	r0, ip
 80225a4:	7814      	ldrb	r4, [r2, #0]
 80225a6:	3301      	adds	r3, #1
 80225a8:	5d00      	ldrb	r0, [r0, r4]
 80225aa:	001d      	movs	r5, r3
 80225ac:	0007      	movs	r7, r0
 80225ae:	400f      	ands	r7, r1
 80225b0:	4208      	tst	r0, r1
 80225b2:	d1f5      	bne.n	80225a0 <_strtol_l.constprop.0+0x1c>
 80225b4:	2c2d      	cmp	r4, #45	; 0x2d
 80225b6:	d13d      	bne.n	8022634 <_strtol_l.constprop.0+0xb0>
 80225b8:	2701      	movs	r7, #1
 80225ba:	781c      	ldrb	r4, [r3, #0]
 80225bc:	1c95      	adds	r5, r2, #2
 80225be:	2e00      	cmp	r6, #0
 80225c0:	d05e      	beq.n	8022680 <_strtol_l.constprop.0+0xfc>
 80225c2:	2e10      	cmp	r6, #16
 80225c4:	d109      	bne.n	80225da <_strtol_l.constprop.0+0x56>
 80225c6:	2c30      	cmp	r4, #48	; 0x30
 80225c8:	d107      	bne.n	80225da <_strtol_l.constprop.0+0x56>
 80225ca:	2220      	movs	r2, #32
 80225cc:	782b      	ldrb	r3, [r5, #0]
 80225ce:	4393      	bics	r3, r2
 80225d0:	2b58      	cmp	r3, #88	; 0x58
 80225d2:	d150      	bne.n	8022676 <_strtol_l.constprop.0+0xf2>
 80225d4:	2610      	movs	r6, #16
 80225d6:	786c      	ldrb	r4, [r5, #1]
 80225d8:	3502      	adds	r5, #2
 80225da:	4b2c      	ldr	r3, [pc, #176]	; (802268c <_strtol_l.constprop.0+0x108>)
 80225dc:	0031      	movs	r1, r6
 80225de:	18fb      	adds	r3, r7, r3
 80225e0:	0018      	movs	r0, r3
 80225e2:	9303      	str	r3, [sp, #12]
 80225e4:	f7df fe2e 	bl	8002244 <__aeabi_uidivmod>
 80225e8:	2200      	movs	r2, #0
 80225ea:	9104      	str	r1, [sp, #16]
 80225ec:	2101      	movs	r1, #1
 80225ee:	4684      	mov	ip, r0
 80225f0:	0010      	movs	r0, r2
 80225f2:	4249      	negs	r1, r1
 80225f4:	0023      	movs	r3, r4
 80225f6:	3b30      	subs	r3, #48	; 0x30
 80225f8:	2b09      	cmp	r3, #9
 80225fa:	d903      	bls.n	8022604 <_strtol_l.constprop.0+0x80>
 80225fc:	3b11      	subs	r3, #17
 80225fe:	2b19      	cmp	r3, #25
 8022600:	d81d      	bhi.n	802263e <_strtol_l.constprop.0+0xba>
 8022602:	330a      	adds	r3, #10
 8022604:	429e      	cmp	r6, r3
 8022606:	dd1e      	ble.n	8022646 <_strtol_l.constprop.0+0xc2>
 8022608:	1c54      	adds	r4, r2, #1
 802260a:	d009      	beq.n	8022620 <_strtol_l.constprop.0+0x9c>
 802260c:	000a      	movs	r2, r1
 802260e:	4584      	cmp	ip, r0
 8022610:	d306      	bcc.n	8022620 <_strtol_l.constprop.0+0x9c>
 8022612:	d102      	bne.n	802261a <_strtol_l.constprop.0+0x96>
 8022614:	9c04      	ldr	r4, [sp, #16]
 8022616:	429c      	cmp	r4, r3
 8022618:	db02      	blt.n	8022620 <_strtol_l.constprop.0+0x9c>
 802261a:	2201      	movs	r2, #1
 802261c:	4370      	muls	r0, r6
 802261e:	1818      	adds	r0, r3, r0
 8022620:	782c      	ldrb	r4, [r5, #0]
 8022622:	3501      	adds	r5, #1
 8022624:	e7e6      	b.n	80225f4 <_strtol_l.constprop.0+0x70>
 8022626:	f001 f969 	bl	80238fc <__errno>
 802262a:	2316      	movs	r3, #22
 802262c:	6003      	str	r3, [r0, #0]
 802262e:	2000      	movs	r0, #0
 8022630:	b007      	add	sp, #28
 8022632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022634:	2c2b      	cmp	r4, #43	; 0x2b
 8022636:	d1c2      	bne.n	80225be <_strtol_l.constprop.0+0x3a>
 8022638:	781c      	ldrb	r4, [r3, #0]
 802263a:	1c95      	adds	r5, r2, #2
 802263c:	e7bf      	b.n	80225be <_strtol_l.constprop.0+0x3a>
 802263e:	0023      	movs	r3, r4
 8022640:	3b61      	subs	r3, #97	; 0x61
 8022642:	2b19      	cmp	r3, #25
 8022644:	d9dd      	bls.n	8022602 <_strtol_l.constprop.0+0x7e>
 8022646:	1c53      	adds	r3, r2, #1
 8022648:	d109      	bne.n	802265e <_strtol_l.constprop.0+0xda>
 802264a:	2322      	movs	r3, #34	; 0x22
 802264c:	9a05      	ldr	r2, [sp, #20]
 802264e:	9803      	ldr	r0, [sp, #12]
 8022650:	6013      	str	r3, [r2, #0]
 8022652:	9b02      	ldr	r3, [sp, #8]
 8022654:	2b00      	cmp	r3, #0
 8022656:	d0eb      	beq.n	8022630 <_strtol_l.constprop.0+0xac>
 8022658:	1e6b      	subs	r3, r5, #1
 802265a:	9301      	str	r3, [sp, #4]
 802265c:	e007      	b.n	802266e <_strtol_l.constprop.0+0xea>
 802265e:	2f00      	cmp	r7, #0
 8022660:	d000      	beq.n	8022664 <_strtol_l.constprop.0+0xe0>
 8022662:	4240      	negs	r0, r0
 8022664:	9b02      	ldr	r3, [sp, #8]
 8022666:	2b00      	cmp	r3, #0
 8022668:	d0e2      	beq.n	8022630 <_strtol_l.constprop.0+0xac>
 802266a:	2a00      	cmp	r2, #0
 802266c:	d1f4      	bne.n	8022658 <_strtol_l.constprop.0+0xd4>
 802266e:	9b02      	ldr	r3, [sp, #8]
 8022670:	9a01      	ldr	r2, [sp, #4]
 8022672:	601a      	str	r2, [r3, #0]
 8022674:	e7dc      	b.n	8022630 <_strtol_l.constprop.0+0xac>
 8022676:	2430      	movs	r4, #48	; 0x30
 8022678:	2e00      	cmp	r6, #0
 802267a:	d1ae      	bne.n	80225da <_strtol_l.constprop.0+0x56>
 802267c:	3608      	adds	r6, #8
 802267e:	e7ac      	b.n	80225da <_strtol_l.constprop.0+0x56>
 8022680:	2c30      	cmp	r4, #48	; 0x30
 8022682:	d0a2      	beq.n	80225ca <_strtol_l.constprop.0+0x46>
 8022684:	260a      	movs	r6, #10
 8022686:	e7a8      	b.n	80225da <_strtol_l.constprop.0+0x56>
 8022688:	08032109 	.word	0x08032109
 802268c:	7fffffff 	.word	0x7fffffff

08022690 <_strtol_r>:
 8022690:	b510      	push	{r4, lr}
 8022692:	f7ff ff77 	bl	8022584 <_strtol_l.constprop.0>
 8022696:	bd10      	pop	{r4, pc}

08022698 <strtol>:
 8022698:	b510      	push	{r4, lr}
 802269a:	4c04      	ldr	r4, [pc, #16]	; (80226ac <strtol+0x14>)
 802269c:	0013      	movs	r3, r2
 802269e:	000a      	movs	r2, r1
 80226a0:	0001      	movs	r1, r0
 80226a2:	6820      	ldr	r0, [r4, #0]
 80226a4:	f7ff ff6e 	bl	8022584 <_strtol_l.constprop.0>
 80226a8:	bd10      	pop	{r4, pc}
 80226aa:	46c0      	nop			; (mov r8, r8)
 80226ac:	20005128 	.word	0x20005128

080226b0 <std>:
 80226b0:	2300      	movs	r3, #0
 80226b2:	b510      	push	{r4, lr}
 80226b4:	0004      	movs	r4, r0
 80226b6:	6003      	str	r3, [r0, #0]
 80226b8:	6043      	str	r3, [r0, #4]
 80226ba:	6083      	str	r3, [r0, #8]
 80226bc:	8181      	strh	r1, [r0, #12]
 80226be:	6643      	str	r3, [r0, #100]	; 0x64
 80226c0:	0019      	movs	r1, r3
 80226c2:	81c2      	strh	r2, [r0, #14]
 80226c4:	6103      	str	r3, [r0, #16]
 80226c6:	6143      	str	r3, [r0, #20]
 80226c8:	6183      	str	r3, [r0, #24]
 80226ca:	2208      	movs	r2, #8
 80226cc:	305c      	adds	r0, #92	; 0x5c
 80226ce:	f000 fa63 	bl	8022b98 <memset>
 80226d2:	4b05      	ldr	r3, [pc, #20]	; (80226e8 <std+0x38>)
 80226d4:	6224      	str	r4, [r4, #32]
 80226d6:	6263      	str	r3, [r4, #36]	; 0x24
 80226d8:	4b04      	ldr	r3, [pc, #16]	; (80226ec <std+0x3c>)
 80226da:	62a3      	str	r3, [r4, #40]	; 0x28
 80226dc:	4b04      	ldr	r3, [pc, #16]	; (80226f0 <std+0x40>)
 80226de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80226e0:	4b04      	ldr	r3, [pc, #16]	; (80226f4 <std+0x44>)
 80226e2:	6323      	str	r3, [r4, #48]	; 0x30
 80226e4:	bd10      	pop	{r4, pc}
 80226e6:	46c0      	nop			; (mov r8, r8)
 80226e8:	080229b1 	.word	0x080229b1
 80226ec:	080229dd 	.word	0x080229dd
 80226f0:	08022a15 	.word	0x08022a15
 80226f4:	08022a41 	.word	0x08022a41

080226f8 <stdio_exit_handler>:
 80226f8:	b510      	push	{r4, lr}
 80226fa:	4a03      	ldr	r2, [pc, #12]	; (8022708 <stdio_exit_handler+0x10>)
 80226fc:	4903      	ldr	r1, [pc, #12]	; (802270c <stdio_exit_handler+0x14>)
 80226fe:	4804      	ldr	r0, [pc, #16]	; (8022710 <stdio_exit_handler+0x18>)
 8022700:	f000 f86c 	bl	80227dc <_fwalk_sglue>
 8022704:	bd10      	pop	{r4, pc}
 8022706:	46c0      	nop			; (mov r8, r8)
 8022708:	200050c8 	.word	0x200050c8
 802270c:	08024585 	.word	0x08024585
 8022710:	200050dc 	.word	0x200050dc

08022714 <cleanup_stdio>:
 8022714:	6841      	ldr	r1, [r0, #4]
 8022716:	4b0b      	ldr	r3, [pc, #44]	; (8022744 <cleanup_stdio+0x30>)
 8022718:	b510      	push	{r4, lr}
 802271a:	0004      	movs	r4, r0
 802271c:	4299      	cmp	r1, r3
 802271e:	d001      	beq.n	8022724 <cleanup_stdio+0x10>
 8022720:	f001 ff30 	bl	8024584 <_fflush_r>
 8022724:	68a1      	ldr	r1, [r4, #8]
 8022726:	4b08      	ldr	r3, [pc, #32]	; (8022748 <cleanup_stdio+0x34>)
 8022728:	4299      	cmp	r1, r3
 802272a:	d002      	beq.n	8022732 <cleanup_stdio+0x1e>
 802272c:	0020      	movs	r0, r4
 802272e:	f001 ff29 	bl	8024584 <_fflush_r>
 8022732:	68e1      	ldr	r1, [r4, #12]
 8022734:	4b05      	ldr	r3, [pc, #20]	; (802274c <cleanup_stdio+0x38>)
 8022736:	4299      	cmp	r1, r3
 8022738:	d002      	beq.n	8022740 <cleanup_stdio+0x2c>
 802273a:	0020      	movs	r0, r4
 802273c:	f001 ff22 	bl	8024584 <_fflush_r>
 8022740:	bd10      	pop	{r4, pc}
 8022742:	46c0      	nop			; (mov r8, r8)
 8022744:	2001c218 	.word	0x2001c218
 8022748:	2001c280 	.word	0x2001c280
 802274c:	2001c2e8 	.word	0x2001c2e8

08022750 <global_stdio_init.part.0>:
 8022750:	b510      	push	{r4, lr}
 8022752:	4b09      	ldr	r3, [pc, #36]	; (8022778 <global_stdio_init.part.0+0x28>)
 8022754:	4a09      	ldr	r2, [pc, #36]	; (802277c <global_stdio_init.part.0+0x2c>)
 8022756:	2104      	movs	r1, #4
 8022758:	601a      	str	r2, [r3, #0]
 802275a:	4809      	ldr	r0, [pc, #36]	; (8022780 <global_stdio_init.part.0+0x30>)
 802275c:	2200      	movs	r2, #0
 802275e:	f7ff ffa7 	bl	80226b0 <std>
 8022762:	2201      	movs	r2, #1
 8022764:	2109      	movs	r1, #9
 8022766:	4807      	ldr	r0, [pc, #28]	; (8022784 <global_stdio_init.part.0+0x34>)
 8022768:	f7ff ffa2 	bl	80226b0 <std>
 802276c:	2202      	movs	r2, #2
 802276e:	2112      	movs	r1, #18
 8022770:	4805      	ldr	r0, [pc, #20]	; (8022788 <global_stdio_init.part.0+0x38>)
 8022772:	f7ff ff9d 	bl	80226b0 <std>
 8022776:	bd10      	pop	{r4, pc}
 8022778:	2001c350 	.word	0x2001c350
 802277c:	080226f9 	.word	0x080226f9
 8022780:	2001c218 	.word	0x2001c218
 8022784:	2001c280 	.word	0x2001c280
 8022788:	2001c2e8 	.word	0x2001c2e8

0802278c <__sfp_lock_acquire>:
 802278c:	b510      	push	{r4, lr}
 802278e:	4802      	ldr	r0, [pc, #8]	; (8022798 <__sfp_lock_acquire+0xc>)
 8022790:	f001 f8df 	bl	8023952 <__retarget_lock_acquire_recursive>
 8022794:	bd10      	pop	{r4, pc}
 8022796:	46c0      	nop			; (mov r8, r8)
 8022798:	2001c37e 	.word	0x2001c37e

0802279c <__sfp_lock_release>:
 802279c:	b510      	push	{r4, lr}
 802279e:	4802      	ldr	r0, [pc, #8]	; (80227a8 <__sfp_lock_release+0xc>)
 80227a0:	f001 f8d9 	bl	8023956 <__retarget_lock_release_recursive>
 80227a4:	bd10      	pop	{r4, pc}
 80227a6:	46c0      	nop			; (mov r8, r8)
 80227a8:	2001c37e 	.word	0x2001c37e

080227ac <__sinit>:
 80227ac:	b510      	push	{r4, lr}
 80227ae:	0004      	movs	r4, r0
 80227b0:	f7ff ffec 	bl	802278c <__sfp_lock_acquire>
 80227b4:	6a23      	ldr	r3, [r4, #32]
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d002      	beq.n	80227c0 <__sinit+0x14>
 80227ba:	f7ff ffef 	bl	802279c <__sfp_lock_release>
 80227be:	bd10      	pop	{r4, pc}
 80227c0:	4b04      	ldr	r3, [pc, #16]	; (80227d4 <__sinit+0x28>)
 80227c2:	6223      	str	r3, [r4, #32]
 80227c4:	4b04      	ldr	r3, [pc, #16]	; (80227d8 <__sinit+0x2c>)
 80227c6:	681b      	ldr	r3, [r3, #0]
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	d1f6      	bne.n	80227ba <__sinit+0xe>
 80227cc:	f7ff ffc0 	bl	8022750 <global_stdio_init.part.0>
 80227d0:	e7f3      	b.n	80227ba <__sinit+0xe>
 80227d2:	46c0      	nop			; (mov r8, r8)
 80227d4:	08022715 	.word	0x08022715
 80227d8:	2001c350 	.word	0x2001c350

080227dc <_fwalk_sglue>:
 80227dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80227de:	0014      	movs	r4, r2
 80227e0:	2600      	movs	r6, #0
 80227e2:	9000      	str	r0, [sp, #0]
 80227e4:	9101      	str	r1, [sp, #4]
 80227e6:	68a5      	ldr	r5, [r4, #8]
 80227e8:	6867      	ldr	r7, [r4, #4]
 80227ea:	3f01      	subs	r7, #1
 80227ec:	d504      	bpl.n	80227f8 <_fwalk_sglue+0x1c>
 80227ee:	6824      	ldr	r4, [r4, #0]
 80227f0:	2c00      	cmp	r4, #0
 80227f2:	d1f8      	bne.n	80227e6 <_fwalk_sglue+0xa>
 80227f4:	0030      	movs	r0, r6
 80227f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80227f8:	89ab      	ldrh	r3, [r5, #12]
 80227fa:	2b01      	cmp	r3, #1
 80227fc:	d908      	bls.n	8022810 <_fwalk_sglue+0x34>
 80227fe:	220e      	movs	r2, #14
 8022800:	5eab      	ldrsh	r3, [r5, r2]
 8022802:	3301      	adds	r3, #1
 8022804:	d004      	beq.n	8022810 <_fwalk_sglue+0x34>
 8022806:	0029      	movs	r1, r5
 8022808:	9800      	ldr	r0, [sp, #0]
 802280a:	9b01      	ldr	r3, [sp, #4]
 802280c:	4798      	blx	r3
 802280e:	4306      	orrs	r6, r0
 8022810:	3568      	adds	r5, #104	; 0x68
 8022812:	e7ea      	b.n	80227ea <_fwalk_sglue+0xe>

08022814 <iprintf>:
 8022814:	b40f      	push	{r0, r1, r2, r3}
 8022816:	b507      	push	{r0, r1, r2, lr}
 8022818:	4905      	ldr	r1, [pc, #20]	; (8022830 <iprintf+0x1c>)
 802281a:	ab04      	add	r3, sp, #16
 802281c:	6808      	ldr	r0, [r1, #0]
 802281e:	cb04      	ldmia	r3!, {r2}
 8022820:	6881      	ldr	r1, [r0, #8]
 8022822:	9301      	str	r3, [sp, #4]
 8022824:	f001 fb88 	bl	8023f38 <_vfiprintf_r>
 8022828:	b003      	add	sp, #12
 802282a:	bc08      	pop	{r3}
 802282c:	b004      	add	sp, #16
 802282e:	4718      	bx	r3
 8022830:	20005128 	.word	0x20005128

08022834 <putchar>:
 8022834:	b510      	push	{r4, lr}
 8022836:	4b03      	ldr	r3, [pc, #12]	; (8022844 <putchar+0x10>)
 8022838:	0001      	movs	r1, r0
 802283a:	6818      	ldr	r0, [r3, #0]
 802283c:	6882      	ldr	r2, [r0, #8]
 802283e:	f001 ff43 	bl	80246c8 <_putc_r>
 8022842:	bd10      	pop	{r4, pc}
 8022844:	20005128 	.word	0x20005128

08022848 <_puts_r>:
 8022848:	6a03      	ldr	r3, [r0, #32]
 802284a:	b570      	push	{r4, r5, r6, lr}
 802284c:	0005      	movs	r5, r0
 802284e:	000e      	movs	r6, r1
 8022850:	6884      	ldr	r4, [r0, #8]
 8022852:	2b00      	cmp	r3, #0
 8022854:	d101      	bne.n	802285a <_puts_r+0x12>
 8022856:	f7ff ffa9 	bl	80227ac <__sinit>
 802285a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802285c:	07db      	lsls	r3, r3, #31
 802285e:	d405      	bmi.n	802286c <_puts_r+0x24>
 8022860:	89a3      	ldrh	r3, [r4, #12]
 8022862:	059b      	lsls	r3, r3, #22
 8022864:	d402      	bmi.n	802286c <_puts_r+0x24>
 8022866:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022868:	f001 f873 	bl	8023952 <__retarget_lock_acquire_recursive>
 802286c:	89a3      	ldrh	r3, [r4, #12]
 802286e:	071b      	lsls	r3, r3, #28
 8022870:	d502      	bpl.n	8022878 <_puts_r+0x30>
 8022872:	6923      	ldr	r3, [r4, #16]
 8022874:	2b00      	cmp	r3, #0
 8022876:	d11f      	bne.n	80228b8 <_puts_r+0x70>
 8022878:	0021      	movs	r1, r4
 802287a:	0028      	movs	r0, r5
 802287c:	f000 f928 	bl	8022ad0 <__swsetup_r>
 8022880:	2800      	cmp	r0, #0
 8022882:	d019      	beq.n	80228b8 <_puts_r+0x70>
 8022884:	2501      	movs	r5, #1
 8022886:	426d      	negs	r5, r5
 8022888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802288a:	07db      	lsls	r3, r3, #31
 802288c:	d405      	bmi.n	802289a <_puts_r+0x52>
 802288e:	89a3      	ldrh	r3, [r4, #12]
 8022890:	059b      	lsls	r3, r3, #22
 8022892:	d402      	bmi.n	802289a <_puts_r+0x52>
 8022894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022896:	f001 f85e 	bl	8023956 <__retarget_lock_release_recursive>
 802289a:	0028      	movs	r0, r5
 802289c:	bd70      	pop	{r4, r5, r6, pc}
 802289e:	3601      	adds	r6, #1
 80228a0:	60a3      	str	r3, [r4, #8]
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	da04      	bge.n	80228b0 <_puts_r+0x68>
 80228a6:	69a2      	ldr	r2, [r4, #24]
 80228a8:	429a      	cmp	r2, r3
 80228aa:	dc16      	bgt.n	80228da <_puts_r+0x92>
 80228ac:	290a      	cmp	r1, #10
 80228ae:	d014      	beq.n	80228da <_puts_r+0x92>
 80228b0:	6823      	ldr	r3, [r4, #0]
 80228b2:	1c5a      	adds	r2, r3, #1
 80228b4:	6022      	str	r2, [r4, #0]
 80228b6:	7019      	strb	r1, [r3, #0]
 80228b8:	68a3      	ldr	r3, [r4, #8]
 80228ba:	7831      	ldrb	r1, [r6, #0]
 80228bc:	3b01      	subs	r3, #1
 80228be:	2900      	cmp	r1, #0
 80228c0:	d1ed      	bne.n	802289e <_puts_r+0x56>
 80228c2:	60a3      	str	r3, [r4, #8]
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	da0f      	bge.n	80228e8 <_puts_r+0xa0>
 80228c8:	0028      	movs	r0, r5
 80228ca:	0022      	movs	r2, r4
 80228cc:	310a      	adds	r1, #10
 80228ce:	f000 f8bd 	bl	8022a4c <__swbuf_r>
 80228d2:	250a      	movs	r5, #10
 80228d4:	3001      	adds	r0, #1
 80228d6:	d1d7      	bne.n	8022888 <_puts_r+0x40>
 80228d8:	e7d4      	b.n	8022884 <_puts_r+0x3c>
 80228da:	0022      	movs	r2, r4
 80228dc:	0028      	movs	r0, r5
 80228de:	f000 f8b5 	bl	8022a4c <__swbuf_r>
 80228e2:	3001      	adds	r0, #1
 80228e4:	d1e8      	bne.n	80228b8 <_puts_r+0x70>
 80228e6:	e7cd      	b.n	8022884 <_puts_r+0x3c>
 80228e8:	250a      	movs	r5, #10
 80228ea:	6823      	ldr	r3, [r4, #0]
 80228ec:	1c5a      	adds	r2, r3, #1
 80228ee:	6022      	str	r2, [r4, #0]
 80228f0:	701d      	strb	r5, [r3, #0]
 80228f2:	e7c9      	b.n	8022888 <_puts_r+0x40>

080228f4 <puts>:
 80228f4:	b510      	push	{r4, lr}
 80228f6:	4b03      	ldr	r3, [pc, #12]	; (8022904 <puts+0x10>)
 80228f8:	0001      	movs	r1, r0
 80228fa:	6818      	ldr	r0, [r3, #0]
 80228fc:	f7ff ffa4 	bl	8022848 <_puts_r>
 8022900:	bd10      	pop	{r4, pc}
 8022902:	46c0      	nop			; (mov r8, r8)
 8022904:	20005128 	.word	0x20005128

08022908 <sniprintf>:
 8022908:	b40c      	push	{r2, r3}
 802290a:	b530      	push	{r4, r5, lr}
 802290c:	4b17      	ldr	r3, [pc, #92]	; (802296c <sniprintf+0x64>)
 802290e:	000c      	movs	r4, r1
 8022910:	681d      	ldr	r5, [r3, #0]
 8022912:	b09d      	sub	sp, #116	; 0x74
 8022914:	2900      	cmp	r1, #0
 8022916:	da08      	bge.n	802292a <sniprintf+0x22>
 8022918:	238b      	movs	r3, #139	; 0x8b
 802291a:	2001      	movs	r0, #1
 802291c:	602b      	str	r3, [r5, #0]
 802291e:	4240      	negs	r0, r0
 8022920:	b01d      	add	sp, #116	; 0x74
 8022922:	bc30      	pop	{r4, r5}
 8022924:	bc08      	pop	{r3}
 8022926:	b002      	add	sp, #8
 8022928:	4718      	bx	r3
 802292a:	2382      	movs	r3, #130	; 0x82
 802292c:	466a      	mov	r2, sp
 802292e:	009b      	lsls	r3, r3, #2
 8022930:	8293      	strh	r3, [r2, #20]
 8022932:	2300      	movs	r3, #0
 8022934:	9002      	str	r0, [sp, #8]
 8022936:	9006      	str	r0, [sp, #24]
 8022938:	4299      	cmp	r1, r3
 802293a:	d000      	beq.n	802293e <sniprintf+0x36>
 802293c:	1e4b      	subs	r3, r1, #1
 802293e:	9304      	str	r3, [sp, #16]
 8022940:	9307      	str	r3, [sp, #28]
 8022942:	2301      	movs	r3, #1
 8022944:	466a      	mov	r2, sp
 8022946:	425b      	negs	r3, r3
 8022948:	82d3      	strh	r3, [r2, #22]
 802294a:	0028      	movs	r0, r5
 802294c:	ab21      	add	r3, sp, #132	; 0x84
 802294e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022950:	a902      	add	r1, sp, #8
 8022952:	9301      	str	r3, [sp, #4]
 8022954:	f001 f9c8 	bl	8023ce8 <_svfiprintf_r>
 8022958:	1c43      	adds	r3, r0, #1
 802295a:	da01      	bge.n	8022960 <sniprintf+0x58>
 802295c:	238b      	movs	r3, #139	; 0x8b
 802295e:	602b      	str	r3, [r5, #0]
 8022960:	2c00      	cmp	r4, #0
 8022962:	d0dd      	beq.n	8022920 <sniprintf+0x18>
 8022964:	2200      	movs	r2, #0
 8022966:	9b02      	ldr	r3, [sp, #8]
 8022968:	701a      	strb	r2, [r3, #0]
 802296a:	e7d9      	b.n	8022920 <sniprintf+0x18>
 802296c:	20005128 	.word	0x20005128

08022970 <siprintf>:
 8022970:	b40e      	push	{r1, r2, r3}
 8022972:	b500      	push	{lr}
 8022974:	490b      	ldr	r1, [pc, #44]	; (80229a4 <siprintf+0x34>)
 8022976:	b09c      	sub	sp, #112	; 0x70
 8022978:	ab1d      	add	r3, sp, #116	; 0x74
 802297a:	9002      	str	r0, [sp, #8]
 802297c:	9006      	str	r0, [sp, #24]
 802297e:	9107      	str	r1, [sp, #28]
 8022980:	9104      	str	r1, [sp, #16]
 8022982:	4809      	ldr	r0, [pc, #36]	; (80229a8 <siprintf+0x38>)
 8022984:	4909      	ldr	r1, [pc, #36]	; (80229ac <siprintf+0x3c>)
 8022986:	cb04      	ldmia	r3!, {r2}
 8022988:	9105      	str	r1, [sp, #20]
 802298a:	6800      	ldr	r0, [r0, #0]
 802298c:	a902      	add	r1, sp, #8
 802298e:	9301      	str	r3, [sp, #4]
 8022990:	f001 f9aa 	bl	8023ce8 <_svfiprintf_r>
 8022994:	2200      	movs	r2, #0
 8022996:	9b02      	ldr	r3, [sp, #8]
 8022998:	701a      	strb	r2, [r3, #0]
 802299a:	b01c      	add	sp, #112	; 0x70
 802299c:	bc08      	pop	{r3}
 802299e:	b003      	add	sp, #12
 80229a0:	4718      	bx	r3
 80229a2:	46c0      	nop			; (mov r8, r8)
 80229a4:	7fffffff 	.word	0x7fffffff
 80229a8:	20005128 	.word	0x20005128
 80229ac:	ffff0208 	.word	0xffff0208

080229b0 <__sread>:
 80229b0:	b570      	push	{r4, r5, r6, lr}
 80229b2:	000c      	movs	r4, r1
 80229b4:	250e      	movs	r5, #14
 80229b6:	5f49      	ldrsh	r1, [r1, r5]
 80229b8:	f000 ff66 	bl	8023888 <_read_r>
 80229bc:	2800      	cmp	r0, #0
 80229be:	db03      	blt.n	80229c8 <__sread+0x18>
 80229c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80229c2:	181b      	adds	r3, r3, r0
 80229c4:	6563      	str	r3, [r4, #84]	; 0x54
 80229c6:	bd70      	pop	{r4, r5, r6, pc}
 80229c8:	89a3      	ldrh	r3, [r4, #12]
 80229ca:	4a02      	ldr	r2, [pc, #8]	; (80229d4 <__sread+0x24>)
 80229cc:	4013      	ands	r3, r2
 80229ce:	81a3      	strh	r3, [r4, #12]
 80229d0:	e7f9      	b.n	80229c6 <__sread+0x16>
 80229d2:	46c0      	nop			; (mov r8, r8)
 80229d4:	ffffefff 	.word	0xffffefff

080229d8 <__seofread>:
 80229d8:	2000      	movs	r0, #0
 80229da:	4770      	bx	lr

080229dc <__swrite>:
 80229dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229de:	001f      	movs	r7, r3
 80229e0:	898b      	ldrh	r3, [r1, #12]
 80229e2:	0005      	movs	r5, r0
 80229e4:	000c      	movs	r4, r1
 80229e6:	0016      	movs	r6, r2
 80229e8:	05db      	lsls	r3, r3, #23
 80229ea:	d505      	bpl.n	80229f8 <__swrite+0x1c>
 80229ec:	230e      	movs	r3, #14
 80229ee:	5ec9      	ldrsh	r1, [r1, r3]
 80229f0:	2200      	movs	r2, #0
 80229f2:	2302      	movs	r3, #2
 80229f4:	f000 ff34 	bl	8023860 <_lseek_r>
 80229f8:	89a3      	ldrh	r3, [r4, #12]
 80229fa:	4a05      	ldr	r2, [pc, #20]	; (8022a10 <__swrite+0x34>)
 80229fc:	0028      	movs	r0, r5
 80229fe:	4013      	ands	r3, r2
 8022a00:	81a3      	strh	r3, [r4, #12]
 8022a02:	0032      	movs	r2, r6
 8022a04:	230e      	movs	r3, #14
 8022a06:	5ee1      	ldrsh	r1, [r4, r3]
 8022a08:	003b      	movs	r3, r7
 8022a0a:	f000 ff63 	bl	80238d4 <_write_r>
 8022a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a10:	ffffefff 	.word	0xffffefff

08022a14 <__sseek>:
 8022a14:	b570      	push	{r4, r5, r6, lr}
 8022a16:	000c      	movs	r4, r1
 8022a18:	250e      	movs	r5, #14
 8022a1a:	5f49      	ldrsh	r1, [r1, r5]
 8022a1c:	f000 ff20 	bl	8023860 <_lseek_r>
 8022a20:	89a3      	ldrh	r3, [r4, #12]
 8022a22:	1c42      	adds	r2, r0, #1
 8022a24:	d103      	bne.n	8022a2e <__sseek+0x1a>
 8022a26:	4a05      	ldr	r2, [pc, #20]	; (8022a3c <__sseek+0x28>)
 8022a28:	4013      	ands	r3, r2
 8022a2a:	81a3      	strh	r3, [r4, #12]
 8022a2c:	bd70      	pop	{r4, r5, r6, pc}
 8022a2e:	2280      	movs	r2, #128	; 0x80
 8022a30:	0152      	lsls	r2, r2, #5
 8022a32:	4313      	orrs	r3, r2
 8022a34:	81a3      	strh	r3, [r4, #12]
 8022a36:	6560      	str	r0, [r4, #84]	; 0x54
 8022a38:	e7f8      	b.n	8022a2c <__sseek+0x18>
 8022a3a:	46c0      	nop			; (mov r8, r8)
 8022a3c:	ffffefff 	.word	0xffffefff

08022a40 <__sclose>:
 8022a40:	b510      	push	{r4, lr}
 8022a42:	230e      	movs	r3, #14
 8022a44:	5ec9      	ldrsh	r1, [r1, r3]
 8022a46:	f000 fef9 	bl	802383c <_close_r>
 8022a4a:	bd10      	pop	{r4, pc}

08022a4c <__swbuf_r>:
 8022a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a4e:	0006      	movs	r6, r0
 8022a50:	000d      	movs	r5, r1
 8022a52:	0014      	movs	r4, r2
 8022a54:	2800      	cmp	r0, #0
 8022a56:	d004      	beq.n	8022a62 <__swbuf_r+0x16>
 8022a58:	6a03      	ldr	r3, [r0, #32]
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	d101      	bne.n	8022a62 <__swbuf_r+0x16>
 8022a5e:	f7ff fea5 	bl	80227ac <__sinit>
 8022a62:	69a3      	ldr	r3, [r4, #24]
 8022a64:	60a3      	str	r3, [r4, #8]
 8022a66:	89a3      	ldrh	r3, [r4, #12]
 8022a68:	071b      	lsls	r3, r3, #28
 8022a6a:	d528      	bpl.n	8022abe <__swbuf_r+0x72>
 8022a6c:	6923      	ldr	r3, [r4, #16]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d025      	beq.n	8022abe <__swbuf_r+0x72>
 8022a72:	6923      	ldr	r3, [r4, #16]
 8022a74:	6820      	ldr	r0, [r4, #0]
 8022a76:	b2ef      	uxtb	r7, r5
 8022a78:	1ac0      	subs	r0, r0, r3
 8022a7a:	6963      	ldr	r3, [r4, #20]
 8022a7c:	b2ed      	uxtb	r5, r5
 8022a7e:	4283      	cmp	r3, r0
 8022a80:	dc05      	bgt.n	8022a8e <__swbuf_r+0x42>
 8022a82:	0021      	movs	r1, r4
 8022a84:	0030      	movs	r0, r6
 8022a86:	f001 fd7d 	bl	8024584 <_fflush_r>
 8022a8a:	2800      	cmp	r0, #0
 8022a8c:	d11d      	bne.n	8022aca <__swbuf_r+0x7e>
 8022a8e:	68a3      	ldr	r3, [r4, #8]
 8022a90:	3001      	adds	r0, #1
 8022a92:	3b01      	subs	r3, #1
 8022a94:	60a3      	str	r3, [r4, #8]
 8022a96:	6823      	ldr	r3, [r4, #0]
 8022a98:	1c5a      	adds	r2, r3, #1
 8022a9a:	6022      	str	r2, [r4, #0]
 8022a9c:	701f      	strb	r7, [r3, #0]
 8022a9e:	6963      	ldr	r3, [r4, #20]
 8022aa0:	4283      	cmp	r3, r0
 8022aa2:	d004      	beq.n	8022aae <__swbuf_r+0x62>
 8022aa4:	89a3      	ldrh	r3, [r4, #12]
 8022aa6:	07db      	lsls	r3, r3, #31
 8022aa8:	d507      	bpl.n	8022aba <__swbuf_r+0x6e>
 8022aaa:	2d0a      	cmp	r5, #10
 8022aac:	d105      	bne.n	8022aba <__swbuf_r+0x6e>
 8022aae:	0021      	movs	r1, r4
 8022ab0:	0030      	movs	r0, r6
 8022ab2:	f001 fd67 	bl	8024584 <_fflush_r>
 8022ab6:	2800      	cmp	r0, #0
 8022ab8:	d107      	bne.n	8022aca <__swbuf_r+0x7e>
 8022aba:	0028      	movs	r0, r5
 8022abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022abe:	0021      	movs	r1, r4
 8022ac0:	0030      	movs	r0, r6
 8022ac2:	f000 f805 	bl	8022ad0 <__swsetup_r>
 8022ac6:	2800      	cmp	r0, #0
 8022ac8:	d0d3      	beq.n	8022a72 <__swbuf_r+0x26>
 8022aca:	2501      	movs	r5, #1
 8022acc:	426d      	negs	r5, r5
 8022ace:	e7f4      	b.n	8022aba <__swbuf_r+0x6e>

08022ad0 <__swsetup_r>:
 8022ad0:	4b30      	ldr	r3, [pc, #192]	; (8022b94 <__swsetup_r+0xc4>)
 8022ad2:	b570      	push	{r4, r5, r6, lr}
 8022ad4:	0005      	movs	r5, r0
 8022ad6:	6818      	ldr	r0, [r3, #0]
 8022ad8:	000c      	movs	r4, r1
 8022ada:	2800      	cmp	r0, #0
 8022adc:	d004      	beq.n	8022ae8 <__swsetup_r+0x18>
 8022ade:	6a03      	ldr	r3, [r0, #32]
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d101      	bne.n	8022ae8 <__swsetup_r+0x18>
 8022ae4:	f7ff fe62 	bl	80227ac <__sinit>
 8022ae8:	230c      	movs	r3, #12
 8022aea:	5ee2      	ldrsh	r2, [r4, r3]
 8022aec:	b293      	uxth	r3, r2
 8022aee:	0711      	lsls	r1, r2, #28
 8022af0:	d423      	bmi.n	8022b3a <__swsetup_r+0x6a>
 8022af2:	06d9      	lsls	r1, r3, #27
 8022af4:	d407      	bmi.n	8022b06 <__swsetup_r+0x36>
 8022af6:	2309      	movs	r3, #9
 8022af8:	2001      	movs	r0, #1
 8022afa:	602b      	str	r3, [r5, #0]
 8022afc:	3337      	adds	r3, #55	; 0x37
 8022afe:	4313      	orrs	r3, r2
 8022b00:	81a3      	strh	r3, [r4, #12]
 8022b02:	4240      	negs	r0, r0
 8022b04:	bd70      	pop	{r4, r5, r6, pc}
 8022b06:	075b      	lsls	r3, r3, #29
 8022b08:	d513      	bpl.n	8022b32 <__swsetup_r+0x62>
 8022b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022b0c:	2900      	cmp	r1, #0
 8022b0e:	d008      	beq.n	8022b22 <__swsetup_r+0x52>
 8022b10:	0023      	movs	r3, r4
 8022b12:	3344      	adds	r3, #68	; 0x44
 8022b14:	4299      	cmp	r1, r3
 8022b16:	d002      	beq.n	8022b1e <__swsetup_r+0x4e>
 8022b18:	0028      	movs	r0, r5
 8022b1a:	f000 ff65 	bl	80239e8 <_free_r>
 8022b1e:	2300      	movs	r3, #0
 8022b20:	6363      	str	r3, [r4, #52]	; 0x34
 8022b22:	2224      	movs	r2, #36	; 0x24
 8022b24:	89a3      	ldrh	r3, [r4, #12]
 8022b26:	4393      	bics	r3, r2
 8022b28:	81a3      	strh	r3, [r4, #12]
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	6063      	str	r3, [r4, #4]
 8022b2e:	6923      	ldr	r3, [r4, #16]
 8022b30:	6023      	str	r3, [r4, #0]
 8022b32:	2308      	movs	r3, #8
 8022b34:	89a2      	ldrh	r2, [r4, #12]
 8022b36:	4313      	orrs	r3, r2
 8022b38:	81a3      	strh	r3, [r4, #12]
 8022b3a:	6923      	ldr	r3, [r4, #16]
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d10b      	bne.n	8022b58 <__swsetup_r+0x88>
 8022b40:	21a0      	movs	r1, #160	; 0xa0
 8022b42:	2280      	movs	r2, #128	; 0x80
 8022b44:	89a3      	ldrh	r3, [r4, #12]
 8022b46:	0089      	lsls	r1, r1, #2
 8022b48:	0092      	lsls	r2, r2, #2
 8022b4a:	400b      	ands	r3, r1
 8022b4c:	4293      	cmp	r3, r2
 8022b4e:	d003      	beq.n	8022b58 <__swsetup_r+0x88>
 8022b50:	0021      	movs	r1, r4
 8022b52:	0028      	movs	r0, r5
 8022b54:	f001 fd7a 	bl	802464c <__smakebuf_r>
 8022b58:	220c      	movs	r2, #12
 8022b5a:	5ea3      	ldrsh	r3, [r4, r2]
 8022b5c:	2001      	movs	r0, #1
 8022b5e:	001a      	movs	r2, r3
 8022b60:	b299      	uxth	r1, r3
 8022b62:	4002      	ands	r2, r0
 8022b64:	4203      	tst	r3, r0
 8022b66:	d00f      	beq.n	8022b88 <__swsetup_r+0xb8>
 8022b68:	2200      	movs	r2, #0
 8022b6a:	60a2      	str	r2, [r4, #8]
 8022b6c:	6962      	ldr	r2, [r4, #20]
 8022b6e:	4252      	negs	r2, r2
 8022b70:	61a2      	str	r2, [r4, #24]
 8022b72:	2000      	movs	r0, #0
 8022b74:	6922      	ldr	r2, [r4, #16]
 8022b76:	4282      	cmp	r2, r0
 8022b78:	d1c4      	bne.n	8022b04 <__swsetup_r+0x34>
 8022b7a:	0609      	lsls	r1, r1, #24
 8022b7c:	d5c2      	bpl.n	8022b04 <__swsetup_r+0x34>
 8022b7e:	2240      	movs	r2, #64	; 0x40
 8022b80:	4313      	orrs	r3, r2
 8022b82:	81a3      	strh	r3, [r4, #12]
 8022b84:	3801      	subs	r0, #1
 8022b86:	e7bd      	b.n	8022b04 <__swsetup_r+0x34>
 8022b88:	0788      	lsls	r0, r1, #30
 8022b8a:	d400      	bmi.n	8022b8e <__swsetup_r+0xbe>
 8022b8c:	6962      	ldr	r2, [r4, #20]
 8022b8e:	60a2      	str	r2, [r4, #8]
 8022b90:	e7ef      	b.n	8022b72 <__swsetup_r+0xa2>
 8022b92:	46c0      	nop			; (mov r8, r8)
 8022b94:	20005128 	.word	0x20005128

08022b98 <memset>:
 8022b98:	0003      	movs	r3, r0
 8022b9a:	1882      	adds	r2, r0, r2
 8022b9c:	4293      	cmp	r3, r2
 8022b9e:	d100      	bne.n	8022ba2 <memset+0xa>
 8022ba0:	4770      	bx	lr
 8022ba2:	7019      	strb	r1, [r3, #0]
 8022ba4:	3301      	adds	r3, #1
 8022ba6:	e7f9      	b.n	8022b9c <memset+0x4>

08022ba8 <strcat>:
 8022ba8:	0002      	movs	r2, r0
 8022baa:	b510      	push	{r4, lr}
 8022bac:	7813      	ldrb	r3, [r2, #0]
 8022bae:	0014      	movs	r4, r2
 8022bb0:	3201      	adds	r2, #1
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	d1fa      	bne.n	8022bac <strcat+0x4>
 8022bb6:	5cca      	ldrb	r2, [r1, r3]
 8022bb8:	54e2      	strb	r2, [r4, r3]
 8022bba:	3301      	adds	r3, #1
 8022bbc:	2a00      	cmp	r2, #0
 8022bbe:	d1fa      	bne.n	8022bb6 <strcat+0xe>
 8022bc0:	bd10      	pop	{r4, pc}

08022bc2 <strchr>:
 8022bc2:	b2c9      	uxtb	r1, r1
 8022bc4:	7803      	ldrb	r3, [r0, #0]
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d004      	beq.n	8022bd4 <strchr+0x12>
 8022bca:	428b      	cmp	r3, r1
 8022bcc:	d100      	bne.n	8022bd0 <strchr+0xe>
 8022bce:	4770      	bx	lr
 8022bd0:	3001      	adds	r0, #1
 8022bd2:	e7f7      	b.n	8022bc4 <strchr+0x2>
 8022bd4:	424b      	negs	r3, r1
 8022bd6:	4159      	adcs	r1, r3
 8022bd8:	4249      	negs	r1, r1
 8022bda:	4008      	ands	r0, r1
 8022bdc:	e7f7      	b.n	8022bce <strchr+0xc>

08022bde <strncmp>:
 8022bde:	b530      	push	{r4, r5, lr}
 8022be0:	0005      	movs	r5, r0
 8022be2:	1e10      	subs	r0, r2, #0
 8022be4:	d00b      	beq.n	8022bfe <strncmp+0x20>
 8022be6:	2400      	movs	r4, #0
 8022be8:	3a01      	subs	r2, #1
 8022bea:	5d2b      	ldrb	r3, [r5, r4]
 8022bec:	5d08      	ldrb	r0, [r1, r4]
 8022bee:	4283      	cmp	r3, r0
 8022bf0:	d104      	bne.n	8022bfc <strncmp+0x1e>
 8022bf2:	42a2      	cmp	r2, r4
 8022bf4:	d002      	beq.n	8022bfc <strncmp+0x1e>
 8022bf6:	3401      	adds	r4, #1
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	d1f6      	bne.n	8022bea <strncmp+0xc>
 8022bfc:	1a18      	subs	r0, r3, r0
 8022bfe:	bd30      	pop	{r4, r5, pc}

08022c00 <strncpy>:
 8022c00:	0003      	movs	r3, r0
 8022c02:	b530      	push	{r4, r5, lr}
 8022c04:	001d      	movs	r5, r3
 8022c06:	2a00      	cmp	r2, #0
 8022c08:	d006      	beq.n	8022c18 <strncpy+0x18>
 8022c0a:	780c      	ldrb	r4, [r1, #0]
 8022c0c:	3a01      	subs	r2, #1
 8022c0e:	3301      	adds	r3, #1
 8022c10:	702c      	strb	r4, [r5, #0]
 8022c12:	3101      	adds	r1, #1
 8022c14:	2c00      	cmp	r4, #0
 8022c16:	d1f5      	bne.n	8022c04 <strncpy+0x4>
 8022c18:	2100      	movs	r1, #0
 8022c1a:	189a      	adds	r2, r3, r2
 8022c1c:	4293      	cmp	r3, r2
 8022c1e:	d100      	bne.n	8022c22 <strncpy+0x22>
 8022c20:	bd30      	pop	{r4, r5, pc}
 8022c22:	7019      	strb	r1, [r3, #0]
 8022c24:	3301      	adds	r3, #1
 8022c26:	e7f9      	b.n	8022c1c <strncpy+0x1c>

08022c28 <strtok>:
 8022c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c2a:	4b16      	ldr	r3, [pc, #88]	; (8022c84 <strtok+0x5c>)
 8022c2c:	0005      	movs	r5, r0
 8022c2e:	681f      	ldr	r7, [r3, #0]
 8022c30:	000e      	movs	r6, r1
 8022c32:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8022c34:	2c00      	cmp	r4, #0
 8022c36:	d11d      	bne.n	8022c74 <strtok+0x4c>
 8022c38:	2050      	movs	r0, #80	; 0x50
 8022c3a:	f7ff fbdb 	bl	80223f4 <malloc>
 8022c3e:	1e02      	subs	r2, r0, #0
 8022c40:	6478      	str	r0, [r7, #68]	; 0x44
 8022c42:	d104      	bne.n	8022c4e <strtok+0x26>
 8022c44:	215b      	movs	r1, #91	; 0x5b
 8022c46:	4b10      	ldr	r3, [pc, #64]	; (8022c88 <strtok+0x60>)
 8022c48:	4810      	ldr	r0, [pc, #64]	; (8022c8c <strtok+0x64>)
 8022c4a:	f000 fe97 	bl	802397c <__assert_func>
 8022c4e:	6004      	str	r4, [r0, #0]
 8022c50:	6044      	str	r4, [r0, #4]
 8022c52:	6084      	str	r4, [r0, #8]
 8022c54:	60c4      	str	r4, [r0, #12]
 8022c56:	6104      	str	r4, [r0, #16]
 8022c58:	6144      	str	r4, [r0, #20]
 8022c5a:	6184      	str	r4, [r0, #24]
 8022c5c:	6284      	str	r4, [r0, #40]	; 0x28
 8022c5e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8022c60:	6304      	str	r4, [r0, #48]	; 0x30
 8022c62:	6344      	str	r4, [r0, #52]	; 0x34
 8022c64:	6384      	str	r4, [r0, #56]	; 0x38
 8022c66:	63c4      	str	r4, [r0, #60]	; 0x3c
 8022c68:	6404      	str	r4, [r0, #64]	; 0x40
 8022c6a:	6444      	str	r4, [r0, #68]	; 0x44
 8022c6c:	6484      	str	r4, [r0, #72]	; 0x48
 8022c6e:	64c4      	str	r4, [r0, #76]	; 0x4c
 8022c70:	7704      	strb	r4, [r0, #28]
 8022c72:	6244      	str	r4, [r0, #36]	; 0x24
 8022c74:	0031      	movs	r1, r6
 8022c76:	0028      	movs	r0, r5
 8022c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022c7a:	2301      	movs	r3, #1
 8022c7c:	f000 f808 	bl	8022c90 <__strtok_r>
 8022c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c82:	46c0      	nop			; (mov r8, r8)
 8022c84:	20005128 	.word	0x20005128
 8022c88:	08032209 	.word	0x08032209
 8022c8c:	08032220 	.word	0x08032220

08022c90 <__strtok_r>:
 8022c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c92:	2800      	cmp	r0, #0
 8022c94:	d102      	bne.n	8022c9c <__strtok_r+0xc>
 8022c96:	6810      	ldr	r0, [r2, #0]
 8022c98:	2800      	cmp	r0, #0
 8022c9a:	d013      	beq.n	8022cc4 <__strtok_r+0x34>
 8022c9c:	0004      	movs	r4, r0
 8022c9e:	0020      	movs	r0, r4
 8022ca0:	000e      	movs	r6, r1
 8022ca2:	7805      	ldrb	r5, [r0, #0]
 8022ca4:	3401      	adds	r4, #1
 8022ca6:	7837      	ldrb	r7, [r6, #0]
 8022ca8:	2f00      	cmp	r7, #0
 8022caa:	d104      	bne.n	8022cb6 <__strtok_r+0x26>
 8022cac:	2d00      	cmp	r5, #0
 8022cae:	d10f      	bne.n	8022cd0 <__strtok_r+0x40>
 8022cb0:	0028      	movs	r0, r5
 8022cb2:	6015      	str	r5, [r2, #0]
 8022cb4:	e006      	b.n	8022cc4 <__strtok_r+0x34>
 8022cb6:	3601      	adds	r6, #1
 8022cb8:	42bd      	cmp	r5, r7
 8022cba:	d1f4      	bne.n	8022ca6 <__strtok_r+0x16>
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	d1ee      	bne.n	8022c9e <__strtok_r+0xe>
 8022cc0:	6014      	str	r4, [r2, #0]
 8022cc2:	7003      	strb	r3, [r0, #0]
 8022cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022cc6:	002f      	movs	r7, r5
 8022cc8:	e00f      	b.n	8022cea <__strtok_r+0x5a>
 8022cca:	3301      	adds	r3, #1
 8022ccc:	2e00      	cmp	r6, #0
 8022cce:	d104      	bne.n	8022cda <__strtok_r+0x4a>
 8022cd0:	0023      	movs	r3, r4
 8022cd2:	3401      	adds	r4, #1
 8022cd4:	781d      	ldrb	r5, [r3, #0]
 8022cd6:	0027      	movs	r7, r4
 8022cd8:	000b      	movs	r3, r1
 8022cda:	781e      	ldrb	r6, [r3, #0]
 8022cdc:	42b5      	cmp	r5, r6
 8022cde:	d1f4      	bne.n	8022cca <__strtok_r+0x3a>
 8022ce0:	2d00      	cmp	r5, #0
 8022ce2:	d0f0      	beq.n	8022cc6 <__strtok_r+0x36>
 8022ce4:	2300      	movs	r3, #0
 8022ce6:	3c01      	subs	r4, #1
 8022ce8:	7023      	strb	r3, [r4, #0]
 8022cea:	6017      	str	r7, [r2, #0]
 8022cec:	e7ea      	b.n	8022cc4 <__strtok_r+0x34>

08022cee <strtok_r>:
 8022cee:	b510      	push	{r4, lr}
 8022cf0:	2301      	movs	r3, #1
 8022cf2:	f7ff ffcd 	bl	8022c90 <__strtok_r>
 8022cf6:	bd10      	pop	{r4, pc}

08022cf8 <strstr>:
 8022cf8:	780a      	ldrb	r2, [r1, #0]
 8022cfa:	b530      	push	{r4, r5, lr}
 8022cfc:	2a00      	cmp	r2, #0
 8022cfe:	d10c      	bne.n	8022d1a <strstr+0x22>
 8022d00:	bd30      	pop	{r4, r5, pc}
 8022d02:	429a      	cmp	r2, r3
 8022d04:	d108      	bne.n	8022d18 <strstr+0x20>
 8022d06:	2301      	movs	r3, #1
 8022d08:	5ccc      	ldrb	r4, [r1, r3]
 8022d0a:	2c00      	cmp	r4, #0
 8022d0c:	d0f8      	beq.n	8022d00 <strstr+0x8>
 8022d0e:	5cc5      	ldrb	r5, [r0, r3]
 8022d10:	42a5      	cmp	r5, r4
 8022d12:	d101      	bne.n	8022d18 <strstr+0x20>
 8022d14:	3301      	adds	r3, #1
 8022d16:	e7f7      	b.n	8022d08 <strstr+0x10>
 8022d18:	3001      	adds	r0, #1
 8022d1a:	7803      	ldrb	r3, [r0, #0]
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	d1f0      	bne.n	8022d02 <strstr+0xa>
 8022d20:	0018      	movs	r0, r3
 8022d22:	e7ed      	b.n	8022d00 <strstr+0x8>

08022d24 <validate_structure>:
 8022d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d26:	6801      	ldr	r1, [r0, #0]
 8022d28:	0004      	movs	r4, r0
 8022d2a:	b085      	sub	sp, #20
 8022d2c:	293b      	cmp	r1, #59	; 0x3b
 8022d2e:	d90b      	bls.n	8022d48 <validate_structure+0x24>
 8022d30:	223c      	movs	r2, #60	; 0x3c
 8022d32:	a802      	add	r0, sp, #8
 8022d34:	f000 fe40 	bl	80239b8 <div>
 8022d38:	6863      	ldr	r3, [r4, #4]
 8022d3a:	9902      	ldr	r1, [sp, #8]
 8022d3c:	9a03      	ldr	r2, [sp, #12]
 8022d3e:	185b      	adds	r3, r3, r1
 8022d40:	6063      	str	r3, [r4, #4]
 8022d42:	2a00      	cmp	r2, #0
 8022d44:	db73      	blt.n	8022e2e <validate_structure+0x10a>
 8022d46:	6022      	str	r2, [r4, #0]
 8022d48:	6861      	ldr	r1, [r4, #4]
 8022d4a:	293b      	cmp	r1, #59	; 0x3b
 8022d4c:	d90b      	bls.n	8022d66 <validate_structure+0x42>
 8022d4e:	223c      	movs	r2, #60	; 0x3c
 8022d50:	a802      	add	r0, sp, #8
 8022d52:	f000 fe31 	bl	80239b8 <div>
 8022d56:	68a3      	ldr	r3, [r4, #8]
 8022d58:	9902      	ldr	r1, [sp, #8]
 8022d5a:	9a03      	ldr	r2, [sp, #12]
 8022d5c:	185b      	adds	r3, r3, r1
 8022d5e:	60a3      	str	r3, [r4, #8]
 8022d60:	2a00      	cmp	r2, #0
 8022d62:	db69      	blt.n	8022e38 <validate_structure+0x114>
 8022d64:	6062      	str	r2, [r4, #4]
 8022d66:	68a1      	ldr	r1, [r4, #8]
 8022d68:	2917      	cmp	r1, #23
 8022d6a:	d90b      	bls.n	8022d84 <validate_structure+0x60>
 8022d6c:	2218      	movs	r2, #24
 8022d6e:	a802      	add	r0, sp, #8
 8022d70:	f000 fe22 	bl	80239b8 <div>
 8022d74:	68e3      	ldr	r3, [r4, #12]
 8022d76:	9902      	ldr	r1, [sp, #8]
 8022d78:	9a03      	ldr	r2, [sp, #12]
 8022d7a:	185b      	adds	r3, r3, r1
 8022d7c:	60e3      	str	r3, [r4, #12]
 8022d7e:	2a00      	cmp	r2, #0
 8022d80:	db5f      	blt.n	8022e42 <validate_structure+0x11e>
 8022d82:	60a2      	str	r2, [r4, #8]
 8022d84:	6921      	ldr	r1, [r4, #16]
 8022d86:	290b      	cmp	r1, #11
 8022d88:	d90b      	bls.n	8022da2 <validate_structure+0x7e>
 8022d8a:	220c      	movs	r2, #12
 8022d8c:	a802      	add	r0, sp, #8
 8022d8e:	f000 fe13 	bl	80239b8 <div>
 8022d92:	6963      	ldr	r3, [r4, #20]
 8022d94:	9902      	ldr	r1, [sp, #8]
 8022d96:	9a03      	ldr	r2, [sp, #12]
 8022d98:	185b      	adds	r3, r3, r1
 8022d9a:	6163      	str	r3, [r4, #20]
 8022d9c:	2a00      	cmp	r2, #0
 8022d9e:	db55      	blt.n	8022e4c <validate_structure+0x128>
 8022da0:	6122      	str	r2, [r4, #16]
 8022da2:	6965      	ldr	r5, [r4, #20]
 8022da4:	231c      	movs	r3, #28
 8022da6:	07aa      	lsls	r2, r5, #30
 8022da8:	d110      	bne.n	8022dcc <validate_structure+0xa8>
 8022daa:	2164      	movs	r1, #100	; 0x64
 8022dac:	0028      	movs	r0, r5
 8022dae:	f7df fb33 	bl	8002418 <__aeabi_idivmod>
 8022db2:	231d      	movs	r3, #29
 8022db4:	2900      	cmp	r1, #0
 8022db6:	d109      	bne.n	8022dcc <validate_structure+0xa8>
 8022db8:	4b3d      	ldr	r3, [pc, #244]	; (8022eb0 <validate_structure+0x18c>)
 8022dba:	3191      	adds	r1, #145	; 0x91
 8022dbc:	18e8      	adds	r0, r5, r3
 8022dbe:	31ff      	adds	r1, #255	; 0xff
 8022dc0:	f7df fb2a 	bl	8002418 <__aeabi_idivmod>
 8022dc4:	424b      	negs	r3, r1
 8022dc6:	4159      	adcs	r1, r3
 8022dc8:	000b      	movs	r3, r1
 8022dca:	331c      	adds	r3, #28
 8022dcc:	68e2      	ldr	r2, [r4, #12]
 8022dce:	271d      	movs	r7, #29
 8022dd0:	2a00      	cmp	r2, #0
 8022dd2:	dd67      	ble.n	8022ea4 <validate_structure+0x180>
 8022dd4:	2603      	movs	r6, #3
 8022dd6:	271c      	movs	r7, #28
 8022dd8:	4a36      	ldr	r2, [pc, #216]	; (8022eb4 <validate_structure+0x190>)
 8022dda:	9201      	str	r2, [sp, #4]
 8022ddc:	6922      	ldr	r2, [r4, #16]
 8022dde:	0018      	movs	r0, r3
 8022de0:	68e1      	ldr	r1, [r4, #12]
 8022de2:	2a01      	cmp	r2, #1
 8022de4:	d002      	beq.n	8022dec <validate_structure+0xc8>
 8022de6:	9d01      	ldr	r5, [sp, #4]
 8022de8:	0090      	lsls	r0, r2, #2
 8022dea:	5940      	ldr	r0, [r0, r5]
 8022dec:	4281      	cmp	r1, r0
 8022dee:	dd5c      	ble.n	8022eaa <validate_structure+0x186>
 8022df0:	1a09      	subs	r1, r1, r0
 8022df2:	3201      	adds	r2, #1
 8022df4:	60e1      	str	r1, [r4, #12]
 8022df6:	6122      	str	r2, [r4, #16]
 8022df8:	2a0c      	cmp	r2, #12
 8022dfa:	d1ef      	bne.n	8022ddc <validate_structure+0xb8>
 8022dfc:	2300      	movs	r3, #0
 8022dfe:	6965      	ldr	r5, [r4, #20]
 8022e00:	6123      	str	r3, [r4, #16]
 8022e02:	1c68      	adds	r0, r5, #1
 8022e04:	003b      	movs	r3, r7
 8022e06:	6160      	str	r0, [r4, #20]
 8022e08:	4230      	tst	r0, r6
 8022e0a:	d1e7      	bne.n	8022ddc <validate_structure+0xb8>
 8022e0c:	2164      	movs	r1, #100	; 0x64
 8022e0e:	f7df fb03 	bl	8002418 <__aeabi_idivmod>
 8022e12:	231d      	movs	r3, #29
 8022e14:	2900      	cmp	r1, #0
 8022e16:	d1e1      	bne.n	8022ddc <validate_structure+0xb8>
 8022e18:	4b27      	ldr	r3, [pc, #156]	; (8022eb8 <validate_structure+0x194>)
 8022e1a:	3191      	adds	r1, #145	; 0x91
 8022e1c:	18e8      	adds	r0, r5, r3
 8022e1e:	31ff      	adds	r1, #255	; 0xff
 8022e20:	f7df fafa 	bl	8002418 <__aeabi_idivmod>
 8022e24:	424b      	negs	r3, r1
 8022e26:	4159      	adcs	r1, r3
 8022e28:	000b      	movs	r3, r1
 8022e2a:	331c      	adds	r3, #28
 8022e2c:	e7d6      	b.n	8022ddc <validate_structure+0xb8>
 8022e2e:	323c      	adds	r2, #60	; 0x3c
 8022e30:	3b01      	subs	r3, #1
 8022e32:	6022      	str	r2, [r4, #0]
 8022e34:	6063      	str	r3, [r4, #4]
 8022e36:	e787      	b.n	8022d48 <validate_structure+0x24>
 8022e38:	323c      	adds	r2, #60	; 0x3c
 8022e3a:	3b01      	subs	r3, #1
 8022e3c:	6062      	str	r2, [r4, #4]
 8022e3e:	60a3      	str	r3, [r4, #8]
 8022e40:	e791      	b.n	8022d66 <validate_structure+0x42>
 8022e42:	3218      	adds	r2, #24
 8022e44:	3b01      	subs	r3, #1
 8022e46:	60a2      	str	r2, [r4, #8]
 8022e48:	60e3      	str	r3, [r4, #12]
 8022e4a:	e79b      	b.n	8022d84 <validate_structure+0x60>
 8022e4c:	320c      	adds	r2, #12
 8022e4e:	3b01      	subs	r3, #1
 8022e50:	6122      	str	r2, [r4, #16]
 8022e52:	6163      	str	r3, [r4, #20]
 8022e54:	e7a5      	b.n	8022da2 <validate_structure+0x7e>
 8022e56:	6922      	ldr	r2, [r4, #16]
 8022e58:	3a01      	subs	r2, #1
 8022e5a:	6122      	str	r2, [r4, #16]
 8022e5c:	3201      	adds	r2, #1
 8022e5e:	d118      	bne.n	8022e92 <validate_structure+0x16e>
 8022e60:	230b      	movs	r3, #11
 8022e62:	2203      	movs	r2, #3
 8022e64:	6965      	ldr	r5, [r4, #20]
 8022e66:	6123      	str	r3, [r4, #16]
 8022e68:	1e68      	subs	r0, r5, #1
 8022e6a:	6160      	str	r0, [r4, #20]
 8022e6c:	3311      	adds	r3, #17
 8022e6e:	4210      	tst	r0, r2
 8022e70:	d10f      	bne.n	8022e92 <validate_structure+0x16e>
 8022e72:	2164      	movs	r1, #100	; 0x64
 8022e74:	f7df fad0 	bl	8002418 <__aeabi_idivmod>
 8022e78:	003b      	movs	r3, r7
 8022e7a:	2900      	cmp	r1, #0
 8022e7c:	d109      	bne.n	8022e92 <validate_structure+0x16e>
 8022e7e:	4b0f      	ldr	r3, [pc, #60]	; (8022ebc <validate_structure+0x198>)
 8022e80:	3191      	adds	r1, #145	; 0x91
 8022e82:	18e8      	adds	r0, r5, r3
 8022e84:	31ff      	adds	r1, #255	; 0xff
 8022e86:	f7df fac7 	bl	8002418 <__aeabi_idivmod>
 8022e8a:	424b      	negs	r3, r1
 8022e8c:	4159      	adcs	r1, r3
 8022e8e:	000b      	movs	r3, r1
 8022e90:	331c      	adds	r3, #28
 8022e92:	6921      	ldr	r1, [r4, #16]
 8022e94:	001a      	movs	r2, r3
 8022e96:	2901      	cmp	r1, #1
 8022e98:	d002      	beq.n	8022ea0 <validate_structure+0x17c>
 8022e9a:	4a06      	ldr	r2, [pc, #24]	; (8022eb4 <validate_structure+0x190>)
 8022e9c:	0089      	lsls	r1, r1, #2
 8022e9e:	588a      	ldr	r2, [r1, r2]
 8022ea0:	18b2      	adds	r2, r6, r2
 8022ea2:	60e2      	str	r2, [r4, #12]
 8022ea4:	68e6      	ldr	r6, [r4, #12]
 8022ea6:	2e00      	cmp	r6, #0
 8022ea8:	ddd5      	ble.n	8022e56 <validate_structure+0x132>
 8022eaa:	b005      	add	sp, #20
 8022eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022eae:	46c0      	nop			; (mov r8, r8)
 8022eb0:	0000076c 	.word	0x0000076c
 8022eb4:	0803227c 	.word	0x0803227c
 8022eb8:	0000076d 	.word	0x0000076d
 8022ebc:	0000076b 	.word	0x0000076b

08022ec0 <mktime>:
 8022ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ec2:	b08d      	sub	sp, #52	; 0x34
 8022ec4:	0004      	movs	r4, r0
 8022ec6:	f001 fc71 	bl	80247ac <__gettzinfo>
 8022eca:	9006      	str	r0, [sp, #24]
 8022ecc:	0020      	movs	r0, r4
 8022ece:	f7ff ff29 	bl	8022d24 <validate_structure>
 8022ed2:	223c      	movs	r2, #60	; 0x3c
 8022ed4:	6863      	ldr	r3, [r4, #4]
 8022ed6:	68a1      	ldr	r1, [r4, #8]
 8022ed8:	4353      	muls	r3, r2
 8022eda:	6822      	ldr	r2, [r4, #0]
 8022edc:	6967      	ldr	r7, [r4, #20]
 8022ede:	189b      	adds	r3, r3, r2
 8022ee0:	22e1      	movs	r2, #225	; 0xe1
 8022ee2:	0112      	lsls	r2, r2, #4
 8022ee4:	434a      	muls	r2, r1
 8022ee6:	6921      	ldr	r1, [r4, #16]
 8022ee8:	189b      	adds	r3, r3, r2
 8022eea:	9300      	str	r3, [sp, #0]
 8022eec:	4abc      	ldr	r2, [pc, #752]	; (80231e0 <mktime+0x320>)
 8022eee:	17db      	asrs	r3, r3, #31
 8022ef0:	9301      	str	r3, [sp, #4]
 8022ef2:	0088      	lsls	r0, r1, #2
 8022ef4:	68e3      	ldr	r3, [r4, #12]
 8022ef6:	5882      	ldr	r2, [r0, r2]
 8022ef8:	3b01      	subs	r3, #1
 8022efa:	189b      	adds	r3, r3, r2
 8022efc:	9303      	str	r3, [sp, #12]
 8022efe:	2901      	cmp	r1, #1
 8022f00:	dd12      	ble.n	8022f28 <mktime+0x68>
 8022f02:	07bb      	lsls	r3, r7, #30
 8022f04:	d110      	bne.n	8022f28 <mktime+0x68>
 8022f06:	2164      	movs	r1, #100	; 0x64
 8022f08:	0038      	movs	r0, r7
 8022f0a:	f7df fa85 	bl	8002418 <__aeabi_idivmod>
 8022f0e:	2900      	cmp	r1, #0
 8022f10:	d107      	bne.n	8022f22 <mktime+0x62>
 8022f12:	4bb4      	ldr	r3, [pc, #720]	; (80231e4 <mktime+0x324>)
 8022f14:	3191      	adds	r1, #145	; 0x91
 8022f16:	31ff      	adds	r1, #255	; 0xff
 8022f18:	18f8      	adds	r0, r7, r3
 8022f1a:	f7df fa7d 	bl	8002418 <__aeabi_idivmod>
 8022f1e:	2900      	cmp	r1, #0
 8022f20:	d102      	bne.n	8022f28 <mktime+0x68>
 8022f22:	9b03      	ldr	r3, [sp, #12]
 8022f24:	3301      	adds	r3, #1
 8022f26:	9303      	str	r3, [sp, #12]
 8022f28:	9b03      	ldr	r3, [sp, #12]
 8022f2a:	4aaf      	ldr	r2, [pc, #700]	; (80231e8 <mktime+0x328>)
 8022f2c:	61e3      	str	r3, [r4, #28]
 8022f2e:	4baf      	ldr	r3, [pc, #700]	; (80231ec <mktime+0x32c>)
 8022f30:	18fb      	adds	r3, r7, r3
 8022f32:	4293      	cmp	r3, r2
 8022f34:	d900      	bls.n	8022f38 <mktime+0x78>
 8022f36:	e188      	b.n	802324a <mktime+0x38a>
 8022f38:	2f46      	cmp	r7, #70	; 0x46
 8022f3a:	dc00      	bgt.n	8022f3e <mktime+0x7e>
 8022f3c:	e09a      	b.n	8023074 <mktime+0x1b4>
 8022f3e:	2204      	movs	r2, #4
 8022f40:	2346      	movs	r3, #70	; 0x46
 8022f42:	2603      	movs	r6, #3
 8022f44:	4694      	mov	ip, r2
 8022f46:	0019      	movs	r1, r3
 8022f48:	4031      	ands	r1, r6
 8022f4a:	4233      	tst	r3, r6
 8022f4c:	d000      	beq.n	8022f50 <mktime+0x90>
 8022f4e:	e08e      	b.n	802306e <mktime+0x1ae>
 8022f50:	2002      	movs	r0, #2
 8022f52:	4da7      	ldr	r5, [pc, #668]	; (80231f0 <mktime+0x330>)
 8022f54:	4aa7      	ldr	r2, [pc, #668]	; (80231f4 <mktime+0x334>)
 8022f56:	435d      	muls	r5, r3
 8022f58:	41c5      	rors	r5, r0
 8022f5a:	306d      	adds	r0, #109	; 0x6d
 8022f5c:	30ff      	adds	r0, #255	; 0xff
 8022f5e:	4295      	cmp	r5, r2
 8022f60:	d80b      	bhi.n	8022f7a <mktime+0xba>
 8022f62:	4aa0      	ldr	r2, [pc, #640]	; (80231e4 <mktime+0x324>)
 8022f64:	1898      	adds	r0, r3, r2
 8022f66:	4aa2      	ldr	r2, [pc, #648]	; (80231f0 <mktime+0x330>)
 8022f68:	4342      	muls	r2, r0
 8022f6a:	4660      	mov	r0, ip
 8022f6c:	41c2      	rors	r2, r0
 8022f6e:	48a2      	ldr	r0, [pc, #648]	; (80231f8 <mktime+0x338>)
 8022f70:	4290      	cmp	r0, r2
 8022f72:	4149      	adcs	r1, r1
 8022f74:	316e      	adds	r1, #110	; 0x6e
 8022f76:	31ff      	adds	r1, #255	; 0xff
 8022f78:	0008      	movs	r0, r1
 8022f7a:	9a03      	ldr	r2, [sp, #12]
 8022f7c:	3301      	adds	r3, #1
 8022f7e:	1812      	adds	r2, r2, r0
 8022f80:	9203      	str	r2, [sp, #12]
 8022f82:	429f      	cmp	r7, r3
 8022f84:	d1df      	bne.n	8022f46 <mktime+0x86>
 8022f86:	9b03      	ldr	r3, [sp, #12]
 8022f88:	4a9c      	ldr	r2, [pc, #624]	; (80231fc <mktime+0x33c>)
 8022f8a:	9803      	ldr	r0, [sp, #12]
 8022f8c:	17d9      	asrs	r1, r3, #31
 8022f8e:	2300      	movs	r3, #0
 8022f90:	f7df fac6 	bl	8002520 <__aeabi_lmul>
 8022f94:	9a00      	ldr	r2, [sp, #0]
 8022f96:	9b01      	ldr	r3, [sp, #4]
 8022f98:	1812      	adds	r2, r2, r0
 8022f9a:	414b      	adcs	r3, r1
 8022f9c:	9200      	str	r2, [sp, #0]
 8022f9e:	9301      	str	r3, [sp, #4]
 8022fa0:	f000 fa14 	bl	80233cc <__tz_lock>
 8022fa4:	f000 fa22 	bl	80233ec <_tzset_unlocked>
 8022fa8:	4b95      	ldr	r3, [pc, #596]	; (8023200 <mktime+0x340>)
 8022faa:	681d      	ldr	r5, [r3, #0]
 8022fac:	2d00      	cmp	r5, #0
 8022fae:	d055      	beq.n	802305c <mktime+0x19c>
 8022fb0:	4b8c      	ldr	r3, [pc, #560]	; (80231e4 <mktime+0x324>)
 8022fb2:	6960      	ldr	r0, [r4, #20]
 8022fb4:	18c0      	adds	r0, r0, r3
 8022fb6:	6a23      	ldr	r3, [r4, #32]
 8022fb8:	9307      	str	r3, [sp, #28]
 8022fba:	9309      	str	r3, [sp, #36]	; 0x24
 8022fbc:	2b00      	cmp	r3, #0
 8022fbe:	dd01      	ble.n	8022fc4 <mktime+0x104>
 8022fc0:	2301      	movs	r3, #1
 8022fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8022fc4:	9b06      	ldr	r3, [sp, #24]
 8022fc6:	685b      	ldr	r3, [r3, #4]
 8022fc8:	4283      	cmp	r3, r0
 8022fca:	d000      	beq.n	8022fce <mktime+0x10e>
 8022fcc:	e091      	b.n	80230f2 <mktime+0x232>
 8022fce:	9b06      	ldr	r3, [sp, #24]
 8022fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022fd2:	0018      	movs	r0, r3
 8022fd4:	17d9      	asrs	r1, r3, #31
 8022fd6:	9308      	str	r3, [sp, #32]
 8022fd8:	9b06      	ldr	r3, [sp, #24]
 8022fda:	6a1a      	ldr	r2, [r3, #32]
 8022fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fde:	1a12      	subs	r2, r2, r0
 8022fe0:	418b      	sbcs	r3, r1
 8022fe2:	9204      	str	r2, [sp, #16]
 8022fe4:	9305      	str	r3, [sp, #20]
 8022fe6:	9b06      	ldr	r3, [sp, #24]
 8022fe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8022fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022fec:	920a      	str	r2, [sp, #40]	; 0x28
 8022fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ff0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022ff2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022ff4:	9b06      	ldr	r3, [sp, #24]
 8022ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022ff8:	001a      	movs	r2, r3
 8022ffa:	469c      	mov	ip, r3
 8022ffc:	17db      	asrs	r3, r3, #31
 8022ffe:	1aad      	subs	r5, r5, r2
 8023000:	419e      	sbcs	r6, r3
 8023002:	002a      	movs	r2, r5
 8023004:	9d01      	ldr	r5, [sp, #4]
 8023006:	0033      	movs	r3, r6
 8023008:	42ae      	cmp	r6, r5
 802300a:	dc0f      	bgt.n	802302c <mktime+0x16c>
 802300c:	d102      	bne.n	8023014 <mktime+0x154>
 802300e:	9d00      	ldr	r5, [sp, #0]
 8023010:	42aa      	cmp	r2, r5
 8023012:	d80b      	bhi.n	802302c <mktime+0x16c>
 8023014:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023016:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8023018:	1a2d      	subs	r5, r5, r0
 802301a:	418e      	sbcs	r6, r1
 802301c:	0028      	movs	r0, r5
 802301e:	9d01      	ldr	r5, [sp, #4]
 8023020:	42ae      	cmp	r6, r5
 8023022:	dc6b      	bgt.n	80230fc <mktime+0x23c>
 8023024:	d102      	bne.n	802302c <mktime+0x16c>
 8023026:	9d00      	ldr	r5, [sp, #0]
 8023028:	42a8      	cmp	r0, r5
 802302a:	d867      	bhi.n	80230fc <mktime+0x23c>
 802302c:	9906      	ldr	r1, [sp, #24]
 802302e:	6809      	ldr	r1, [r1, #0]
 8023030:	2900      	cmp	r1, #0
 8023032:	d065      	beq.n	8023100 <mktime+0x240>
 8023034:	9901      	ldr	r1, [sp, #4]
 8023036:	9805      	ldr	r0, [sp, #20]
 8023038:	4288      	cmp	r0, r1
 802303a:	dc0b      	bgt.n	8023054 <mktime+0x194>
 802303c:	d103      	bne.n	8023046 <mktime+0x186>
 802303e:	9900      	ldr	r1, [sp, #0]
 8023040:	9804      	ldr	r0, [sp, #16]
 8023042:	4288      	cmp	r0, r1
 8023044:	d806      	bhi.n	8023054 <mktime+0x194>
 8023046:	9901      	ldr	r1, [sp, #4]
 8023048:	428b      	cmp	r3, r1
 802304a:	dc62      	bgt.n	8023112 <mktime+0x252>
 802304c:	d102      	bne.n	8023054 <mktime+0x194>
 802304e:	9900      	ldr	r1, [sp, #0]
 8023050:	428a      	cmp	r2, r1
 8023052:	d85e      	bhi.n	8023112 <mktime+0x252>
 8023054:	2500      	movs	r5, #0
 8023056:	9b07      	ldr	r3, [sp, #28]
 8023058:	42ab      	cmp	r3, r5
 802305a:	da5e      	bge.n	802311a <mktime+0x25a>
 802305c:	9b06      	ldr	r3, [sp, #24]
 802305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023060:	001e      	movs	r6, r3
 8023062:	17df      	asrs	r7, r3, #31
 8023064:	9a00      	ldr	r2, [sp, #0]
 8023066:	9b01      	ldr	r3, [sp, #4]
 8023068:	18b6      	adds	r6, r6, r2
 802306a:	415f      	adcs	r7, r3
 802306c:	e0a8      	b.n	80231c0 <mktime+0x300>
 802306e:	206e      	movs	r0, #110	; 0x6e
 8023070:	30ff      	adds	r0, #255	; 0xff
 8023072:	e782      	b.n	8022f7a <mktime+0xba>
 8023074:	2545      	movs	r5, #69	; 0x45
 8023076:	2f46      	cmp	r7, #70	; 0x46
 8023078:	d100      	bne.n	802307c <mktime+0x1bc>
 802307a:	e784      	b.n	8022f86 <mktime+0xc6>
 802307c:	26c8      	movs	r6, #200	; 0xc8
 802307e:	0076      	lsls	r6, r6, #1
 8023080:	2303      	movs	r3, #3
 8023082:	402b      	ands	r3, r5
 8023084:	42af      	cmp	r7, r5
 8023086:	db15      	blt.n	80230b4 <mktime+0x1f4>
 8023088:	2b00      	cmp	r3, #0
 802308a:	d12d      	bne.n	80230e8 <mktime+0x228>
 802308c:	2164      	movs	r1, #100	; 0x64
 802308e:	0038      	movs	r0, r7
 8023090:	f7df f9c2 	bl	8002418 <__aeabi_idivmod>
 8023094:	2900      	cmp	r1, #0
 8023096:	d129      	bne.n	80230ec <mktime+0x22c>
 8023098:	4b52      	ldr	r3, [pc, #328]	; (80231e4 <mktime+0x324>)
 802309a:	3191      	adds	r1, #145	; 0x91
 802309c:	18f8      	adds	r0, r7, r3
 802309e:	31ff      	adds	r1, #255	; 0xff
 80230a0:	f7df f9ba 	bl	8002418 <__aeabi_idivmod>
 80230a4:	424b      	negs	r3, r1
 80230a6:	4159      	adcs	r1, r3
 80230a8:	316e      	adds	r1, #110	; 0x6e
 80230aa:	31ff      	adds	r1, #255	; 0xff
 80230ac:	9b03      	ldr	r3, [sp, #12]
 80230ae:	1a5b      	subs	r3, r3, r1
 80230b0:	9303      	str	r3, [sp, #12]
 80230b2:	e768      	b.n	8022f86 <mktime+0xc6>
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d115      	bne.n	80230e4 <mktime+0x224>
 80230b8:	2164      	movs	r1, #100	; 0x64
 80230ba:	0028      	movs	r0, r5
 80230bc:	f7df f9ac 	bl	8002418 <__aeabi_idivmod>
 80230c0:	23b7      	movs	r3, #183	; 0xb7
 80230c2:	005b      	lsls	r3, r3, #1
 80230c4:	2900      	cmp	r1, #0
 80230c6:	d108      	bne.n	80230da <mktime+0x21a>
 80230c8:	4b46      	ldr	r3, [pc, #280]	; (80231e4 <mktime+0x324>)
 80230ca:	0031      	movs	r1, r6
 80230cc:	18e8      	adds	r0, r5, r3
 80230ce:	f7df f9a3 	bl	8002418 <__aeabi_idivmod>
 80230d2:	424b      	negs	r3, r1
 80230d4:	414b      	adcs	r3, r1
 80230d6:	336e      	adds	r3, #110	; 0x6e
 80230d8:	33ff      	adds	r3, #255	; 0xff
 80230da:	9a03      	ldr	r2, [sp, #12]
 80230dc:	3d01      	subs	r5, #1
 80230de:	1ad3      	subs	r3, r2, r3
 80230e0:	9303      	str	r3, [sp, #12]
 80230e2:	e7cd      	b.n	8023080 <mktime+0x1c0>
 80230e4:	236e      	movs	r3, #110	; 0x6e
 80230e6:	e7f7      	b.n	80230d8 <mktime+0x218>
 80230e8:	216e      	movs	r1, #110	; 0x6e
 80230ea:	e7de      	b.n	80230aa <mktime+0x1ea>
 80230ec:	21b7      	movs	r1, #183	; 0xb7
 80230ee:	0049      	lsls	r1, r1, #1
 80230f0:	e7dc      	b.n	80230ac <mktime+0x1ec>
 80230f2:	f000 f8b1 	bl	8023258 <__tzcalc_limits>
 80230f6:	2800      	cmp	r0, #0
 80230f8:	d000      	beq.n	80230fc <mktime+0x23c>
 80230fa:	e768      	b.n	8022fce <mktime+0x10e>
 80230fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80230fe:	e053      	b.n	80231a8 <mktime+0x2e8>
 8023100:	9901      	ldr	r1, [sp, #4]
 8023102:	9805      	ldr	r0, [sp, #20]
 8023104:	4288      	cmp	r0, r1
 8023106:	dc9e      	bgt.n	8023046 <mktime+0x186>
 8023108:	d103      	bne.n	8023112 <mktime+0x252>
 802310a:	9900      	ldr	r1, [sp, #0]
 802310c:	9804      	ldr	r0, [sp, #16]
 802310e:	4288      	cmp	r0, r1
 8023110:	d899      	bhi.n	8023046 <mktime+0x186>
 8023112:	9b07      	ldr	r3, [sp, #28]
 8023114:	2501      	movs	r5, #1
 8023116:	2b00      	cmp	r3, #0
 8023118:	db49      	blt.n	80231ae <mktime+0x2ee>
 802311a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802311c:	406e      	eors	r6, r5
 802311e:	2e01      	cmp	r6, #1
 8023120:	d142      	bne.n	80231a8 <mktime+0x2e8>
 8023122:	4662      	mov	r2, ip
 8023124:	9b08      	ldr	r3, [sp, #32]
 8023126:	1a9b      	subs	r3, r3, r2
 8023128:	2d00      	cmp	r5, #0
 802312a:	d002      	beq.n	8023132 <mktime+0x272>
 802312c:	4663      	mov	r3, ip
 802312e:	9a08      	ldr	r2, [sp, #32]
 8023130:	1a9b      	subs	r3, r3, r2
 8023132:	0018      	movs	r0, r3
 8023134:	6822      	ldr	r2, [r4, #0]
 8023136:	17d9      	asrs	r1, r3, #31
 8023138:	18d2      	adds	r2, r2, r3
 802313a:	6022      	str	r2, [r4, #0]
 802313c:	9a00      	ldr	r2, [sp, #0]
 802313e:	9b01      	ldr	r3, [sp, #4]
 8023140:	1812      	adds	r2, r2, r0
 8023142:	414b      	adcs	r3, r1
 8023144:	9200      	str	r2, [sp, #0]
 8023146:	9301      	str	r3, [sp, #4]
 8023148:	68e3      	ldr	r3, [r4, #12]
 802314a:	0020      	movs	r0, r4
 802314c:	9304      	str	r3, [sp, #16]
 802314e:	f7ff fde9 	bl	8022d24 <validate_structure>
 8023152:	68e2      	ldr	r2, [r4, #12]
 8023154:	9b04      	ldr	r3, [sp, #16]
 8023156:	9904      	ldr	r1, [sp, #16]
 8023158:	1ad3      	subs	r3, r2, r3
 802315a:	428a      	cmp	r2, r1
 802315c:	d024      	beq.n	80231a8 <mktime+0x2e8>
 802315e:	2b01      	cmp	r3, #1
 8023160:	dc1c      	bgt.n	802319c <mktime+0x2dc>
 8023162:	1c5a      	adds	r2, r3, #1
 8023164:	da00      	bge.n	8023168 <mktime+0x2a8>
 8023166:	0033      	movs	r3, r6
 8023168:	9a03      	ldr	r2, [sp, #12]
 802316a:	69e6      	ldr	r6, [r4, #28]
 802316c:	18d2      	adds	r2, r2, r3
 802316e:	9203      	str	r2, [sp, #12]
 8023170:	2203      	movs	r2, #3
 8023172:	199e      	adds	r6, r3, r6
 8023174:	d54a      	bpl.n	802320c <mktime+0x34c>
 8023176:	1e78      	subs	r0, r7, #1
 8023178:	4210      	tst	r0, r2
 802317a:	d112      	bne.n	80231a2 <mktime+0x2e2>
 802317c:	2164      	movs	r1, #100	; 0x64
 802317e:	f7df f94b 	bl	8002418 <__aeabi_idivmod>
 8023182:	2900      	cmp	r1, #0
 8023184:	d140      	bne.n	8023208 <mktime+0x348>
 8023186:	4b1f      	ldr	r3, [pc, #124]	; (8023204 <mktime+0x344>)
 8023188:	3191      	adds	r1, #145	; 0x91
 802318a:	18f8      	adds	r0, r7, r3
 802318c:	31ff      	adds	r1, #255	; 0xff
 802318e:	f7df f943 	bl	8002418 <__aeabi_idivmod>
 8023192:	424b      	negs	r3, r1
 8023194:	4159      	adcs	r1, r3
 8023196:	316d      	adds	r1, #109	; 0x6d
 8023198:	31ff      	adds	r1, #255	; 0xff
 802319a:	e004      	b.n	80231a6 <mktime+0x2e6>
 802319c:	2301      	movs	r3, #1
 802319e:	425b      	negs	r3, r3
 80231a0:	e7e2      	b.n	8023168 <mktime+0x2a8>
 80231a2:	21b6      	movs	r1, #182	; 0xb6
 80231a4:	0049      	lsls	r1, r1, #1
 80231a6:	61e1      	str	r1, [r4, #28]
 80231a8:	2d01      	cmp	r5, #1
 80231aa:	d000      	beq.n	80231ae <mktime+0x2ee>
 80231ac:	e756      	b.n	802305c <mktime+0x19c>
 80231ae:	9b06      	ldr	r3, [sp, #24]
 80231b0:	2501      	movs	r5, #1
 80231b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80231b4:	001e      	movs	r6, r3
 80231b6:	17df      	asrs	r7, r3, #31
 80231b8:	9a00      	ldr	r2, [sp, #0]
 80231ba:	9b01      	ldr	r3, [sp, #4]
 80231bc:	18b6      	adds	r6, r6, r2
 80231be:	415f      	adcs	r7, r3
 80231c0:	f000 f90c 	bl	80233dc <__tz_unlock>
 80231c4:	9803      	ldr	r0, [sp, #12]
 80231c6:	2107      	movs	r1, #7
 80231c8:	6225      	str	r5, [r4, #32]
 80231ca:	3004      	adds	r0, #4
 80231cc:	f7df f924 	bl	8002418 <__aeabi_idivmod>
 80231d0:	2900      	cmp	r1, #0
 80231d2:	db38      	blt.n	8023246 <mktime+0x386>
 80231d4:	61a1      	str	r1, [r4, #24]
 80231d6:	0030      	movs	r0, r6
 80231d8:	0039      	movs	r1, r7
 80231da:	b00d      	add	sp, #52	; 0x34
 80231dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80231de:	46c0      	nop			; (mov r8, r8)
 80231e0:	080322ac 	.word	0x080322ac
 80231e4:	0000076c 	.word	0x0000076c
 80231e8:	00004e20 	.word	0x00004e20
 80231ec:	00002710 	.word	0x00002710
 80231f0:	c28f5c29 	.word	0xc28f5c29
 80231f4:	028f5c28 	.word	0x028f5c28
 80231f8:	00a3d70a 	.word	0x00a3d70a
 80231fc:	00015180 	.word	0x00015180
 8023200:	2001c370 	.word	0x2001c370
 8023204:	0000076b 	.word	0x0000076b
 8023208:	216e      	movs	r1, #110	; 0x6e
 802320a:	e7c5      	b.n	8023198 <mktime+0x2d8>
 802320c:	4217      	tst	r7, r2
 802320e:	d113      	bne.n	8023238 <mktime+0x378>
 8023210:	2164      	movs	r1, #100	; 0x64
 8023212:	0038      	movs	r0, r7
 8023214:	f7df f900 	bl	8002418 <__aeabi_idivmod>
 8023218:	2900      	cmp	r1, #0
 802321a:	d10f      	bne.n	802323c <mktime+0x37c>
 802321c:	4b0d      	ldr	r3, [pc, #52]	; (8023254 <mktime+0x394>)
 802321e:	3191      	adds	r1, #145	; 0x91
 8023220:	18f8      	adds	r0, r7, r3
 8023222:	31ff      	adds	r1, #255	; 0xff
 8023224:	f7df f8f8 	bl	8002418 <__aeabi_idivmod>
 8023228:	424b      	negs	r3, r1
 802322a:	4159      	adcs	r1, r3
 802322c:	316e      	adds	r1, #110	; 0x6e
 802322e:	31ff      	adds	r1, #255	; 0xff
 8023230:	428e      	cmp	r6, r1
 8023232:	da06      	bge.n	8023242 <mktime+0x382>
 8023234:	61e6      	str	r6, [r4, #28]
 8023236:	e7b7      	b.n	80231a8 <mktime+0x2e8>
 8023238:	216e      	movs	r1, #110	; 0x6e
 802323a:	e7f8      	b.n	802322e <mktime+0x36e>
 802323c:	21b7      	movs	r1, #183	; 0xb7
 802323e:	0049      	lsls	r1, r1, #1
 8023240:	e7f6      	b.n	8023230 <mktime+0x370>
 8023242:	1a76      	subs	r6, r6, r1
 8023244:	e7f6      	b.n	8023234 <mktime+0x374>
 8023246:	3107      	adds	r1, #7
 8023248:	e7c4      	b.n	80231d4 <mktime+0x314>
 802324a:	2601      	movs	r6, #1
 802324c:	4276      	negs	r6, r6
 802324e:	17f7      	asrs	r7, r6, #31
 8023250:	e7c1      	b.n	80231d6 <mktime+0x316>
 8023252:	46c0      	nop			; (mov r8, r8)
 8023254:	0000076c 	.word	0x0000076c

08023258 <__tzcalc_limits>:
 8023258:	b5f0      	push	{r4, r5, r6, r7, lr}
 802325a:	b08d      	sub	sp, #52	; 0x34
 802325c:	0004      	movs	r4, r0
 802325e:	f001 faa5 	bl	80247ac <__gettzinfo>
 8023262:	4b53      	ldr	r3, [pc, #332]	; (80233b0 <__tzcalc_limits+0x158>)
 8023264:	0005      	movs	r5, r0
 8023266:	2000      	movs	r0, #0
 8023268:	429c      	cmp	r4, r3
 802326a:	dd6d      	ble.n	8023348 <__tzcalc_limits+0xf0>
 802326c:	266e      	movs	r6, #110	; 0x6e
 802326e:	2164      	movs	r1, #100	; 0x64
 8023270:	4b50      	ldr	r3, [pc, #320]	; (80233b4 <__tzcalc_limits+0x15c>)
 8023272:	36ff      	adds	r6, #255	; 0xff
 8023274:	18e3      	adds	r3, r4, r3
 8023276:	435e      	muls	r6, r3
 8023278:	4b4f      	ldr	r3, [pc, #316]	; (80233b8 <__tzcalc_limits+0x160>)
 802327a:	606c      	str	r4, [r5, #4]
 802327c:	18e3      	adds	r3, r4, r3
 802327e:	109b      	asrs	r3, r3, #2
 8023280:	18f6      	adds	r6, r6, r3
 8023282:	4b4e      	ldr	r3, [pc, #312]	; (80233bc <__tzcalc_limits+0x164>)
 8023284:	4249      	negs	r1, r1
 8023286:	18e0      	adds	r0, r4, r3
 8023288:	f7de ffe0 	bl	800224c <__divsi3>
 802328c:	21c8      	movs	r1, #200	; 0xc8
 802328e:	4b4c      	ldr	r3, [pc, #304]	; (80233c0 <__tzcalc_limits+0x168>)
 8023290:	1836      	adds	r6, r6, r0
 8023292:	0049      	lsls	r1, r1, #1
 8023294:	18e0      	adds	r0, r4, r3
 8023296:	f7de ffd9 	bl	800224c <__divsi3>
 802329a:	2164      	movs	r1, #100	; 0x64
 802329c:	1833      	adds	r3, r6, r0
 802329e:	0020      	movs	r0, r4
 80232a0:	9301      	str	r3, [sp, #4]
 80232a2:	f7df f8b9 	bl	8002418 <__aeabi_idivmod>
 80232a6:	9102      	str	r1, [sp, #8]
 80232a8:	21c8      	movs	r1, #200	; 0xc8
 80232aa:	0020      	movs	r0, r4
 80232ac:	0049      	lsls	r1, r1, #1
 80232ae:	f7df f8b3 	bl	8002418 <__aeabi_idivmod>
 80232b2:	000b      	movs	r3, r1
 80232b4:	425a      	negs	r2, r3
 80232b6:	415a      	adcs	r2, r3
 80232b8:	002b      	movs	r3, r5
 80232ba:	3358      	adds	r3, #88	; 0x58
 80232bc:	930a      	str	r3, [sp, #40]	; 0x28
 80232be:	2303      	movs	r3, #3
 80232c0:	002e      	movs	r6, r5
 80232c2:	401c      	ands	r4, r3
 80232c4:	9103      	str	r1, [sp, #12]
 80232c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80232c8:	3608      	adds	r6, #8
 80232ca:	9409      	str	r4, [sp, #36]	; 0x24
 80232cc:	7833      	ldrb	r3, [r6, #0]
 80232ce:	68f7      	ldr	r7, [r6, #12]
 80232d0:	2b4a      	cmp	r3, #74	; 0x4a
 80232d2:	d13b      	bne.n	802334c <__tzcalc_limits+0xf4>
 80232d4:	9b01      	ldr	r3, [sp, #4]
 80232d6:	19d8      	adds	r0, r3, r7
 80232d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d102      	bne.n	80232e4 <__tzcalc_limits+0x8c>
 80232de:	9b02      	ldr	r3, [sp, #8]
 80232e0:	2b00      	cmp	r3, #0
 80232e2:	d103      	bne.n	80232ec <__tzcalc_limits+0x94>
 80232e4:	2300      	movs	r3, #0
 80232e6:	9a03      	ldr	r2, [sp, #12]
 80232e8:	429a      	cmp	r2, r3
 80232ea:	d103      	bne.n	80232f4 <__tzcalc_limits+0x9c>
 80232ec:	2301      	movs	r3, #1
 80232ee:	2f3b      	cmp	r7, #59	; 0x3b
 80232f0:	dc00      	bgt.n	80232f4 <__tzcalc_limits+0x9c>
 80232f2:	2300      	movs	r3, #0
 80232f4:	18c0      	adds	r0, r0, r3
 80232f6:	3801      	subs	r0, #1
 80232f8:	2300      	movs	r3, #0
 80232fa:	4a32      	ldr	r2, [pc, #200]	; (80233c4 <__tzcalc_limits+0x16c>)
 80232fc:	17c1      	asrs	r1, r0, #31
 80232fe:	f7df f90f 	bl	8002520 <__aeabi_lmul>
 8023302:	6933      	ldr	r3, [r6, #16]
 8023304:	9304      	str	r3, [sp, #16]
 8023306:	17db      	asrs	r3, r3, #31
 8023308:	9305      	str	r3, [sp, #20]
 802330a:	9b04      	ldr	r3, [sp, #16]
 802330c:	9c05      	ldr	r4, [sp, #20]
 802330e:	18c0      	adds	r0, r0, r3
 8023310:	4161      	adcs	r1, r4
 8023312:	6a33      	ldr	r3, [r6, #32]
 8023314:	9306      	str	r3, [sp, #24]
 8023316:	17db      	asrs	r3, r3, #31
 8023318:	9307      	str	r3, [sp, #28]
 802331a:	9b06      	ldr	r3, [sp, #24]
 802331c:	9c07      	ldr	r4, [sp, #28]
 802331e:	18c0      	adds	r0, r0, r3
 8023320:	4161      	adcs	r1, r4
 8023322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023324:	61b0      	str	r0, [r6, #24]
 8023326:	61f1      	str	r1, [r6, #28]
 8023328:	3628      	adds	r6, #40	; 0x28
 802332a:	42b3      	cmp	r3, r6
 802332c:	d1ce      	bne.n	80232cc <__tzcalc_limits+0x74>
 802332e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8023330:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8023332:	2301      	movs	r3, #1
 8023334:	4291      	cmp	r1, r2
 8023336:	dc05      	bgt.n	8023344 <__tzcalc_limits+0xec>
 8023338:	d103      	bne.n	8023342 <__tzcalc_limits+0xea>
 802333a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 802333c:	6a2a      	ldr	r2, [r5, #32]
 802333e:	4291      	cmp	r1, r2
 8023340:	d800      	bhi.n	8023344 <__tzcalc_limits+0xec>
 8023342:	2300      	movs	r3, #0
 8023344:	2001      	movs	r0, #1
 8023346:	602b      	str	r3, [r5, #0]
 8023348:	b00d      	add	sp, #52	; 0x34
 802334a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802334c:	2b44      	cmp	r3, #68	; 0x44
 802334e:	d102      	bne.n	8023356 <__tzcalc_limits+0xfe>
 8023350:	9b01      	ldr	r3, [sp, #4]
 8023352:	19d8      	adds	r0, r3, r7
 8023354:	e7d0      	b.n	80232f8 <__tzcalc_limits+0xa0>
 8023356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802335a:	2a00      	cmp	r2, #0
 802335c:	d103      	bne.n	8023366 <__tzcalc_limits+0x10e>
 802335e:	9a02      	ldr	r2, [sp, #8]
 8023360:	2a00      	cmp	r2, #0
 8023362:	d000      	beq.n	8023366 <__tzcalc_limits+0x10e>
 8023364:	2301      	movs	r3, #1
 8023366:	2230      	movs	r2, #48	; 0x30
 8023368:	4353      	muls	r3, r2
 802336a:	2200      	movs	r2, #0
 802336c:	4816      	ldr	r0, [pc, #88]	; (80233c8 <__tzcalc_limits+0x170>)
 802336e:	3b04      	subs	r3, #4
 8023370:	6871      	ldr	r1, [r6, #4]
 8023372:	9c01      	ldr	r4, [sp, #4]
 8023374:	181b      	adds	r3, r3, r0
 8023376:	3201      	adds	r2, #1
 8023378:	0090      	lsls	r0, r2, #2
 802337a:	5818      	ldr	r0, [r3, r0]
 802337c:	9008      	str	r0, [sp, #32]
 802337e:	4291      	cmp	r1, r2
 8023380:	dc10      	bgt.n	80233a4 <__tzcalc_limits+0x14c>
 8023382:	2107      	movs	r1, #7
 8023384:	1d20      	adds	r0, r4, #4
 8023386:	f7df f847 	bl	8002418 <__aeabi_idivmod>
 802338a:	1a79      	subs	r1, r7, r1
 802338c:	d500      	bpl.n	8023390 <__tzcalc_limits+0x138>
 802338e:	3107      	adds	r1, #7
 8023390:	2307      	movs	r3, #7
 8023392:	68b2      	ldr	r2, [r6, #8]
 8023394:	3a01      	subs	r2, #1
 8023396:	4353      	muls	r3, r2
 8023398:	185b      	adds	r3, r3, r1
 802339a:	9a08      	ldr	r2, [sp, #32]
 802339c:	4293      	cmp	r3, r2
 802339e:	da04      	bge.n	80233aa <__tzcalc_limits+0x152>
 80233a0:	18e0      	adds	r0, r4, r3
 80233a2:	e7a9      	b.n	80232f8 <__tzcalc_limits+0xa0>
 80233a4:	9808      	ldr	r0, [sp, #32]
 80233a6:	1824      	adds	r4, r4, r0
 80233a8:	e7e5      	b.n	8023376 <__tzcalc_limits+0x11e>
 80233aa:	3b07      	subs	r3, #7
 80233ac:	e7f5      	b.n	802339a <__tzcalc_limits+0x142>
 80233ae:	46c0      	nop			; (mov r8, r8)
 80233b0:	000007b1 	.word	0x000007b1
 80233b4:	fffff84e 	.word	0xfffff84e
 80233b8:	fffff84f 	.word	0xfffff84f
 80233bc:	fffff893 	.word	0xfffff893
 80233c0:	fffff9bf 	.word	0xfffff9bf
 80233c4:	00015180 	.word	0x00015180
 80233c8:	0803239c 	.word	0x0803239c

080233cc <__tz_lock>:
 80233cc:	b510      	push	{r4, lr}
 80233ce:	4802      	ldr	r0, [pc, #8]	; (80233d8 <__tz_lock+0xc>)
 80233d0:	f000 fabe 	bl	8023950 <__retarget_lock_acquire>
 80233d4:	bd10      	pop	{r4, pc}
 80233d6:	46c0      	nop			; (mov r8, r8)
 80233d8:	2001c37f 	.word	0x2001c37f

080233dc <__tz_unlock>:
 80233dc:	b510      	push	{r4, lr}
 80233de:	4802      	ldr	r0, [pc, #8]	; (80233e8 <__tz_unlock+0xc>)
 80233e0:	f000 fab8 	bl	8023954 <__retarget_lock_release>
 80233e4:	bd10      	pop	{r4, pc}
 80233e6:	46c0      	nop			; (mov r8, r8)
 80233e8:	2001c37f 	.word	0x2001c37f

080233ec <_tzset_unlocked>:
 80233ec:	b510      	push	{r4, lr}
 80233ee:	4b02      	ldr	r3, [pc, #8]	; (80233f8 <_tzset_unlocked+0xc>)
 80233f0:	6818      	ldr	r0, [r3, #0]
 80233f2:	f000 f803 	bl	80233fc <_tzset_unlocked_r>
 80233f6:	bd10      	pop	{r4, pc}
 80233f8:	20005128 	.word	0x20005128

080233fc <_tzset_unlocked_r>:
 80233fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80233fe:	b08f      	sub	sp, #60	; 0x3c
 8023400:	0006      	movs	r6, r0
 8023402:	f001 f9d3 	bl	80247ac <__gettzinfo>
 8023406:	49cc      	ldr	r1, [pc, #816]	; (8023738 <_tzset_unlocked_r+0x33c>)
 8023408:	0007      	movs	r7, r0
 802340a:	0030      	movs	r0, r6
 802340c:	f000 fb72 	bl	8023af4 <_getenv_r>
 8023410:	4cca      	ldr	r4, [pc, #808]	; (802373c <_tzset_unlocked_r+0x340>)
 8023412:	1e05      	subs	r5, r0, #0
 8023414:	d122      	bne.n	802345c <_tzset_unlocked_r+0x60>
 8023416:	4bca      	ldr	r3, [pc, #808]	; (8023740 <_tzset_unlocked_r+0x344>)
 8023418:	4aca      	ldr	r2, [pc, #808]	; (8023744 <_tzset_unlocked_r+0x348>)
 802341a:	6018      	str	r0, [r3, #0]
 802341c:	4bca      	ldr	r3, [pc, #808]	; (8023748 <_tzset_unlocked_r+0x34c>)
 802341e:	60f8      	str	r0, [r7, #12]
 8023420:	6018      	str	r0, [r3, #0]
 8023422:	4bca      	ldr	r3, [pc, #808]	; (802374c <_tzset_unlocked_r+0x350>)
 8023424:	6138      	str	r0, [r7, #16]
 8023426:	6178      	str	r0, [r7, #20]
 8023428:	61b8      	str	r0, [r7, #24]
 802342a:	62b8      	str	r0, [r7, #40]	; 0x28
 802342c:	0038      	movs	r0, r7
 802342e:	214a      	movs	r1, #74	; 0x4a
 8023430:	601a      	str	r2, [r3, #0]
 8023432:	605a      	str	r2, [r3, #4]
 8023434:	2200      	movs	r2, #0
 8023436:	2300      	movs	r3, #0
 8023438:	3030      	adds	r0, #48	; 0x30
 802343a:	623a      	str	r2, [r7, #32]
 802343c:	627b      	str	r3, [r7, #36]	; 0x24
 802343e:	7239      	strb	r1, [r7, #8]
 8023440:	7001      	strb	r1, [r0, #0]
 8023442:	64ba      	str	r2, [r7, #72]	; 0x48
 8023444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023446:	6820      	ldr	r0, [r4, #0]
 8023448:	637d      	str	r5, [r7, #52]	; 0x34
 802344a:	63bd      	str	r5, [r7, #56]	; 0x38
 802344c:	63fd      	str	r5, [r7, #60]	; 0x3c
 802344e:	643d      	str	r5, [r7, #64]	; 0x40
 8023450:	653d      	str	r5, [r7, #80]	; 0x50
 8023452:	f7fe ffd9 	bl	8022408 <free>
 8023456:	6025      	str	r5, [r4, #0]
 8023458:	b00f      	add	sp, #60	; 0x3c
 802345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802345c:	6821      	ldr	r1, [r4, #0]
 802345e:	2900      	cmp	r1, #0
 8023460:	d000      	beq.n	8023464 <_tzset_unlocked_r+0x68>
 8023462:	e089      	b.n	8023578 <_tzset_unlocked_r+0x17c>
 8023464:	6820      	ldr	r0, [r4, #0]
 8023466:	f7fe ffcf 	bl	8022408 <free>
 802346a:	0028      	movs	r0, r5
 802346c:	f7de fe52 	bl	8002114 <strlen>
 8023470:	1c41      	adds	r1, r0, #1
 8023472:	0030      	movs	r0, r6
 8023474:	f7fe fff4 	bl	8022460 <_malloc_r>
 8023478:	6020      	str	r0, [r4, #0]
 802347a:	2800      	cmp	r0, #0
 802347c:	d000      	beq.n	8023480 <_tzset_unlocked_r+0x84>
 802347e:	e081      	b.n	8023584 <_tzset_unlocked_r+0x188>
 8023480:	2300      	movs	r3, #0
 8023482:	4aaf      	ldr	r2, [pc, #700]	; (8023740 <_tzset_unlocked_r+0x344>)
 8023484:	49b2      	ldr	r1, [pc, #712]	; (8023750 <_tzset_unlocked_r+0x354>)
 8023486:	6013      	str	r3, [r2, #0]
 8023488:	4aaf      	ldr	r2, [pc, #700]	; (8023748 <_tzset_unlocked_r+0x34c>)
 802348a:	003c      	movs	r4, r7
 802348c:	6013      	str	r3, [r2, #0]
 802348e:	4aaf      	ldr	r2, [pc, #700]	; (802374c <_tzset_unlocked_r+0x350>)
 8023490:	2000      	movs	r0, #0
 8023492:	6011      	str	r1, [r2, #0]
 8023494:	6051      	str	r1, [r2, #4]
 8023496:	224a      	movs	r2, #74	; 0x4a
 8023498:	2100      	movs	r1, #0
 802349a:	3430      	adds	r4, #48	; 0x30
 802349c:	723a      	strb	r2, [r7, #8]
 802349e:	6238      	str	r0, [r7, #32]
 80234a0:	6279      	str	r1, [r7, #36]	; 0x24
 80234a2:	60fb      	str	r3, [r7, #12]
 80234a4:	613b      	str	r3, [r7, #16]
 80234a6:	617b      	str	r3, [r7, #20]
 80234a8:	61bb      	str	r3, [r7, #24]
 80234aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80234ac:	7022      	strb	r2, [r4, #0]
 80234ae:	64b8      	str	r0, [r7, #72]	; 0x48
 80234b0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80234b2:	637b      	str	r3, [r7, #52]	; 0x34
 80234b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80234b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80234b8:	643b      	str	r3, [r7, #64]	; 0x40
 80234ba:	653b      	str	r3, [r7, #80]	; 0x50
 80234bc:	782b      	ldrb	r3, [r5, #0]
 80234be:	3b3a      	subs	r3, #58	; 0x3a
 80234c0:	425a      	negs	r2, r3
 80234c2:	4153      	adcs	r3, r2
 80234c4:	18ed      	adds	r5, r5, r3
 80234c6:	782b      	ldrb	r3, [r5, #0]
 80234c8:	4aa2      	ldr	r2, [pc, #648]	; (8023754 <_tzset_unlocked_r+0x358>)
 80234ca:	2b3c      	cmp	r3, #60	; 0x3c
 80234cc:	d15e      	bne.n	802358c <_tzset_unlocked_r+0x190>
 80234ce:	1c6c      	adds	r4, r5, #1
 80234d0:	0020      	movs	r0, r4
 80234d2:	49a1      	ldr	r1, [pc, #644]	; (8023758 <_tzset_unlocked_r+0x35c>)
 80234d4:	ab0c      	add	r3, sp, #48	; 0x30
 80234d6:	f001 f92d 	bl	8024734 <siscanf>
 80234da:	2800      	cmp	r0, #0
 80234dc:	ddbc      	ble.n	8023458 <_tzset_unlocked_r+0x5c>
 80234de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234e0:	1eda      	subs	r2, r3, #3
 80234e2:	2a07      	cmp	r2, #7
 80234e4:	d8b8      	bhi.n	8023458 <_tzset_unlocked_r+0x5c>
 80234e6:	5ce3      	ldrb	r3, [r4, r3]
 80234e8:	3502      	adds	r5, #2
 80234ea:	2b3e      	cmp	r3, #62	; 0x3e
 80234ec:	d1b4      	bne.n	8023458 <_tzset_unlocked_r+0x5c>
 80234ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234f0:	18ec      	adds	r4, r5, r3
 80234f2:	5ceb      	ldrb	r3, [r5, r3]
 80234f4:	2b2d      	cmp	r3, #45	; 0x2d
 80234f6:	d156      	bne.n	80235a6 <_tzset_unlocked_r+0x1aa>
 80234f8:	3b2e      	subs	r3, #46	; 0x2e
 80234fa:	3401      	adds	r4, #1
 80234fc:	9304      	str	r3, [sp, #16]
 80234fe:	2516      	movs	r5, #22
 8023500:	ab04      	add	r3, sp, #16
 8023502:	18ed      	adds	r5, r5, r3
 8023504:	2300      	movs	r3, #0
 8023506:	ae0a      	add	r6, sp, #40	; 0x28
 8023508:	802b      	strh	r3, [r5, #0]
 802350a:	8033      	strh	r3, [r6, #0]
 802350c:	ab0c      	add	r3, sp, #48	; 0x30
 802350e:	0020      	movs	r0, r4
 8023510:	4992      	ldr	r1, [pc, #584]	; (802375c <_tzset_unlocked_r+0x360>)
 8023512:	9303      	str	r3, [sp, #12]
 8023514:	9602      	str	r6, [sp, #8]
 8023516:	9301      	str	r3, [sp, #4]
 8023518:	9500      	str	r5, [sp, #0]
 802351a:	aa09      	add	r2, sp, #36	; 0x24
 802351c:	f001 f90a 	bl	8024734 <siscanf>
 8023520:	2800      	cmp	r0, #0
 8023522:	dd99      	ble.n	8023458 <_tzset_unlocked_r+0x5c>
 8023524:	233c      	movs	r3, #60	; 0x3c
 8023526:	882a      	ldrh	r2, [r5, #0]
 8023528:	4353      	muls	r3, r2
 802352a:	8832      	ldrh	r2, [r6, #0]
 802352c:	189b      	adds	r3, r3, r2
 802352e:	aa04      	add	r2, sp, #16
 8023530:	8a91      	ldrh	r1, [r2, #20]
 8023532:	22e1      	movs	r2, #225	; 0xe1
 8023534:	0112      	lsls	r2, r2, #4
 8023536:	434a      	muls	r2, r1
 8023538:	189b      	adds	r3, r3, r2
 802353a:	9a04      	ldr	r2, [sp, #16]
 802353c:	435a      	muls	r2, r3
 802353e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023540:	9204      	str	r2, [sp, #16]
 8023542:	18e6      	adds	r6, r4, r3
 8023544:	5ce3      	ldrb	r3, [r4, r3]
 8023546:	4a86      	ldr	r2, [pc, #536]	; (8023760 <_tzset_unlocked_r+0x364>)
 8023548:	2b3c      	cmp	r3, #60	; 0x3c
 802354a:	d000      	beq.n	802354e <_tzset_unlocked_r+0x152>
 802354c:	e0cd      	b.n	80236ea <_tzset_unlocked_r+0x2ee>
 802354e:	1c74      	adds	r4, r6, #1
 8023550:	0020      	movs	r0, r4
 8023552:	4981      	ldr	r1, [pc, #516]	; (8023758 <_tzset_unlocked_r+0x35c>)
 8023554:	ab0c      	add	r3, sp, #48	; 0x30
 8023556:	f001 f8ed 	bl	8024734 <siscanf>
 802355a:	2800      	cmp	r0, #0
 802355c:	dc2a      	bgt.n	80235b4 <_tzset_unlocked_r+0x1b8>
 802355e:	7873      	ldrb	r3, [r6, #1]
 8023560:	2b3e      	cmp	r3, #62	; 0x3e
 8023562:	d127      	bne.n	80235b4 <_tzset_unlocked_r+0x1b8>
 8023564:	4b79      	ldr	r3, [pc, #484]	; (802374c <_tzset_unlocked_r+0x350>)
 8023566:	4a7b      	ldr	r2, [pc, #492]	; (8023754 <_tzset_unlocked_r+0x358>)
 8023568:	601a      	str	r2, [r3, #0]
 802356a:	605a      	str	r2, [r3, #4]
 802356c:	9b04      	ldr	r3, [sp, #16]
 802356e:	9a04      	ldr	r2, [sp, #16]
 8023570:	62bb      	str	r3, [r7, #40]	; 0x28
 8023572:	4b73      	ldr	r3, [pc, #460]	; (8023740 <_tzset_unlocked_r+0x344>)
 8023574:	601a      	str	r2, [r3, #0]
 8023576:	e76f      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 8023578:	f7de fdc2 	bl	8002100 <strcmp>
 802357c:	2800      	cmp	r0, #0
 802357e:	d000      	beq.n	8023582 <_tzset_unlocked_r+0x186>
 8023580:	e770      	b.n	8023464 <_tzset_unlocked_r+0x68>
 8023582:	e769      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 8023584:	0029      	movs	r1, r5
 8023586:	f000 f9e7 	bl	8023958 <strcpy>
 802358a:	e779      	b.n	8023480 <_tzset_unlocked_r+0x84>
 802358c:	0028      	movs	r0, r5
 802358e:	4975      	ldr	r1, [pc, #468]	; (8023764 <_tzset_unlocked_r+0x368>)
 8023590:	ab0c      	add	r3, sp, #48	; 0x30
 8023592:	f001 f8cf 	bl	8024734 <siscanf>
 8023596:	2800      	cmp	r0, #0
 8023598:	dc00      	bgt.n	802359c <_tzset_unlocked_r+0x1a0>
 802359a:	e75d      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 802359c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802359e:	3b03      	subs	r3, #3
 80235a0:	2b07      	cmp	r3, #7
 80235a2:	d9a4      	bls.n	80234ee <_tzset_unlocked_r+0xf2>
 80235a4:	e758      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 80235a6:	2201      	movs	r2, #1
 80235a8:	3b2b      	subs	r3, #43	; 0x2b
 80235aa:	9204      	str	r2, [sp, #16]
 80235ac:	425a      	negs	r2, r3
 80235ae:	4153      	adcs	r3, r2
 80235b0:	18e4      	adds	r4, r4, r3
 80235b2:	e7a4      	b.n	80234fe <_tzset_unlocked_r+0x102>
 80235b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80235b6:	1eda      	subs	r2, r3, #3
 80235b8:	2a07      	cmp	r2, #7
 80235ba:	d900      	bls.n	80235be <_tzset_unlocked_r+0x1c2>
 80235bc:	e74c      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 80235be:	5ce3      	ldrb	r3, [r4, r3]
 80235c0:	3602      	adds	r6, #2
 80235c2:	2b3e      	cmp	r3, #62	; 0x3e
 80235c4:	d000      	beq.n	80235c8 <_tzset_unlocked_r+0x1cc>
 80235c6:	e747      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 80235c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80235ca:	18f4      	adds	r4, r6, r3
 80235cc:	5cf3      	ldrb	r3, [r6, r3]
 80235ce:	2b2d      	cmp	r3, #45	; 0x2d
 80235d0:	d000      	beq.n	80235d4 <_tzset_unlocked_r+0x1d8>
 80235d2:	e098      	b.n	8023706 <_tzset_unlocked_r+0x30a>
 80235d4:	3b2e      	subs	r3, #46	; 0x2e
 80235d6:	3401      	adds	r4, #1
 80235d8:	9305      	str	r3, [sp, #20]
 80235da:	2300      	movs	r3, #0
 80235dc:	aa04      	add	r2, sp, #16
 80235de:	ae0a      	add	r6, sp, #40	; 0x28
 80235e0:	8293      	strh	r3, [r2, #20]
 80235e2:	802b      	strh	r3, [r5, #0]
 80235e4:	8033      	strh	r3, [r6, #0]
 80235e6:	930c      	str	r3, [sp, #48]	; 0x30
 80235e8:	ab0c      	add	r3, sp, #48	; 0x30
 80235ea:	0020      	movs	r0, r4
 80235ec:	495b      	ldr	r1, [pc, #364]	; (802375c <_tzset_unlocked_r+0x360>)
 80235ee:	9303      	str	r3, [sp, #12]
 80235f0:	9602      	str	r6, [sp, #8]
 80235f2:	9301      	str	r3, [sp, #4]
 80235f4:	9500      	str	r5, [sp, #0]
 80235f6:	aa09      	add	r2, sp, #36	; 0x24
 80235f8:	f001 f89c 	bl	8024734 <siscanf>
 80235fc:	2800      	cmp	r0, #0
 80235fe:	dd00      	ble.n	8023602 <_tzset_unlocked_r+0x206>
 8023600:	e088      	b.n	8023714 <_tzset_unlocked_r+0x318>
 8023602:	4a59      	ldr	r2, [pc, #356]	; (8023768 <_tzset_unlocked_r+0x36c>)
 8023604:	9b04      	ldr	r3, [sp, #16]
 8023606:	4694      	mov	ip, r2
 8023608:	4463      	add	r3, ip
 802360a:	9307      	str	r3, [sp, #28]
 802360c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802360e:	003d      	movs	r5, r7
 8023610:	18e4      	adds	r4, r4, r3
 8023612:	2300      	movs	r3, #0
 8023614:	3508      	adds	r5, #8
 8023616:	9305      	str	r3, [sp, #20]
 8023618:	7823      	ldrb	r3, [r4, #0]
 802361a:	3b2c      	subs	r3, #44	; 0x2c
 802361c:	425a      	negs	r2, r3
 802361e:	4153      	adcs	r3, r2
 8023620:	18e4      	adds	r4, r4, r3
 8023622:	7826      	ldrb	r6, [r4, #0]
 8023624:	2e4d      	cmp	r6, #77	; 0x4d
 8023626:	d000      	beq.n	802362a <_tzset_unlocked_r+0x22e>
 8023628:	e0a4      	b.n	8023774 <_tzset_unlocked_r+0x378>
 802362a:	ab0c      	add	r3, sp, #48	; 0x30
 802362c:	9303      	str	r3, [sp, #12]
 802362e:	231e      	movs	r3, #30
 8023630:	aa04      	add	r2, sp, #16
 8023632:	189b      	adds	r3, r3, r2
 8023634:	221a      	movs	r2, #26
 8023636:	9302      	str	r3, [sp, #8]
 8023638:	ab0c      	add	r3, sp, #48	; 0x30
 802363a:	a804      	add	r0, sp, #16
 802363c:	9301      	str	r3, [sp, #4]
 802363e:	ab0b      	add	r3, sp, #44	; 0x2c
 8023640:	9300      	str	r3, [sp, #0]
 8023642:	1812      	adds	r2, r2, r0
 8023644:	4949      	ldr	r1, [pc, #292]	; (802376c <_tzset_unlocked_r+0x370>)
 8023646:	0020      	movs	r0, r4
 8023648:	ab0c      	add	r3, sp, #48	; 0x30
 802364a:	f001 f873 	bl	8024734 <siscanf>
 802364e:	2803      	cmp	r0, #3
 8023650:	d000      	beq.n	8023654 <_tzset_unlocked_r+0x258>
 8023652:	e701      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 8023654:	ab04      	add	r3, sp, #16
 8023656:	8b59      	ldrh	r1, [r3, #26]
 8023658:	1e4b      	subs	r3, r1, #1
 802365a:	2b0b      	cmp	r3, #11
 802365c:	d900      	bls.n	8023660 <_tzset_unlocked_r+0x264>
 802365e:	e6fb      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 8023660:	ab04      	add	r3, sp, #16
 8023662:	8b9a      	ldrh	r2, [r3, #28]
 8023664:	1e53      	subs	r3, r2, #1
 8023666:	2b04      	cmp	r3, #4
 8023668:	d900      	bls.n	802366c <_tzset_unlocked_r+0x270>
 802366a:	e6f5      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 802366c:	ab04      	add	r3, sp, #16
 802366e:	8bdb      	ldrh	r3, [r3, #30]
 8023670:	2b06      	cmp	r3, #6
 8023672:	d900      	bls.n	8023676 <_tzset_unlocked_r+0x27a>
 8023674:	e6f0      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 8023676:	702e      	strb	r6, [r5, #0]
 8023678:	6069      	str	r1, [r5, #4]
 802367a:	60aa      	str	r2, [r5, #8]
 802367c:	60eb      	str	r3, [r5, #12]
 802367e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023680:	19a6      	adds	r6, r4, r6
 8023682:	2302      	movs	r3, #2
 8023684:	2400      	movs	r4, #0
 8023686:	aa09      	add	r2, sp, #36	; 0x24
 8023688:	8013      	strh	r3, [r2, #0]
 802368a:	a904      	add	r1, sp, #16
 802368c:	3314      	adds	r3, #20
 802368e:	185b      	adds	r3, r3, r1
 8023690:	a80a      	add	r0, sp, #40	; 0x28
 8023692:	801c      	strh	r4, [r3, #0]
 8023694:	8004      	strh	r4, [r0, #0]
 8023696:	940c      	str	r4, [sp, #48]	; 0x30
 8023698:	7831      	ldrb	r1, [r6, #0]
 802369a:	292f      	cmp	r1, #47	; 0x2f
 802369c:	d000      	beq.n	80236a0 <_tzset_unlocked_r+0x2a4>
 802369e:	e097      	b.n	80237d0 <_tzset_unlocked_r+0x3d4>
 80236a0:	4933      	ldr	r1, [pc, #204]	; (8023770 <_tzset_unlocked_r+0x374>)
 80236a2:	9002      	str	r0, [sp, #8]
 80236a4:	9106      	str	r1, [sp, #24]
 80236a6:	a90c      	add	r1, sp, #48	; 0x30
 80236a8:	9103      	str	r1, [sp, #12]
 80236aa:	9101      	str	r1, [sp, #4]
 80236ac:	9300      	str	r3, [sp, #0]
 80236ae:	0030      	movs	r0, r6
 80236b0:	000b      	movs	r3, r1
 80236b2:	9906      	ldr	r1, [sp, #24]
 80236b4:	f001 f83e 	bl	8024734 <siscanf>
 80236b8:	42a0      	cmp	r0, r4
 80236ba:	dd00      	ble.n	80236be <_tzset_unlocked_r+0x2c2>
 80236bc:	e088      	b.n	80237d0 <_tzset_unlocked_r+0x3d4>
 80236be:	0038      	movs	r0, r7
 80236c0:	214a      	movs	r1, #74	; 0x4a
 80236c2:	2200      	movs	r2, #0
 80236c4:	2300      	movs	r3, #0
 80236c6:	3030      	adds	r0, #48	; 0x30
 80236c8:	623a      	str	r2, [r7, #32]
 80236ca:	627b      	str	r3, [r7, #36]	; 0x24
 80236cc:	7239      	strb	r1, [r7, #8]
 80236ce:	60fc      	str	r4, [r7, #12]
 80236d0:	613c      	str	r4, [r7, #16]
 80236d2:	617c      	str	r4, [r7, #20]
 80236d4:	61bc      	str	r4, [r7, #24]
 80236d6:	62bc      	str	r4, [r7, #40]	; 0x28
 80236d8:	7001      	strb	r1, [r0, #0]
 80236da:	64ba      	str	r2, [r7, #72]	; 0x48
 80236dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80236de:	637c      	str	r4, [r7, #52]	; 0x34
 80236e0:	63bc      	str	r4, [r7, #56]	; 0x38
 80236e2:	63fc      	str	r4, [r7, #60]	; 0x3c
 80236e4:	643c      	str	r4, [r7, #64]	; 0x40
 80236e6:	653c      	str	r4, [r7, #80]	; 0x50
 80236e8:	e6b6      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 80236ea:	0030      	movs	r0, r6
 80236ec:	491d      	ldr	r1, [pc, #116]	; (8023764 <_tzset_unlocked_r+0x368>)
 80236ee:	ab0c      	add	r3, sp, #48	; 0x30
 80236f0:	f001 f820 	bl	8024734 <siscanf>
 80236f4:	2800      	cmp	r0, #0
 80236f6:	dc00      	bgt.n	80236fa <_tzset_unlocked_r+0x2fe>
 80236f8:	e734      	b.n	8023564 <_tzset_unlocked_r+0x168>
 80236fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80236fc:	3b03      	subs	r3, #3
 80236fe:	2b07      	cmp	r3, #7
 8023700:	d800      	bhi.n	8023704 <_tzset_unlocked_r+0x308>
 8023702:	e761      	b.n	80235c8 <_tzset_unlocked_r+0x1cc>
 8023704:	e6a8      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 8023706:	2201      	movs	r2, #1
 8023708:	3b2b      	subs	r3, #43	; 0x2b
 802370a:	9205      	str	r2, [sp, #20]
 802370c:	425a      	negs	r2, r3
 802370e:	4153      	adcs	r3, r2
 8023710:	18e4      	adds	r4, r4, r3
 8023712:	e762      	b.n	80235da <_tzset_unlocked_r+0x1de>
 8023714:	233c      	movs	r3, #60	; 0x3c
 8023716:	882a      	ldrh	r2, [r5, #0]
 8023718:	4353      	muls	r3, r2
 802371a:	8832      	ldrh	r2, [r6, #0]
 802371c:	189b      	adds	r3, r3, r2
 802371e:	aa04      	add	r2, sp, #16
 8023720:	8a91      	ldrh	r1, [r2, #20]
 8023722:	22e1      	movs	r2, #225	; 0xe1
 8023724:	0112      	lsls	r2, r2, #4
 8023726:	434a      	muls	r2, r1
 8023728:	189b      	adds	r3, r3, r2
 802372a:	9a05      	ldr	r2, [sp, #20]
 802372c:	435a      	muls	r2, r3
 802372e:	9207      	str	r2, [sp, #28]
 8023730:	e76c      	b.n	802360c <_tzset_unlocked_r+0x210>
 8023732:	2301      	movs	r3, #1
 8023734:	e76f      	b.n	8023616 <_tzset_unlocked_r+0x21a>
 8023736:	46c0      	nop			; (mov r8, r8)
 8023738:	080322dc 	.word	0x080322dc
 802373c:	2001c36c 	.word	0x2001c36c
 8023740:	2001c374 	.word	0x2001c374
 8023744:	080322df 	.word	0x080322df
 8023748:	2001c370 	.word	0x2001c370
 802374c:	200050d4 	.word	0x200050d4
 8023750:	08032365 	.word	0x08032365
 8023754:	2001c360 	.word	0x2001c360
 8023758:	080322e3 	.word	0x080322e3
 802375c:	08032318 	.word	0x08032318
 8023760:	2001c354 	.word	0x2001c354
 8023764:	080322f6 	.word	0x080322f6
 8023768:	fffff1f0 	.word	0xfffff1f0
 802376c:	08032304 	.word	0x08032304
 8023770:	08032317 	.word	0x08032317
 8023774:	2344      	movs	r3, #68	; 0x44
 8023776:	9306      	str	r3, [sp, #24]
 8023778:	2e4a      	cmp	r6, #74	; 0x4a
 802377a:	d101      	bne.n	8023780 <_tzset_unlocked_r+0x384>
 802377c:	3401      	adds	r4, #1
 802377e:	9606      	str	r6, [sp, #24]
 8023780:	220a      	movs	r2, #10
 8023782:	0020      	movs	r0, r4
 8023784:	a90d      	add	r1, sp, #52	; 0x34
 8023786:	f000 fa41 	bl	8023c0c <strtoul>
 802378a:	231e      	movs	r3, #30
 802378c:	aa04      	add	r2, sp, #16
 802378e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023790:	189b      	adds	r3, r3, r2
 8023792:	8018      	strh	r0, [r3, #0]
 8023794:	42a6      	cmp	r6, r4
 8023796:	d116      	bne.n	80237c6 <_tzset_unlocked_r+0x3ca>
 8023798:	9b05      	ldr	r3, [sp, #20]
 802379a:	2b00      	cmp	r3, #0
 802379c:	d108      	bne.n	80237b0 <_tzset_unlocked_r+0x3b4>
 802379e:	334d      	adds	r3, #77	; 0x4d
 80237a0:	723b      	strb	r3, [r7, #8]
 80237a2:	3b4a      	subs	r3, #74	; 0x4a
 80237a4:	60fb      	str	r3, [r7, #12]
 80237a6:	3b01      	subs	r3, #1
 80237a8:	613b      	str	r3, [r7, #16]
 80237aa:	9b05      	ldr	r3, [sp, #20]
 80237ac:	617b      	str	r3, [r7, #20]
 80237ae:	e768      	b.n	8023682 <_tzset_unlocked_r+0x286>
 80237b0:	003b      	movs	r3, r7
 80237b2:	224d      	movs	r2, #77	; 0x4d
 80237b4:	3330      	adds	r3, #48	; 0x30
 80237b6:	701a      	strb	r2, [r3, #0]
 80237b8:	230b      	movs	r3, #11
 80237ba:	637b      	str	r3, [r7, #52]	; 0x34
 80237bc:	3b0a      	subs	r3, #10
 80237be:	63bb      	str	r3, [r7, #56]	; 0x38
 80237c0:	2300      	movs	r3, #0
 80237c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80237c4:	e75d      	b.n	8023682 <_tzset_unlocked_r+0x286>
 80237c6:	9b06      	ldr	r3, [sp, #24]
 80237c8:	b280      	uxth	r0, r0
 80237ca:	702b      	strb	r3, [r5, #0]
 80237cc:	60e8      	str	r0, [r5, #12]
 80237ce:	e758      	b.n	8023682 <_tzset_unlocked_r+0x286>
 80237d0:	2316      	movs	r3, #22
 80237d2:	aa04      	add	r2, sp, #16
 80237d4:	189b      	adds	r3, r3, r2
 80237d6:	881a      	ldrh	r2, [r3, #0]
 80237d8:	233c      	movs	r3, #60	; 0x3c
 80237da:	4353      	muls	r3, r2
 80237dc:	aa0a      	add	r2, sp, #40	; 0x28
 80237de:	8812      	ldrh	r2, [r2, #0]
 80237e0:	189b      	adds	r3, r3, r2
 80237e2:	aa09      	add	r2, sp, #36	; 0x24
 80237e4:	8811      	ldrh	r1, [r2, #0]
 80237e6:	22e1      	movs	r2, #225	; 0xe1
 80237e8:	0112      	lsls	r2, r2, #4
 80237ea:	434a      	muls	r2, r1
 80237ec:	189b      	adds	r3, r3, r2
 80237ee:	612b      	str	r3, [r5, #16]
 80237f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80237f2:	9b05      	ldr	r3, [sp, #20]
 80237f4:	1934      	adds	r4, r6, r4
 80237f6:	3528      	adds	r5, #40	; 0x28
 80237f8:	2b01      	cmp	r3, #1
 80237fa:	d19a      	bne.n	8023732 <_tzset_unlocked_r+0x336>
 80237fc:	9b04      	ldr	r3, [sp, #16]
 80237fe:	4a0a      	ldr	r2, [pc, #40]	; (8023828 <_tzset_unlocked_r+0x42c>)
 8023800:	62bb      	str	r3, [r7, #40]	; 0x28
 8023802:	9b07      	ldr	r3, [sp, #28]
 8023804:	6878      	ldr	r0, [r7, #4]
 8023806:	653b      	str	r3, [r7, #80]	; 0x50
 8023808:	4b08      	ldr	r3, [pc, #32]	; (802382c <_tzset_unlocked_r+0x430>)
 802380a:	601a      	str	r2, [r3, #0]
 802380c:	4a08      	ldr	r2, [pc, #32]	; (8023830 <_tzset_unlocked_r+0x434>)
 802380e:	605a      	str	r2, [r3, #4]
 8023810:	f7ff fd22 	bl	8023258 <__tzcalc_limits>
 8023814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023816:	4b07      	ldr	r3, [pc, #28]	; (8023834 <_tzset_unlocked_r+0x438>)
 8023818:	4907      	ldr	r1, [pc, #28]	; (8023838 <_tzset_unlocked_r+0x43c>)
 802381a:	601a      	str	r2, [r3, #0]
 802381c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802381e:	1a9b      	subs	r3, r3, r2
 8023820:	1e5a      	subs	r2, r3, #1
 8023822:	4193      	sbcs	r3, r2
 8023824:	600b      	str	r3, [r1, #0]
 8023826:	e617      	b.n	8023458 <_tzset_unlocked_r+0x5c>
 8023828:	2001c360 	.word	0x2001c360
 802382c:	200050d4 	.word	0x200050d4
 8023830:	2001c354 	.word	0x2001c354
 8023834:	2001c374 	.word	0x2001c374
 8023838:	2001c370 	.word	0x2001c370

0802383c <_close_r>:
 802383c:	2300      	movs	r3, #0
 802383e:	b570      	push	{r4, r5, r6, lr}
 8023840:	4d06      	ldr	r5, [pc, #24]	; (802385c <_close_r+0x20>)
 8023842:	0004      	movs	r4, r0
 8023844:	0008      	movs	r0, r1
 8023846:	602b      	str	r3, [r5, #0]
 8023848:	f7e9 fd95 	bl	800d376 <_close>
 802384c:	1c43      	adds	r3, r0, #1
 802384e:	d103      	bne.n	8023858 <_close_r+0x1c>
 8023850:	682b      	ldr	r3, [r5, #0]
 8023852:	2b00      	cmp	r3, #0
 8023854:	d000      	beq.n	8023858 <_close_r+0x1c>
 8023856:	6023      	str	r3, [r4, #0]
 8023858:	bd70      	pop	{r4, r5, r6, pc}
 802385a:	46c0      	nop			; (mov r8, r8)
 802385c:	2001c378 	.word	0x2001c378

08023860 <_lseek_r>:
 8023860:	b570      	push	{r4, r5, r6, lr}
 8023862:	0004      	movs	r4, r0
 8023864:	0008      	movs	r0, r1
 8023866:	0011      	movs	r1, r2
 8023868:	001a      	movs	r2, r3
 802386a:	2300      	movs	r3, #0
 802386c:	4d05      	ldr	r5, [pc, #20]	; (8023884 <_lseek_r+0x24>)
 802386e:	602b      	str	r3, [r5, #0]
 8023870:	f7e9 fda2 	bl	800d3b8 <_lseek>
 8023874:	1c43      	adds	r3, r0, #1
 8023876:	d103      	bne.n	8023880 <_lseek_r+0x20>
 8023878:	682b      	ldr	r3, [r5, #0]
 802387a:	2b00      	cmp	r3, #0
 802387c:	d000      	beq.n	8023880 <_lseek_r+0x20>
 802387e:	6023      	str	r3, [r4, #0]
 8023880:	bd70      	pop	{r4, r5, r6, pc}
 8023882:	46c0      	nop			; (mov r8, r8)
 8023884:	2001c378 	.word	0x2001c378

08023888 <_read_r>:
 8023888:	b570      	push	{r4, r5, r6, lr}
 802388a:	0004      	movs	r4, r0
 802388c:	0008      	movs	r0, r1
 802388e:	0011      	movs	r1, r2
 8023890:	001a      	movs	r2, r3
 8023892:	2300      	movs	r3, #0
 8023894:	4d05      	ldr	r5, [pc, #20]	; (80238ac <_read_r+0x24>)
 8023896:	602b      	str	r3, [r5, #0]
 8023898:	f7e9 fd34 	bl	800d304 <_read>
 802389c:	1c43      	adds	r3, r0, #1
 802389e:	d103      	bne.n	80238a8 <_read_r+0x20>
 80238a0:	682b      	ldr	r3, [r5, #0]
 80238a2:	2b00      	cmp	r3, #0
 80238a4:	d000      	beq.n	80238a8 <_read_r+0x20>
 80238a6:	6023      	str	r3, [r4, #0]
 80238a8:	bd70      	pop	{r4, r5, r6, pc}
 80238aa:	46c0      	nop			; (mov r8, r8)
 80238ac:	2001c378 	.word	0x2001c378

080238b0 <_sbrk_r>:
 80238b0:	2300      	movs	r3, #0
 80238b2:	b570      	push	{r4, r5, r6, lr}
 80238b4:	4d06      	ldr	r5, [pc, #24]	; (80238d0 <_sbrk_r+0x20>)
 80238b6:	0004      	movs	r4, r0
 80238b8:	0008      	movs	r0, r1
 80238ba:	602b      	str	r3, [r5, #0]
 80238bc:	f7e9 fd88 	bl	800d3d0 <_sbrk>
 80238c0:	1c43      	adds	r3, r0, #1
 80238c2:	d103      	bne.n	80238cc <_sbrk_r+0x1c>
 80238c4:	682b      	ldr	r3, [r5, #0]
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d000      	beq.n	80238cc <_sbrk_r+0x1c>
 80238ca:	6023      	str	r3, [r4, #0]
 80238cc:	bd70      	pop	{r4, r5, r6, pc}
 80238ce:	46c0      	nop			; (mov r8, r8)
 80238d0:	2001c378 	.word	0x2001c378

080238d4 <_write_r>:
 80238d4:	b570      	push	{r4, r5, r6, lr}
 80238d6:	0004      	movs	r4, r0
 80238d8:	0008      	movs	r0, r1
 80238da:	0011      	movs	r1, r2
 80238dc:	001a      	movs	r2, r3
 80238de:	2300      	movs	r3, #0
 80238e0:	4d05      	ldr	r5, [pc, #20]	; (80238f8 <_write_r+0x24>)
 80238e2:	602b      	str	r3, [r5, #0]
 80238e4:	f7e9 fd2b 	bl	800d33e <_write>
 80238e8:	1c43      	adds	r3, r0, #1
 80238ea:	d103      	bne.n	80238f4 <_write_r+0x20>
 80238ec:	682b      	ldr	r3, [r5, #0]
 80238ee:	2b00      	cmp	r3, #0
 80238f0:	d000      	beq.n	80238f4 <_write_r+0x20>
 80238f2:	6023      	str	r3, [r4, #0]
 80238f4:	bd70      	pop	{r4, r5, r6, pc}
 80238f6:	46c0      	nop			; (mov r8, r8)
 80238f8:	2001c378 	.word	0x2001c378

080238fc <__errno>:
 80238fc:	4b01      	ldr	r3, [pc, #4]	; (8023904 <__errno+0x8>)
 80238fe:	6818      	ldr	r0, [r3, #0]
 8023900:	4770      	bx	lr
 8023902:	46c0      	nop			; (mov r8, r8)
 8023904:	20005128 	.word	0x20005128

08023908 <__libc_init_array>:
 8023908:	b570      	push	{r4, r5, r6, lr}
 802390a:	2600      	movs	r6, #0
 802390c:	4c0c      	ldr	r4, [pc, #48]	; (8023940 <__libc_init_array+0x38>)
 802390e:	4d0d      	ldr	r5, [pc, #52]	; (8023944 <__libc_init_array+0x3c>)
 8023910:	1b64      	subs	r4, r4, r5
 8023912:	10a4      	asrs	r4, r4, #2
 8023914:	42a6      	cmp	r6, r4
 8023916:	d109      	bne.n	802392c <__libc_init_array+0x24>
 8023918:	2600      	movs	r6, #0
 802391a:	f001 fbb3 	bl	8025084 <_init>
 802391e:	4c0a      	ldr	r4, [pc, #40]	; (8023948 <__libc_init_array+0x40>)
 8023920:	4d0a      	ldr	r5, [pc, #40]	; (802394c <__libc_init_array+0x44>)
 8023922:	1b64      	subs	r4, r4, r5
 8023924:	10a4      	asrs	r4, r4, #2
 8023926:	42a6      	cmp	r6, r4
 8023928:	d105      	bne.n	8023936 <__libc_init_array+0x2e>
 802392a:	bd70      	pop	{r4, r5, r6, pc}
 802392c:	00b3      	lsls	r3, r6, #2
 802392e:	58eb      	ldr	r3, [r5, r3]
 8023930:	4798      	blx	r3
 8023932:	3601      	adds	r6, #1
 8023934:	e7ee      	b.n	8023914 <__libc_init_array+0xc>
 8023936:	00b3      	lsls	r3, r6, #2
 8023938:	58eb      	ldr	r3, [r5, r3]
 802393a:	4798      	blx	r3
 802393c:	3601      	adds	r6, #1
 802393e:	e7f2      	b.n	8023926 <__libc_init_array+0x1e>
 8023940:	08032420 	.word	0x08032420
 8023944:	08032420 	.word	0x08032420
 8023948:	08032428 	.word	0x08032428
 802394c:	08032420 	.word	0x08032420

08023950 <__retarget_lock_acquire>:
 8023950:	4770      	bx	lr

08023952 <__retarget_lock_acquire_recursive>:
 8023952:	4770      	bx	lr

08023954 <__retarget_lock_release>:
 8023954:	4770      	bx	lr

08023956 <__retarget_lock_release_recursive>:
 8023956:	4770      	bx	lr

08023958 <strcpy>:
 8023958:	0003      	movs	r3, r0
 802395a:	780a      	ldrb	r2, [r1, #0]
 802395c:	3101      	adds	r1, #1
 802395e:	701a      	strb	r2, [r3, #0]
 8023960:	3301      	adds	r3, #1
 8023962:	2a00      	cmp	r2, #0
 8023964:	d1f9      	bne.n	802395a <strcpy+0x2>
 8023966:	4770      	bx	lr

08023968 <memcpy>:
 8023968:	2300      	movs	r3, #0
 802396a:	b510      	push	{r4, lr}
 802396c:	429a      	cmp	r2, r3
 802396e:	d100      	bne.n	8023972 <memcpy+0xa>
 8023970:	bd10      	pop	{r4, pc}
 8023972:	5ccc      	ldrb	r4, [r1, r3]
 8023974:	54c4      	strb	r4, [r0, r3]
 8023976:	3301      	adds	r3, #1
 8023978:	e7f8      	b.n	802396c <memcpy+0x4>
	...

0802397c <__assert_func>:
 802397c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802397e:	0014      	movs	r4, r2
 8023980:	001a      	movs	r2, r3
 8023982:	4b09      	ldr	r3, [pc, #36]	; (80239a8 <__assert_func+0x2c>)
 8023984:	0005      	movs	r5, r0
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	000e      	movs	r6, r1
 802398a:	68d8      	ldr	r0, [r3, #12]
 802398c:	4b07      	ldr	r3, [pc, #28]	; (80239ac <__assert_func+0x30>)
 802398e:	2c00      	cmp	r4, #0
 8023990:	d101      	bne.n	8023996 <__assert_func+0x1a>
 8023992:	4b07      	ldr	r3, [pc, #28]	; (80239b0 <__assert_func+0x34>)
 8023994:	001c      	movs	r4, r3
 8023996:	4907      	ldr	r1, [pc, #28]	; (80239b4 <__assert_func+0x38>)
 8023998:	9301      	str	r3, [sp, #4]
 802399a:	9402      	str	r4, [sp, #8]
 802399c:	002b      	movs	r3, r5
 802399e:	9600      	str	r6, [sp, #0]
 80239a0:	f000 fe1c 	bl	80245dc <fiprintf>
 80239a4:	f000 ff35 	bl	8024812 <abort>
 80239a8:	20005128 	.word	0x20005128
 80239ac:	0803232a 	.word	0x0803232a
 80239b0:	08032365 	.word	0x08032365
 80239b4:	08032337 	.word	0x08032337

080239b8 <div>:
 80239b8:	b570      	push	{r4, r5, r6, lr}
 80239ba:	000e      	movs	r6, r1
 80239bc:	0004      	movs	r4, r0
 80239be:	0011      	movs	r1, r2
 80239c0:	0030      	movs	r0, r6
 80239c2:	0015      	movs	r5, r2
 80239c4:	f7de fd28 	bl	8002418 <__aeabi_idivmod>
 80239c8:	2e00      	cmp	r6, #0
 80239ca:	db07      	blt.n	80239dc <div+0x24>
 80239cc:	2900      	cmp	r1, #0
 80239ce:	da01      	bge.n	80239d4 <div+0x1c>
 80239d0:	3001      	adds	r0, #1
 80239d2:	1b49      	subs	r1, r1, r5
 80239d4:	6020      	str	r0, [r4, #0]
 80239d6:	6061      	str	r1, [r4, #4]
 80239d8:	0020      	movs	r0, r4
 80239da:	bd70      	pop	{r4, r5, r6, pc}
 80239dc:	2900      	cmp	r1, #0
 80239de:	ddf9      	ble.n	80239d4 <div+0x1c>
 80239e0:	3801      	subs	r0, #1
 80239e2:	1949      	adds	r1, r1, r5
 80239e4:	e7f6      	b.n	80239d4 <div+0x1c>
	...

080239e8 <_free_r>:
 80239e8:	b570      	push	{r4, r5, r6, lr}
 80239ea:	0005      	movs	r5, r0
 80239ec:	2900      	cmp	r1, #0
 80239ee:	d010      	beq.n	8023a12 <_free_r+0x2a>
 80239f0:	1f0c      	subs	r4, r1, #4
 80239f2:	6823      	ldr	r3, [r4, #0]
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	da00      	bge.n	80239fa <_free_r+0x12>
 80239f8:	18e4      	adds	r4, r4, r3
 80239fa:	0028      	movs	r0, r5
 80239fc:	f7fe fdb2 	bl	8022564 <__malloc_lock>
 8023a00:	4a1d      	ldr	r2, [pc, #116]	; (8023a78 <_free_r+0x90>)
 8023a02:	6813      	ldr	r3, [r2, #0]
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d105      	bne.n	8023a14 <_free_r+0x2c>
 8023a08:	6063      	str	r3, [r4, #4]
 8023a0a:	6014      	str	r4, [r2, #0]
 8023a0c:	0028      	movs	r0, r5
 8023a0e:	f7fe fdb1 	bl	8022574 <__malloc_unlock>
 8023a12:	bd70      	pop	{r4, r5, r6, pc}
 8023a14:	42a3      	cmp	r3, r4
 8023a16:	d908      	bls.n	8023a2a <_free_r+0x42>
 8023a18:	6820      	ldr	r0, [r4, #0]
 8023a1a:	1821      	adds	r1, r4, r0
 8023a1c:	428b      	cmp	r3, r1
 8023a1e:	d1f3      	bne.n	8023a08 <_free_r+0x20>
 8023a20:	6819      	ldr	r1, [r3, #0]
 8023a22:	685b      	ldr	r3, [r3, #4]
 8023a24:	1809      	adds	r1, r1, r0
 8023a26:	6021      	str	r1, [r4, #0]
 8023a28:	e7ee      	b.n	8023a08 <_free_r+0x20>
 8023a2a:	001a      	movs	r2, r3
 8023a2c:	685b      	ldr	r3, [r3, #4]
 8023a2e:	2b00      	cmp	r3, #0
 8023a30:	d001      	beq.n	8023a36 <_free_r+0x4e>
 8023a32:	42a3      	cmp	r3, r4
 8023a34:	d9f9      	bls.n	8023a2a <_free_r+0x42>
 8023a36:	6811      	ldr	r1, [r2, #0]
 8023a38:	1850      	adds	r0, r2, r1
 8023a3a:	42a0      	cmp	r0, r4
 8023a3c:	d10b      	bne.n	8023a56 <_free_r+0x6e>
 8023a3e:	6820      	ldr	r0, [r4, #0]
 8023a40:	1809      	adds	r1, r1, r0
 8023a42:	1850      	adds	r0, r2, r1
 8023a44:	6011      	str	r1, [r2, #0]
 8023a46:	4283      	cmp	r3, r0
 8023a48:	d1e0      	bne.n	8023a0c <_free_r+0x24>
 8023a4a:	6818      	ldr	r0, [r3, #0]
 8023a4c:	685b      	ldr	r3, [r3, #4]
 8023a4e:	1841      	adds	r1, r0, r1
 8023a50:	6011      	str	r1, [r2, #0]
 8023a52:	6053      	str	r3, [r2, #4]
 8023a54:	e7da      	b.n	8023a0c <_free_r+0x24>
 8023a56:	42a0      	cmp	r0, r4
 8023a58:	d902      	bls.n	8023a60 <_free_r+0x78>
 8023a5a:	230c      	movs	r3, #12
 8023a5c:	602b      	str	r3, [r5, #0]
 8023a5e:	e7d5      	b.n	8023a0c <_free_r+0x24>
 8023a60:	6820      	ldr	r0, [r4, #0]
 8023a62:	1821      	adds	r1, r4, r0
 8023a64:	428b      	cmp	r3, r1
 8023a66:	d103      	bne.n	8023a70 <_free_r+0x88>
 8023a68:	6819      	ldr	r1, [r3, #0]
 8023a6a:	685b      	ldr	r3, [r3, #4]
 8023a6c:	1809      	adds	r1, r1, r0
 8023a6e:	6021      	str	r1, [r4, #0]
 8023a70:	6063      	str	r3, [r4, #4]
 8023a72:	6054      	str	r4, [r2, #4]
 8023a74:	e7ca      	b.n	8023a0c <_free_r+0x24>
 8023a76:	46c0      	nop			; (mov r8, r8)
 8023a78:	2001c210 	.word	0x2001c210

08023a7c <_findenv_r>:
 8023a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a7e:	000d      	movs	r5, r1
 8023a80:	b085      	sub	sp, #20
 8023a82:	0006      	movs	r6, r0
 8023a84:	9203      	str	r2, [sp, #12]
 8023a86:	f000 fecb 	bl	8024820 <__env_lock>
 8023a8a:	4f19      	ldr	r7, [pc, #100]	; (8023af0 <_findenv_r+0x74>)
 8023a8c:	002b      	movs	r3, r5
 8023a8e:	683c      	ldr	r4, [r7, #0]
 8023a90:	2c00      	cmp	r4, #0
 8023a92:	d106      	bne.n	8023aa2 <_findenv_r+0x26>
 8023a94:	0030      	movs	r0, r6
 8023a96:	f000 fecb 	bl	8024830 <__env_unlock>
 8023a9a:	2000      	movs	r0, #0
 8023a9c:	b005      	add	sp, #20
 8023a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023aa0:	3301      	adds	r3, #1
 8023aa2:	781a      	ldrb	r2, [r3, #0]
 8023aa4:	2a00      	cmp	r2, #0
 8023aa6:	d01f      	beq.n	8023ae8 <_findenv_r+0x6c>
 8023aa8:	2a3d      	cmp	r2, #61	; 0x3d
 8023aaa:	d1f9      	bne.n	8023aa0 <_findenv_r+0x24>
 8023aac:	e7f2      	b.n	8023a94 <_findenv_r+0x18>
 8023aae:	3404      	adds	r4, #4
 8023ab0:	6820      	ldr	r0, [r4, #0]
 8023ab2:	2800      	cmp	r0, #0
 8023ab4:	d0ee      	beq.n	8023a94 <_findenv_r+0x18>
 8023ab6:	0029      	movs	r1, r5
 8023ab8:	9a01      	ldr	r2, [sp, #4]
 8023aba:	f7ff f890 	bl	8022bde <strncmp>
 8023abe:	2800      	cmp	r0, #0
 8023ac0:	d1f5      	bne.n	8023aae <_findenv_r+0x32>
 8023ac2:	6823      	ldr	r3, [r4, #0]
 8023ac4:	9a01      	ldr	r2, [sp, #4]
 8023ac6:	189a      	adds	r2, r3, r2
 8023ac8:	9202      	str	r2, [sp, #8]
 8023aca:	9a01      	ldr	r2, [sp, #4]
 8023acc:	5c9b      	ldrb	r3, [r3, r2]
 8023ace:	2b3d      	cmp	r3, #61	; 0x3d
 8023ad0:	d1ed      	bne.n	8023aae <_findenv_r+0x32>
 8023ad2:	683b      	ldr	r3, [r7, #0]
 8023ad4:	9a03      	ldr	r2, [sp, #12]
 8023ad6:	1ae3      	subs	r3, r4, r3
 8023ad8:	109b      	asrs	r3, r3, #2
 8023ada:	0030      	movs	r0, r6
 8023adc:	6013      	str	r3, [r2, #0]
 8023ade:	f000 fea7 	bl	8024830 <__env_unlock>
 8023ae2:	9802      	ldr	r0, [sp, #8]
 8023ae4:	3001      	adds	r0, #1
 8023ae6:	e7d9      	b.n	8023a9c <_findenv_r+0x20>
 8023ae8:	1b5b      	subs	r3, r3, r5
 8023aea:	9301      	str	r3, [sp, #4]
 8023aec:	e7e0      	b.n	8023ab0 <_findenv_r+0x34>
 8023aee:	46c0      	nop			; (mov r8, r8)
 8023af0:	20005024 	.word	0x20005024

08023af4 <_getenv_r>:
 8023af4:	b507      	push	{r0, r1, r2, lr}
 8023af6:	aa01      	add	r2, sp, #4
 8023af8:	f7ff ffc0 	bl	8023a7c <_findenv_r>
 8023afc:	bd0e      	pop	{r1, r2, r3, pc}
	...

08023b00 <_strtoul_l.constprop.0>:
 8023b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b02:	b087      	sub	sp, #28
 8023b04:	9202      	str	r2, [sp, #8]
 8023b06:	4a3e      	ldr	r2, [pc, #248]	; (8023c00 <_strtoul_l.constprop.0+0x100>)
 8023b08:	001e      	movs	r6, r3
 8023b0a:	9101      	str	r1, [sp, #4]
 8023b0c:	000b      	movs	r3, r1
 8023b0e:	4694      	mov	ip, r2
 8023b10:	2108      	movs	r1, #8
 8023b12:	9005      	str	r0, [sp, #20]
 8023b14:	001a      	movs	r2, r3
 8023b16:	4660      	mov	r0, ip
 8023b18:	7814      	ldrb	r4, [r2, #0]
 8023b1a:	3301      	adds	r3, #1
 8023b1c:	5d00      	ldrb	r0, [r0, r4]
 8023b1e:	001d      	movs	r5, r3
 8023b20:	0007      	movs	r7, r0
 8023b22:	400f      	ands	r7, r1
 8023b24:	4208      	tst	r0, r1
 8023b26:	d1f5      	bne.n	8023b14 <_strtoul_l.constprop.0+0x14>
 8023b28:	2c2d      	cmp	r4, #45	; 0x2d
 8023b2a:	d13d      	bne.n	8023ba8 <_strtoul_l.constprop.0+0xa8>
 8023b2c:	2701      	movs	r7, #1
 8023b2e:	781c      	ldrb	r4, [r3, #0]
 8023b30:	1c95      	adds	r5, r2, #2
 8023b32:	2e00      	cmp	r6, #0
 8023b34:	d05f      	beq.n	8023bf6 <_strtoul_l.constprop.0+0xf6>
 8023b36:	2e10      	cmp	r6, #16
 8023b38:	d109      	bne.n	8023b4e <_strtoul_l.constprop.0+0x4e>
 8023b3a:	2c30      	cmp	r4, #48	; 0x30
 8023b3c:	d107      	bne.n	8023b4e <_strtoul_l.constprop.0+0x4e>
 8023b3e:	2220      	movs	r2, #32
 8023b40:	782b      	ldrb	r3, [r5, #0]
 8023b42:	4393      	bics	r3, r2
 8023b44:	2b58      	cmp	r3, #88	; 0x58
 8023b46:	d151      	bne.n	8023bec <_strtoul_l.constprop.0+0xec>
 8023b48:	2610      	movs	r6, #16
 8023b4a:	786c      	ldrb	r4, [r5, #1]
 8023b4c:	3502      	adds	r5, #2
 8023b4e:	2001      	movs	r0, #1
 8023b50:	0031      	movs	r1, r6
 8023b52:	4240      	negs	r0, r0
 8023b54:	f7de faf0 	bl	8002138 <__udivsi3>
 8023b58:	9003      	str	r0, [sp, #12]
 8023b5a:	2001      	movs	r0, #1
 8023b5c:	0031      	movs	r1, r6
 8023b5e:	4240      	negs	r0, r0
 8023b60:	f7de fb70 	bl	8002244 <__aeabi_uidivmod>
 8023b64:	2300      	movs	r3, #0
 8023b66:	2201      	movs	r2, #1
 8023b68:	9104      	str	r1, [sp, #16]
 8023b6a:	2101      	movs	r1, #1
 8023b6c:	0018      	movs	r0, r3
 8023b6e:	4694      	mov	ip, r2
 8023b70:	4249      	negs	r1, r1
 8023b72:	0022      	movs	r2, r4
 8023b74:	3a30      	subs	r2, #48	; 0x30
 8023b76:	2a09      	cmp	r2, #9
 8023b78:	d903      	bls.n	8023b82 <_strtoul_l.constprop.0+0x82>
 8023b7a:	3a11      	subs	r2, #17
 8023b7c:	2a19      	cmp	r2, #25
 8023b7e:	d818      	bhi.n	8023bb2 <_strtoul_l.constprop.0+0xb2>
 8023b80:	320a      	adds	r2, #10
 8023b82:	4296      	cmp	r6, r2
 8023b84:	dd19      	ble.n	8023bba <_strtoul_l.constprop.0+0xba>
 8023b86:	1c5c      	adds	r4, r3, #1
 8023b88:	d00b      	beq.n	8023ba2 <_strtoul_l.constprop.0+0xa2>
 8023b8a:	9c03      	ldr	r4, [sp, #12]
 8023b8c:	000b      	movs	r3, r1
 8023b8e:	4284      	cmp	r4, r0
 8023b90:	d307      	bcc.n	8023ba2 <_strtoul_l.constprop.0+0xa2>
 8023b92:	d103      	bne.n	8023b9c <_strtoul_l.constprop.0+0x9c>
 8023b94:	9c04      	ldr	r4, [sp, #16]
 8023b96:	000b      	movs	r3, r1
 8023b98:	4294      	cmp	r4, r2
 8023b9a:	db02      	blt.n	8023ba2 <_strtoul_l.constprop.0+0xa2>
 8023b9c:	4663      	mov	r3, ip
 8023b9e:	4370      	muls	r0, r6
 8023ba0:	1810      	adds	r0, r2, r0
 8023ba2:	782c      	ldrb	r4, [r5, #0]
 8023ba4:	3501      	adds	r5, #1
 8023ba6:	e7e4      	b.n	8023b72 <_strtoul_l.constprop.0+0x72>
 8023ba8:	2c2b      	cmp	r4, #43	; 0x2b
 8023baa:	d1c2      	bne.n	8023b32 <_strtoul_l.constprop.0+0x32>
 8023bac:	781c      	ldrb	r4, [r3, #0]
 8023bae:	1c95      	adds	r5, r2, #2
 8023bb0:	e7bf      	b.n	8023b32 <_strtoul_l.constprop.0+0x32>
 8023bb2:	0022      	movs	r2, r4
 8023bb4:	3a61      	subs	r2, #97	; 0x61
 8023bb6:	2a19      	cmp	r2, #25
 8023bb8:	d9e2      	bls.n	8023b80 <_strtoul_l.constprop.0+0x80>
 8023bba:	1c5a      	adds	r2, r3, #1
 8023bbc:	d108      	bne.n	8023bd0 <_strtoul_l.constprop.0+0xd0>
 8023bbe:	2222      	movs	r2, #34	; 0x22
 8023bc0:	9905      	ldr	r1, [sp, #20]
 8023bc2:	0018      	movs	r0, r3
 8023bc4:	600a      	str	r2, [r1, #0]
 8023bc6:	9a02      	ldr	r2, [sp, #8]
 8023bc8:	2a00      	cmp	r2, #0
 8023bca:	d109      	bne.n	8023be0 <_strtoul_l.constprop.0+0xe0>
 8023bcc:	b007      	add	sp, #28
 8023bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bd0:	2f00      	cmp	r7, #0
 8023bd2:	d000      	beq.n	8023bd6 <_strtoul_l.constprop.0+0xd6>
 8023bd4:	4240      	negs	r0, r0
 8023bd6:	9a02      	ldr	r2, [sp, #8]
 8023bd8:	2a00      	cmp	r2, #0
 8023bda:	d0f7      	beq.n	8023bcc <_strtoul_l.constprop.0+0xcc>
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	d001      	beq.n	8023be4 <_strtoul_l.constprop.0+0xe4>
 8023be0:	1e6b      	subs	r3, r5, #1
 8023be2:	9301      	str	r3, [sp, #4]
 8023be4:	9b02      	ldr	r3, [sp, #8]
 8023be6:	9a01      	ldr	r2, [sp, #4]
 8023be8:	601a      	str	r2, [r3, #0]
 8023bea:	e7ef      	b.n	8023bcc <_strtoul_l.constprop.0+0xcc>
 8023bec:	2430      	movs	r4, #48	; 0x30
 8023bee:	2e00      	cmp	r6, #0
 8023bf0:	d1ad      	bne.n	8023b4e <_strtoul_l.constprop.0+0x4e>
 8023bf2:	3608      	adds	r6, #8
 8023bf4:	e7ab      	b.n	8023b4e <_strtoul_l.constprop.0+0x4e>
 8023bf6:	2c30      	cmp	r4, #48	; 0x30
 8023bf8:	d0a1      	beq.n	8023b3e <_strtoul_l.constprop.0+0x3e>
 8023bfa:	260a      	movs	r6, #10
 8023bfc:	e7a7      	b.n	8023b4e <_strtoul_l.constprop.0+0x4e>
 8023bfe:	46c0      	nop			; (mov r8, r8)
 8023c00:	08032109 	.word	0x08032109

08023c04 <_strtoul_r>:
 8023c04:	b510      	push	{r4, lr}
 8023c06:	f7ff ff7b 	bl	8023b00 <_strtoul_l.constprop.0>
 8023c0a:	bd10      	pop	{r4, pc}

08023c0c <strtoul>:
 8023c0c:	b510      	push	{r4, lr}
 8023c0e:	4c04      	ldr	r4, [pc, #16]	; (8023c20 <strtoul+0x14>)
 8023c10:	0013      	movs	r3, r2
 8023c12:	000a      	movs	r2, r1
 8023c14:	0001      	movs	r1, r0
 8023c16:	6820      	ldr	r0, [r4, #0]
 8023c18:	f7ff ff72 	bl	8023b00 <_strtoul_l.constprop.0>
 8023c1c:	bd10      	pop	{r4, pc}
 8023c1e:	46c0      	nop			; (mov r8, r8)
 8023c20:	20005128 	.word	0x20005128

08023c24 <__ssputs_r>:
 8023c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c26:	b085      	sub	sp, #20
 8023c28:	9301      	str	r3, [sp, #4]
 8023c2a:	9203      	str	r2, [sp, #12]
 8023c2c:	688e      	ldr	r6, [r1, #8]
 8023c2e:	9a01      	ldr	r2, [sp, #4]
 8023c30:	0007      	movs	r7, r0
 8023c32:	000c      	movs	r4, r1
 8023c34:	680b      	ldr	r3, [r1, #0]
 8023c36:	4296      	cmp	r6, r2
 8023c38:	d831      	bhi.n	8023c9e <__ssputs_r+0x7a>
 8023c3a:	898a      	ldrh	r2, [r1, #12]
 8023c3c:	2190      	movs	r1, #144	; 0x90
 8023c3e:	00c9      	lsls	r1, r1, #3
 8023c40:	420a      	tst	r2, r1
 8023c42:	d029      	beq.n	8023c98 <__ssputs_r+0x74>
 8023c44:	2003      	movs	r0, #3
 8023c46:	6921      	ldr	r1, [r4, #16]
 8023c48:	1a5b      	subs	r3, r3, r1
 8023c4a:	9302      	str	r3, [sp, #8]
 8023c4c:	6963      	ldr	r3, [r4, #20]
 8023c4e:	4343      	muls	r3, r0
 8023c50:	0fdd      	lsrs	r5, r3, #31
 8023c52:	18ed      	adds	r5, r5, r3
 8023c54:	9b01      	ldr	r3, [sp, #4]
 8023c56:	9802      	ldr	r0, [sp, #8]
 8023c58:	3301      	adds	r3, #1
 8023c5a:	181b      	adds	r3, r3, r0
 8023c5c:	106d      	asrs	r5, r5, #1
 8023c5e:	42ab      	cmp	r3, r5
 8023c60:	d900      	bls.n	8023c64 <__ssputs_r+0x40>
 8023c62:	001d      	movs	r5, r3
 8023c64:	0552      	lsls	r2, r2, #21
 8023c66:	d529      	bpl.n	8023cbc <__ssputs_r+0x98>
 8023c68:	0029      	movs	r1, r5
 8023c6a:	0038      	movs	r0, r7
 8023c6c:	f7fe fbf8 	bl	8022460 <_malloc_r>
 8023c70:	1e06      	subs	r6, r0, #0
 8023c72:	d02d      	beq.n	8023cd0 <__ssputs_r+0xac>
 8023c74:	9a02      	ldr	r2, [sp, #8]
 8023c76:	6921      	ldr	r1, [r4, #16]
 8023c78:	f7ff fe76 	bl	8023968 <memcpy>
 8023c7c:	89a2      	ldrh	r2, [r4, #12]
 8023c7e:	4b19      	ldr	r3, [pc, #100]	; (8023ce4 <__ssputs_r+0xc0>)
 8023c80:	401a      	ands	r2, r3
 8023c82:	2380      	movs	r3, #128	; 0x80
 8023c84:	4313      	orrs	r3, r2
 8023c86:	81a3      	strh	r3, [r4, #12]
 8023c88:	9b02      	ldr	r3, [sp, #8]
 8023c8a:	6126      	str	r6, [r4, #16]
 8023c8c:	18f6      	adds	r6, r6, r3
 8023c8e:	6026      	str	r6, [r4, #0]
 8023c90:	6165      	str	r5, [r4, #20]
 8023c92:	9e01      	ldr	r6, [sp, #4]
 8023c94:	1aed      	subs	r5, r5, r3
 8023c96:	60a5      	str	r5, [r4, #8]
 8023c98:	9b01      	ldr	r3, [sp, #4]
 8023c9a:	429e      	cmp	r6, r3
 8023c9c:	d900      	bls.n	8023ca0 <__ssputs_r+0x7c>
 8023c9e:	9e01      	ldr	r6, [sp, #4]
 8023ca0:	0032      	movs	r2, r6
 8023ca2:	9903      	ldr	r1, [sp, #12]
 8023ca4:	6820      	ldr	r0, [r4, #0]
 8023ca6:	f000 fd6d 	bl	8024784 <memmove>
 8023caa:	2000      	movs	r0, #0
 8023cac:	68a3      	ldr	r3, [r4, #8]
 8023cae:	1b9b      	subs	r3, r3, r6
 8023cb0:	60a3      	str	r3, [r4, #8]
 8023cb2:	6823      	ldr	r3, [r4, #0]
 8023cb4:	199b      	adds	r3, r3, r6
 8023cb6:	6023      	str	r3, [r4, #0]
 8023cb8:	b005      	add	sp, #20
 8023cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023cbc:	002a      	movs	r2, r5
 8023cbe:	0038      	movs	r0, r7
 8023cc0:	f000 fdbe 	bl	8024840 <_realloc_r>
 8023cc4:	1e06      	subs	r6, r0, #0
 8023cc6:	d1df      	bne.n	8023c88 <__ssputs_r+0x64>
 8023cc8:	0038      	movs	r0, r7
 8023cca:	6921      	ldr	r1, [r4, #16]
 8023ccc:	f7ff fe8c 	bl	80239e8 <_free_r>
 8023cd0:	230c      	movs	r3, #12
 8023cd2:	2001      	movs	r0, #1
 8023cd4:	603b      	str	r3, [r7, #0]
 8023cd6:	89a2      	ldrh	r2, [r4, #12]
 8023cd8:	3334      	adds	r3, #52	; 0x34
 8023cda:	4313      	orrs	r3, r2
 8023cdc:	81a3      	strh	r3, [r4, #12]
 8023cde:	4240      	negs	r0, r0
 8023ce0:	e7ea      	b.n	8023cb8 <__ssputs_r+0x94>
 8023ce2:	46c0      	nop			; (mov r8, r8)
 8023ce4:	fffffb7f 	.word	0xfffffb7f

08023ce8 <_svfiprintf_r>:
 8023ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cea:	b0a1      	sub	sp, #132	; 0x84
 8023cec:	9003      	str	r0, [sp, #12]
 8023cee:	001d      	movs	r5, r3
 8023cf0:	898b      	ldrh	r3, [r1, #12]
 8023cf2:	000f      	movs	r7, r1
 8023cf4:	0016      	movs	r6, r2
 8023cf6:	061b      	lsls	r3, r3, #24
 8023cf8:	d511      	bpl.n	8023d1e <_svfiprintf_r+0x36>
 8023cfa:	690b      	ldr	r3, [r1, #16]
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	d10e      	bne.n	8023d1e <_svfiprintf_r+0x36>
 8023d00:	2140      	movs	r1, #64	; 0x40
 8023d02:	f7fe fbad 	bl	8022460 <_malloc_r>
 8023d06:	6038      	str	r0, [r7, #0]
 8023d08:	6138      	str	r0, [r7, #16]
 8023d0a:	2800      	cmp	r0, #0
 8023d0c:	d105      	bne.n	8023d1a <_svfiprintf_r+0x32>
 8023d0e:	230c      	movs	r3, #12
 8023d10:	9a03      	ldr	r2, [sp, #12]
 8023d12:	3801      	subs	r0, #1
 8023d14:	6013      	str	r3, [r2, #0]
 8023d16:	b021      	add	sp, #132	; 0x84
 8023d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d1a:	2340      	movs	r3, #64	; 0x40
 8023d1c:	617b      	str	r3, [r7, #20]
 8023d1e:	2300      	movs	r3, #0
 8023d20:	ac08      	add	r4, sp, #32
 8023d22:	6163      	str	r3, [r4, #20]
 8023d24:	3320      	adds	r3, #32
 8023d26:	7663      	strb	r3, [r4, #25]
 8023d28:	3310      	adds	r3, #16
 8023d2a:	76a3      	strb	r3, [r4, #26]
 8023d2c:	9507      	str	r5, [sp, #28]
 8023d2e:	0035      	movs	r5, r6
 8023d30:	782b      	ldrb	r3, [r5, #0]
 8023d32:	2b00      	cmp	r3, #0
 8023d34:	d001      	beq.n	8023d3a <_svfiprintf_r+0x52>
 8023d36:	2b25      	cmp	r3, #37	; 0x25
 8023d38:	d148      	bne.n	8023dcc <_svfiprintf_r+0xe4>
 8023d3a:	1bab      	subs	r3, r5, r6
 8023d3c:	9305      	str	r3, [sp, #20]
 8023d3e:	42b5      	cmp	r5, r6
 8023d40:	d00b      	beq.n	8023d5a <_svfiprintf_r+0x72>
 8023d42:	0032      	movs	r2, r6
 8023d44:	0039      	movs	r1, r7
 8023d46:	9803      	ldr	r0, [sp, #12]
 8023d48:	f7ff ff6c 	bl	8023c24 <__ssputs_r>
 8023d4c:	3001      	adds	r0, #1
 8023d4e:	d100      	bne.n	8023d52 <_svfiprintf_r+0x6a>
 8023d50:	e0af      	b.n	8023eb2 <_svfiprintf_r+0x1ca>
 8023d52:	6963      	ldr	r3, [r4, #20]
 8023d54:	9a05      	ldr	r2, [sp, #20]
 8023d56:	189b      	adds	r3, r3, r2
 8023d58:	6163      	str	r3, [r4, #20]
 8023d5a:	782b      	ldrb	r3, [r5, #0]
 8023d5c:	2b00      	cmp	r3, #0
 8023d5e:	d100      	bne.n	8023d62 <_svfiprintf_r+0x7a>
 8023d60:	e0a7      	b.n	8023eb2 <_svfiprintf_r+0x1ca>
 8023d62:	2201      	movs	r2, #1
 8023d64:	2300      	movs	r3, #0
 8023d66:	4252      	negs	r2, r2
 8023d68:	6062      	str	r2, [r4, #4]
 8023d6a:	a904      	add	r1, sp, #16
 8023d6c:	3254      	adds	r2, #84	; 0x54
 8023d6e:	1852      	adds	r2, r2, r1
 8023d70:	1c6e      	adds	r6, r5, #1
 8023d72:	6023      	str	r3, [r4, #0]
 8023d74:	60e3      	str	r3, [r4, #12]
 8023d76:	60a3      	str	r3, [r4, #8]
 8023d78:	7013      	strb	r3, [r2, #0]
 8023d7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8023d7c:	4b55      	ldr	r3, [pc, #340]	; (8023ed4 <_svfiprintf_r+0x1ec>)
 8023d7e:	2205      	movs	r2, #5
 8023d80:	0018      	movs	r0, r3
 8023d82:	7831      	ldrb	r1, [r6, #0]
 8023d84:	9305      	str	r3, [sp, #20]
 8023d86:	f000 fd39 	bl	80247fc <memchr>
 8023d8a:	1c75      	adds	r5, r6, #1
 8023d8c:	2800      	cmp	r0, #0
 8023d8e:	d11f      	bne.n	8023dd0 <_svfiprintf_r+0xe8>
 8023d90:	6822      	ldr	r2, [r4, #0]
 8023d92:	06d3      	lsls	r3, r2, #27
 8023d94:	d504      	bpl.n	8023da0 <_svfiprintf_r+0xb8>
 8023d96:	2353      	movs	r3, #83	; 0x53
 8023d98:	a904      	add	r1, sp, #16
 8023d9a:	185b      	adds	r3, r3, r1
 8023d9c:	2120      	movs	r1, #32
 8023d9e:	7019      	strb	r1, [r3, #0]
 8023da0:	0713      	lsls	r3, r2, #28
 8023da2:	d504      	bpl.n	8023dae <_svfiprintf_r+0xc6>
 8023da4:	2353      	movs	r3, #83	; 0x53
 8023da6:	a904      	add	r1, sp, #16
 8023da8:	185b      	adds	r3, r3, r1
 8023daa:	212b      	movs	r1, #43	; 0x2b
 8023dac:	7019      	strb	r1, [r3, #0]
 8023dae:	7833      	ldrb	r3, [r6, #0]
 8023db0:	2b2a      	cmp	r3, #42	; 0x2a
 8023db2:	d016      	beq.n	8023de2 <_svfiprintf_r+0xfa>
 8023db4:	0035      	movs	r5, r6
 8023db6:	2100      	movs	r1, #0
 8023db8:	200a      	movs	r0, #10
 8023dba:	68e3      	ldr	r3, [r4, #12]
 8023dbc:	782a      	ldrb	r2, [r5, #0]
 8023dbe:	1c6e      	adds	r6, r5, #1
 8023dc0:	3a30      	subs	r2, #48	; 0x30
 8023dc2:	2a09      	cmp	r2, #9
 8023dc4:	d94e      	bls.n	8023e64 <_svfiprintf_r+0x17c>
 8023dc6:	2900      	cmp	r1, #0
 8023dc8:	d111      	bne.n	8023dee <_svfiprintf_r+0x106>
 8023dca:	e017      	b.n	8023dfc <_svfiprintf_r+0x114>
 8023dcc:	3501      	adds	r5, #1
 8023dce:	e7af      	b.n	8023d30 <_svfiprintf_r+0x48>
 8023dd0:	9b05      	ldr	r3, [sp, #20]
 8023dd2:	6822      	ldr	r2, [r4, #0]
 8023dd4:	1ac0      	subs	r0, r0, r3
 8023dd6:	2301      	movs	r3, #1
 8023dd8:	4083      	lsls	r3, r0
 8023dda:	4313      	orrs	r3, r2
 8023ddc:	002e      	movs	r6, r5
 8023dde:	6023      	str	r3, [r4, #0]
 8023de0:	e7cc      	b.n	8023d7c <_svfiprintf_r+0x94>
 8023de2:	9b07      	ldr	r3, [sp, #28]
 8023de4:	1d19      	adds	r1, r3, #4
 8023de6:	681b      	ldr	r3, [r3, #0]
 8023de8:	9107      	str	r1, [sp, #28]
 8023dea:	2b00      	cmp	r3, #0
 8023dec:	db01      	blt.n	8023df2 <_svfiprintf_r+0x10a>
 8023dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8023df0:	e004      	b.n	8023dfc <_svfiprintf_r+0x114>
 8023df2:	425b      	negs	r3, r3
 8023df4:	60e3      	str	r3, [r4, #12]
 8023df6:	2302      	movs	r3, #2
 8023df8:	4313      	orrs	r3, r2
 8023dfa:	6023      	str	r3, [r4, #0]
 8023dfc:	782b      	ldrb	r3, [r5, #0]
 8023dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8023e00:	d10a      	bne.n	8023e18 <_svfiprintf_r+0x130>
 8023e02:	786b      	ldrb	r3, [r5, #1]
 8023e04:	2b2a      	cmp	r3, #42	; 0x2a
 8023e06:	d135      	bne.n	8023e74 <_svfiprintf_r+0x18c>
 8023e08:	9b07      	ldr	r3, [sp, #28]
 8023e0a:	3502      	adds	r5, #2
 8023e0c:	1d1a      	adds	r2, r3, #4
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	9207      	str	r2, [sp, #28]
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	db2b      	blt.n	8023e6e <_svfiprintf_r+0x186>
 8023e16:	9309      	str	r3, [sp, #36]	; 0x24
 8023e18:	4e2f      	ldr	r6, [pc, #188]	; (8023ed8 <_svfiprintf_r+0x1f0>)
 8023e1a:	2203      	movs	r2, #3
 8023e1c:	0030      	movs	r0, r6
 8023e1e:	7829      	ldrb	r1, [r5, #0]
 8023e20:	f000 fcec 	bl	80247fc <memchr>
 8023e24:	2800      	cmp	r0, #0
 8023e26:	d006      	beq.n	8023e36 <_svfiprintf_r+0x14e>
 8023e28:	2340      	movs	r3, #64	; 0x40
 8023e2a:	1b80      	subs	r0, r0, r6
 8023e2c:	4083      	lsls	r3, r0
 8023e2e:	6822      	ldr	r2, [r4, #0]
 8023e30:	3501      	adds	r5, #1
 8023e32:	4313      	orrs	r3, r2
 8023e34:	6023      	str	r3, [r4, #0]
 8023e36:	7829      	ldrb	r1, [r5, #0]
 8023e38:	2206      	movs	r2, #6
 8023e3a:	4828      	ldr	r0, [pc, #160]	; (8023edc <_svfiprintf_r+0x1f4>)
 8023e3c:	1c6e      	adds	r6, r5, #1
 8023e3e:	7621      	strb	r1, [r4, #24]
 8023e40:	f000 fcdc 	bl	80247fc <memchr>
 8023e44:	2800      	cmp	r0, #0
 8023e46:	d03c      	beq.n	8023ec2 <_svfiprintf_r+0x1da>
 8023e48:	4b25      	ldr	r3, [pc, #148]	; (8023ee0 <_svfiprintf_r+0x1f8>)
 8023e4a:	2b00      	cmp	r3, #0
 8023e4c:	d125      	bne.n	8023e9a <_svfiprintf_r+0x1b2>
 8023e4e:	2207      	movs	r2, #7
 8023e50:	9b07      	ldr	r3, [sp, #28]
 8023e52:	3307      	adds	r3, #7
 8023e54:	4393      	bics	r3, r2
 8023e56:	3308      	adds	r3, #8
 8023e58:	9307      	str	r3, [sp, #28]
 8023e5a:	6963      	ldr	r3, [r4, #20]
 8023e5c:	9a04      	ldr	r2, [sp, #16]
 8023e5e:	189b      	adds	r3, r3, r2
 8023e60:	6163      	str	r3, [r4, #20]
 8023e62:	e764      	b.n	8023d2e <_svfiprintf_r+0x46>
 8023e64:	4343      	muls	r3, r0
 8023e66:	0035      	movs	r5, r6
 8023e68:	2101      	movs	r1, #1
 8023e6a:	189b      	adds	r3, r3, r2
 8023e6c:	e7a6      	b.n	8023dbc <_svfiprintf_r+0xd4>
 8023e6e:	2301      	movs	r3, #1
 8023e70:	425b      	negs	r3, r3
 8023e72:	e7d0      	b.n	8023e16 <_svfiprintf_r+0x12e>
 8023e74:	2300      	movs	r3, #0
 8023e76:	200a      	movs	r0, #10
 8023e78:	001a      	movs	r2, r3
 8023e7a:	3501      	adds	r5, #1
 8023e7c:	6063      	str	r3, [r4, #4]
 8023e7e:	7829      	ldrb	r1, [r5, #0]
 8023e80:	1c6e      	adds	r6, r5, #1
 8023e82:	3930      	subs	r1, #48	; 0x30
 8023e84:	2909      	cmp	r1, #9
 8023e86:	d903      	bls.n	8023e90 <_svfiprintf_r+0x1a8>
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	d0c5      	beq.n	8023e18 <_svfiprintf_r+0x130>
 8023e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8023e8e:	e7c3      	b.n	8023e18 <_svfiprintf_r+0x130>
 8023e90:	4342      	muls	r2, r0
 8023e92:	0035      	movs	r5, r6
 8023e94:	2301      	movs	r3, #1
 8023e96:	1852      	adds	r2, r2, r1
 8023e98:	e7f1      	b.n	8023e7e <_svfiprintf_r+0x196>
 8023e9a:	aa07      	add	r2, sp, #28
 8023e9c:	9200      	str	r2, [sp, #0]
 8023e9e:	0021      	movs	r1, r4
 8023ea0:	003a      	movs	r2, r7
 8023ea2:	4b10      	ldr	r3, [pc, #64]	; (8023ee4 <_svfiprintf_r+0x1fc>)
 8023ea4:	9803      	ldr	r0, [sp, #12]
 8023ea6:	e000      	b.n	8023eaa <_svfiprintf_r+0x1c2>
 8023ea8:	bf00      	nop
 8023eaa:	9004      	str	r0, [sp, #16]
 8023eac:	9b04      	ldr	r3, [sp, #16]
 8023eae:	3301      	adds	r3, #1
 8023eb0:	d1d3      	bne.n	8023e5a <_svfiprintf_r+0x172>
 8023eb2:	89bb      	ldrh	r3, [r7, #12]
 8023eb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023eb6:	065b      	lsls	r3, r3, #25
 8023eb8:	d400      	bmi.n	8023ebc <_svfiprintf_r+0x1d4>
 8023eba:	e72c      	b.n	8023d16 <_svfiprintf_r+0x2e>
 8023ebc:	2001      	movs	r0, #1
 8023ebe:	4240      	negs	r0, r0
 8023ec0:	e729      	b.n	8023d16 <_svfiprintf_r+0x2e>
 8023ec2:	aa07      	add	r2, sp, #28
 8023ec4:	9200      	str	r2, [sp, #0]
 8023ec6:	0021      	movs	r1, r4
 8023ec8:	003a      	movs	r2, r7
 8023eca:	4b06      	ldr	r3, [pc, #24]	; (8023ee4 <_svfiprintf_r+0x1fc>)
 8023ecc:	9803      	ldr	r0, [sp, #12]
 8023ece:	f000 f9bf 	bl	8024250 <_printf_i>
 8023ed2:	e7ea      	b.n	8023eaa <_svfiprintf_r+0x1c2>
 8023ed4:	08032366 	.word	0x08032366
 8023ed8:	0803236c 	.word	0x0803236c
 8023edc:	08032370 	.word	0x08032370
 8023ee0:	00000000 	.word	0x00000000
 8023ee4:	08023c25 	.word	0x08023c25

08023ee8 <__sfputc_r>:
 8023ee8:	6893      	ldr	r3, [r2, #8]
 8023eea:	b510      	push	{r4, lr}
 8023eec:	3b01      	subs	r3, #1
 8023eee:	6093      	str	r3, [r2, #8]
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	da04      	bge.n	8023efe <__sfputc_r+0x16>
 8023ef4:	6994      	ldr	r4, [r2, #24]
 8023ef6:	42a3      	cmp	r3, r4
 8023ef8:	db07      	blt.n	8023f0a <__sfputc_r+0x22>
 8023efa:	290a      	cmp	r1, #10
 8023efc:	d005      	beq.n	8023f0a <__sfputc_r+0x22>
 8023efe:	6813      	ldr	r3, [r2, #0]
 8023f00:	1c58      	adds	r0, r3, #1
 8023f02:	6010      	str	r0, [r2, #0]
 8023f04:	7019      	strb	r1, [r3, #0]
 8023f06:	0008      	movs	r0, r1
 8023f08:	bd10      	pop	{r4, pc}
 8023f0a:	f7fe fd9f 	bl	8022a4c <__swbuf_r>
 8023f0e:	0001      	movs	r1, r0
 8023f10:	e7f9      	b.n	8023f06 <__sfputc_r+0x1e>

08023f12 <__sfputs_r>:
 8023f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f14:	0006      	movs	r6, r0
 8023f16:	000f      	movs	r7, r1
 8023f18:	0014      	movs	r4, r2
 8023f1a:	18d5      	adds	r5, r2, r3
 8023f1c:	42ac      	cmp	r4, r5
 8023f1e:	d101      	bne.n	8023f24 <__sfputs_r+0x12>
 8023f20:	2000      	movs	r0, #0
 8023f22:	e007      	b.n	8023f34 <__sfputs_r+0x22>
 8023f24:	7821      	ldrb	r1, [r4, #0]
 8023f26:	003a      	movs	r2, r7
 8023f28:	0030      	movs	r0, r6
 8023f2a:	f7ff ffdd 	bl	8023ee8 <__sfputc_r>
 8023f2e:	3401      	adds	r4, #1
 8023f30:	1c43      	adds	r3, r0, #1
 8023f32:	d1f3      	bne.n	8023f1c <__sfputs_r+0xa>
 8023f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023f38 <_vfiprintf_r>:
 8023f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f3a:	b0a1      	sub	sp, #132	; 0x84
 8023f3c:	000f      	movs	r7, r1
 8023f3e:	0015      	movs	r5, r2
 8023f40:	001e      	movs	r6, r3
 8023f42:	9003      	str	r0, [sp, #12]
 8023f44:	2800      	cmp	r0, #0
 8023f46:	d004      	beq.n	8023f52 <_vfiprintf_r+0x1a>
 8023f48:	6a03      	ldr	r3, [r0, #32]
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	d101      	bne.n	8023f52 <_vfiprintf_r+0x1a>
 8023f4e:	f7fe fc2d 	bl	80227ac <__sinit>
 8023f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023f54:	07db      	lsls	r3, r3, #31
 8023f56:	d405      	bmi.n	8023f64 <_vfiprintf_r+0x2c>
 8023f58:	89bb      	ldrh	r3, [r7, #12]
 8023f5a:	059b      	lsls	r3, r3, #22
 8023f5c:	d402      	bmi.n	8023f64 <_vfiprintf_r+0x2c>
 8023f5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8023f60:	f7ff fcf7 	bl	8023952 <__retarget_lock_acquire_recursive>
 8023f64:	89bb      	ldrh	r3, [r7, #12]
 8023f66:	071b      	lsls	r3, r3, #28
 8023f68:	d502      	bpl.n	8023f70 <_vfiprintf_r+0x38>
 8023f6a:	693b      	ldr	r3, [r7, #16]
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d113      	bne.n	8023f98 <_vfiprintf_r+0x60>
 8023f70:	0039      	movs	r1, r7
 8023f72:	9803      	ldr	r0, [sp, #12]
 8023f74:	f7fe fdac 	bl	8022ad0 <__swsetup_r>
 8023f78:	2800      	cmp	r0, #0
 8023f7a:	d00d      	beq.n	8023f98 <_vfiprintf_r+0x60>
 8023f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023f7e:	07db      	lsls	r3, r3, #31
 8023f80:	d503      	bpl.n	8023f8a <_vfiprintf_r+0x52>
 8023f82:	2001      	movs	r0, #1
 8023f84:	4240      	negs	r0, r0
 8023f86:	b021      	add	sp, #132	; 0x84
 8023f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f8a:	89bb      	ldrh	r3, [r7, #12]
 8023f8c:	059b      	lsls	r3, r3, #22
 8023f8e:	d4f8      	bmi.n	8023f82 <_vfiprintf_r+0x4a>
 8023f90:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8023f92:	f7ff fce0 	bl	8023956 <__retarget_lock_release_recursive>
 8023f96:	e7f4      	b.n	8023f82 <_vfiprintf_r+0x4a>
 8023f98:	2300      	movs	r3, #0
 8023f9a:	ac08      	add	r4, sp, #32
 8023f9c:	6163      	str	r3, [r4, #20]
 8023f9e:	3320      	adds	r3, #32
 8023fa0:	7663      	strb	r3, [r4, #25]
 8023fa2:	3310      	adds	r3, #16
 8023fa4:	76a3      	strb	r3, [r4, #26]
 8023fa6:	9607      	str	r6, [sp, #28]
 8023fa8:	002e      	movs	r6, r5
 8023faa:	7833      	ldrb	r3, [r6, #0]
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d001      	beq.n	8023fb4 <_vfiprintf_r+0x7c>
 8023fb0:	2b25      	cmp	r3, #37	; 0x25
 8023fb2:	d148      	bne.n	8024046 <_vfiprintf_r+0x10e>
 8023fb4:	1b73      	subs	r3, r6, r5
 8023fb6:	9305      	str	r3, [sp, #20]
 8023fb8:	42ae      	cmp	r6, r5
 8023fba:	d00b      	beq.n	8023fd4 <_vfiprintf_r+0x9c>
 8023fbc:	002a      	movs	r2, r5
 8023fbe:	0039      	movs	r1, r7
 8023fc0:	9803      	ldr	r0, [sp, #12]
 8023fc2:	f7ff ffa6 	bl	8023f12 <__sfputs_r>
 8023fc6:	3001      	adds	r0, #1
 8023fc8:	d100      	bne.n	8023fcc <_vfiprintf_r+0x94>
 8023fca:	e0af      	b.n	802412c <_vfiprintf_r+0x1f4>
 8023fcc:	6963      	ldr	r3, [r4, #20]
 8023fce:	9a05      	ldr	r2, [sp, #20]
 8023fd0:	189b      	adds	r3, r3, r2
 8023fd2:	6163      	str	r3, [r4, #20]
 8023fd4:	7833      	ldrb	r3, [r6, #0]
 8023fd6:	2b00      	cmp	r3, #0
 8023fd8:	d100      	bne.n	8023fdc <_vfiprintf_r+0xa4>
 8023fda:	e0a7      	b.n	802412c <_vfiprintf_r+0x1f4>
 8023fdc:	2201      	movs	r2, #1
 8023fde:	2300      	movs	r3, #0
 8023fe0:	4252      	negs	r2, r2
 8023fe2:	6062      	str	r2, [r4, #4]
 8023fe4:	a904      	add	r1, sp, #16
 8023fe6:	3254      	adds	r2, #84	; 0x54
 8023fe8:	1852      	adds	r2, r2, r1
 8023fea:	1c75      	adds	r5, r6, #1
 8023fec:	6023      	str	r3, [r4, #0]
 8023fee:	60e3      	str	r3, [r4, #12]
 8023ff0:	60a3      	str	r3, [r4, #8]
 8023ff2:	7013      	strb	r3, [r2, #0]
 8023ff4:	65a3      	str	r3, [r4, #88]	; 0x58
 8023ff6:	4b59      	ldr	r3, [pc, #356]	; (802415c <_vfiprintf_r+0x224>)
 8023ff8:	2205      	movs	r2, #5
 8023ffa:	0018      	movs	r0, r3
 8023ffc:	7829      	ldrb	r1, [r5, #0]
 8023ffe:	9305      	str	r3, [sp, #20]
 8024000:	f000 fbfc 	bl	80247fc <memchr>
 8024004:	1c6e      	adds	r6, r5, #1
 8024006:	2800      	cmp	r0, #0
 8024008:	d11f      	bne.n	802404a <_vfiprintf_r+0x112>
 802400a:	6822      	ldr	r2, [r4, #0]
 802400c:	06d3      	lsls	r3, r2, #27
 802400e:	d504      	bpl.n	802401a <_vfiprintf_r+0xe2>
 8024010:	2353      	movs	r3, #83	; 0x53
 8024012:	a904      	add	r1, sp, #16
 8024014:	185b      	adds	r3, r3, r1
 8024016:	2120      	movs	r1, #32
 8024018:	7019      	strb	r1, [r3, #0]
 802401a:	0713      	lsls	r3, r2, #28
 802401c:	d504      	bpl.n	8024028 <_vfiprintf_r+0xf0>
 802401e:	2353      	movs	r3, #83	; 0x53
 8024020:	a904      	add	r1, sp, #16
 8024022:	185b      	adds	r3, r3, r1
 8024024:	212b      	movs	r1, #43	; 0x2b
 8024026:	7019      	strb	r1, [r3, #0]
 8024028:	782b      	ldrb	r3, [r5, #0]
 802402a:	2b2a      	cmp	r3, #42	; 0x2a
 802402c:	d016      	beq.n	802405c <_vfiprintf_r+0x124>
 802402e:	002e      	movs	r6, r5
 8024030:	2100      	movs	r1, #0
 8024032:	200a      	movs	r0, #10
 8024034:	68e3      	ldr	r3, [r4, #12]
 8024036:	7832      	ldrb	r2, [r6, #0]
 8024038:	1c75      	adds	r5, r6, #1
 802403a:	3a30      	subs	r2, #48	; 0x30
 802403c:	2a09      	cmp	r2, #9
 802403e:	d94e      	bls.n	80240de <_vfiprintf_r+0x1a6>
 8024040:	2900      	cmp	r1, #0
 8024042:	d111      	bne.n	8024068 <_vfiprintf_r+0x130>
 8024044:	e017      	b.n	8024076 <_vfiprintf_r+0x13e>
 8024046:	3601      	adds	r6, #1
 8024048:	e7af      	b.n	8023faa <_vfiprintf_r+0x72>
 802404a:	9b05      	ldr	r3, [sp, #20]
 802404c:	6822      	ldr	r2, [r4, #0]
 802404e:	1ac0      	subs	r0, r0, r3
 8024050:	2301      	movs	r3, #1
 8024052:	4083      	lsls	r3, r0
 8024054:	4313      	orrs	r3, r2
 8024056:	0035      	movs	r5, r6
 8024058:	6023      	str	r3, [r4, #0]
 802405a:	e7cc      	b.n	8023ff6 <_vfiprintf_r+0xbe>
 802405c:	9b07      	ldr	r3, [sp, #28]
 802405e:	1d19      	adds	r1, r3, #4
 8024060:	681b      	ldr	r3, [r3, #0]
 8024062:	9107      	str	r1, [sp, #28]
 8024064:	2b00      	cmp	r3, #0
 8024066:	db01      	blt.n	802406c <_vfiprintf_r+0x134>
 8024068:	930b      	str	r3, [sp, #44]	; 0x2c
 802406a:	e004      	b.n	8024076 <_vfiprintf_r+0x13e>
 802406c:	425b      	negs	r3, r3
 802406e:	60e3      	str	r3, [r4, #12]
 8024070:	2302      	movs	r3, #2
 8024072:	4313      	orrs	r3, r2
 8024074:	6023      	str	r3, [r4, #0]
 8024076:	7833      	ldrb	r3, [r6, #0]
 8024078:	2b2e      	cmp	r3, #46	; 0x2e
 802407a:	d10a      	bne.n	8024092 <_vfiprintf_r+0x15a>
 802407c:	7873      	ldrb	r3, [r6, #1]
 802407e:	2b2a      	cmp	r3, #42	; 0x2a
 8024080:	d135      	bne.n	80240ee <_vfiprintf_r+0x1b6>
 8024082:	9b07      	ldr	r3, [sp, #28]
 8024084:	3602      	adds	r6, #2
 8024086:	1d1a      	adds	r2, r3, #4
 8024088:	681b      	ldr	r3, [r3, #0]
 802408a:	9207      	str	r2, [sp, #28]
 802408c:	2b00      	cmp	r3, #0
 802408e:	db2b      	blt.n	80240e8 <_vfiprintf_r+0x1b0>
 8024090:	9309      	str	r3, [sp, #36]	; 0x24
 8024092:	4d33      	ldr	r5, [pc, #204]	; (8024160 <_vfiprintf_r+0x228>)
 8024094:	2203      	movs	r2, #3
 8024096:	0028      	movs	r0, r5
 8024098:	7831      	ldrb	r1, [r6, #0]
 802409a:	f000 fbaf 	bl	80247fc <memchr>
 802409e:	2800      	cmp	r0, #0
 80240a0:	d006      	beq.n	80240b0 <_vfiprintf_r+0x178>
 80240a2:	2340      	movs	r3, #64	; 0x40
 80240a4:	1b40      	subs	r0, r0, r5
 80240a6:	4083      	lsls	r3, r0
 80240a8:	6822      	ldr	r2, [r4, #0]
 80240aa:	3601      	adds	r6, #1
 80240ac:	4313      	orrs	r3, r2
 80240ae:	6023      	str	r3, [r4, #0]
 80240b0:	7831      	ldrb	r1, [r6, #0]
 80240b2:	2206      	movs	r2, #6
 80240b4:	482b      	ldr	r0, [pc, #172]	; (8024164 <_vfiprintf_r+0x22c>)
 80240b6:	1c75      	adds	r5, r6, #1
 80240b8:	7621      	strb	r1, [r4, #24]
 80240ba:	f000 fb9f 	bl	80247fc <memchr>
 80240be:	2800      	cmp	r0, #0
 80240c0:	d043      	beq.n	802414a <_vfiprintf_r+0x212>
 80240c2:	4b29      	ldr	r3, [pc, #164]	; (8024168 <_vfiprintf_r+0x230>)
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	d125      	bne.n	8024114 <_vfiprintf_r+0x1dc>
 80240c8:	2207      	movs	r2, #7
 80240ca:	9b07      	ldr	r3, [sp, #28]
 80240cc:	3307      	adds	r3, #7
 80240ce:	4393      	bics	r3, r2
 80240d0:	3308      	adds	r3, #8
 80240d2:	9307      	str	r3, [sp, #28]
 80240d4:	6963      	ldr	r3, [r4, #20]
 80240d6:	9a04      	ldr	r2, [sp, #16]
 80240d8:	189b      	adds	r3, r3, r2
 80240da:	6163      	str	r3, [r4, #20]
 80240dc:	e764      	b.n	8023fa8 <_vfiprintf_r+0x70>
 80240de:	4343      	muls	r3, r0
 80240e0:	002e      	movs	r6, r5
 80240e2:	2101      	movs	r1, #1
 80240e4:	189b      	adds	r3, r3, r2
 80240e6:	e7a6      	b.n	8024036 <_vfiprintf_r+0xfe>
 80240e8:	2301      	movs	r3, #1
 80240ea:	425b      	negs	r3, r3
 80240ec:	e7d0      	b.n	8024090 <_vfiprintf_r+0x158>
 80240ee:	2300      	movs	r3, #0
 80240f0:	200a      	movs	r0, #10
 80240f2:	001a      	movs	r2, r3
 80240f4:	3601      	adds	r6, #1
 80240f6:	6063      	str	r3, [r4, #4]
 80240f8:	7831      	ldrb	r1, [r6, #0]
 80240fa:	1c75      	adds	r5, r6, #1
 80240fc:	3930      	subs	r1, #48	; 0x30
 80240fe:	2909      	cmp	r1, #9
 8024100:	d903      	bls.n	802410a <_vfiprintf_r+0x1d2>
 8024102:	2b00      	cmp	r3, #0
 8024104:	d0c5      	beq.n	8024092 <_vfiprintf_r+0x15a>
 8024106:	9209      	str	r2, [sp, #36]	; 0x24
 8024108:	e7c3      	b.n	8024092 <_vfiprintf_r+0x15a>
 802410a:	4342      	muls	r2, r0
 802410c:	002e      	movs	r6, r5
 802410e:	2301      	movs	r3, #1
 8024110:	1852      	adds	r2, r2, r1
 8024112:	e7f1      	b.n	80240f8 <_vfiprintf_r+0x1c0>
 8024114:	aa07      	add	r2, sp, #28
 8024116:	9200      	str	r2, [sp, #0]
 8024118:	0021      	movs	r1, r4
 802411a:	003a      	movs	r2, r7
 802411c:	4b13      	ldr	r3, [pc, #76]	; (802416c <_vfiprintf_r+0x234>)
 802411e:	9803      	ldr	r0, [sp, #12]
 8024120:	e000      	b.n	8024124 <_vfiprintf_r+0x1ec>
 8024122:	bf00      	nop
 8024124:	9004      	str	r0, [sp, #16]
 8024126:	9b04      	ldr	r3, [sp, #16]
 8024128:	3301      	adds	r3, #1
 802412a:	d1d3      	bne.n	80240d4 <_vfiprintf_r+0x19c>
 802412c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802412e:	07db      	lsls	r3, r3, #31
 8024130:	d405      	bmi.n	802413e <_vfiprintf_r+0x206>
 8024132:	89bb      	ldrh	r3, [r7, #12]
 8024134:	059b      	lsls	r3, r3, #22
 8024136:	d402      	bmi.n	802413e <_vfiprintf_r+0x206>
 8024138:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802413a:	f7ff fc0c 	bl	8023956 <__retarget_lock_release_recursive>
 802413e:	89bb      	ldrh	r3, [r7, #12]
 8024140:	065b      	lsls	r3, r3, #25
 8024142:	d500      	bpl.n	8024146 <_vfiprintf_r+0x20e>
 8024144:	e71d      	b.n	8023f82 <_vfiprintf_r+0x4a>
 8024146:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024148:	e71d      	b.n	8023f86 <_vfiprintf_r+0x4e>
 802414a:	aa07      	add	r2, sp, #28
 802414c:	9200      	str	r2, [sp, #0]
 802414e:	0021      	movs	r1, r4
 8024150:	003a      	movs	r2, r7
 8024152:	4b06      	ldr	r3, [pc, #24]	; (802416c <_vfiprintf_r+0x234>)
 8024154:	9803      	ldr	r0, [sp, #12]
 8024156:	f000 f87b 	bl	8024250 <_printf_i>
 802415a:	e7e3      	b.n	8024124 <_vfiprintf_r+0x1ec>
 802415c:	08032366 	.word	0x08032366
 8024160:	0803236c 	.word	0x0803236c
 8024164:	08032370 	.word	0x08032370
 8024168:	00000000 	.word	0x00000000
 802416c:	08023f13 	.word	0x08023f13

08024170 <_printf_common>:
 8024170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024172:	0016      	movs	r6, r2
 8024174:	9301      	str	r3, [sp, #4]
 8024176:	688a      	ldr	r2, [r1, #8]
 8024178:	690b      	ldr	r3, [r1, #16]
 802417a:	000c      	movs	r4, r1
 802417c:	9000      	str	r0, [sp, #0]
 802417e:	4293      	cmp	r3, r2
 8024180:	da00      	bge.n	8024184 <_printf_common+0x14>
 8024182:	0013      	movs	r3, r2
 8024184:	0022      	movs	r2, r4
 8024186:	6033      	str	r3, [r6, #0]
 8024188:	3243      	adds	r2, #67	; 0x43
 802418a:	7812      	ldrb	r2, [r2, #0]
 802418c:	2a00      	cmp	r2, #0
 802418e:	d001      	beq.n	8024194 <_printf_common+0x24>
 8024190:	3301      	adds	r3, #1
 8024192:	6033      	str	r3, [r6, #0]
 8024194:	6823      	ldr	r3, [r4, #0]
 8024196:	069b      	lsls	r3, r3, #26
 8024198:	d502      	bpl.n	80241a0 <_printf_common+0x30>
 802419a:	6833      	ldr	r3, [r6, #0]
 802419c:	3302      	adds	r3, #2
 802419e:	6033      	str	r3, [r6, #0]
 80241a0:	6822      	ldr	r2, [r4, #0]
 80241a2:	2306      	movs	r3, #6
 80241a4:	0015      	movs	r5, r2
 80241a6:	401d      	ands	r5, r3
 80241a8:	421a      	tst	r2, r3
 80241aa:	d027      	beq.n	80241fc <_printf_common+0x8c>
 80241ac:	0023      	movs	r3, r4
 80241ae:	3343      	adds	r3, #67	; 0x43
 80241b0:	781b      	ldrb	r3, [r3, #0]
 80241b2:	1e5a      	subs	r2, r3, #1
 80241b4:	4193      	sbcs	r3, r2
 80241b6:	6822      	ldr	r2, [r4, #0]
 80241b8:	0692      	lsls	r2, r2, #26
 80241ba:	d430      	bmi.n	802421e <_printf_common+0xae>
 80241bc:	0022      	movs	r2, r4
 80241be:	9901      	ldr	r1, [sp, #4]
 80241c0:	9800      	ldr	r0, [sp, #0]
 80241c2:	9d08      	ldr	r5, [sp, #32]
 80241c4:	3243      	adds	r2, #67	; 0x43
 80241c6:	47a8      	blx	r5
 80241c8:	3001      	adds	r0, #1
 80241ca:	d025      	beq.n	8024218 <_printf_common+0xa8>
 80241cc:	2206      	movs	r2, #6
 80241ce:	6823      	ldr	r3, [r4, #0]
 80241d0:	2500      	movs	r5, #0
 80241d2:	4013      	ands	r3, r2
 80241d4:	2b04      	cmp	r3, #4
 80241d6:	d105      	bne.n	80241e4 <_printf_common+0x74>
 80241d8:	6833      	ldr	r3, [r6, #0]
 80241da:	68e5      	ldr	r5, [r4, #12]
 80241dc:	1aed      	subs	r5, r5, r3
 80241de:	43eb      	mvns	r3, r5
 80241e0:	17db      	asrs	r3, r3, #31
 80241e2:	401d      	ands	r5, r3
 80241e4:	68a3      	ldr	r3, [r4, #8]
 80241e6:	6922      	ldr	r2, [r4, #16]
 80241e8:	4293      	cmp	r3, r2
 80241ea:	dd01      	ble.n	80241f0 <_printf_common+0x80>
 80241ec:	1a9b      	subs	r3, r3, r2
 80241ee:	18ed      	adds	r5, r5, r3
 80241f0:	2600      	movs	r6, #0
 80241f2:	42b5      	cmp	r5, r6
 80241f4:	d120      	bne.n	8024238 <_printf_common+0xc8>
 80241f6:	2000      	movs	r0, #0
 80241f8:	e010      	b.n	802421c <_printf_common+0xac>
 80241fa:	3501      	adds	r5, #1
 80241fc:	68e3      	ldr	r3, [r4, #12]
 80241fe:	6832      	ldr	r2, [r6, #0]
 8024200:	1a9b      	subs	r3, r3, r2
 8024202:	42ab      	cmp	r3, r5
 8024204:	ddd2      	ble.n	80241ac <_printf_common+0x3c>
 8024206:	0022      	movs	r2, r4
 8024208:	2301      	movs	r3, #1
 802420a:	9901      	ldr	r1, [sp, #4]
 802420c:	9800      	ldr	r0, [sp, #0]
 802420e:	9f08      	ldr	r7, [sp, #32]
 8024210:	3219      	adds	r2, #25
 8024212:	47b8      	blx	r7
 8024214:	3001      	adds	r0, #1
 8024216:	d1f0      	bne.n	80241fa <_printf_common+0x8a>
 8024218:	2001      	movs	r0, #1
 802421a:	4240      	negs	r0, r0
 802421c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802421e:	2030      	movs	r0, #48	; 0x30
 8024220:	18e1      	adds	r1, r4, r3
 8024222:	3143      	adds	r1, #67	; 0x43
 8024224:	7008      	strb	r0, [r1, #0]
 8024226:	0021      	movs	r1, r4
 8024228:	1c5a      	adds	r2, r3, #1
 802422a:	3145      	adds	r1, #69	; 0x45
 802422c:	7809      	ldrb	r1, [r1, #0]
 802422e:	18a2      	adds	r2, r4, r2
 8024230:	3243      	adds	r2, #67	; 0x43
 8024232:	3302      	adds	r3, #2
 8024234:	7011      	strb	r1, [r2, #0]
 8024236:	e7c1      	b.n	80241bc <_printf_common+0x4c>
 8024238:	0022      	movs	r2, r4
 802423a:	2301      	movs	r3, #1
 802423c:	9901      	ldr	r1, [sp, #4]
 802423e:	9800      	ldr	r0, [sp, #0]
 8024240:	9f08      	ldr	r7, [sp, #32]
 8024242:	321a      	adds	r2, #26
 8024244:	47b8      	blx	r7
 8024246:	3001      	adds	r0, #1
 8024248:	d0e6      	beq.n	8024218 <_printf_common+0xa8>
 802424a:	3601      	adds	r6, #1
 802424c:	e7d1      	b.n	80241f2 <_printf_common+0x82>
	...

08024250 <_printf_i>:
 8024250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024252:	b08b      	sub	sp, #44	; 0x2c
 8024254:	9206      	str	r2, [sp, #24]
 8024256:	000a      	movs	r2, r1
 8024258:	3243      	adds	r2, #67	; 0x43
 802425a:	9307      	str	r3, [sp, #28]
 802425c:	9005      	str	r0, [sp, #20]
 802425e:	9204      	str	r2, [sp, #16]
 8024260:	7e0a      	ldrb	r2, [r1, #24]
 8024262:	000c      	movs	r4, r1
 8024264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024266:	2a78      	cmp	r2, #120	; 0x78
 8024268:	d809      	bhi.n	802427e <_printf_i+0x2e>
 802426a:	2a62      	cmp	r2, #98	; 0x62
 802426c:	d80b      	bhi.n	8024286 <_printf_i+0x36>
 802426e:	2a00      	cmp	r2, #0
 8024270:	d100      	bne.n	8024274 <_printf_i+0x24>
 8024272:	e0be      	b.n	80243f2 <_printf_i+0x1a2>
 8024274:	497c      	ldr	r1, [pc, #496]	; (8024468 <_printf_i+0x218>)
 8024276:	9103      	str	r1, [sp, #12]
 8024278:	2a58      	cmp	r2, #88	; 0x58
 802427a:	d100      	bne.n	802427e <_printf_i+0x2e>
 802427c:	e093      	b.n	80243a6 <_printf_i+0x156>
 802427e:	0026      	movs	r6, r4
 8024280:	3642      	adds	r6, #66	; 0x42
 8024282:	7032      	strb	r2, [r6, #0]
 8024284:	e022      	b.n	80242cc <_printf_i+0x7c>
 8024286:	0010      	movs	r0, r2
 8024288:	3863      	subs	r0, #99	; 0x63
 802428a:	2815      	cmp	r0, #21
 802428c:	d8f7      	bhi.n	802427e <_printf_i+0x2e>
 802428e:	f7dd ff49 	bl	8002124 <__gnu_thumb1_case_shi>
 8024292:	0016      	.short	0x0016
 8024294:	fff6001f 	.word	0xfff6001f
 8024298:	fff6fff6 	.word	0xfff6fff6
 802429c:	001ffff6 	.word	0x001ffff6
 80242a0:	fff6fff6 	.word	0xfff6fff6
 80242a4:	fff6fff6 	.word	0xfff6fff6
 80242a8:	003600a3 	.word	0x003600a3
 80242ac:	fff60083 	.word	0xfff60083
 80242b0:	00b4fff6 	.word	0x00b4fff6
 80242b4:	0036fff6 	.word	0x0036fff6
 80242b8:	fff6fff6 	.word	0xfff6fff6
 80242bc:	0087      	.short	0x0087
 80242be:	0026      	movs	r6, r4
 80242c0:	681a      	ldr	r2, [r3, #0]
 80242c2:	3642      	adds	r6, #66	; 0x42
 80242c4:	1d11      	adds	r1, r2, #4
 80242c6:	6019      	str	r1, [r3, #0]
 80242c8:	6813      	ldr	r3, [r2, #0]
 80242ca:	7033      	strb	r3, [r6, #0]
 80242cc:	2301      	movs	r3, #1
 80242ce:	e0a2      	b.n	8024416 <_printf_i+0x1c6>
 80242d0:	6818      	ldr	r0, [r3, #0]
 80242d2:	6809      	ldr	r1, [r1, #0]
 80242d4:	1d02      	adds	r2, r0, #4
 80242d6:	060d      	lsls	r5, r1, #24
 80242d8:	d50b      	bpl.n	80242f2 <_printf_i+0xa2>
 80242da:	6805      	ldr	r5, [r0, #0]
 80242dc:	601a      	str	r2, [r3, #0]
 80242de:	2d00      	cmp	r5, #0
 80242e0:	da03      	bge.n	80242ea <_printf_i+0x9a>
 80242e2:	232d      	movs	r3, #45	; 0x2d
 80242e4:	9a04      	ldr	r2, [sp, #16]
 80242e6:	426d      	negs	r5, r5
 80242e8:	7013      	strb	r3, [r2, #0]
 80242ea:	4b5f      	ldr	r3, [pc, #380]	; (8024468 <_printf_i+0x218>)
 80242ec:	270a      	movs	r7, #10
 80242ee:	9303      	str	r3, [sp, #12]
 80242f0:	e01b      	b.n	802432a <_printf_i+0xda>
 80242f2:	6805      	ldr	r5, [r0, #0]
 80242f4:	601a      	str	r2, [r3, #0]
 80242f6:	0649      	lsls	r1, r1, #25
 80242f8:	d5f1      	bpl.n	80242de <_printf_i+0x8e>
 80242fa:	b22d      	sxth	r5, r5
 80242fc:	e7ef      	b.n	80242de <_printf_i+0x8e>
 80242fe:	680d      	ldr	r5, [r1, #0]
 8024300:	6819      	ldr	r1, [r3, #0]
 8024302:	1d08      	adds	r0, r1, #4
 8024304:	6018      	str	r0, [r3, #0]
 8024306:	062e      	lsls	r6, r5, #24
 8024308:	d501      	bpl.n	802430e <_printf_i+0xbe>
 802430a:	680d      	ldr	r5, [r1, #0]
 802430c:	e003      	b.n	8024316 <_printf_i+0xc6>
 802430e:	066d      	lsls	r5, r5, #25
 8024310:	d5fb      	bpl.n	802430a <_printf_i+0xba>
 8024312:	680d      	ldr	r5, [r1, #0]
 8024314:	b2ad      	uxth	r5, r5
 8024316:	4b54      	ldr	r3, [pc, #336]	; (8024468 <_printf_i+0x218>)
 8024318:	2708      	movs	r7, #8
 802431a:	9303      	str	r3, [sp, #12]
 802431c:	2a6f      	cmp	r2, #111	; 0x6f
 802431e:	d000      	beq.n	8024322 <_printf_i+0xd2>
 8024320:	3702      	adds	r7, #2
 8024322:	0023      	movs	r3, r4
 8024324:	2200      	movs	r2, #0
 8024326:	3343      	adds	r3, #67	; 0x43
 8024328:	701a      	strb	r2, [r3, #0]
 802432a:	6863      	ldr	r3, [r4, #4]
 802432c:	60a3      	str	r3, [r4, #8]
 802432e:	2b00      	cmp	r3, #0
 8024330:	db03      	blt.n	802433a <_printf_i+0xea>
 8024332:	2104      	movs	r1, #4
 8024334:	6822      	ldr	r2, [r4, #0]
 8024336:	438a      	bics	r2, r1
 8024338:	6022      	str	r2, [r4, #0]
 802433a:	2d00      	cmp	r5, #0
 802433c:	d102      	bne.n	8024344 <_printf_i+0xf4>
 802433e:	9e04      	ldr	r6, [sp, #16]
 8024340:	2b00      	cmp	r3, #0
 8024342:	d00c      	beq.n	802435e <_printf_i+0x10e>
 8024344:	9e04      	ldr	r6, [sp, #16]
 8024346:	0028      	movs	r0, r5
 8024348:	0039      	movs	r1, r7
 802434a:	f7dd ff7b 	bl	8002244 <__aeabi_uidivmod>
 802434e:	9b03      	ldr	r3, [sp, #12]
 8024350:	3e01      	subs	r6, #1
 8024352:	5c5b      	ldrb	r3, [r3, r1]
 8024354:	7033      	strb	r3, [r6, #0]
 8024356:	002b      	movs	r3, r5
 8024358:	0005      	movs	r5, r0
 802435a:	429f      	cmp	r7, r3
 802435c:	d9f3      	bls.n	8024346 <_printf_i+0xf6>
 802435e:	2f08      	cmp	r7, #8
 8024360:	d109      	bne.n	8024376 <_printf_i+0x126>
 8024362:	6823      	ldr	r3, [r4, #0]
 8024364:	07db      	lsls	r3, r3, #31
 8024366:	d506      	bpl.n	8024376 <_printf_i+0x126>
 8024368:	6862      	ldr	r2, [r4, #4]
 802436a:	6923      	ldr	r3, [r4, #16]
 802436c:	429a      	cmp	r2, r3
 802436e:	dc02      	bgt.n	8024376 <_printf_i+0x126>
 8024370:	2330      	movs	r3, #48	; 0x30
 8024372:	3e01      	subs	r6, #1
 8024374:	7033      	strb	r3, [r6, #0]
 8024376:	9b04      	ldr	r3, [sp, #16]
 8024378:	1b9b      	subs	r3, r3, r6
 802437a:	6123      	str	r3, [r4, #16]
 802437c:	9b07      	ldr	r3, [sp, #28]
 802437e:	0021      	movs	r1, r4
 8024380:	9300      	str	r3, [sp, #0]
 8024382:	9805      	ldr	r0, [sp, #20]
 8024384:	9b06      	ldr	r3, [sp, #24]
 8024386:	aa09      	add	r2, sp, #36	; 0x24
 8024388:	f7ff fef2 	bl	8024170 <_printf_common>
 802438c:	3001      	adds	r0, #1
 802438e:	d147      	bne.n	8024420 <_printf_i+0x1d0>
 8024390:	2001      	movs	r0, #1
 8024392:	4240      	negs	r0, r0
 8024394:	b00b      	add	sp, #44	; 0x2c
 8024396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024398:	2220      	movs	r2, #32
 802439a:	6809      	ldr	r1, [r1, #0]
 802439c:	430a      	orrs	r2, r1
 802439e:	6022      	str	r2, [r4, #0]
 80243a0:	2278      	movs	r2, #120	; 0x78
 80243a2:	4932      	ldr	r1, [pc, #200]	; (802446c <_printf_i+0x21c>)
 80243a4:	9103      	str	r1, [sp, #12]
 80243a6:	0021      	movs	r1, r4
 80243a8:	3145      	adds	r1, #69	; 0x45
 80243aa:	700a      	strb	r2, [r1, #0]
 80243ac:	6819      	ldr	r1, [r3, #0]
 80243ae:	6822      	ldr	r2, [r4, #0]
 80243b0:	c920      	ldmia	r1!, {r5}
 80243b2:	0610      	lsls	r0, r2, #24
 80243b4:	d402      	bmi.n	80243bc <_printf_i+0x16c>
 80243b6:	0650      	lsls	r0, r2, #25
 80243b8:	d500      	bpl.n	80243bc <_printf_i+0x16c>
 80243ba:	b2ad      	uxth	r5, r5
 80243bc:	6019      	str	r1, [r3, #0]
 80243be:	07d3      	lsls	r3, r2, #31
 80243c0:	d502      	bpl.n	80243c8 <_printf_i+0x178>
 80243c2:	2320      	movs	r3, #32
 80243c4:	4313      	orrs	r3, r2
 80243c6:	6023      	str	r3, [r4, #0]
 80243c8:	2710      	movs	r7, #16
 80243ca:	2d00      	cmp	r5, #0
 80243cc:	d1a9      	bne.n	8024322 <_printf_i+0xd2>
 80243ce:	2220      	movs	r2, #32
 80243d0:	6823      	ldr	r3, [r4, #0]
 80243d2:	4393      	bics	r3, r2
 80243d4:	6023      	str	r3, [r4, #0]
 80243d6:	e7a4      	b.n	8024322 <_printf_i+0xd2>
 80243d8:	681a      	ldr	r2, [r3, #0]
 80243da:	680d      	ldr	r5, [r1, #0]
 80243dc:	1d10      	adds	r0, r2, #4
 80243de:	6949      	ldr	r1, [r1, #20]
 80243e0:	6018      	str	r0, [r3, #0]
 80243e2:	6813      	ldr	r3, [r2, #0]
 80243e4:	062e      	lsls	r6, r5, #24
 80243e6:	d501      	bpl.n	80243ec <_printf_i+0x19c>
 80243e8:	6019      	str	r1, [r3, #0]
 80243ea:	e002      	b.n	80243f2 <_printf_i+0x1a2>
 80243ec:	066d      	lsls	r5, r5, #25
 80243ee:	d5fb      	bpl.n	80243e8 <_printf_i+0x198>
 80243f0:	8019      	strh	r1, [r3, #0]
 80243f2:	2300      	movs	r3, #0
 80243f4:	9e04      	ldr	r6, [sp, #16]
 80243f6:	6123      	str	r3, [r4, #16]
 80243f8:	e7c0      	b.n	802437c <_printf_i+0x12c>
 80243fa:	681a      	ldr	r2, [r3, #0]
 80243fc:	1d11      	adds	r1, r2, #4
 80243fe:	6019      	str	r1, [r3, #0]
 8024400:	6816      	ldr	r6, [r2, #0]
 8024402:	2100      	movs	r1, #0
 8024404:	0030      	movs	r0, r6
 8024406:	6862      	ldr	r2, [r4, #4]
 8024408:	f000 f9f8 	bl	80247fc <memchr>
 802440c:	2800      	cmp	r0, #0
 802440e:	d001      	beq.n	8024414 <_printf_i+0x1c4>
 8024410:	1b80      	subs	r0, r0, r6
 8024412:	6060      	str	r0, [r4, #4]
 8024414:	6863      	ldr	r3, [r4, #4]
 8024416:	6123      	str	r3, [r4, #16]
 8024418:	2300      	movs	r3, #0
 802441a:	9a04      	ldr	r2, [sp, #16]
 802441c:	7013      	strb	r3, [r2, #0]
 802441e:	e7ad      	b.n	802437c <_printf_i+0x12c>
 8024420:	0032      	movs	r2, r6
 8024422:	6923      	ldr	r3, [r4, #16]
 8024424:	9906      	ldr	r1, [sp, #24]
 8024426:	9805      	ldr	r0, [sp, #20]
 8024428:	9d07      	ldr	r5, [sp, #28]
 802442a:	47a8      	blx	r5
 802442c:	3001      	adds	r0, #1
 802442e:	d0af      	beq.n	8024390 <_printf_i+0x140>
 8024430:	6823      	ldr	r3, [r4, #0]
 8024432:	079b      	lsls	r3, r3, #30
 8024434:	d415      	bmi.n	8024462 <_printf_i+0x212>
 8024436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024438:	68e0      	ldr	r0, [r4, #12]
 802443a:	4298      	cmp	r0, r3
 802443c:	daaa      	bge.n	8024394 <_printf_i+0x144>
 802443e:	0018      	movs	r0, r3
 8024440:	e7a8      	b.n	8024394 <_printf_i+0x144>
 8024442:	0022      	movs	r2, r4
 8024444:	2301      	movs	r3, #1
 8024446:	9906      	ldr	r1, [sp, #24]
 8024448:	9805      	ldr	r0, [sp, #20]
 802444a:	9e07      	ldr	r6, [sp, #28]
 802444c:	3219      	adds	r2, #25
 802444e:	47b0      	blx	r6
 8024450:	3001      	adds	r0, #1
 8024452:	d09d      	beq.n	8024390 <_printf_i+0x140>
 8024454:	3501      	adds	r5, #1
 8024456:	68e3      	ldr	r3, [r4, #12]
 8024458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802445a:	1a9b      	subs	r3, r3, r2
 802445c:	42ab      	cmp	r3, r5
 802445e:	dcf0      	bgt.n	8024442 <_printf_i+0x1f2>
 8024460:	e7e9      	b.n	8024436 <_printf_i+0x1e6>
 8024462:	2500      	movs	r5, #0
 8024464:	e7f7      	b.n	8024456 <_printf_i+0x206>
 8024466:	46c0      	nop			; (mov r8, r8)
 8024468:	08032377 	.word	0x08032377
 802446c:	08032388 	.word	0x08032388

08024470 <__sflush_r>:
 8024470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024472:	898b      	ldrh	r3, [r1, #12]
 8024474:	0005      	movs	r5, r0
 8024476:	000c      	movs	r4, r1
 8024478:	071a      	lsls	r2, r3, #28
 802447a:	d45c      	bmi.n	8024536 <__sflush_r+0xc6>
 802447c:	684a      	ldr	r2, [r1, #4]
 802447e:	2a00      	cmp	r2, #0
 8024480:	dc04      	bgt.n	802448c <__sflush_r+0x1c>
 8024482:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8024484:	2a00      	cmp	r2, #0
 8024486:	dc01      	bgt.n	802448c <__sflush_r+0x1c>
 8024488:	2000      	movs	r0, #0
 802448a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802448c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 802448e:	2f00      	cmp	r7, #0
 8024490:	d0fa      	beq.n	8024488 <__sflush_r+0x18>
 8024492:	2200      	movs	r2, #0
 8024494:	2080      	movs	r0, #128	; 0x80
 8024496:	682e      	ldr	r6, [r5, #0]
 8024498:	602a      	str	r2, [r5, #0]
 802449a:	001a      	movs	r2, r3
 802449c:	0140      	lsls	r0, r0, #5
 802449e:	6a21      	ldr	r1, [r4, #32]
 80244a0:	4002      	ands	r2, r0
 80244a2:	4203      	tst	r3, r0
 80244a4:	d034      	beq.n	8024510 <__sflush_r+0xa0>
 80244a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80244a8:	89a3      	ldrh	r3, [r4, #12]
 80244aa:	075b      	lsls	r3, r3, #29
 80244ac:	d506      	bpl.n	80244bc <__sflush_r+0x4c>
 80244ae:	6863      	ldr	r3, [r4, #4]
 80244b0:	1ac0      	subs	r0, r0, r3
 80244b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80244b4:	2b00      	cmp	r3, #0
 80244b6:	d001      	beq.n	80244bc <__sflush_r+0x4c>
 80244b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80244ba:	1ac0      	subs	r0, r0, r3
 80244bc:	0002      	movs	r2, r0
 80244be:	2300      	movs	r3, #0
 80244c0:	0028      	movs	r0, r5
 80244c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80244c4:	6a21      	ldr	r1, [r4, #32]
 80244c6:	47b8      	blx	r7
 80244c8:	89a2      	ldrh	r2, [r4, #12]
 80244ca:	1c43      	adds	r3, r0, #1
 80244cc:	d106      	bne.n	80244dc <__sflush_r+0x6c>
 80244ce:	6829      	ldr	r1, [r5, #0]
 80244d0:	291d      	cmp	r1, #29
 80244d2:	d82c      	bhi.n	802452e <__sflush_r+0xbe>
 80244d4:	4b2a      	ldr	r3, [pc, #168]	; (8024580 <__sflush_r+0x110>)
 80244d6:	410b      	asrs	r3, r1
 80244d8:	07db      	lsls	r3, r3, #31
 80244da:	d428      	bmi.n	802452e <__sflush_r+0xbe>
 80244dc:	2300      	movs	r3, #0
 80244de:	6063      	str	r3, [r4, #4]
 80244e0:	6923      	ldr	r3, [r4, #16]
 80244e2:	6023      	str	r3, [r4, #0]
 80244e4:	04d2      	lsls	r2, r2, #19
 80244e6:	d505      	bpl.n	80244f4 <__sflush_r+0x84>
 80244e8:	1c43      	adds	r3, r0, #1
 80244ea:	d102      	bne.n	80244f2 <__sflush_r+0x82>
 80244ec:	682b      	ldr	r3, [r5, #0]
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	d100      	bne.n	80244f4 <__sflush_r+0x84>
 80244f2:	6560      	str	r0, [r4, #84]	; 0x54
 80244f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80244f6:	602e      	str	r6, [r5, #0]
 80244f8:	2900      	cmp	r1, #0
 80244fa:	d0c5      	beq.n	8024488 <__sflush_r+0x18>
 80244fc:	0023      	movs	r3, r4
 80244fe:	3344      	adds	r3, #68	; 0x44
 8024500:	4299      	cmp	r1, r3
 8024502:	d002      	beq.n	802450a <__sflush_r+0x9a>
 8024504:	0028      	movs	r0, r5
 8024506:	f7ff fa6f 	bl	80239e8 <_free_r>
 802450a:	2000      	movs	r0, #0
 802450c:	6360      	str	r0, [r4, #52]	; 0x34
 802450e:	e7bc      	b.n	802448a <__sflush_r+0x1a>
 8024510:	2301      	movs	r3, #1
 8024512:	0028      	movs	r0, r5
 8024514:	47b8      	blx	r7
 8024516:	1c43      	adds	r3, r0, #1
 8024518:	d1c6      	bne.n	80244a8 <__sflush_r+0x38>
 802451a:	682b      	ldr	r3, [r5, #0]
 802451c:	2b00      	cmp	r3, #0
 802451e:	d0c3      	beq.n	80244a8 <__sflush_r+0x38>
 8024520:	2b1d      	cmp	r3, #29
 8024522:	d001      	beq.n	8024528 <__sflush_r+0xb8>
 8024524:	2b16      	cmp	r3, #22
 8024526:	d101      	bne.n	802452c <__sflush_r+0xbc>
 8024528:	602e      	str	r6, [r5, #0]
 802452a:	e7ad      	b.n	8024488 <__sflush_r+0x18>
 802452c:	89a2      	ldrh	r2, [r4, #12]
 802452e:	2340      	movs	r3, #64	; 0x40
 8024530:	4313      	orrs	r3, r2
 8024532:	81a3      	strh	r3, [r4, #12]
 8024534:	e7a9      	b.n	802448a <__sflush_r+0x1a>
 8024536:	690e      	ldr	r6, [r1, #16]
 8024538:	2e00      	cmp	r6, #0
 802453a:	d0a5      	beq.n	8024488 <__sflush_r+0x18>
 802453c:	680f      	ldr	r7, [r1, #0]
 802453e:	600e      	str	r6, [r1, #0]
 8024540:	1bba      	subs	r2, r7, r6
 8024542:	9201      	str	r2, [sp, #4]
 8024544:	2200      	movs	r2, #0
 8024546:	079b      	lsls	r3, r3, #30
 8024548:	d100      	bne.n	802454c <__sflush_r+0xdc>
 802454a:	694a      	ldr	r2, [r1, #20]
 802454c:	60a2      	str	r2, [r4, #8]
 802454e:	9b01      	ldr	r3, [sp, #4]
 8024550:	2b00      	cmp	r3, #0
 8024552:	dd99      	ble.n	8024488 <__sflush_r+0x18>
 8024554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024556:	0032      	movs	r2, r6
 8024558:	001f      	movs	r7, r3
 802455a:	0028      	movs	r0, r5
 802455c:	9b01      	ldr	r3, [sp, #4]
 802455e:	6a21      	ldr	r1, [r4, #32]
 8024560:	47b8      	blx	r7
 8024562:	2800      	cmp	r0, #0
 8024564:	dc06      	bgt.n	8024574 <__sflush_r+0x104>
 8024566:	2340      	movs	r3, #64	; 0x40
 8024568:	2001      	movs	r0, #1
 802456a:	89a2      	ldrh	r2, [r4, #12]
 802456c:	4240      	negs	r0, r0
 802456e:	4313      	orrs	r3, r2
 8024570:	81a3      	strh	r3, [r4, #12]
 8024572:	e78a      	b.n	802448a <__sflush_r+0x1a>
 8024574:	9b01      	ldr	r3, [sp, #4]
 8024576:	1836      	adds	r6, r6, r0
 8024578:	1a1b      	subs	r3, r3, r0
 802457a:	9301      	str	r3, [sp, #4]
 802457c:	e7e7      	b.n	802454e <__sflush_r+0xde>
 802457e:	46c0      	nop			; (mov r8, r8)
 8024580:	dfbffffe 	.word	0xdfbffffe

08024584 <_fflush_r>:
 8024584:	690b      	ldr	r3, [r1, #16]
 8024586:	b570      	push	{r4, r5, r6, lr}
 8024588:	0005      	movs	r5, r0
 802458a:	000c      	movs	r4, r1
 802458c:	2b00      	cmp	r3, #0
 802458e:	d102      	bne.n	8024596 <_fflush_r+0x12>
 8024590:	2500      	movs	r5, #0
 8024592:	0028      	movs	r0, r5
 8024594:	bd70      	pop	{r4, r5, r6, pc}
 8024596:	2800      	cmp	r0, #0
 8024598:	d004      	beq.n	80245a4 <_fflush_r+0x20>
 802459a:	6a03      	ldr	r3, [r0, #32]
 802459c:	2b00      	cmp	r3, #0
 802459e:	d101      	bne.n	80245a4 <_fflush_r+0x20>
 80245a0:	f7fe f904 	bl	80227ac <__sinit>
 80245a4:	220c      	movs	r2, #12
 80245a6:	5ea3      	ldrsh	r3, [r4, r2]
 80245a8:	2b00      	cmp	r3, #0
 80245aa:	d0f1      	beq.n	8024590 <_fflush_r+0xc>
 80245ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80245ae:	07d2      	lsls	r2, r2, #31
 80245b0:	d404      	bmi.n	80245bc <_fflush_r+0x38>
 80245b2:	059b      	lsls	r3, r3, #22
 80245b4:	d402      	bmi.n	80245bc <_fflush_r+0x38>
 80245b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80245b8:	f7ff f9cb 	bl	8023952 <__retarget_lock_acquire_recursive>
 80245bc:	0028      	movs	r0, r5
 80245be:	0021      	movs	r1, r4
 80245c0:	f7ff ff56 	bl	8024470 <__sflush_r>
 80245c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80245c6:	0005      	movs	r5, r0
 80245c8:	07db      	lsls	r3, r3, #31
 80245ca:	d4e2      	bmi.n	8024592 <_fflush_r+0xe>
 80245cc:	89a3      	ldrh	r3, [r4, #12]
 80245ce:	059b      	lsls	r3, r3, #22
 80245d0:	d4df      	bmi.n	8024592 <_fflush_r+0xe>
 80245d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80245d4:	f7ff f9bf 	bl	8023956 <__retarget_lock_release_recursive>
 80245d8:	e7db      	b.n	8024592 <_fflush_r+0xe>
	...

080245dc <fiprintf>:
 80245dc:	b40e      	push	{r1, r2, r3}
 80245de:	b517      	push	{r0, r1, r2, r4, lr}
 80245e0:	4c05      	ldr	r4, [pc, #20]	; (80245f8 <fiprintf+0x1c>)
 80245e2:	ab05      	add	r3, sp, #20
 80245e4:	cb04      	ldmia	r3!, {r2}
 80245e6:	0001      	movs	r1, r0
 80245e8:	6820      	ldr	r0, [r4, #0]
 80245ea:	9301      	str	r3, [sp, #4]
 80245ec:	f7ff fca4 	bl	8023f38 <_vfiprintf_r>
 80245f0:	bc1e      	pop	{r1, r2, r3, r4}
 80245f2:	bc08      	pop	{r3}
 80245f4:	b003      	add	sp, #12
 80245f6:	4718      	bx	r3
 80245f8:	20005128 	.word	0x20005128

080245fc <__swhatbuf_r>:
 80245fc:	b570      	push	{r4, r5, r6, lr}
 80245fe:	000e      	movs	r6, r1
 8024600:	001d      	movs	r5, r3
 8024602:	230e      	movs	r3, #14
 8024604:	5ec9      	ldrsh	r1, [r1, r3]
 8024606:	0014      	movs	r4, r2
 8024608:	b096      	sub	sp, #88	; 0x58
 802460a:	2900      	cmp	r1, #0
 802460c:	da0c      	bge.n	8024628 <__swhatbuf_r+0x2c>
 802460e:	89b2      	ldrh	r2, [r6, #12]
 8024610:	2380      	movs	r3, #128	; 0x80
 8024612:	0011      	movs	r1, r2
 8024614:	4019      	ands	r1, r3
 8024616:	421a      	tst	r2, r3
 8024618:	d013      	beq.n	8024642 <__swhatbuf_r+0x46>
 802461a:	2100      	movs	r1, #0
 802461c:	3b40      	subs	r3, #64	; 0x40
 802461e:	2000      	movs	r0, #0
 8024620:	6029      	str	r1, [r5, #0]
 8024622:	6023      	str	r3, [r4, #0]
 8024624:	b016      	add	sp, #88	; 0x58
 8024626:	bd70      	pop	{r4, r5, r6, pc}
 8024628:	466a      	mov	r2, sp
 802462a:	f000 f8c3 	bl	80247b4 <_fstat_r>
 802462e:	2800      	cmp	r0, #0
 8024630:	dbed      	blt.n	802460e <__swhatbuf_r+0x12>
 8024632:	23f0      	movs	r3, #240	; 0xf0
 8024634:	9901      	ldr	r1, [sp, #4]
 8024636:	021b      	lsls	r3, r3, #8
 8024638:	4019      	ands	r1, r3
 802463a:	4b03      	ldr	r3, [pc, #12]	; (8024648 <__swhatbuf_r+0x4c>)
 802463c:	18c9      	adds	r1, r1, r3
 802463e:	424b      	negs	r3, r1
 8024640:	4159      	adcs	r1, r3
 8024642:	2380      	movs	r3, #128	; 0x80
 8024644:	00db      	lsls	r3, r3, #3
 8024646:	e7ea      	b.n	802461e <__swhatbuf_r+0x22>
 8024648:	ffffe000 	.word	0xffffe000

0802464c <__smakebuf_r>:
 802464c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802464e:	2602      	movs	r6, #2
 8024650:	898b      	ldrh	r3, [r1, #12]
 8024652:	0005      	movs	r5, r0
 8024654:	000c      	movs	r4, r1
 8024656:	4233      	tst	r3, r6
 8024658:	d006      	beq.n	8024668 <__smakebuf_r+0x1c>
 802465a:	0023      	movs	r3, r4
 802465c:	3347      	adds	r3, #71	; 0x47
 802465e:	6023      	str	r3, [r4, #0]
 8024660:	6123      	str	r3, [r4, #16]
 8024662:	2301      	movs	r3, #1
 8024664:	6163      	str	r3, [r4, #20]
 8024666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8024668:	466a      	mov	r2, sp
 802466a:	ab01      	add	r3, sp, #4
 802466c:	f7ff ffc6 	bl	80245fc <__swhatbuf_r>
 8024670:	9900      	ldr	r1, [sp, #0]
 8024672:	0007      	movs	r7, r0
 8024674:	0028      	movs	r0, r5
 8024676:	f7fd fef3 	bl	8022460 <_malloc_r>
 802467a:	2800      	cmp	r0, #0
 802467c:	d108      	bne.n	8024690 <__smakebuf_r+0x44>
 802467e:	220c      	movs	r2, #12
 8024680:	5ea3      	ldrsh	r3, [r4, r2]
 8024682:	059a      	lsls	r2, r3, #22
 8024684:	d4ef      	bmi.n	8024666 <__smakebuf_r+0x1a>
 8024686:	2203      	movs	r2, #3
 8024688:	4393      	bics	r3, r2
 802468a:	431e      	orrs	r6, r3
 802468c:	81a6      	strh	r6, [r4, #12]
 802468e:	e7e4      	b.n	802465a <__smakebuf_r+0xe>
 8024690:	2380      	movs	r3, #128	; 0x80
 8024692:	89a2      	ldrh	r2, [r4, #12]
 8024694:	6020      	str	r0, [r4, #0]
 8024696:	4313      	orrs	r3, r2
 8024698:	81a3      	strh	r3, [r4, #12]
 802469a:	9b00      	ldr	r3, [sp, #0]
 802469c:	6120      	str	r0, [r4, #16]
 802469e:	6163      	str	r3, [r4, #20]
 80246a0:	9b01      	ldr	r3, [sp, #4]
 80246a2:	2b00      	cmp	r3, #0
 80246a4:	d00c      	beq.n	80246c0 <__smakebuf_r+0x74>
 80246a6:	0028      	movs	r0, r5
 80246a8:	230e      	movs	r3, #14
 80246aa:	5ee1      	ldrsh	r1, [r4, r3]
 80246ac:	f000 f894 	bl	80247d8 <_isatty_r>
 80246b0:	2800      	cmp	r0, #0
 80246b2:	d005      	beq.n	80246c0 <__smakebuf_r+0x74>
 80246b4:	2303      	movs	r3, #3
 80246b6:	89a2      	ldrh	r2, [r4, #12]
 80246b8:	439a      	bics	r2, r3
 80246ba:	3b02      	subs	r3, #2
 80246bc:	4313      	orrs	r3, r2
 80246be:	81a3      	strh	r3, [r4, #12]
 80246c0:	89a3      	ldrh	r3, [r4, #12]
 80246c2:	433b      	orrs	r3, r7
 80246c4:	81a3      	strh	r3, [r4, #12]
 80246c6:	e7ce      	b.n	8024666 <__smakebuf_r+0x1a>

080246c8 <_putc_r>:
 80246c8:	b570      	push	{r4, r5, r6, lr}
 80246ca:	0006      	movs	r6, r0
 80246cc:	000d      	movs	r5, r1
 80246ce:	0014      	movs	r4, r2
 80246d0:	2800      	cmp	r0, #0
 80246d2:	d004      	beq.n	80246de <_putc_r+0x16>
 80246d4:	6a03      	ldr	r3, [r0, #32]
 80246d6:	2b00      	cmp	r3, #0
 80246d8:	d101      	bne.n	80246de <_putc_r+0x16>
 80246da:	f7fe f867 	bl	80227ac <__sinit>
 80246de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80246e0:	07db      	lsls	r3, r3, #31
 80246e2:	d405      	bmi.n	80246f0 <_putc_r+0x28>
 80246e4:	89a3      	ldrh	r3, [r4, #12]
 80246e6:	059b      	lsls	r3, r3, #22
 80246e8:	d402      	bmi.n	80246f0 <_putc_r+0x28>
 80246ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80246ec:	f7ff f931 	bl	8023952 <__retarget_lock_acquire_recursive>
 80246f0:	68a3      	ldr	r3, [r4, #8]
 80246f2:	3b01      	subs	r3, #1
 80246f4:	60a3      	str	r3, [r4, #8]
 80246f6:	2b00      	cmp	r3, #0
 80246f8:	da05      	bge.n	8024706 <_putc_r+0x3e>
 80246fa:	69a2      	ldr	r2, [r4, #24]
 80246fc:	4293      	cmp	r3, r2
 80246fe:	db12      	blt.n	8024726 <_putc_r+0x5e>
 8024700:	b2eb      	uxtb	r3, r5
 8024702:	2b0a      	cmp	r3, #10
 8024704:	d00f      	beq.n	8024726 <_putc_r+0x5e>
 8024706:	6823      	ldr	r3, [r4, #0]
 8024708:	1c5a      	adds	r2, r3, #1
 802470a:	6022      	str	r2, [r4, #0]
 802470c:	701d      	strb	r5, [r3, #0]
 802470e:	b2ed      	uxtb	r5, r5
 8024710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024712:	07db      	lsls	r3, r3, #31
 8024714:	d405      	bmi.n	8024722 <_putc_r+0x5a>
 8024716:	89a3      	ldrh	r3, [r4, #12]
 8024718:	059b      	lsls	r3, r3, #22
 802471a:	d402      	bmi.n	8024722 <_putc_r+0x5a>
 802471c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802471e:	f7ff f91a 	bl	8023956 <__retarget_lock_release_recursive>
 8024722:	0028      	movs	r0, r5
 8024724:	bd70      	pop	{r4, r5, r6, pc}
 8024726:	0029      	movs	r1, r5
 8024728:	0022      	movs	r2, r4
 802472a:	0030      	movs	r0, r6
 802472c:	f7fe f98e 	bl	8022a4c <__swbuf_r>
 8024730:	0005      	movs	r5, r0
 8024732:	e7ed      	b.n	8024710 <_putc_r+0x48>

08024734 <siscanf>:
 8024734:	b40e      	push	{r1, r2, r3}
 8024736:	b530      	push	{r4, r5, lr}
 8024738:	2381      	movs	r3, #129	; 0x81
 802473a:	b09c      	sub	sp, #112	; 0x70
 802473c:	466a      	mov	r2, sp
 802473e:	ac1f      	add	r4, sp, #124	; 0x7c
 8024740:	009b      	lsls	r3, r3, #2
 8024742:	cc20      	ldmia	r4!, {r5}
 8024744:	8293      	strh	r3, [r2, #20]
 8024746:	9002      	str	r0, [sp, #8]
 8024748:	9006      	str	r0, [sp, #24]
 802474a:	f7dd fce3 	bl	8002114 <strlen>
 802474e:	4b0b      	ldr	r3, [pc, #44]	; (802477c <siscanf+0x48>)
 8024750:	466a      	mov	r2, sp
 8024752:	930b      	str	r3, [sp, #44]	; 0x2c
 8024754:	2300      	movs	r3, #0
 8024756:	9003      	str	r0, [sp, #12]
 8024758:	9007      	str	r0, [sp, #28]
 802475a:	4809      	ldr	r0, [pc, #36]	; (8024780 <siscanf+0x4c>)
 802475c:	930f      	str	r3, [sp, #60]	; 0x3c
 802475e:	9314      	str	r3, [sp, #80]	; 0x50
 8024760:	3b01      	subs	r3, #1
 8024762:	82d3      	strh	r3, [r2, #22]
 8024764:	a902      	add	r1, sp, #8
 8024766:	0023      	movs	r3, r4
 8024768:	002a      	movs	r2, r5
 802476a:	6800      	ldr	r0, [r0, #0]
 802476c:	9401      	str	r4, [sp, #4]
 802476e:	f000 f8f1 	bl	8024954 <__ssvfiscanf_r>
 8024772:	b01c      	add	sp, #112	; 0x70
 8024774:	bc30      	pop	{r4, r5}
 8024776:	bc08      	pop	{r3}
 8024778:	b003      	add	sp, #12
 802477a:	4718      	bx	r3
 802477c:	080229d9 	.word	0x080229d9
 8024780:	20005128 	.word	0x20005128

08024784 <memmove>:
 8024784:	b510      	push	{r4, lr}
 8024786:	4288      	cmp	r0, r1
 8024788:	d902      	bls.n	8024790 <memmove+0xc>
 802478a:	188b      	adds	r3, r1, r2
 802478c:	4298      	cmp	r0, r3
 802478e:	d303      	bcc.n	8024798 <memmove+0x14>
 8024790:	2300      	movs	r3, #0
 8024792:	e007      	b.n	80247a4 <memmove+0x20>
 8024794:	5c8b      	ldrb	r3, [r1, r2]
 8024796:	5483      	strb	r3, [r0, r2]
 8024798:	3a01      	subs	r2, #1
 802479a:	d2fb      	bcs.n	8024794 <memmove+0x10>
 802479c:	bd10      	pop	{r4, pc}
 802479e:	5ccc      	ldrb	r4, [r1, r3]
 80247a0:	54c4      	strb	r4, [r0, r3]
 80247a2:	3301      	adds	r3, #1
 80247a4:	429a      	cmp	r2, r3
 80247a6:	d1fa      	bne.n	802479e <memmove+0x1a>
 80247a8:	e7f8      	b.n	802479c <memmove+0x18>
	...

080247ac <__gettzinfo>:
 80247ac:	4800      	ldr	r0, [pc, #0]	; (80247b0 <__gettzinfo+0x4>)
 80247ae:	4770      	bx	lr
 80247b0:	20005130 	.word	0x20005130

080247b4 <_fstat_r>:
 80247b4:	2300      	movs	r3, #0
 80247b6:	b570      	push	{r4, r5, r6, lr}
 80247b8:	4d06      	ldr	r5, [pc, #24]	; (80247d4 <_fstat_r+0x20>)
 80247ba:	0004      	movs	r4, r0
 80247bc:	0008      	movs	r0, r1
 80247be:	0011      	movs	r1, r2
 80247c0:	602b      	str	r3, [r5, #0]
 80247c2:	f7e8 fde2 	bl	800d38a <_fstat>
 80247c6:	1c43      	adds	r3, r0, #1
 80247c8:	d103      	bne.n	80247d2 <_fstat_r+0x1e>
 80247ca:	682b      	ldr	r3, [r5, #0]
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d000      	beq.n	80247d2 <_fstat_r+0x1e>
 80247d0:	6023      	str	r3, [r4, #0]
 80247d2:	bd70      	pop	{r4, r5, r6, pc}
 80247d4:	2001c378 	.word	0x2001c378

080247d8 <_isatty_r>:
 80247d8:	2300      	movs	r3, #0
 80247da:	b570      	push	{r4, r5, r6, lr}
 80247dc:	4d06      	ldr	r5, [pc, #24]	; (80247f8 <_isatty_r+0x20>)
 80247de:	0004      	movs	r4, r0
 80247e0:	0008      	movs	r0, r1
 80247e2:	602b      	str	r3, [r5, #0]
 80247e4:	f7e8 fddf 	bl	800d3a6 <_isatty>
 80247e8:	1c43      	adds	r3, r0, #1
 80247ea:	d103      	bne.n	80247f4 <_isatty_r+0x1c>
 80247ec:	682b      	ldr	r3, [r5, #0]
 80247ee:	2b00      	cmp	r3, #0
 80247f0:	d000      	beq.n	80247f4 <_isatty_r+0x1c>
 80247f2:	6023      	str	r3, [r4, #0]
 80247f4:	bd70      	pop	{r4, r5, r6, pc}
 80247f6:	46c0      	nop			; (mov r8, r8)
 80247f8:	2001c378 	.word	0x2001c378

080247fc <memchr>:
 80247fc:	b2c9      	uxtb	r1, r1
 80247fe:	1882      	adds	r2, r0, r2
 8024800:	4290      	cmp	r0, r2
 8024802:	d101      	bne.n	8024808 <memchr+0xc>
 8024804:	2000      	movs	r0, #0
 8024806:	4770      	bx	lr
 8024808:	7803      	ldrb	r3, [r0, #0]
 802480a:	428b      	cmp	r3, r1
 802480c:	d0fb      	beq.n	8024806 <memchr+0xa>
 802480e:	3001      	adds	r0, #1
 8024810:	e7f6      	b.n	8024800 <memchr+0x4>

08024812 <abort>:
 8024812:	2006      	movs	r0, #6
 8024814:	b510      	push	{r4, lr}
 8024816:	f000 fc0d 	bl	8025034 <raise>
 802481a:	2001      	movs	r0, #1
 802481c:	f7e8 fd66 	bl	800d2ec <_exit>

08024820 <__env_lock>:
 8024820:	b510      	push	{r4, lr}
 8024822:	4802      	ldr	r0, [pc, #8]	; (802482c <__env_lock+0xc>)
 8024824:	f7ff f895 	bl	8023952 <__retarget_lock_acquire_recursive>
 8024828:	bd10      	pop	{r4, pc}
 802482a:	46c0      	nop			; (mov r8, r8)
 802482c:	2001c37c 	.word	0x2001c37c

08024830 <__env_unlock>:
 8024830:	b510      	push	{r4, lr}
 8024832:	4802      	ldr	r0, [pc, #8]	; (802483c <__env_unlock+0xc>)
 8024834:	f7ff f88f 	bl	8023956 <__retarget_lock_release_recursive>
 8024838:	bd10      	pop	{r4, pc}
 802483a:	46c0      	nop			; (mov r8, r8)
 802483c:	2001c37c 	.word	0x2001c37c

08024840 <_realloc_r>:
 8024840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024842:	0007      	movs	r7, r0
 8024844:	000e      	movs	r6, r1
 8024846:	0014      	movs	r4, r2
 8024848:	2900      	cmp	r1, #0
 802484a:	d105      	bne.n	8024858 <_realloc_r+0x18>
 802484c:	0011      	movs	r1, r2
 802484e:	f7fd fe07 	bl	8022460 <_malloc_r>
 8024852:	0005      	movs	r5, r0
 8024854:	0028      	movs	r0, r5
 8024856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024858:	2a00      	cmp	r2, #0
 802485a:	d103      	bne.n	8024864 <_realloc_r+0x24>
 802485c:	f7ff f8c4 	bl	80239e8 <_free_r>
 8024860:	0025      	movs	r5, r4
 8024862:	e7f7      	b.n	8024854 <_realloc_r+0x14>
 8024864:	f000 fc06 	bl	8025074 <_malloc_usable_size_r>
 8024868:	9001      	str	r0, [sp, #4]
 802486a:	4284      	cmp	r4, r0
 802486c:	d803      	bhi.n	8024876 <_realloc_r+0x36>
 802486e:	0035      	movs	r5, r6
 8024870:	0843      	lsrs	r3, r0, #1
 8024872:	42a3      	cmp	r3, r4
 8024874:	d3ee      	bcc.n	8024854 <_realloc_r+0x14>
 8024876:	0021      	movs	r1, r4
 8024878:	0038      	movs	r0, r7
 802487a:	f7fd fdf1 	bl	8022460 <_malloc_r>
 802487e:	1e05      	subs	r5, r0, #0
 8024880:	d0e8      	beq.n	8024854 <_realloc_r+0x14>
 8024882:	9b01      	ldr	r3, [sp, #4]
 8024884:	0022      	movs	r2, r4
 8024886:	429c      	cmp	r4, r3
 8024888:	d900      	bls.n	802488c <_realloc_r+0x4c>
 802488a:	001a      	movs	r2, r3
 802488c:	0031      	movs	r1, r6
 802488e:	0028      	movs	r0, r5
 8024890:	f7ff f86a 	bl	8023968 <memcpy>
 8024894:	0031      	movs	r1, r6
 8024896:	0038      	movs	r0, r7
 8024898:	f7ff f8a6 	bl	80239e8 <_free_r>
 802489c:	e7da      	b.n	8024854 <_realloc_r+0x14>

0802489e <_sungetc_r>:
 802489e:	b570      	push	{r4, r5, r6, lr}
 80248a0:	0014      	movs	r4, r2
 80248a2:	1c4b      	adds	r3, r1, #1
 80248a4:	d103      	bne.n	80248ae <_sungetc_r+0x10>
 80248a6:	2501      	movs	r5, #1
 80248a8:	426d      	negs	r5, r5
 80248aa:	0028      	movs	r0, r5
 80248ac:	bd70      	pop	{r4, r5, r6, pc}
 80248ae:	8993      	ldrh	r3, [r2, #12]
 80248b0:	2220      	movs	r2, #32
 80248b2:	4393      	bics	r3, r2
 80248b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80248b6:	81a3      	strh	r3, [r4, #12]
 80248b8:	b2ce      	uxtb	r6, r1
 80248ba:	6863      	ldr	r3, [r4, #4]
 80248bc:	b2cd      	uxtb	r5, r1
 80248be:	2a00      	cmp	r2, #0
 80248c0:	d010      	beq.n	80248e4 <_sungetc_r+0x46>
 80248c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80248c4:	429a      	cmp	r2, r3
 80248c6:	dd07      	ble.n	80248d8 <_sungetc_r+0x3a>
 80248c8:	6823      	ldr	r3, [r4, #0]
 80248ca:	3b01      	subs	r3, #1
 80248cc:	6023      	str	r3, [r4, #0]
 80248ce:	701e      	strb	r6, [r3, #0]
 80248d0:	6863      	ldr	r3, [r4, #4]
 80248d2:	3301      	adds	r3, #1
 80248d4:	6063      	str	r3, [r4, #4]
 80248d6:	e7e8      	b.n	80248aa <_sungetc_r+0xc>
 80248d8:	0021      	movs	r1, r4
 80248da:	f000 fb43 	bl	8024f64 <__submore>
 80248de:	2800      	cmp	r0, #0
 80248e0:	d0f2      	beq.n	80248c8 <_sungetc_r+0x2a>
 80248e2:	e7e0      	b.n	80248a6 <_sungetc_r+0x8>
 80248e4:	6921      	ldr	r1, [r4, #16]
 80248e6:	6822      	ldr	r2, [r4, #0]
 80248e8:	2900      	cmp	r1, #0
 80248ea:	d007      	beq.n	80248fc <_sungetc_r+0x5e>
 80248ec:	4291      	cmp	r1, r2
 80248ee:	d205      	bcs.n	80248fc <_sungetc_r+0x5e>
 80248f0:	1e51      	subs	r1, r2, #1
 80248f2:	7808      	ldrb	r0, [r1, #0]
 80248f4:	42a8      	cmp	r0, r5
 80248f6:	d101      	bne.n	80248fc <_sungetc_r+0x5e>
 80248f8:	6021      	str	r1, [r4, #0]
 80248fa:	e7ea      	b.n	80248d2 <_sungetc_r+0x34>
 80248fc:	6423      	str	r3, [r4, #64]	; 0x40
 80248fe:	0023      	movs	r3, r4
 8024900:	3344      	adds	r3, #68	; 0x44
 8024902:	6363      	str	r3, [r4, #52]	; 0x34
 8024904:	2303      	movs	r3, #3
 8024906:	63a3      	str	r3, [r4, #56]	; 0x38
 8024908:	0023      	movs	r3, r4
 802490a:	3346      	adds	r3, #70	; 0x46
 802490c:	63e2      	str	r2, [r4, #60]	; 0x3c
 802490e:	701e      	strb	r6, [r3, #0]
 8024910:	6023      	str	r3, [r4, #0]
 8024912:	2301      	movs	r3, #1
 8024914:	e7de      	b.n	80248d4 <_sungetc_r+0x36>

08024916 <__ssrefill_r>:
 8024916:	b510      	push	{r4, lr}
 8024918:	000c      	movs	r4, r1
 802491a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802491c:	2900      	cmp	r1, #0
 802491e:	d00e      	beq.n	802493e <__ssrefill_r+0x28>
 8024920:	0023      	movs	r3, r4
 8024922:	3344      	adds	r3, #68	; 0x44
 8024924:	4299      	cmp	r1, r3
 8024926:	d001      	beq.n	802492c <__ssrefill_r+0x16>
 8024928:	f7ff f85e 	bl	80239e8 <_free_r>
 802492c:	2000      	movs	r0, #0
 802492e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024930:	6360      	str	r0, [r4, #52]	; 0x34
 8024932:	6063      	str	r3, [r4, #4]
 8024934:	4283      	cmp	r3, r0
 8024936:	d002      	beq.n	802493e <__ssrefill_r+0x28>
 8024938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802493a:	6023      	str	r3, [r4, #0]
 802493c:	bd10      	pop	{r4, pc}
 802493e:	6923      	ldr	r3, [r4, #16]
 8024940:	2001      	movs	r0, #1
 8024942:	6023      	str	r3, [r4, #0]
 8024944:	2300      	movs	r3, #0
 8024946:	89a2      	ldrh	r2, [r4, #12]
 8024948:	6063      	str	r3, [r4, #4]
 802494a:	3320      	adds	r3, #32
 802494c:	4313      	orrs	r3, r2
 802494e:	81a3      	strh	r3, [r4, #12]
 8024950:	4240      	negs	r0, r0
 8024952:	e7f3      	b.n	802493c <__ssrefill_r+0x26>

08024954 <__ssvfiscanf_r>:
 8024954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024956:	4cae      	ldr	r4, [pc, #696]	; (8024c10 <__ssvfiscanf_r+0x2bc>)
 8024958:	0006      	movs	r6, r0
 802495a:	44a5      	add	sp, r4
 802495c:	000c      	movs	r4, r1
 802495e:	2100      	movs	r1, #0
 8024960:	20be      	movs	r0, #190	; 0xbe
 8024962:	9146      	str	r1, [sp, #280]	; 0x118
 8024964:	9147      	str	r1, [sp, #284]	; 0x11c
 8024966:	a903      	add	r1, sp, #12
 8024968:	9148      	str	r1, [sp, #288]	; 0x120
 802496a:	49aa      	ldr	r1, [pc, #680]	; (8024c14 <__ssvfiscanf_r+0x2c0>)
 802496c:	0040      	lsls	r0, r0, #1
 802496e:	ad43      	add	r5, sp, #268	; 0x10c
 8024970:	5029      	str	r1, [r5, r0]
 8024972:	25c0      	movs	r5, #192	; 0xc0
 8024974:	49a8      	ldr	r1, [pc, #672]	; (8024c18 <__ssvfiscanf_r+0x2c4>)
 8024976:	006d      	lsls	r5, r5, #1
 8024978:	a843      	add	r0, sp, #268	; 0x10c
 802497a:	5141      	str	r1, [r0, r5]
 802497c:	9302      	str	r3, [sp, #8]
 802497e:	7815      	ldrb	r5, [r2, #0]
 8024980:	2d00      	cmp	r5, #0
 8024982:	d100      	bne.n	8024986 <__ssvfiscanf_r+0x32>
 8024984:	e141      	b.n	8024c0a <__ssvfiscanf_r+0x2b6>
 8024986:	4ba5      	ldr	r3, [pc, #660]	; (8024c1c <__ssvfiscanf_r+0x2c8>)
 8024988:	2008      	movs	r0, #8
 802498a:	5d59      	ldrb	r1, [r3, r5]
 802498c:	9300      	str	r3, [sp, #0]
 802498e:	2308      	movs	r3, #8
 8024990:	1c57      	adds	r7, r2, #1
 8024992:	400b      	ands	r3, r1
 8024994:	4201      	tst	r1, r0
 8024996:	d01e      	beq.n	80249d6 <__ssvfiscanf_r+0x82>
 8024998:	6863      	ldr	r3, [r4, #4]
 802499a:	2b00      	cmp	r3, #0
 802499c:	dd11      	ble.n	80249c2 <__ssvfiscanf_r+0x6e>
 802499e:	6823      	ldr	r3, [r4, #0]
 80249a0:	9900      	ldr	r1, [sp, #0]
 80249a2:	781a      	ldrb	r2, [r3, #0]
 80249a4:	5c8a      	ldrb	r2, [r1, r2]
 80249a6:	2108      	movs	r1, #8
 80249a8:	420a      	tst	r2, r1
 80249aa:	d101      	bne.n	80249b0 <__ssvfiscanf_r+0x5c>
 80249ac:	003a      	movs	r2, r7
 80249ae:	e7e6      	b.n	802497e <__ssvfiscanf_r+0x2a>
 80249b0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80249b2:	3301      	adds	r3, #1
 80249b4:	3201      	adds	r2, #1
 80249b6:	9247      	str	r2, [sp, #284]	; 0x11c
 80249b8:	6862      	ldr	r2, [r4, #4]
 80249ba:	6023      	str	r3, [r4, #0]
 80249bc:	3a01      	subs	r2, #1
 80249be:	6062      	str	r2, [r4, #4]
 80249c0:	e7ea      	b.n	8024998 <__ssvfiscanf_r+0x44>
 80249c2:	22c0      	movs	r2, #192	; 0xc0
 80249c4:	ab43      	add	r3, sp, #268	; 0x10c
 80249c6:	0052      	lsls	r2, r2, #1
 80249c8:	0021      	movs	r1, r4
 80249ca:	0030      	movs	r0, r6
 80249cc:	589b      	ldr	r3, [r3, r2]
 80249ce:	4798      	blx	r3
 80249d0:	2800      	cmp	r0, #0
 80249d2:	d0e4      	beq.n	802499e <__ssvfiscanf_r+0x4a>
 80249d4:	e7ea      	b.n	80249ac <__ssvfiscanf_r+0x58>
 80249d6:	2d25      	cmp	r5, #37	; 0x25
 80249d8:	d162      	bne.n	8024aa0 <__ssvfiscanf_r+0x14c>
 80249da:	9345      	str	r3, [sp, #276]	; 0x114
 80249dc:	9343      	str	r3, [sp, #268]	; 0x10c
 80249de:	7853      	ldrb	r3, [r2, #1]
 80249e0:	2b2a      	cmp	r3, #42	; 0x2a
 80249e2:	d102      	bne.n	80249ea <__ssvfiscanf_r+0x96>
 80249e4:	3b1a      	subs	r3, #26
 80249e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80249e8:	1c97      	adds	r7, r2, #2
 80249ea:	003d      	movs	r5, r7
 80249ec:	220a      	movs	r2, #10
 80249ee:	7829      	ldrb	r1, [r5, #0]
 80249f0:	1c6b      	adds	r3, r5, #1
 80249f2:	9301      	str	r3, [sp, #4]
 80249f4:	000b      	movs	r3, r1
 80249f6:	3b30      	subs	r3, #48	; 0x30
 80249f8:	2b09      	cmp	r3, #9
 80249fa:	d91e      	bls.n	8024a3a <__ssvfiscanf_r+0xe6>
 80249fc:	4f88      	ldr	r7, [pc, #544]	; (8024c20 <__ssvfiscanf_r+0x2cc>)
 80249fe:	2203      	movs	r2, #3
 8024a00:	0038      	movs	r0, r7
 8024a02:	f7ff fefb 	bl	80247fc <memchr>
 8024a06:	2800      	cmp	r0, #0
 8024a08:	d006      	beq.n	8024a18 <__ssvfiscanf_r+0xc4>
 8024a0a:	2301      	movs	r3, #1
 8024a0c:	1bc0      	subs	r0, r0, r7
 8024a0e:	4083      	lsls	r3, r0
 8024a10:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024a12:	9d01      	ldr	r5, [sp, #4]
 8024a14:	4313      	orrs	r3, r2
 8024a16:	9343      	str	r3, [sp, #268]	; 0x10c
 8024a18:	1c6f      	adds	r7, r5, #1
 8024a1a:	782d      	ldrb	r5, [r5, #0]
 8024a1c:	2d78      	cmp	r5, #120	; 0x78
 8024a1e:	d807      	bhi.n	8024a30 <__ssvfiscanf_r+0xdc>
 8024a20:	2d57      	cmp	r5, #87	; 0x57
 8024a22:	d811      	bhi.n	8024a48 <__ssvfiscanf_r+0xf4>
 8024a24:	2d25      	cmp	r5, #37	; 0x25
 8024a26:	d03b      	beq.n	8024aa0 <__ssvfiscanf_r+0x14c>
 8024a28:	d835      	bhi.n	8024a96 <__ssvfiscanf_r+0x142>
 8024a2a:	2d00      	cmp	r5, #0
 8024a2c:	d100      	bne.n	8024a30 <__ssvfiscanf_r+0xdc>
 8024a2e:	e0e9      	b.n	8024c04 <__ssvfiscanf_r+0x2b0>
 8024a30:	2303      	movs	r3, #3
 8024a32:	9349      	str	r3, [sp, #292]	; 0x124
 8024a34:	3307      	adds	r3, #7
 8024a36:	9344      	str	r3, [sp, #272]	; 0x110
 8024a38:	e06d      	b.n	8024b16 <__ssvfiscanf_r+0x1c2>
 8024a3a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8024a3c:	9d01      	ldr	r5, [sp, #4]
 8024a3e:	4353      	muls	r3, r2
 8024a40:	3b30      	subs	r3, #48	; 0x30
 8024a42:	185b      	adds	r3, r3, r1
 8024a44:	9345      	str	r3, [sp, #276]	; 0x114
 8024a46:	e7d2      	b.n	80249ee <__ssvfiscanf_r+0x9a>
 8024a48:	0028      	movs	r0, r5
 8024a4a:	3858      	subs	r0, #88	; 0x58
 8024a4c:	2820      	cmp	r0, #32
 8024a4e:	d8ef      	bhi.n	8024a30 <__ssvfiscanf_r+0xdc>
 8024a50:	f7dd fb68 	bl	8002124 <__gnu_thumb1_case_shi>
 8024a54:	ffee004d 	.word	0xffee004d
 8024a58:	007fffee 	.word	0x007fffee
 8024a5c:	ffeeffee 	.word	0xffeeffee
 8024a60:	ffeeffee 	.word	0xffeeffee
 8024a64:	ffeeffee 	.word	0xffeeffee
 8024a68:	008affee 	.word	0x008affee
 8024a6c:	0024007d 	.word	0x0024007d
 8024a70:	00240024 	.word	0x00240024
 8024a74:	0059ffee 	.word	0x0059ffee
 8024a78:	ffeeffee 	.word	0xffeeffee
 8024a7c:	ffeeffee 	.word	0xffeeffee
 8024a80:	005d0092 	.word	0x005d0092
 8024a84:	ffee0049 	.word	0xffee0049
 8024a88:	0090ffee 	.word	0x0090ffee
 8024a8c:	007dffee 	.word	0x007dffee
 8024a90:	ffeeffee 	.word	0xffeeffee
 8024a94:	004d      	.short	0x004d
 8024a96:	3d45      	subs	r5, #69	; 0x45
 8024a98:	2d02      	cmp	r5, #2
 8024a9a:	d8c9      	bhi.n	8024a30 <__ssvfiscanf_r+0xdc>
 8024a9c:	2305      	movs	r3, #5
 8024a9e:	e039      	b.n	8024b14 <__ssvfiscanf_r+0x1c0>
 8024aa0:	6863      	ldr	r3, [r4, #4]
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	dd0d      	ble.n	8024ac2 <__ssvfiscanf_r+0x16e>
 8024aa6:	6823      	ldr	r3, [r4, #0]
 8024aa8:	781a      	ldrb	r2, [r3, #0]
 8024aaa:	42aa      	cmp	r2, r5
 8024aac:	d000      	beq.n	8024ab0 <__ssvfiscanf_r+0x15c>
 8024aae:	e0ac      	b.n	8024c0a <__ssvfiscanf_r+0x2b6>
 8024ab0:	3301      	adds	r3, #1
 8024ab2:	6862      	ldr	r2, [r4, #4]
 8024ab4:	6023      	str	r3, [r4, #0]
 8024ab6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8024ab8:	3a01      	subs	r2, #1
 8024aba:	3301      	adds	r3, #1
 8024abc:	6062      	str	r2, [r4, #4]
 8024abe:	9347      	str	r3, [sp, #284]	; 0x11c
 8024ac0:	e774      	b.n	80249ac <__ssvfiscanf_r+0x58>
 8024ac2:	22c0      	movs	r2, #192	; 0xc0
 8024ac4:	ab43      	add	r3, sp, #268	; 0x10c
 8024ac6:	0052      	lsls	r2, r2, #1
 8024ac8:	0021      	movs	r1, r4
 8024aca:	0030      	movs	r0, r6
 8024acc:	589b      	ldr	r3, [r3, r2]
 8024ace:	4798      	blx	r3
 8024ad0:	2800      	cmp	r0, #0
 8024ad2:	d0e8      	beq.n	8024aa6 <__ssvfiscanf_r+0x152>
 8024ad4:	9846      	ldr	r0, [sp, #280]	; 0x118
 8024ad6:	2800      	cmp	r0, #0
 8024ad8:	d000      	beq.n	8024adc <__ssvfiscanf_r+0x188>
 8024ada:	e08f      	b.n	8024bfc <__ssvfiscanf_r+0x2a8>
 8024adc:	3801      	subs	r0, #1
 8024ade:	23a5      	movs	r3, #165	; 0xa5
 8024ae0:	009b      	lsls	r3, r3, #2
 8024ae2:	449d      	add	sp, r3
 8024ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ae6:	2320      	movs	r3, #32
 8024ae8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024aea:	4313      	orrs	r3, r2
 8024aec:	9343      	str	r3, [sp, #268]	; 0x10c
 8024aee:	2380      	movs	r3, #128	; 0x80
 8024af0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024af2:	009b      	lsls	r3, r3, #2
 8024af4:	4313      	orrs	r3, r2
 8024af6:	9343      	str	r3, [sp, #268]	; 0x10c
 8024af8:	2310      	movs	r3, #16
 8024afa:	9344      	str	r3, [sp, #272]	; 0x110
 8024afc:	236e      	movs	r3, #110	; 0x6e
 8024afe:	42ab      	cmp	r3, r5
 8024b00:	419b      	sbcs	r3, r3
 8024b02:	425b      	negs	r3, r3
 8024b04:	e001      	b.n	8024b0a <__ssvfiscanf_r+0x1b6>
 8024b06:	2300      	movs	r3, #0
 8024b08:	9344      	str	r3, [sp, #272]	; 0x110
 8024b0a:	3303      	adds	r3, #3
 8024b0c:	e002      	b.n	8024b14 <__ssvfiscanf_r+0x1c0>
 8024b0e:	2308      	movs	r3, #8
 8024b10:	9344      	str	r3, [sp, #272]	; 0x110
 8024b12:	3b04      	subs	r3, #4
 8024b14:	9349      	str	r3, [sp, #292]	; 0x124
 8024b16:	6863      	ldr	r3, [r4, #4]
 8024b18:	2b00      	cmp	r3, #0
 8024b1a:	dd3c      	ble.n	8024b96 <__ssvfiscanf_r+0x242>
 8024b1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024b1e:	065b      	lsls	r3, r3, #25
 8024b20:	d406      	bmi.n	8024b30 <__ssvfiscanf_r+0x1dc>
 8024b22:	6823      	ldr	r3, [r4, #0]
 8024b24:	9900      	ldr	r1, [sp, #0]
 8024b26:	781a      	ldrb	r2, [r3, #0]
 8024b28:	5c8a      	ldrb	r2, [r1, r2]
 8024b2a:	2108      	movs	r1, #8
 8024b2c:	420a      	tst	r2, r1
 8024b2e:	d13c      	bne.n	8024baa <__ssvfiscanf_r+0x256>
 8024b30:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8024b32:	2b02      	cmp	r3, #2
 8024b34:	dc4e      	bgt.n	8024bd4 <__ssvfiscanf_r+0x280>
 8024b36:	0022      	movs	r2, r4
 8024b38:	0030      	movs	r0, r6
 8024b3a:	ab02      	add	r3, sp, #8
 8024b3c:	a943      	add	r1, sp, #268	; 0x10c
 8024b3e:	f000 f873 	bl	8024c28 <_scanf_chars>
 8024b42:	2801      	cmp	r0, #1
 8024b44:	d061      	beq.n	8024c0a <__ssvfiscanf_r+0x2b6>
 8024b46:	2802      	cmp	r0, #2
 8024b48:	d000      	beq.n	8024b4c <__ssvfiscanf_r+0x1f8>
 8024b4a:	e72f      	b.n	80249ac <__ssvfiscanf_r+0x58>
 8024b4c:	e7c2      	b.n	8024ad4 <__ssvfiscanf_r+0x180>
 8024b4e:	230a      	movs	r3, #10
 8024b50:	e7d3      	b.n	8024afa <__ssvfiscanf_r+0x1a6>
 8024b52:	0039      	movs	r1, r7
 8024b54:	a803      	add	r0, sp, #12
 8024b56:	f000 f9c9 	bl	8024eec <__sccl>
 8024b5a:	2340      	movs	r3, #64	; 0x40
 8024b5c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024b5e:	0007      	movs	r7, r0
 8024b60:	4313      	orrs	r3, r2
 8024b62:	9343      	str	r3, [sp, #268]	; 0x10c
 8024b64:	2301      	movs	r3, #1
 8024b66:	e7d5      	b.n	8024b14 <__ssvfiscanf_r+0x1c0>
 8024b68:	2340      	movs	r3, #64	; 0x40
 8024b6a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024b6c:	4313      	orrs	r3, r2
 8024b6e:	9343      	str	r3, [sp, #268]	; 0x10c
 8024b70:	2300      	movs	r3, #0
 8024b72:	e7cf      	b.n	8024b14 <__ssvfiscanf_r+0x1c0>
 8024b74:	2302      	movs	r3, #2
 8024b76:	e7cd      	b.n	8024b14 <__ssvfiscanf_r+0x1c0>
 8024b78:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024b7a:	06d3      	lsls	r3, r2, #27
 8024b7c:	d500      	bpl.n	8024b80 <__ssvfiscanf_r+0x22c>
 8024b7e:	e715      	b.n	80249ac <__ssvfiscanf_r+0x58>
 8024b80:	9b02      	ldr	r3, [sp, #8]
 8024b82:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8024b84:	1d18      	adds	r0, r3, #4
 8024b86:	9002      	str	r0, [sp, #8]
 8024b88:	681b      	ldr	r3, [r3, #0]
 8024b8a:	07d5      	lsls	r5, r2, #31
 8024b8c:	d501      	bpl.n	8024b92 <__ssvfiscanf_r+0x23e>
 8024b8e:	8019      	strh	r1, [r3, #0]
 8024b90:	e70c      	b.n	80249ac <__ssvfiscanf_r+0x58>
 8024b92:	6019      	str	r1, [r3, #0]
 8024b94:	e70a      	b.n	80249ac <__ssvfiscanf_r+0x58>
 8024b96:	22c0      	movs	r2, #192	; 0xc0
 8024b98:	ab43      	add	r3, sp, #268	; 0x10c
 8024b9a:	0052      	lsls	r2, r2, #1
 8024b9c:	0021      	movs	r1, r4
 8024b9e:	0030      	movs	r0, r6
 8024ba0:	589b      	ldr	r3, [r3, r2]
 8024ba2:	4798      	blx	r3
 8024ba4:	2800      	cmp	r0, #0
 8024ba6:	d0b9      	beq.n	8024b1c <__ssvfiscanf_r+0x1c8>
 8024ba8:	e794      	b.n	8024ad4 <__ssvfiscanf_r+0x180>
 8024baa:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8024bac:	3201      	adds	r2, #1
 8024bae:	9247      	str	r2, [sp, #284]	; 0x11c
 8024bb0:	6862      	ldr	r2, [r4, #4]
 8024bb2:	3a01      	subs	r2, #1
 8024bb4:	6062      	str	r2, [r4, #4]
 8024bb6:	2a00      	cmp	r2, #0
 8024bb8:	dd02      	ble.n	8024bc0 <__ssvfiscanf_r+0x26c>
 8024bba:	3301      	adds	r3, #1
 8024bbc:	6023      	str	r3, [r4, #0]
 8024bbe:	e7b0      	b.n	8024b22 <__ssvfiscanf_r+0x1ce>
 8024bc0:	22c0      	movs	r2, #192	; 0xc0
 8024bc2:	ab43      	add	r3, sp, #268	; 0x10c
 8024bc4:	0052      	lsls	r2, r2, #1
 8024bc6:	0021      	movs	r1, r4
 8024bc8:	0030      	movs	r0, r6
 8024bca:	589b      	ldr	r3, [r3, r2]
 8024bcc:	4798      	blx	r3
 8024bce:	2800      	cmp	r0, #0
 8024bd0:	d0a7      	beq.n	8024b22 <__ssvfiscanf_r+0x1ce>
 8024bd2:	e77f      	b.n	8024ad4 <__ssvfiscanf_r+0x180>
 8024bd4:	2b04      	cmp	r3, #4
 8024bd6:	dc06      	bgt.n	8024be6 <__ssvfiscanf_r+0x292>
 8024bd8:	0022      	movs	r2, r4
 8024bda:	0030      	movs	r0, r6
 8024bdc:	ab02      	add	r3, sp, #8
 8024bde:	a943      	add	r1, sp, #268	; 0x10c
 8024be0:	f000 f880 	bl	8024ce4 <_scanf_i>
 8024be4:	e7ad      	b.n	8024b42 <__ssvfiscanf_r+0x1ee>
 8024be6:	4b0f      	ldr	r3, [pc, #60]	; (8024c24 <__ssvfiscanf_r+0x2d0>)
 8024be8:	2b00      	cmp	r3, #0
 8024bea:	d100      	bne.n	8024bee <__ssvfiscanf_r+0x29a>
 8024bec:	e6de      	b.n	80249ac <__ssvfiscanf_r+0x58>
 8024bee:	0022      	movs	r2, r4
 8024bf0:	0030      	movs	r0, r6
 8024bf2:	ab02      	add	r3, sp, #8
 8024bf4:	a943      	add	r1, sp, #268	; 0x10c
 8024bf6:	e000      	b.n	8024bfa <__ssvfiscanf_r+0x2a6>
 8024bf8:	bf00      	nop
 8024bfa:	e7a2      	b.n	8024b42 <__ssvfiscanf_r+0x1ee>
 8024bfc:	89a3      	ldrh	r3, [r4, #12]
 8024bfe:	065b      	lsls	r3, r3, #25
 8024c00:	d400      	bmi.n	8024c04 <__ssvfiscanf_r+0x2b0>
 8024c02:	e76c      	b.n	8024ade <__ssvfiscanf_r+0x18a>
 8024c04:	2001      	movs	r0, #1
 8024c06:	4240      	negs	r0, r0
 8024c08:	e769      	b.n	8024ade <__ssvfiscanf_r+0x18a>
 8024c0a:	9846      	ldr	r0, [sp, #280]	; 0x118
 8024c0c:	e767      	b.n	8024ade <__ssvfiscanf_r+0x18a>
 8024c0e:	46c0      	nop			; (mov r8, r8)
 8024c10:	fffffd6c 	.word	0xfffffd6c
 8024c14:	0802489f 	.word	0x0802489f
 8024c18:	08024917 	.word	0x08024917
 8024c1c:	08032109 	.word	0x08032109
 8024c20:	0803236c 	.word	0x0803236c
 8024c24:	00000000 	.word	0x00000000

08024c28 <_scanf_chars>:
 8024c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024c2a:	0015      	movs	r5, r2
 8024c2c:	688a      	ldr	r2, [r1, #8]
 8024c2e:	000c      	movs	r4, r1
 8024c30:	9001      	str	r0, [sp, #4]
 8024c32:	2a00      	cmp	r2, #0
 8024c34:	d105      	bne.n	8024c42 <_scanf_chars+0x1a>
 8024c36:	6989      	ldr	r1, [r1, #24]
 8024c38:	3201      	adds	r2, #1
 8024c3a:	2900      	cmp	r1, #0
 8024c3c:	d000      	beq.n	8024c40 <_scanf_chars+0x18>
 8024c3e:	3a02      	subs	r2, #2
 8024c40:	60a2      	str	r2, [r4, #8]
 8024c42:	6822      	ldr	r2, [r4, #0]
 8024c44:	06d2      	lsls	r2, r2, #27
 8024c46:	d403      	bmi.n	8024c50 <_scanf_chars+0x28>
 8024c48:	681a      	ldr	r2, [r3, #0]
 8024c4a:	1d11      	adds	r1, r2, #4
 8024c4c:	6019      	str	r1, [r3, #0]
 8024c4e:	6817      	ldr	r7, [r2, #0]
 8024c50:	2600      	movs	r6, #0
 8024c52:	69a0      	ldr	r0, [r4, #24]
 8024c54:	2800      	cmp	r0, #0
 8024c56:	d013      	beq.n	8024c80 <_scanf_chars+0x58>
 8024c58:	2801      	cmp	r0, #1
 8024c5a:	d108      	bne.n	8024c6e <_scanf_chars+0x46>
 8024c5c:	682b      	ldr	r3, [r5, #0]
 8024c5e:	6962      	ldr	r2, [r4, #20]
 8024c60:	781b      	ldrb	r3, [r3, #0]
 8024c62:	5cd3      	ldrb	r3, [r2, r3]
 8024c64:	2b00      	cmp	r3, #0
 8024c66:	d10b      	bne.n	8024c80 <_scanf_chars+0x58>
 8024c68:	2e00      	cmp	r6, #0
 8024c6a:	d038      	beq.n	8024cde <_scanf_chars+0xb6>
 8024c6c:	e026      	b.n	8024cbc <_scanf_chars+0x94>
 8024c6e:	2802      	cmp	r0, #2
 8024c70:	d124      	bne.n	8024cbc <_scanf_chars+0x94>
 8024c72:	682b      	ldr	r3, [r5, #0]
 8024c74:	4a1a      	ldr	r2, [pc, #104]	; (8024ce0 <_scanf_chars+0xb8>)
 8024c76:	781b      	ldrb	r3, [r3, #0]
 8024c78:	5cd3      	ldrb	r3, [r2, r3]
 8024c7a:	2208      	movs	r2, #8
 8024c7c:	4213      	tst	r3, r2
 8024c7e:	d11d      	bne.n	8024cbc <_scanf_chars+0x94>
 8024c80:	2210      	movs	r2, #16
 8024c82:	6823      	ldr	r3, [r4, #0]
 8024c84:	3601      	adds	r6, #1
 8024c86:	4213      	tst	r3, r2
 8024c88:	d103      	bne.n	8024c92 <_scanf_chars+0x6a>
 8024c8a:	682b      	ldr	r3, [r5, #0]
 8024c8c:	781b      	ldrb	r3, [r3, #0]
 8024c8e:	703b      	strb	r3, [r7, #0]
 8024c90:	3701      	adds	r7, #1
 8024c92:	682a      	ldr	r2, [r5, #0]
 8024c94:	686b      	ldr	r3, [r5, #4]
 8024c96:	3201      	adds	r2, #1
 8024c98:	602a      	str	r2, [r5, #0]
 8024c9a:	68a2      	ldr	r2, [r4, #8]
 8024c9c:	3b01      	subs	r3, #1
 8024c9e:	3a01      	subs	r2, #1
 8024ca0:	606b      	str	r3, [r5, #4]
 8024ca2:	60a2      	str	r2, [r4, #8]
 8024ca4:	2a00      	cmp	r2, #0
 8024ca6:	d009      	beq.n	8024cbc <_scanf_chars+0x94>
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	dcd2      	bgt.n	8024c52 <_scanf_chars+0x2a>
 8024cac:	23c0      	movs	r3, #192	; 0xc0
 8024cae:	005b      	lsls	r3, r3, #1
 8024cb0:	0029      	movs	r1, r5
 8024cb2:	58e3      	ldr	r3, [r4, r3]
 8024cb4:	9801      	ldr	r0, [sp, #4]
 8024cb6:	4798      	blx	r3
 8024cb8:	2800      	cmp	r0, #0
 8024cba:	d0ca      	beq.n	8024c52 <_scanf_chars+0x2a>
 8024cbc:	6822      	ldr	r2, [r4, #0]
 8024cbe:	2310      	movs	r3, #16
 8024cc0:	0011      	movs	r1, r2
 8024cc2:	4019      	ands	r1, r3
 8024cc4:	421a      	tst	r2, r3
 8024cc6:	d106      	bne.n	8024cd6 <_scanf_chars+0xae>
 8024cc8:	68e3      	ldr	r3, [r4, #12]
 8024cca:	3301      	adds	r3, #1
 8024ccc:	60e3      	str	r3, [r4, #12]
 8024cce:	69a3      	ldr	r3, [r4, #24]
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	d000      	beq.n	8024cd6 <_scanf_chars+0xae>
 8024cd4:	7039      	strb	r1, [r7, #0]
 8024cd6:	2000      	movs	r0, #0
 8024cd8:	6923      	ldr	r3, [r4, #16]
 8024cda:	199b      	adds	r3, r3, r6
 8024cdc:	6123      	str	r3, [r4, #16]
 8024cde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024ce0:	08032109 	.word	0x08032109

08024ce4 <_scanf_i>:
 8024ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ce6:	b08b      	sub	sp, #44	; 0x2c
 8024ce8:	9301      	str	r3, [sp, #4]
 8024cea:	4b7a      	ldr	r3, [pc, #488]	; (8024ed4 <_scanf_i+0x1f0>)
 8024cec:	0016      	movs	r6, r2
 8024cee:	9004      	str	r0, [sp, #16]
 8024cf0:	aa07      	add	r2, sp, #28
 8024cf2:	cba1      	ldmia	r3!, {r0, r5, r7}
 8024cf4:	c2a1      	stmia	r2!, {r0, r5, r7}
 8024cf6:	4a78      	ldr	r2, [pc, #480]	; (8024ed8 <_scanf_i+0x1f4>)
 8024cf8:	698b      	ldr	r3, [r1, #24]
 8024cfa:	000c      	movs	r4, r1
 8024cfc:	9205      	str	r2, [sp, #20]
 8024cfe:	2b03      	cmp	r3, #3
 8024d00:	d001      	beq.n	8024d06 <_scanf_i+0x22>
 8024d02:	4b76      	ldr	r3, [pc, #472]	; (8024edc <_scanf_i+0x1f8>)
 8024d04:	9305      	str	r3, [sp, #20]
 8024d06:	22ae      	movs	r2, #174	; 0xae
 8024d08:	2000      	movs	r0, #0
 8024d0a:	68a3      	ldr	r3, [r4, #8]
 8024d0c:	0052      	lsls	r2, r2, #1
 8024d0e:	1e59      	subs	r1, r3, #1
 8024d10:	9003      	str	r0, [sp, #12]
 8024d12:	4291      	cmp	r1, r2
 8024d14:	d905      	bls.n	8024d22 <_scanf_i+0x3e>
 8024d16:	3b5e      	subs	r3, #94	; 0x5e
 8024d18:	3bff      	subs	r3, #255	; 0xff
 8024d1a:	9303      	str	r3, [sp, #12]
 8024d1c:	235e      	movs	r3, #94	; 0x5e
 8024d1e:	33ff      	adds	r3, #255	; 0xff
 8024d20:	60a3      	str	r3, [r4, #8]
 8024d22:	0023      	movs	r3, r4
 8024d24:	331c      	adds	r3, #28
 8024d26:	9300      	str	r3, [sp, #0]
 8024d28:	23d0      	movs	r3, #208	; 0xd0
 8024d2a:	2700      	movs	r7, #0
 8024d2c:	6822      	ldr	r2, [r4, #0]
 8024d2e:	011b      	lsls	r3, r3, #4
 8024d30:	4313      	orrs	r3, r2
 8024d32:	6023      	str	r3, [r4, #0]
 8024d34:	9b00      	ldr	r3, [sp, #0]
 8024d36:	9302      	str	r3, [sp, #8]
 8024d38:	6833      	ldr	r3, [r6, #0]
 8024d3a:	a807      	add	r0, sp, #28
 8024d3c:	7819      	ldrb	r1, [r3, #0]
 8024d3e:	00bb      	lsls	r3, r7, #2
 8024d40:	2202      	movs	r2, #2
 8024d42:	5818      	ldr	r0, [r3, r0]
 8024d44:	f7ff fd5a 	bl	80247fc <memchr>
 8024d48:	2800      	cmp	r0, #0
 8024d4a:	d02a      	beq.n	8024da2 <_scanf_i+0xbe>
 8024d4c:	2f01      	cmp	r7, #1
 8024d4e:	d161      	bne.n	8024e14 <_scanf_i+0x130>
 8024d50:	6863      	ldr	r3, [r4, #4]
 8024d52:	2b00      	cmp	r3, #0
 8024d54:	d106      	bne.n	8024d64 <_scanf_i+0x80>
 8024d56:	3308      	adds	r3, #8
 8024d58:	6822      	ldr	r2, [r4, #0]
 8024d5a:	6063      	str	r3, [r4, #4]
 8024d5c:	33f9      	adds	r3, #249	; 0xf9
 8024d5e:	33ff      	adds	r3, #255	; 0xff
 8024d60:	4313      	orrs	r3, r2
 8024d62:	6023      	str	r3, [r4, #0]
 8024d64:	6823      	ldr	r3, [r4, #0]
 8024d66:	4a5e      	ldr	r2, [pc, #376]	; (8024ee0 <_scanf_i+0x1fc>)
 8024d68:	4013      	ands	r3, r2
 8024d6a:	6023      	str	r3, [r4, #0]
 8024d6c:	68a3      	ldr	r3, [r4, #8]
 8024d6e:	1e5a      	subs	r2, r3, #1
 8024d70:	60a2      	str	r2, [r4, #8]
 8024d72:	2b00      	cmp	r3, #0
 8024d74:	d015      	beq.n	8024da2 <_scanf_i+0xbe>
 8024d76:	6833      	ldr	r3, [r6, #0]
 8024d78:	1c5a      	adds	r2, r3, #1
 8024d7a:	6032      	str	r2, [r6, #0]
 8024d7c:	781b      	ldrb	r3, [r3, #0]
 8024d7e:	9a02      	ldr	r2, [sp, #8]
 8024d80:	7013      	strb	r3, [r2, #0]
 8024d82:	6873      	ldr	r3, [r6, #4]
 8024d84:	1c55      	adds	r5, r2, #1
 8024d86:	3b01      	subs	r3, #1
 8024d88:	6073      	str	r3, [r6, #4]
 8024d8a:	9502      	str	r5, [sp, #8]
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	dc08      	bgt.n	8024da2 <_scanf_i+0xbe>
 8024d90:	23c0      	movs	r3, #192	; 0xc0
 8024d92:	005b      	lsls	r3, r3, #1
 8024d94:	0031      	movs	r1, r6
 8024d96:	58e3      	ldr	r3, [r4, r3]
 8024d98:	9804      	ldr	r0, [sp, #16]
 8024d9a:	4798      	blx	r3
 8024d9c:	2800      	cmp	r0, #0
 8024d9e:	d000      	beq.n	8024da2 <_scanf_i+0xbe>
 8024da0:	e080      	b.n	8024ea4 <_scanf_i+0x1c0>
 8024da2:	3701      	adds	r7, #1
 8024da4:	2f03      	cmp	r7, #3
 8024da6:	d1c7      	bne.n	8024d38 <_scanf_i+0x54>
 8024da8:	6863      	ldr	r3, [r4, #4]
 8024daa:	2b00      	cmp	r3, #0
 8024dac:	d101      	bne.n	8024db2 <_scanf_i+0xce>
 8024dae:	330a      	adds	r3, #10
 8024db0:	6063      	str	r3, [r4, #4]
 8024db2:	2110      	movs	r1, #16
 8024db4:	2700      	movs	r7, #0
 8024db6:	6863      	ldr	r3, [r4, #4]
 8024db8:	6960      	ldr	r0, [r4, #20]
 8024dba:	1ac9      	subs	r1, r1, r3
 8024dbc:	4b49      	ldr	r3, [pc, #292]	; (8024ee4 <_scanf_i+0x200>)
 8024dbe:	18c9      	adds	r1, r1, r3
 8024dc0:	f000 f894 	bl	8024eec <__sccl>
 8024dc4:	9d02      	ldr	r5, [sp, #8]
 8024dc6:	68a3      	ldr	r3, [r4, #8]
 8024dc8:	6820      	ldr	r0, [r4, #0]
 8024dca:	9302      	str	r3, [sp, #8]
 8024dcc:	2b00      	cmp	r3, #0
 8024dce:	d040      	beq.n	8024e52 <_scanf_i+0x16e>
 8024dd0:	6831      	ldr	r1, [r6, #0]
 8024dd2:	6963      	ldr	r3, [r4, #20]
 8024dd4:	780a      	ldrb	r2, [r1, #0]
 8024dd6:	5c9b      	ldrb	r3, [r3, r2]
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	d03a      	beq.n	8024e52 <_scanf_i+0x16e>
 8024ddc:	2a30      	cmp	r2, #48	; 0x30
 8024dde:	d129      	bne.n	8024e34 <_scanf_i+0x150>
 8024de0:	2380      	movs	r3, #128	; 0x80
 8024de2:	011b      	lsls	r3, r3, #4
 8024de4:	4218      	tst	r0, r3
 8024de6:	d025      	beq.n	8024e34 <_scanf_i+0x150>
 8024de8:	9b03      	ldr	r3, [sp, #12]
 8024dea:	3701      	adds	r7, #1
 8024dec:	2b00      	cmp	r3, #0
 8024dee:	d005      	beq.n	8024dfc <_scanf_i+0x118>
 8024df0:	001a      	movs	r2, r3
 8024df2:	9b02      	ldr	r3, [sp, #8]
 8024df4:	3a01      	subs	r2, #1
 8024df6:	3301      	adds	r3, #1
 8024df8:	9203      	str	r2, [sp, #12]
 8024dfa:	60a3      	str	r3, [r4, #8]
 8024dfc:	6873      	ldr	r3, [r6, #4]
 8024dfe:	3b01      	subs	r3, #1
 8024e00:	6073      	str	r3, [r6, #4]
 8024e02:	2b00      	cmp	r3, #0
 8024e04:	dd1d      	ble.n	8024e42 <_scanf_i+0x15e>
 8024e06:	6833      	ldr	r3, [r6, #0]
 8024e08:	3301      	adds	r3, #1
 8024e0a:	6033      	str	r3, [r6, #0]
 8024e0c:	68a3      	ldr	r3, [r4, #8]
 8024e0e:	3b01      	subs	r3, #1
 8024e10:	60a3      	str	r3, [r4, #8]
 8024e12:	e7d8      	b.n	8024dc6 <_scanf_i+0xe2>
 8024e14:	2f02      	cmp	r7, #2
 8024e16:	d1a9      	bne.n	8024d6c <_scanf_i+0x88>
 8024e18:	21c0      	movs	r1, #192	; 0xc0
 8024e1a:	2380      	movs	r3, #128	; 0x80
 8024e1c:	6822      	ldr	r2, [r4, #0]
 8024e1e:	00c9      	lsls	r1, r1, #3
 8024e20:	4011      	ands	r1, r2
 8024e22:	009b      	lsls	r3, r3, #2
 8024e24:	4299      	cmp	r1, r3
 8024e26:	d1bf      	bne.n	8024da8 <_scanf_i+0xc4>
 8024e28:	3bf1      	subs	r3, #241	; 0xf1
 8024e2a:	3bff      	subs	r3, #255	; 0xff
 8024e2c:	6063      	str	r3, [r4, #4]
 8024e2e:	33f0      	adds	r3, #240	; 0xf0
 8024e30:	4313      	orrs	r3, r2
 8024e32:	e79a      	b.n	8024d6a <_scanf_i+0x86>
 8024e34:	4b2c      	ldr	r3, [pc, #176]	; (8024ee8 <_scanf_i+0x204>)
 8024e36:	4003      	ands	r3, r0
 8024e38:	6023      	str	r3, [r4, #0]
 8024e3a:	780b      	ldrb	r3, [r1, #0]
 8024e3c:	702b      	strb	r3, [r5, #0]
 8024e3e:	3501      	adds	r5, #1
 8024e40:	e7dc      	b.n	8024dfc <_scanf_i+0x118>
 8024e42:	23c0      	movs	r3, #192	; 0xc0
 8024e44:	005b      	lsls	r3, r3, #1
 8024e46:	0031      	movs	r1, r6
 8024e48:	58e3      	ldr	r3, [r4, r3]
 8024e4a:	9804      	ldr	r0, [sp, #16]
 8024e4c:	4798      	blx	r3
 8024e4e:	2800      	cmp	r0, #0
 8024e50:	d0dc      	beq.n	8024e0c <_scanf_i+0x128>
 8024e52:	6823      	ldr	r3, [r4, #0]
 8024e54:	05db      	lsls	r3, r3, #23
 8024e56:	d50e      	bpl.n	8024e76 <_scanf_i+0x192>
 8024e58:	9b00      	ldr	r3, [sp, #0]
 8024e5a:	429d      	cmp	r5, r3
 8024e5c:	d907      	bls.n	8024e6e <_scanf_i+0x18a>
 8024e5e:	23be      	movs	r3, #190	; 0xbe
 8024e60:	3d01      	subs	r5, #1
 8024e62:	005b      	lsls	r3, r3, #1
 8024e64:	0032      	movs	r2, r6
 8024e66:	7829      	ldrb	r1, [r5, #0]
 8024e68:	58e3      	ldr	r3, [r4, r3]
 8024e6a:	9804      	ldr	r0, [sp, #16]
 8024e6c:	4798      	blx	r3
 8024e6e:	9b00      	ldr	r3, [sp, #0]
 8024e70:	2001      	movs	r0, #1
 8024e72:	429d      	cmp	r5, r3
 8024e74:	d029      	beq.n	8024eca <_scanf_i+0x1e6>
 8024e76:	6821      	ldr	r1, [r4, #0]
 8024e78:	2310      	movs	r3, #16
 8024e7a:	000a      	movs	r2, r1
 8024e7c:	401a      	ands	r2, r3
 8024e7e:	4219      	tst	r1, r3
 8024e80:	d11c      	bne.n	8024ebc <_scanf_i+0x1d8>
 8024e82:	702a      	strb	r2, [r5, #0]
 8024e84:	6863      	ldr	r3, [r4, #4]
 8024e86:	9900      	ldr	r1, [sp, #0]
 8024e88:	9804      	ldr	r0, [sp, #16]
 8024e8a:	9e05      	ldr	r6, [sp, #20]
 8024e8c:	47b0      	blx	r6
 8024e8e:	9b01      	ldr	r3, [sp, #4]
 8024e90:	6822      	ldr	r2, [r4, #0]
 8024e92:	681b      	ldr	r3, [r3, #0]
 8024e94:	0691      	lsls	r1, r2, #26
 8024e96:	d507      	bpl.n	8024ea8 <_scanf_i+0x1c4>
 8024e98:	9901      	ldr	r1, [sp, #4]
 8024e9a:	1d1a      	adds	r2, r3, #4
 8024e9c:	600a      	str	r2, [r1, #0]
 8024e9e:	681b      	ldr	r3, [r3, #0]
 8024ea0:	6018      	str	r0, [r3, #0]
 8024ea2:	e008      	b.n	8024eb6 <_scanf_i+0x1d2>
 8024ea4:	2700      	movs	r7, #0
 8024ea6:	e7d4      	b.n	8024e52 <_scanf_i+0x16e>
 8024ea8:	1d19      	adds	r1, r3, #4
 8024eaa:	07d6      	lsls	r6, r2, #31
 8024eac:	d50f      	bpl.n	8024ece <_scanf_i+0x1ea>
 8024eae:	9a01      	ldr	r2, [sp, #4]
 8024eb0:	6011      	str	r1, [r2, #0]
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	8018      	strh	r0, [r3, #0]
 8024eb6:	68e3      	ldr	r3, [r4, #12]
 8024eb8:	3301      	adds	r3, #1
 8024eba:	60e3      	str	r3, [r4, #12]
 8024ebc:	2000      	movs	r0, #0
 8024ebe:	9b00      	ldr	r3, [sp, #0]
 8024ec0:	1aed      	subs	r5, r5, r3
 8024ec2:	6923      	ldr	r3, [r4, #16]
 8024ec4:	19ed      	adds	r5, r5, r7
 8024ec6:	195b      	adds	r3, r3, r5
 8024ec8:	6123      	str	r3, [r4, #16]
 8024eca:	b00b      	add	sp, #44	; 0x2c
 8024ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ece:	9a01      	ldr	r2, [sp, #4]
 8024ed0:	6011      	str	r1, [r2, #0]
 8024ed2:	e7e4      	b.n	8024e9e <_scanf_i+0x1ba>
 8024ed4:	08031a08 	.word	0x08031a08
 8024ed8:	08022691 	.word	0x08022691
 8024edc:	08023c05 	.word	0x08023c05
 8024ee0:	fffffaff 	.word	0xfffffaff
 8024ee4:	080323fc 	.word	0x080323fc
 8024ee8:	fffff6ff 	.word	0xfffff6ff

08024eec <__sccl>:
 8024eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024eee:	780b      	ldrb	r3, [r1, #0]
 8024ef0:	0004      	movs	r4, r0
 8024ef2:	2b5e      	cmp	r3, #94	; 0x5e
 8024ef4:	d019      	beq.n	8024f2a <__sccl+0x3e>
 8024ef6:	2200      	movs	r2, #0
 8024ef8:	1c4d      	adds	r5, r1, #1
 8024efa:	0021      	movs	r1, r4
 8024efc:	1c60      	adds	r0, r4, #1
 8024efe:	30ff      	adds	r0, #255	; 0xff
 8024f00:	700a      	strb	r2, [r1, #0]
 8024f02:	3101      	adds	r1, #1
 8024f04:	4281      	cmp	r1, r0
 8024f06:	d1fb      	bne.n	8024f00 <__sccl+0x14>
 8024f08:	1e68      	subs	r0, r5, #1
 8024f0a:	2b00      	cmp	r3, #0
 8024f0c:	d00c      	beq.n	8024f28 <__sccl+0x3c>
 8024f0e:	2101      	movs	r1, #1
 8024f10:	262d      	movs	r6, #45	; 0x2d
 8024f12:	404a      	eors	r2, r1
 8024f14:	0028      	movs	r0, r5
 8024f16:	54e2      	strb	r2, [r4, r3]
 8024f18:	7801      	ldrb	r1, [r0, #0]
 8024f1a:	1c45      	adds	r5, r0, #1
 8024f1c:	292d      	cmp	r1, #45	; 0x2d
 8024f1e:	d00c      	beq.n	8024f3a <__sccl+0x4e>
 8024f20:	295d      	cmp	r1, #93	; 0x5d
 8024f22:	d01d      	beq.n	8024f60 <__sccl+0x74>
 8024f24:	2900      	cmp	r1, #0
 8024f26:	d104      	bne.n	8024f32 <__sccl+0x46>
 8024f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f2a:	2201      	movs	r2, #1
 8024f2c:	784b      	ldrb	r3, [r1, #1]
 8024f2e:	1c8d      	adds	r5, r1, #2
 8024f30:	e7e3      	b.n	8024efa <__sccl+0xe>
 8024f32:	000b      	movs	r3, r1
 8024f34:	e7ee      	b.n	8024f14 <__sccl+0x28>
 8024f36:	0033      	movs	r3, r6
 8024f38:	e7ec      	b.n	8024f14 <__sccl+0x28>
 8024f3a:	7841      	ldrb	r1, [r0, #1]
 8024f3c:	295d      	cmp	r1, #93	; 0x5d
 8024f3e:	d0fa      	beq.n	8024f36 <__sccl+0x4a>
 8024f40:	428b      	cmp	r3, r1
 8024f42:	dcf8      	bgt.n	8024f36 <__sccl+0x4a>
 8024f44:	001d      	movs	r5, r3
 8024f46:	3002      	adds	r0, #2
 8024f48:	3501      	adds	r5, #1
 8024f4a:	5562      	strb	r2, [r4, r5]
 8024f4c:	42a9      	cmp	r1, r5
 8024f4e:	dcfb      	bgt.n	8024f48 <__sccl+0x5c>
 8024f50:	2500      	movs	r5, #0
 8024f52:	1c5f      	adds	r7, r3, #1
 8024f54:	428b      	cmp	r3, r1
 8024f56:	da01      	bge.n	8024f5c <__sccl+0x70>
 8024f58:	1acd      	subs	r5, r1, r3
 8024f5a:	3d01      	subs	r5, #1
 8024f5c:	197b      	adds	r3, r7, r5
 8024f5e:	e7db      	b.n	8024f18 <__sccl+0x2c>
 8024f60:	0028      	movs	r0, r5
 8024f62:	e7e1      	b.n	8024f28 <__sccl+0x3c>

08024f64 <__submore>:
 8024f64:	000b      	movs	r3, r1
 8024f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024f68:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8024f6a:	3344      	adds	r3, #68	; 0x44
 8024f6c:	000c      	movs	r4, r1
 8024f6e:	429d      	cmp	r5, r3
 8024f70:	d11c      	bne.n	8024fac <__submore+0x48>
 8024f72:	2680      	movs	r6, #128	; 0x80
 8024f74:	00f6      	lsls	r6, r6, #3
 8024f76:	0031      	movs	r1, r6
 8024f78:	f7fd fa72 	bl	8022460 <_malloc_r>
 8024f7c:	2800      	cmp	r0, #0
 8024f7e:	d102      	bne.n	8024f86 <__submore+0x22>
 8024f80:	2001      	movs	r0, #1
 8024f82:	4240      	negs	r0, r0
 8024f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024f86:	0023      	movs	r3, r4
 8024f88:	6360      	str	r0, [r4, #52]	; 0x34
 8024f8a:	63a6      	str	r6, [r4, #56]	; 0x38
 8024f8c:	3346      	adds	r3, #70	; 0x46
 8024f8e:	781a      	ldrb	r2, [r3, #0]
 8024f90:	4b10      	ldr	r3, [pc, #64]	; (8024fd4 <__submore+0x70>)
 8024f92:	54c2      	strb	r2, [r0, r3]
 8024f94:	0023      	movs	r3, r4
 8024f96:	3345      	adds	r3, #69	; 0x45
 8024f98:	781a      	ldrb	r2, [r3, #0]
 8024f9a:	4b0f      	ldr	r3, [pc, #60]	; (8024fd8 <__submore+0x74>)
 8024f9c:	54c2      	strb	r2, [r0, r3]
 8024f9e:	782a      	ldrb	r2, [r5, #0]
 8024fa0:	4b0e      	ldr	r3, [pc, #56]	; (8024fdc <__submore+0x78>)
 8024fa2:	54c2      	strb	r2, [r0, r3]
 8024fa4:	18c0      	adds	r0, r0, r3
 8024fa6:	6020      	str	r0, [r4, #0]
 8024fa8:	2000      	movs	r0, #0
 8024faa:	e7eb      	b.n	8024f84 <__submore+0x20>
 8024fac:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8024fae:	0029      	movs	r1, r5
 8024fb0:	0073      	lsls	r3, r6, #1
 8024fb2:	001a      	movs	r2, r3
 8024fb4:	9301      	str	r3, [sp, #4]
 8024fb6:	f7ff fc43 	bl	8024840 <_realloc_r>
 8024fba:	1e05      	subs	r5, r0, #0
 8024fbc:	d0e0      	beq.n	8024f80 <__submore+0x1c>
 8024fbe:	1987      	adds	r7, r0, r6
 8024fc0:	0001      	movs	r1, r0
 8024fc2:	0032      	movs	r2, r6
 8024fc4:	0038      	movs	r0, r7
 8024fc6:	f7fe fccf 	bl	8023968 <memcpy>
 8024fca:	9b01      	ldr	r3, [sp, #4]
 8024fcc:	6027      	str	r7, [r4, #0]
 8024fce:	6365      	str	r5, [r4, #52]	; 0x34
 8024fd0:	63a3      	str	r3, [r4, #56]	; 0x38
 8024fd2:	e7e9      	b.n	8024fa8 <__submore+0x44>
 8024fd4:	000003ff 	.word	0x000003ff
 8024fd8:	000003fe 	.word	0x000003fe
 8024fdc:	000003fd 	.word	0x000003fd

08024fe0 <_raise_r>:
 8024fe0:	b570      	push	{r4, r5, r6, lr}
 8024fe2:	0004      	movs	r4, r0
 8024fe4:	000d      	movs	r5, r1
 8024fe6:	291f      	cmp	r1, #31
 8024fe8:	d904      	bls.n	8024ff4 <_raise_r+0x14>
 8024fea:	2316      	movs	r3, #22
 8024fec:	6003      	str	r3, [r0, #0]
 8024fee:	2001      	movs	r0, #1
 8024ff0:	4240      	negs	r0, r0
 8024ff2:	bd70      	pop	{r4, r5, r6, pc}
 8024ff4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024ff6:	2b00      	cmp	r3, #0
 8024ff8:	d004      	beq.n	8025004 <_raise_r+0x24>
 8024ffa:	008a      	lsls	r2, r1, #2
 8024ffc:	189b      	adds	r3, r3, r2
 8024ffe:	681a      	ldr	r2, [r3, #0]
 8025000:	2a00      	cmp	r2, #0
 8025002:	d108      	bne.n	8025016 <_raise_r+0x36>
 8025004:	0020      	movs	r0, r4
 8025006:	f000 f831 	bl	802506c <_getpid_r>
 802500a:	002a      	movs	r2, r5
 802500c:	0001      	movs	r1, r0
 802500e:	0020      	movs	r0, r4
 8025010:	f000 f81a 	bl	8025048 <_kill_r>
 8025014:	e7ed      	b.n	8024ff2 <_raise_r+0x12>
 8025016:	2000      	movs	r0, #0
 8025018:	2a01      	cmp	r2, #1
 802501a:	d0ea      	beq.n	8024ff2 <_raise_r+0x12>
 802501c:	1c51      	adds	r1, r2, #1
 802501e:	d103      	bne.n	8025028 <_raise_r+0x48>
 8025020:	2316      	movs	r3, #22
 8025022:	3001      	adds	r0, #1
 8025024:	6023      	str	r3, [r4, #0]
 8025026:	e7e4      	b.n	8024ff2 <_raise_r+0x12>
 8025028:	2400      	movs	r4, #0
 802502a:	0028      	movs	r0, r5
 802502c:	601c      	str	r4, [r3, #0]
 802502e:	4790      	blx	r2
 8025030:	0020      	movs	r0, r4
 8025032:	e7de      	b.n	8024ff2 <_raise_r+0x12>

08025034 <raise>:
 8025034:	b510      	push	{r4, lr}
 8025036:	4b03      	ldr	r3, [pc, #12]	; (8025044 <raise+0x10>)
 8025038:	0001      	movs	r1, r0
 802503a:	6818      	ldr	r0, [r3, #0]
 802503c:	f7ff ffd0 	bl	8024fe0 <_raise_r>
 8025040:	bd10      	pop	{r4, pc}
 8025042:	46c0      	nop			; (mov r8, r8)
 8025044:	20005128 	.word	0x20005128

08025048 <_kill_r>:
 8025048:	2300      	movs	r3, #0
 802504a:	b570      	push	{r4, r5, r6, lr}
 802504c:	4d06      	ldr	r5, [pc, #24]	; (8025068 <_kill_r+0x20>)
 802504e:	0004      	movs	r4, r0
 8025050:	0008      	movs	r0, r1
 8025052:	0011      	movs	r1, r2
 8025054:	602b      	str	r3, [r5, #0]
 8025056:	f7e8 f939 	bl	800d2cc <_kill>
 802505a:	1c43      	adds	r3, r0, #1
 802505c:	d103      	bne.n	8025066 <_kill_r+0x1e>
 802505e:	682b      	ldr	r3, [r5, #0]
 8025060:	2b00      	cmp	r3, #0
 8025062:	d000      	beq.n	8025066 <_kill_r+0x1e>
 8025064:	6023      	str	r3, [r4, #0]
 8025066:	bd70      	pop	{r4, r5, r6, pc}
 8025068:	2001c378 	.word	0x2001c378

0802506c <_getpid_r>:
 802506c:	b510      	push	{r4, lr}
 802506e:	f7e8 f927 	bl	800d2c0 <_getpid>
 8025072:	bd10      	pop	{r4, pc}

08025074 <_malloc_usable_size_r>:
 8025074:	1f0b      	subs	r3, r1, #4
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	1f18      	subs	r0, r3, #4
 802507a:	2b00      	cmp	r3, #0
 802507c:	da01      	bge.n	8025082 <_malloc_usable_size_r+0xe>
 802507e:	580b      	ldr	r3, [r1, r0]
 8025080:	18c0      	adds	r0, r0, r3
 8025082:	4770      	bx	lr

08025084 <_init>:
 8025084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025086:	46c0      	nop			; (mov r8, r8)
 8025088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802508a:	bc08      	pop	{r3}
 802508c:	469e      	mov	lr, r3
 802508e:	4770      	bx	lr

08025090 <_fini>:
 8025090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025092:	46c0      	nop			; (mov r8, r8)
 8025094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025096:	bc08      	pop	{r3}
 8025098:	469e      	mov	lr, r3
 802509a:	4770      	bx	lr
 802509c:	0000      	movs	r0, r0
	...

080250a0 <__FLASH_Program_Fast_veneer>:
 80250a0:	b401      	push	{r0}
 80250a2:	4802      	ldr	r0, [pc, #8]	; (80250ac <__FLASH_Program_Fast_veneer+0xc>)
 80250a4:	4684      	mov	ip, r0
 80250a6:	bc01      	pop	{r0}
 80250a8:	4760      	bx	ip
 80250aa:	bf00      	nop
 80250ac:	20005189 	.word	0x20005189

Disassembly of section .data:

20000000 <timesync_str>:
20000000:	6d74683c 616c206c 223d676e 3e226e65     <html lang="en">
20000010:	6165683c 6d3c3e64 20617465 72616863     <head><meta char
20000020:	3d746573 46545522 3e22382d 74656d3c     set="UTF-8"><met
20000030:	616e2061 223d656d 77656976 74726f70     a name="viewport
20000040:	6f632022 6e65746e 77223d74 68746469     " content="width
20000050:	7665643d 2d656369 74646977 69202c68     =device-width, i
20000060:	6974696e 732d6c61 656c6163 302e313d     nitial-scale=1.0
20000070:	743c3e22 656c7469 6d69543e 79532065     "><title>Time Sy
20000080:	2f3c636e 6c746974 733c3e65 656c7974     nc</title><style
20000090:	646f623e 667b2079 2d746e6f 696d6166     >body {font-fami
200000a0:	203a796c 61697241 73202c6c 2d736e61     ly: Arial, sans-
200000b0:	69726573 616d3b66 6e696772 7d3b303a     serif;margin:0;}
200000c0:	6e6f632e 6e696174 7b207265 2d78616d     .container {max-
200000d0:	74646977 36203a68 78703030 72616d3b     width: 600px;mar
200000e0:	3a6e6967 74756120 61703b6f 6e696464     gin: auto;paddin
200000f0:	32203a67 3b787030 64726f62 203a7265     g: 20px;border: 
20000100:	20787031 696c6f73 43232064 43434343     1px solid #CCCCC
20000110:	6f623b43 72656472 6461722d 3a737569     C;border-radius:
20000120:	70333120 6f623b78 68732d78 776f6461      13px;box-shadow
20000130:	2030203a 30312030 72207870 28616267     : 0 0 10px rgba(
20000140:	30202c30 2c30202c 312e3020 61623b29     0, 0, 0, 0.1);ba
20000150:	72676b63 646e756f 6c6f632d 203a726f     ckground-color: 
20000160:	46424623 3b424642 6b636162 756f7267     #FBFBFB;backgrou
20000170:	692d646e 6567616d 6f6e203a 7d3b656e     nd-image: none;}
20000180:	726f662e 72672d6d 2070756f 7369647b     .form-group {dis
20000190:	79616c70 6c66203a 613b7865 6e67696c     play: flex;align
200001a0:	6574692d 203a736d 746e6563 6d3b7265     -items: center;m
200001b0:	69677261 6f622d6e 6d6f7474 3031203a     argin-bottom: 10
200001c0:	7d3b7870 726f662e 72672d6d 2070756f     px;}.form-group 
200001d0:	6562616c 667b206c 3a78656c 6d3b3120     label {flex: 1;m
200001e0:	69677261 6f622d6e 6d6f7474 3b30203a     argin-bottom: 0;
200001f0:	6f662e7d 672d6d72 70756f72 77732e20     }.form-group .sw
20000200:	68637469 656c667b 203a2078 3b31312e     itch{flex : .11;
20000210:	6f662e7d 672d6d72 70756f72 706e6920     }.form-group inp
20000220:	745b7475 3d657079 74616422 6d697465     ut[type="datetim
20000230:	6f6c2d65 226c6163 667b205d 3a78656c     e-local"] {flex:
20000240:	3b372e20 6954237d 6f5a656d 7b20656e      .7;}#TimeZone {
20000250:	78656c66 2e30203a 69773b31 3a687464     flex: 0.1;width:
20000260:	30303420 7d3b7870 75706e69 79745b74      400px;}input[ty
20000270:	223d6570 65746164 656d6974 636f6c2d     pe="datetime-loc
20000280:	5d226c61 61707b20 6e696464 31203a67     al"] {padding: 1
20000290:	3b787030 64726f62 203a7265 20787031     0px;border: 1px 
200002a0:	696c6f73 63232064 623b6363 6564726f     solid #ccc;borde
200002b0:	61722d72 73756964 7034203a 69773b78     r-radius: 4px;wi
200002c0:	3a687464 30303120 2e7d3b25 74697773     dth: 100%;}.swit
200002d0:	7b206863 69736f70 6e6f6974 6572203a     ch {position: re
200002e0:	6974616c 643b6576 6c707369 203a7961     lative;display: 
200002f0:	696c6e69 622d656e 6b636f6c 6469773b     inline-block;wid
20000300:	203a6874 78703032 6965683b 3a746867     th: 20px;height:
20000310:	70343320 2e7d3b78 74697773 69206863      34px;}.switch i
20000320:	7475706e 706f7b20 74696361 30203a79     nput {opacity: 0
20000330:	6469773b 203a6874 65683b30 74686769     ;width: 0;height
20000340:	3b30203a 6c732e7d 72656469 6f707b20     : 0;}.slider {po
20000350:	69746973 203a6e6f 6f736261 6574756c     sition: absolute
20000360:	7275633b 3a726f73 696f7020 7265746e     ;cursor: pointer
20000370:	706f743b 3b30203a 7466656c 3b30203a     ;top: 0;left: 0;
20000380:	68676972 30203a74 746f623b 3a6d6f74     right: 0;bottom:
20000390:	623b3020 676b6361 6e756f72 6f632d64      0;background-co
200003a0:	3a726f6c 63632320 72743b63 69736e61     lor: #ccc;transi
200003b0:	6e6f6974 342e203a 6f623b73 72656472     tion: .4s;border
200003c0:	6461722d 3a737569 70343320 2e7d3b78     -radius: 34px;}.
200003d0:	64696c73 623a7265 726f6665 707b2065     slider:before {p
200003e0:	7469736f 3a6e6f69 73626120 74756c6f     osition: absolut
200003f0:	6f633b65 6e65746e 22203a74 65683b22     e;content: "";he
20000400:	74686769 3632203a 773b7870 68746469     ight: 26px;width
20000410:	3632203a 6c3b7870 3a746665 78703420     : 26px;left: 4px
20000420:	746f623b 3a6d6f74 78703420 6361623b     ;bottom: 4px;bac
20000430:	6f72676b 2d646e75 6f6c6f63 77203a72     kground-color: w
20000440:	65746968 6172743b 7469736e 3a6e6f69     hite;transition:
20000450:	73342e20 726f623b 2d726564 69646172      .4s;border-radi
20000460:	203a7375 3b253035 706e697d 633a7475     us: 50%;}input:c
20000470:	6b636568 2b206465 6c732e20 72656469     hecked + .slider
20000480:	61627b20 72676b63 646e756f 6c6f632d      {background-col
20000490:	203a726f 37303023 3b464642 706e697d     or: #007BFF;}inp
200004a0:	633a7475 6b636568 2b206465 6c732e20     ut:checked + .sl
200004b0:	72656469 6665623a 2065726f 6172747b     ider:before {tra
200004c0:	6f66736e 203a6d72 6e617274 74616c73     nsform: translat
200004d0:	32285865 29787036 75627d3b 6e6f7474     eX(26px);}button
200004e0:	69777b20 3a687464 30303120 616d3b25      {width: 100%;ma
200004f0:	6e696772 7561203a 643b6f74 6c707369     rgin: auto;displ
20000500:	203a7961 636f6c62 61703b6b 6e696464     ay: block;paddin
20000510:	31203a67 3b787030 6b636162 756f7267     g: 10px;backgrou
20000520:	632d646e 726f6c6f 3023203a 46423730     nd-color: #007BF
20000530:	6f633b46 3a726f6c 69687720 623b6574     F;color: white;b
20000540:	6564726f 6e203a72 3b656e6f 64726f62     order: none;bord
20000550:	722d7265 75696461 34203a73 633b7870     er-radius: 4px;c
20000560:	6f737275 70203a72 746e696f 6d3b7265     ursor: pointer;m
20000570:	69677261 6f742d6e 32203a70 3b787030     argin-top: 20px;
20000580:	7475627d 3a6e6f74 65766f68 627b2072     }button:hover {b
20000590:	676b6361 6e756f72 6f632d64 3a726f6c     ackground-color:
200005a0:	30302320 33623635 48237d3b 69646165      #0056b3;}#Headi
200005b0:	7b20676e 6f6c6f63 23203a72 39363936     ng {color: #6969
200005c0:	663b3936 2d746e6f 696d6166 203a796c     69;font-family: 
200005d0:	6f626f52 663b6f74 2d746e6f 67696577     Roboto;font-weig
200005e0:	203a7468 646c6f62 6e6f663b 74732d74     ht: bold;font-st
200005f0:	3a656c79 726f6e20 3b6c616d 746e6f66     yle: normal;font
20000600:	7a69732d 32203a65 3b787037 6772616d     -size: 27px;marg
20000610:	203a6e69 65743b30 612d7478 6e67696c     in: 0;text-align
20000620:	6563203a 7265746e 4c237d3b 20656e69     : center;}#Line 
20000630:	726f627b 2d726564 6f6c6f63 23203a72     {border-color: #
20000640:	30413041 623b3041 6564726f 74732d72     A0A0A0;border-st
20000650:	3a656c79 6c6f7320 623b6469 6564726f     yle: solid;borde
20000660:	6f622d72 6d6f7474 6469772d 203a6874     r-bottom-width: 
20000670:	3b787033 64726f62 742d7265 203a706f     3px;border-top: 
20000680:	3b787030 64726f62 6c2d7265 3a746665     0px;border-left:
20000690:	78703020 726f623b 2d726564 68676972      0px;border-righ
200006a0:	30203a74 683b7870 68676965 30203a74     t: 0px;height: 0
200006b0:	6d692120 74726f70 3b746e61 656e696c      !important;line
200006c0:	6965682d 3a746867 78703020 6d692120     -height: 0px !im
200006d0:	74726f70 3b746e61 6772616d 203a6e69     portant;margin: 
200006e0:	75612030 703b6f74 69646461 203a676e     0 auto;padding: 
200006f0:	69773b30 3a687464 25303520 72616d3b     0;width: 50%;mar
20000700:	2d6e6967 3a706f74 70303120 616d3b78     gin-top: 10px;ma
20000710:	6e696772 746f622d 3a6d6f74 70303220     rgin-bottom: 20p
20000720:	2e7d3b78 6276616e 7b207261 65766f09     x;}.navbar {.ove
20000730:	6f6c6672 68203a77 65646469 62093b6e     rflow: hidden;.b
20000740:	676b6361 6e756f72 6f632d64 3a726f6c     ackground-color:
20000750:	33332320 2e7d3b33 6276616e 61207261      #333;}.navbar a
20000760:	66097b20 74616f6c 656c203a 093b7466      {.float: left;.
20000770:	70736964 3a79616c 6f6c6220 093b6b63     display: block;.
20000780:	6f6c6f63 77203a72 65746968 6574093b     color: white;.te
20000790:	612d7478 6e67696c 6563203a 7265746e     xt-align: center
200007a0:	2020203b 746e6f66 7a69732d 203a2065     ;   font-size : 
200007b0:	6772616c 70093b65 69646461 203a676e     large;.padding: 
200007c0:	78703431 70303220 74093b78 2d747865     14px 20px;.text-
200007d0:	6f636564 69746172 203a6e6f 656e6f6e     decoration: none
200007e0:	6e2e7d3b 61627661 3a612072 65766f68     ;}.navbar a:hove
200007f0:	097b2072 6b636162 756f7267 632d646e     r {.background-c
20000800:	726f6c6f 6423203a 093b6464 6f6c6f63     olor: #ddd;.colo
20000810:	62203a72 6b63616c 2f3c7d3b 6c797473     r: black;}</styl
20000820:	2f3c3e65 64616568 6f623c3e 6f207964     e></head><body o
20000830:	616f6c6e 6f223d64 6e69576e 4c776f64     nload="onWindowL
20000840:	2864616f 3c3e2229 20766964 73616c63     oad()"><div clas
20000850:	6e223d73 61627661 203e2272 3c202020     s="navbar">    <
20000860:	72682061 223d6665 69616d2f 74682e6e     a href="/main.ht
20000870:	3e226c6d 656d6f48 3e612f3c 20202020     ml">Home</a>    
20000880:	6820613c 3d666572 656e2f22 726f7774     <a href="/networ
20000890:	7465736b 676e6974 74682e73 3e226c6d     ksettings.html">
200008a0:	7774654e 206b726f 74746553 73676e69     Network Settings
200008b0:	3e612f3c 20202020 6820613c 3d666572     </a>    <a href=
200008c0:	69742f22 7973656d 6170636e 3e226567     "/timesyncpage">
200008d0:	656d6954 6e795320 612f3c63 2020203e     Time Sync</a>   
200008e0:	20613c20 66657268 752f223d 74616470      <a href="/updat
200008f0:	69665f65 61776d72 682e6572 226c6d74     e_firmware.html"
20000900:	6470553e 20657461 6d726946 65726177     >Update Firmware
20000910:	3e612f3c 69642f3c 643c3e76 63207669     </a></div><div c
20000920:	7373616c 6f63223d 6961746e 2272656e     lass="container"
20000930:	3d646920 5f627722 6d726f46 3c3e2233      id="wb_Form3"><
20000940:	69203168 48223d64 69646165 3e22676e     h1 id="Heading">
20000950:	20656e4f 746f6853 646f4d20 682f3c65     One Shot Mode</h
20000960:	683c3e31 64692072 694c223d 3e22656e     1><hr id="Line">
20000970:	7669643c 616c6320 223d7373 6d726f66     <div class="form
20000980:	6f72672d 3e227075 62616c3c 66206c65     -group"><label f
20000990:	223d726f 656d6974 636e7953 77536e4f     or="timeSyncOnSw
200009a0:	68637469 69543e22 5320656d 20636e79     itch">Time Sync 
200009b0:	3c3a6e4f 62616c2f 3c3e6c65 6562616c     On:</label><labe
200009c0:	6c63206c 3d737361 69777322 22686374     l class="switch"
200009d0:	6e693c3e 20747570 65707974 6863223d     ><input type="ch
200009e0:	626b6365 2022786f 223d6469 656d6974     eckbox" id="time
200009f0:	636e7953 77536e4f 68637469 733c3e22     SyncOnSwitch"><s
20000a00:	206e6170 73616c63 73223d73 6564696c     pan class="slide
20000a10:	3c3e2272 6170732f 2f3c3e6e 6562616c     r"></span></labe
20000a20:	2f3c3e6c 3e766964 7669643c 616c6320     l></div><div cla
20000a30:	223d7373 6d726f66 6f72672d 3e227075     ss="form-group">
20000a40:	62616c3c 66206c65 223d726f 656d6974     <label for="time
20000a50:	636e7953 61446e4f 69546574 3e22656d     SyncOnDateTime">
20000a60:	656d6954 6e795320 6e4f2063 74614420     Time Sync On Dat
20000a70:	69542065 3c3a656d 62616c2f 3c3e6c65     e Time:</label><
20000a80:	75706e69 79742074 223d6570 65746164     input type="date
20000a90:	656d6974 636f6c2d 20226c61 223d6469     time-local" id="
20000aa0:	656d6974 636e7953 61446e4f 69546574     timeSyncOnDateTi
20000ab0:	2022656d 656d616e 6974223d 7953656d     me" name="timeSy
20000ac0:	6e4f636e 65746144 656d6954 696d2022     ncOnDateTime" mi
20000ad0:	32223d6e 2d343230 322d3930 35315435     n="2024-09-25T15
20000ae0:	2233333a 642f3c3e 3c3e7669 20766964     :33"></div><div 
20000af0:	73616c63 66223d73 2d6d726f 756f7267     class="form-grou
20000b00:	3c3e2270 6562616c 6f66206c 74223d72     p"><label for="t
20000b10:	53656d69 4f636e79 77536666 68637469     imeSyncOffSwitch
20000b20:	69543e22 5320656d 20636e79 3a66664f     ">Time Sync Off:
20000b30:	616c2f3c 3e6c6562 62616c3c 63206c65     </label><label c
20000b40:	7373616c 7773223d 68637469 693c3e22     lass="switch"><i
20000b50:	7475706e 70797420 63223d65 6b636568     nput type="check
20000b60:	22786f62 3d646920 6d697422 6e795365     box" id="timeSyn
20000b70:	66664f63 74697753 3e226863 6170733c     cOffSwitch"><spa
20000b80:	6c63206e 3d737361 696c7322 22726564     n class="slider"
20000b90:	732f3c3e 3e6e6170 616c2f3c 3e6c6562     ></span></label>
20000ba0:	69642f3c 643c3e76 63207669 7373616c     </div><div class
20000bb0:	6f66223d 672d6d72 70756f72 6c3c3e22     ="form-group"><l
20000bc0:	6c656261 726f6620 6974223d 7953656d     abel for="timeSy
20000bd0:	664f636e 74614466 6d695465 543e2265     ncOffDateTime">T
20000be0:	20656d69 636e7953 66664f20 74614420     ime Sync Off Dat
20000bf0:	69542065 3c3a656d 62616c2f 3c3e6c65     e Time:</label><
20000c00:	75706e69 79742074 223d6570 65746164     input type="date
20000c10:	656d6974 636f6c2d 20226c61 223d6469     time-local" id="
20000c20:	656d6974 636e7953 4466664f 54657461     timeSyncOffDateT
20000c30:	22656d69 6d616e20 74223d65 53656d69     ime" name="timeS
20000c40:	4f636e79 61446666 69546574 2022656d     yncOffDateTime" 
20000c50:	3d6e696d 32303222 39302d34 5435322d     min="2024-09-25T
20000c60:	333a3531 3c3e2233 7669642f 69643c3e     15:33"></div><di
20000c70:	6c632076 3d737361 726f6622 72672d6d     v class="form-gr
20000c80:	2270756f 616c3c3e 206c6562 3d726f66     oup"><label for=
20000c90:	6d695422 6e6f5a65 533e2265 63656c65     "TimeZone">Selec
20000ca0:	69542074 5a20656d 3a656e6f 616c2f3c     t Time Zone:</la
20000cb0:	3e6c6562 6c65733c 20746365 223d6469     bel><select id="
20000cc0:	656d6954 656e6f5a 616e2022 223d656d     TimeZone" name="
20000cd0:	656d6954 656e6f5a 6f3c3e22 6f697470     TimeZone"><optio
20000ce0:	6176206e 3d65756c 3e223022 2d435455     n value="0">UTC-
20000cf0:	303a3231 61422030 2072656b 616c7349     12:00 Baker Isla
20000d00:	202c646e 6c776f48 20646e61 616c7349     nd, Howland Isla
20000d10:	2820646e 68746f62 696e7520 6261686e     nd (both uninhab
20000d20:	64657469 6f2f3c29 6f697470 6f3c3e6e     ited)</option><o
20000d30:	6f697470 6176206e 3d65756c 3e223122     ption value="1">
20000d40:	2d435455 303a3131 6d412030 63697265     UTC-11:00 Americ
20000d50:	53206e61 616f6d61 6153202c 3c616f6d     an Samoa, Samoa<
20000d60:	74706f2f 3e6e6f69 74706f3c 206e6f69     /option><option 
20000d70:	756c6176 32223d65 54553e22 30312d43     value="2">UTC-10
20000d80:	2030303a 6d755328 2972656d 6e657246     :00 (Summer)Fren
20000d90:	50206863 6e796c6f 61697365 6f6d2820     ch Polynesia (mo
20000da0:	2c297473 696e5520 20646574 74617453     st), United Stat
20000db0:	28207365 75656c41 6e616974 6c734920     es (Aleutian Isl
20000dc0:	73646e61 6148202c 69696177 6f2f3c29     ands, Hawaii)</o
20000dd0:	6f697470 6f3c3e6e 6f697470 6176206e     ption><option va
20000de0:	3d65756c 3e223322 2d435455 333a3930     lue="3">UTC-09:3
20000df0:	614d2030 65757172 20736173 616c7349     0 Marquesas Isla
20000e00:	3c73646e 74706f2f 3e6e6f69 74706f3c     nds</option><opt
20000e10:	206e6f69 756c6176 34223d65 54553e22     ion value="4">UT
20000e20:	39302d43 2030303a 626d6147 20726569     C-09:00 Gambier 
20000e30:	616c7349 3b73646e 6d755328 2972656d     Islands;(Summer)
20000e40:	74696e55 53206465 65746174 6d282073     United States (m
20000e50:	2074736f 4120666f 6b73616c 2f3c2961     ost of Alaska)</
20000e60:	6974706f 3c3e6e6f 6974706f 76206e6f     option><option v
20000e70:	65756c61 2235223d 4354553e 3a38302d     alue="5">UTC-08:
20000e80:	28203030 6d6d7553 43297265 64616e61     00 (Summer)Canad
20000e90:	6d282061 2074736f 4220666f 69746972     a (most of Briti
20000ea0:	43206873 6d756c6f 29616962 654d202c     sh Columbia), Me
20000eb0:	6f636978 61422820 4320616a 66696c61     xico (Baja Calif
20000ec0:	696e726f 2f3c2961 6974706f 3c3e6e6f     ornia)</option><
20000ed0:	6974706f 76206e6f 65756c61 2236223d     option value="6"
20000ee0:	4354553e 3a38302d 55203030 6574696e     >UTC-08:00 Unite
20000ef0:	74532064 73657461 61432820 6f66696c     d States (Califo
20000f00:	61696e72 6f6d202c 6f207473 654e2066     rnia, most of Ne
20000f10:	61646176 6f6d202c 6f207473 724f2066     vada, most of Or
20000f20:	6e6f6765 6157202c 6e696873 6e6f7467     egon, Washington
20000f30:	61747328 29296574 706f2f3c 6e6f6974     (state))</option
20000f40:	706f3c3e 6e6f6974 6c617620 223d6575     ><option value="
20000f50:	553e2237 302d4354 30303a37 78654d20     7">UTC-07:00 Mex
20000f60:	206f6369 6e6f5328 2961726f 6e55202c     ico (Sonora), Un
20000f70:	64657469 61745320 20736574 69724128     ited States (Ari
20000f80:	616e6f7a 28203b29 6d6d7553 43297265     zona); (Summer)C
20000f90:	64616e61 41282061 7265626c 3c296174     anada (Alberta)<
20000fa0:	74706f2f 3e6e6f69 74706f3c 206e6f69     /option><option 
20000fb0:	756c6176 38223d65 54553e22 37302d43     value="8">UTC-07
20000fc0:	2030303a 6978654d 28206f63 68696843     :00 Mexico (Chih
20000fd0:	75686175 202c2961 74696e55 53206465     uahua), United S
20000fe0:	65746174 43282073 726f6c6f 296f6461     tates (Colorado)
20000ff0:	706f2f3c 6e6f6974 706f3c3e 6e6f6974     </option><option
20001000:	6c617620 223d6575 553e2239 302d4354      value="9">UTC-0
20001010:	30303a36 736f4320 52206174 2c616369     6:00 Costa Rica,
20001020:	206c4520 766c6153 726f6461 6345202c      El Salvador, Ec
20001030:	6f646175 47282072 70616c61 736f6761     uador (Galapagos
20001040:	6c734920 73646e61 47202c29 65746175      Islands), Guate
20001050:	616c616d 6f48202c 7275646e 2f3c7361     mala, Honduras</
20001060:	6974706f 3c3e6e6f 6974706f 76206e6f     option><option v
20001070:	65756c61 3031223d 54553e22 36302d43     alue="10">UTC-06
20001080:	2030303a 6978654d 28206f63 74736f6d     :00 Mexico (most
20001090:	4e202c29 72616369 61756761 7553283b     ), Nicaragua;(Su
200010a0:	72656d6d 6e614329 20616461 6e614d28     mmer)Canada (Man
200010b0:	626f7469 53202c61 616b7361 65686374     itoba, Saskatche
200010c0:	296e6177 6e55202c 64657469 74617453     wan), UnitedStat
200010d0:	28207365 696c6c49 73696f6e 6f6d202c     es (Illinois, mo
200010e0:	6f207473 65542066 29736178 706f2f3c     st of Texas)</op
200010f0:	6e6f6974 706f3c3e 6e6f6974 6c617620     tion><option val
20001100:	223d6575 3e223131 2d435455 303a3530     ue="11">UTC-05:0
20001110:	6f432030 626d6f6c 202c6169 61627543     0 Colombia, Cuba
20001120:	6345202c 6f646175 63282072 69746e6f     , Ecuador (conti
20001130:	746e656e 2c296c61 69614820 202c6974     nental), Haiti, 
20001140:	616d614a 2c616369 6e615020 2c616d61     Jamaica, Panama,
20001150:	72655020 6f2f3c75 6f697470 6f3c3e6e      Peru</option><o
20001160:	6f697470 6176206e 3d65756c 22323122     ption value="12"
20001170:	4354553e 3a35302d 28203030 6d6d7553     >UTC-05:00 (Summ
20001180:	43297265 64616e61 6d282061 2074736f     er)Canada (most 
20001190:	4f20666f 7261746e 202c6f69 74736f6d     of Ontario, most
200011a0:	20666f20 62657551 3c296365 74706f2f      of Quebec)</opt
200011b0:	3e6e6f69 74706f3c 206e6f69 756c6176     ion><option valu
200011c0:	31223d65 553e2233 302d4354 30303a35     e="13">UTC-05:00
200011d0:	696e5520 20646574 74617453 28207365      United States (
200011e0:	74736f6d 20666f20 726f6c46 2c616469     most of Florida,
200011f0:	6f654720 61696772 614d202c 63617373      Georgia, Massac
20001200:	65737568 2c737474 736f6d20 666f2074     husetts, most of
20001210:	63694d20 61676968 654e2c6e 6f592077      Michigan,New Yo
20001220:	202c6b72 74726f4e 61432068 696c6f72     rk, North Caroli
20001230:	202c616e 6f69684f 6157202c 6e696873     na, Ohio, Washin
20001240:	6e6f7467 432e4420 2f3c292e 6974706f     gton D.C.)</opti
20001250:	3c3e6e6f 6974706f 76206e6f 65756c61     on><option value
20001260:	3431223d 54553e22 34302d43 2030333a     ="14">UTC-04:30 
20001270:	656e6556 6c65757a 6f2f3c61 6f697470     Venezuela</optio
20001280:	6f3c3e6e 6f697470 6176206e 3d65756c     n><option value=
20001290:	22353122 4354553e 3a34302d 42203030     "15">UTC-04:00 B
200012a0:	76696c6f 202c6169 7a617242 28206c69     olivia, Brazil (
200012b0:	7a616d41 73616e6f 43202c29 656c6968     Amazonas), Chile
200012c0:	6f632820 6e69746e 61746e65 202c296c      (continental), 
200012d0:	696d6f44 6163696e 6552206e 6c627570     Dominican Republ
200012e0:	202c6369 616e6143 4e286164 2061766f     ic, Canada(Nova 
200012f0:	746f6353 2c296169 72615020 61756761     Scotia), Paragua
20001300:	6f2f3c79 6f697470 6f3c3e6e 6f697470     y</option><optio
20001310:	6176206e 3d65756c 22363122 4354553e     n value="16">UTC
20001320:	3a34302d 50203030 74726575 6952206f     -04:00 Puerto Ri
20001330:	202c6f63 6e697254 64616469 646e6120     co, Trinidad and
20001340:	626f5420 3c6f6761 74706f2f 3e6e6f69      Tobago</option>
20001350:	74706f3c 206e6f69 756c6176 31223d65     <option value="1
20001360:	553e2237 302d4354 30333a33 6e614320     7">UTC-03:30 Can
20001370:	20616461 77654e28 6e756f66 6e616c64     ada (Newfoundlan
20001380:	2f3c2964 6974706f 3c3e6e6f 6974706f     d)</option><opti
20001390:	76206e6f 65756c61 3831223d 54553e22     on value="18">UT
200013a0:	33302d43 2030303a 65677241 6e69746e     C-03:00 Argentin
200013b0:	28203b61 6d6d7553 20297265 7a617242     a; (Summer) Braz
200013c0:	28206c69 73617242 61696c69 6952202c     il (Brasilia, Ri
200013d0:	6564206f 6e614a20 6f726965 6153202c     o de Janeiro, Sa
200013e0:	6150206f 296f6c75 6f6d202c 6f207473     o Paulo), most o
200013f0:	65724766 616c6e65 202c646e 67757255     fGreenland, Urug
20001400:	3c796175 74706f2f 3e6e6f69 74706f3c     uay</option><opt
20001410:	206e6f69 756c6176 31223d65 553e2239     ion value="19">U
20001420:	302d4354 30303a32 61724220 206c697a     TC-02:00 Brazil 
20001430:	72654628 646e616e 6564206f 726f4e20     (Fernando de Nor
20001440:	61686e6f 53202c29 6874756f 6f654720     onha), South Geo
20001450:	61696772 646e6120 65687420 756f5320     rgia and the Sou
20001460:	53206874 77646e61 20686369 616c7349     th Sandwich Isla
20001470:	3c73646e 74706f2f 3e6e6f69 74706f3c     nds</option><opt
20001480:	206e6f69 756c6176 32223d65 553e2230     ion value="20">U
20001490:	302d4354 30303a31 726f5020 61677574     TC-01:00 Portuga
200014a0:	4128206c 65726f7a 202c2973 65706143     l (Azores), Cape
200014b0:	72655620 2f3c6564 6974706f 3c3e6e6f      Verde</option><
200014c0:	6974706f 76206e6f 65756c61 3132223d     option value="21
200014d0:	54553e22 30b1c243 30303a30 746f4320     ">UTC..00:00 Cot
200014e0:	27642065 696f7649 202c6572 6f726146     e d'Ivoire, Faro
200014f0:	73492065 646e616c 47202c73 616e6168     e Islands, Ghana
20001500:	6349202c 6e616c65 53202c64 67656e65     , Iceland, Seneg
20001510:	203b6c61 6d755328 2972656d 65724920     al; (Summer) Ire
20001520:	646e616c 726f502c 61677574 6328206c     land,Portugal (c
20001530:	69746e6f 746e656e 61206c61 4d20646e     ontinental and M
20001540:	69656461 3c296172 74706f2f 3e6e6f69     adeira)</option>
20001550:	74706f3c 206e6f69 756c6176 32223d65     <option value="2
20001560:	553e2232 b1c24354 303a3030 70532030     2">UTC..00:00 Sp
20001570:	206e6961 6e614328 20797261 616c7349     ain (Canary Isla
20001580:	2973646e 6f4d202c 63636f72 55202c6f     nds), Morocco, U
20001590:	6574696e 694b2064 6f64676e 6f2f3c6d     nited Kingdom</o
200015a0:	6f697470 6f3c3e6e 6f697470 6176206e     ption><option va
200015b0:	3d65756c 22333222 4354553e 3a31302b     lue="23">UTC+01:
200015c0:	41203030 6c6f676e 43202c61 72656d61     00 Angola, Camer
200015d0:	2c6e6f6f 67694e20 61697265 7554202c     oon, Nigeria, Tu
200015e0:	6973696e 28203b61 6d6d7553 41297265     nisia; (Summer)A
200015f0:	6e61626c 202c6169 65676c41 2c616972     lbania, Algeria,
20001600:	73754120 61697274 6c65422c 6d756967      Austria,Belgium
20001610:	6f42202c 61696e73 646e6120 72654820     , Bosnia and Her
20001620:	6f67657a 616e6976 706f2f3c 6e6f6974     zegovina</option
20001630:	706f3c3e 6e6f6974 6c617620 223d6575     ><option value="
20001640:	3e223432 2b435455 303a3130 70532030     24">UTC+01:00 Sp
20001650:	206e6961 6e6f6328 656e6974 6c61746e     ain (continental
20001660:	43202c29 74616f72 202c6169 63657a43     ), Croatia, Czec
20001670:	65522068 6c627570 202c6369 6d6e6544     h Republic, Denm
20001680:	2c6b7261 72654720 796e616d 7548202c     ark, Germany, Hu
20001690:	7261676e 74492c79 2c796c61 6e694b20     ngary,Italy, Kin
200016a0:	73616873 4b202c61 766f736f 6f2f3c6f     shasa, Kosovo</o
200016b0:	6f697470 6f3c3e6e 6f697470 6176206e     ption><option va
200016c0:	3d65756c 22353222 4354553e 3a31302b     lue="25">UTC+01:
200016d0:	4d203030 64656361 61696e6f 7246202c     00 Macedonia, Fr
200016e0:	65636e61 656d2820 706f7274 74696c6f     ance (metropolit
200016f0:	2c296e61 65687420 74654e20 6c726568     an), the Netherl
20001700:	73646e61 6f4e202c 79617772 6f50202c     ands, Norway, Po
20001710:	646e616c 6553202c 61696272 6f6c532c     land, Serbia,Slo
20001720:	696b6176 53202c61 65766f6c 2c61696e     vakia, Slovenia,
20001730:	65775320 2c6e6564 69775320 72657a74      Sweden, Switzer
20001740:	646e616c 706f2f3c 6e6f6974 706f3c3e     land</option><op
20001750:	6e6f6974 6c617620 223d6575 3e223632     tion value="26">
20001760:	2b435455 303a3230 694c2030 2c617962     UTC+02:00 Libya,
20001770:	79674520 202c7470 616c614d 202c6977      Egypt, Malawi, 
20001780:	617a6f4d 7169626d 202c6575 74756f53     Mozambique, Sout
20001790:	66412068 61636972 615a202c 6169626d     h Africa, Zambia
200017a0:	695a202c 6261626d 282c6577 6d6d7553     , Zimbabwe,(Summ
200017b0:	42297265 61676c75 2c616972 70794320     er)Bulgaria, Cyp
200017c0:	2c737572 74734520 61696e6f 706f2f3c     rus, Estonia</op
200017d0:	6e6f6974 706f3c3e 6e6f6974 6c617620     tion><option val
200017e0:	223d6575 3e223732 2b435455 303a3230     ue="27">UTC+02:0
200017f0:	69462030 6e616c6e 47202c64 63656572     0 Finland, Greec
20001800:	49202c65 65617273 4a202c6c 6164726f     e, Israel, Jorda
20001810:	4c202c6e 69767461 4c202c61 6e616265     n, Latvia, Leban
20001820:	202c6e6f 6874694c 696e6175 4d202c61     on, Lithuania, M
20001830:	6f646c6f 502c6176 73656c61 656e6974     oldova,Palestine
20001840:	6f52202c 696e616d 53202c61 61697279     , Romania, Syria
20001850:	7554202c 79656b72 6b55202c 6e696172     , Turkey, Ukrain
20001860:	6f2f3c65 6f697470 6f3c3e6e 6f697470     e</option><optio
20001870:	6176206e 3d65756c 22383222 4354553e     n value="28">UTC
20001880:	3a33302b 42203030 72616c65 202c7375     +03:00 Belarus, 
20001890:	62696a44 6974756f 7245202c 65727469     Djibouti, Eritre
200018a0:	45202c61 6f696874 2c616970 61724920     a, Ethiopia, Ira
200018b0:	4b202c71 61796e65 614d202c 61676164     q, Kenya, Madaga
200018c0:	72616373 7552202c 61697373 6c614b28     scar, Russia(Kal
200018d0:	6e696e69 64617267 6c624f20 29747361     iningrad Oblast)
200018e0:	6153202c 20696475 62617241 2f3c6169     , Saudi Arabia</
200018f0:	6974706f 3c3e6e6f 6974706f 76206e6f     option><option v
20001900:	65756c61 3932223d 54553e22 33302b43     alue="29">UTC+03
20001910:	2030303a 74756f53 75532068 2c6e6164     :00 South Sudan,
20001920:	64755320 202c6e61 616d6f53 2c61696c      Sudan, Somalia,
20001930:	6e615420 696e617a 55202c61 646e6167      Tanzania, Ugand
20001940:	59202c61 6e656d65 706f2f3c 6e6f6974     a, Yemen</option
20001950:	706f3c3e 6e6f6974 6c617620 223d6575     ><option value="
20001960:	3e223033 2b435455 333a3330 53282030     30">UTC+03:30 (S
20001970:	656d6d75 72492972 2f3c6e61 6974706f     ummer)Iran</opti
20001980:	3c3e6e6f 6974706f 76206e6f 65756c61     on><option value
20001990:	3133223d 54553e22 34302b43 2030303a     ="31">UTC+04:00 
200019a0:	656d7241 2c61696e 657a4120 69616272     Armenia, Azerbai
200019b0:	2c6e616a 6f654720 61696772 614d202c     jan, Georgia, Ma
200019c0:	74697275 2c737569 616d4f20 52202c6e     uritius, Oman, R
200019d0:	69737375 45282061 706f7275 296e6165     ussia (European)
200019e0:	7965532c 6c656863 2c73656c 696e5520     ,Seychelles, Uni
200019f0:	20646574 62617241 696d4520 65746172     ted Arab Emirate
20001a00:	6f2f3c73 6f697470 6f3c3e6e 6f697470     s</option><optio
20001a10:	6176206e 3d65756c 22323322 4354553e     n value="32">UTC
20001a20:	3a34302b 41203033 61686766 7473696e     +04:30 Afghanist
20001a30:	2f3c6e61 6974706f 3c3e6e6f 6974706f     an</option><opti
20001a40:	76206e6f 65756c61 3333223d 54553e22     on value="33">UT
20001a50:	35302b43 2030303a 617a614b 7473686b     C+05:00 Kazakhst
20001a60:	28206e61 74736557 4d202c29 69646c61     an (West), Maldi
20001a70:	2c736576 6b615020 61747369 55202c6e     ves, Pakistan, U
20001a80:	6b65627a 61747369 6f2f3c6e 6f697470     zbekistan</optio
20001a90:	6f3c3e6e 6f697470 6176206e 3d65756c     n><option value=
20001aa0:	22343322 4354553e 3a35302b 49203033     "34">UTC+05:30 I
20001ab0:	6169646e 7253202c 614c2069 3c616b6e     ndia, Sri Lanka<
20001ac0:	74706f2f 3e6e6f69 74706f3c 206e6f69     /option><option 
20001ad0:	756c6176 33223d65 553e2235 302b4354     value="35">UTC+0
20001ae0:	35343a35 70654e20 2f3c6c61 6974706f     5:45 Nepal</opti
20001af0:	3c3e6e6f 6974706f 76206e6f 65756c61     on><option value
20001b00:	3633223d 54553e22 36302b43 2030303a     ="36">UTC+06:00 
20001b10:	617a614b 7473686b 28206e61 74736f6d     Kazakhstan (most
20001b20:	42202c29 6c676e61 73656461 52202c68     ), Bangladesh, R
20001b30:	69737375 55282061 3a6c6172 65765320     ussia (Ural: Sve
20001b40:	6f6c6472 206b7376 616c624f 202c7473     rdlovsk Oblast, 
20001b50:	6c656843 69626179 4f6b736e 73616c62     ChelyabinskOblas
20001b60:	2f3c2974 6974706f 3c3e6e6f 6974706f     t)</option><opti
20001b70:	76206e6f 65756c61 3733223d 54553e22     on value="37">UT
20001b80:	36302b43 2030333a 6f636f43 73492073     C+06:30 Cocos Is
20001b90:	646e616c 4d202c73 6d6e6179 2f3c7261     lands, Myanmar</
20001ba0:	6974706f 3c3e6e6f 6974706f 76206e6f     option><option v
20001bb0:	65756c61 3833223d 54553e22 37302b43     alue="38">UTC+07
20001bc0:	2030303a 616b614a 2c617472 73755220     :00 Jakarta, Rus
20001bd0:	20616973 766f4e28 6269736f 6b737269     sia (Novosibirsk
20001be0:	6c624f20 29747361 6854202c 616c6961      Oblast), Thaila
20001bf0:	202c646e 74656956 3c6d616e 74706f2f     nd, Vietnam</opt
20001c00:	3e6e6f69 74706f3c 206e6f69 756c6176     ion><option valu
20001c10:	33223d65 553e2239 302b4354 30303a38     e="39">UTC+08:00
20001c20:	69684320 202c616e 676e6f48 6e6f4b20      China, Hong Kon
20001c30:	52202c67 69737375 4b282061 6e736172     g, Russia (Krasn
20001c40:	7261796f 4b206b73 29696172 614d202c     oyarsk Krai), Ma
20001c50:	7379616c 202c6169 6c696850 69707069     laysia, Philippi
20001c60:	2c73656e 676e6953 726f7061 54202c65     nes,Singapore, T
20001c70:	61776961 6d202c6e 2074736f 4d20666f     aiwan, most of M
20001c80:	6f676e6f 2c61696c 73655720 6e726574     ongolia, Western
20001c90:	73754120 6c617274 2f3c6169 6974706f      Australia</opti
20001ca0:	3c3e6e6f 6974706f 76206e6f 65756c61     on><option value
20001cb0:	3034223d 54553e22 39302b43 2030303a     ="40">UTC+09:00 
20001cc0:	65726f4b 45202c61 20747361 6f6d6954     Korea, East Timo
20001cd0:	52202c72 69737375 49282061 74756b72     r, Russia (Irkut
20001ce0:	4f206b73 73616c62 202c2974 6170614a     sk Oblast), Japa
20001cf0:	6f2f3c6e 6f697470 6f3c3e6e 6f697470     n</option><optio
20001d00:	6176206e 3d65756c 22313422 4354553e     n value="41">UTC
20001d10:	3a39302b 41203033 72747375 61696c61     +09:30 Australia
20001d20:	6f4e2820 65687472 54206e72 69727265      (Northern Terri
20001d30:	79726f74 53283b29 656d6d75 75412972     tory);(Summer)Au
20001d40:	61727473 2061696c 756f5328 41206874     stralia (South A
20001d50:	72747375 61696c61 6f2f3c29 6f697470     ustralia)</optio
20001d60:	6f3c3e6e 6f697470 6176206e 3d65756c     n><option value=
20001d70:	22323422 4354553e 3a30312b 52203030     "42">UTC+10:00 R
20001d80:	69737375 5a282061 79616261 736c616b     ussia (Zabaykals
20001d90:	4b20796b 29696172 5328203b 656d6d75     ky Krai); (Summe
20001da0:	75412972 61727473 2061696c 77654e28     r)Australia (New
20001db0:	756f5320 57206874 73656c61 7551202c      South Wales, Qu
20001dc0:	736e6565 646e616c 7361542c 696e616d     eensland,Tasmani
20001dd0:	56202c61 6f746369 29616972 706f2f3c     a, Victoria)</op
20001de0:	6e6f6974 706f3c3e 6e6f6974 6c617620     tion><option val
20001df0:	223d6575 3e223334 2b435455 333a3031     ue="43">UTC+10:3
20001e00:	6f4c2030 48206472 2065776f 616c7349     0 Lord Howe Isla
20001e10:	2f3c646e 6974706f 3c3e6e6f 6974706f     nd</option><opti
20001e20:	76206e6f 65756c61 3434223d 54553e22     on value="44">UT
20001e30:	31312b43 2030303a 2077654e 656c6143     C+11:00 New Cale
20001e40:	696e6f64 52202c61 69737375 50282061     donia, Russia (P
20001e50:	6f6d6972 796b7372 61724b20 202c2969     rimorsky Krai), 
20001e60:	6f6c6f53 206e6f6d 616c7349 3c73646e     Solomon Islands<
20001e70:	74706f2f 3e6e6f69 74706f3c 206e6f69     /option><option 
20001e80:	756c6176 34223d65 553e2235 312b4354     value="45">UTC+1
20001e90:	30333a31 726f4e20 6b6c6f66 6c734920     1:30 Norfolk Isl
20001ea0:	3c646e61 74706f2f 3e6e6f69 74706f3c     and</option><opt
20001eb0:	206e6f69 756c6176 34223d65 553e2236     ion value="46">U
20001ec0:	312b4354 30303a32 6a694620 52202c69     TC+12:00 Fiji, R
20001ed0:	69737375 4b282061 68636d61 616b7461     ussia (Kamchatka
20001ee0:	61724b20 283b2969 6d6d7553 4e297265      Krai);(Summer)N
20001ef0:	5a207765 616c6165 2f3c646e 6974706f     ew Zealand</opti
20001f00:	3c3e6e6f 6974706f 76206e6f 65756c61     on><option value
20001f10:	3734223d 54553e22 32312b43 2035343a     ="47">UTC+12:45 
20001f20:	6d755328 2972656d 2077654e 6c61655a     (Summer)New Zeal
20001f30:	3c646e61 74706f2f 3e6e6f69 74706f3c     and</option><opt
20001f40:	206e6f69 756c6176 34223d65 553e2238     ion value="48">U
20001f50:	312b4354 30303a33 6e6f5420 2f3c6167     TC+13:00 Tonga</
20001f60:	6974706f 3c3e6e6f 6974706f 76206e6f     option><option v
20001f70:	65756c61 3934223d 54553e22 34312b43     alue="49">UTC+14
20001f80:	2030303a 6972694b 69746162 694c2820     :00 Kiribati (Li
20001f90:	4920656e 6e616c73 3c297364 74706f2f     ne Islands)</opt
20001fa0:	3e6e6f69 65732f3c 7463656c 642f3c3e     ion></select></d
20001fb0:	3c3e7669 74747562 69206e6f 6d223d64     iv><button id="m
20001fc0:	74756279 226e6f74 636e6f20 6b63696c     ybutton" onclick
20001fd0:	6176223d 6164696c 6f466574 29286d72     ="validateForm()
20001fe0:	75533e22 74696d62 75622f3c 6e6f7474     ">Submit</button
20001ff0:	642f3c3e 3c3e7669 3c3e7262 3c3e7262     ></div><br><br><
20002000:	20766964 73616c63 63223d73 61746e6f     div class="conta
20002010:	72656e69 64692022 6c41223d 226d7261     iner" id="Alarm"
20002020:	31683c3e 3d646920 61654822 676e6964     ><h1 id="Heading
20002030:	65523e22 73727563 206e6f69 65646f4d     ">Recursion Mode
20002040:	31682f3c 72683c3e 3d646920 6e694c22     </h1><hr id="Lin
20002050:	3c3e2265 6d726f66 3d646920 616c6122     e"><form id="ala
20002060:	6f466d72 3e226d72 6261743c 7320656c     rmForm"><table s
20002070:	656c7974 6977223d 3a687464 30303120     tyle="width: 100
20002080:	3e223b25 6f62743c 3c3e7964 3c3e7274     %;"><tbody><tr><
20002090:	543e6874 20656d69 636e7973 206e6f20     th>Time sync on 
200020a0:	656d6974 68742f3c 68743c3e 6d69543e     time</th><th>Tim
200020b0:	79732065 6f20636e 6144206e 2f3c7379     e sync on Days</
200020c0:	3c3e6874 3e72742f 3e72743c 2064743c     th></tr><tr><td 
200020d0:	6c797473 74223d65 2d747865 67696c61     style="text-alig
200020e0:	63203a6e 65746e65 3e223b72 62616c3c     n: center;"><lab
200020f0:	66206c65 223d726f 72616c61 6d69546d     el for="alarmTim
20002100:	6e6f5f65 69543e22 3c3a656d 62616c2f     e_on">Time:</lab
20002110:	3c3e6c65 75706e69 79742074 223d6570     el><input type="
20002120:	656d6974 64692022 6c61223d 546d7261     time" id="alarmT
20002130:	5f656d69 20226e6f 656d616e 6c61223d     ime_on" name="al
20002140:	546d7261 22656d69 71657220 65726975     armTime" require
20002150:	22223d64 72623c3e 72623c3e 742f3c3e     d=""><br><br></t
20002160:	743c3e64 74732064 3d656c79 64617022     d><td style="pad
20002170:	676e6964 66656c2d 39203a74 223b6d65     ding-left: 9em;"
20002180:	616c3c3e 3e6c6562 706e693c 74207475     ><label><input t
20002190:	3d657079 65686322 6f626b63 6e202278     ype="checkbox" n
200021a0:	3d656d61 616c6122 61446d72 20227379     ame="alarmDays" 
200021b0:	756c6176 73223d65 61646e75 6e6f5f79     value="sunday_on
200021c0:	53203e22 61646e75 6c2f3c79 6c656261     "> Sunday</label
200021d0:	72623c3e 616c3c3e 3e6c6562 706e693c     ><br><label><inp
200021e0:	74207475 3d657079 65686322 6f626b63     ut type="checkbo
200021f0:	6e202278 3d656d61 616c6122 61446d72     x" name="alarmDa
20002200:	20227379 756c6176 6d223d65 61646e6f     ys" value="monda
20002210:	6e6f5f79 4d203e22 61646e6f 6c2f3c79     y_on"> Monday</l
20002220:	6c656261 72623c3e 616c3c3e 3e6c6562     abel><br><label>
20002230:	706e693c 74207475 3d657079 65686322     <input type="che
20002240:	6f626b63 6e202278 3d656d61 616c6122     ckbox" name="ala
20002250:	61446d72 20227379 756c6176 74223d65     rmDays" value="t
20002260:	64736575 6f5f7961 203e226e 73657554     uesday_on"> Tues
20002270:	3c796164 62616c2f 3c3e6c65 3c3e7262     day</label><br><
20002280:	6562616c 693c3e6c 7475706e 70797420     label><input typ
20002290:	63223d65 6b636568 22786f62 6d616e20     e="checkbox" nam
200022a0:	61223d65 6d72616c 73796144 61762022     e="alarmDays" va
200022b0:	3d65756c 64657722 6473656e 6f5f7961     lue="wednesday_o
200022c0:	203e226e 6e646557 61647365 6c2f3c79     n"> Wednesday</l
200022d0:	6c656261 72623c3e 616c3c3e 3e6c6562     abel><br><label>
200022e0:	706e693c 74207475 3d657079 65686322     <input type="che
200022f0:	6f626b63 6e202278 3d656d61 616c6122     ckbox" name="ala
20002300:	61446d72 20227379 756c6176 74223d65     rmDays" value="t
20002310:	73727568 5f796164 3e226e6f 75685420     hursday_on"> Thu
20002320:	61647372 6c2f3c79 6c656261 72623c3e     rsday</label><br
20002330:	616c3c3e 3e6c6562 706e693c 74207475     ><label><input t
20002340:	3d657079 65686322 6f626b63 6e202278     ype="checkbox" n
20002350:	3d656d61 616c6122 61446d72 20227379     ame="alarmDays" 
20002360:	756c6176 66223d65 61646972 6e6f5f79     value="friday_on
20002370:	46203e22 61646972 6c2f3c79 6c656261     "> Friday</label
20002380:	72623c3e 616c3c3e 3e6c6562 706e693c     ><br><label><inp
20002390:	74207475 3d657079 65686322 6f626b63     ut type="checkbo
200023a0:	6e202278 3d656d61 616c6122 61446d72     x" name="alarmDa
200023b0:	20227379 756c6176 73223d65 72757461     ys" value="satur
200023c0:	5f796164 3e226e6f 74615320 61647275     day_on"> Saturda
200023d0:	6c2f3c79 6c656261 72623c3e 72623c3e     y</label><br><br
200023e0:	742f3c3e 2f3c3e64 3c3e7274 3c3e7274     ></td></tr><tr><
200023f0:	543e6874 20656d69 636e7953 66666f20     th>Time Sync off
20002400:	6d697420 742f3c65 743c3e68 69543e68      time</th><th>Ti
20002410:	7320656d 20636e79 2066666f 73796144     me sync off Days
20002420:	68742f3c 742f3c3e 743c3e72 743c3e72     </th></tr><tr><t
20002430:	74732064 3d656c79 78657422 6c612d74     d style="text-al
20002440:	3a6e6769 6e656320 3b726574 6c3c3e22     ign: center;"><l
20002450:	6c656261 726f6620 6c61223d 546d7261     abel for="alarmT
20002460:	5f656d69 2266666f 6d69543e 2f3c3a65     ime_off">Time:</
20002470:	6562616c 693c3e6c 7475706e 70797420     label><input typ
20002480:	74223d65 22656d69 3d646920 616c6122     e="time" id="ala
20002490:	69546d72 6f5f656d 20226666 656d616e     rmTime_off" name
200024a0:	6c61223d 546d7261 22656d69 71657220     ="alarmTime" req
200024b0:	65726975 22223d64 72623c3e 72623c3e     uired=""><br><br
200024c0:	742f3c3e 743c3e64 74732064 3d656c79     ></td><td style=
200024d0:	64617022 676e6964 66656c2d 39203a74     "padding-left: 9
200024e0:	223b6d65 616c3c3e 3e6c6562 706e693c     em;"><label><inp
200024f0:	74207475 3d657079 65686322 6f626b63     ut type="checkbo
20002500:	6e202278 3d656d61 616c6122 61446d72     x" name="alarmDa
20002510:	20227379 756c6176 73223d65 61646e75     ys" value="sunda
20002520:	666f5f79 203e2266 646e7553 2f3c7961     y_off"> Sunday</
20002530:	6562616c 623c3e6c 6c3c3e72 6c656261     label><br><label
20002540:	6e693c3e 20747570 65707974 6863223d     ><input type="ch
20002550:	626b6365 2022786f 656d616e 6c61223d     eckbox" name="al
20002560:	446d7261 22737961 6c617620 223d6575     armDays" value="
20002570:	646e6f6d 6f5f7961 3e226666 6e6f4d20     monday_off"> Mon
20002580:	3c796164 62616c2f 3c3e6c65 3c3e7262     day</label><br><
20002590:	6562616c 693c3e6c 7475706e 70797420     label><input typ
200025a0:	63223d65 6b636568 22786f62 6d616e20     e="checkbox" nam
200025b0:	61223d65 6d72616c 73796144 61762022     e="alarmDays" va
200025c0:	3d65756c 65757422 79616473 66666f5f     lue="tuesday_off
200025d0:	54203e22 64736575 2f3c7961 6562616c     "> Tuesday</labe
200025e0:	623c3e6c 6c3c3e72 6c656261 6e693c3e     l><br><label><in
200025f0:	20747570 65707974 6863223d 626b6365     put type="checkb
20002600:	2022786f 656d616e 6c61223d 446d7261     ox" name="alarmD
20002610:	22737961 6c617620 223d6575 6e646577     ays" value="wedn
20002620:	61647365 666f5f79 203e2266 6e646557     esday_off"> Wedn
20002630:	61647365 6c2f3c79 6c656261 72623c3e     esday</label><br
20002640:	616c3c3e 3e6c6562 706e693c 74207475     ><label><input t
20002650:	3d657079 65686322 6f626b63 6e202278     ype="checkbox" n
20002660:	3d656d61 616c6122 61446d72 20227379     ame="alarmDays" 
20002670:	756c6176 74223d65 73727568 5f796164     value="thursday_
20002680:	2266666f 6854203e 64737275 2f3c7961     off"> Thursday</
20002690:	6562616c 623c3e6c 6c3c3e72 6c656261     label><br><label
200026a0:	6e693c3e 20747570 65707974 6863223d     ><input type="ch
200026b0:	626b6365 2022786f 656d616e 6c61223d     eckbox" name="al
200026c0:	446d7261 22737961 6c617620 223d6575     armDays" value="
200026d0:	64697266 6f5f7961 3e226666 69724620     friday_off"> Fri
200026e0:	3c796164 62616c2f 3c3e6c65 3c3e7262     day</label><br><
200026f0:	6562616c 693c3e6c 7475706e 70797420     label><input typ
20002700:	63223d65 6b636568 22786f62 6d616e20     e="checkbox" nam
20002710:	61223d65 6d72616c 73796144 61762022     e="alarmDays" va
20002720:	3d65756c 74617322 61647275 666f5f79     lue="saturday_of
20002730:	533e2266 72757461 3c796164 62616c2f     f">Saturday</lab
20002740:	3c3e6c65 3c3e7262 3c3e7262 3e64742f     el><br><br></td>
20002750:	72742f3c 742f3c3e 79646f62 742f3c3e     </tr></tbody></t
20002760:	656c6261 75623c3e 6e6f7474 70797420     able><button typ
20002770:	62223d65 6f747475 6f20226e 696c636e     e="button" oncli
20002780:	223d6b63 41746573 6d72616c 3e222928     ck="setAlarm()">
20002790:	20746553 72616c41 622f3c6d 6f747475     Set Alarm</butto
200027a0:	2f3c3e6e 6d726f66 642f3c3e 3c3e7669     n></form></div><
200027b0:	69726373 663e7470 74636e75 206e6f69     script>function 
200027c0:	64616f6c 616c615f 645f6d72 28617461     load_alarm_data(
200027d0:	667b2029 68637465 672f2728 615f7465     ) {fetch('/get_a
200027e0:	6d72616c 742e2927 286e6568 70736572     larm').then(resp
200027f0:	65736e6f 203e3d20 2066697b 65722128     onse => {if (!re
20002800:	6e6f7073 6f2e6573 7b20296b 6f726874     sponse.ok) {thro
20002810:	656e2077 72452077 28726f72 74654e27     w new Error('Net
20002820:	6b726f77 73657220 736e6f70 61772065     work response wa
20002830:	6f6e2073 6b6f2074 7d3b2927 75746572     s not ok');}retu
20002840:	72206e72 6f707365 2e65736e 74786574     rn response.text
20002850:	7d3b2928 68742e29 64286e65 20617461     ();}).then(data 
20002860:	7b203e3d 736e6f63 2e656c6f 28676f6c     => {console.log(
20002870:	616c4127 64206d72 20617461 65636572     'Alarm data rece
20002880:	64657669 202c273a 61746164 6f633b29     ived:', data);co
20002890:	2074736e 656e696c 203d2073 61746164     nst lines = data
200028a0:	6972742e 2e29286d 696c7073 0a272874     .trim().split('.
200028b0:	633b2927 74736e6f 68685b20 2c6e6f5f     ');const [hh_on,
200028c0:	5f6d6d20 202c6e6f 6f5f6868 202c6666      mm_on, hh_off, 
200028d0:	6f5f6d6d 202c6666 5f6e7573 202c6e6f     mm_off, sun_on, 
200028e0:	5f6e6f6d 202c6e6f 5f657574 202c6e6f     mon_on, tue_on, 
200028f0:	5f646577 202c6e6f 5f756874 202c6e6f     wed_on, thu_on, 
20002900:	5f697266 202c6e6f 5f746173 202c6e6f     fri_on, sat_on, 
20002910:	5f6e7573 2c66666f 6e6f6d20 66666f5f     sun_off, mon_off
20002920:	7574202c 666f5f65 77202c66 6f5f6465     , tue_off, wed_o
20002930:	202c6666 5f756874 2c66666f 69726620     ff, thu_off, fri
20002940:	66666f5f 6173202c 666f5f74 3d205d66     _off, sat_off] =
20002950:	6e696c20 305b7365 70732e5d 2874696c      lines[0].split(
20002960:	29272c27 6e6f633b 66207473 616d726f     ',');const forma
20002970:	64657474 6f5f4848 203d206e 6f5f6868     ttedHH_on = hh_o
20002980:	6f742e6e 69727453 2928676e 6461702e     n.toString().pad
20002990:	72617453 2c322874 22302220 6f633b29     Start(2, "0");co
200029a0:	2074736e 6d726f66 65747461 5f4d4d64     nst formattedMM_
200029b0:	3d206e6f 5f6d6d20 742e6e6f 7274536f     on = mm_on.toStr
200029c0:	28676e69 61702e29 61745364 32287472     ing().padStart(2
200029d0:	3022202c 633b2922 74736e6f 726f6620     , "0");const for
200029e0:	7474616d 48486465 66666f5f 68203d20     mattedHH_off = h
200029f0:	666f5f68 6f742e66 69727453 2928676e     h_off.toString()
20002a00:	6461702e 72617453 2c322874 22302220     .padStart(2, "0"
20002a10:	6f633b29 2074736e 6d726f66 65747461     );const formatte
20002a20:	5f4d4d64 2066666f 6d6d203d 66666f5f     dMM_off = mm_off
20002a30:	536f742e 6e697274 2e292867 53646170     .toString().padS
20002a40:	74726174 202c3228 29223022 6e6f633b     tart(2, "0");con
20002a50:	74207473 49656d69 7475706e 3d206e4f     st timeInputOn =
20002a60:	636f6420 6e656d75 65672e74 656c4574      document.getEle
20002a70:	746e656d 64497942 6c612228 546d7261     mentById("alarmT
20002a80:	5f656d69 29226e6f 6d69743b 706e4965     ime_on");timeInp
20002a90:	6e4f7475 6c61762e 3d206575 7b246020     utOn.value = `${
20002aa0:	6d726f66 65747461 5f484864 3a7d6e6f     formattedHH_on}:
20002ab0:	6f667b24 74616d72 4d646574 6e6f5f4d     ${formattedMM_on
20002ac0:	633b607d 74736e6f 6d697420 706e4965     }`;const timeInp
20002ad0:	664f7475 203d2066 75636f64 746e656d     utOff = document
20002ae0:	7465672e 6d656c45 42746e65 28644979     .getElementById(
20002af0:	616c6122 69546d72 6f5f656d 29226666     "alarmTime_off")
20002b00:	6d69743b 706e4965 664f7475 61762e66     ;timeInputOff.va
20002b10:	2065756c 2460203d 726f667b 7474616d     lue = `${formatt
20002b20:	48486465 66666f5f 7b243a7d 6d726f66     edHH_off}:${form
20002b30:	65747461 5f4d4d64 7d66666f 6f633b60     attedMM_off}`;co
20002b40:	2074736e 63656863 786f626b 3d207365     nst checkboxes =
20002b50:	636f6420 6e656d75 75712e74 53797265      document.queryS
20002b60:	63656c65 41726f74 27286c6c 75706e69     electorAll('inpu
20002b70:	616e5b74 223d656d 72616c61 7961446d     t[name="alarmDay
20002b80:	275d2273 6f663b29 63282072 74736e6f     s"]');for (const
20002b90:	65686320 6f626b63 666f2078 65686320      checkbox of che
20002ba0:	6f626b63 29736578 6f637b20 2074736e     ckboxes) {const 
20002bb0:	20796164 6863203d 626b6365 762e786f     day = checkbox.v
20002bc0:	65756c61 74656c3b 43736920 6b636568     alue;let isCheck
20002bd0:	3d206465 733b3020 63746977 64282068     ed = 0;switch (d
20002be0:	20297961 7361637b 73222065 61646e75     ay) {case "sunda
20002bf0:	6e6f5f79 73693a22 63656843 2064656b     y_on":isChecked 
20002c00:	7573203d 6e6f5f6e 6572623b 633b6b61     = sun_on;break;c
20002c10:	20657361 6e6f6d22 5f796164 3a226e6f     ase "monday_on":
20002c20:	68437369 656b6365 203d2064 5f6e6f6d     isChecked = mon_
20002c30:	623b6e6f 6b616572 7361633b 74222065     on;break;case "t
20002c40:	64736575 6f5f7961 693a226e 65684373     uesday_on":isChe
20002c50:	64656b63 74203d20 6f5f6575 72623b6e     cked = tue_on;br
20002c60:	3b6b6165 65736163 65772220 73656e64     eak;case "wednes
20002c70:	5f796164 3a226e6f 68437369 656b6365     day_on":isChecke
20002c80:	203d2064 5f646577 623b6e6f 6b616572     d = wed_on;break
20002c90:	7361633b 74222065 73727568 5f796164     ;case "thursday_
20002ca0:	3a226e6f 68437369 656b6365 203d2064     on":isChecked = 
20002cb0:	5f756874 623b6e6f 6b616572 7361633b     thu_on;break;cas
20002cc0:	66222065 61646972 6e6f5f79 73693a22     e "friday_on":is
20002cd0:	63656843 2064656b 7266203d 6e6f5f69     Checked = fri_on
20002ce0:	6572623b 633b6b61 20657361 74617322     ;break;case "sat
20002cf0:	61647275 6e6f5f79 73693a22 63656843     urday_on":isChec
20002d00:	2064656b 6173203d 6e6f5f74 6572623b     ked = sat_on;bre
20002d10:	633b6b61 20657361 6e757322 5f796164     ak;case "sunday_
20002d20:	2266666f 4373693a 6b636568 3d206465     off":isChecked =
20002d30:	6e757320 66666f5f 6572623b 633b6b61      sun_off;break;c
20002d40:	20657361 6e6f6d22 5f796164 2266666f     ase "monday_off"
20002d50:	4373693a 6b636568 3d206465 6e6f6d20     :isChecked = mon
20002d60:	66666f5f 6572623b 633b6b61 20657361     _off;break;case 
20002d70:	65757422 79616473 66666f5f 73693a22     "tuesday_off":is
20002d80:	63656843 2064656b 7574203d 666f5f65     Checked = tue_of
20002d90:	72623b66 3b6b6165 65736163 65772220     f;break;case "we
20002da0:	73656e64 5f796164 2266666f 4373693a     dnesday_off":isC
20002db0:	6b636568 3d206465 64657720 66666f5f     hecked = wed_off
20002dc0:	6572623b 633b6b61 20657361 75687422     ;break;case "thu
20002dd0:	61647372 666f5f79 693a2266 65684373     rsday_off":isChe
20002de0:	64656b63 74203d20 6f5f7568 623b6666     cked = thu_off;b
20002df0:	6b616572 7361633b 66222065 61646972     reak;case "frida
20002e00:	666f5f79 693a2266 65684373 64656b63     y_off":isChecked
20002e10:	66203d20 6f5f6972 623b6666 6b616572      = fri_off;break
20002e20:	7361633b 73222065 72757461 5f796164     ;case "saturday_
20002e30:	2266666f 4373693a 6b636568 3d206465     off":isChecked =
20002e40:	74617320 66666f5f 6572623b 7d3b6b61      sat_off;break;}
20002e50:	63656863 786f626b 6568632e 64656b63     checkbox.checked
20002e60:	69203d20 65684373 64656b63 3d3d3d20      = isChecked ===
20002e70:	22312220 297d7d3b 7461632e 65286863      "1";}}).catch(e
20002e80:	726f7272 203e3d20 6e6f637b 656c6f73     rror => {console
20002e90:	7272652e 2728726f 6f727245 2c273a72     .error('Error:',
20002ea0:	72726520 3b29726f 7d3b297d 636e7566      error);});}func
20002eb0:	6e6f6974 74657320 72616c41 2029286d     tion setAlarm() 
20002ec0:	6e6f637b 61207473 6d72616c 656d6954     {const alarmTime
20002ed0:	75706e49 203d2074 75636f64 746e656d     Input = document
20002ee0:	7465672e 6d656c45 42746e65 28644979     .getElementById(
20002ef0:	616c6127 69546d72 6f5f656d 2e29276e     'alarmTime_on').
20002f00:	756c6176 6f633b65 2074736e 72616c61     value;const alar
20002f10:	7961446d 65684373 6f626b63 20736578     mDaysCheckboxes 
20002f20:	6f64203d 656d7563 712e746e 79726575     = document.query
20002f30:	656c6553 726f7463 286c6c41 706e6927     SelectorAll('inp
20002f40:	6e5b7475 3d656d61 616c6122 61446d72     ut[name="alarmDa
20002f50:	5d227379 633b2927 74736e6f 6f685b20     ys"]');const [ho
20002f60:	5f737275 202c6e6f 756e696d 5f736574     urs_on, minutes_
20002f70:	205d6e6f 6c61203d 546d7261 49656d69     on] = alarmTimeI
20002f80:	7475706e 6c70732e 27287469 3b29273a     nput.split(':');
20002f90:	736e6f63 685b2074 7372756f 66666f5f     const [hours_off
20002fa0:	696d202c 6574756e 666f5f73 3d205d66     , minutes_off] =
20002fb0:	636f6420 6e656d75 65672e74 656c4574      document.getEle
20002fc0:	746e656d 64497942 6c612728 546d7261     mentById('alarmT
20002fd0:	5f656d69 2766666f 61762e29 2e65756c     ime_off').value.
20002fe0:	696c7073 3a272874 633b2927 74736e6f     split(':');const
20002ff0:	776f6e20 6e203d20 44207765 28657461      now = new Date(
20003000:	6f633b29 2074736e 56796164 65756c61     );const dayValue
20003010:	203d2073 61727241 72662e79 61286d6f     s = Array.from(a
20003020:	6d72616c 73796144 63656843 786f626b     larmDaysCheckbox
20003030:	2e297365 2870616d 63656863 786f626b     es).map(checkbox
20003040:	203e3d20 63656863 786f626b 6568632e      => checkbox.che
20003050:	64656b63 27203f20 3a202731 27302720     cked ? '1' : '0'
20003060:	6f633b29 2074736e 53767363 6e697274     );const csvStrin
20003070:	203d2067 687b2460 7372756f 7d6e6f5f     g = `${hours_on}
20003080:	6d7b247a 74756e69 6f5f7365 247a7d6e     z${minutes_on}z$
20003090:	756f687b 6f5f7372 7a7d6666 696d7b24     {hours_off}z${mi
200030a0:	6574756e 666f5f73 247a7d66 7961647b     nutes_off}z${day
200030b0:	756c6156 6a2e7365 286e696f 29277a27     Values.join('z')
200030c0:	633b607d 6f736e6f 6c2e656c 2228676f     }`;console.log("
200030d0:	20565343 7074754f 223a7475 6f633b29     CSV Output:");co
200030e0:	6c6f736e 6f6c2e65 73632867 72745376     nsole.log(csvStr
200030f0:	29676e69 7261763b 6c727520 6e203d20     ing);var url = n
20003100:	55207765 27284c52 7465732f 616c615f     ew URL('/set_ala
20003110:	2c276d72 6e697720 2e776f64 61636f6c     rm', window.loca
20003120:	6e6f6974 69726f2e 296e6967 6c72753b     tion.origin);url
20003130:	6165732e 50686372 6d617261 70612e73     .searchParams.ap
20003140:	646e6570 61762728 2765756c 7363202c     pend('value', cs
20003150:	72745376 29676e69 7465663b 75286863     vString);fetch(u
20003160:	2e296c72 6e656874 73657228 736e6f70     rl).then(respons
20003170:	3e3d2065 66697b20 65722820 6e6f7073     e => {if (respon
20003180:	6f2e6573 7b20296b 72656c61 53272874     se.ok) {alert('S
20003190:	69747465 4120676e 6d72616c 63755320     etting Alarm Suc
200031a0:	73736563 276c7566 657d3b29 2065736c     cessful');}else 
200031b0:	656c617b 27287472 74746553 20676e69     {alert('Setting 
200031c0:	72616c41 6146206d 64656c69 7d3b2927     Alarm Failed');}
200031d0:	646e6977 6c2e776f 7461636f 2e6e6f69     window.location.
200031e0:	66657268 22203d20 7d3b222f 667d3b29     href = "/";});}f
200031f0:	74636e75 206e6f69 696c6176 65746164     unction validate
20003200:	6d726f46 7b202928 20726176 61446e6f     Form() {var onDa
20003210:	69546574 3d20656d 636f6420 6e656d75     teTime = documen
20003220:	65672e74 656c4574 746e656d 64497942     t.getElementById
20003230:	69742228 7953656d 6e4f636e 65746144     ("timeSyncOnDate
20003240:	656d6954 762e2922 65756c61 7261763b     Time").value;var
20003250:	66666f20 65746144 656d6954 64203d20      offDateTime = d
20003260:	6d75636f 2e746e65 45746567 656d656c     ocument.getEleme
20003270:	7942746e 22286449 656d6974 636e7953     ntById("timeSync
20003280:	4466664f 54657461 22656d69 61762e29     OffDateTime").va
20003290:	3b65756c 20726176 77536e6f 68637469     lue;var onSwitch
200032a0:	64203d20 6d75636f 2e746e65 45746567      = document.getE
200032b0:	656d656c 7942746e 22286449 656d6974     lementById("time
200032c0:	636e7953 77536e4f 68637469 632e2922     SyncOnSwitch").c
200032d0:	6b636568 3f206465 3a203120 763b3020     hecked ? 1 : 0;v
200032e0:	6f207261 77536666 68637469 64203d20     ar offSwitch = d
200032f0:	6d75636f 2e746e65 45746567 656d656c     ocument.getEleme
20003300:	7942746e 22286449 656d6974 636e7953     ntById("timeSync
20003310:	5366664f 63746977 2e292268 63656863     OffSwitch").chec
20003320:	2064656b 2031203f 3b30203a 20726176     ked ? 1 : 0;var 
20003330:	70456e6f 2068636f 6e6f203d 65746144     onEpoch = onDate
20003340:	656d6954 6e203f20 44207765 28657461     Time ? new Date(
20003350:	61446e6f 69546574 2e29656d 54746567     onDateTime).getT
20003360:	28656d69 202f2029 30303031 6e203a20     ime() / 1000 : n
20003370:	3b6c6c75 20726176 4566666f 68636f70     ull;var offEpoch
20003380:	6f203d20 61446666 69546574 3f20656d      = offDateTime ?
20003390:	77656e20 74614420 666f2865 74614466      new Date(offDat
200033a0:	6d695465 672e2965 69547465 2928656d     eTime).getTime()
200033b0:	31202f20 20303030 756e203a 763b6c6c      / 1000 : null;v
200033c0:	75207261 3d206c72 77656e20 4c525520     ar url = new URL
200033d0:	742f2728 73656d69 27636e79 6977202c     ('/timesync', wi
200033e0:	776f646e 636f6c2e 6f697461 726f2e6e     ndow.location.or
200033f0:	6e696769 72753b29 65732e6c 68637261     igin);url.search
20003400:	61726150 612e736d 6e657070 6f272864     Params.append('o
20003410:	6977536e 27686374 6e6f202c 74697753     nSwitch', onSwit
20003420:	3b296863 2e6c7275 72616573 61506863     ch);url.searchPa
20003430:	736d6172 7070612e 28646e65 446e6f27     rams.append('onD
20003440:	54657461 27656d69 6e6f202c 636f7045     ateTime', onEpoc
20003450:	753b2968 732e6c72 63726165 72615068     h);url.searchPar
20003460:	2e736d61 65707061 2728646e 5366666f     ams.append('offS
20003470:	63746977 202c2768 5366666f 63746977     witch', offSwitc
20003480:	753b2968 732e6c72 63726165 72615068     h);url.searchPar
20003490:	2e736d61 65707061 2728646e 4466666f     ams.append('offD
200034a0:	54657461 27656d69 666f202c 6f704566     ateTime', offEpo
200034b0:	3b296863 2e6c7275 72616573 61506863     ch);url.searchPa
200034c0:	736d6172 7070612e 28646e65 6d697427     rams.append('tim
200034d0:	6e6f7a65 202c2765 75636f64 746e656d     ezone', document
200034e0:	7465672e 6d656c45 42746e65 28644979     .getElementById(
200034f0:	6d695422 6e6f5a65 2e292265 756c6176     "TimeZone").valu
20003500:	663b2965 68637465 6c727528 68742e29     e);fetch(url).th
20003510:	72286e65 6f707365 2065736e 7b203e3d     en(response => {
20003520:	28206669 70736572 65736e6f 296b6f2e     if (response.ok)
20003530:	6c617b20 28747265 6d695427 79532065      {alert('Time Sy
20003540:	5320636e 65636375 75667373 3b29276c     nc Successful');
20003550:	736c657d 617b2065 7472656c 69542728     }else {alert('Ti
20003560:	5320656d 20636e79 6c696146 29276465     me Sync Failed')
20003570:	69777d3b 776f646e 636f6c2e 6f697461     ;}window.locatio
20003580:	72682e6e 3d206665 222f2220 3b297d3b     n.href = "/";});
20003590:	75746572 74206e72 3b657572 6e75667d     return true;}fun
200035a0:	6f697463 6573206e 6e694d74 65746144     ction setMinDate
200035b0:	656d6954 7b202928 20726176 20776f6e     Time() {var now 
200035c0:	656e203d 61442077 29286574 7261763b     = new Date();var
200035d0:	776f6e20 69727453 3d20676e 776f6e20      nowString = now
200035e0:	496f742e 74534f53 676e6972 732e2928     .toISOString().s
200035f0:	6563696c 202c3028 3b293631 75636f64     lice(0, 16);docu
20003600:	746e656d 7465672e 6d656c45 42746e65     ment.getElementB
20003610:	28644979 6d697422 6e795365 446e4f63     yId("timeSyncOnD
20003620:	54657461 22656d69 696d2e29 203d206e     ateTime").min = 
20003630:	53776f6e 6e697274 6f643b67 656d7563     nowString;docume
20003640:	672e746e 6c457465 6e656d65 49794274     nt.getElementByI
20003650:	74222864 53656d69 4f636e79 61446666     d("timeSyncOffDa
20003660:	69546574 2922656d 6e696d2e 6e203d20     teTime").min = n
20003670:	7453776f 676e6972 75667d3b 6974636e     owString;}functi
20003680:	70206e6f 6c75706f 54657461 7a656d69     on populateTimez
20003690:	73656e6f 7b202928 20726176 656d6974     ones() {var time
200036a0:	656e6f7a 203d2073 76207b5b 65756c61     zones = [{ value
200036b0:	2c30203a 62616c20 203a6c65 43545522     : 0, label: "UTC
200036c0:	3a32312d 42203030 72656b61 6c734920     -12:00 Baker Isl
200036d0:	2c646e61 776f4820 646e616c 6c734920     and, Howland Isl
200036e0:	20646e61 746f6228 6e752068 61686e69     and (both uninha
200036f0:	65746962 20222964 207b2c7d 756c6176     bited)" },{ valu
20003700:	31203a65 616c202c 3a6c6562 54552220     e: 1, label: "UT
20003710:	31312d43 2030303a 72656d41 6e616369     C-11:00 American
20003720:	6d615320 202c616f 6f6d6153 7d202261      Samoa, Samoa" }
20003730:	76207b2c 65756c61 2c32203a 62616c20     ,{ value: 2, lab
20003740:	203a6c65 43545522 3a30312d 28203030     el: "UTC-10:00 (
20003750:	6d6d7553 46297265 636e6572 6f502068     Summer)French Po
20003760:	656e796c 20616973 736f6d28 202c2974     lynesia (most), 
20003770:	74696e55 53206465 65746174 41282073     United States (A
20003780:	7475656c 206e6169 616c7349 2c73646e     leutian Islands,
20003790:	77614820 29696961 2c7d2022 6176207b      Hawaii)" },{ va
200037a0:	3a65756c 202c3320 6562616c 22203a6c     lue: 3, label: "
200037b0:	2d435455 333a3930 614d2030 65757172     UTC-09:30 Marque
200037c0:	20736173 616c7349 2273646e 7b2c7d20     sas Islands" },{
200037d0:	6c617620 203a6575 6c202c34 6c656261      value: 4, label
200037e0:	5522203a 302d4354 30303a39 6d614720     : "UTC-09:00 Gam
200037f0:	72656962 6c734920 73646e61 7553283b     bier Islands;(Su
20003800:	72656d6d 696e5529 20646574 74617453     mmer)United Stat
20003810:	28207365 74736f6d 20666f20 73616c41     es (most of Alas
20003820:	2229616b 7b2c7d20 6c617620 203a6575     ka)" },{ value: 
20003830:	6c202c35 6c656261 5522203a 302d4354     5, label: "UTC-0
20003840:	30303a38 75532820 72656d6d 6e614329     8:00 (Summer)Can
20003850:	20616461 736f6d28 666f2074 69724220     ada (most of Bri
20003860:	68736974 6c6f4320 69626d75 202c2961     tish Columbia), 
20003870:	6978654d 28206f63 616a6142 6c614320     Mexico (Baja Cal
20003880:	726f6669 2961696e 2c7d2022 6176207b     ifornia)" },{ va
20003890:	3a65756c 202c3620 6562616c 22203a6c     lue: 6, label: "
200038a0:	2d435455 303a3830 6e552030 64657469     UTC-08:00 United
200038b0:	61745320 20736574 6c614328 726f6669      States (Califor
200038c0:	2c61696e 736f6d20 666f2074 76654e20     nia, most of Nev
200038d0:	2c616461 736f6d20 666f2074 65724f20     ada, most of Ore
200038e0:	2c6e6f67 73615720 676e6968 206e6f74     gon, Washington 
200038f0:	61747328 29296574 2c7d2022 6176207b     (state))" },{ va
20003900:	3a65756c 202c3720 6562616c 22203a6c     lue: 7, label: "
20003910:	2d435455 303a3730 654d2030 6f636978     UTC-07:00 Mexico
20003920:	6f532820 61726f6e 55202c29 6574696e      (Sonora), Unite
20003930:	74532064 73657461 72412820 6e6f7a69     d States (Arizon
20003940:	203b2961 6d755328 2972656d 616e6143     a); (Summer)Cana
20003950:	28206164 65626c41 29617472 2c7d2022     da (Alberta)" },
20003960:	6176207b 3a65756c 202c3820 6562616c     { value: 8, labe
20003970:	22203a6c 2d435455 303a3730 654d2030     l: "UTC-07:00 Me
20003980:	6f636978 68432820 61756869 29617568     xico (Chihuahua)
20003990:	6e55202c 64657469 61745320 20736574     , United States 
200039a0:	6c6f4328 6461726f 2022296f 207b2c7d     (Colorado)" },{ 
200039b0:	756c6176 39203a65 616c202c 3a6c6562     value: 9, label:
200039c0:	54552220 36302d43 2030303a 74736f43      "UTC-06:00 Cost
200039d0:	69522061 202c6163 53206c45 61766c61     a Rica, El Salva
200039e0:	2c726f64 75634520 726f6461 61472820     dor, Ecuador (Ga
200039f0:	6170616c 20736f67 616c7349 2973646e     lapagos Islands)
20003a00:	7547202c 6d657461 2c616c61 6e6f4820     , Guatemala, Hon
20003a10:	61727564 7d202273 76207b2c 65756c61     duras" },{ value
20003a20:	3031203a 616c202c 3a6c6562 54552220     : 10, label: "UT
20003a30:	36302d43 2030303a 6978654d 28206f63     C-06:00 Mexico (
20003a40:	74736f6d 4e202c29 72616369 61756761     most), Nicaragua
20003a50:	7553283b 72656d6d 6e614329 20616461     ;(Summer)Canada 
20003a60:	6e614d28 626f7469 53202c61 616b7361     (Manitoba, Saska
20003a70:	65686374 296e6177 6e55202c 64657469     tchewan), United
20003a80:	61745320 20736574 6c6c4928 696f6e69      States (Illinoi
20003a90:	6d202c73 2074736f 5420666f 73617865     s, most of Texas
20003aa0:	7d202229 76207b2c 65756c61 3131203a     )" },{ value: 11
20003ab0:	616c202c 3a6c6562 54552220 35302d43     , label: "UTC-05
20003ac0:	2030303a 6f6c6f43 6169626d 7543202c     :00 Colombia, Cu
20003ad0:	202c6162 61756345 20726f64 6e6f6328     ba, Ecuador (con
20003ae0:	656e6974 6c61746e 48202c29 69746961     tinental), Haiti
20003af0:	614a202c 6369616d 50202c61 6d616e61     , Jamaica, Panam
20003b00:	50202c61 22757265 7b2c7d20 6c617620     a, Peru" },{ val
20003b10:	203a6575 202c3231 6562616c 22203a6c     ue: 12, label: "
20003b20:	2d435455 303a3530 53282030 656d6d75     UTC-05:00 (Summe
20003b30:	61432972 6164616e 6f6d2820 6f207473     r)Canada (most o
20003b40:	6e4f2066 69726174 6d202c6f 2074736f     f Ontario, most 
20003b50:	5120666f 65626575 20222963 207b2c7d     of Quebec)" },{ 
20003b60:	756c6176 31203a65 6c202c33 6c656261     value: 13, label
20003b70:	5522203a 302d4354 30303a35 696e5520     : "UTC-05:00 Uni
20003b80:	20646574 74617453 28207365 74736f6d     ted States (most
20003b90:	20666f20 726f6c46 2c616469 6f654720      of Florida, Geo
20003ba0:	61696772 614d202c 63617373 65737568     rgia, Massachuse
20003bb0:	2c737474 736f6d20 666f2074 63694d20     tts, most of Mic
20003bc0:	61676968 4e202c6e 59207765 2c6b726f     higan, New York,
20003bd0:	726f4e20 43206874 6c6f7261 2c616e69      North Carolina,
20003be0:	69684f20 57202c6f 69687361 6f74676e      Ohio, Washingto
20003bf0:	2e44206e 22292e43 7b2c7d20 6c617620     n D.C.)" },{ val
20003c00:	203a6575 202c3431 6562616c 22203a6c     ue: 14, label: "
20003c10:	2d435455 333a3430 65562030 757a656e     UTC-04:30 Venezu
20003c20:	22616c65 7b2c7d20 6c617620 203a6575     ela" },{ value: 
20003c30:	202c3531 6562616c 22203a6c 2d435455     15, label: "UTC-
20003c40:	303a3430 6f422030 6976696c 42202c61     04:00 Bolivia, B
20003c50:	697a6172 4128206c 6f7a616d 2973616e     razil (Amazonas)
20003c60:	6843202c 20656c69 6e6f6328 656e6974     , Chile (contine
20003c70:	6c61746e 44202c29 6e696d6f 6e616369     ntal), Dominican
20003c80:	70655220 696c6275 43202c63 64616e61      Republic, Canad
20003c90:	4e282061 2061766f 746f6353 2c296169     a (Nova Scotia),
20003ca0:	72615020 61756761 7d202279 76207b2c      Paraguay" },{ v
20003cb0:	65756c61 3631203a 616c202c 3a6c6562     alue: 16, label:
20003cc0:	54552220 34302d43 2030303a 72657550      "UTC-04:00 Puer
20003cd0:	52206f74 2c6f6369 69725420 6164696e     to Rico, Trinida
20003ce0:	6e612064 6f542064 6f676162 2c7d2022     d and Tobago" },
20003cf0:	6176207b 3a65756c 2c373120 62616c20     { value: 17, lab
20003d00:	203a6c65 43545522 3a33302d 43203033     el: "UTC-03:30 C
20003d10:	64616e61 4e282061 6f667765 6c646e75     anada (Newfoundl
20003d20:	29646e61 2c7d2022 6176207b 3a65756c     and)" },{ value:
20003d30:	2c383120 62616c20 203a6c65 43545522      18, label: "UTC
20003d40:	3a33302d 41203030 6e656772 616e6974     -03:00 Argentina
20003d50:	5328203b 656d6d75 42202972 697a6172     ; (Summer) Brazi
20003d60:	4228206c 69736172 2c61696c 6f695220     l (Brasilia, Rio
20003d70:	20656420 656e614a 2c6f7269 6f615320      de Janeiro, Sao
20003d80:	75615020 2c296f6c 736f6d20 666f2074      Paulo), most of
20003d90:	65724720 616c6e65 202c646e 67757255      Greenland, Urug
20003da0:	22796175 7b2c7d20 6c617620 203a6575     uay" },{ value: 
20003db0:	202c3931 6562616c 22203a6c 2d435455     19, label: "UTC-
20003dc0:	303a3230 72422030 6c697a61 65462820     02:00 Brazil (Fe
20003dd0:	6e616e72 64206f64 6f4e2065 686e6f72     rnando de Noronh
20003de0:	202c2961 74756f53 65472068 6967726f     a), South Georgi
20003df0:	6e612061 68742064 6f532065 20687475     a and the South 
20003e00:	646e6153 68636977 6c734920 73646e61     Sandwich Islands
20003e10:	2c7d2022 6176207b 3a65756c 2c303220     " },{ value: 20,
20003e20:	62616c20 203a6c65 43545522 3a31302d      label: "UTC-01:
20003e30:	50203030 7574726f 206c6167 6f7a4128     00 Portugal (Azo
20003e40:	29736572 6143202c 56206570 65647265     res), Cape Verde
20003e50:	2c7d2022 6176207b 3a65756c 2c313220     " },{ value: 21,
20003e60:	62616c20 203a6c65 43545522 3030b1c2      label: "UTC..00
20003e70:	2030303a 65746f43 49276420 72696f76     :00 Cote d'Ivoir
20003e80:	46202c65 656f7261 6c734920 73646e61     e, Faroe Islands
20003e90:	6847202c 2c616e61 65634920 646e616c     , Ghana, Iceland
20003ea0:	6553202c 6167656e 28203b6c 6d6d7553     , Senegal; (Summ
20003eb0:	20297265 6c657249 2c646e61 726f5020     er) Ireland, Por
20003ec0:	61677574 6328206c 69746e6f 746e656e     tugal (continent
20003ed0:	61206c61 4d20646e 69656461 22296172     al and Madeira)"
20003ee0:	7b2c7d20 6c617620 203a6575 202c3232      },{ value: 22, 
20003ef0:	6562616c 22203a6c c2435455 3a3030b1     label: "UTC..00:
20003f00:	53203030 6e696170 61432820 7972616e     00 Spain (Canary
20003f10:	6c734920 73646e61 4d202c29 636f726f      Islands), Moroc
20003f20:	202c6f63 74696e55 4b206465 64676e69     co, United Kingd
20003f30:	20226d6f 207b2c7d 756c6176 32203a65     om" },{ value: 2
20003f40:	6c202c33 6c656261 5522203a 302b4354     3, label: "UTC+0
20003f50:	30303a31 676e4120 2c616c6f 6d614320     1:00 Angola, Cam
20003f60:	6f6f7265 4e202c6e 72656769 202c6169     eroon, Nigeria, 
20003f70:	696e7554 3b616973 75532820 72656d6d     Tunisia; (Summer
20003f80:	626c4129 61696e61 6c41202c 69726567     )Albania, Algeri
20003f90:	41202c61 72747375 202c6169 676c6542     a, Austria, Belg
20003fa0:	2c6d7569 736f4220 2061696e 20646e61     ium, Bosnia and 
20003fb0:	7a726548 766f6765 22616e69 7b2c7d20     Herzegovina" },{
20003fc0:	6c617620 203a6575 202c3432 6562616c      value: 24, labe
20003fd0:	22203a6c 2b435455 303a3130 70532030     l: "UTC+01:00 Sp
20003fe0:	206e6961 6e6f6328 656e6974 6c61746e     ain (continental
20003ff0:	43202c29 74616f72 202c6169 63657a43     ), Croatia, Czec
20004000:	65522068 6c627570 202c6369 6d6e6544     h Republic, Denm
20004010:	2c6b7261 72654720 796e616d 7548202c     ark, Germany, Hu
20004020:	7261676e 49202c79 796c6174 694b202c     ngary, Italy, Ki
20004030:	6168736e 202c6173 6f736f4b 20226f76     nshasa, Kosovo" 
20004040:	207b2c7d 756c6176 32203a65 6c202c35     },{ value: 25, l
20004050:	6c656261 5522203a 302b4354 30303a31     abel: "UTC+01:00
20004060:	63614d20 6e6f6465 202c6169 6e617246      Macedonia, Fran
20004070:	28206563 7274656d 6c6f706f 6e617469     ce (metropolitan
20004080:	74202c29 4e206568 65687465 6e616c72     ), the Netherlan
20004090:	202c7364 77726f4e 202c7961 616c6f50     ds, Norway, Pola
200040a0:	202c646e 62726553 202c6169 766f6c53     nd, Serbia, Slov
200040b0:	61696b61 6c53202c 6e65766f 202c6169     akia, Slovenia, 
200040c0:	64657753 202c6e65 74697753 6c72657a     Sweden, Switzerl
200040d0:	22646e61 7b2c7d20 6c617620 203a6575     and" },{ value: 
200040e0:	202c3632 6562616c 22203a6c 2b435455     26, label: "UTC+
200040f0:	303a3230 694c2030 2c617962 79674520     02:00 Libya, Egy
20004100:	202c7470 616c614d 202c6977 617a6f4d     pt, Malawi, Moza
20004110:	7169626d 202c6575 74756f53 66412068     mbique, South Af
20004120:	61636972 615a202c 6169626d 695a202c     rica, Zambia, Zi
20004130:	6261626d 202c6577 6d755328 2972656d     mbabwe, (Summer)
20004140:	676c7542 61697261 7943202c 73757270     Bulgaria, Cyprus
20004150:	7345202c 696e6f74 7d202261 76207b2c     , Estonia" },{ v
20004160:	65756c61 3732203a 616c202c 3a6c6562     alue: 27, label:
20004170:	54552220 32302b43 2030303a 6c6e6946      "UTC+02:00 Finl
20004180:	2c646e61 65724720 2c656365 72734920     and, Greece, Isr
20004190:	2c6c6561 726f4a20 2c6e6164 74614c20     ael, Jordan, Lat
200041a0:	2c616976 62654c20 6e6f6e61 694c202c     via, Lebanon, Li
200041b0:	61756874 2c61696e 6c6f4d20 61766f64     thuania, Moldova
200041c0:	6150202c 7473656c 2c656e69 6d6f5220     , Palestine, Rom
200041d0:	61696e61 7953202c 2c616972 72755420     ania, Syria, Tur
200041e0:	2c79656b 726b5520 656e6961 2c7d2022     key, Ukraine" },
200041f0:	6176207b 3a65756c 2c383220 62616c20     { value: 28, lab
20004200:	203a6c65 43545522 3a33302b 42203030     el: "UTC+03:00 B
20004210:	72616c65 202c7375 62696a44 6974756f     elarus, Djibouti
20004220:	7245202c 65727469 45202c61 6f696874     , Eritrea, Ethio
20004230:	2c616970 61724920 4b202c71 61796e65     pia, Iraq, Kenya
20004240:	614d202c 61676164 72616373 7552202c     , Madagascar, Ru
20004250:	61697373 614b2820 696e696c 6172676e     ssia (Kaliningra
20004260:	624f2064 7473616c 53202c29 69647561     d Oblast), Saudi
20004270:	61724120 22616962 7b2c7d20 6c617620      Arabia" },{ val
20004280:	203a6575 202c3932 6562616c 22203a6c     ue: 29, label: "
20004290:	2b435455 303a3330 6f532030 20687475     UTC+03:00 South 
200042a0:	61647553 53202c6e 6e616475 6f53202c     Sudan, Sudan, So
200042b0:	696c616d 54202c61 617a6e61 2c61696e     malia, Tanzania,
200042c0:	61675520 2c61646e 6d655920 20226e65      Uganda, Yemen" 
200042d0:	207b2c7d 756c6176 33203a65 6c202c30     },{ value: 30, l
200042e0:	6c656261 5522203a 302b4354 30333a33     abel: "UTC+03:30
200042f0:	75532820 72656d6d 61724929 7d20226e      (Summer)Iran" }
20004300:	76207b2c 65756c61 3133203a 616c202c     ,{ value: 31, la
20004310:	3a6c6562 54552220 34302b43 2030303a     bel: "UTC+04:00 
20004320:	656d7241 2c61696e 657a4120 69616272     Armenia, Azerbai
20004330:	2c6e616a 6f654720 61696772 614d202c     jan, Georgia, Ma
20004340:	74697275 2c737569 616d4f20 52202c6e     uritius, Oman, R
20004350:	69737375 45282061 706f7275 296e6165     ussia (European)
20004360:	6553202c 65686379 73656c6c 6e55202c     , Seychelles, Un
20004370:	64657469 61724120 6d452062 74617269     ited Arab Emirat
20004380:	20227365 207b2c7d 756c6176 33203a65     es" },{ value: 3
20004390:	6c202c32 6c656261 5522203a 302b4354     2, label: "UTC+0
200043a0:	30333a34 67664120 696e6168 6e617473     4:30 Afghanistan
200043b0:	2c7d2022 6176207b 3a65756c 2c333320     " },{ value: 33,
200043c0:	62616c20 203a6c65 43545522 3a35302b      label: "UTC+05:
200043d0:	4b203030 6b617a61 61747368 5728206e     00 Kazakhstan (W
200043e0:	29747365 614d202c 7669646c 202c7365     est), Maldives, 
200043f0:	696b6150 6e617473 7a55202c 696b6562     Pakistan, Uzbeki
20004400:	6e617473 2c7d2022 6176207b 3a65756c     stan" },{ value:
20004410:	2c343320 62616c20 203a6c65 43545522      34, label: "UTC
20004420:	3a35302b 49203033 6169646e 7253202c     +05:30 India, Sr
20004430:	614c2069 22616b6e 7b2c7d20 6c617620     i Lanka" },{ val
20004440:	203a6575 202c3533 6562616c 22203a6c     ue: 35, label: "
20004450:	2b435455 343a3530 654e2035 226c6170     UTC+05:45 Nepal"
20004460:	7b2c7d20 6c617620 203a6575 202c3633      },{ value: 36, 
20004470:	6562616c 22203a6c 2b435455 303a3630     label: "UTC+06:0
20004480:	614b2030 686b617a 6e617473 6f6d2820     0 Kazakhstan (mo
20004490:	2c297473 6e614220 64616c67 2c687365     st), Bangladesh,
200044a0:	73755220 20616973 61725528 53203a6c      Russia (Ural: S
200044b0:	64726576 73766f6c 624f206b 7473616c     verdlovsk Oblast
200044c0:	6843202c 61796c65 736e6962 624f206b     , Chelyabinsk Ob
200044d0:	7473616c 7d202229 76207b2c 65756c61     last)" },{ value
200044e0:	3733203a 616c202c 3a6c6562 54552220     : 37, label: "UT
200044f0:	36302b43 2030333a 6f636f43 73492073     C+06:30 Cocos Is
20004500:	646e616c 4d202c73 6d6e6179 20227261     lands, Myanmar" 
20004510:	207b2c7d 756c6176 33203a65 6c202c38     },{ value: 38, l
20004520:	6c656261 5522203a 302b4354 30303a37     abel: "UTC+07:00
20004530:	6b614a20 61747261 7552202c 61697373      Jakarta, Russia
20004540:	6f4e2820 69736f76 73726962 624f206b      (Novosibirsk Ob
20004550:	7473616c 54202c29 6c696168 2c646e61     last), Thailand,
20004560:	65695620 6d616e74 2c7d2022 6176207b      Vietnam" },{ va
20004570:	3a65756c 2c393320 62616c20 203a6c65     lue: 39, label: 
20004580:	43545522 3a38302b 43203030 616e6968     "UTC+08:00 China
20004590:	6f48202c 4b20676e 2c676e6f 73755220     , Hong Kong, Rus
200045a0:	20616973 61724b28 796f6e73 6b737261     sia (Krasnoyarsk
200045b0:	61724b20 202c2969 616c614d 61697379      Krai), Malaysia
200045c0:	6850202c 70696c69 656e6970 53202c73     , Philippines, S
200045d0:	61676e69 65726f70 6154202c 6e617769     ingapore, Taiwan
200045e0:	6f6d202c 6f207473 6f4d2066 6c6f676e     , most of Mongol
200045f0:	202c6169 74736557 206e7265 74737541     ia, Western Aust
20004600:	696c6172 7d202261 76207b2c 65756c61     ralia" },{ value
20004610:	3034203a 616c202c 3a6c6562 54552220     : 40, label: "UT
20004620:	39302b43 2030303a 65726f4b 45202c61     C+09:00 Korea, E
20004630:	20747361 6f6d6954 52202c72 69737375     ast Timor, Russi
20004640:	49282061 74756b72 4f206b73 73616c62     a (Irkutsk Oblas
20004650:	202c2974 6170614a 7d20226e 76207b2c     t), Japan" },{ v
20004660:	65756c61 3134203a 616c202c 3a6c6562     alue: 41, label:
20004670:	54552220 39302b43 2030333a 74737541      "UTC+09:30 Aust
20004680:	696c6172 4e282061 6874726f 206e7265     ralia (Northern 
20004690:	72726554 726f7469 283b2979 6d6d7553     Territory);(Summ
200046a0:	41297265 72747375 61696c61 6f532820     er)Australia (So
200046b0:	20687475 74737541 696c6172 20222961     uth Australia)" 
200046c0:	207b2c7d 756c6176 34203a65 6c202c32     },{ value: 42, l
200046d0:	6c656261 5522203a 312b4354 30303a30     abel: "UTC+10:00
200046e0:	73755220 20616973 62615a28 616b7961      Russia (Zabayka
200046f0:	796b736c 61724b20 203b2969 6d755328     lsky Krai); (Sum
20004700:	2972656d 74737541 696c6172 4e282061     mer)Australia (N
20004710:	53207765 6874756f 6c615720 202c7365     ew South Wales, 
20004720:	65657551 616c736e 202c646e 6d736154     Queensland, Tasm
20004730:	61696e61 6956202c 726f7463 22296169     ania, Victoria)"
20004740:	7b2c7d20 6c617620 203a6575 202c3334      },{ value: 43, 
20004750:	6562616c 22203a6c 2b435455 333a3031     label: "UTC+10:3
20004760:	6f4c2030 48206472 2065776f 616c7349     0 Lord Howe Isla
20004770:	2022646e 207b2c7d 756c6176 34203a65     nd" },{ value: 4
20004780:	6c202c34 6c656261 5522203a 312b4354     4, label: "UTC+1
20004790:	30303a31 77654e20 6c614320 6e6f6465     1:00 New Caledon
200047a0:	202c6169 73737552 28206169 6d697250     ia, Russia (Prim
200047b0:	6b73726f 724b2079 2c296961 6c6f5320     orsky Krai), Sol
200047c0:	6e6f6d6f 6c734920 73646e61 2c7d2022     omon Islands" },
200047d0:	6176207b 3a65756c 2c353420 62616c20     { value: 45, lab
200047e0:	203a6c65 43545522 3a31312b 4e203033     el: "UTC+11:30 N
200047f0:	6f66726f 49206b6c 6e616c73 7d202264     orfolk Island" }
20004800:	76207b2c 65756c61 3634203a 616c202c     ,{ value: 46, la
20004810:	3a6c6562 54552220 32312b43 2030303a     bel: "UTC+12:00 
20004820:	696a6946 7552202c 61697373 614b2820     Fiji, Russia (Ka
20004830:	6168636d 20616b74 6961724b 53283b29     mchatka Krai);(S
20004840:	656d6d75 654e2972 655a2077 6e616c61     ummer)New Zealan
20004850:	7d202264 76207b2c 65756c61 3734203a     d" },{ value: 47
20004860:	616c202c 3a6c6562 54552220 32312b43     , label: "UTC+12
20004870:	2035343a 6d755328 2972656d 2077654e     :45 (Summer)New 
20004880:	6c61655a 22646e61 7b2c7d20 6c617620     Zealand" },{ val
20004890:	203a6575 202c3834 6562616c 22203a6c     ue: 48, label: "
200048a0:	2b435455 303a3331 6f542030 2261676e     UTC+13:00 Tonga"
200048b0:	7b2c7d20 6c617620 203a6575 202c3934      },{ value: 49, 
200048c0:	6562616c 22203a6c 2b435455 303a3431     label: "UTC+14:0
200048d0:	694b2030 61626972 28206974 656e694c     0 Kiribati (Line
200048e0:	6c734920 73646e61 7d202229 61763b5d      Islands)" }];va
200048f0:	69742072 7a5f656d 20656e6f 6f64203d     r time_zone = do
20004900:	656d7563 672e746e 6c457465 6e656d65     cument.getElemen
20004910:	49794274 54222864 5a656d69 22656e6f     tById("TimeZone"
20004920:	69743b29 6f7a656d 2e73656e 45726f66     );timezones.forE
20004930:	28686361 636e7566 6e6f6974 69742820     ach(function (ti
20004940:	6f7a656d 2029656e 7261767b 74706f20     mezone) {var opt
20004950:	206e6f69 6f64203d 656d7563 632e746e     ion = document.c
20004960:	74616572 656c4565 746e656d 706f2228     reateElement("op
20004970:	6e6f6974 6f3b2922 6f697470 61762e6e     tion");option.va
20004980:	2065756c 6974203d 6f7a656d 762e656e     lue = timezone.v
20004990:	65756c61 74706f3b 2e6e6f69 74786574     alue;option.text
200049a0:	74203d20 7a656d69 2e656e6f 6562616c      = timezone.labe
200049b0:	69743b6c 7a5f656d 2e656e6f 65707061     l;time_zone.appe
200049c0:	6843646e 28646c69 6974706f 3b296e6f     ndChild(option);
200049d0:	7d3b297d 636e7566 6e6f6974 616f6c20     });}function loa
200049e0:	726f4664 7461446d 20292861 7465667b     dFormData() {fet
200049f0:	27286863 7465672f 656d6974 636e7973     ch('/gettimesync
20004a00:	742e2927 286e6568 70736572 65736e6f     ').then(response
20004a10:	203e3d20 2066697b 65722128 6e6f7073      => {if (!respon
20004a20:	6f2e6573 7b20296b 6f726874 656e2077     se.ok) {throw ne
20004a30:	72452077 28726f72 74654e27 6b726f77     w Error('Network
20004a40:	73657220 736e6f70 61772065 6f6e2073      response was no
20004a50:	6b6f2074 7d3b2927 75746572 72206e72     t ok');}return r
20004a60:	6f707365 2e65736e 74786574 7d3b2928     esponse.text();}
20004a70:	68742e29 64286e65 20617461 7b203e3d     ).then(data => {
20004a80:	736e6f63 2e656c6f 28676f6c 6d695427     console.log('Tim
20004a90:	79732065 6420636e 20617461 65636572     e sync data rece
20004aa0:	64657669 202c273a 61746164 6f633b29     ived:', data);co
20004ab0:	2074736e 656e696c 203d2073 61746164     nst lines = data
20004ac0:	6972742e 2e29286d 696c7073 0a272874     .trim().split('.
20004ad0:	633b2927 74736e6f 6e6f5b20 74697753     ');const [onSwit
20004ae0:	202c6863 61446e6f 69546574 7045656d     ch, onDateTimeEp
20004af0:	2c68636f 66666f20 74697753 202c6863     och, offSwitch, 
20004b00:	4466666f 54657461 45656d69 68636f70     offDateTimeEpoch
20004b10:	6974202c 6f5a656d 6156656e 5d65756c     , timeZoneValue]
20004b20:	6c203d20 73656e69 2e5d305b 696c7073      = lines[0].spli
20004b30:	2c272874 633b2927 74736e6f 4c6f7420     t(',');const toL
20004b40:	6c61636f 65746144 656d6954 28203d20     ocalDateTime = (
20004b50:	636f7065 6d695468 3d202965 637b203e     epochTime) => {c
20004b60:	74736e6f 74616420 203d2065 2077656e     onst date = new 
20004b70:	65746144 6f706528 69546863 2a20656d     Date(epochTime *
20004b80:	30303120 633b2930 74736e6f 66666f20      1000);const off
20004b90:	20746573 6164203d 672e6574 69547465     set = date.getTi
20004ba0:	6f7a656d 664f656e 74657366 2a202928     mezoneOffset() *
20004bb0:	30303620 633b3030 74736e6f 636f6c20      60000;const loc
20004bc0:	61446c61 3d206574 77656e20 74614420     alDate = new Dat
20004bd0:	61642865 672e6574 69547465 2928656d     e(date.getTime()
20004be0:	6f202d20 65736666 723b2974 72757465      - offset);retur
20004bf0:	6f6c206e 446c6163 2e657461 53496f74     n localDate.toIS
20004c00:	7274534f 28676e69 6c732e29 28656369     OString().slice(
20004c10:	31202c30 7d3b2936 6e6f633b 6f207473     0, 16);};const o
20004c20:	7461446e 6d695465 203d2065 6f4c6f74     nDateTime = toLo
20004c30:	446c6163 54657461 28656d69 61446e6f     calDateTime(onDa
20004c40:	69546574 7045656d 2968636f 6e6f633b     teTimeEpoch);con
20004c50:	6f207473 61446666 69546574 3d20656d     st offDateTime =
20004c60:	4c6f7420 6c61636f 65746144 656d6954      toLocalDateTime
20004c70:	66666f28 65746144 656d6954 636f7045     (offDateTimeEpoc
20004c80:	643b2968 6d75636f 2e746e65 45746567     h);document.getE
20004c90:	656d656c 7942746e 22286449 656d6974     lementById("time
20004ca0:	636e7953 77536e4f 68637469 632e2922     SyncOnSwitch").c
20004cb0:	6b636568 3d206465 536e6f20 63746977     hecked = onSwitc
20004cc0:	3d3d2068 3127203d 66693b27 6e6f2820     h === '1';if (on
20004cd0:	74697753 3d206863 27203d3d 20292731     Switch === '1') 
20004ce0:	636f647b 6e656d75 65672e74 656c4574     {document.getEle
20004cf0:	746e656d 64497942 69742228 7953656d     mentById("timeSy
20004d00:	6e4f636e 65746144 656d6954 762e2922     ncOnDateTime").v
20004d10:	65756c61 6f203d20 7461446e 6d695465     alue = onDateTim
20004d20:	647d3b65 6d75636f 2e746e65 45746567     e;}document.getE
20004d30:	656d656c 7942746e 22286449 656d6974     lementById("time
20004d40:	636e7953 5366664f 63746977 2e292268     SyncOffSwitch").
20004d50:	63656863 2064656b 666f203d 69775366     checked = offSwi
20004d60:	20686374 203d3d3d 3b273127 28206669     tch === '1';if (
20004d70:	5366666f 63746977 3d3d2068 3127203d     offSwitch === '1
20004d80:	7b202927 75636f64 746e656d 7465672e     ') {document.get
20004d90:	6d656c45 42746e65 28644979 6d697422     ElementById("tim
20004da0:	6e795365 66664f63 65746144 656d6954     eSyncOffDateTime
20004db0:	762e2922 65756c61 6f203d20 61446666     ").value = offDa
20004dc0:	69546574 7d3b656d 736e6f63 69742074     teTime;}const ti
20004dd0:	6f5a656d 6553656e 7463656c 64203d20     meZoneSelect = d
20004de0:	6d75636f 2e746e65 45746567 656d656c     ocument.getEleme
20004df0:	7942746e 22286449 656d6954 656e6f5a     ntById("TimeZone
20004e00:	743b2922 5a656d69 53656e6f 63656c65     ");timeZoneSelec
20004e10:	61762e74 2065756c 6974203d 6f5a656d     t.value = timeZo
20004e20:	6156656e 3b65756c 736e6f63 69742074     neValue;const ti
20004e30:	6f5a656d 614c656e 206c6562 6974203d     meZoneLabel = ti
20004e40:	6f5a656d 6553656e 7463656c 74706f2e     meZoneSelect.opt
20004e50:	736e6f69 6d69745b 6e6f5a65 6c655365     ions[timeZoneSel
20004e60:	2e746365 656c6573 64657463 65646e49     ect.selectedInde
20004e70:	742e5d78 3b747865 632e297d 68637461     x].text;}).catch
20004e80:	72726528 3d20726f 637b203e 6f736e6f     (error => {conso
20004e90:	652e656c 726f7272 72452728 3a726f72     le.error('Error:
20004ea0:	65202c27 726f7272 297d3b29 75667d3b     ', error);});}fu
20004eb0:	6974636e 6f206e6f 6e69576e 4c776f64     nction onWindowL
20004ec0:	2864616f 6c7b2029 4664616f 446d726f     oad() {loadFormD
20004ed0:	28617461 65733b29 6e694d74 65746144     ata();setMinDate
20004ee0:	656d6954 703b2928 6c75706f 54657461     Time();populateT
20004ef0:	7a656d69 73656e6f 6c3b2928 5f64616f     imezones();load_
20004f00:	72616c61 61645f6d 29286174 2f3c7d3b     alarm_data();}</
20004f10:	69726373 3c3e7470 646f622f 2f3c3e79     script></body></
20004f20:	6c6d7468 0000003e                       html>...

20004f28 <socknumlist>:
20004f28:	05040302 00000706                       ........

20004f30 <sntp_server>:
20004f30:	e972ccc1                                ..r.

20004f34 <tz>:
20004f34:	00000015                                ....

20004f38 <realTimeZone>:
20004f38:	c0800000                                ....

20004f3c <timezonesarray>:
20004f3c:	c1400000 c1300000 c1200000 c1180000     ..@...0... .....
20004f4c:	c1100000 c1000000 c1000000 c0e00000     ................
20004f5c:	c0e00000 c0c00000 c0c00000 c0a00000     ................
20004f6c:	c0a00000 c0a00000 c0900000 c0800000     ................
20004f7c:	c0800000 c0600000 c0400000 c0000000     ......`...@.....
20004f8c:	bf800000 00000000 00000000 3f800000     ...............?
20004f9c:	3f800000 3f800000 40000000 40000000     ...?...?...@...@
20004fac:	40400000 40400000 40600000 40800000     ..@@..@@..`@...@
20004fbc:	40900000 40a00000 40b00000 40b80000     ...@...@...@...@
20004fcc:	40c00000 40d00000 40e00000 41000000     ...@...@...@...A
20004fdc:	41100000 41180000 41200000 41280000     ...A...A.. A..(A
20004fec:	41300000 41380000 41400000 41473333     ..0A..8A..@A33GA
20004ffc:	41500000 41600000                       ..PA..`A

20005004 <receive_index_k_saved>:
20005004:	00000001                                ....

20005008 <BTN_Delay_ON>:
20005008:	0000000c                                ....

2000500c <BTN_Delay_OFF>:
2000500c:	00000005                                ....

20005010 <locked>:
20005010:	00000001                                ....

20005014 <on_receive>:
20005014:	00000001                                ....

20005018 <tv_type>:
20005018:	00000001                                ....

2000501c <PIR_Delay_ON>:
2000501c:	0000000a                                ....

20005020 <PIR_Delay_OFF>:
20005020:	000007d0                                ....

20005024 <environ>:
20005024:	20006f24                                $o. 

20005028 <SystemCoreClock>:
20005028:	00f42400                                .$..

2000502c <IR_command>:
2000502c:	00002023                                # ..

20005030 <Temp_Treshold_Min>:
20005030:	0000000a                                ....

20005034 <Temp_Treshold_Max>:
20005034:	00000028                                (...

20005038 <PIRAlarm>:
20005038:	00000001                                ....

2000503c <RS232Alarm>:
2000503c:	00000001                                ....

20005040 <IRAlarm>:
20005040:	00000001                                ....

20005044 <index_page>:
20005044:	08025abc                                .Z..

20005048 <main_page>:
20005048:	08025bec                                .[..

2000504c <firmware_page>:
2000504c:	0802bca8                                ....

20005050 <setting_page>:
20005050:	0802d6ec                                ....

20005054 <webpage_css>:
20005054:	0802e2c4                                ....

20005058 <option_str>:
20005058:	0802e7f4                                ....

2000505c <uwTickPrio>:
2000505c:	00000004                                ....

20005060 <uwTickFreq>:
20005060:	00000001                                ....

20005064 <dhcp_lease_time>:
20005064:	ffffffff                                ....

20005068 <dhcp_tick_next>:
20005068:	0000000a                                ....

2000506c <HOST_NAME>:
2000506c:	6e5a4957 00007465                       WIZnet..

20005074 <dhcp_ip_assign>:
20005074:	08019611                                ....

20005078 <dhcp_ip_update>:
20005078:	08019651                                Q...

2000507c <dhcp_ip_conflict>:
2000507c:	08019681                                ....

20005080 <sock_any_port>:
20005080:	0000c000                                ....

20005084 <WIZCHIP>:
20005084:	35570201 00303035 00000000 0801c195     ..W5500.........
20005094:	0801c19f 0801c1a9 0801c1b3 0801c1bd     ................
200050a4:	0801c1d3 00000000 00000000              ............

200050b0 <firmware>:
200050b0:	08031694                                ....

200050b4 <temp>:
200050b4:	0803169c                                ....

200050b8 <PIRState>:
200050b8:	080316a4                                ....

200050bc <IRcommand>:
200050bc:	080316b0                                ....

200050c0 <HTTPServer_ReStart>:
200050c0:	0801eded                                ....

200050c4 <HTTPServer_WDT_Reset>:
200050c4:	0801edf7                                ....

200050c8 <__sglue>:
200050c8:	00000000 00000003 2001c218              ........... 

200050d4 <_tzname>:
200050d4:	080322df 080322df                       ."..."..

200050dc <_impure_data>:
200050dc:	00000000 2001c218 2001c280 2001c2e8     ....... ... ... 
	...

20005128 <_impure_ptr>:
20005128:	200050dc 00000000                       .P. ....

20005130 <tzinfo>:
20005130:	00000001 00000000 0000004a 00000000     ........J.......
	...
20005160:	0000004a 00000000 00000000 00000000     J...............
	...

20005188 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20005188:	b580      	push	{r7, lr}
2000518a:	b088      	sub	sp, #32
2000518c:	af00      	add	r7, sp, #0
2000518e:	6078      	str	r0, [r7, #4]
20005190:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20005192:	231f      	movs	r3, #31
20005194:	18fb      	adds	r3, r7, r3
20005196:	2200      	movs	r2, #0
20005198:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000519a:	687b      	ldr	r3, [r7, #4]
2000519c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000519e:	683b      	ldr	r3, [r7, #0]
200051a0:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200051a2:	4b1a      	ldr	r3, [pc, #104]	; (2000520c <FLASH_Program_Fast+0x84>)
200051a4:	695a      	ldr	r2, [r3, #20]
200051a6:	4b19      	ldr	r3, [pc, #100]	; (2000520c <FLASH_Program_Fast+0x84>)
200051a8:	2180      	movs	r1, #128	; 0x80
200051aa:	02c9      	lsls	r1, r1, #11
200051ac:	430a      	orrs	r2, r1
200051ae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200051b0:	f3ef 8310 	mrs	r3, PRIMASK
200051b4:	60fb      	str	r3, [r7, #12]
  return(result);
200051b6:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200051b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200051ba:	b672      	cpsid	i
}
200051bc:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200051be:	e00f      	b.n	200051e0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200051c0:	697a      	ldr	r2, [r7, #20]
200051c2:	69bb      	ldr	r3, [r7, #24]
200051c4:	6812      	ldr	r2, [r2, #0]
200051c6:	601a      	str	r2, [r3, #0]
    src += 4U;
200051c8:	697b      	ldr	r3, [r7, #20]
200051ca:	3304      	adds	r3, #4
200051cc:	617b      	str	r3, [r7, #20]
    dest += 4U;
200051ce:	69bb      	ldr	r3, [r7, #24]
200051d0:	3304      	adds	r3, #4
200051d2:	61bb      	str	r3, [r7, #24]
    index++;
200051d4:	211f      	movs	r1, #31
200051d6:	187b      	adds	r3, r7, r1
200051d8:	781a      	ldrb	r2, [r3, #0]
200051da:	187b      	adds	r3, r7, r1
200051dc:	3201      	adds	r2, #1
200051de:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200051e0:	231f      	movs	r3, #31
200051e2:	18fb      	adds	r3, r7, r3
200051e4:	781b      	ldrb	r3, [r3, #0]
200051e6:	2b3f      	cmp	r3, #63	; 0x3f
200051e8:	d9ea      	bls.n	200051c0 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200051ea:	46c0      	nop			; (mov r8, r8)
200051ec:	4b07      	ldr	r3, [pc, #28]	; (2000520c <FLASH_Program_Fast+0x84>)
200051ee:	691a      	ldr	r2, [r3, #16]
200051f0:	23c0      	movs	r3, #192	; 0xc0
200051f2:	029b      	lsls	r3, r3, #10
200051f4:	4013      	ands	r3, r2
200051f6:	d1f9      	bne.n	200051ec <FLASH_Program_Fast+0x64>
200051f8:	693b      	ldr	r3, [r7, #16]
200051fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200051fc:	68bb      	ldr	r3, [r7, #8]
200051fe:	f383 8810 	msr	PRIMASK, r3
}
20005202:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20005204:	46c0      	nop			; (mov r8, r8)
20005206:	46bd      	mov	sp, r7
20005208:	b008      	add	sp, #32
2000520a:	bd80      	pop	{r7, pc}
2000520c:	40022000 	.word	0x40022000
